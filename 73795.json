{"path":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek(int).mjava","sourceNew":"  public void testBadSeek(int indexDivisor) throws IOException {\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random, reader,\n                                         \"textField2\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         false);\n\n      assertNull(termDocs);\n      reader.close();\n    }\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random, reader,\n                                         \"junk\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         false);\n      assertNull(termDocs);\n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testBadSeek(int indexDivisor) throws IOException {\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random, reader,\n                                         \"textField2\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         false);\n\n      assertNull(termDocs);\n      reader.close();\n    }\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random, reader,\n                                         \"junk\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         false);\n      assertNull(termDocs);\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek(int).mjava","sourceNew":"  public void testBadSeek(int indexDivisor) throws IOException {\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                         \"textField2\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         false);\n\n      assertNull(termDocs);\n      reader.close();\n    }\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                         \"junk\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         false);\n      assertNull(termDocs);\n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testBadSeek(int indexDivisor) throws IOException {\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random, reader,\n                                         \"textField2\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         false);\n\n      assertNull(termDocs);\n      reader.close();\n    }\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random, reader,\n                                         \"junk\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         false);\n      assertNull(termDocs);\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek(int).mjava","sourceNew":"  public void testBadSeek(int indexDivisor) throws IOException {\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                         \"textField2\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         0);\n\n      assertNull(termDocs);\n      reader.close();\n    }\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                         \"junk\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         0);\n      assertNull(termDocs);\n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testBadSeek(int indexDivisor) throws IOException {\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                         \"textField2\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         false);\n\n      assertNull(termDocs);\n      reader.close();\n    }\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                         \"junk\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         false);\n      assertNull(termDocs);\n      reader.close();\n    }\n  }\n\n","bugFix":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek(int).mjava","sourceNew":"  public void testBadSeek(int indexDivisor) throws IOException {\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                         \"textField2\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         0);\n\n      assertNull(termDocs);\n      reader.close();\n    }\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                         \"junk\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         0);\n      assertNull(termDocs);\n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testBadSeek(int indexDivisor) throws IOException {\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                         \"textField2\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         false);\n\n      assertNull(termDocs);\n      reader.close();\n    }\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                         \"junk\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         false);\n      assertNull(termDocs);\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek(int).mjava","sourceNew":"  public void testBadSeek(int indexDivisor) throws IOException {\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                         \"textField2\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         0);\n\n      assertNull(termDocs);\n      reader.close();\n    }\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                         \"junk\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         0);\n      assertNull(termDocs);\n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testBadSeek(int indexDivisor) throws IOException {\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                         \"textField2\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         false);\n\n      assertNull(termDocs);\n      reader.close();\n    }\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                         \"junk\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         false);\n      assertNull(termDocs);\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek(int).mjava","sourceNew":null,"sourceOld":"  public void testBadSeek(int indexDivisor) throws IOException {\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                         \"textField2\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         0);\n\n      assertNull(termDocs);\n      reader.close();\n    }\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                         \"junk\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         0);\n      assertNull(termDocs);\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermDocs#testBadSeek(int).mjava","sourceNew":null,"sourceOld":"  public void testBadSeek(int indexDivisor) throws IOException {\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                         \"textField2\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         0);\n\n      assertNull(termDocs);\n      reader.close();\n    }\n    {\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(info, indexDivisor, newIOContext(random()));\n      assertTrue(reader != null);\n      DocsEnum termDocs = _TestUtil.docs(random(), reader,\n                                         \"junk\",\n                                         new BytesRef(\"bad\"),\n                                         reader.getLiveDocs(),\n                                         null,\n                                         0);\n      assertNull(termDocs);\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a45bec74b98f6fc05f52770cfb425739e6563960":["02331260bb246364779cb6f04919ca47900d01bb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","02331260bb246364779cb6f04919ca47900d01bb"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","02331260bb246364779cb6f04919ca47900d01bb"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a45bec74b98f6fc05f52770cfb425739e6563960"],"02331260bb246364779cb6f04919ca47900d01bb":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"a45bec74b98f6fc05f52770cfb425739e6563960":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"02331260bb246364779cb6f04919ca47900d01bb":["a45bec74b98f6fc05f52770cfb425739e6563960","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}