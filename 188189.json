{"path":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#getFileContent(BlobRepository.BlobContent[ByteBuffer],String).mjava","commits":[{"id":"5fab1d180f47e9924e0e56501b42034b3476f2b1","date":1460974879,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#getFileContent(BlobRepository.BlobContent[ByteBuffer],String).mjava","pathOld":"/dev/null","sourceNew":"    public ByteBuffer getFileContent(BlobRepository.BlobContent<ByteBuffer> blobContent,  String entryName) throws IOException {\n      ByteBuffer buff = blobContent.get();\n      ByteArrayInputStream zipContents = new ByteArrayInputStream(buff.array(), buff.arrayOffset(), buff.limit());\n      ZipInputStream zis = new ZipInputStream(zipContents);\n      try {\n        ZipEntry entry;\n        while ((entry = zis.getNextEntry()) != null) {\n          if (entryName == null || entryName.equals(entry.getName())) {\n            SimplePostTool.BAOS out = new SimplePostTool.BAOS();\n            byte[] buffer = new byte[2048];\n            int size;\n            while ((size = zis.read(buffer, 0, buffer.length)) != -1) {\n              out.write(buffer, 0, size);\n            }\n            out.close();\n            return out.getByteBuffer();\n          }\n        }\n      } finally {\n        zis.closeEntry();\n      }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#getFileContent(BlobRepository.BlobContent[ByteBuffer],String).mjava","pathOld":"/dev/null","sourceNew":"    public ByteBuffer getFileContent(BlobRepository.BlobContent<ByteBuffer> blobContent,  String entryName) throws IOException {\n      ByteBuffer buff = blobContent.get();\n      ByteArrayInputStream zipContents = new ByteArrayInputStream(buff.array(), buff.arrayOffset(), buff.limit());\n      ZipInputStream zis = new ZipInputStream(zipContents);\n      try {\n        ZipEntry entry;\n        while ((entry = zis.getNextEntry()) != null) {\n          if (entryName == null || entryName.equals(entry.getName())) {\n            SimplePostTool.BAOS out = new SimplePostTool.BAOS();\n            byte[] buffer = new byte[2048];\n            int size;\n            while ((size = zis.read(buffer, 0, buffer.length)) != -1) {\n              out.write(buffer, 0, size);\n            }\n            out.close();\n            return out.getByteBuffer();\n          }\n        }\n      } finally {\n        zis.closeEntry();\n      }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#getFileContent(BlobRepository.BlobContent[ByteBuffer],String).mjava","sourceNew":null,"sourceOld":"    public ByteBuffer getFileContent(BlobRepository.BlobContent<ByteBuffer> blobContent,  String entryName) throws IOException {\n      ByteBuffer buff = blobContent.get();\n      ByteArrayInputStream zipContents = new ByteArrayInputStream(buff.array(), buff.arrayOffset(), buff.limit());\n      ZipInputStream zis = new ZipInputStream(zipContents);\n      try {\n        ZipEntry entry;\n        while ((entry = zis.getNextEntry()) != null) {\n          if (entryName == null || entryName.equals(entry.getName())) {\n            SimplePostTool.BAOS out = new SimplePostTool.BAOS();\n            byte[] buffer = new byte[2048];\n            int size;\n            while ((size = zis.read(buffer, 0, buffer.length)) != -1) {\n              out.write(buffer, 0, size);\n            }\n            out.close();\n            return out.getByteBuffer();\n          }\n        }\n      } finally {\n        zis.closeEntry();\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#getFileContent(BlobRepository.BlobContent[ByteBuffer],String).mjava","pathOld":"/dev/null","sourceNew":"    public ByteBuffer getFileContent(BlobRepository.BlobContent<ByteBuffer> blobContent,  String entryName) throws IOException {\n      ByteBuffer buff = blobContent.get();\n      ByteArrayInputStream zipContents = new ByteArrayInputStream(buff.array(), buff.arrayOffset(), buff.limit());\n      ZipInputStream zis = new ZipInputStream(zipContents);\n      try {\n        ZipEntry entry;\n        while ((entry = zis.getNextEntry()) != null) {\n          if (entryName == null || entryName.equals(entry.getName())) {\n            SimplePostTool.BAOS out = new SimplePostTool.BAOS();\n            byte[] buffer = new byte[2048];\n            int size;\n            while ((size = zis.read(buffer, 0, buffer.length)) != -1) {\n              out.write(buffer, 0, size);\n            }\n            out.close();\n            return out.getByteBuffer();\n          }\n        }\n      } finally {\n        zis.closeEntry();\n      }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#getFileContent(BlobRepository.BlobContent[ByteBuffer],String).mjava","pathOld":"/dev/null","sourceNew":"    public ByteBuffer getFileContent(BlobRepository.BlobContent<ByteBuffer> blobContent,  String entryName) throws IOException {\n      ByteBuffer buff = blobContent.get();\n      ByteArrayInputStream zipContents = new ByteArrayInputStream(buff.array(), buff.arrayOffset(), buff.limit());\n      ZipInputStream zis = new ZipInputStream(zipContents);\n      try {\n        ZipEntry entry;\n        while ((entry = zis.getNextEntry()) != null) {\n          if (entryName == null || entryName.equals(entry.getName())) {\n            SimplePostTool.BAOS out = new SimplePostTool.BAOS();\n            byte[] buffer = new byte[2048];\n            int size;\n            while ((size = zis.read(buffer, 0, buffer.length)) != -1) {\n              out.write(buffer, 0, size);\n            }\n            out.close();\n            return out.getByteBuffer();\n          }\n        }\n      } finally {\n        zis.closeEntry();\n      }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d16198391f70a4ee52a8c8792c91eb87a30f1d6","date":1596695552,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/PluginBag.RuntimeLib#getFileContent(BlobRepository.BlobContent[ByteBuffer],String).mjava","sourceNew":null,"sourceOld":"    public ByteBuffer getFileContent(BlobRepository.BlobContent<ByteBuffer> blobContent,  String entryName) throws IOException {\n      ByteBuffer buff = blobContent.get();\n      ByteArrayInputStream zipContents = new ByteArrayInputStream(buff.array(), buff.arrayOffset(), buff.limit());\n      ZipInputStream zis = new ZipInputStream(zipContents);\n      try {\n        ZipEntry entry;\n        while ((entry = zis.getNextEntry()) != null) {\n          if (entryName == null || entryName.equals(entry.getName())) {\n            SimplePostTool.BAOS out = new SimplePostTool.BAOS();\n            byte[] buffer = new byte[2048];\n            int size;\n            while ((size = zis.read(buffer, 0, buffer.length)) != -1) {\n              out.write(buffer, 0, size);\n            }\n            out.close();\n            return out.getByteBuffer();\n          }\n        }\n      } finally {\n        zis.closeEntry();\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb50877dc038c021eba3a70999fd1f6ed85001c1":["713122036535651642e6d4fe57ce12b449e18473"],"713122036535651642e6d4fe57ce12b449e18473":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["c44cc06c26e456fe9c215072b79fce30babe3975"],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c44cc06c26e456fe9c215072b79fce30babe3975":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"b0b597c65628ca9e73913a07e81691f8229bae35":["fb50877dc038c021eba3a70999fd1f6ed85001c1","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"fb50877dc038c021eba3a70999fd1f6ed85001c1":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"713122036535651642e6d4fe57ce12b449e18473":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["713122036535651642e6d4fe57ce12b449e18473","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["713122036535651642e6d4fe57ce12b449e18473"],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c44cc06c26e456fe9c215072b79fce30babe3975":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}