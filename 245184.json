{"path":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","sourceNew":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","sourceOld":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","sourceNew":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","sourceOld":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","sourceNew":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","sourceOld":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"448a213c5dfd8b9baaf143dcbf9e633d8d7d1d5e","date":1341842777,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","sourceNew":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(myIdFile), IOUtils.CHARSET_UTF_8));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","sourceOld":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","sourceNew":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(myIdFile), IOUtils.CHARSET_UTF_8));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","sourceOld":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","sourceNew":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(myIdFile), IOUtils.CHARSET_UTF_8));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","sourceOld":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","sourceNew":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(myIdFile), IOUtils.CHARSET_UTF_8));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","sourceOld":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new FileReader(myIdFile));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","sourceNew":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(myIdFile), IOUtils.CHARSET_UTF_8));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","sourceOld":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   * @throws java.io.IOException\n   * @throws ConfigException\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(myIdFile), IOUtils.CHARSET_UTF_8));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b57979cb590291ca31b9384e4d78a6799d29becc","date":1351214721,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","sourceNew":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMyServerId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(myIdFile), IOUtils.CHARSET_UTF_8));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","sourceOld":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(myIdFile), IOUtils.CHARSET_UTF_8));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["5230f3091f5d18ecb95fb3527991f6fbb36041c5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","sourceNew":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMyServerId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(myIdFile), IOUtils.CHARSET_UTF_8));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","sourceOld":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMySeverId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(myIdFile), IOUtils.CHARSET_UTF_8));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","sourceNew":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMyServerId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(myIdFile), StandardCharsets.UTF_8));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","sourceOld":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMyServerId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(myIdFile), IOUtils.CHARSET_UTF_8));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","sourceNew":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMyServerId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(myIdFile), StandardCharsets.UTF_8));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","sourceOld":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMyServerId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(myIdFile), IOUtils.CHARSET_UTF_8));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34f3c3f700596b65f90fab2d6c94f0dd759dd4a6","date":1493393093,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","sourceNew":"  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    try {\n      super.parseProperties(zkProp);\n    } catch (IllegalArgumentException e) {\n      if (MISSING_MYID_FILE_PATTERN.matcher(e.getMessage()).matches()) {\n        Long myid = getMyServerId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n      }\n      throw e;\n    }\n  }\n\n","sourceOld":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMyServerId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(myIdFile), StandardCharsets.UTF_8));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["5230f3091f5d18ecb95fb3527991f6fbb36041c5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","sourceNew":"  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    try {\n      super.parseProperties(zkProp);\n    } catch (IllegalArgumentException e) {\n      if (MISSING_MYID_FILE_PATTERN.matcher(e.getMessage()).matches()) {\n        Long myid = getMyServerId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n      }\n      throw e;\n    }\n  }\n\n","sourceOld":"  // NOTE: copied from ZooKeeper 3.2\n  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    for (Entry<Object, Object> entry : zkProp.entrySet()) {\n      String key = entry.getKey().toString().trim();\n      String value = entry.getValue().toString().trim();\n      if (key.equals(\"dataDir\")) {\n        dataDir = value;\n      } else if (key.equals(\"dataLogDir\")) {\n        dataLogDir = value;\n      } else if (key.equals(\"clientPort\")) {\n        setClientPort(Integer.parseInt(value));\n      } else if (key.equals(\"tickTime\")) {\n        tickTime = Integer.parseInt(value);\n      } else if (key.equals(\"initLimit\")) {\n        initLimit = Integer.parseInt(value);\n      } else if (key.equals(\"syncLimit\")) {\n        syncLimit = Integer.parseInt(value);\n      } else if (key.equals(\"electionAlg\")) {\n        electionAlg = Integer.parseInt(value);\n      } else if (key.equals(\"maxClientCnxns\")) {\n        maxClientCnxns = Integer.parseInt(value);\n      } else if (key.startsWith(\"server.\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        String parts[] = value.split(\":\");\n        if ((parts.length != 2) && (parts.length != 3)) {\n          LOG.error(value\n              + \" does not have the form host:port or host:port:port\");\n        }\n        InetSocketAddress addr = new InetSocketAddress(parts[0],\n            Integer.parseInt(parts[1]));\n        if (parts.length == 2) {\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr));\n        } else if (parts.length == 3) {\n          InetSocketAddress electionAddr = new InetSocketAddress(\n              parts[0], Integer.parseInt(parts[2]));\n          servers.put(Long.valueOf(sid), new QuorumPeer.QuorumServer(sid, addr,\n              electionAddr));\n        }\n      } else if (key.startsWith(\"group\")) {\n        int dot = key.indexOf('.');\n        long gid = Long.parseLong(key.substring(dot + 1));\n\n        numGroups++;\n\n        String parts[] = value.split(\":\");\n        for(String s : parts){\n          long sid = Long.parseLong(s);\n          if(serverGroup.containsKey(sid))\n            throw new ConfigException(\"Server \" + sid + \"is in multiple groups\");\n          else\n            serverGroup.put(sid, gid);\n        }\n\n      } else if(key.startsWith(\"weight\")) {\n        int dot = key.indexOf('.');\n        long sid = Long.parseLong(key.substring(dot + 1));\n        serverWeight.put(sid, Long.parseLong(value));\n      } else {\n        System.setProperty(\"zookeeper.\" + key, value);\n      }\n    }\n    if (dataDir == null) {\n      throw new IllegalArgumentException(\"dataDir is not set\");\n    }\n    if (dataLogDir == null) {\n      dataLogDir = dataDir;\n    } else {\n      if (!new File(dataLogDir).isDirectory()) {\n        throw new IllegalArgumentException(\"dataLogDir \" + dataLogDir\n            + \" is missing.\");\n      }\n    }\n\n    if (tickTime == 0) {\n      throw new IllegalArgumentException(\"tickTime is not set\");\n    }\n    if (servers.size() > 1) {\n      if (initLimit == 0) {\n        throw new IllegalArgumentException(\"initLimit is not set\");\n      }\n      if (syncLimit == 0) {\n        throw new IllegalArgumentException(\"syncLimit is not set\");\n      }\n      /*\n      * If using FLE, then every server requires a separate election\n      * port.\n      */\n      if (electionAlg != 0) {\n        for (QuorumPeer.QuorumServer s : servers.values()) {\n          if (s.electionAddr == null)\n            throw new IllegalArgumentException(\n                \"Missing election port for server: \" + s.id);\n        }\n      }\n\n      /*\n      * Default of quorum config is majority\n      */\n      if(serverGroup.size() > 0){\n        if(servers.size() != serverGroup.size())\n          throw new ConfigException(\"Every server must be in exactly one group\");\n        /*\n         * The deafult weight of a server is 1\n         */\n        for(QuorumPeer.QuorumServer s : servers.values()){\n          if(!serverWeight.containsKey(s.id))\n            serverWeight.put(s.id, (long) 1);\n        }\n\n        /*\n                      * Set the quorumVerifier to be QuorumHierarchical\n                      */\n        quorumVerifier = new QuorumHierarchical(numGroups,\n            serverWeight, serverGroup);\n      } else {\n        /*\n                      * The default QuorumVerifier is QuorumMaj\n                      */\n\n        LOG.info(\"Defaulting to majority quorums\");\n        quorumVerifier = new QuorumMaj(servers.size());\n      }\n\n      File myIdFile = new File(dataDir, \"myid\");\n      if (!myIdFile.exists()) {\n        ///////////////// ADDED FOR SOLR //////\n        Long myid = getMyServerId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n        //////////////// END ADDED FOR SOLR //////\n        throw new IllegalArgumentException(myIdFile.toString()\n            + \" file is missing\");\n      }\n\n      BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(myIdFile), StandardCharsets.UTF_8));\n      String myIdString;\n      try {\n        myIdString = br.readLine();\n      } finally {\n        br.close();\n      }\n      try {\n        serverId = Long.parseLong(myIdString);\n      } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"serverid \" + myIdString\n            + \" is not a number\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5230f3091f5d18ecb95fb3527991f6fbb36041c5","date":1593647236,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#parseProperties(Properties).mjava","sourceNew":"  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n      super.parseProperties(zkProp);\n  }\n\n","sourceOld":"  /**\n   * Parse config from a Properties.\n   * @param zkProp Properties to parse from.\n   */\n  @Override\n  public void parseProperties(Properties zkProp)\n      throws IOException, ConfigException {\n    try {\n      super.parseProperties(zkProp);\n    } catch (IllegalArgumentException e) {\n      if (MISSING_MYID_FILE_PATTERN.matcher(e.getMessage()).matches()) {\n        Long myid = getMyServerId();\n        if (myid != null) {\n          serverId = myid;\n          return;\n        }\n        if (zkRun == null) return;\n      }\n      throw e;\n    }\n  }\n\n","bugFix":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","b57979cb590291ca31b9384e4d78a6799d29becc","34f3c3f700596b65f90fab2d6c94f0dd759dd4a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["2acf500f78aa12b92e371fd89c719291986b6b90"],"5eb2511ababf862ea11e10761c70ee560cd84510":["b57979cb590291ca31b9384e4d78a6799d29becc","7d89d7e4e5101347833eea558851bf4209218619"],"34f3c3f700596b65f90fab2d6c94f0dd759dd4a6":["7d89d7e4e5101347833eea558851bf4209218619"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"5230f3091f5d18ecb95fb3527991f6fbb36041c5":["34f3c3f700596b65f90fab2d6c94f0dd759dd4a6"],"2acf500f78aa12b92e371fd89c719291986b6b90":["c26f00b574427b55127e869b935845554afde1fa","448a213c5dfd8b9baaf143dcbf9e633d8d7d1d5e"],"7d89d7e4e5101347833eea558851bf4209218619":["b57979cb590291ca31b9384e4d78a6799d29becc"],"b57979cb590291ca31b9384e4d78a6799d29becc":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"46d8ada1fff8d18cb197c38c7983225162599948":["c26f00b574427b55127e869b935845554afde1fa","2acf500f78aa12b92e371fd89c719291986b6b90"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["7d89d7e4e5101347833eea558851bf4209218619","34f3c3f700596b65f90fab2d6c94f0dd759dd4a6"],"448a213c5dfd8b9baaf143dcbf9e633d8d7d1d5e":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2126b84bd093fa3d921582a109a0ee578c28126":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","b57979cb590291ca31b9384e4d78a6799d29becc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5230f3091f5d18ecb95fb3527991f6fbb36041c5"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["b57979cb590291ca31b9384e4d78a6799d29becc","f2126b84bd093fa3d921582a109a0ee578c28126"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"34f3c3f700596b65f90fab2d6c94f0dd759dd4a6":["5230f3091f5d18ecb95fb3527991f6fbb36041c5","e9017cf144952056066919f1ebc7897ff9bd71b1"],"c26f00b574427b55127e869b935845554afde1fa":["2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","448a213c5dfd8b9baaf143dcbf9e633d8d7d1d5e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"5230f3091f5d18ecb95fb3527991f6fbb36041c5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2acf500f78aa12b92e371fd89c719291986b6b90":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"b57979cb590291ca31b9384e4d78a6799d29becc":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619","f2126b84bd093fa3d921582a109a0ee578c28126"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","34f3c3f700596b65f90fab2d6c94f0dd759dd4a6","e9017cf144952056066919f1ebc7897ff9bd71b1"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"448a213c5dfd8b9baaf143dcbf9e633d8d7d1d5e":["2acf500f78aa12b92e371fd89c719291986b6b90"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","46d8ada1fff8d18cb197c38c7983225162599948","e9017cf144952056066919f1ebc7897ff9bd71b1","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}