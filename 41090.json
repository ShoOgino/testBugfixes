{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#intersects(PlanetModel,Plane,GeoPoint[],Membership[]).mjava","commits":[{"id":"760628478e121972168791a2afa6af915192c4a6","date":1459842108,"type":1,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#intersects(PlanetModel,Plane,GeoPoint[],Membership[]).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPath.PathSegment#intersects(PlanetModel,Plane,GeoPoint[],Membership[]).mjava","sourceNew":"    /** Determine if this endpoint intersects a specified plane.\n     *@param planetModel is the planet model.\n     *@param p is the plane.\n     *@param notablePoints are the points associated with the plane.\n     *@param bounds are any bounds which the intersection must lie within.\n     *@return true if there is a matching intersection.\n     */\n    public boolean intersects(final PlanetModel planetModel, final Plane p, final GeoPoint[] notablePoints, final Membership[] bounds) {\n      return upperConnectingPlane.intersects(planetModel, p, notablePoints, upperConnectingPlanePoints, bounds, lowerConnectingPlane, startCutoffPlane, endCutoffPlane) ||\n          lowerConnectingPlane.intersects(planetModel, p, notablePoints, lowerConnectingPlanePoints, bounds, upperConnectingPlane, startCutoffPlane, endCutoffPlane);\n    }\n\n","sourceOld":"    /** Determine if this endpoint intersects a specified plane.\n     *@param planetModel is the planet model.\n     *@param p is the plane.\n     *@param notablePoints are the points associated with the plane.\n     *@param bounds are any bounds which the intersection must lie within.\n     *@return true if there is a matching intersection.\n     */\n    public boolean intersects(final PlanetModel planetModel, final Plane p, final GeoPoint[] notablePoints, final Membership[] bounds) {\n      return upperConnectingPlane.intersects(planetModel, p, notablePoints, upperConnectingPlanePoints, bounds, lowerConnectingPlane, startCutoffPlane, endCutoffPlane) ||\n          lowerConnectingPlane.intersects(planetModel, p, notablePoints, lowerConnectingPlanePoints, bounds, upperConnectingPlane, startCutoffPlane, endCutoffPlane);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#intersects(PlanetModel,Plane,GeoPoint[],Membership[]).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoPath.PathSegment#intersects(PlanetModel,Plane,GeoPoint[],Membership[]).mjava","sourceNew":"    /** Determine if this endpoint intersects a specified plane.\n     *@param planetModel is the planet model.\n     *@param p is the plane.\n     *@param notablePoints are the points associated with the plane.\n     *@param bounds are any bounds which the intersection must lie within.\n     *@return true if there is a matching intersection.\n     */\n    public boolean intersects(final PlanetModel planetModel, final Plane p, final GeoPoint[] notablePoints, final Membership[] bounds) {\n      return upperConnectingPlane.intersects(planetModel, p, notablePoints, upperConnectingPlanePoints, bounds, lowerConnectingPlane, startCutoffPlane, endCutoffPlane) ||\n          lowerConnectingPlane.intersects(planetModel, p, notablePoints, lowerConnectingPlanePoints, bounds, upperConnectingPlane, startCutoffPlane, endCutoffPlane);\n    }\n\n","sourceOld":"    /** Determine if this endpoint intersects a specified plane.\n     *@param planetModel is the planet model.\n     *@param p is the plane.\n     *@param notablePoints are the points associated with the plane.\n     *@param bounds are any bounds which the intersection must lie within.\n     *@return true if there is a matching intersection.\n     */\n    public boolean intersects(final PlanetModel planetModel, final Plane p, final GeoPoint[] notablePoints, final Membership[] bounds) {\n      return upperConnectingPlane.intersects(planetModel, p, notablePoints, upperConnectingPlanePoints, bounds, lowerConnectingPlane, startCutoffPlane, endCutoffPlane) ||\n          lowerConnectingPlane.intersects(planetModel, p, notablePoints, lowerConnectingPlanePoints, bounds, upperConnectingPlane, startCutoffPlane, endCutoffPlane);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c27ce32f195c27953d9bfdc5eae3b2d212f3186","date":1551188777,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#intersects(PlanetModel,Plane,GeoPoint[],Membership[]).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#intersects(PlanetModel,Plane,GeoPoint[],Membership[]).mjava","sourceNew":"    /** Determine if this endpoint intersects a specified plane.\n     *@param planetModel is the planet model.\n     *@param p is the plane.\n     *@param notablePoints are the points associated with the plane.\n     *@param bounds are any bounds which the intersection must lie within.\n     *@return true if there is a matching intersection.\n     */\n    public boolean intersects(final PlanetModel planetModel, final Plane p, final GeoPoint[] notablePoints, final Membership[] bounds) {\n      return upperConnectingPlane.intersects(planetModel, p, notablePoints, upperConnectingPlanePoints, bounds, lowerConnectingPlane, startCutoffPlane, endCutoffPlane) ||\n          lowerConnectingPlane.intersects(planetModel, p, notablePoints, lowerConnectingPlanePoints, bounds, upperConnectingPlane, startCutoffPlane, endCutoffPlane);\n          /* ||\n          // These two are necessary because our segment endpoints are not necessarily good fits to their adjoining segments.  The checks should really be part of the segment endpoint, however\n          startCutoffPlane.intersects(planetModel, p, notablePoints, startCutoffPlanePoints, bounds, endCutoffPlane, upperConnectingPlane, lowerConnectingPlane) ||\n          endCutoffPlane.intersects(planetModel, p, notablePoints, endCutoffPlanePoints, bounds, startCutoffPlane, upperConnectingPlane, lowerConnectingPlane);\n              */\n    }\n\n","sourceOld":"    /** Determine if this endpoint intersects a specified plane.\n     *@param planetModel is the planet model.\n     *@param p is the plane.\n     *@param notablePoints are the points associated with the plane.\n     *@param bounds are any bounds which the intersection must lie within.\n     *@return true if there is a matching intersection.\n     */\n    public boolean intersects(final PlanetModel planetModel, final Plane p, final GeoPoint[] notablePoints, final Membership[] bounds) {\n      return upperConnectingPlane.intersects(planetModel, p, notablePoints, upperConnectingPlanePoints, bounds, lowerConnectingPlane, startCutoffPlane, endCutoffPlane) ||\n          lowerConnectingPlane.intersects(planetModel, p, notablePoints, lowerConnectingPlanePoints, bounds, upperConnectingPlane, startCutoffPlane, endCutoffPlane);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"760628478e121972168791a2afa6af915192c4a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","760628478e121972168791a2afa6af915192c4a6"],"8c27ce32f195c27953d9bfdc5eae3b2d212f3186":["760628478e121972168791a2afa6af915192c4a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c27ce32f195c27953d9bfdc5eae3b2d212f3186"]},"commit2Childs":{"760628478e121972168791a2afa6af915192c4a6":["09af2c9610ce53a4b25fd99344299b40318a4a1a","8c27ce32f195c27953d9bfdc5eae3b2d212f3186"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"8c27ce32f195c27953d9bfdc5eae3b2d212f3186":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["760628478e121972168791a2afa6af915192c4a6","09af2c9610ce53a4b25fd99344299b40318a4a1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}