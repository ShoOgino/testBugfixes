{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#req(List[Scorer],List[Scorer],boolean).mjava","commits":[{"id":"25f698887111a682424e759ba36083180899a1fd","date":1423588899,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#req(List[Scorer],List[Scorer],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#req(List[Scorer],boolean).mjava","sourceNew":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(List<Scorer> required, List<Scorer> requiredScoring, boolean disableCoord) {\n    if (required.size() == 1) {\n      Scorer req = required.get(0);\n\n      if (needsScores == false ||\n          (requiredScoring.size() == 1 && (disableCoord || maxCoord == 1))) {\n        return req;\n      } else {\n        return new BooleanTopLevelScorers.BoostedScorer(req, coord(requiredScoring.size(), maxCoord));\n      }\n    } else {\n      return new ConjunctionScorer(this, required, requiredScoring,\n                                   disableCoord ? 1.0F : coord(requiredScoring.size(), maxCoord));\n    }\n  }\n\n","sourceOld":"  private Scorer req(List<Scorer> required, boolean disableCoord) {\n    if (required.size() == 1) {\n      Scorer req = required.get(0);\n      if (!disableCoord && maxCoord > 1) {\n        return new BooleanTopLevelScorers.BoostedScorer(req, coord(1, maxCoord));\n      } else {\n        return req;\n      }\n    } else {\n      return new ConjunctionScorer(this, \n                                   required.toArray(new Scorer[required.size()]),\n                                   disableCoord ? 1.0F : coord(required.size(), maxCoord));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c","date":1433506692,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#req(List[Scorer],List[Scorer],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#req(List[Scorer],List[Scorer],boolean).mjava","sourceNew":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(List<Scorer> required, List<Scorer> requiredScoring, boolean disableCoord) {\n    if (required.size() == 1) {\n      Scorer req = required.get(0);\n\n      if (needsScores == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public int freq() throws IOException {\n            return 0;\n          }\n        };\n      }\n      \n      float boost = 1f;\n      if (disableCoord == false) {\n        boost = coord(1, maxCoord);\n      }\n      if (boost == 1f) {\n        return req;\n      }\n      return new BooleanTopLevelScorers.BoostedScorer(req, boost);\n    } else {\n      return new ConjunctionScorer(this, required, requiredScoring,\n                                   disableCoord ? 1.0F : coord(requiredScoring.size(), maxCoord));\n    }\n  }\n\n","sourceOld":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(List<Scorer> required, List<Scorer> requiredScoring, boolean disableCoord) {\n    if (required.size() == 1) {\n      Scorer req = required.get(0);\n\n      if (needsScores == false ||\n          (requiredScoring.size() == 1 && (disableCoord || maxCoord == 1))) {\n        return req;\n      } else {\n        return new BooleanTopLevelScorers.BoostedScorer(req, coord(requiredScoring.size(), maxCoord));\n      }\n    } else {\n      return new ConjunctionScorer(this, required, requiredScoring,\n                                   disableCoord ? 1.0F : coord(requiredScoring.size(), maxCoord));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#req(List[Scorer],List[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#req(List[Scorer],List[Scorer],boolean).mjava","sourceNew":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(List<Scorer> required, List<Scorer> requiredScoring) {\n    if (required.size() == 1) {\n      Scorer req = required.get(0);\n\n      if (needsScores == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public int freq() throws IOException {\n            return 0;\n          }\n        };\n      }\n      \n      return req;\n    } else {\n      return new ConjunctionScorer(this, required, requiredScoring);\n    }\n  }\n\n","sourceOld":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(List<Scorer> required, List<Scorer> requiredScoring, boolean disableCoord) {\n    if (required.size() == 1) {\n      Scorer req = required.get(0);\n\n      if (needsScores == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public int freq() throws IOException {\n            return 0;\n          }\n        };\n      }\n      \n      float boost = 1f;\n      if (disableCoord == false) {\n        boost = coord(1, maxCoord);\n      }\n      if (boost == 1f) {\n        return req;\n      }\n      return new BooleanTopLevelScorers.BoostedScorer(req, boost);\n    } else {\n      return new ConjunctionScorer(this, required, requiredScoring,\n                                   disableCoord ? 1.0F : coord(requiredScoring.size(), maxCoord));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#req(List[Scorer],List[Scorer],boolean).mjava","sourceNew":null,"sourceOld":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(List<Scorer> required, List<Scorer> requiredScoring, boolean disableCoord) {\n    if (required.size() == 1) {\n      Scorer req = required.get(0);\n\n      if (needsScores == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public int freq() throws IOException {\n            return 0;\n          }\n        };\n      }\n      \n      float boost = 1f;\n      if (disableCoord == false) {\n        boost = coord(1, maxCoord);\n      }\n      if (boost == 1f) {\n        return req;\n      }\n      return new BooleanTopLevelScorers.BoostedScorer(req, boost);\n    } else {\n      return new ConjunctionScorer(this, required, requiredScoring,\n                                   disableCoord ? 1.0F : coord(requiredScoring.size(), maxCoord));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c"],"0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c":["25f698887111a682424e759ba36083180899a1fd"],"25f698887111a682424e759ba36083180899a1fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25f698887111a682424e759ba36083180899a1fd"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"25f698887111a682424e759ba36083180899a1fd":["0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}