{"path":"solr/core/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#init(Map[String,String]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    generateWordParts = getInt(\"generateWordParts\", 1);\n    generateNumberParts = getInt(\"generateNumberParts\", 1);\n    catenateWords = getInt(\"catenateWords\", 0);\n    catenateNumbers = getInt(\"catenateNumbers\", 0);\n    catenateAll = getInt(\"catenateAll\", 0);\n    splitOnCaseChange = getInt(\"splitOnCaseChange\", 1);\n    splitOnNumerics = getInt(\"splitOnNumerics\", 1);\n    preserveOriginal = getInt(\"preserveOriginal\", 0);\n    stemEnglishPossessive = getInt(\"stemEnglishPossessive\", 1);\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    generateWordParts = getInt(\"generateWordParts\", 1);\n    generateNumberParts = getInt(\"generateNumberParts\", 1);\n    catenateWords = getInt(\"catenateWords\", 0);\n    catenateNumbers = getInt(\"catenateNumbers\", 0);\n    catenateAll = getInt(\"catenateAll\", 0);\n    splitOnCaseChange = getInt(\"splitOnCaseChange\", 1);\n    splitOnNumerics = getInt(\"splitOnNumerics\", 1);\n    preserveOriginal = getInt(\"preserveOriginal\", 0);\n    stemEnglishPossessive = getInt(\"stemEnglishPossessive\", 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    generateWordParts = getInt(\"generateWordParts\", 1);\n    generateNumberParts = getInt(\"generateNumberParts\", 1);\n    catenateWords = getInt(\"catenateWords\", 0);\n    catenateNumbers = getInt(\"catenateNumbers\", 0);\n    catenateAll = getInt(\"catenateAll\", 0);\n    splitOnCaseChange = getInt(\"splitOnCaseChange\", 1);\n    splitOnNumerics = getInt(\"splitOnNumerics\", 1);\n    preserveOriginal = getInt(\"preserveOriginal\", 0);\n    stemEnglishPossessive = getInt(\"stemEnglishPossessive\", 1);\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    generateWordParts = getInt(\"generateWordParts\", 1);\n    generateNumberParts = getInt(\"generateNumberParts\", 1);\n    catenateWords = getInt(\"catenateWords\", 0);\n    catenateNumbers = getInt(\"catenateNumbers\", 0);\n    catenateAll = getInt(\"catenateAll\", 0);\n    splitOnCaseChange = getInt(\"splitOnCaseChange\", 1);\n    splitOnNumerics = getInt(\"splitOnNumerics\", 1);\n    preserveOriginal = getInt(\"preserveOriginal\", 0);\n    stemEnglishPossessive = getInt(\"stemEnglishPossessive\", 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    generateWordParts = getInt(\"generateWordParts\", 1);\n    generateNumberParts = getInt(\"generateNumberParts\", 1);\n    catenateWords = getInt(\"catenateWords\", 0);\n    catenateNumbers = getInt(\"catenateNumbers\", 0);\n    catenateAll = getInt(\"catenateAll\", 0);\n    splitOnCaseChange = getInt(\"splitOnCaseChange\", 1);\n    splitOnNumerics = getInt(\"splitOnNumerics\", 1);\n    preserveOriginal = getInt(\"preserveOriginal\", 0);\n    stemEnglishPossessive = getInt(\"stemEnglishPossessive\", 1);\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    generateWordParts = getInt(\"generateWordParts\", 1);\n    generateNumberParts = getInt(\"generateNumberParts\", 1);\n    catenateWords = getInt(\"catenateWords\", 0);\n    catenateNumbers = getInt(\"catenateNumbers\", 0);\n    catenateAll = getInt(\"catenateAll\", 0);\n    splitOnCaseChange = getInt(\"splitOnCaseChange\", 1);\n    splitOnNumerics = getInt(\"splitOnNumerics\", 1);\n    preserveOriginal = getInt(\"preserveOriginal\", 0);\n    stemEnglishPossessive = getInt(\"stemEnglishPossessive\", 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec1acb945fb5751735f5c9482576c8760d97b6ab","date":1315370590,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    if (getInt(\"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(\"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(\"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(\"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(\"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(\"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(\"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(\"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(\"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    generateWordParts = getInt(\"generateWordParts\", 1);\n    generateNumberParts = getInt(\"generateNumberParts\", 1);\n    catenateWords = getInt(\"catenateWords\", 0);\n    catenateNumbers = getInt(\"catenateNumbers\", 0);\n    catenateAll = getInt(\"catenateAll\", 0);\n    splitOnCaseChange = getInt(\"splitOnCaseChange\", 1);\n    splitOnNumerics = getInt(\"splitOnNumerics\", 1);\n    preserveOriginal = getInt(\"preserveOriginal\", 0);\n    stemEnglishPossessive = getInt(\"stemEnglishPossessive\", 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    if (getInt(\"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(\"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(\"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(\"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(\"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(\"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(\"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(\"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(\"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    if (getInt(\"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(\"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(\"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(\"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(\"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(\"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(\"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(\"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(\"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    if (getInt(\"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(\"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(\"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(\"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(\"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(\"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(\"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(\"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(\"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    if (getInt(\"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(\"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(\"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(\"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(\"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(\"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(\"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(\"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(\"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    if (getInt(\"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(\"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(\"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(\"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(\"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(\"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(\"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(\"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(\"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    if (getInt(\"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(\"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(\"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(\"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(\"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(\"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(\"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(\"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(\"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    if (getInt(\"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(\"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(\"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(\"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(\"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(\"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(\"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(\"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(\"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    if (getInt(\"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(\"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(\"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(\"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(\"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(\"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(\"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(\"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(\"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["ec1acb945fb5751735f5c9482576c8760d97b6ab","5a1a22b1ad88b436661458df567f3fdb446392a4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"ec1acb945fb5751735f5c9482576c8760d97b6ab":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["ec1acb945fb5751735f5c9482576c8760d97b6ab","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["ec1acb945fb5751735f5c9482576c8760d97b6ab","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["ec1acb945fb5751735f5c9482576c8760d97b6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["ec1acb945fb5751735f5c9482576c8760d97b6ab"],"ec1acb945fb5751735f5c9482576c8760d97b6ab":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}