{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createShard(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createShard(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private boolean createShard(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    \n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n    \n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    List<ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, overseer.getZkController().getCoreContainer());\n        \n    Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    long waitUntil = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (System.nanoTime() < waitUntil) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n      \n    String configName = message.getStr(COLL_CONF);\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n          \n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      \n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      addPropertyParams(message, params);\n      \n      ShardRequest sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n      \n      shardHandler.submit(sreq, replica, sreq.params);\n      \n    }\n    \n    processResponses(results, shardHandler);\n    \n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n    \n    return true;\n  }\n\n","sourceOld":"  private boolean createShard(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    \n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n    \n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    List<ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, overseer.getZkController().getCoreContainer());\n        \n    Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    long waitUntil = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (System.nanoTime() < waitUntil) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n      \n    String configName = message.getStr(COLL_CONF);\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n          \n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      \n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      addPropertyParams(message, params);\n      \n      ShardRequest sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n      \n      shardHandler.submit(sreq, replica, sreq.params);\n      \n    }\n    \n    processResponses(results, shardHandler);\n    \n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n    \n    return true; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createShard(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private boolean createShard(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    \n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n    \n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    List<ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, overseer.getZkController().getCoreContainer());\n        \n    Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n      \n    String configName = message.getStr(COLL_CONF);\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n          \n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      \n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      addPropertyParams(message, params);\n      \n      ShardRequest sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n      \n      shardHandler.submit(sreq, replica, sreq.params);\n      \n    }\n    \n    processResponses(results, shardHandler);\n    \n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n    \n    return true;\n  }\n\n","sourceOld":"  private boolean createShard(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    \n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n    \n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    List<ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, overseer.getZkController().getCoreContainer());\n        \n    Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    long waitUntil = System.nanoTime() + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (System.nanoTime() < waitUntil) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n      \n    String configName = message.getStr(COLL_CONF);\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n          \n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      \n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      addPropertyParams(message, params);\n      \n      ShardRequest sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n      \n      shardHandler.submit(sreq, replica, sreq.params);\n      \n    }\n    \n    processResponses(results, shardHandler);\n    \n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bbb741690cdafda7f1f7549c26351c912917a69","date":1453203134,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createShard(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private boolean createShard(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n    \n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    List<ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, overseer.getZkController().getCoreContainer());\n        \n    Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n      \n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(repFactor, 1.0f);\n    }\n\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n          \n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      addPropertyParams(message, params);\n\n      sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n    \n    processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap);\n    \n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n    \n    return true;\n  }\n\n","sourceOld":"  private boolean createShard(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    \n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n    \n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    List<ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, overseer.getZkController().getCoreContainer());\n        \n    Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n      \n    String configName = message.getStr(COLL_CONF);\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n          \n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      \n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      addPropertyParams(message, params);\n      \n      ShardRequest sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n      \n      shardHandler.submit(sreq, replica, sreq.params);\n      \n    }\n    \n    processResponses(results, shardHandler);\n    \n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9362075f92dff89425ca488b480f70d565d66e7","date":1454985541,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createShard(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private boolean createShard(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n    \n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    List<ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, overseer.getZkController().getCoreContainer());\n        \n    Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n      \n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(repFactor, 1.0f);\n    }\n\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n          \n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      addPropertyParams(message, params);\n\n      sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n    \n    processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n    \n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n    \n    return true;\n  }\n\n","sourceOld":"  private boolean createShard(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n    \n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    List<ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, overseer.getZkController().getCoreContainer());\n        \n    Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n      \n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(repFactor, 1.0f);\n    }\n\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n          \n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      addPropertyParams(message, params);\n\n      sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n    \n    processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap);\n    \n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19498030e0adab22f604f935cae3c03dcf0952a6","date":1456558851,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createShard(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private boolean createShard(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n    \n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    List<ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, overseer.getZkController().getCoreContainer());\n        \n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n      \n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(repFactor, 1.0f);\n    }\n\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n          \n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      addPropertyParams(message, params);\n\n      sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n    \n    processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n    \n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n    \n    return true;\n  }\n\n","sourceOld":"  private boolean createShard(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n    \n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    List<ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, overseer.getZkController().getCoreContainer());\n        \n    Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n      \n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(repFactor, 1.0f);\n    }\n\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n          \n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      addPropertyParams(message, params);\n\n      sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n    \n    processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n    \n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createShard(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private boolean createShard(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n    \n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    List<ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, overseer.getZkController().getCoreContainer());\n        \n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n      \n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(repFactor, 1.0f);\n    }\n\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n          \n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      addPropertyParams(message, params);\n\n      sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n    \n    processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n    \n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n    \n    return true;\n  }\n\n","sourceOld":"  private boolean createShard(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n    \n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    List<ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, overseer.getZkController().getCoreContainer());\n        \n    Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n      \n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(repFactor, 1.0f);\n    }\n\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n          \n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      addPropertyParams(message, params);\n\n      sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n    \n    processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n    \n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (!timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n\n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(repFactor, 1.0f);\n    }\n\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      ocmh.addPropertyParams(message, params);\n\n      ocmh.sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n\n    ocmh.processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  private boolean createShard(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n    \n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    List<ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, overseer.getZkController().getCoreContainer());\n        \n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n      \n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(repFactor, 1.0f);\n    }\n\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n          \n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      addPropertyParams(message, params);\n\n      sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n    \n    processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n    \n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    List<Assign.ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, ocmh.overseer.getZkController().getCoreContainer());\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (!timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n\n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(repFactor, 1.0f);\n    }\n\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n\n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      ocmh.addPropertyParams(message, params);\n\n      ocmh.sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n\n    ocmh.processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n\n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n\n  }\n\n","sourceOld":"  private boolean createShard(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n    \n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    List<ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, overseer.getZkController().getCoreContainer());\n        \n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n      \n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(repFactor, 1.0f);\n    }\n\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n          \n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      addPropertyParams(message, params);\n\n      sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n    \n    processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n    \n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createShard(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":null,"sourceOld":"  private boolean createShard(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (collectionName == null || sliceName == null)\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n    int numSlices = 1;\n    \n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    DocCollection collection = clusterState.getCollection(collectionName);\n    int repFactor = message.getInt(REPLICATION_FACTOR, collection.getInt(REPLICATION_FACTOR, 1));\n    String createNodeSetStr = message.getStr(CREATE_NODE_SET);\n    List<ReplicaCount> sortedNodeList = getNodesForNewReplicas(clusterState, collectionName, sliceName, repFactor,\n        createNodeSetStr, overseer.getZkController().getCoreContainer());\n        \n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n    // wait for a while until we see the shard\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    boolean created = false;\n    while (! timeout.hasTimedOut()) {\n      Thread.sleep(100);\n      created = zkStateReader.getClusterState().getCollection(collectionName).getSlice(sliceName) != null;\n      if (created) break;\n    }\n    if (!created)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully create shard: \" + message.getStr(NAME));\n      \n    String configName = message.getStr(COLL_CONF);\n\n    String async = message.getStr(ASYNC);\n    Map<String, String> requestMap = null;\n    if (async != null) {\n      requestMap = new HashMap<>(repFactor, 1.0f);\n    }\n\n    for (int j = 1; j <= repFactor; j++) {\n      String nodeName = sortedNodeList.get(((j - 1)) % sortedNodeList.size()).nodeName;\n      String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n      log.info(\"Creating shard \" + shardName + \" as part of slice \" + sliceName + \" of collection \" + collectionName\n          + \" on \" + nodeName);\n          \n      // Need to create new params for each request\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n      params.set(CoreAdminParams.NAME, shardName);\n      params.set(COLL_CONF, configName);\n      params.set(CoreAdminParams.COLLECTION, collectionName);\n      params.set(CoreAdminParams.SHARD, sliceName);\n      params.set(ZkStateReader.NUM_SHARDS_PROP, numSlices);\n      addPropertyParams(message, params);\n\n      sendShardRequest(nodeName, params, shardHandler, async, requestMap);\n    }\n    \n    processResponses(results, shardHandler, true, \"Failed to create shard\", async, requestMap, Collections.emptySet());\n    \n    log.info(\"Finished create command on all shards for collection: \" + collectionName);\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"af2638813028b254a88b418ebeafb541afb49653":["f9362075f92dff89425ca488b480f70d565d66e7","19498030e0adab22f604f935cae3c03dcf0952a6"],"19498030e0adab22f604f935cae3c03dcf0952a6":["f9362075f92dff89425ca488b480f70d565d66e7"],"3bbb741690cdafda7f1f7549c26351c912917a69":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["af2638813028b254a88b418ebeafb541afb49653","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["af2638813028b254a88b418ebeafb541afb49653"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"f9362075f92dff89425ca488b480f70d565d66e7":["3bbb741690cdafda7f1f7549c26351c912917a69"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["af2638813028b254a88b418ebeafb541afb49653","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"af2638813028b254a88b418ebeafb541afb49653":["403d05f7f8d69b65659157eff1bc1d2717f04c66","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"19498030e0adab22f604f935cae3c03dcf0952a6":["af2638813028b254a88b418ebeafb541afb49653"],"3bbb741690cdafda7f1f7549c26351c912917a69":["f9362075f92dff89425ca488b480f70d565d66e7"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["3bbb741690cdafda7f1f7549c26351c912917a69"],"f9362075f92dff89425ca488b480f70d565d66e7":["af2638813028b254a88b418ebeafb541afb49653","19498030e0adab22f604f935cae3c03dcf0952a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}