{"path":"lucene/core/src/test/org/apache/lucene/search/TestMaxScoreSumPropagator#test2ClausesRandomScore().mjava","commits":[{"id":"3c5054bf15748079a041f921a9178e8fe84f1806","date":1514554505,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMaxScoreSumPropagator#test2ClausesRandomScore().mjava","pathOld":"/dev/null","sourceNew":"  public void test2ClausesRandomScore() {\n    for (int iter = 0; iter < 10; ++iter) {\n      FakeScorer a = new FakeScorer(random().nextFloat());\n      FakeScorer b = new FakeScorer(Math.nextUp(a.maxScore()) + random().nextFloat());\n\n      MaxScoreSumPropagator p = new MaxScoreSumPropagator(Arrays.asList(a, b));\n      assertEquals(a.maxScore() + b.maxScore(), p.maxScore(), 0f);\n      assertMinCompetitiveScore(Arrays.asList(a, b), p, Math.nextUp(a.maxScore()));\n      assertMinCompetitiveScore(Arrays.asList(a, b), p, (a.maxScore() + b.maxScore()) / 2);\n      assertMinCompetitiveScore(Arrays.asList(a, b), p, Math.nextDown(a.maxScore() + b.maxScore()));\n      assertMinCompetitiveScore(Arrays.asList(a, b), p, a.maxScore() + b.maxScore());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMaxScoreSumPropagator#test2ClausesRandomScore().mjava","sourceNew":null,"sourceOld":"  public void test2ClausesRandomScore() {\n    for (int iter = 0; iter < 10; ++iter) {\n      FakeScorer a = new FakeScorer(random().nextFloat());\n      FakeScorer b = new FakeScorer(Math.nextUp(a.maxScore()) + random().nextFloat());\n\n      MaxScoreSumPropagator p = new MaxScoreSumPropagator(Arrays.asList(a, b));\n      assertEquals(a.maxScore() + b.maxScore(), p.maxScore(), 0f);\n      assertMinCompetitiveScore(Arrays.asList(a, b), p, Math.nextUp(a.maxScore()));\n      assertMinCompetitiveScore(Arrays.asList(a, b), p, (a.maxScore() + b.maxScore()) / 2);\n      assertMinCompetitiveScore(Arrays.asList(a, b), p, Math.nextDown(a.maxScore() + b.maxScore()));\n      assertMinCompetitiveScore(Arrays.asList(a, b), p, a.maxScore() + b.maxScore());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12789a348ea3f09c9c3b71488cfa1c32da08b2a3","date":1534270167,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMaxScoreSumPropagator#test2ClausesRandomScore().mjava","pathOld":"/dev/null","sourceNew":"  public void test2ClausesRandomScore() throws IOException {\n    for (int iter = 0; iter < 10; ++iter) {\n      FakeScorer a = new FakeScorer(random().nextFloat());\n      FakeScorer b = new FakeScorer(Math.nextUp(a.getMaxScore(NO_MORE_DOCS)) + random().nextFloat());\n\n      MaxScoreSumPropagator p = new MaxScoreSumPropagator(Arrays.asList(a, b));\n      assertEquals(a.getMaxScore(NO_MORE_DOCS) + b.getMaxScore(NO_MORE_DOCS), p.getMaxScore(NO_MORE_DOCS), 0f);\n      assertMinCompetitiveScore(Arrays.asList(a, b), p, Math.nextUp(a.getMaxScore(NO_MORE_DOCS)));\n      assertMinCompetitiveScore(Arrays.asList(a, b), p, (a.getMaxScore(NO_MORE_DOCS) + b.getMaxScore(NO_MORE_DOCS)) / 2);\n      assertMinCompetitiveScore(Arrays.asList(a, b), p, Math.nextDown(a.getMaxScore(NO_MORE_DOCS) + b.getMaxScore(NO_MORE_DOCS)));\n      assertMinCompetitiveScore(Arrays.asList(a, b), p, a.getMaxScore(NO_MORE_DOCS) + b.getMaxScore(NO_MORE_DOCS));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"12789a348ea3f09c9c3b71488cfa1c32da08b2a3":["523cc6563c99a55527ef7993efc5413c6648852d"],"523cc6563c99a55527ef7993efc5413c6648852d":["3c5054bf15748079a041f921a9178e8fe84f1806"],"3c5054bf15748079a041f921a9178e8fe84f1806":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12789a348ea3f09c9c3b71488cfa1c32da08b2a3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c5054bf15748079a041f921a9178e8fe84f1806"],"12789a348ea3f09c9c3b71488cfa1c32da08b2a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"523cc6563c99a55527ef7993efc5413c6648852d":["12789a348ea3f09c9c3b71488cfa1c32da08b2a3"],"3c5054bf15748079a041f921a9178e8fe84f1806":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}