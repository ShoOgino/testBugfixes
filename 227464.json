{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#complement(Automaton).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#complement(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#complementLight(LightAutomaton).mjava","sourceNew":"  /**\n   * Returns a (deterministic) automaton that accepts the complement of the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states (if already deterministic).\n   */\n  static public Automaton complement(Automaton a) {\n    a = determinize(a).totalize();\n    int numStates = a.getNumStates();\n    for (int p=0;p<numStates;p++) {\n      a.setAccept(p, !a.isAccept(p));\n    }\n    return removeDeadStates(a);\n  }\n\n","sourceOld":"  /**\n   * Returns a (deterministic) automaton that accepts the complement of the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states (if already deterministic).\n   */\n  static public LightAutomaton complementLight(LightAutomaton a) {\n    a = determinize(a).totalize();\n    int numStates = a.getNumStates();\n    for (int p=0;p<numStates;p++) {\n      a.setAccept(p, !a.isAccept(p));\n    }\n    return removeDeadStates(a);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bab620c8ab32bb77a62753eca4afb8e47efa87c","date":1402997861,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#complement(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#complement(Automaton).mjava","sourceNew":"  /**\n   * Returns a (deterministic) automaton that accepts the complement of the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states (if already deterministic).\n   */\n  static public Automaton complement(Automaton a) {\n    a = totalize(determinize(a));\n    int numStates = a.getNumStates();\n    for (int p=0;p<numStates;p++) {\n      a.setAccept(p, !a.isAccept(p));\n    }\n    return removeDeadStates(a);\n  }\n\n","sourceOld":"  /**\n   * Returns a (deterministic) automaton that accepts the complement of the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states (if already deterministic).\n   */\n  static public Automaton complement(Automaton a) {\n    a = determinize(a).totalize();\n    int numStates = a.getNumStates();\n    for (int p=0;p<numStates;p++) {\n      a.setAccept(p, !a.isAccept(p));\n    }\n    return removeDeadStates(a);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#complement(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#complement(Automaton).mjava","sourceNew":"  /**\n   * Returns a (deterministic) automaton that accepts the complement of the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states (if already deterministic).\n   */\n  static public Automaton complement(Automaton a) {\n    a = totalize(determinize(a));\n    int numStates = a.getNumStates();\n    for (int p=0;p<numStates;p++) {\n      a.setAccept(p, !a.isAccept(p));\n    }\n    return removeDeadStates(a);\n  }\n\n","sourceOld":"  /**\n   * Returns a (deterministic) automaton that accepts the complement of the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states (if already deterministic).\n   */\n  static public Automaton complement(Automaton a) {\n    a = a.cloneExpandedIfRequired();\n    a.determinize();\n    a.totalize();\n    for (State p : a.getNumberedStates())\n      p.accept = !p.accept;\n    a.removeDeadTransitions();\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#complement(Automaton,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#complement(Automaton).mjava","sourceNew":"  /**\n   * Returns a (deterministic) automaton that accepts the complement of the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states if already deterministic and\n   *  exponential otherwise.\n   * @param maxDeterminizedStates maximum number of states determinizing the\n   *  automaton can result in.  Set higher to allow more complex queries and\n   *  lower to prevent memory exhaustion.\n   */\n  static public Automaton complement(Automaton a, int maxDeterminizedStates) {\n    a = totalize(determinize(a, maxDeterminizedStates));\n    int numStates = a.getNumStates();\n    for (int p=0;p<numStates;p++) {\n      a.setAccept(p, !a.isAccept(p));\n    }\n    return removeDeadStates(a);\n  }\n\n","sourceOld":"  /**\n   * Returns a (deterministic) automaton that accepts the complement of the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states (if already deterministic).\n   */\n  static public Automaton complement(Automaton a) {\n    a = totalize(determinize(a));\n    int numStates = a.getNumStates();\n    for (int p=0;p<numStates;p++) {\n      a.setAccept(p, !a.isAccept(p));\n    }\n    return removeDeadStates(a);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b316f82baae88f5e279893a9cb7eee51fd8902f"]},"commit2Childs":{"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}