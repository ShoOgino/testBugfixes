{"path":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#score().mjava","commits":[{"id":"f58d67a8f4d66d0872915c9bb14606874988efc3","date":1132166857,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#score().mjava","pathOld":"/dev/null","sourceNew":"    /** Determine the current document score.  Initially invalid, until {@link #next()} is called the first time.\r\n     * @return the score of the current generated document\r\n     */\r\n    public float score() throws IOException {\r\n        float max = ((Scorer) subScorers.get(0)).score(), sum = max;\r\n        for (int i = 1, doc = ((Scorer) subScorers.get(0)).doc(); i < subScorers.size() && ((Scorer) subScorers.get(i)).doc() == doc; i++) {\r\n            float sub = ((Scorer) subScorers.get(i)).score();\r\n            sum += sub;\r\n            max = Math.max(max, sub);\r\n        }\r\n        return max + (sum - max)*tieBreakerMultiplier;\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca9e1c07be7f899d56eb37b44a2e4ca252744a52","date":1134440386,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#score().mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#score().mjava","sourceNew":"    /** Determine the current document score.  Initially invalid, until {@link #next()} is called the first time.\r\n     * @return the score of the current generated document\r\n     */\r\n    public float score() throws IOException {\r\n        int doc = ((Scorer) subScorers.get(0)).doc();\r\n        float[] sum = {((Scorer) subScorers.get(0)).score()}, max = {sum[0]};\r\n        int size = subScorers.size();\r\n        scoreAll(1, size, doc, sum, max);\r\n        scoreAll(2, size, doc, sum, max);\r\n        return max[0] + (sum[0] - max[0])*tieBreakerMultiplier;\r\n    }\r\n\n","sourceOld":"    /** Determine the current document score.  Initially invalid, until {@link #next()} is called the first time.\r\n     * @return the score of the current generated document\r\n     */\r\n    public float score() throws IOException {\r\n        float max = ((Scorer) subScorers.get(0)).score(), sum = max;\r\n        for (int i = 1, doc = ((Scorer) subScorers.get(0)).doc(); i < subScorers.size() && ((Scorer) subScorers.get(i)).doc() == doc; i++) {\r\n            float sub = ((Scorer) subScorers.get(i)).score();\r\n            sum += sub;\r\n            max = Math.max(max, sub);\r\n        }\r\n        return max + (sum - max)*tieBreakerMultiplier;\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#score().mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#score().mjava","sourceNew":"    /** Determine the current document score.  Initially invalid, until {@link #next()} is called the first time.\n     * @return the score of the current generated document\n     */\n    public float score() throws IOException {\n        int doc = ((Scorer) subScorers.get(0)).doc();\n        float[] sum = {((Scorer) subScorers.get(0)).score()}, max = {sum[0]};\n        int size = subScorers.size();\n        scoreAll(1, size, doc, sum, max);\n        scoreAll(2, size, doc, sum, max);\n        return max[0] + (sum[0] - max[0])*tieBreakerMultiplier;\n    }\n\n","sourceOld":"    /** Determine the current document score.  Initially invalid, until {@link #next()} is called the first time.\r\n     * @return the score of the current generated document\r\n     */\r\n    public float score() throws IOException {\r\n        int doc = ((Scorer) subScorers.get(0)).doc();\r\n        float[] sum = {((Scorer) subScorers.get(0)).score()}, max = {sum[0]};\r\n        int size = subScorers.size();\r\n        scoreAll(1, size, doc, sum, max);\r\n        scoreAll(2, size, doc, sum, max);\r\n        return max[0] + (sum[0] - max[0])*tieBreakerMultiplier;\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#score().mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#score().mjava","sourceNew":"  /** Determine the current document score.  Initially invalid, until {@link #next()} is called the first time.\n   * @return the score of the current generated document\n   */\n  public float score() throws IOException {\n    int doc = subScorers[0].docID();\n    float[] sum = { subScorers[0].score() }, max = { sum[0] };\n    int size = numScorers;\n    scoreAll(1, size, doc, sum, max);\n    scoreAll(2, size, doc, sum, max);\n    return max[0] + (sum[0] - max[0]) * tieBreakerMultiplier;\n  }\n\n","sourceOld":"    /** Determine the current document score.  Initially invalid, until {@link #next()} is called the first time.\n     * @return the score of the current generated document\n     */\n    public float score() throws IOException {\n        int doc = ((Scorer) subScorers.get(0)).doc();\n        float[] sum = {((Scorer) subScorers.get(0)).score()}, max = {sum[0]};\n        int size = subScorers.size();\n        scoreAll(1, size, doc, sum, max);\n        scoreAll(2, size, doc, sum, max);\n        return max[0] + (sum[0] - max[0])*tieBreakerMultiplier;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"486cfd5a3f7481938475c113415d896f7a74a4a9","date":1256682581,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#score().mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#score().mjava","sourceNew":"  /** Determine the current document score.  Initially invalid, until {@link #next()} is called the first time.\n   * @return the score of the current generated document\n   */\n  @Override\n  public float score() throws IOException {\n    int doc = subScorers[0].docID();\n    float[] sum = { subScorers[0].score() }, max = { sum[0] };\n    int size = numScorers;\n    scoreAll(1, size, doc, sum, max);\n    scoreAll(2, size, doc, sum, max);\n    return max[0] + (sum[0] - max[0]) * tieBreakerMultiplier;\n  }\n\n","sourceOld":"  /** Determine the current document score.  Initially invalid, until {@link #next()} is called the first time.\n   * @return the score of the current generated document\n   */\n  public float score() throws IOException {\n    int doc = subScorers[0].docID();\n    float[] sum = { subScorers[0].score() }, max = { sum[0] };\n    int size = numScorers;\n    scoreAll(1, size, doc, sum, max);\n    scoreAll(2, size, doc, sum, max);\n    return max[0] + (sum[0] - max[0]) * tieBreakerMultiplier;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#score().mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#score().mjava","sourceNew":"  /** Determine the current document score.  Initially invalid, until {@link #nextDoc()} is called the first time.\n   * @return the score of the current generated document\n   */\n  @Override\n  public float score() throws IOException {\n    int doc = subScorers[0].docID();\n    float[] sum = { subScorers[0].score() }, max = { sum[0] };\n    int size = numScorers;\n    scoreAll(1, size, doc, sum, max);\n    scoreAll(2, size, doc, sum, max);\n    return max[0] + (sum[0] - max[0]) * tieBreakerMultiplier;\n  }\n\n","sourceOld":"  /** Determine the current document score.  Initially invalid, until {@link #next()} is called the first time.\n   * @return the score of the current generated document\n   */\n  @Override\n  public float score() throws IOException {\n    int doc = subScorers[0].docID();\n    float[] sum = { subScorers[0].score() }, max = { sum[0] };\n    int size = numScorers;\n    scoreAll(1, size, doc, sum, max);\n    scoreAll(2, size, doc, sum, max);\n    return max[0] + (sum[0] - max[0]) * tieBreakerMultiplier;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxScorer#score().mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#score().mjava","sourceNew":"  /** Determine the current document score.  Initially invalid, until {@link #nextDoc()} is called the first time.\n   * @return the score of the current generated document\n   */\n  @Override\n  public float score() throws IOException {\n    int doc = subScorers[0].docID();\n    float[] sum = { subScorers[0].score() }, max = { sum[0] };\n    int size = numScorers;\n    scoreAll(1, size, doc, sum, max);\n    scoreAll(2, size, doc, sum, max);\n    return max[0] + (sum[0] - max[0]) * tieBreakerMultiplier;\n  }\n\n","sourceOld":"  /** Determine the current document score.  Initially invalid, until {@link #nextDoc()} is called the first time.\n   * @return the score of the current generated document\n   */\n  @Override\n  public float score() throws IOException {\n    int doc = subScorers[0].docID();\n    float[] sum = { subScorers[0].score() }, max = { sum[0] };\n    int size = numScorers;\n    scoreAll(1, size, doc, sum, max);\n    scoreAll(2, size, doc, sum, max);\n    return max[0] + (sum[0] - max[0]) * tieBreakerMultiplier;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["30a558487f2298c2c19ceca9103c1b6865d64708"],"30a558487f2298c2c19ceca9103c1b6865d64708":["2123bddbd65dea198cac380540636ce43a880403"],"f58d67a8f4d66d0872915c9bb14606874988efc3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ca9e1c07be7f899d56eb37b44a2e4ca252744a52":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["ca9e1c07be7f899d56eb37b44a2e4ca252744a52"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"30a558487f2298c2c19ceca9103c1b6865d64708":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"f58d67a8f4d66d0872915c9bb14606874988efc3":["ca9e1c07be7f899d56eb37b44a2e4ca252744a52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"ca9e1c07be7f899d56eb37b44a2e4ca252744a52":["2123bddbd65dea198cac380540636ce43a880403"],"2123bddbd65dea198cac380540636ce43a880403":["30a558487f2298c2c19ceca9103c1b6865d64708"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}