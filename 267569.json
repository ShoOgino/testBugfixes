{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = new MockRAMDirectory();\n    final int n = 30;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = newRandom();\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = new MockRAMDirectory();\n    final int n = 30;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = newRandom();\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = new MockRAMDirectory();\n    final int n = 30;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = newRandom();\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    FlexTestUtil.verifyFlexVsPreFlex(rnd, dir);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = new MockRAMDirectory();\n    final int n = 30;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = newRandom();\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = new MockRAMDirectory();\n    final int n = 30*_TestUtil.getRandomMultiplier();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = newRandom();\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    FlexTestUtil.verifyFlexVsPreFlex(rnd, dir);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = new MockRAMDirectory();\n    final int n = 30;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = newRandom();\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    FlexTestUtil.verifyFlexVsPreFlex(rnd, dir);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = new MockRAMDirectory();\n    final int n = 30*_TestUtil.getRandomMultiplier();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = newRandom();\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    FlexTestUtil.verifyFlexVsPreFlex(rnd, dir);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = new MockRAMDirectory();\n    final int n = 30*_TestUtil.getRandomMultiplier();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = newRandom();\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    FlexTestUtil.verifyFlexVsPreFlex(rnd, dir);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = new MockRAMDirectory();\n    final int n = 30*_TestUtil.getRandomMultiplier();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = newRandom();\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = new MockRAMDirectory();\n    final int n = 30*_TestUtil.getRandomMultiplier();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = newRandom();\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    FlexTestUtil.verifyFlexVsPreFlex(rnd, dir);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = new MockRAMDirectory();\n    final int n = 30*_TestUtil.getRandomMultiplier();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = newRandom();\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = new MockRAMDirectory();\n    final int n = 30*_TestUtil.getRandomMultiplier();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = newRandom();\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    FlexTestUtil.verifyFlexVsPreFlex(rnd, dir);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = new MockRAMDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = newRandom();\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = new MockRAMDirectory();\n    final int n = 30*_TestUtil.getRandomMultiplier();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = newRandom();\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = new MockRAMDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = newRandom();\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = new MockRAMDirectory();\n    final int n = 30*_TestUtil.getRandomMultiplier();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = newRandom();\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = new MockRAMDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    Random random = newRandom();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = new MockRAMDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = newRandom();\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    Random random = newRandom();\n    final Directory dir = newDirectory(random);\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = new MockRAMDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    Random random = newRandom();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    Random random = newRandom();\n    final Directory dir = newDirectory(random);\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"179136c5fabe4778dc53f9946a2e5c008fd589a0","date":1292267523,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = new MockRAMDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = newRandom();\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 ||( i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                // r might have changed because this is not a \n                // synchronized method. However we don't want\n                // to make it synchronized to test \n                // thread-safety of IndexReader.close().\n                // That's why we add refreshed also to \n                // readersToClose, because double closing is fine\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n                readersToClose.add(refreshed);\n              }\n              synchronized(this) {\n                wait(1000);\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(100);\n              }\n            }\n                        \n          }\n          \n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","date":1294877328,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", Similarity.getDefault().encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", Similarity.getDefault().encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity().get(\"field1\");\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", Similarity.getDefault().encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity().get(\"field1\");\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", Similarity.getDefault().encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity().get(\"field1\");\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity().get(\"field1\");\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity().get(\"field1\");\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.setNorm(i, \"field1\", 50);\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity().get(\"field1\");\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity().get(\"field1\");\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = new IndexSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                \n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a31c91eda919456f5f9237b086174385292f9935","date":1299074041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity().get(\"field1\");\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity().get(\"field1\");\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity().get(\"field1\");\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer()));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = atLeast(30);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = atLeast(30);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = atLeast(30);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = 30 * RANDOM_MULTIPLIER;\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5562d0baa21d9354fd8200f176bcc95c7541391","date":1308901754,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = atLeast(30);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = atLeast(30);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    final int n = atLeast(30);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          DefaultSimilarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          DefaultSimilarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          DefaultSimilarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          Similarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          DefaultSimilarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = IndexReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = IndexReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          DefaultSimilarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = reader.reopen();\n        if (refreshed != reader) {\n          readersToClose.add(reader);\n        }\n        reader = refreshed;\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = r.reopen();\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          DefaultSimilarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = IndexReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = IndexReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.optimize();\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          DefaultSimilarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = IndexReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = IndexReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":null,"sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          DefaultSimilarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = IndexReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = IndexReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3","date":1322958335,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"/dev/null","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = IndexReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = IndexReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = IndexReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = IndexReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          DefaultSimilarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = IndexReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = IndexReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = IndexReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = IndexReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n        if (i % 3 == 0) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          DefaultSimilarity sim = new DefaultSimilarity();\n          modifier.setNorm(i, \"field1\", sim.encodeNormValue(50f));\n          modifier.close();\n        } else if (i % 3 == 1) {\n          IndexReader modifier = IndexReader.open(dir, false);\n          modifier.deleteDocument(i % modifier.maxDoc());\n          modifier.close();\n        } else {\n          IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n          modifier.addDocument(createDocument(n + i, 6));\n          modifier.close();\n        }\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir, false);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir, false);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = IndexReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = IndexReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = IndexReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = IndexReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = IndexReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = IndexReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = IndexReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = IndexReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = IndexReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = IndexReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                searcher.close();\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d40b62adb64d8f7b2f85ee849349cfb0bef03f45","date":1327855938,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = IndexReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = IndexReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected IndexReader openReader() throws IOException {\n        return IndexReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    IndexReader firstReader = IndexReader.open(dir);\n    IndexReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<IndexReader> readersToClose = Collections.synchronizedSet(new HashSet<IndexReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        IndexReader refreshed = IndexReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final IndexReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                IndexReader refreshed = IndexReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final IndexReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","179136c5fabe4778dc53f9946a2e5c008fd589a0"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","790e1fde4caa765b3faaad3fbcd25c6973450336"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["d572389229127c297dd1fa5ce4758e1cec41e799"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a3776dccca01c11e7046323cfad46a3b4a471233","f83af14a2a8131b14d7aee6274c740334e0363d3"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["b5562d0baa21d9354fd8200f176bcc95c7541391"],"d572389229127c297dd1fa5ce4758e1cec41e799":["2aafd88401639311b0404e67c94e829e123a0e45"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","28427ef110c4c5bf5b4057731b83110bd1e13724"],"962d04139994fce5193143ef35615499a9a96d78":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"2553b00f699380c64959ccb27991289aae87be2e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","b5562d0baa21d9354fd8200f176bcc95c7541391"],"b5562d0baa21d9354fd8200f176bcc95c7541391":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f83af14a2a8131b14d7aee6274c740334e0363d3","b5562d0baa21d9354fd8200f176bcc95c7541391"],"2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3":["4122a26e1fd0457a340616673a3d3aada370f713"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","a31c91eda919456f5f9237b086174385292f9935"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a31c91eda919456f5f9237b086174385292f9935","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","f83af14a2a8131b14d7aee6274c740334e0363d3"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["868da859b43505d9d2a023bfeae6dd0c795f5295","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","a31c91eda919456f5f9237b086174385292f9935"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a31c91eda919456f5f9237b086174385292f9935"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["2553b00f699380c64959ccb27991289aae87be2e","0f3cee3d20b0c786e6fca20539454262e29edcab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["179136c5fabe4778dc53f9946a2e5c008fd589a0"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"a31c91eda919456f5f9237b086174385292f9935":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["1f653cfcf159baeaafe5d01682a911e95bba4012","179136c5fabe4778dc53f9946a2e5c008fd589a0"],"2aafd88401639311b0404e67c94e829e123a0e45":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["0e7c2454a6a8237bfd0e953f5b940838408c9055","d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"1291e4568eb7d9463d751627596ef14baf4c1603":["d083e83f225b11e5fdd900e83d26ddb385b6955c","0f3cee3d20b0c786e6fca20539454262e29edcab"],"4122a26e1fd0457a340616673a3d3aada370f713":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"179136c5fabe4778dc53f9946a2e5c008fd589a0":["1f653cfcf159baeaafe5d01682a911e95bba4012"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["b21422ff1d1d56499dec481f193b402e5e8def5b","3242a09f703274d3b9283f2064a1a33064b53a1b"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","b5562d0baa21d9354fd8200f176bcc95c7541391","d083e83f225b11e5fdd900e83d26ddb385b6955c","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["d40b62adb64d8f7b2f85ee849349cfb0bef03f45","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","5cab9a86bd67202d20b6adc463008c8e982b070a"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","179136c5fabe4778dc53f9946a2e5c008fd589a0"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","5f4e87790277826a2aea119328600dfb07761f32"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["2553b00f699380c64959ccb27991289aae87be2e"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["8a8259c922a83abc544609227a60d48e5ee93e7e","f0b9507caf22f292ac0e5e59f62db4275adf4511","1291e4568eb7d9463d751627596ef14baf4c1603"],"d572389229127c297dd1fa5ce4758e1cec41e799":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"962d04139994fce5193143ef35615499a9a96d78":[],"2553b00f699380c64959ccb27991289aae87be2e":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"b5562d0baa21d9354fd8200f176bcc95c7541391":["0f3cee3d20b0c786e6fca20539454262e29edcab","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1291e4568eb7d9463d751627596ef14baf4c1603"],"2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["2aafd88401639311b0404e67c94e829e123a0e45"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["f83af14a2a8131b14d7aee6274c740334e0363d3","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a31c91eda919456f5f9237b086174385292f9935":["d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"2aafd88401639311b0404e67c94e829e123a0e45":["d572389229127c297dd1fa5ce4758e1cec41e799"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a31c91eda919456f5f9237b086174385292f9935"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"4122a26e1fd0457a340616673a3d3aada370f713":["2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"179136c5fabe4778dc53f9946a2e5c008fd589a0":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["962d04139994fce5193143ef35615499a9a96d78","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","f0b9507caf22f292ac0e5e59f62db4275adf4511","1291e4568eb7d9463d751627596ef14baf4c1603","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}