{"path":"solr/core/src/test/org/apache/solr/search/TestTermsQParserPlugin#testTermsMethodEquivalency().mjava","commits":[{"id":"a32b832a37c116a61a7e58893eb45eb8c940cc0f","date":1578915801,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestTermsQParserPlugin#testTermsMethodEquivalency().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTermsMethodEquivalency() {\n    // Run queries with a variety of 'method' and postfilter options.\n    final TermsParams[] methods = new TermsParams[] {\n        new TermsParams(\"termsFilter\", true),\n        new TermsParams(\"termsFilter\", false),\n        new TermsParams(\"booleanQuery\", true),\n        new TermsParams(\"booleanQuery\", false),\n        new TermsParams(\"automaton\", true),\n        new TermsParams(\"automaton\", false),\n        new TermsParams(\"docValuesTermsFilter\", true),\n        new TermsParams(\"docValuesTermsFilter\", false),\n        new TermsParams(\"docValuesTermsFilterTopLevel\", true),\n        new TermsParams(\"docValuesTermsFilterTopLevel\", false),\n        new TermsParams(\"docValuesTermsFilterPerSegment\", true),\n        new TermsParams(\"docValuesTermsFilterPerSegment\", false)\n    };\n\n    for (TermsParams method : methods) {\n      // Single-valued field, single term value\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", method.buildQuery(\"author_s\", \"Robert Jordan\"));\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/str[@name='id'][.='2']\",\n          \"//result/doc[2]/str[@name='id'][.='3']\"\n      );\n\n      // Single-valued field, multiple term values\n      params = new ModifiableSolrParams();\n      params.add(\"q\", method.buildQuery(\"author_s\", \"Robert Jordan,Isaac Asimov\"));\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=3]\",\n          \"//result/doc[1]/str[@name='id'][.='2']\",\n          \"//result/doc[2]/str[@name='id'][.='3']\",\n          \"//result/doc[3]/str[@name='id'][.='7']\"\n      );\n\n      // Multi-valued field, single term value\n      params = new ModifiableSolrParams();\n      params.add(\"q\", method.buildQuery(\"cat_s\", \"childrens\"));\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/str[@name='id'][.='2']\",\n          \"//result/doc[2]/str[@name='id'][.='3']\"\n      );\n\n      // Multi-valued field, multiple term values\n      params = new ModifiableSolrParams();\n      params.add(\"q\", method.buildQuery(\"cat_s\", \"childrens,scifi\"));\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n          \"//result/doc[1]/str[@name='id'][.='2']\",\n          \"//result/doc[2]/str[@name='id'][.='3']\",\n          \"//result/doc[3]/str[@name='id'][.='5']\",\n          \"//result/doc[4]/str[@name='id'][.='6']\",\n          \"//result/doc[5]/str[@name='id'][.='7']\"\n      );\n\n      // Numeric field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", method.buildQuery(\"pubyear_i\", \"2009\"));\n      params.add(\"sort\", \"id asc\");\n\n      // Test schema randomizes between Trie and Point.  \"terms\" is supported for \"trie\" but not \"Point\"\n      final String numericFieldType = System.getProperty(\"solr.tests.IntegerFieldType\");\n      if (numericFieldType.contains(\"Point\")) {\n        assertQEx(\"Expected 'terms' query on PointField to fail\", req(params, \"indent\", \"on\"), 400);\n      } else {\n        assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=1]\", \"//result/doc[1]/str[@name='id'][.='1']\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["496b994c291d3ea81d7c8e99988e0f36a46b970b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2509bad1fbf30792438821cc94f7a5e1a13d5473","date":1578934553,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestTermsQParserPlugin#testTermsMethodEquivalency().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTermsMethodEquivalency() {\n    // Run queries with a variety of 'method' and postfilter options.\n    final TermsParams[] methods = new TermsParams[] {\n        new TermsParams(\"termsFilter\", true),\n        new TermsParams(\"termsFilter\", false),\n        new TermsParams(\"booleanQuery\", true),\n        new TermsParams(\"booleanQuery\", false),\n        new TermsParams(\"automaton\", true),\n        new TermsParams(\"automaton\", false),\n        new TermsParams(\"docValuesTermsFilter\", true),\n        new TermsParams(\"docValuesTermsFilter\", false),\n        new TermsParams(\"docValuesTermsFilterTopLevel\", true),\n        new TermsParams(\"docValuesTermsFilterTopLevel\", false),\n        new TermsParams(\"docValuesTermsFilterPerSegment\", true),\n        new TermsParams(\"docValuesTermsFilterPerSegment\", false)\n    };\n\n    for (TermsParams method : methods) {\n      // Single-valued field, single term value\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", method.buildQuery(\"author_s\", \"Robert Jordan\"));\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/str[@name='id'][.='2']\",\n          \"//result/doc[2]/str[@name='id'][.='3']\"\n      );\n\n      // Single-valued field, multiple term values\n      params = new ModifiableSolrParams();\n      params.add(\"q\", method.buildQuery(\"author_s\", \"Robert Jordan,Isaac Asimov\"));\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=3]\",\n          \"//result/doc[1]/str[@name='id'][.='2']\",\n          \"//result/doc[2]/str[@name='id'][.='3']\",\n          \"//result/doc[3]/str[@name='id'][.='7']\"\n      );\n\n      // Multi-valued field, single term value\n      params = new ModifiableSolrParams();\n      params.add(\"q\", method.buildQuery(\"cat_s\", \"childrens\"));\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/str[@name='id'][.='2']\",\n          \"//result/doc[2]/str[@name='id'][.='3']\"\n      );\n\n      // Multi-valued field, multiple term values\n      params = new ModifiableSolrParams();\n      params.add(\"q\", method.buildQuery(\"cat_s\", \"childrens,scifi\"));\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n          \"//result/doc[1]/str[@name='id'][.='2']\",\n          \"//result/doc[2]/str[@name='id'][.='3']\",\n          \"//result/doc[3]/str[@name='id'][.='5']\",\n          \"//result/doc[4]/str[@name='id'][.='6']\",\n          \"//result/doc[5]/str[@name='id'][.='7']\"\n      );\n\n      // Numeric field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", method.buildQuery(\"pubyear_i\", \"2009\"));\n      params.add(\"sort\", \"id asc\");\n\n      // Test schema randomizes between Trie and Point.  \"terms\" is supported for \"trie\" but not \"Point\"\n      final String numericFieldType = System.getProperty(\"solr.tests.IntegerFieldType\");\n      if (numericFieldType.contains(\"Point\")) {\n        assertQEx(\"Expected 'terms' query on PointField to fail\", req(params, \"indent\", \"on\"), 400);\n      } else {\n        assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=1]\", \"//result/doc[1]/str[@name='id'][.='1']\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"496b994c291d3ea81d7c8e99988e0f36a46b970b","date":1599328467,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestTermsQParserPlugin#testTermsMethodEquivalency().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestTermsQParserPlugin#testTermsMethodEquivalency().mjava","sourceNew":"  @Test\n  public void testTermsMethodEquivalency() {\n    // Run queries with a variety of 'method' and postfilter options.\n    final TermsParams[] methods = new TermsParams[] {\n        new TermsParams(\"termsFilter\", true),\n        new TermsParams(\"termsFilter\", false),\n        new TermsParams(\"booleanQuery\", true),\n        new TermsParams(\"booleanQuery\", false),\n        new TermsParams(\"automaton\", true),\n        new TermsParams(\"automaton\", false),\n        new TermsParams(\"docValuesTermsFilter\", true),\n        new TermsParams(\"docValuesTermsFilter\", false),\n        new TermsParams(\"docValuesTermsFilterTopLevel\", true),\n        new TermsParams(\"docValuesTermsFilterTopLevel\", false),\n        new TermsParams(\"docValuesTermsFilterPerSegment\", true),\n        new TermsParams(\"docValuesTermsFilterPerSegment\", false)\n    };\n\n    for (TermsParams method : methods) {\n      // Single-valued field, single term value\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", method.buildQuery(\"author_s1\", \"Robert Jordan\"));\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/str[@name='id'][.='2']\",\n          \"//result/doc[2]/str[@name='id'][.='3']\"\n      );\n\n      // Single-valued field, multiple term values\n      params = new ModifiableSolrParams();\n      params.add(\"q\", method.buildQuery(\"author_s1\", \"Robert Jordan,Isaac Asimov\"));\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=3]\",\n          \"//result/doc[1]/str[@name='id'][.='2']\",\n          \"//result/doc[2]/str[@name='id'][.='3']\",\n          \"//result/doc[3]/str[@name='id'][.='7']\"\n      );\n\n      // Multi-valued field, single term value\n      params = new ModifiableSolrParams();\n      params.add(\"q\", method.buildQuery(\"cat_s\", \"childrens\"));\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/str[@name='id'][.='2']\",\n          \"//result/doc[2]/str[@name='id'][.='3']\"\n      );\n\n      // Multi-valued field, multiple term values\n      params = new ModifiableSolrParams();\n      params.add(\"q\", method.buildQuery(\"cat_s\", \"childrens,scifi\"));\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n          \"//result/doc[1]/str[@name='id'][.='2']\",\n          \"//result/doc[2]/str[@name='id'][.='3']\",\n          \"//result/doc[3]/str[@name='id'][.='5']\",\n          \"//result/doc[4]/str[@name='id'][.='6']\",\n          \"//result/doc[5]/str[@name='id'][.='7']\"\n      );\n\n      // Numeric field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", method.buildQuery(\"pubyear_i\", \"2009\"));\n      params.add(\"sort\", \"id asc\");\n\n      // Test schema randomizes between Trie and Point.  \"terms\" is supported for \"trie\" but not \"Point\"\n      final String numericFieldType = System.getProperty(\"solr.tests.IntegerFieldType\");\n      if (numericFieldType.contains(\"Point\")) {\n        assertQEx(\"Expected 'terms' query on PointField to fail\", req(params, \"indent\", \"on\"), 400);\n      } else {\n        assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=1]\", \"//result/doc[1]/str[@name='id'][.='1']\");\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTermsMethodEquivalency() {\n    // Run queries with a variety of 'method' and postfilter options.\n    final TermsParams[] methods = new TermsParams[] {\n        new TermsParams(\"termsFilter\", true),\n        new TermsParams(\"termsFilter\", false),\n        new TermsParams(\"booleanQuery\", true),\n        new TermsParams(\"booleanQuery\", false),\n        new TermsParams(\"automaton\", true),\n        new TermsParams(\"automaton\", false),\n        new TermsParams(\"docValuesTermsFilter\", true),\n        new TermsParams(\"docValuesTermsFilter\", false),\n        new TermsParams(\"docValuesTermsFilterTopLevel\", true),\n        new TermsParams(\"docValuesTermsFilterTopLevel\", false),\n        new TermsParams(\"docValuesTermsFilterPerSegment\", true),\n        new TermsParams(\"docValuesTermsFilterPerSegment\", false)\n    };\n\n    for (TermsParams method : methods) {\n      // Single-valued field, single term value\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", method.buildQuery(\"author_s\", \"Robert Jordan\"));\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/str[@name='id'][.='2']\",\n          \"//result/doc[2]/str[@name='id'][.='3']\"\n      );\n\n      // Single-valued field, multiple term values\n      params = new ModifiableSolrParams();\n      params.add(\"q\", method.buildQuery(\"author_s\", \"Robert Jordan,Isaac Asimov\"));\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=3]\",\n          \"//result/doc[1]/str[@name='id'][.='2']\",\n          \"//result/doc[2]/str[@name='id'][.='3']\",\n          \"//result/doc[3]/str[@name='id'][.='7']\"\n      );\n\n      // Multi-valued field, single term value\n      params = new ModifiableSolrParams();\n      params.add(\"q\", method.buildQuery(\"cat_s\", \"childrens\"));\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n          \"//result/doc[1]/str[@name='id'][.='2']\",\n          \"//result/doc[2]/str[@name='id'][.='3']\"\n      );\n\n      // Multi-valued field, multiple term values\n      params = new ModifiableSolrParams();\n      params.add(\"q\", method.buildQuery(\"cat_s\", \"childrens,scifi\"));\n      params.add(\"sort\", \"id asc\");\n      assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n          \"//result/doc[1]/str[@name='id'][.='2']\",\n          \"//result/doc[2]/str[@name='id'][.='3']\",\n          \"//result/doc[3]/str[@name='id'][.='5']\",\n          \"//result/doc[4]/str[@name='id'][.='6']\",\n          \"//result/doc[5]/str[@name='id'][.='7']\"\n      );\n\n      // Numeric field\n      params = new ModifiableSolrParams();\n      params.add(\"q\", method.buildQuery(\"pubyear_i\", \"2009\"));\n      params.add(\"sort\", \"id asc\");\n\n      // Test schema randomizes between Trie and Point.  \"terms\" is supported for \"trie\" but not \"Point\"\n      final String numericFieldType = System.getProperty(\"solr.tests.IntegerFieldType\");\n      if (numericFieldType.contains(\"Point\")) {\n        assertQEx(\"Expected 'terms' query on PointField to fail\", req(params, \"indent\", \"on\"), 400);\n      } else {\n        assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=1]\", \"//result/doc[1]/str[@name='id'][.='1']\");\n      }\n    }\n  }\n\n","bugFix":["a32b832a37c116a61a7e58893eb45eb8c940cc0f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"496b994c291d3ea81d7c8e99988e0f36a46b970b":["a32b832a37c116a61a7e58893eb45eb8c940cc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a32b832a37c116a61a7e58893eb45eb8c940cc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["496b994c291d3ea81d7c8e99988e0f36a46b970b"],"2509bad1fbf30792438821cc94f7a5e1a13d5473":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a32b832a37c116a61a7e58893eb45eb8c940cc0f"]},"commit2Childs":{"496b994c291d3ea81d7c8e99988e0f36a46b970b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a32b832a37c116a61a7e58893eb45eb8c940cc0f","2509bad1fbf30792438821cc94f7a5e1a13d5473"],"a32b832a37c116a61a7e58893eb45eb8c940cc0f":["496b994c291d3ea81d7c8e99988e0f36a46b970b","2509bad1fbf30792438821cc94f7a5e1a13d5473"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2509bad1fbf30792438821cc94f7a5e1a13d5473":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2509bad1fbf30792438821cc94f7a5e1a13d5473"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}