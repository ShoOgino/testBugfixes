{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean doFullMerge) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!doFullMerge, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = DocHelper.createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean doFullMerge) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!doFullMerge, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = DocHelper.createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean doFullMerge) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!doFullMerge, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = DocHelper.createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean doFullMerge) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!doFullMerge, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = DocHelper.createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"527cc14542789f47d75da436cb4287d1ab887e34","date":1391705548,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean doFullMerge) throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!doFullMerge, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = DocHelper.createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean doFullMerge) throws Exception {\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!doFullMerge, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = DocHelper.createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean doFullMerge) throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!doFullMerge, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = DocHelper.createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.shutdown();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.shutdown();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean doFullMerge) throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!doFullMerge, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = DocHelper.createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean doFullMerge) throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!doFullMerge, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = DocHelper.createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.shutdown();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.shutdown();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean doFullMerge) throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!doFullMerge, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = DocHelper.createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.shutdown();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.shutdown();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean doFullMerge) throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!doFullMerge, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = DocHelper.createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean doFullMerge) throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!doFullMerge, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = DocHelper.createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.shutdown();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.shutdown();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f354ba79a5a3e8491ec2953f14f365a02c058ac","date":1598293148,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#doTestIndexWriterReopenSegment(boolean).mjava","sourceNew":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean doFullMerge) throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxFullFlushMergeWaitMillis(0));\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!doFullMerge, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = DocHelper.createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())).setMaxFullFlushMergeWaitMillis(0));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Tests creating a segment, then check to insure the segment can be seen via\n   * IW.getReader\n   */\n  public void doTestIndexWriterReopenSegment(boolean doFullMerge) throws Exception {\n    Directory dir1 = getAssertNoDeletesDirectory(newDirectory());\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n    IndexReader r1 = writer.getReader();\n    assertEquals(0, r1.maxDoc());\n    createIndexNoClose(false, \"index1\", writer);\n    writer.flush(!doFullMerge, true);\n\n    IndexReader iwr1 = writer.getReader();\n    assertEquals(100, iwr1.maxDoc());\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(r2.maxDoc(), 100);\n    // add 100 documents\n    for (int x = 10000; x < 10000 + 100; x++) {\n      Document d = DocHelper.createDocument(x, \"index1\", 5);\n      writer.addDocument(d);\n    }\n    writer.flush(false, true);\n    // verify the reader was reopened internally\n    IndexReader iwr2 = writer.getReader();\n    assertTrue(iwr2 != r1);\n    assertEquals(200, iwr2.maxDoc());\n    // should have flushed out a segment\n    IndexReader r3 = writer.getReader();\n    assertTrue(r2 != r3);\n    assertEquals(200, r3.maxDoc());\n\n    // dec ref the readers rather than close them because\n    // closing flushes changes to the writer\n    r1.close();\n    iwr1.close();\n    r2.close();\n    r3.close();\n    iwr2.close();\n    writer.close();\n\n    // test whether the changes made it to the directory\n    writer = new IndexWriter(dir1, newIndexWriterConfig(new MockAnalyzer(random())));\n    IndexReader w2r1 = writer.getReader();\n    // insure the deletes were actually flushed to the directory\n    assertEquals(200, w2r1.maxDoc());\n    w2r1.close();\n    writer.close();\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"527cc14542789f47d75da436cb4287d1ab887e34":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["527cc14542789f47d75da436cb4287d1ab887e34"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"]},"commit2Childs":{"527cc14542789f47d75da436cb4287d1ab887e34":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["527cc14542789f47d75da436cb4287d1ab887e34"],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}