{"path":"solr/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","commits":[{"id":"cd00dd91853514614379b0e680d65bd19cac0f30","date":1283087816,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["820731f8480edb13c35c29432e85168fe2c5749f","820731f8480edb13c35c29432e85168fe2c5749f","820731f8480edb13c35c29432e85168fe2c5749f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","sourceNew":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","sourceNew":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/DebugComponentTest#testPerItemInterface().mjava","sourceNew":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testPerItemInterface() throws Exception {\n    //Same as debugQuery = true\n    assertQ(req(\"q\", \"*:*\", \"debug\", \"true\"),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //timing only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.TIMING),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=3\", //should be three pieces to timings\n            \"//lst[@name='timing']/double[@name='time']\", //make sure we have a time value, but don't specify it's result\n            \"count(//lst[@name='prepare']/*)>0\",\n            \"//lst[@name='prepare']/double[@name='time']\",\n            \"count(//lst[@name='process']/*)>0\",\n            \"//lst[@name='process']/double[@name='time']\"\n    );\n    //query only\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"count(//lst[@name='explain']/*)=0\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n\n    );\n\n    //explains\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS),\n            \"count(//str[@name='rawquerystring'])=0\",\n            \"count(//str[@name='querystring'])=0\",\n            \"count(//str[@name='parsedquery'])=0\",\n            \"count(//str[@name='parsedquery_toString'])=0\",\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n            \"count(//str[@name='QParser'])=0\",// make sure the QParser is specified\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n    assertQ(req(\"q\", \"*:*\", \"debug\", CommonParams.RESULTS,\n            \"debug\", CommonParams.QUERY),\n            \"//str[@name='rawquerystring']='*:*'\",\n            \"//str[@name='querystring']='*:*'\",\n            \"//str[@name='parsedquery']='MatchAllDocsQuery(*:*)'\",\n            \"//str[@name='parsedquery_toString']='*:*'\",\n            \"//str[@name='QParser']\",// make sure the QParser is specified\n\n            \"count(//lst[@name='explain']/*)=3\",\n            \"//lst[@name='explain']/str[@name='1']\",\n            \"//lst[@name='explain']/str[@name='2']\",\n            \"//lst[@name='explain']/str[@name='3']\",\n\n            \"count(//lst[@name='timing']/*)=0\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["cd00dd91853514614379b0e680d65bd19cac0f30"],"c26f00b574427b55127e869b935845554afde1fa":["cd00dd91853514614379b0e680d65bd19cac0f30","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["cd00dd91853514614379b0e680d65bd19cac0f30"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cd00dd91853514614379b0e680d65bd19cac0f30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"cd00dd91853514614379b0e680d65bd19cac0f30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd00dd91853514614379b0e680d65bd19cac0f30"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd00dd91853514614379b0e680d65bd19cac0f30":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}