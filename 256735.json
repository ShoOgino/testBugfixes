{"path":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#nextDoc().mjava","commits":[{"id":"f35b388d9df4d2190412cd1cbcc0c391a94bb158","date":1309218318,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#nextDoc().mjava","pathOld":"solr/src/java/org/apache/solr/search/function/FunctionQuery.AllScorer#nextDoc().mjava","sourceNew":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (hasDeletions && delDocs.get(doc)) continue;\n        return doc;\n      }\n    }\n\n","sourceOld":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (hasDeletions && delDocs.get(doc)) continue;\n        return doc;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#nextDoc().mjava","pathOld":"solr/src/java/org/apache/solr/search/function/FunctionQuery.AllScorer#nextDoc().mjava","sourceNew":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (hasDeletions && delDocs.get(doc)) continue;\n        return doc;\n      }\n    }\n\n","sourceOld":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (hasDeletions && delDocs.get(doc)) continue;\n        return doc;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#nextDoc().mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#nextDoc().mjava","sourceNew":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (hasDeletions && !liveDocs.get(doc)) continue;\n        return doc;\n      }\n    }\n\n","sourceOld":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (hasDeletions && delDocs.get(doc)) continue;\n        return doc;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#nextDoc().mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#nextDoc().mjava","sourceNew":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (hasDeletions && !liveDocs.get(doc)) continue;\n        return doc;\n      }\n    }\n\n","sourceOld":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (hasDeletions && delDocs.get(doc)) continue;\n        return doc;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (hasDeletions && !liveDocs.get(doc)) continue;\n        return doc;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#nextDoc().mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#nextDoc().mjava","sourceNew":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        return doc;\n      }\n    }\n\n","sourceOld":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (hasDeletions && !liveDocs.get(doc)) continue;\n        return doc;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"908e4b72ef80ab923b96d88f2d5e1053ffe23c00","date":1328149074,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#nextDoc().mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#nextDoc().mjava","sourceNew":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (acceptDocs != null && !acceptDocs.get(doc)) continue;\n        return doc;\n      }\n    }\n\n","sourceOld":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (liveDocs != null && !liveDocs.get(doc)) continue;\n        return doc;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#nextDoc().mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/FunctionQuery.AllScorer#nextDoc().mjava","sourceNew":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (acceptDocs != null && !acceptDocs.get(doc)) continue;\n        return doc;\n      }\n    }\n\n","sourceOld":"    // instead of matching all docs, we could also embed a query.\n    // the score could either ignore the subscore, or boost it.\n    // Containment:  floatline(foo:myTerm, \"myFloatField\", 1.0, 0.0f)\n    // Boost:        foo:myTerm^floatline(\"myFloatField\",1.0,0.0f)\n    @Override\n    public int nextDoc() throws IOException {\n      for(;;) {\n        ++doc;\n        if (doc>=maxDoc) {\n          return doc=NO_MORE_DOCS;\n        }\n        if (acceptDocs != null && !acceptDocs.get(doc)) continue;\n        return doc;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"908e4b72ef80ab923b96d88f2d5e1053ffe23c00":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["908e4b72ef80ab923b96d88f2d5e1053ffe23c00"],"f35b388d9df4d2190412cd1cbcc0c391a94bb158":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["f35b388d9df4d2190412cd1cbcc0c391a94bb158"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f35b388d9df4d2190412cd1cbcc0c391a94bb158"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"908e4b72ef80ab923b96d88f2d5e1053ffe23c00":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f35b388d9df4d2190412cd1cbcc0c391a94bb158":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","2553b00f699380c64959ccb27991289aae87be2e"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["908e4b72ef80ab923b96d88f2d5e1053ffe23c00"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f35b388d9df4d2190412cd1cbcc0c391a94bb158","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}