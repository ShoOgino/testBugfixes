{"path":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#transform(SolrDocument,int,float).mjava","commits":[{"id":"561c2351baf6dd64061addef891359954c1a7faa","date":1462788487,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#transform(SolrDocument,int,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    final SolrParams docWithDeprefixed = SolrParams.wrapDefaults(\n        new DocRowParams(doc, prefix, separator), baseSubParams);\n    try {\n      Callable<QueryResponse> subQuery = new Callable<QueryResponse>() {\n        @Override\n        public QueryResponse call() throws Exception {\n          try {\n            return new QueryResponse(\n                server.request(\n                    new QueryRequest(docWithDeprefixed), coreName)\n                , server);\n          } finally {\n          }\n        }\n      };\n      QueryResponse response = \n          SolrRequestInfoSuspender.doInSuspension(subQuery);\n\n      final SolrDocumentList docList = (SolrDocumentList) response.getResults();\n\n      doc.setField(getName(), new Result(docList));\n\n    } catch (Exception e) {\n      String docString = doc.toString();\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"while invoking \" +\n          name + \":[subquery\"+ (coreName!=null ? \"fromIndex=\"+coreName : \"\") +\"] on doc=\" +\n            docString.substring(0, Math.min(100, docString.length())), e.getCause());\n    } finally {}\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#transform(SolrDocument,int,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    final SolrParams docWithDeprefixed = SolrParams.wrapDefaults(\n        new DocRowParams(doc, prefix, separator), baseSubParams);\n    try {\n      Callable<QueryResponse> subQuery = new Callable<QueryResponse>() {\n        @Override\n        public QueryResponse call() throws Exception {\n          try {\n            return new QueryResponse(\n                server.request(\n                    new QueryRequest(docWithDeprefixed), coreName)\n                , server);\n          } finally {\n          }\n        }\n      };\n      QueryResponse response = \n          SolrRequestInfoSuspender.doInSuspension(subQuery);\n\n      final SolrDocumentList docList = (SolrDocumentList) response.getResults();\n\n      doc.setField(getName(), new Result(docList));\n\n    } catch (Exception e) {\n      String docString = doc.toString();\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"while invoking \" +\n          name + \":[subquery\"+ (coreName!=null ? \"fromIndex=\"+coreName : \"\") +\"] on doc=\" +\n            docString.substring(0, Math.min(100, docString.length())), e.getCause());\n    } finally {}\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#transform(SolrDocument,int,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    final SolrParams docWithDeprefixed = SolrParams.wrapDefaults(\n        new DocRowParams(doc, prefix, separator), baseSubParams);\n    try {\n      Callable<QueryResponse> subQuery = new Callable<QueryResponse>() {\n        @Override\n        public QueryResponse call() throws Exception {\n          try {\n            return new QueryResponse(\n                server.request(\n                    new QueryRequest(docWithDeprefixed), coreName)\n                , server);\n          } finally {\n          }\n        }\n      };\n      QueryResponse response = \n          SolrRequestInfoSuspender.doInSuspension(subQuery);\n\n      final SolrDocumentList docList = (SolrDocumentList) response.getResults();\n\n      doc.setField(getName(), new Result(docList));\n\n    } catch (Exception e) {\n      String docString = doc.toString();\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"while invoking \" +\n          name + \":[subquery\"+ (coreName!=null ? \"fromIndex=\"+coreName : \"\") +\"] on doc=\" +\n            docString.substring(0, Math.min(100, docString.length())), e.getCause());\n    } finally {}\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#transform(SolrDocument,int,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    final SolrParams docWithDeprefixed = SolrParams.wrapDefaults(\n        new DocRowParams(doc, prefix, separator), baseSubParams);\n    try {\n      Callable<QueryResponse> subQuery = new Callable<QueryResponse>() {\n        @Override\n        public QueryResponse call() throws Exception {\n          try {\n            return new QueryResponse(\n                server.request(\n                    new QueryRequest(docWithDeprefixed), coreName)\n                , server);\n          } finally {\n          }\n        }\n      };\n      QueryResponse response = \n          SolrRequestInfoSuspender.doInSuspension(subQuery);\n\n      final SolrDocumentList docList = (SolrDocumentList) response.getResults();\n\n      doc.setField(getName(), new Result(docList));\n\n    } catch (Exception e) {\n      String docString = doc.toString();\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"while invoking \" +\n          name + \":[subquery\"+ (coreName!=null ? \"fromIndex=\"+coreName : \"\") +\"] on doc=\" +\n            docString.substring(0, Math.min(100, docString.length())), e.getCause());\n    } finally {}\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320eec6599df6f97f2461a5d1ad49cd93b324a14","date":1503502574,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#transform(SolrDocument,int,float).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n\n    final SolrParams docWithDeprefixed = SolrParams.wrapDefaults(\n        new DocRowParams(doc, prefix, separator), baseSubParams);\n    try {\n      Callable<QueryResponse> subQuery = new Callable<QueryResponse>() {\n        @Override\n        public QueryResponse call() throws Exception {\n          try {\n            return new QueryResponse(\n                server.request(\n                    new QueryRequest(docWithDeprefixed), coreName)\n                , server);\n          } finally {\n          }\n        }\n      };\n      QueryResponse response = \n          SolrRequestInfoSuspender.doInSuspension(subQuery);\n\n      final SolrDocumentList docList = (SolrDocumentList) response.getResults();\n\n      doc.setField(getName(), new Result(docList));\n\n    } catch (Exception e) {\n      String docString = doc.toString();\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"while invoking \" +\n          name + \":[subquery\"+ (coreName!=null ? \"fromIndex=\"+coreName : \"\") +\"] on doc=\" +\n            docString.substring(0, Math.min(100, docString.length())), e.getCause());\n    } finally {}\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    final SolrParams docWithDeprefixed = SolrParams.wrapDefaults(\n        new DocRowParams(doc, prefix, separator), baseSubParams);\n    try {\n      Callable<QueryResponse> subQuery = new Callable<QueryResponse>() {\n        @Override\n        public QueryResponse call() throws Exception {\n          try {\n            return new QueryResponse(\n                server.request(\n                    new QueryRequest(docWithDeprefixed), coreName)\n                , server);\n          } finally {\n          }\n        }\n      };\n      QueryResponse response = \n          SolrRequestInfoSuspender.doInSuspension(subQuery);\n\n      final SolrDocumentList docList = (SolrDocumentList) response.getResults();\n\n      doc.setField(getName(), new Result(docList));\n\n    } catch (Exception e) {\n      String docString = doc.toString();\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"while invoking \" +\n          name + \":[subquery\"+ (coreName!=null ? \"fromIndex=\"+coreName : \"\") +\"] on doc=\" +\n            docString.substring(0, Math.min(100, docString.length())), e.getCause());\n    } finally {}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182384b20c064aa16998ddebe9f36e649279c5a6","date":1503596494,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#transform(SolrDocument,int,float).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n\n    final SolrParams docWithDeprefixed = SolrParams.wrapDefaults(\n        new DocRowParams(doc, prefix, separator), baseSubParams);\n    try {\n      Callable<QueryResponse> subQuery = new Callable<QueryResponse>() {\n        @Override\n        public QueryResponse call() throws Exception {\n          try {\n            return new QueryResponse(\n                server.request(\n                    new QueryRequest(docWithDeprefixed), coreName)\n                , server);\n          } finally {\n          }\n        }\n      };\n      QueryResponse response = \n          SolrRequestInfoSuspender.doInSuspension(subQuery);\n\n      final SolrDocumentList docList = (SolrDocumentList) response.getResults();\n\n      doc.setField(getName(), new Result(docList));\n\n    } catch (Exception e) {\n      String docString = doc.toString();\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"while invoking \" +\n          name + \":[subquery\"+ (coreName!=null ? \"fromIndex=\"+coreName : \"\") +\"] on doc=\" +\n            docString.substring(0, Math.min(100, docString.length())), e.getCause());\n    } finally {}\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    final SolrParams docWithDeprefixed = SolrParams.wrapDefaults(\n        new DocRowParams(doc, prefix, separator), baseSubParams);\n    try {\n      Callable<QueryResponse> subQuery = new Callable<QueryResponse>() {\n        @Override\n        public QueryResponse call() throws Exception {\n          try {\n            return new QueryResponse(\n                server.request(\n                    new QueryRequest(docWithDeprefixed), coreName)\n                , server);\n          } finally {\n          }\n        }\n      };\n      QueryResponse response = \n          SolrRequestInfoSuspender.doInSuspension(subQuery);\n\n      final SolrDocumentList docList = (SolrDocumentList) response.getResults();\n\n      doc.setField(getName(), new Result(docList));\n\n    } catch (Exception e) {\n      String docString = doc.toString();\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"while invoking \" +\n          name + \":[subquery\"+ (coreName!=null ? \"fromIndex=\"+coreName : \"\") +\"] on doc=\" +\n            docString.substring(0, Math.min(100, docString.length())), e.getCause());\n    } finally {}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/SubQueryAugmenter[SubQueryAugmenterFactory]#transform(SolrDocument,int,float).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n\n    final SolrParams docWithDeprefixed = SolrParams.wrapDefaults(\n        new DocRowParams(doc, prefix, separator), baseSubParams);\n    try {\n      Callable<QueryResponse> subQuery = new Callable<QueryResponse>() {\n        @Override\n        public QueryResponse call() throws Exception {\n          try {\n            return new QueryResponse(\n                server.request(\n                    new QueryRequest(docWithDeprefixed), coreName)\n                , server);\n          } finally {\n          }\n        }\n      };\n      QueryResponse response = \n          SolrRequestInfoSuspender.doInSuspension(subQuery);\n\n      final SolrDocumentList docList = (SolrDocumentList) response.getResults();\n\n      doc.setField(getName(), new Result(docList));\n\n    } catch (Exception e) {\n      String docString = doc.toString();\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"while invoking \" +\n          name + \":[subquery\"+ (coreName!=null ? \"fromIndex=\"+coreName : \"\") +\"] on doc=\" +\n            docString.substring(0, Math.min(100, docString.length())), e.getCause());\n    } finally {}\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    final SolrParams docWithDeprefixed = SolrParams.wrapDefaults(\n        new DocRowParams(doc, prefix, separator), baseSubParams);\n    try {\n      Callable<QueryResponse> subQuery = new Callable<QueryResponse>() {\n        @Override\n        public QueryResponse call() throws Exception {\n          try {\n            return new QueryResponse(\n                server.request(\n                    new QueryRequest(docWithDeprefixed), coreName)\n                , server);\n          } finally {\n          }\n        }\n      };\n      QueryResponse response = \n          SolrRequestInfoSuspender.doInSuspension(subQuery);\n\n      final SolrDocumentList docList = (SolrDocumentList) response.getResults();\n\n      doc.setField(getName(), new Result(docList));\n\n    } catch (Exception e) {\n      String docString = doc.toString();\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"while invoking \" +\n          name + \":[subquery\"+ (coreName!=null ? \"fromIndex=\"+coreName : \"\") +\"] on doc=\" +\n            docString.substring(0, Math.min(100, docString.length())), e.getCause());\n    } finally {}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["d470c8182e92b264680e34081b75e70a9f2b3c89","182384b20c064aa16998ddebe9f36e649279c5a6"],"320eec6599df6f97f2461a5d1ad49cd93b324a14":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"182384b20c064aa16998ddebe9f36e649279c5a6":["d470c8182e92b264680e34081b75e70a9f2b3c89","320eec6599df6f97f2461a5d1ad49cd93b324a14"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","561c2351baf6dd64061addef891359954c1a7faa"],"561c2351baf6dd64061addef891359954c1a7faa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["182384b20c064aa16998ddebe9f36e649279c5a6"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","561c2351baf6dd64061addef891359954c1a7faa"]},"commit2Childs":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"320eec6599df6f97f2461a5d1ad49cd93b324a14":["182384b20c064aa16998ddebe9f36e649279c5a6"],"182384b20c064aa16998ddebe9f36e649279c5a6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e66a459d38c1c4a2f97128433dab546f683a9fed","561c2351baf6dd64061addef891359954c1a7faa","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"561c2351baf6dd64061addef891359954c1a7faa":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","320eec6599df6f97f2461a5d1ad49cd93b324a14","182384b20c064aa16998ddebe9f36e649279c5a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}