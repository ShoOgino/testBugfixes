{"path":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLocalityReporter#getStatistics().mjava","commits":[{"id":"1ce8283f367b946e5dd6300887294d7d115f2b9f","date":1433955116,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLocalityReporter#getStatistics().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Provide statistics on HDFS block locality, both in terms of bytes and block counts.\n   */\n  @Override\n  public NamedList getStatistics() {\n    long totalBytes = 0;\n    long localBytes = 0;\n    int totalCount = 0;\n    int localCount = 0;\n\n    for (Iterator<HdfsDirectory> iterator = cache.keySet().iterator(); iterator.hasNext();) {\n      HdfsDirectory hdfsDirectory = iterator.next();\n\n      if (hdfsDirectory.isClosed()) {\n        iterator.remove();\n      } else {\n        try {\n          refreshDirectory(hdfsDirectory);\n          Map<FileStatus,BlockLocation[]> blockMap = cache.get(hdfsDirectory);\n\n          // For every block in every file in this directory, count it\n          for (BlockLocation[] locations : blockMap.values()) {\n            for (BlockLocation bl : locations) {\n              totalBytes += bl.getLength();\n              totalCount++;\n\n              if (Arrays.asList(bl.getHosts()).contains(hostname)) {\n                localBytes += bl.getLength();\n                localCount++;\n              }\n            }\n          }\n        } catch (IOException e) {\n          logger.warn(\"Could not retrieve locality information for {} due to exception: {}\",\n              hdfsDirectory.getHdfsDirPath(), e);\n        }\n      }\n    }\n\n    return createStatistics(totalBytes, localBytes, totalCount, localCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLocalityReporter#getStatistics().mjava","sourceNew":null,"sourceOld":"  /**\n   * Provide statistics on HDFS block locality, both in terms of bytes and block counts.\n   */\n  @Override\n  public NamedList getStatistics() {\n    long totalBytes = 0;\n    long localBytes = 0;\n    int totalCount = 0;\n    int localCount = 0;\n\n    for (Iterator<HdfsDirectory> iterator = cache.keySet().iterator(); iterator.hasNext();) {\n      HdfsDirectory hdfsDirectory = iterator.next();\n\n      if (hdfsDirectory.isClosed()) {\n        iterator.remove();\n      } else {\n        try {\n          refreshDirectory(hdfsDirectory);\n          Map<FileStatus,BlockLocation[]> blockMap = cache.get(hdfsDirectory);\n\n          // For every block in every file in this directory, count it\n          for (BlockLocation[] locations : blockMap.values()) {\n            for (BlockLocation bl : locations) {\n              totalBytes += bl.getLength();\n              totalCount++;\n\n              if (Arrays.asList(bl.getHosts()).contains(hostname)) {\n                localBytes += bl.getLength();\n                localCount++;\n              }\n            }\n          }\n        } catch (IOException e) {\n          logger.warn(\"Could not retrieve locality information for {} due to exception: {}\",\n              hdfsDirectory.getHdfsDirPath(), e);\n        }\n      }\n    }\n\n    return createStatistics(totalBytes, localBytes, totalCount, localCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsLocalityReporter#getStatistics().mjava","sourceNew":null,"sourceOld":"  /**\n   * Provide statistics on HDFS block locality, both in terms of bytes and block counts.\n   */\n  @Override\n  public NamedList getStatistics() {\n    long totalBytes = 0;\n    long localBytes = 0;\n    int totalCount = 0;\n    int localCount = 0;\n\n    for (Iterator<HdfsDirectory> iterator = cache.keySet().iterator(); iterator.hasNext();) {\n      HdfsDirectory hdfsDirectory = iterator.next();\n\n      if (hdfsDirectory.isClosed()) {\n        iterator.remove();\n      } else {\n        try {\n          refreshDirectory(hdfsDirectory);\n          Map<FileStatus,BlockLocation[]> blockMap = cache.get(hdfsDirectory);\n\n          // For every block in every file in this directory, count it\n          for (BlockLocation[] locations : blockMap.values()) {\n            for (BlockLocation bl : locations) {\n              totalBytes += bl.getLength();\n              totalCount++;\n\n              if (Arrays.asList(bl.getHosts()).contains(hostname)) {\n                localBytes += bl.getLength();\n                localCount++;\n              }\n            }\n          }\n        } catch (IOException e) {\n          logger.warn(\"Could not retrieve locality information for {} due to exception: {}\",\n              hdfsDirectory.getHdfsDirPath(), e);\n        }\n      }\n    }\n\n    return createStatistics(totalBytes, localBytes, totalCount, localCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["1ce8283f367b946e5dd6300887294d7d115f2b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ce8283f367b946e5dd6300887294d7d115f2b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"816521ebaad5add9cb96bb88c577394e2938c40b":["1ce8283f367b946e5dd6300887294d7d115f2b9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ce8283f367b946e5dd6300887294d7d115f2b9f"],"1ce8283f367b946e5dd6300887294d7d115f2b9f":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}