{"path":"lucene/src/java/org/apache/lucene/index/IntBlockPool#nextBuffer().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IntBlockPool#nextBuffer().mjava","pathOld":"src/java/org/apache/lucene/index/IntBlockPool#nextBuffer().mjava","sourceNew":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      int[][] newBuffers = new int[(int) (buffers.length*1.5)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = docWriter.getIntBlock(trackAllocations);\n    bufferUpto++;\n\n    intUpto = 0;\n    intOffset += DocumentsWriter.INT_BLOCK_SIZE;\n  }\n\n","sourceOld":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      int[][] newBuffers = new int[(int) (buffers.length*1.5)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = docWriter.getIntBlock(trackAllocations);\n    bufferUpto++;\n\n    intUpto = 0;\n    intOffset += DocumentsWriter.INT_BLOCK_SIZE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8dfd02cf03e7a1810924be21cddfdde6d265c14","date":1273590676,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IntBlockPool#nextBuffer().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IntBlockPool#nextBuffer().mjava","sourceNew":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      int[][] newBuffers = new int[(int) (buffers.length*1.5)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = docWriter.getIntBlock();\n    bufferUpto++;\n\n    intUpto = 0;\n    intOffset += DocumentsWriter.INT_BLOCK_SIZE;\n  }\n\n","sourceOld":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      int[][] newBuffers = new int[(int) (buffers.length*1.5)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = docWriter.getIntBlock(trackAllocations);\n    bufferUpto++;\n\n    intUpto = 0;\n    intOffset += DocumentsWriter.INT_BLOCK_SIZE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IntBlockPool#nextBuffer().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IntBlockPool#nextBuffer().mjava","sourceNew":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      int[][] newBuffers = new int[(int) (buffers.length*1.5)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = docWriter.ramAllocator.getIntBlock();\n    bufferUpto++;\n\n    intUpto = 0;\n    intOffset += DocumentsWriterRAMAllocator.INT_BLOCK_SIZE;\n  }\n\n","sourceOld":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      int[][] newBuffers = new int[(int) (buffers.length*1.5)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = docWriter.getIntBlock();\n    bufferUpto++;\n\n    intUpto = 0;\n    intOffset += DocumentsWriter.INT_BLOCK_SIZE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IntBlockPool#nextBuffer().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IntBlockPool#nextBuffer().mjava","sourceNew":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      int[][] newBuffers = new int[(int) (buffers.length*1.5)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = docWriter.getIntBlock();\n    bufferUpto++;\n\n    intUpto = 0;\n    intOffset += DocumentsWriterPerThread.INT_BLOCK_SIZE;\n  }\n\n","sourceOld":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      int[][] newBuffers = new int[(int) (buffers.length*1.5)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = docWriter.ramAllocator.getIntBlock();\n    bufferUpto++;\n\n    intUpto = 0;\n    intOffset += DocumentsWriterRAMAllocator.INT_BLOCK_SIZE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IntBlockPool#nextBuffer().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IntBlockPool#nextBuffer().mjava","sourceNew":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      int[][] newBuffers = new int[(int) (buffers.length*1.5)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = docWriter.getIntBlock();\n    bufferUpto++;\n\n    intUpto = 0;\n    intOffset += DocumentsWriterPerThread.INT_BLOCK_SIZE;\n  }\n\n","sourceOld":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      int[][] newBuffers = new int[(int) (buffers.length*1.5)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = docWriter.getIntBlock();\n    bufferUpto++;\n\n    intUpto = 0;\n    intOffset += DocumentsWriter.INT_BLOCK_SIZE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IntBlockPool#nextBuffer().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IntBlockPool#nextBuffer().mjava","sourceNew":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      int[][] newBuffers = new int[(int) (buffers.length*1.5)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = docWriter.getIntBlock();\n    bufferUpto++;\n\n    intUpto = 0;\n    intOffset += DocumentsWriterPerThread.INT_BLOCK_SIZE;\n  }\n\n","sourceOld":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      int[][] newBuffers = new int[(int) (buffers.length*1.5)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = docWriter.getIntBlock();\n    bufferUpto++;\n\n    intUpto = 0;\n    intOffset += DocumentsWriter.INT_BLOCK_SIZE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IntBlockPool#nextBuffer().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IntBlockPool#nextBuffer().mjava","sourceNew":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      int[][] newBuffers = new int[(int) (buffers.length*1.5)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = docWriter.getIntBlock();\n    bufferUpto++;\n\n    intUpto = 0;\n    intOffset += DocumentsWriterPerThread.INT_BLOCK_SIZE;\n  }\n\n","sourceOld":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      int[][] newBuffers = new int[(int) (buffers.length*1.5)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = docWriter.getIntBlock();\n    bufferUpto++;\n\n    intUpto = 0;\n    intOffset += DocumentsWriter.INT_BLOCK_SIZE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IntBlockPool#nextBuffer().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IntBlockPool#nextBuffer().mjava","sourceNew":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      int[][] newBuffers = new int[(int) (buffers.length*1.5)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = docWriter.getIntBlock();\n    bufferUpto++;\n\n    intUpto = 0;\n    intOffset += DocumentsWriterPerThread.INT_BLOCK_SIZE;\n  }\n\n","sourceOld":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      int[][] newBuffers = new int[(int) (buffers.length*1.5)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = docWriter.getIntBlock();\n    bufferUpto++;\n\n    intUpto = 0;\n    intOffset += DocumentsWriterPerThread.INT_BLOCK_SIZE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["f8dfd02cf03e7a1810924be21cddfdde6d265c14"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["f8dfd02cf03e7a1810924be21cddfdde6d265c14","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["f8dfd02cf03e7a1810924be21cddfdde6d265c14","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["f8dfd02cf03e7a1810924be21cddfdde6d265c14","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"f8dfd02cf03e7a1810924be21cddfdde6d265c14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["6c18273ea5b3974d2f30117f46f1ae416c28f727","f8dfd02cf03e7a1810924be21cddfdde6d265c14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"f8dfd02cf03e7a1810924be21cddfdde6d265c14":["6c18273ea5b3974d2f30117f46f1ae416c28f727","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f8dfd02cf03e7a1810924be21cddfdde6d265c14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}