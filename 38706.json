{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetsWithNestedObjects#testFacetingOnChildren().mjava","commits":[{"id":"5f7c69c29432074b666568db5e84001acd540dee","date":1520745905,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetsWithNestedObjects#testFacetingOnChildren().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Example from http://yonik.com/solr-nested-objects/\n   * Now lets say we’re displaying the top sci-fi and fantasy books,\n   * and we want to find out who reviews the most books out of our selection.\n   * Since our root implicit facet bucket (formed by the query and filters)\n   * consists of parent documents (books),\n   * we need to switch the facet domain to the children for the author facet.\n   *\n   * Note that regardless of which direction we are mapping\n   * (parents to children or children to parents),\n   * we provide a query that defines the complete set of parents in the index.\n   * In these examples, the parent filter is “type_s:book”.\n   */\n  @Test\n  public void testFacetingOnChildren() throws Exception {\n    final Client client = Client.localClient();\n    ModifiableSolrParams p = params(\"rows\",\"10\");\n    client.testJQ(params(p, \"q\", \"cat_s:(sci-fi OR fantasy)\", \"fl\", \"id\", \"fl\" , \"title_t\"\n        , \"json.facet\", \"{\" +\n            \"  top_reviewers: {\" +\n            \"    type:terms,\" +\n            \"    field:author_s,\" +\n            \"    domain: { blockChildren : \\\"type_s:book\\\" }\" +\n            \"  }\" +\n            \"}\"\n        )\n        , \"response=={numFound:2,start:0,docs:[\" +\n            \"      {id:book1,\" +\n            \"        title_t:\\\"The Way of Kings\\\"},\" +\n            \"      {id:book2,\" +\n            \"        title_t:\\\"Snow Crash\\\"}]}\"\n        , \"facets=={ count:2,\" +\n            \"top_reviewers:{buckets:[ {val:dan,     count:2},\" +\n            \"                         {val:yonik,   count:2},\" +\n            \"                         {val:mary,    count:1} ]}}\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetsWithNestedObjects#testFacetingOnChildren().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetsWithNestedObjects#testFacetingOnChildren().mjava","sourceNew":"  /**\n   * Example from http://yonik.com/solr-nested-objects/\n   * Now lets say we’re displaying the top sci-fi and fantasy books,\n   * and we want to find out who reviews the most books out of our selection.\n   * Since our root implicit facet bucket (formed by the query and filters)\n   * consists of parent documents (books),\n   * we need to switch the facet domain to the children for the author facet.\n   *\n   * Note that regardless of which direction we are mapping\n   * (parents to children or children to parents),\n   * we provide a query that defines the complete set of parents in the index.\n   * In these examples, the parent filter is “type_s:book”.\n   */\n  @Test\n  public void testFacetingOnChildren() throws Exception {\n    final Client client = Client.localClient();\n    ModifiableSolrParams p = params(\"rows\",\"10\");\n    client.testJQ(params(p, \"q\", \"cat_s:(sci-fi OR fantasy)\", \"fl\", \"id\", \"fl\" , \"title_t\"\n        , \"json.facet\", \"{\" +\n            \"  top_reviewers: {\" +\n            \"    type:terms,\" +\n            \"    field:author_s,\" +\n            \"    domain: { blockChildren : \\\"type_s:book\\\" }\" +\n            \"  }\" +\n            \"}\"\n        )\n        , \"response=={numFound:2,start:0,'numFoundExact':true,docs:[\" +\n            \"      {id:book1,\" +\n            \"        title_t:\\\"The Way of Kings\\\"},\" +\n            \"      {id:book2,\" +\n            \"        title_t:\\\"Snow Crash\\\"}]}\"\n        , \"facets=={ count:2,\" +\n            \"top_reviewers:{buckets:[ {val:dan,     count:2},\" +\n            \"                         {val:yonik,   count:2},\" +\n            \"                         {val:mary,    count:1} ]}}\"\n    );\n  }\n\n","sourceOld":"  /**\n   * Example from http://yonik.com/solr-nested-objects/\n   * Now lets say we’re displaying the top sci-fi and fantasy books,\n   * and we want to find out who reviews the most books out of our selection.\n   * Since our root implicit facet bucket (formed by the query and filters)\n   * consists of parent documents (books),\n   * we need to switch the facet domain to the children for the author facet.\n   *\n   * Note that regardless of which direction we are mapping\n   * (parents to children or children to parents),\n   * we provide a query that defines the complete set of parents in the index.\n   * In these examples, the parent filter is “type_s:book”.\n   */\n  @Test\n  public void testFacetingOnChildren() throws Exception {\n    final Client client = Client.localClient();\n    ModifiableSolrParams p = params(\"rows\",\"10\");\n    client.testJQ(params(p, \"q\", \"cat_s:(sci-fi OR fantasy)\", \"fl\", \"id\", \"fl\" , \"title_t\"\n        , \"json.facet\", \"{\" +\n            \"  top_reviewers: {\" +\n            \"    type:terms,\" +\n            \"    field:author_s,\" +\n            \"    domain: { blockChildren : \\\"type_s:book\\\" }\" +\n            \"  }\" +\n            \"}\"\n        )\n        , \"response=={numFound:2,start:0,docs:[\" +\n            \"      {id:book1,\" +\n            \"        title_t:\\\"The Way of Kings\\\"},\" +\n            \"      {id:book2,\" +\n            \"        title_t:\\\"Snow Crash\\\"}]}\"\n        , \"facets=={ count:2,\" +\n            \"top_reviewers:{buckets:[ {val:dan,     count:2},\" +\n            \"                         {val:yonik,   count:2},\" +\n            \"                         {val:mary,    count:1} ]}}\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["5f7c69c29432074b666568db5e84001acd540dee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f7c69c29432074b666568db5e84001acd540dee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["640ded7811e1b7d29236a5e2934ec3cd266a8199"]},"commit2Childs":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f7c69c29432074b666568db5e84001acd540dee"],"5f7c69c29432074b666568db5e84001acd540dee":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}