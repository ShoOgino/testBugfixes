{"path":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","sourceNew":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        doc.add(new Field(key, gram, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new Field(\"start\" + ng, gram, Field.Store.NO, Field.Index.NOT_ANALYZED);\n          startField.setOmitTermFreqAndPositions(true);\n          startField.setOmitNorms(true);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new Field(\"end\" + ng, end, Field.Store.NO, Field.Index.NOT_ANALYZED);\n        endField.setOmitTermFreqAndPositions(true);\n        endField.setOmitNorms(true);\n        doc.add(endField);\n      }\n    }\n  }\n\n","sourceOld":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        doc.add(new Field(key, gram, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new Field(\"start\" + ng, gram, Field.Store.NO, Field.Index.NOT_ANALYZED);\n          startField.setOmitTermFreqAndPositions(true);\n          startField.setOmitNorms(true);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new Field(\"end\" + ng, end, Field.Store.NO, Field.Index.NOT_ANALYZED);\n        endField.setOmitTermFreqAndPositions(true);\n        endField.setOmitNorms(true);\n        doc.add(endField);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","sourceNew":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        doc.add(new Field(key, gram, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new Field(\"start\" + ng, gram, Field.Store.NO, Field.Index.NOT_ANALYZED);\n          startField.setOmitTermFreqAndPositions(true);\n          startField.setOmitNorms(true);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new Field(\"end\" + ng, end, Field.Store.NO, Field.Index.NOT_ANALYZED);\n        endField.setOmitTermFreqAndPositions(true);\n        endField.setOmitNorms(true);\n        doc.add(endField);\n      }\n    }\n  }\n\n","sourceOld":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        doc.add(new Field(key, gram, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new Field(\"start\" + ng, gram, Field.Store.NO, Field.Index.NOT_ANALYZED);\n          startField.setOmitTermFreqAndPositions(true);\n          startField.setOmitNorms(true);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new Field(\"end\" + ng, end, Field.Store.NO, Field.Index.NOT_ANALYZED);\n        endField.setOmitTermFreqAndPositions(true);\n        endField.setOmitNorms(true);\n        doc.add(endField);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","sourceNew":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        doc.add(new Field(key, gram, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new Field(\"start\" + ng, gram, Field.Store.NO, Field.Index.NOT_ANALYZED);\n          startField.setOmitTermFreqAndPositions(true);\n          startField.setOmitNorms(true);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new Field(\"end\" + ng, end, Field.Store.NO, Field.Index.NOT_ANALYZED);\n        endField.setOmitTermFreqAndPositions(true);\n        endField.setOmitNorms(true);\n        doc.add(endField);\n      }\n    }\n  }\n\n","sourceOld":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        doc.add(new Field(key, gram, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new Field(\"start\" + ng, gram, Field.Store.NO, Field.Index.NOT_ANALYZED);\n          startField.setOmitTermFreqAndPositions(true);\n          startField.setOmitNorms(true);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new Field(\"end\" + ng, end, Field.Store.NO, Field.Index.NOT_ANALYZED);\n        endField.setOmitTermFreqAndPositions(true);\n        endField.setOmitNorms(true);\n        doc.add(endField);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","sourceNew":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        doc.add(new Field(key, gram, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new Field(\"start\" + ng, gram, Field.Store.NO, Field.Index.NOT_ANALYZED);\n          startField.setIndexOptions(IndexOptions.DOCS_ONLY);\n          startField.setOmitNorms(true);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new Field(\"end\" + ng, end, Field.Store.NO, Field.Index.NOT_ANALYZED);\n        endField.setIndexOptions(IndexOptions.DOCS_ONLY);\n        endField.setOmitNorms(true);\n        doc.add(endField);\n      }\n    }\n  }\n\n","sourceOld":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        doc.add(new Field(key, gram, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new Field(\"start\" + ng, gram, Field.Store.NO, Field.Index.NOT_ANALYZED);\n          startField.setOmitTermFreqAndPositions(true);\n          startField.setOmitNorms(true);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new Field(\"end\" + ng, end, Field.Store.NO, Field.Index.NOT_ANALYZED);\n        endField.setOmitTermFreqAndPositions(true);\n        endField.setOmitNorms(true);\n        doc.add(endField);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0922bf0020671b3d63265a67c9ea8de9c0a4b4e6","date":1310556151,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","sourceNew":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        Field ngramField = new Field(key, gram, Field.Store.NO, Field.Index.NOT_ANALYZED);\n        // spellchecker does not use positional queries, but we want freqs\n        // for scoring these multivalued n-gram fields.\n        ngramField.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n        doc.add(ngramField);\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new Field(\"start\" + ng, gram, Field.Store.NO, Field.Index.NOT_ANALYZED);\n          startField.setIndexOptions(IndexOptions.DOCS_ONLY);\n          startField.setOmitNorms(true);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new Field(\"end\" + ng, end, Field.Store.NO, Field.Index.NOT_ANALYZED);\n        endField.setIndexOptions(IndexOptions.DOCS_ONLY);\n        endField.setOmitNorms(true);\n        doc.add(endField);\n      }\n    }\n  }\n\n","sourceOld":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        doc.add(new Field(key, gram, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new Field(\"start\" + ng, gram, Field.Store.NO, Field.Index.NOT_ANALYZED);\n          startField.setIndexOptions(IndexOptions.DOCS_ONLY);\n          startField.setOmitNorms(true);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new Field(\"end\" + ng, end, Field.Store.NO, Field.Index.NOT_ANALYZED);\n        endField.setIndexOptions(IndexOptions.DOCS_ONLY);\n        endField.setOmitNorms(true);\n        doc.add(endField);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","sourceNew":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        FieldType ft = new FieldType(StringField.TYPE_UNSTORED);\n        ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n        Field ngramField = new Field(key, ft, gram);\n        // spellchecker does not use positional queries, but we want freqs\n        // for scoring these multivalued n-gram fields.\n        doc.add(ngramField);\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new StringField(\"start\" + ng, gram);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new StringField(\"end\" + ng, end);\n        doc.add(endField);\n      }\n    }\n  }\n\n","sourceOld":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        Field ngramField = new Field(key, gram, Field.Store.NO, Field.Index.NOT_ANALYZED);\n        // spellchecker does not use positional queries, but we want freqs\n        // for scoring these multivalued n-gram fields.\n        ngramField.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n        doc.add(ngramField);\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new Field(\"start\" + ng, gram, Field.Store.NO, Field.Index.NOT_ANALYZED);\n          startField.setIndexOptions(IndexOptions.DOCS_ONLY);\n          startField.setOmitNorms(true);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new Field(\"end\" + ng, end, Field.Store.NO, Field.Index.NOT_ANALYZED);\n        endField.setIndexOptions(IndexOptions.DOCS_ONLY);\n        endField.setOmitNorms(true);\n        doc.add(endField);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","sourceNew":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        FieldType ft = new FieldType(StringField.TYPE_UNSTORED);\n        ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n        Field ngramField = new Field(key, gram, ft);\n        // spellchecker does not use positional queries, but we want freqs\n        // for scoring these multivalued n-gram fields.\n        doc.add(ngramField);\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new StringField(\"start\" + ng, gram);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new StringField(\"end\" + ng, end);\n        doc.add(endField);\n      }\n    }\n  }\n\n","sourceOld":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        FieldType ft = new FieldType(StringField.TYPE_UNSTORED);\n        ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n        Field ngramField = new Field(key, ft, gram);\n        // spellchecker does not use positional queries, but we want freqs\n        // for scoring these multivalued n-gram fields.\n        doc.add(ngramField);\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new StringField(\"start\" + ng, gram);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new StringField(\"end\" + ng, end);\n        doc.add(endField);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#addGram(String,Document,int,int).mjava","sourceNew":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        FieldType ft = new FieldType(StringField.TYPE_UNSTORED);\n        ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n        Field ngramField = new Field(key, gram, ft);\n        // spellchecker does not use positional queries, but we want freqs\n        // for scoring these multivalued n-gram fields.\n        doc.add(ngramField);\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new StringField(\"start\" + ng, gram);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new StringField(\"end\" + ng, end);\n        doc.add(endField);\n      }\n    }\n  }\n\n","sourceOld":"  private static void addGram(String text, Document doc, int ng1, int ng2) {\n    int len = text.length();\n    for (int ng = ng1; ng <= ng2; ng++) {\n      String key = \"gram\" + ng;\n      String end = null;\n      for (int i = 0; i < len - ng + 1; i++) {\n        String gram = text.substring(i, i + ng);\n        FieldType ft = new FieldType(StringField.TYPE_UNSTORED);\n        ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n        Field ngramField = new Field(key, gram, ft);\n        // spellchecker does not use positional queries, but we want freqs\n        // for scoring these multivalued n-gram fields.\n        doc.add(ngramField);\n        if (i == 0) {\n          // only one term possible in the startXXField, TF/pos and norms aren't needed.\n          Field startField = new StringField(\"start\" + ng, gram);\n          doc.add(startField);\n        }\n        end = gram;\n      }\n      if (end != null) { // may not be present if len==ng1\n        // only one term possible in the endXXField, TF/pos and norms aren't needed.\n        Field endField = new StringField(\"end\" + ng, end);\n        doc.add(endField);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0922bf0020671b3d63265a67c9ea8de9c0a4b4e6":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["e230a61047bc041516c811baa08a7174d6f8322a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["0922bf0020671b3d63265a67c9ea8de9c0a4b4e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"0922bf0020671b3d63265a67c9ea8de9c0a4b4e6":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["0922bf0020671b3d63265a67c9ea8de9c0a4b4e6"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e230a61047bc041516c811baa08a7174d6f8322a":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}