{"path":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchBadQueries().mjava","commits":[{"id":"bf383b090f66094eb20e23f13a7b9cf251b6b225","date":1572630056,"type":0,"author":"Chris Hennick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchBadQueries().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMinShouldMatchBadQueries() {\n    expectThrows(SolrException.class, () -> calcMSM(1, \"1<\"));\n    expectThrows(SolrException.class, () -> calcMSM(1, \"1<x\"));\n    expectThrows(SolrException.class, () -> calcMSM(1, \"x%\"));\n    expectThrows(SolrException.class, () -> calcMSM(1, \"%%\"));\n    expectThrows(SolrException.class, () -> calcMSM(1, \"x\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["81c5ffe8a0562120e63faeb61dfb430c02506d89"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"81c5ffe8a0562120e63faeb61dfb430c02506d89","date":1572648818,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchBadQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/SolrPluginUtilsTest#testMinShouldMatchBadQueries().mjava","sourceNew":"  @Test\n  public void testMinShouldMatchBadQueries() {\n    Exception e = expectThrows(SolrException.class, () -> calcMSM(2, \"1<\"));\n    assertEquals(\"Invalid 'mm' spec: '1<'. Expecting values before and after '<'\" , e.getMessage());\n    e = expectThrows(SolrException.class, () -> calcMSM(2, \"1<x\"));\n    assertEquals(\"Invalid 'mm' spec. Expecting an integer.\", e.getMessage());\n    e = expectThrows(SolrException.class, () -> calcMSM(1, \"x%\"));\n    assertEquals(\"Invalid 'mm' spec. Expecting an integer.\", e.getMessage());\n    e = expectThrows(SolrException.class, () -> calcMSM(1, \"%%\"));\n    assertEquals(\"Invalid 'mm' spec. Expecting an integer.\", e.getMessage());\n    e = expectThrows(SolrException.class, () -> calcMSM(1, \"x\"));\n    assertEquals(\"Invalid 'mm' spec. Expecting an integer.\", e.getMessage());\n    \n    e = expectThrows(SolrException.class, () -> calcMSM(10, \"2<-25% 9<X\"));\n    assertEquals(\"Invalid 'mm' spec. Expecting an integer.\" , e.getMessage());\n    e = expectThrows(SolrException.class, () -> calcMSM(10, \"2<-25% 9<\"));\n    assertEquals(\"Invalid 'mm' spec: '9<'. Expecting values before and after '<'\" , e.getMessage());\n  }\n\n","sourceOld":"  @Test\n  public void testMinShouldMatchBadQueries() {\n    expectThrows(SolrException.class, () -> calcMSM(1, \"1<\"));\n    expectThrows(SolrException.class, () -> calcMSM(1, \"1<x\"));\n    expectThrows(SolrException.class, () -> calcMSM(1, \"x%\"));\n    expectThrows(SolrException.class, () -> calcMSM(1, \"%%\"));\n    expectThrows(SolrException.class, () -> calcMSM(1, \"x\"));\n  }\n\n","bugFix":["bf383b090f66094eb20e23f13a7b9cf251b6b225"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81c5ffe8a0562120e63faeb61dfb430c02506d89":["bf383b090f66094eb20e23f13a7b9cf251b6b225"],"bf383b090f66094eb20e23f13a7b9cf251b6b225":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81c5ffe8a0562120e63faeb61dfb430c02506d89"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bf383b090f66094eb20e23f13a7b9cf251b6b225"],"81c5ffe8a0562120e63faeb61dfb430c02506d89":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bf383b090f66094eb20e23f13a7b9cf251b6b225":["81c5ffe8a0562120e63faeb61dfb430c02506d89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}