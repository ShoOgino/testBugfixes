{"path":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#PointInSetIncludingScoreQuery(ScoreMode,Query,boolean,String,int,Stream).mjava","commits":[{"id":"00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7","date":1495529154,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#PointInSetIncludingScoreQuery(ScoreMode,Query,boolean,String,int,Stream).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#PointInSetIncludingScoreQuery(Query,boolean,String,int,Stream).mjava","sourceNew":"  PointInSetIncludingScoreQuery(ScoreMode scoreMode, Query originalQuery, boolean multipleValuesPerDocument,\n                                String field, int bytesPerDim, Stream packedPoints) {\n    this.scoreMode = scoreMode;\n    this.originalQuery = originalQuery;\n    this.multipleValuesPerDocument = multipleValuesPerDocument;\n    this.field = field;\n    if (bytesPerDim < 1 || bytesPerDim > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"bytesPerDim must be > 0 and <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + bytesPerDim);\n    }\n    this.bytesPerDim = bytesPerDim;\n\n    aggregatedJoinScores = new ArrayList<>();\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    BytesRef current;\n    while ((current = packedPoints.next()) != null) {\n      if (current.length != bytesPerDim) {\n        throw new IllegalArgumentException(\"packed point length should be \" + (bytesPerDim) + \" but got \" + current.length + \"; field=\\\"\" + field + \"\\\"bytesPerDim=\" + bytesPerDim);\n      }\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else {\n        int cmp = previous.get().compareTo(current);\n        if (cmp == 0) {\n          throw new IllegalArgumentException(\"unexpected duplicated value: \" + current);\n        } else if (cmp >= 0) {\n          throw new IllegalArgumentException(\"values are out of order: saw \" + previous + \" before \" + current);\n        }\n      }\n      builder.add(field, current);\n      aggregatedJoinScores.add(packedPoints.score);\n      previous.copyBytes(current);\n    }\n    sortedPackedPoints = builder.finish();\n    sortedPackedPointsHashCode = sortedPackedPoints.hashCode();\n  }\n\n","sourceOld":"  PointInSetIncludingScoreQuery(Query originalQuery, boolean multipleValuesPerDocument, String field, int bytesPerDim,\n                                Stream packedPoints) {\n    this.originalQuery = originalQuery;\n    this.multipleValuesPerDocument = multipleValuesPerDocument;\n    this.field = field;\n    if (bytesPerDim < 1 || bytesPerDim > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"bytesPerDim must be > 0 and <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + bytesPerDim);\n    }\n    this.bytesPerDim = bytesPerDim;\n\n    aggregatedJoinScores = new ArrayList<>();\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    BytesRef current;\n    while ((current = packedPoints.next()) != null) {\n      if (current.length != bytesPerDim) {\n        throw new IllegalArgumentException(\"packed point length should be \" + (bytesPerDim) + \" but got \" + current.length + \"; field=\\\"\" + field + \"\\\"bytesPerDim=\" + bytesPerDim);\n      }\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else {\n        int cmp = previous.get().compareTo(current);\n        if (cmp == 0) {\n          throw new IllegalArgumentException(\"unexpected duplicated value: \" + current);\n        } else if (cmp >= 0) {\n          throw new IllegalArgumentException(\"values are out of order: saw \" + previous + \" before \" + current);\n        }\n      }\n      builder.add(field, current);\n      aggregatedJoinScores.add(packedPoints.score);\n      previous.copyBytes(current);\n    }\n    sortedPackedPoints = builder.finish();\n    sortedPackedPointsHashCode = sortedPackedPoints.hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#PointInSetIncludingScoreQuery(ScoreMode,Query,boolean,String,int,Stream).mjava","pathOld":"/dev/null","sourceNew":"  PointInSetIncludingScoreQuery(ScoreMode scoreMode, Query originalQuery, boolean multipleValuesPerDocument,\n                                String field, int bytesPerDim, Stream packedPoints) {\n    this.scoreMode = scoreMode;\n    this.originalQuery = originalQuery;\n    this.multipleValuesPerDocument = multipleValuesPerDocument;\n    this.field = field;\n    if (bytesPerDim < 1 || bytesPerDim > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"bytesPerDim must be > 0 and <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + bytesPerDim);\n    }\n    this.bytesPerDim = bytesPerDim;\n\n    aggregatedJoinScores = new ArrayList<>();\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    BytesRef current;\n    while ((current = packedPoints.next()) != null) {\n      if (current.length != bytesPerDim) {\n        throw new IllegalArgumentException(\"packed point length should be \" + (bytesPerDim) + \" but got \" + current.length + \"; field=\\\"\" + field + \"\\\"bytesPerDim=\" + bytesPerDim);\n      }\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else {\n        int cmp = previous.get().compareTo(current);\n        if (cmp == 0) {\n          throw new IllegalArgumentException(\"unexpected duplicated value: \" + current);\n        } else if (cmp >= 0) {\n          throw new IllegalArgumentException(\"values are out of order: saw \" + previous + \" before \" + current);\n        }\n      }\n      builder.add(field, current);\n      aggregatedJoinScores.add(packedPoints.score);\n      previous.copyBytes(current);\n    }\n    sortedPackedPoints = builder.finish();\n    sortedPackedPointsHashCode = sortedPackedPoints.hashCode();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe90d104db258964b96e50418b9caa0c156eafda","date":1561555614,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#PointInSetIncludingScoreQuery(ScoreMode,Query,boolean,String,int,Stream).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery#PointInSetIncludingScoreQuery(ScoreMode,Query,boolean,String,int,Stream).mjava","sourceNew":"  PointInSetIncludingScoreQuery(ScoreMode scoreMode, Query originalQuery, boolean multipleValuesPerDocument,\n                                String field, int bytesPerDim, Stream packedPoints) {\n    this.scoreMode = scoreMode;\n    this.originalQuery = originalQuery;\n    this.multipleValuesPerDocument = multipleValuesPerDocument;\n    this.field = field;\n    if (bytesPerDim < 1 || bytesPerDim > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"bytesPerDim must be > 0 and <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + bytesPerDim);\n    }\n    this.bytesPerDim = bytesPerDim;\n\n    aggregatedJoinScores = new ArrayList<>();\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    BytesRef current;\n    while ((current = packedPoints.next()) != null) {\n      if (current.length != bytesPerDim) {\n        throw new IllegalArgumentException(\"packed point length should be \" + (bytesPerDim) + \" but got \" + current.length + \"; field=\\\"\" + field + \"\\\"bytesPerDim=\" + bytesPerDim);\n      }\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else {\n        int cmp = previous.get().compareTo(current);\n        if (cmp == 0) {\n          throw new IllegalArgumentException(\"unexpected duplicated value: \" + current);\n        } else if (cmp >= 0) {\n          throw new IllegalArgumentException(\"values are out of order: saw \" + previous + \" before \" + current);\n        }\n      }\n      builder.add(field, current);\n      aggregatedJoinScores.add(packedPoints.score);\n      previous.copyBytes(current);\n    }\n    sortedPackedPoints = builder.finish();\n    sortedPackedPointsHashCode = sortedPackedPoints.hashCode();\n\n    this.ramBytesUsed = BASE_RAM_BYTES +\n        RamUsageEstimator.sizeOfObject(this.field) +\n        RamUsageEstimator.sizeOfObject(this.originalQuery, RamUsageEstimator.QUERY_DEFAULT_RAM_BYTES_USED) +\n        RamUsageEstimator.sizeOfObject(this.sortedPackedPoints);\n  }\n\n","sourceOld":"  PointInSetIncludingScoreQuery(ScoreMode scoreMode, Query originalQuery, boolean multipleValuesPerDocument,\n                                String field, int bytesPerDim, Stream packedPoints) {\n    this.scoreMode = scoreMode;\n    this.originalQuery = originalQuery;\n    this.multipleValuesPerDocument = multipleValuesPerDocument;\n    this.field = field;\n    if (bytesPerDim < 1 || bytesPerDim > PointValues.MAX_NUM_BYTES) {\n      throw new IllegalArgumentException(\"bytesPerDim must be > 0 and <= \" + PointValues.MAX_NUM_BYTES + \"; got \" + bytesPerDim);\n    }\n    this.bytesPerDim = bytesPerDim;\n\n    aggregatedJoinScores = new ArrayList<>();\n    PrefixCodedTerms.Builder builder = new PrefixCodedTerms.Builder();\n    BytesRefBuilder previous = null;\n    BytesRef current;\n    while ((current = packedPoints.next()) != null) {\n      if (current.length != bytesPerDim) {\n        throw new IllegalArgumentException(\"packed point length should be \" + (bytesPerDim) + \" but got \" + current.length + \"; field=\\\"\" + field + \"\\\"bytesPerDim=\" + bytesPerDim);\n      }\n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else {\n        int cmp = previous.get().compareTo(current);\n        if (cmp == 0) {\n          throw new IllegalArgumentException(\"unexpected duplicated value: \" + current);\n        } else if (cmp >= 0) {\n          throw new IllegalArgumentException(\"values are out of order: saw \" + previous + \" before \" + current);\n        }\n      }\n      builder.add(field, current);\n      aggregatedJoinScores.add(packedPoints.score);\n      previous.copyBytes(current);\n    }\n    sortedPackedPoints = builder.finish();\n    sortedPackedPointsHashCode = sortedPackedPoints.hashCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7"],"00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe90d104db258964b96e50418b9caa0c156eafda":["00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe90d104db258964b96e50418b9caa0c156eafda"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7":["e9017cf144952056066919f1ebc7897ff9bd71b1","fe90d104db258964b96e50418b9caa0c156eafda"],"fe90d104db258964b96e50418b9caa0c156eafda":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}