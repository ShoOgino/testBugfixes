{"path":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/GenerateSolrSequenceKeyBuilder.GenerateSolrSequenceKey#GenerateSolrSequenceKey(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","commits":[{"id":"b291fa953aeb2a135ed14740cb774eb76bfc64b0","date":1386184301,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/GenerateSolrSequenceKeyBuilder.GenerateSolrSequenceKey#GenerateSolrSequenceKey(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/GenerateSolrSequenceKeyBuilder.GenerateSolrSequenceKey#GenerateSolrSequenceKey(Config,Command,Command,MorphlineContext).mjava","sourceNew":"    public GenerateSolrSequenceKey(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      this.baseIdFieldName = getConfigs().getString(config, \"baseIdField\", Fields.BASE_ID);\n      this.preserveExisting = getConfigs().getBoolean(config, \"preserveExisting\", true);      \n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      uniqueKeyName = uniqueKey == null ? null : uniqueKey.getName();\n      \n      String tmpIdPrefix = getConfigs().getString(config, \"idPrefix\", null);  // for load testing only\n      Random tmpRandomIdPrefx = null;\n      if (\"random\".equals(tmpIdPrefix)) { // for load testing only\n        tmpRandomIdPrefx = new Random(new SecureRandom().nextLong());    \n        tmpIdPrefix = null;\n      }\n      idPrefix = tmpIdPrefix;\n      randomIdPrefix = tmpRandomIdPrefx;\n      validateArguments();\n    }\n\n","sourceOld":"    public GenerateSolrSequenceKey(Config config, Command parent, Command child, MorphlineContext context) {\n      super(config, parent, child, context);\n      this.baseIdFieldName = getConfigs().getString(config, \"baseIdField\", Fields.BASE_ID);\n      this.preserveExisting = getConfigs().getBoolean(config, \"preserveExisting\", true);      \n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      uniqueKeyName = uniqueKey == null ? null : uniqueKey.getName();\n      \n      String tmpIdPrefix = getConfigs().getString(config, \"idPrefix\", null);  // for load testing only\n      Random tmpRandomIdPrefx = null;\n      if (\"random\".equals(tmpIdPrefix)) { // for load testing only\n        tmpRandomIdPrefx = new Random(new SecureRandom().nextLong());    \n        tmpIdPrefix = null;\n      }\n      idPrefix = tmpIdPrefix;\n      randomIdPrefix = tmpRandomIdPrefx;\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/GenerateSolrSequenceKeyBuilder.GenerateSolrSequenceKey#GenerateSolrSequenceKey(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","pathOld":"/dev/null","sourceNew":"    public GenerateSolrSequenceKey(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      this.baseIdFieldName = getConfigs().getString(config, \"baseIdField\", Fields.BASE_ID);\n      this.preserveExisting = getConfigs().getBoolean(config, \"preserveExisting\", true);      \n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      uniqueKeyName = uniqueKey == null ? null : uniqueKey.getName();\n      \n      String tmpIdPrefix = getConfigs().getString(config, \"idPrefix\", null);  // for load testing only\n      Random tmpRandomIdPrefx = null;\n      if (\"random\".equals(tmpIdPrefix)) { // for load testing only\n        tmpRandomIdPrefx = new Random(new SecureRandom().nextLong());    \n        tmpIdPrefix = null;\n      }\n      idPrefix = tmpIdPrefix;\n      randomIdPrefix = tmpRandomIdPrefx;\n      validateArguments();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/GenerateSolrSequenceKeyBuilder.GenerateSolrSequenceKey#GenerateSolrSequenceKey(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","sourceNew":null,"sourceOld":"    public GenerateSolrSequenceKey(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      this.baseIdFieldName = getConfigs().getString(config, \"baseIdField\", Fields.BASE_ID);\n      this.preserveExisting = getConfigs().getBoolean(config, \"preserveExisting\", true);      \n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      uniqueKeyName = uniqueKey == null ? null : uniqueKey.getName();\n      \n      String tmpIdPrefix = getConfigs().getString(config, \"idPrefix\", null);  // for load testing only\n      Random tmpRandomIdPrefx = null;\n      if (\"random\".equals(tmpIdPrefix)) { // for load testing only\n        tmpRandomIdPrefx = new Random(new SecureRandom().nextLong());    \n        tmpIdPrefix = null;\n      }\n      idPrefix = tmpIdPrefix;\n      randomIdPrefix = tmpRandomIdPrefx;\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/GenerateSolrSequenceKeyBuilder.GenerateSolrSequenceKey#GenerateSolrSequenceKey(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","sourceNew":null,"sourceOld":"    public GenerateSolrSequenceKey(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      this.baseIdFieldName = getConfigs().getString(config, \"baseIdField\", Fields.BASE_ID);\n      this.preserveExisting = getConfigs().getBoolean(config, \"preserveExisting\", true);      \n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      SchemaField uniqueKey = schema.getUniqueKeyField();\n      uniqueKeyName = uniqueKey == null ? null : uniqueKey.getName();\n      \n      String tmpIdPrefix = getConfigs().getString(config, \"idPrefix\", null);  // for load testing only\n      Random tmpRandomIdPrefx = null;\n      if (\"random\".equals(tmpIdPrefix)) { // for load testing only\n        tmpRandomIdPrefx = new Random(new SecureRandom().nextLong());    \n        tmpIdPrefix = null;\n      }\n      idPrefix = tmpIdPrefix;\n      randomIdPrefix = tmpRandomIdPrefx;\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b291fa953aeb2a135ed14740cb774eb76bfc64b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["b291fa953aeb2a135ed14740cb774eb76bfc64b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b291fa953aeb2a135ed14740cb774eb76bfc64b0"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["b291fa953aeb2a135ed14740cb774eb76bfc64b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"b291fa953aeb2a135ed14740cb774eb76bfc64b0":["12109b652e9210b8d58fca47f6c4a725d058a58e","74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b291fa953aeb2a135ed14740cb774eb76bfc64b0","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}