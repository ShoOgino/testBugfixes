{"path":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#sloppyDocScorer(Stats,String,AtomicReaderContext).mjava","commits":[{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#sloppyDocScorer(Stats,String,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SloppyDocScorer sloppyDocScorer(Stats stats, String fieldName, AtomicReaderContext context) throws IOException {\n      final SloppyDocScorer sub = sim.sloppyDocScorer(stats, fieldName, context);\n      final Source values = context.reader.docValues(boostField).getSource();\n      \n      return new SloppyDocScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return (float) values.getFloat(doc) * sub.score(doc, freq);\n        }\n        \n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation((float) values.getFloat(doc), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#sloppyDocScorer(Stats,String,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SloppyDocScorer sloppyDocScorer(Stats stats, String fieldName, AtomicReaderContext context) throws IOException {\n      final SloppyDocScorer sub = sim.sloppyDocScorer(stats, fieldName, context);\n      final Source values = context.reader.docValues(boostField).getSource();\n      \n      return new SloppyDocScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return (float) values.getFloat(doc) * sub.score(doc, freq);\n        }\n        \n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation((float) values.getFloat(doc), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#sloppyDocScorer(Stats,String,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SloppyDocScorer sloppyDocScorer(Stats stats, String fieldName, AtomicReaderContext context) throws IOException {\n      final SloppyDocScorer sub = sim.sloppyDocScorer(stats, fieldName, context);\n      final Source values = context.reader.docValues(boostField).getSource();\n      \n      return new SloppyDocScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return (float) values.getFloat(doc) * sub.score(doc, freq);\n        }\n        \n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation((float) values.getFloat(doc), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0952c55e47c70ea2d8c8e2b634da066f9bde4e38","date":1310506639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#sloppyDocScorer(Stats,String,AtomicReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#sloppyDocScorer(Stats,String,AtomicReaderContext).mjava","sourceNew":"    @Override\n    public SloppyDocScorer sloppyDocScorer(Stats stats, String fieldName, AtomicReaderContext context) throws IOException {\n      final SloppyDocScorer sub = sim.sloppyDocScorer(stats, fieldName, context);\n      final Source values = context.reader.docValues(boostField).getSource();\n      \n      return new SloppyDocScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return (float) values.getFloat(doc) * sub.score(doc, freq);\n        }\n        \n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end, BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation((float) values.getFloat(doc), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public SloppyDocScorer sloppyDocScorer(Stats stats, String fieldName, AtomicReaderContext context) throws IOException {\n      final SloppyDocScorer sub = sim.sloppyDocScorer(stats, fieldName, context);\n      final Source values = context.reader.docValues(boostField).getSource();\n      \n      return new SloppyDocScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return (float) values.getFloat(doc) * sub.score(doc, freq);\n        }\n        \n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation((float) values.getFloat(doc), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#sloppyDocScorer(Stats,String,AtomicReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#sloppyDocScorer(Stats,String,AtomicReaderContext).mjava","sourceNew":"    @Override\n    public SloppyDocScorer sloppyDocScorer(Stats stats, String fieldName, AtomicReaderContext context) throws IOException {\n      final SloppyDocScorer sub = sim.sloppyDocScorer(stats, fieldName, context);\n      final Source values = context.reader().docValues(boostField).getSource();\n      \n      return new SloppyDocScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return (float) values.getFloat(doc) * sub.score(doc, freq);\n        }\n        \n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end, BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation((float) values.getFloat(doc), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public SloppyDocScorer sloppyDocScorer(Stats stats, String fieldName, AtomicReaderContext context) throws IOException {\n      final SloppyDocScorer sub = sim.sloppyDocScorer(stats, fieldName, context);\n      final Source values = context.reader.docValues(boostField).getSource();\n      \n      return new SloppyDocScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return (float) values.getFloat(doc) * sub.score(doc, freq);\n        }\n        \n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end, BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation((float) values.getFloat(doc), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#sloppyDocScorer(Stats,String,AtomicReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#sloppyDocScorer(Stats,String,AtomicReaderContext).mjava","sourceNew":"    @Override\n    public SloppyDocScorer sloppyDocScorer(Stats stats, String fieldName, AtomicReaderContext context) throws IOException {\n      final SloppyDocScorer sub = sim.sloppyDocScorer(stats, fieldName, context);\n      final Source values = context.reader().docValues(boostField).getSource();\n      \n      return new SloppyDocScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return (float) values.getFloat(doc) * sub.score(doc, freq);\n        }\n        \n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end, BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation((float) values.getFloat(doc), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public SloppyDocScorer sloppyDocScorer(Stats stats, String fieldName, AtomicReaderContext context) throws IOException {\n      final SloppyDocScorer sub = sim.sloppyDocScorer(stats, fieldName, context);\n      final Source values = context.reader.docValues(boostField).getSource();\n      \n      return new SloppyDocScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return (float) values.getFloat(doc) * sub.score(doc, freq);\n        }\n        \n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end, BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation((float) values.getFloat(doc), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"660345363f16c7d4c38aa11a35bf59aa99466cf1","date":1328227279,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#sloppySimScorer(SimWeight,AtomicReaderContext).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring.BoostingSimilarity#sloppyDocScorer(Stats,String,AtomicReaderContext).mjava","sourceNew":"    @Override\n    public SloppySimScorer sloppySimScorer(SimWeight stats, AtomicReaderContext context) throws IOException {\n      final SloppySimScorer sub = sim.sloppySimScorer(stats, context);\n      final Source values = context.reader().docValues(boostField).getSource();\n      \n      return new SloppySimScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return (float) values.getFloat(doc) * sub.score(doc, freq);\n        }\n        \n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end, BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation((float) values.getFloat(doc), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public SloppyDocScorer sloppyDocScorer(Stats stats, String fieldName, AtomicReaderContext context) throws IOException {\n      final SloppyDocScorer sub = sim.sloppyDocScorer(stats, fieldName, context);\n      final Source values = context.reader().docValues(boostField).getSource();\n      \n      return new SloppyDocScorer() {\n        @Override\n        public float score(int doc, float freq) {\n          return (float) values.getFloat(doc) * sub.score(doc, freq);\n        }\n        \n        @Override\n        public float computeSlopFactor(int distance) {\n          return sub.computeSlopFactor(distance);\n        }\n\n        @Override\n        public float computePayloadFactor(int doc, int start, int end, BytesRef payload) {\n          return sub.computePayloadFactor(doc, start, end, payload);\n        }\n\n        @Override\n        public Explanation explain(int doc, Explanation freq) {\n          Explanation boostExplanation = new Explanation((float) values.getFloat(doc), \"indexDocValue(\" + boostField + \")\");\n          Explanation simExplanation = sub.explain(doc, freq);\n          Explanation expl = new Explanation(boostExplanation.getValue() * simExplanation.getValue(), \"product of:\");\n          expl.addDetail(boostExplanation);\n          expl.addDetail(simExplanation);\n          return expl;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f3cee3d20b0c786e6fca20539454262e29edcab"],"660345363f16c7d4c38aa11a35bf59aa99466cf1":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f3cee3d20b0c786e6fca20539454262e29edcab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["0952c55e47c70ea2d8c8e2b634da066f9bde4e38"],"0952c55e47c70ea2d8c8e2b634da066f9bde4e38":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["0952c55e47c70ea2d8c8e2b634da066f9bde4e38","6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["660345363f16c7d4c38aa11a35bf59aa99466cf1"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":[],"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","0952c55e47c70ea2d8c8e2b634da066f9bde4e38"],"660345363f16c7d4c38aa11a35bf59aa99466cf1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1291e4568eb7d9463d751627596ef14baf4c1603","0f3cee3d20b0c786e6fca20539454262e29edcab","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"0952c55e47c70ea2d8c8e2b634da066f9bde4e38":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}