{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder.State#newState(int).mjava","commits":[{"id":"8d94feb02e9c604630d8a6758abcb40cbfa91f5d","date":1340964157,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder.State#newState(int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder.State#newState(int).mjava","sourceNew":"    /**\n     * Create a new outgoing transition labeled <code>label</code> and return\n     * the newly created target state for this transition.\n     */\n    State newState(int label) {\n      assert Arrays.binarySearch(labels, label) < 0 : \"State already has transition labeled: \"\n          + label;\n      \n      labels = Arrays.copyOf(labels, labels.length + 1);\n      states = Arrays.copyOf(states, states.length + 1);\n\n      labels[labels.length - 1] = label;\n      return states[states.length - 1] = new State();\n    }\n\n","sourceOld":"    /**\n     * Create a new outgoing transition labeled <code>label</code> and return\n     * the newly created target state for this transition.\n     */\n    State newState(int label) {\n      assert Arrays.binarySearch(labels, label) < 0 : \"State already has transition labeled: \"\n          + label;\n      \n      labels = copyOf(labels, labels.length + 1);\n      states = copyOf(states, states.length + 1);\n      \n      labels[labels.length - 1] = label;\n      return states[states.length - 1] = new State();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder.State#newState(int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Create a new outgoing transition labeled <code>label</code> and return\n     * the newly created target state for this transition.\n     */\n    State newState(int label) {\n      assert Arrays.binarySearch(labels, label) < 0 : \"State already has transition labeled: \"\n          + label;\n      \n      labels = Arrays.copyOf(labels, labels.length + 1);\n      states = Arrays.copyOf(states, states.length + 1);\n\n      labels[labels.length - 1] = label;\n      return states[states.length - 1] = new State();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder.State#newState(int).mjava","sourceNew":null,"sourceOld":"    /**\n     * Create a new outgoing transition labeled <code>label</code> and return\n     * the newly created target state for this transition.\n     */\n    State newState(int label) {\n      assert Arrays.binarySearch(labels, label) < 0 : \"State already has transition labeled: \"\n          + label;\n      \n      labels = Arrays.copyOf(labels, labels.length + 1);\n      states = Arrays.copyOf(states, states.length + 1);\n\n      labels[labels.length - 1] = label;\n      return states[states.length - 1] = new State();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder.State#newState(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilderLight.State#newState(int).mjava","sourceNew":"    /**\n     * Create a new outgoing transition labeled <code>label</code> and return\n     * the newly created target state for this transition.\n     */\n    State newState(int label) {\n      assert Arrays.binarySearch(labels, label) < 0 : \"State already has transition labeled: \"\n          + label;\n      \n      labels = Arrays.copyOf(labels, labels.length + 1);\n      states = Arrays.copyOf(states, states.length + 1);\n\n      labels[labels.length - 1] = label;\n      return states[states.length - 1] = new State();\n    }\n\n","sourceOld":"    /**\n     * Create a new outgoing transition labeled <code>label</code> and return\n     * the newly created target state for this transition.\n     */\n    State newState(int label) {\n      assert Arrays.binarySearch(labels, label) < 0 : \"State already has transition labeled: \"\n          + label;\n      \n      labels = Arrays.copyOf(labels, labels.length + 1);\n      states = Arrays.copyOf(states, states.length + 1);\n\n      labels[labels.length - 1] = label;\n      return states[states.length - 1] = new State();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder.State#newState(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder.State#newState(int).mjava","sourceNew":"    /**\n     * Create a new outgoing transition labeled <code>label</code> and return\n     * the newly created target state for this transition.\n     */\n    State newState(int label) {\n      assert Arrays.binarySearch(labels, label) < 0 : \"State already has transition labeled: \"\n          + label;\n      \n      labels = ArrayUtil.growExact(labels, labels.length + 1);\n      states = ArrayUtil.growExact(states, states.length + 1);\n\n      labels[labels.length - 1] = label;\n      return states[states.length - 1] = new State();\n    }\n\n","sourceOld":"    /**\n     * Create a new outgoing transition labeled <code>label</code> and return\n     * the newly created target state for this transition.\n     */\n    State newState(int label) {\n      assert Arrays.binarySearch(labels, label) < 0 : \"State already has transition labeled: \"\n          + label;\n      \n      labels = Arrays.copyOf(labels, labels.length + 1);\n      states = Arrays.copyOf(states, states.length + 1);\n\n      labels[labels.length - 1] = label;\n      return states[states.length - 1] = new State();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder.State#newState(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder.State#newState(int).mjava","sourceNew":"    /**\n     * Create a new outgoing transition labeled <code>label</code> and return\n     * the newly created target state for this transition.\n     */\n    State newState(int label) {\n      assert Arrays.binarySearch(labels, label) < 0 : \"State already has transition labeled: \"\n          + label;\n      \n      labels = ArrayUtil.growExact(labels, labels.length + 1);\n      states = ArrayUtil.growExact(states, states.length + 1);\n\n      labels[labels.length - 1] = label;\n      return states[states.length - 1] = new State();\n    }\n\n","sourceOld":"    /**\n     * Create a new outgoing transition labeled <code>label</code> and return\n     * the newly created target state for this transition.\n     */\n    State newState(int label) {\n      assert Arrays.binarySearch(labels, label) < 0 : \"State already has transition labeled: \"\n          + label;\n      \n      labels = Arrays.copyOf(labels, labels.length + 1);\n      states = Arrays.copyOf(states, states.length + 1);\n\n      labels[labels.length - 1] = label;\n      return states[states.length - 1] = new State();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder.State#newState(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder.State#newState(int).mjava","sourceNew":"    /**\n     * Create a new outgoing transition labeled <code>label</code> and return\n     * the newly created target state for this transition.\n     */\n    State newState(int label) {\n      assert Arrays.binarySearch(labels, label) < 0 : \"State already has transition labeled: \"\n          + label;\n      \n      labels = ArrayUtil.growExact(labels, labels.length + 1);\n      states = ArrayUtil.growExact(states, states.length + 1);\n\n      labels[labels.length - 1] = label;\n      return states[states.length - 1] = new State();\n    }\n\n","sourceOld":"    /**\n     * Create a new outgoing transition labeled <code>label</code> and return\n     * the newly created target state for this transition.\n     */\n    State newState(int label) {\n      assert Arrays.binarySearch(labels, label) < 0 : \"State already has transition labeled: \"\n          + label;\n      \n      labels = Arrays.copyOf(labels, labels.length + 1);\n      states = Arrays.copyOf(states, states.length + 1);\n\n      labels[labels.length - 1] = label;\n      return states[states.length - 1] = new State();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["8d94feb02e9c604630d8a6758abcb40cbfa91f5d","9798d0818e7a880546802b509792d3f3d57babd2"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"8d94feb02e9c604630d8a6758abcb40cbfa91f5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"9798d0818e7a880546802b509792d3f3d57babd2":["8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["8d94feb02e9c604630d8a6758abcb40cbfa91f5d","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe33227f6805edab2036cbb80645cc4e2d1fa424","8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"8d94feb02e9c604630d8a6758abcb40cbfa91f5d":["fe33227f6805edab2036cbb80645cc4e2d1fa424","b70042a8a492f7054d480ccdd2be9796510d4327","7f4ef381bf0c2d618c6db830d3dd668c6901c05a","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","b70042a8a492f7054d480ccdd2be9796510d4327","4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}