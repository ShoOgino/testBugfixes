{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IfFunction#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IfFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/IfFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues ifVals = ifSource.getValues(context, readerContext);\n    final FunctionValues trueVals = trueSource.getValues(context, readerContext);\n    final FunctionValues falseVals = falseSource.getValues(context, readerContext);\n\n    return new FunctionValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.byteVal(doc) : falseVals.byteVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.shortVal(doc) : falseVals.shortVal(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.floatVal(doc) : falseVals.floatVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.intVal(doc) : falseVals.intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.longVal(doc) : falseVals.longVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.doubleVal(doc) : falseVals.doubleVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.strVal(doc) : falseVals.strVal(doc);\n      }\n\n      @Override\n      public boolean boolVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.boolVal(doc) : falseVals.boolVal(doc);\n      }\n\n      @Override\n      public boolean bytesVal(int doc, BytesRef target) {\n        return ifVals.boolVal(doc) ? trueVals.bytesVal(doc, target) : falseVals.bytesVal(doc, target);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.objectVal(doc) : falseVals.objectVal(doc);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return true; // TODO: flow through to any sub-sources?\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        // TODO: we need types of trueSource / falseSource to handle this\n        // for now, use float.\n        return super.getValueFiller();\n      }\n\n      @Override\n      public String toString(int doc) {\n        return \"if(\" + ifVals.toString(doc) + ',' + trueVals.toString(doc) + ',' + falseVals.toString(doc) + ')';\n      }\n    };\n\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues ifVals = ifSource.getValues(context, readerContext);\n    final FunctionValues trueVals = trueSource.getValues(context, readerContext);\n    final FunctionValues falseVals = falseSource.getValues(context, readerContext);\n\n    return new FunctionValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.byteVal(doc) : falseVals.byteVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.shortVal(doc) : falseVals.shortVal(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.floatVal(doc) : falseVals.floatVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.intVal(doc) : falseVals.intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.longVal(doc) : falseVals.longVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.doubleVal(doc) : falseVals.doubleVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.strVal(doc) : falseVals.strVal(doc);\n      }\n\n      @Override\n      public boolean boolVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.boolVal(doc) : falseVals.boolVal(doc);\n      }\n\n      @Override\n      public boolean bytesVal(int doc, BytesRef target) {\n        return ifVals.boolVal(doc) ? trueVals.bytesVal(doc, target) : falseVals.bytesVal(doc, target);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.objectVal(doc) : falseVals.objectVal(doc);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return true; // TODO: flow through to any sub-sources?\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        // TODO: we need types of trueSource / falseSource to handle this\n        // for now, use float.\n        return super.getValueFiller();\n      }\n\n      @Override\n      public String toString(int doc) {\n        return \"if(\" + ifVals.toString(doc) + ',' + trueVals.toString(doc) + ',' + falseVals.toString(doc) + ')';\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IfFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IfFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues ifVals = ifSource.getValues(context, readerContext);\n    final FunctionValues trueVals = trueSource.getValues(context, readerContext);\n    final FunctionValues falseVals = falseSource.getValues(context, readerContext);\n\n    return new FunctionValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.byteVal(doc) : falseVals.byteVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.shortVal(doc) : falseVals.shortVal(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.floatVal(doc) : falseVals.floatVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.intVal(doc) : falseVals.intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.longVal(doc) : falseVals.longVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.doubleVal(doc) : falseVals.doubleVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.strVal(doc) : falseVals.strVal(doc);\n      }\n\n      @Override\n      public boolean boolVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.boolVal(doc) : falseVals.boolVal(doc);\n      }\n\n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder target) {\n        return ifVals.boolVal(doc) ? trueVals.bytesVal(doc, target) : falseVals.bytesVal(doc, target);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.objectVal(doc) : falseVals.objectVal(doc);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return true; // TODO: flow through to any sub-sources?\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        // TODO: we need types of trueSource / falseSource to handle this\n        // for now, use float.\n        return super.getValueFiller();\n      }\n\n      @Override\n      public String toString(int doc) {\n        return \"if(\" + ifVals.toString(doc) + ',' + trueVals.toString(doc) + ',' + falseVals.toString(doc) + ')';\n      }\n    };\n\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues ifVals = ifSource.getValues(context, readerContext);\n    final FunctionValues trueVals = trueSource.getValues(context, readerContext);\n    final FunctionValues falseVals = falseSource.getValues(context, readerContext);\n\n    return new FunctionValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.byteVal(doc) : falseVals.byteVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.shortVal(doc) : falseVals.shortVal(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.floatVal(doc) : falseVals.floatVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.intVal(doc) : falseVals.intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.longVal(doc) : falseVals.longVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.doubleVal(doc) : falseVals.doubleVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.strVal(doc) : falseVals.strVal(doc);\n      }\n\n      @Override\n      public boolean boolVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.boolVal(doc) : falseVals.boolVal(doc);\n      }\n\n      @Override\n      public boolean bytesVal(int doc, BytesRef target) {\n        return ifVals.boolVal(doc) ? trueVals.bytesVal(doc, target) : falseVals.bytesVal(doc, target);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.objectVal(doc) : falseVals.objectVal(doc);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return true; // TODO: flow through to any sub-sources?\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        // TODO: we need types of trueSource / falseSource to handle this\n        // for now, use float.\n        return super.getValueFiller();\n      }\n\n      @Override\n      public String toString(int doc) {\n        return \"if(\" + ifVals.toString(doc) + ',' + trueVals.toString(doc) + ',' + falseVals.toString(doc) + ')';\n      }\n    };\n\n  }\n\n","bugFix":["80f6925d29ae169407185d52267ba1969126e1e2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/IfFunction#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FunctionValues ifVals = ifSource.getValues(context, readerContext);\n    final FunctionValues trueVals = trueSource.getValues(context, readerContext);\n    final FunctionValues falseVals = falseSource.getValues(context, readerContext);\n\n    return new FunctionValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.byteVal(doc) : falseVals.byteVal(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.shortVal(doc) : falseVals.shortVal(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.floatVal(doc) : falseVals.floatVal(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.intVal(doc) : falseVals.intVal(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.longVal(doc) : falseVals.longVal(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.doubleVal(doc) : falseVals.doubleVal(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.strVal(doc) : falseVals.strVal(doc);\n      }\n\n      @Override\n      public boolean boolVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.boolVal(doc) : falseVals.boolVal(doc);\n      }\n\n      @Override\n      public boolean bytesVal(int doc, BytesRefBuilder target) {\n        return ifVals.boolVal(doc) ? trueVals.bytesVal(doc, target) : falseVals.bytesVal(doc, target);\n      }\n\n      @Override\n      public Object objectVal(int doc) {\n        return ifVals.boolVal(doc) ? trueVals.objectVal(doc) : falseVals.objectVal(doc);\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return true; // TODO: flow through to any sub-sources?\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        // TODO: we need types of trueSource / falseSource to handle this\n        // for now, use float.\n        return super.getValueFiller();\n      }\n\n      @Override\n      public String toString(int doc) {\n        return \"if(\" + ifVals.toString(doc) + ',' + trueVals.toString(doc) + ',' + falseVals.toString(doc) + ')';\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}