{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledMaintenanceTriggerTest#testTriggerDefaults().mjava","commits":[{"id":"9c6c0dad4932399aec99b4818086cb1772773916","date":1520515900,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledMaintenanceTriggerTest#testTriggerDefaults().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTriggerDefaults() throws Exception {\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    log.info(autoScalingConfig.toString());\n    AutoScalingConfig.TriggerConfig triggerConfig = autoScalingConfig.getTriggerConfigs().get(AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME);\n    assertNotNull(triggerConfig);\n    assertEquals(2, triggerConfig.actions.size());\n    assertTrue(triggerConfig.actions.get(0).actionClass.endsWith(InactiveShardPlanAction.class.getSimpleName()));\n    assertTrue(triggerConfig.actions.get(1).actionClass.endsWith(ExecutePlanAction.class.getSimpleName()));\n    AutoScalingConfig.TriggerListenerConfig listenerConfig = autoScalingConfig.getTriggerListenerConfigs().get(AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME + \".system\");\n    assertNotNull(listenerConfig);\n    assertEquals(AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME, listenerConfig.trigger);\n    assertTrue(listenerConfig.listenerClass.endsWith(SystemLogListener.class.getSimpleName()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7fb1186f5b61e0b74289e6786df8cbecfa471bc","date":1545308188,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledMaintenanceTriggerTest#testTriggerDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledMaintenanceTriggerTest#testTriggerDefaults().mjava","sourceNew":"  @Test\n  public void testTriggerDefaults() throws Exception {\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    log.info(autoScalingConfig.toString());\n    AutoScalingConfig.TriggerConfig triggerConfig = autoScalingConfig.getTriggerConfigs().get(AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME);\n    assertNotNull(triggerConfig);\n    assertEquals(3, triggerConfig.actions.size());\n    assertTrue(triggerConfig.actions.get(0).actionClass.endsWith(InactiveShardPlanAction.class.getSimpleName()));\n    assertTrue(triggerConfig.actions.get(1).actionClass.endsWith(InactiveMarkersPlanAction.class.getSimpleName()));\n    assertTrue(triggerConfig.actions.get(2).actionClass.endsWith(ExecutePlanAction.class.getSimpleName()));\n    AutoScalingConfig.TriggerListenerConfig listenerConfig = autoScalingConfig.getTriggerListenerConfigs().get(AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME + \".system\");\n    assertNotNull(listenerConfig);\n    assertEquals(AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME, listenerConfig.trigger);\n    assertTrue(listenerConfig.listenerClass.endsWith(SystemLogListener.class.getSimpleName()));\n  }\n\n","sourceOld":"  @Test\n  public void testTriggerDefaults() throws Exception {\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    log.info(autoScalingConfig.toString());\n    AutoScalingConfig.TriggerConfig triggerConfig = autoScalingConfig.getTriggerConfigs().get(AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME);\n    assertNotNull(triggerConfig);\n    assertEquals(2, triggerConfig.actions.size());\n    assertTrue(triggerConfig.actions.get(0).actionClass.endsWith(InactiveShardPlanAction.class.getSimpleName()));\n    assertTrue(triggerConfig.actions.get(1).actionClass.endsWith(ExecutePlanAction.class.getSimpleName()));\n    AutoScalingConfig.TriggerListenerConfig listenerConfig = autoScalingConfig.getTriggerListenerConfigs().get(AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME + \".system\");\n    assertNotNull(listenerConfig);\n    assertEquals(AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME, listenerConfig.trigger);\n    assertTrue(listenerConfig.listenerClass.endsWith(SystemLogListener.class.getSimpleName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledMaintenanceTriggerTest#testTriggerDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledMaintenanceTriggerTest#testTriggerDefaults().mjava","sourceNew":"  @Test\n  public void testTriggerDefaults() throws Exception {\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    log.info(\"{}\", autoScalingConfig);\n    AutoScalingConfig.TriggerConfig triggerConfig = autoScalingConfig.getTriggerConfigs().get(AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME);\n    assertNotNull(triggerConfig);\n    assertEquals(3, triggerConfig.actions.size());\n    assertTrue(triggerConfig.actions.get(0).actionClass.endsWith(InactiveShardPlanAction.class.getSimpleName()));\n    assertTrue(triggerConfig.actions.get(1).actionClass.endsWith(InactiveMarkersPlanAction.class.getSimpleName()));\n    assertTrue(triggerConfig.actions.get(2).actionClass.endsWith(ExecutePlanAction.class.getSimpleName()));\n    AutoScalingConfig.TriggerListenerConfig listenerConfig = autoScalingConfig.getTriggerListenerConfigs().get(AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME + \".system\");\n    assertNotNull(listenerConfig);\n    assertEquals(AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME, listenerConfig.trigger);\n    assertTrue(listenerConfig.listenerClass.endsWith(SystemLogListener.class.getSimpleName()));\n  }\n\n","sourceOld":"  @Test\n  public void testTriggerDefaults() throws Exception {\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    log.info(autoScalingConfig.toString());\n    AutoScalingConfig.TriggerConfig triggerConfig = autoScalingConfig.getTriggerConfigs().get(AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME);\n    assertNotNull(triggerConfig);\n    assertEquals(3, triggerConfig.actions.size());\n    assertTrue(triggerConfig.actions.get(0).actionClass.endsWith(InactiveShardPlanAction.class.getSimpleName()));\n    assertTrue(triggerConfig.actions.get(1).actionClass.endsWith(InactiveMarkersPlanAction.class.getSimpleName()));\n    assertTrue(triggerConfig.actions.get(2).actionClass.endsWith(ExecutePlanAction.class.getSimpleName()));\n    AutoScalingConfig.TriggerListenerConfig listenerConfig = autoScalingConfig.getTriggerListenerConfigs().get(AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME + \".system\");\n    assertNotNull(listenerConfig);\n    assertEquals(AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME, listenerConfig.trigger);\n    assertTrue(listenerConfig.listenerClass.endsWith(SystemLogListener.class.getSimpleName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ScheduledMaintenanceTriggerTest#testTriggerDefaults().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testTriggerDefaults() throws Exception {\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    log.info(\"{}\", autoScalingConfig);\n    AutoScalingConfig.TriggerConfig triggerConfig = autoScalingConfig.getTriggerConfigs().get(AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME);\n    assertNotNull(triggerConfig);\n    assertEquals(3, triggerConfig.actions.size());\n    assertTrue(triggerConfig.actions.get(0).actionClass.endsWith(InactiveShardPlanAction.class.getSimpleName()));\n    assertTrue(triggerConfig.actions.get(1).actionClass.endsWith(InactiveMarkersPlanAction.class.getSimpleName()));\n    assertTrue(triggerConfig.actions.get(2).actionClass.endsWith(ExecutePlanAction.class.getSimpleName()));\n    AutoScalingConfig.TriggerListenerConfig listenerConfig = autoScalingConfig.getTriggerListenerConfigs().get(AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME + \".system\");\n    assertNotNull(listenerConfig);\n    assertEquals(AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME, listenerConfig.trigger);\n    assertTrue(listenerConfig.listenerClass.endsWith(SystemLogListener.class.getSimpleName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7fb1186f5b61e0b74289e6786df8cbecfa471bc":["9c6c0dad4932399aec99b4818086cb1772773916"],"9c6c0dad4932399aec99b4818086cb1772773916":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["f7fb1186f5b61e0b74289e6786df8cbecfa471bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"f7fb1186f5b61e0b74289e6786df8cbecfa471bc":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"9c6c0dad4932399aec99b4818086cb1772773916":["f7fb1186f5b61e0b74289e6786df8cbecfa471bc"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9c6c0dad4932399aec99b4818086cb1772773916"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}