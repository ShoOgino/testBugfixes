{"path":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testFuncField().mjava","commits":[{"id":"69227e655c7a72315c68e596f0a899f339b1ec2b","date":1340137626,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testFuncField().mjava","pathOld":"/dev/null","sourceNew":"  public void testFuncField() throws Exception {\n    assertFuncEquals(\"field(\\\"foo_i\\\")\", \n                     \"field('foo_i\\')\", \n                     \"foo_i\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f192203c3feece147e3227c2446101d33858d81","date":1438359704,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testFuncField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testFuncField().mjava","sourceNew":"  public void testFuncField() throws Exception {\n    assertFuncEquals(\"field(\\\"foo_i\\\")\", \n                     \"field('foo_i\\')\", \n                     \"foo_i\");\n    \n    // simple VS of single valued field should be same as asking for min/max on that field\n    assertFuncEquals(\"field(\\\"foo_i\\\")\", \n                     \"field('foo_i',min)\", \n                     \"field(foo_i,'min')\", \n                     \"field('foo_i',max)\", \n                     \"field(foo_i,'max')\", \n                     \"foo_i\");\n\n    // multivalued field with selector\n    String multif = \"multi_int_with_docvals\";\n    SolrQueryRequest req = req(\"my_field\", multif);\n    // this test is only viable if it's a multivalued field, sanity check the schema\n    assertTrue(multif + \" is no longer multivalued, who broke this schema?\",\n               req.getSchema().getField(multif).multiValued());\n    assertFuncEquals(req,\n                     \"field($my_field,'MIN')\", \n                     \"field('\"+multif+\"',min)\");\n    assertFuncEquals(req,\n                     \"field($my_field,'max')\", \n                     \"field('\"+multif+\"',Max)\"); \n    \n  }\n\n","sourceOld":"  public void testFuncField() throws Exception {\n    assertFuncEquals(\"field(\\\"foo_i\\\")\", \n                     \"field('foo_i\\')\", \n                     \"foo_i\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0","date":1576656084,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testFuncField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testFuncField().mjava","sourceNew":"  public void testFuncField() throws Exception {\n    assertFuncEquals(\"field(\\\"foo_i\\\")\",\n                     \"field('foo_i\\')\",\n                     \"foo_i\");\n\n    // simple VS of single valued field should be same as asking for min/max on that field\n    assertFuncEquals(\"field(\\\"foo_i\\\")\",\n                     \"field('foo_i',min)\",\n                     \"field(foo_i,'min')\",\n                     \"field('foo_i',max)\",\n                     \"field(foo_i,'max')\",\n                     \"foo_i\");\n\n    // multivalued field with selector\n    String multif = \"multi_int_with_docvals\";\n    SolrQueryRequest req = req(\"my_field\", multif);\n    // this test is only viable if it's a multivalued field, sanity check the schema\n    assertTrue(multif + \" is no longer multivalued, who broke this schema?\",\n               req.getSchema().getField(multif).multiValued());\n    assertFuncEquals(req,\n                     \"field($my_field,'MIN')\",\n                     \"field('\"+multif+\"',min)\");\n    assertFuncEquals(req,\n                     \"field($my_field,'max')\",\n                     \"field('\"+multif+\"',Max)\");\n\n  }\n\n","sourceOld":"  public void testFuncField() throws Exception {\n    assertFuncEquals(\"field(\\\"foo_i\\\")\", \n                     \"field('foo_i\\')\", \n                     \"foo_i\");\n    \n    // simple VS of single valued field should be same as asking for min/max on that field\n    assertFuncEquals(\"field(\\\"foo_i\\\")\", \n                     \"field('foo_i',min)\", \n                     \"field(foo_i,'min')\", \n                     \"field('foo_i',max)\", \n                     \"field(foo_i,'max')\", \n                     \"foo_i\");\n\n    // multivalued field with selector\n    String multif = \"multi_int_with_docvals\";\n    SolrQueryRequest req = req(\"my_field\", multif);\n    // this test is only viable if it's a multivalued field, sanity check the schema\n    assertTrue(multif + \" is no longer multivalued, who broke this schema?\",\n               req.getSchema().getField(multif).multiValued());\n    assertFuncEquals(req,\n                     \"field($my_field,'MIN')\", \n                     \"field('\"+multif+\"',min)\");\n    assertFuncEquals(req,\n                     \"field($my_field,'max')\", \n                     \"field('\"+multif+\"',Max)\"); \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"246314af59d76a47fccc31e9494eefee01ec9c00","date":1576657955,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testFuncField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testFuncField().mjava","sourceNew":"  public void testFuncField() throws Exception {\n    assertFuncEquals(\"field(\\\"foo_i\\\")\",\n                     \"field('foo_i\\')\",\n                     \"foo_i\");\n\n    // simple VS of single valued field should be same as asking for min/max on that field\n    assertFuncEquals(\"field(\\\"foo_i\\\")\",\n                     \"field('foo_i',min)\",\n                     \"field(foo_i,'min')\",\n                     \"field('foo_i',max)\",\n                     \"field(foo_i,'max')\",\n                     \"foo_i\");\n\n    // multivalued field with selector\n    String multif = \"multi_int_with_docvals\";\n    SolrQueryRequest req = req(\"my_field\", multif);\n    // this test is only viable if it's a multivalued field, sanity check the schema\n    assertTrue(multif + \" is no longer multivalued, who broke this schema?\",\n               req.getSchema().getField(multif).multiValued());\n    assertFuncEquals(req,\n                     \"field($my_field,'MIN')\",\n                     \"field('\"+multif+\"',min)\");\n    assertFuncEquals(req,\n                     \"field($my_field,'max')\",\n                     \"field('\"+multif+\"',Max)\");\n\n  }\n\n","sourceOld":"  public void testFuncField() throws Exception {\n    assertFuncEquals(\"field(\\\"foo_i\\\")\", \n                     \"field('foo_i\\')\", \n                     \"foo_i\");\n    \n    // simple VS of single valued field should be same as asking for min/max on that field\n    assertFuncEquals(\"field(\\\"foo_i\\\")\", \n                     \"field('foo_i',min)\", \n                     \"field(foo_i,'min')\", \n                     \"field('foo_i',max)\", \n                     \"field(foo_i,'max')\", \n                     \"foo_i\");\n\n    // multivalued field with selector\n    String multif = \"multi_int_with_docvals\";\n    SolrQueryRequest req = req(\"my_field\", multif);\n    // this test is only viable if it's a multivalued field, sanity check the schema\n    assertTrue(multif + \" is no longer multivalued, who broke this schema?\",\n               req.getSchema().getField(multif).multiValued());\n    assertFuncEquals(req,\n                     \"field($my_field,'MIN')\", \n                     \"field('\"+multif+\"',min)\");\n    assertFuncEquals(req,\n                     \"field($my_field,'max')\", \n                     \"field('\"+multif+\"',Max)\"); \n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"246314af59d76a47fccc31e9494eefee01ec9c00":["1f192203c3feece147e3227c2446101d33858d81","a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"69227e655c7a72315c68e596f0a899f339b1ec2b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1f192203c3feece147e3227c2446101d33858d81":["69227e655c7a72315c68e596f0a899f339b1ec2b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0":["1f192203c3feece147e3227c2446101d33858d81"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"]},"commit2Childs":{"246314af59d76a47fccc31e9494eefee01ec9c00":[],"69227e655c7a72315c68e596f0a899f339b1ec2b":["1f192203c3feece147e3227c2446101d33858d81"],"1f192203c3feece147e3227c2446101d33858d81":["246314af59d76a47fccc31e9494eefee01ec9c00","a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["69227e655c7a72315c68e596f0a899f339b1ec2b"],"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}