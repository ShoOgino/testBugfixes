{"path":"solr/core/src/java/org/apache/solr/schema/CurrencyValue#parse(String,String).mjava","commits":[{"id":"6409f24cc7d96b04fb1c932845092b0e307fb5d4","date":1515972624,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyValue#parse(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a new currency value by parsing the specific input.\n   * <p>\n   * Currency values are expected to be in the format &lt;amount&gt;,&lt;currency code&gt;,\n   * for example, \"500,USD\" would represent 5 U.S. Dollars.\n   * </p>\n   * <p>\n   * If no currency code is specified, the default is assumed.\n   * </p>\n   * @param externalVal The value to parse.\n   * @param defaultCurrency The default currency.\n   * @return The parsed CurrencyValue.\n   */\n  public static CurrencyValue parse(String externalVal, String defaultCurrency) {\n    if (externalVal == null) {\n      return null;\n    }\n    String amount = externalVal;\n    String code = defaultCurrency;\n\n    if (externalVal.contains(\",\")) {\n      String[] amountAndCode = externalVal.split(\",\");\n      amount = amountAndCode[0];\n      code = amountAndCode[1];\n    }\n\n    if (amount.equals(\"*\")) {\n      return null;\n    }\n\n    Currency currency = CurrencyField.getCurrency(code);\n\n    if (currency == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Currency code not supported by this JVM: \" + code);\n    }\n\n    try {\n      double value = Double.parseDouble(amount);\n      long currencyValue = Math.round(value * Math.pow(10.0, currency.getDefaultFractionDigits()));\n\n      return new CurrencyValue(currencyValue, code);\n    } catch (NumberFormatException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyValue#parse(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a new currency value by parsing the specific input.\n   * <p>\n   * Currency values are expected to be in the format &lt;amount&gt;,&lt;currency code&gt;,\n   * for example, \"500,USD\" would represent 5 U.S. Dollars.\n   * </p>\n   * <p>\n   * If no currency code is specified, the default is assumed.\n   * </p>\n   * @param externalVal The value to parse.\n   * @param defaultCurrency The default currency.\n   * @return The parsed CurrencyValue.\n   */\n  public static CurrencyValue parse(String externalVal, String defaultCurrency) {\n    if (externalVal == null) {\n      return null;\n    }\n    String amount = externalVal;\n    String code = defaultCurrency;\n\n    if (externalVal.contains(\",\")) {\n      String[] amountAndCode = externalVal.split(\",\");\n      amount = amountAndCode[0];\n      code = amountAndCode[1];\n    }\n\n    if (amount.equals(\"*\")) {\n      return null;\n    }\n\n    Currency currency = CurrencyField.getCurrency(code);\n\n    if (currency == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Currency code not supported by this JVM: \" + code);\n    }\n\n    try {\n      double value = Double.parseDouble(amount);\n      long currencyValue = Math.round(value * Math.pow(10.0, currency.getDefaultFractionDigits()));\n\n      return new CurrencyValue(currencyValue, code);\n    } catch (NumberFormatException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}