{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(List[Row]).mjava","commits":[{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(List[Row]).mjava","sourceNew":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> violations = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, AtomicInteger>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, AtomicInteger>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, AtomicInteger> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              violations.add(new Violation(\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey()\n              ));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          violations.add(new Violation(null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null));\n        }\n      }\n    }\n    return violations;\n\n  }\n\n","sourceOld":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> violations = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, AtomicInteger>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, AtomicInteger>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, AtomicInteger> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              violations.add(new Violation(\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey()\n              ));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          violations.add(new Violation(null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null));\n        }\n      }\n    }\n    return violations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Clause#test(List[Row]).mjava","sourceNew":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> violations = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              violations.add(new Violation(\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey()\n              ));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          violations.add(new Violation(null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null));\n        }\n      }\n    }\n    return violations;\n\n  }\n\n","sourceOld":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> violations = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              violations.add(new Violation(\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey()\n              ));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          violations.add(new Violation(null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null));\n        }\n      }\n    }\n    return violations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(List[Row]).mjava","pathOld":"/dev/null","sourceNew":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> violations = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, AtomicInteger>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, AtomicInteger>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, AtomicInteger> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              violations.add(new Violation(\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey()\n              ));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          violations.add(new Violation(null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null));\n        }\n      }\n    }\n    return violations;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(List[Row]).mjava","sourceNew":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> violations = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              violations.add(new Violation(\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey()\n              ));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          violations.add(new Violation(null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null));\n        }\n      }\n    }\n    return violations;\n\n  }\n\n","sourceOld":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> violations = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, AtomicInteger>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, AtomicInteger>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, AtomicInteger> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              violations.add(new Violation(\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey()\n              ));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          violations.add(new Violation(null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null));\n        }\n      }\n    }\n    return violations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(List[Row]).mjava","sourceNew":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> violations = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              violations.add(new Violation(\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey()\n              ));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          violations.add(new Violation(null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null));\n        }\n      }\n    }\n    return violations;\n\n  }\n\n","sourceOld":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> violations = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, AtomicInteger>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, AtomicInteger>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, AtomicInteger> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              violations.add(new Violation(\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey()\n              ));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          violations.add(new Violation(null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null));\n        }\n      }\n    }\n    return violations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(List[Row]).mjava","sourceNew":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> violations = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              violations.add(new Violation(this,\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey()\n              ));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          violations.add(new Violation(this, null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null));\n        }\n      }\n    }\n    return violations;\n\n  }\n\n","sourceOld":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> violations = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              violations.add(new Violation(\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey()\n              ));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          violations.add(new Violation(null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null));\n        }\n      }\n    }\n    return violations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(List[Row]).mjava","sourceNew":"  public List<Violation> test(List<Row> allRows) {\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, allRows);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              Violation violation = new Violation(this,\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey());\n              Suggestion.getTagType(tag.name).addViolatingReplicas(ctx.reset(counts.getKey(), counts.getValue(), violation));\n//              Suggestion.getByTag(tag.name).violationFun.accept(ctx.reset(counts.getKey(), counts.getValue(), violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          Suggestion.ConditionType.CORES.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(this, null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","sourceOld":"  public List<Violation> test(List<Row> allRows) {\n    List<Violation> violations = new ArrayList<>();\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              violations.add(new Violation(this,\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey()\n              ));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          violations.add(new Violation(this, null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null));\n        }\n      }\n    }\n    return violations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"179b14362375bb921c76d7217b6c558ced472891","date":1509441077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(List[Row]).mjava","sourceNew":"  public List<Violation> test(List<Row> allRows) {\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, allRows);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              Violation violation = new Violation(this,\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey());\n              Suggestion.getTagType(tag.name).addViolatingReplicas(ctx.reset(counts.getKey(), counts.getValue(), violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!globalTag.isPass(r)) {\n          Suggestion.ConditionType.CORES.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(this, null, null, r.node, r.getVal(globalTag.name), globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","sourceOld":"  public List<Violation> test(List<Row> allRows) {\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, allRows);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              Violation violation = new Violation(this,\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey());\n              Suggestion.getTagType(tag.name).addViolatingReplicas(ctx.reset(counts.getKey(), counts.getValue(), violation));\n//              Suggestion.getByTag(tag.name).violationFun.accept(ctx.reset(counts.getKey(), counts.getValue(), violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!tag.isPass(r)) {\n          Suggestion.ConditionType.CORES.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(this, null, null, r.node, r.getVal(tag.name), tag.delta(r.getVal(tag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(Policy.Session).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(List[Row]).mjava","sourceNew":"  public List<Violation> test(Policy.Session session) {\n    ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, session.matrix, computedValueEvaluator);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCount = computeReplicaCounts(session.matrix, computedValueEvaluator);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCount.entrySet()) {\n        computedValueEvaluator.collName = e.getKey();\n        if (!collection.isPass(computedValueEvaluator.collName)) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          computedValueEvaluator.shardName = shardVsCount.getKey();\n          if (!shard.isPass(computedValueEvaluator.shardName)) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n            if (!sealedClause.replica.isPass(counts.getValue())) {\n              Violation violation = new Violation(sealedClause,\n                  computedValueEvaluator.collName,\n                  computedValueEvaluator.shardName,\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  sealedClause.getReplica().delta(counts.getValue()),\n                  counts.getKey());\n              Suggestion.getTagType(tag.name).addViolatingReplicas(ctx.reset(counts.getKey(), counts.getValue(), violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : session.matrix) {\n        SealedClause sealedClause = getSealedClause(computedValueEvaluator);\n        if (!sealedClause.getGlobalTag().isPass(r)) {\n          Suggestion.ConditionType.CORES.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name), sealedClause.globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","sourceOld":"  public List<Violation> test(List<Row> allRows) {\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, allRows);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              Violation violation = new Violation(this,\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey());\n              Suggestion.getTagType(tag.name).addViolatingReplicas(ctx.reset(counts.getKey(), counts.getValue(), violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!globalTag.isPass(r)) {\n          Suggestion.ConditionType.CORES.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(this, null, null, r.node, r.getVal(globalTag.name), globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(List[Row]).mjava","sourceNew":null,"sourceOld":"  public List<Violation> test(List<Row> allRows) {\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, allRows);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              Violation violation = new Violation(this,\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey());\n              Suggestion.getTagType(tag.name).addViolatingReplicas(ctx.reset(counts.getKey(), counts.getValue(), violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!globalTag.isPass(r)) {\n          Suggestion.ConditionType.CORES.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(this, null, null, r.node, r.getVal(globalTag.name), globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#test(List[Row]).mjava","sourceNew":null,"sourceOld":"  public List<Violation> test(List<Row> allRows) {\n    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, allRows);\n    if (isPerCollectiontag()) {\n      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCount = computeReplicaCounts(allRows);\n      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCount.entrySet()) {\n        if (!collection.isPass(e.getKey())) continue;\n        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {\n          if (!shard.isPass(shardVsCount.getKey())) continue;\n          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {\n            if (!replica.isPass(counts.getValue())) {\n              Violation violation = new Violation(this,\n                  e.getKey(),\n                  shardVsCount.getKey(),\n                  tag.name.equals(\"node\") ? counts.getKey() : null,\n                  counts.getValue(),\n                  replica.delta(counts.getValue()),\n                  counts.getKey());\n              Suggestion.getTagType(tag.name).addViolatingReplicas(ctx.reset(counts.getKey(), counts.getValue(), violation));\n            }\n          }\n        }\n      }\n    } else {\n      for (Row r : allRows) {\n        if (!globalTag.isPass(r)) {\n          Suggestion.ConditionType.CORES.addViolatingReplicas(ctx.reset(null, null,\n              new Violation(this, null, null, r.node, r.getVal(globalTag.name), globalTag.delta(r.getVal(globalTag.name)), null)));\n        }\n      }\n    }\n    return ctx.allViolations;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"179b14362375bb921c76d7217b6c558ced472891":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["179b14362375bb921c76d7217b6c558ced472891","9837f40c922407d857991971de6def18eda0857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["560c18d71dad43d675158783c3840f8c80d6d39c"],"9837f40c922407d857991971de6def18eda0857b":["179b14362375bb921c76d7217b6c558ced472891"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9837f40c922407d857991971de6def18eda0857b"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["179b14362375bb921c76d7217b6c558ced472891","9837f40c922407d857991971de6def18eda0857b"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"179b14362375bb921c76d7217b6c558ced472891":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["179b14362375bb921c76d7217b6c558ced472891"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"9837f40c922407d857991971de6def18eda0857b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"560c18d71dad43d675158783c3840f8c80d6d39c":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"98f11c416d30e556e0004a9a84960702d12d35b1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}