{"path":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","commits":[{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestMultiFieldQPHelper#testStaticMethod3().mjava","sourceNew":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new StandardAnalyzer());\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new StandardAnalyzer());\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new StandardAnalyzer());\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new StandardAnalyzer());\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","sourceNew":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new StandardAnalyzer());\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new StandardAnalyzer());\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","sourceNew":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new StandardAnalyzer(TEST_VERSION_CURRENT));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiFieldQPHelper#testStaticMethod3().mjava","sourceNew":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new StandardAnalyzer(TEST_VERSION_CURRENT));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod3() throws QueryNodeException {\n    String[] queries = { \"one\", \"two\", \"three\" };\n    String[] fields = { \"f1\", \"f2\", \"f3\" };\n    BooleanClause.Occur[] flags = { BooleanClause.Occur.MUST,\n        BooleanClause.Occur.MUST_NOT, BooleanClause.Occur.SHOULD };\n    Query q = QueryParserUtil.parse(queries, fields, flags,\n        new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"+f1:one -f2:two f3:three\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = { BooleanClause.Occur.MUST };\n      q = QueryParserUtil\n          .parse(queries, fields, flags2, new StandardAnalyzer(TEST_VERSION_CURRENT));\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["e8a848e758754282137f42bf85793c278e250390"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a848e758754282137f42bf85793c278e250390"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}