{"path":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","sourceNew":"    // Writes all entries in the pending slice as a single\n    // block: \n    private PendingBlock writeBlock(IntsRef prevTerm, int prefixLength, int indexPrefixLength, int startBackwards, int length,\n                                    int futureTermCount, boolean isFloor, int floorLeadByte, boolean isLastInFloor) throws IOException {\n\n      assert length > 0;\n\n      final int start = pending.size()-startBackwards;\n\n      assert start >= 0: \"pending.size()=\" + pending.size() + \" startBackwards=\" + startBackwards + \" length=\" + length;\n\n      final List<PendingEntry> slice = pending.subList(start, start + length);\n\n      final long startFP = out.getFilePointer();\n\n      final BytesRef prefix = new BytesRef(indexPrefixLength);\n      for(int m=0;m<indexPrefixLength;m++) {\n        prefix.bytes[m] = (byte) prevTerm.ints[m];\n      }\n      prefix.length = indexPrefixLength;\n\n      // Write block header:\n      out.writeVInt((length<<1)|(isLastInFloor ? 1:0));\n\n      // if (DEBUG) {\n      //   System.out.println(\"  writeBlock \" + (isFloor ? \"(floor) \" : \"\") + \"seg=\" + segment + \" pending.size()=\" + pending.size() + \" prefixLength=\" + prefixLength + \" indexPrefix=\" + toString(prefix) + \" entCount=\" + length + \" startFP=\" + startFP + \" futureTermCount=\" + futureTermCount + (isFloor ? (\" floorLeadByte=\" + Integer.toHexString(floorLeadByte&0xff)) : \"\") + \" isLastInFloor=\" + isLastInFloor);\n      // }\n\n      // 1st pass: pack term suffix bytes into byte[] blob\n      // TODO: cutover to bulk int codec... simple64?\n\n      final boolean isLeafBlock;\n      if (lastBlockIndex < start) {\n        // This block definitely does not contain sub-blocks:\n        isLeafBlock = true;\n        //System.out.println(\"no scan true isFloor=\" + isFloor);\n      } else if (!isFloor) {\n        // This block definitely does contain at least one sub-block:\n        isLeafBlock = false;\n        //System.out.println(\"no scan false \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n      } else {\n        // Must scan up-front to see if there is a sub-block\n        boolean v = true;\n        //System.out.println(\"scan \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n        for (PendingEntry ent : slice) {\n          if (!ent.isTerm) {\n            v = false;\n            break;\n          }\n        }\n        isLeafBlock = v;\n      }\n\n      final List<FST<BytesRef>> subIndices;\n\n      int termCount;\n      if (isLeafBlock) {\n        subIndices = null;\n        for (PendingEntry ent : slice) {\n          assert ent.isTerm;\n          PendingTerm term = (PendingTerm) ent;\n          final int suffix = term.term.length - prefixLength;\n          // if (DEBUG) {\n          //   BytesRef suffixBytes = new BytesRef(suffix);\n          //   System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n          //   suffixBytes.length = suffix;\n          //   System.out.println(\"    write term suffix=\" + suffixBytes);\n          // }\n          // For leaf block we write suffix straight\n          bytesWriter.writeVInt(suffix);\n          bytesWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n          // Write term stats, to separate byte[] blob:\n          bytesWriter2.writeVInt(term.stats.docFreq);\n          if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            assert term.stats.totalTermFreq >= term.stats.docFreq;\n            bytesWriter2.writeVLong(term.stats.totalTermFreq - term.stats.docFreq);\n          }\n        }\n        termCount = length;\n      } else {\n        subIndices = new ArrayList<FST<BytesRef>>();\n        termCount = 0;\n        for (PendingEntry ent : slice) {\n          if (ent.isTerm) {\n            PendingTerm term = (PendingTerm) ent;\n            final int suffix = term.term.length - prefixLength;\n            // if (DEBUG) {\n            //   BytesRef suffixBytes = new BytesRef(suffix);\n            //   System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //   suffixBytes.length = suffix;\n            //   System.out.println(\"    write term suffix=\" + suffixBytes);\n            // }\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            bytesWriter.writeVInt(suffix<<1);\n            bytesWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n            // Write term stats, to separate byte[] blob:\n            bytesWriter2.writeVInt(term.stats.docFreq);\n            if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n              assert term.stats.totalTermFreq >= term.stats.docFreq;\n              bytesWriter2.writeVLong(term.stats.totalTermFreq - term.stats.docFreq);\n            }\n\n            termCount++;\n          } else {\n            PendingBlock block = (PendingBlock) ent;\n            final int suffix = block.prefix.length - prefixLength;\n\n            assert suffix > 0;\n\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            bytesWriter.writeVInt((suffix<<1)|1);\n            bytesWriter.writeBytes(block.prefix.bytes, prefixLength, suffix);\n            assert block.fp < startFP;\n\n            // if (DEBUG) {\n            //   BytesRef suffixBytes = new BytesRef(suffix);\n            //   System.arraycopy(block.prefix.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //   suffixBytes.length = suffix;\n            //   System.out.println(\"    write sub-block suffix=\" + toString(suffixBytes) + \" subFP=\" + block.fp + \" subCode=\" + (startFP-block.fp) + \" floor=\" + block.isFloor);\n            // }\n\n            bytesWriter.writeVLong(startFP - block.fp);\n            subIndices.add(block.index);\n          }\n        }\n\n        assert subIndices.size() != 0;\n      }\n\n      // TODO: we could block-write the term suffix pointers;\n      // this would take more space but would enable binary\n      // search on lookup\n\n      // Write suffixes byte[] blob to terms dict output:\n      out.writeVInt((int) (bytesWriter.getFilePointer() << 1) | (isLeafBlock ? 1:0));\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // Write term stats byte[] blob\n      out.writeVInt((int) bytesWriter2.getFilePointer());\n      bytesWriter2.writeTo(out);\n      bytesWriter2.reset();\n\n      // Have postings writer write block\n      postingsWriter.flushTermsBlock(futureTermCount+termCount, termCount);\n\n      // Remove slice replaced by block:\n      slice.clear();\n\n      if (lastBlockIndex >= start) {\n        if (lastBlockIndex < start+length) {\n          lastBlockIndex = start;\n        } else {\n          lastBlockIndex -= length;\n        }\n      }\n\n      // if (DEBUG) {\n      //   System.out.println(\"      fpEnd=\" + out.getFilePointer());\n      // }\n\n      return new PendingBlock(prefix, startFP, termCount != 0, isFloor, floorLeadByte, subIndices);\n    }\n\n","sourceOld":"    // Writes all entries in the pending slice as a single\n    // block: \n    private PendingBlock writeBlock(IntsRef prevTerm, int prefixLength, int indexPrefixLength, int startBackwards, int length,\n                                    int futureTermCount, boolean isFloor, int floorLeadByte, boolean isLastInFloor) throws IOException {\n\n      assert length > 0;\n\n      final int start = pending.size()-startBackwards;\n\n      assert start >= 0: \"pending.size()=\" + pending.size() + \" startBackwards=\" + startBackwards + \" length=\" + length;\n\n      final List<PendingEntry> slice = pending.subList(start, start + length);\n\n      final long startFP = out.getFilePointer();\n\n      final BytesRef prefix = new BytesRef(indexPrefixLength);\n      for(int m=0;m<indexPrefixLength;m++) {\n        prefix.bytes[m] = (byte) prevTerm.ints[m];\n      }\n      prefix.length = indexPrefixLength;\n\n      // Write block header:\n      out.writeVInt((length<<1)|(isLastInFloor ? 1:0));\n\n      // if (DEBUG) {\n      //   System.out.println(\"  writeBlock \" + (isFloor ? \"(floor) \" : \"\") + \"seg=\" + segment + \" pending.size()=\" + pending.size() + \" prefixLength=\" + prefixLength + \" indexPrefix=\" + toString(prefix) + \" entCount=\" + length + \" startFP=\" + startFP + \" futureTermCount=\" + futureTermCount + (isFloor ? (\" floorLeadByte=\" + Integer.toHexString(floorLeadByte&0xff)) : \"\") + \" isLastInFloor=\" + isLastInFloor);\n      // }\n\n      // 1st pass: pack term suffix bytes into byte[] blob\n      // TODO: cutover to bulk int codec... simple64?\n\n      final boolean isLeafBlock;\n      if (lastBlockIndex < start) {\n        // This block definitely does not contain sub-blocks:\n        isLeafBlock = true;\n        //System.out.println(\"no scan true isFloor=\" + isFloor);\n      } else if (!isFloor) {\n        // This block definitely does contain at least one sub-block:\n        isLeafBlock = false;\n        //System.out.println(\"no scan false \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n      } else {\n        // Must scan up-front to see if there is a sub-block\n        boolean v = true;\n        //System.out.println(\"scan \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n        for (PendingEntry ent : slice) {\n          if (!ent.isTerm) {\n            v = false;\n            break;\n          }\n        }\n        isLeafBlock = v;\n      }\n\n      final List<FST<BytesRef>> subIndices;\n\n      int termCount;\n      if (isLeafBlock) {\n        subIndices = null;\n        for (PendingEntry ent : slice) {\n          assert ent.isTerm;\n          PendingTerm term = (PendingTerm) ent;\n          final int suffix = term.term.length - prefixLength;\n          // if (DEBUG) {\n          //   BytesRef suffixBytes = new BytesRef(suffix);\n          //   System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n          //   suffixBytes.length = suffix;\n          //   System.out.println(\"    write term suffix=\" + suffixBytes);\n          // }\n          // For leaf block we write suffix straight\n          bytesWriter.writeVInt(suffix);\n          bytesWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n          // Write term stats, to separate byte[] blob:\n          bytesWriter2.writeVInt(term.stats.docFreq);\n          if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            assert term.stats.totalTermFreq >= term.stats.docFreq;\n            bytesWriter2.writeVLong(term.stats.totalTermFreq - term.stats.docFreq);\n          }\n        }\n        termCount = length;\n      } else {\n        subIndices = new ArrayList<FST<BytesRef>>();\n        termCount = 0;\n        for (PendingEntry ent : slice) {\n          if (ent.isTerm) {\n            PendingTerm term = (PendingTerm) ent;\n            final int suffix = term.term.length - prefixLength;\n            // if (DEBUG) {\n            //   BytesRef suffixBytes = new BytesRef(suffix);\n            //   System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //   suffixBytes.length = suffix;\n            //   System.out.println(\"    write term suffix=\" + suffixBytes);\n            // }\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            bytesWriter.writeVInt(suffix<<1);\n            bytesWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n            // Write term stats, to separate byte[] blob:\n            bytesWriter2.writeVInt(term.stats.docFreq);\n            if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n              assert term.stats.totalTermFreq >= term.stats.docFreq;\n              bytesWriter2.writeVLong(term.stats.totalTermFreq - term.stats.docFreq);\n            }\n\n            termCount++;\n          } else {\n            PendingBlock block = (PendingBlock) ent;\n            final int suffix = block.prefix.length - prefixLength;\n\n            assert suffix > 0;\n\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            bytesWriter.writeVInt((suffix<<1)|1);\n            bytesWriter.writeBytes(block.prefix.bytes, prefixLength, suffix);\n            assert block.fp < startFP;\n\n            // if (DEBUG) {\n            //   BytesRef suffixBytes = new BytesRef(suffix);\n            //   System.arraycopy(block.prefix.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //   suffixBytes.length = suffix;\n            //   System.out.println(\"    write sub-block suffix=\" + toString(suffixBytes) + \" subFP=\" + block.fp + \" subCode=\" + (startFP-block.fp) + \" floor=\" + block.isFloor);\n            // }\n\n            bytesWriter.writeVLong(startFP - block.fp);\n            subIndices.add(block.index);\n          }\n        }\n\n        assert subIndices.size() != 0;\n      }\n\n      // TODO: we could block-write the term suffix pointers;\n      // this would take more space but would enable binary\n      // search on lookup\n\n      // Write suffixes byte[] blob to terms dict output:\n      out.writeVInt((int) (bytesWriter.getFilePointer() << 1) | (isLeafBlock ? 1:0));\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // Write term stats byte[] blob\n      out.writeVInt((int) bytesWriter2.getFilePointer());\n      bytesWriter2.writeTo(out);\n      bytesWriter2.reset();\n\n      // Have postings writer write block\n      postingsWriter.flushTermsBlock(futureTermCount+termCount, termCount);\n\n      // Remove slice replaced by block:\n      slice.clear();\n\n      if (lastBlockIndex >= start) {\n        if (lastBlockIndex < start+length) {\n          lastBlockIndex = start;\n        } else {\n          lastBlockIndex -= length;\n        }\n      }\n\n      // if (DEBUG) {\n      //   System.out.println(\"      fpEnd=\" + out.getFilePointer());\n      // }\n\n      return new PendingBlock(prefix, startFP, termCount != 0, isFloor, floorLeadByte, subIndices);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.TermsWriter#writeBlock(IntsRef,int,int,int,int,int,boolean,int,boolean).mjava","sourceNew":"    // Writes all entries in the pending slice as a single\n    // block: \n    private PendingBlock writeBlock(IntsRef prevTerm, int prefixLength, int indexPrefixLength, int startBackwards, int length,\n                                    int futureTermCount, boolean isFloor, int floorLeadByte, boolean isLastInFloor) throws IOException {\n\n      assert length > 0;\n\n      final int start = pending.size()-startBackwards;\n\n      assert start >= 0: \"pending.size()=\" + pending.size() + \" startBackwards=\" + startBackwards + \" length=\" + length;\n\n      final List<PendingEntry> slice = pending.subList(start, start + length);\n\n      final long startFP = out.getFilePointer();\n\n      final BytesRef prefix = new BytesRef(indexPrefixLength);\n      for(int m=0;m<indexPrefixLength;m++) {\n        prefix.bytes[m] = (byte) prevTerm.ints[m];\n      }\n      prefix.length = indexPrefixLength;\n\n      // Write block header:\n      out.writeVInt((length<<1)|(isLastInFloor ? 1:0));\n\n      // if (DEBUG) {\n      //   System.out.println(\"  writeBlock \" + (isFloor ? \"(floor) \" : \"\") + \"seg=\" + segment + \" pending.size()=\" + pending.size() + \" prefixLength=\" + prefixLength + \" indexPrefix=\" + toString(prefix) + \" entCount=\" + length + \" startFP=\" + startFP + \" futureTermCount=\" + futureTermCount + (isFloor ? (\" floorLeadByte=\" + Integer.toHexString(floorLeadByte&0xff)) : \"\") + \" isLastInFloor=\" + isLastInFloor);\n      // }\n\n      // 1st pass: pack term suffix bytes into byte[] blob\n      // TODO: cutover to bulk int codec... simple64?\n\n      final boolean isLeafBlock;\n      if (lastBlockIndex < start) {\n        // This block definitely does not contain sub-blocks:\n        isLeafBlock = true;\n        //System.out.println(\"no scan true isFloor=\" + isFloor);\n      } else if (!isFloor) {\n        // This block definitely does contain at least one sub-block:\n        isLeafBlock = false;\n        //System.out.println(\"no scan false \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n      } else {\n        // Must scan up-front to see if there is a sub-block\n        boolean v = true;\n        //System.out.println(\"scan \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n        for (PendingEntry ent : slice) {\n          if (!ent.isTerm) {\n            v = false;\n            break;\n          }\n        }\n        isLeafBlock = v;\n      }\n\n      final List<FST<BytesRef>> subIndices;\n\n      int termCount;\n      if (isLeafBlock) {\n        subIndices = null;\n        for (PendingEntry ent : slice) {\n          assert ent.isTerm;\n          PendingTerm term = (PendingTerm) ent;\n          final int suffix = term.term.length - prefixLength;\n          // if (DEBUG) {\n          //   BytesRef suffixBytes = new BytesRef(suffix);\n          //   System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n          //   suffixBytes.length = suffix;\n          //   System.out.println(\"    write term suffix=\" + suffixBytes);\n          // }\n          // For leaf block we write suffix straight\n          bytesWriter.writeVInt(suffix);\n          bytesWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n          // Write term stats, to separate byte[] blob:\n          bytesWriter2.writeVInt(term.stats.docFreq);\n          if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            assert term.stats.totalTermFreq >= term.stats.docFreq;\n            bytesWriter2.writeVLong(term.stats.totalTermFreq - term.stats.docFreq);\n          }\n        }\n        termCount = length;\n      } else {\n        subIndices = new ArrayList<FST<BytesRef>>();\n        termCount = 0;\n        for (PendingEntry ent : slice) {\n          if (ent.isTerm) {\n            PendingTerm term = (PendingTerm) ent;\n            final int suffix = term.term.length - prefixLength;\n            // if (DEBUG) {\n            //   BytesRef suffixBytes = new BytesRef(suffix);\n            //   System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //   suffixBytes.length = suffix;\n            //   System.out.println(\"    write term suffix=\" + suffixBytes);\n            // }\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            bytesWriter.writeVInt(suffix<<1);\n            bytesWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n            // Write term stats, to separate byte[] blob:\n            bytesWriter2.writeVInt(term.stats.docFreq);\n            if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n              assert term.stats.totalTermFreq >= term.stats.docFreq;\n              bytesWriter2.writeVLong(term.stats.totalTermFreq - term.stats.docFreq);\n            }\n\n            termCount++;\n          } else {\n            PendingBlock block = (PendingBlock) ent;\n            final int suffix = block.prefix.length - prefixLength;\n\n            assert suffix > 0;\n\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            bytesWriter.writeVInt((suffix<<1)|1);\n            bytesWriter.writeBytes(block.prefix.bytes, prefixLength, suffix);\n            assert block.fp < startFP;\n\n            // if (DEBUG) {\n            //   BytesRef suffixBytes = new BytesRef(suffix);\n            //   System.arraycopy(block.prefix.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //   suffixBytes.length = suffix;\n            //   System.out.println(\"    write sub-block suffix=\" + toString(suffixBytes) + \" subFP=\" + block.fp + \" subCode=\" + (startFP-block.fp) + \" floor=\" + block.isFloor);\n            // }\n\n            bytesWriter.writeVLong(startFP - block.fp);\n            subIndices.add(block.index);\n          }\n        }\n\n        assert subIndices.size() != 0;\n      }\n\n      // TODO: we could block-write the term suffix pointers;\n      // this would take more space but would enable binary\n      // search on lookup\n\n      // Write suffixes byte[] blob to terms dict output:\n      out.writeVInt((int) (bytesWriter.getFilePointer() << 1) | (isLeafBlock ? 1:0));\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // Write term stats byte[] blob\n      out.writeVInt((int) bytesWriter2.getFilePointer());\n      bytesWriter2.writeTo(out);\n      bytesWriter2.reset();\n\n      // Have postings writer write block\n      postingsWriter.flushTermsBlock(futureTermCount+termCount, termCount);\n\n      // Remove slice replaced by block:\n      slice.clear();\n\n      if (lastBlockIndex >= start) {\n        if (lastBlockIndex < start+length) {\n          lastBlockIndex = start;\n        } else {\n          lastBlockIndex -= length;\n        }\n      }\n\n      // if (DEBUG) {\n      //   System.out.println(\"      fpEnd=\" + out.getFilePointer());\n      // }\n\n      return new PendingBlock(prefix, startFP, termCount != 0, isFloor, floorLeadByte, subIndices);\n    }\n\n","sourceOld":"    // Writes all entries in the pending slice as a single\n    // block: \n    private PendingBlock writeBlock(IntsRef prevTerm, int prefixLength, int indexPrefixLength, int startBackwards, int length,\n                                    int futureTermCount, boolean isFloor, int floorLeadByte, boolean isLastInFloor) throws IOException {\n\n      assert length > 0;\n\n      final int start = pending.size()-startBackwards;\n\n      assert start >= 0: \"pending.size()=\" + pending.size() + \" startBackwards=\" + startBackwards + \" length=\" + length;\n\n      final List<PendingEntry> slice = pending.subList(start, start + length);\n\n      final long startFP = out.getFilePointer();\n\n      final BytesRef prefix = new BytesRef(indexPrefixLength);\n      for(int m=0;m<indexPrefixLength;m++) {\n        prefix.bytes[m] = (byte) prevTerm.ints[m];\n      }\n      prefix.length = indexPrefixLength;\n\n      // Write block header:\n      out.writeVInt((length<<1)|(isLastInFloor ? 1:0));\n\n      // if (DEBUG) {\n      //   System.out.println(\"  writeBlock \" + (isFloor ? \"(floor) \" : \"\") + \"seg=\" + segment + \" pending.size()=\" + pending.size() + \" prefixLength=\" + prefixLength + \" indexPrefix=\" + toString(prefix) + \" entCount=\" + length + \" startFP=\" + startFP + \" futureTermCount=\" + futureTermCount + (isFloor ? (\" floorLeadByte=\" + Integer.toHexString(floorLeadByte&0xff)) : \"\") + \" isLastInFloor=\" + isLastInFloor);\n      // }\n\n      // 1st pass: pack term suffix bytes into byte[] blob\n      // TODO: cutover to bulk int codec... simple64?\n\n      final boolean isLeafBlock;\n      if (lastBlockIndex < start) {\n        // This block definitely does not contain sub-blocks:\n        isLeafBlock = true;\n        //System.out.println(\"no scan true isFloor=\" + isFloor);\n      } else if (!isFloor) {\n        // This block definitely does contain at least one sub-block:\n        isLeafBlock = false;\n        //System.out.println(\"no scan false \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n      } else {\n        // Must scan up-front to see if there is a sub-block\n        boolean v = true;\n        //System.out.println(\"scan \" + lastBlockIndex + \" vs start=\" + start + \" len=\" + length);\n        for (PendingEntry ent : slice) {\n          if (!ent.isTerm) {\n            v = false;\n            break;\n          }\n        }\n        isLeafBlock = v;\n      }\n\n      final List<FST<BytesRef>> subIndices;\n\n      int termCount;\n      if (isLeafBlock) {\n        subIndices = null;\n        for (PendingEntry ent : slice) {\n          assert ent.isTerm;\n          PendingTerm term = (PendingTerm) ent;\n          final int suffix = term.term.length - prefixLength;\n          // if (DEBUG) {\n          //   BytesRef suffixBytes = new BytesRef(suffix);\n          //   System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n          //   suffixBytes.length = suffix;\n          //   System.out.println(\"    write term suffix=\" + suffixBytes);\n          // }\n          // For leaf block we write suffix straight\n          bytesWriter.writeVInt(suffix);\n          bytesWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n          // Write term stats, to separate byte[] blob:\n          bytesWriter2.writeVInt(term.stats.docFreq);\n          if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            assert term.stats.totalTermFreq >= term.stats.docFreq;\n            bytesWriter2.writeVLong(term.stats.totalTermFreq - term.stats.docFreq);\n          }\n        }\n        termCount = length;\n      } else {\n        subIndices = new ArrayList<FST<BytesRef>>();\n        termCount = 0;\n        for (PendingEntry ent : slice) {\n          if (ent.isTerm) {\n            PendingTerm term = (PendingTerm) ent;\n            final int suffix = term.term.length - prefixLength;\n            // if (DEBUG) {\n            //   BytesRef suffixBytes = new BytesRef(suffix);\n            //   System.arraycopy(term.term.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //   suffixBytes.length = suffix;\n            //   System.out.println(\"    write term suffix=\" + suffixBytes);\n            // }\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            bytesWriter.writeVInt(suffix<<1);\n            bytesWriter.writeBytes(term.term.bytes, prefixLength, suffix);\n\n            // Write term stats, to separate byte[] blob:\n            bytesWriter2.writeVInt(term.stats.docFreq);\n            if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n              assert term.stats.totalTermFreq >= term.stats.docFreq;\n              bytesWriter2.writeVLong(term.stats.totalTermFreq - term.stats.docFreq);\n            }\n\n            termCount++;\n          } else {\n            PendingBlock block = (PendingBlock) ent;\n            final int suffix = block.prefix.length - prefixLength;\n\n            assert suffix > 0;\n\n            // For non-leaf block we borrow 1 bit to record\n            // if entry is term or sub-block\n            bytesWriter.writeVInt((suffix<<1)|1);\n            bytesWriter.writeBytes(block.prefix.bytes, prefixLength, suffix);\n            assert block.fp < startFP;\n\n            // if (DEBUG) {\n            //   BytesRef suffixBytes = new BytesRef(suffix);\n            //   System.arraycopy(block.prefix.bytes, prefixLength, suffixBytes.bytes, 0, suffix);\n            //   suffixBytes.length = suffix;\n            //   System.out.println(\"    write sub-block suffix=\" + toString(suffixBytes) + \" subFP=\" + block.fp + \" subCode=\" + (startFP-block.fp) + \" floor=\" + block.isFloor);\n            // }\n\n            bytesWriter.writeVLong(startFP - block.fp);\n            subIndices.add(block.index);\n          }\n        }\n\n        assert subIndices.size() != 0;\n      }\n\n      // TODO: we could block-write the term suffix pointers;\n      // this would take more space but would enable binary\n      // search on lookup\n\n      // Write suffixes byte[] blob to terms dict output:\n      out.writeVInt((int) (bytesWriter.getFilePointer() << 1) | (isLeafBlock ? 1:0));\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // Write term stats byte[] blob\n      out.writeVInt((int) bytesWriter2.getFilePointer());\n      bytesWriter2.writeTo(out);\n      bytesWriter2.reset();\n\n      // Have postings writer write block\n      postingsWriter.flushTermsBlock(futureTermCount+termCount, termCount);\n\n      // Remove slice replaced by block:\n      slice.clear();\n\n      if (lastBlockIndex >= start) {\n        if (lastBlockIndex < start+length) {\n          lastBlockIndex = start;\n        } else {\n          lastBlockIndex -= length;\n        }\n      }\n\n      // if (DEBUG) {\n      //   System.out.println(\"      fpEnd=\" + out.getFilePointer());\n      // }\n\n      return new PendingBlock(prefix, startFP, termCount != 0, isFloor, floorLeadByte, subIndices);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}