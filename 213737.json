{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#verifyChecksum(Throwable,PointWriter).mjava","commits":[{"id":"950b7a6881d14da782b60444c11295e3ec50d41a","date":1458379095,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#verifyChecksum(Throwable,PointWriter).mjava","pathOld":"/dev/null","sourceNew":"  /** Called on exception, to check whether the checksum is also corrupt in this source, and add that \n   *  information (checksum matched or didn't) as a suppressed exception. */\n  private void verifyChecksum(Throwable priorException, PointWriter writer) throws IOException {\n    // TODO: we could improve this, to always validate checksum as we recurse, if we shared left and\n    // right reader after recursing to children, and possibly within recursed children,\n    // since all together they make a single pass through the file.  But this is a sizable re-org,\n    // and would mean leaving readers (IndexInputs) open for longer:\n    if (writer instanceof OfflinePointWriter) {\n      // We are reading from a temp file; go verify the checksum:\n      String tempFileName = ((OfflinePointWriter) writer).out.getName();\n      try (ChecksumIndexInput in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE)) {\n        CodecUtil.checkFooter(in, priorException);\n      }\n    } else {\n      // We are reading from heap; nothing to add:\n      IOUtils.reThrow(priorException);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee52259641568741fbc6ecc51284431e2a36475c","date":1459331525,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#verifyChecksum(Throwable,PointWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#verifyChecksum(Throwable,PointWriter).mjava","sourceNew":"  /** Called on exception, to check whether the checksum is also corrupt in this source, and add that \n   *  information (checksum matched or didn't) as a suppressed exception. */\n  private void verifyChecksum(Throwable priorException, PointWriter writer) throws IOException {\n    // TODO: we could improve this, to always validate checksum as we recurse, if we shared left and\n    // right reader after recursing to children, and possibly within recursed children,\n    // since all together they make a single pass through the file.  But this is a sizable re-org,\n    // and would mean leaving readers (IndexInputs) open for longer:\n    if (writer instanceof OfflinePointWriter) {\n      // We are reading from a temp file; go verify the checksum:\n      String tempFileName = ((OfflinePointWriter) writer).name;\n      try (ChecksumIndexInput in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE)) {\n        CodecUtil.checkFooter(in, priorException);\n      }\n    } else {\n      // We are reading from heap; nothing to add:\n      IOUtils.reThrow(priorException);\n    }\n  }\n\n","sourceOld":"  /** Called on exception, to check whether the checksum is also corrupt in this source, and add that \n   *  information (checksum matched or didn't) as a suppressed exception. */\n  private void verifyChecksum(Throwable priorException, PointWriter writer) throws IOException {\n    // TODO: we could improve this, to always validate checksum as we recurse, if we shared left and\n    // right reader after recursing to children, and possibly within recursed children,\n    // since all together they make a single pass through the file.  But this is a sizable re-org,\n    // and would mean leaving readers (IndexInputs) open for longer:\n    if (writer instanceof OfflinePointWriter) {\n      // We are reading from a temp file; go verify the checksum:\n      String tempFileName = ((OfflinePointWriter) writer).out.getName();\n      try (ChecksumIndexInput in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE)) {\n        CodecUtil.checkFooter(in, priorException);\n      }\n    } else {\n      // We are reading from heap; nothing to add:\n      IOUtils.reThrow(priorException);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#verifyChecksum(Throwable,PointWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#verifyChecksum(Throwable,PointWriter).mjava","sourceNew":"  /** Called on exception, to check whether the checksum is also corrupt in this source, and add that\n   *  information (checksum matched or didn't) as a suppressed exception. */\n  private void verifyChecksum(Throwable priorException, PointWriter writer) throws IOException {\n    // TODO: we could improve this, to always validate checksum as we recurse, if we shared left and\n    // right reader after recursing to children, and possibly within recursed children,\n    // since all together they make a single pass through the file.  But this is a sizable re-org,\n    // and would mean leaving readers (IndexInputs) open for longer:\n    if (writer instanceof OfflinePointWriter) {\n      // We are reading from a temp file; go verify the checksum:\n      String tempFileName = ((OfflinePointWriter) writer).name;\n      try (ChecksumIndexInput in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE)) {\n        CodecUtil.checkFooter(in, priorException);\n      }\n    } else {\n      // We are reading from heap; nothing to add:\n      IOUtils.reThrow(priorException);\n    }\n  }\n\n","sourceOld":"  /** Called on exception, to check whether the checksum is also corrupt in this source, and add that \n   *  information (checksum matched or didn't) as a suppressed exception. */\n  private void verifyChecksum(Throwable priorException, PointWriter writer) throws IOException {\n    // TODO: we could improve this, to always validate checksum as we recurse, if we shared left and\n    // right reader after recursing to children, and possibly within recursed children,\n    // since all together they make a single pass through the file.  But this is a sizable re-org,\n    // and would mean leaving readers (IndexInputs) open for longer:\n    if (writer instanceof OfflinePointWriter) {\n      // We are reading from a temp file; go verify the checksum:\n      String tempFileName = ((OfflinePointWriter) writer).name;\n      try (ChecksumIndexInput in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE)) {\n        CodecUtil.checkFooter(in, priorException);\n      }\n    } else {\n      // We are reading from heap; nothing to add:\n      IOUtils.reThrow(priorException);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#verifyChecksum(Throwable,PointWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#verifyChecksum(Throwable,PointWriter).mjava","sourceNew":"  /** Called on exception, to check whether the checksum is also corrupt in this source, and add that\n   *  information (checksum matched or didn't) as a suppressed exception. */\n  private void verifyChecksum(Throwable priorException, PointWriter writer) throws IOException {\n    // TODO: we could improve this, to always validate checksum as we recurse, if we shared left and\n    // right reader after recursing to children, and possibly within recursed children,\n    // since all together they make a single pass through the file.  But this is a sizable re-org,\n    // and would mean leaving readers (IndexInputs) open for longer:\n    if (writer instanceof OfflinePointWriter) {\n      // We are reading from a temp file; go verify the checksum:\n      String tempFileName = ((OfflinePointWriter) writer).name;\n      try (ChecksumIndexInput in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE)) {\n        CodecUtil.checkFooter(in, priorException);\n      }\n    } else {\n      // We are reading from heap; nothing to add:\n      IOUtils.reThrow(priorException);\n    }\n  }\n\n","sourceOld":"  /** Called on exception, to check whether the checksum is also corrupt in this source, and add that \n   *  information (checksum matched or didn't) as a suppressed exception. */\n  private void verifyChecksum(Throwable priorException, PointWriter writer) throws IOException {\n    // TODO: we could improve this, to always validate checksum as we recurse, if we shared left and\n    // right reader after recursing to children, and possibly within recursed children,\n    // since all together they make a single pass through the file.  But this is a sizable re-org,\n    // and would mean leaving readers (IndexInputs) open for longer:\n    if (writer instanceof OfflinePointWriter) {\n      // We are reading from a temp file; go verify the checksum:\n      String tempFileName = ((OfflinePointWriter) writer).name;\n      try (ChecksumIndexInput in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE)) {\n        CodecUtil.checkFooter(in, priorException);\n      }\n    } else {\n      // We are reading from heap; nothing to add:\n      IOUtils.reThrow(priorException);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#verifyChecksum(Throwable,PointWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#verifyChecksum(Throwable,PointWriter).mjava","sourceNew":"  /** Called on exception, to check whether the checksum is also corrupt in this source, and add that\n   *  information (checksum matched or didn't) as a suppressed exception. */\n  private void verifyChecksum(Throwable priorException, PointWriter writer) throws IOException {\n    // TODO: we could improve this, to always validate checksum as we recurse, if we shared left and\n    // right reader after recursing to children, and possibly within recursed children,\n    // since all together they make a single pass through the file.  But this is a sizable re-org,\n    // and would mean leaving readers (IndexInputs) open for longer:\n    if (writer instanceof OfflinePointWriter) {\n      // We are reading from a temp file; go verify the checksum:\n      String tempFileName = ((OfflinePointWriter) writer).name;\n      try (ChecksumIndexInput in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE)) {\n        CodecUtil.checkFooter(in, priorException);\n      }\n    } else {\n      // We are reading from heap; nothing to add:\n      IOUtils.reThrow(priorException);\n    }\n  }\n\n","sourceOld":"  /** Called on exception, to check whether the checksum is also corrupt in this source, and add that \n   *  information (checksum matched or didn't) as a suppressed exception. */\n  private void verifyChecksum(Throwable priorException, PointWriter writer) throws IOException {\n    // TODO: we could improve this, to always validate checksum as we recurse, if we shared left and\n    // right reader after recursing to children, and possibly within recursed children,\n    // since all together they make a single pass through the file.  But this is a sizable re-org,\n    // and would mean leaving readers (IndexInputs) open for longer:\n    if (writer instanceof OfflinePointWriter) {\n      // We are reading from a temp file; go verify the checksum:\n      String tempFileName = ((OfflinePointWriter) writer).name;\n      try (ChecksumIndexInput in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE)) {\n        CodecUtil.checkFooter(in, priorException);\n      }\n    } else {\n      // We are reading from heap; nothing to add:\n      IOUtils.reThrow(priorException);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","date":1493374641,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#verifyChecksum(Throwable,PointWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#verifyChecksum(Throwable,PointWriter).mjava","sourceNew":"  /** Called on exception, to check whether the checksum is also corrupt in this source, and add that\n   *  information (checksum matched or didn't) as a suppressed exception. */\n  private Error verifyChecksum(Throwable priorException, PointWriter writer) throws IOException {\n    assert priorException != null;\n\n    // TODO: we could improve this, to always validate checksum as we recurse, if we shared left and\n    // right reader after recursing to children, and possibly within recursed children,\n    // since all together they make a single pass through the file.  But this is a sizable re-org,\n    // and would mean leaving readers (IndexInputs) open for longer:\n    if (writer instanceof OfflinePointWriter) {\n      // We are reading from a temp file; go verify the checksum:\n      String tempFileName = ((OfflinePointWriter) writer).name;\n      try (ChecksumIndexInput in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE)) {\n        CodecUtil.checkFooter(in, priorException);\n      }\n    }\n    \n    // We are reading from heap; nothing to add:\n    throw IOUtils.rethrowAlways(priorException);\n  }\n\n","sourceOld":"  /** Called on exception, to check whether the checksum is also corrupt in this source, and add that\n   *  information (checksum matched or didn't) as a suppressed exception. */\n  private void verifyChecksum(Throwable priorException, PointWriter writer) throws IOException {\n    // TODO: we could improve this, to always validate checksum as we recurse, if we shared left and\n    // right reader after recursing to children, and possibly within recursed children,\n    // since all together they make a single pass through the file.  But this is a sizable re-org,\n    // and would mean leaving readers (IndexInputs) open for longer:\n    if (writer instanceof OfflinePointWriter) {\n      // We are reading from a temp file; go verify the checksum:\n      String tempFileName = ((OfflinePointWriter) writer).name;\n      try (ChecksumIndexInput in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE)) {\n        CodecUtil.checkFooter(in, priorException);\n      }\n    } else {\n      // We are reading from heap; nothing to add:\n      IOUtils.reThrow(priorException);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#verifyChecksum(Throwable,PointWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#verifyChecksum(Throwable,PointWriter).mjava","sourceNew":"  /** Called on exception, to check whether the checksum is also corrupt in this source, and add that\n   *  information (checksum matched or didn't) as a suppressed exception. */\n  private Error verifyChecksum(Throwable priorException, PointWriter writer) throws IOException {\n    assert priorException != null;\n\n    // TODO: we could improve this, to always validate checksum as we recurse, if we shared left and\n    // right reader after recursing to children, and possibly within recursed children,\n    // since all together they make a single pass through the file.  But this is a sizable re-org,\n    // and would mean leaving readers (IndexInputs) open for longer:\n    if (writer instanceof OfflinePointWriter) {\n      // We are reading from a temp file; go verify the checksum:\n      String tempFileName = ((OfflinePointWriter) writer).name;\n      try (ChecksumIndexInput in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE)) {\n        CodecUtil.checkFooter(in, priorException);\n      }\n    }\n    \n    // We are reading from heap; nothing to add:\n    throw IOUtils.rethrowAlways(priorException);\n  }\n\n","sourceOld":"  /** Called on exception, to check whether the checksum is also corrupt in this source, and add that\n   *  information (checksum matched or didn't) as a suppressed exception. */\n  private void verifyChecksum(Throwable priorException, PointWriter writer) throws IOException {\n    // TODO: we could improve this, to always validate checksum as we recurse, if we shared left and\n    // right reader after recursing to children, and possibly within recursed children,\n    // since all together they make a single pass through the file.  But this is a sizable re-org,\n    // and would mean leaving readers (IndexInputs) open for longer:\n    if (writer instanceof OfflinePointWriter) {\n      // We are reading from a temp file; go verify the checksum:\n      String tempFileName = ((OfflinePointWriter) writer).name;\n      try (ChecksumIndexInput in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE)) {\n        CodecUtil.checkFooter(in, priorException);\n      }\n    } else {\n      // We are reading from heap; nothing to add:\n      IOUtils.reThrow(priorException);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#verifyChecksum(Throwable,PointWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#verifyChecksum(Throwable,PointWriter).mjava","sourceNew":"  /** Called on exception, to check whether the checksum is also corrupt in this source, and add that\n   *  information (checksum matched or didn't) as a suppressed exception. */\n  private Error verifyChecksum(Throwable priorException, PointWriter writer) throws IOException {\n    assert priorException != null;\n\n    // TODO: we could improve this, to always validate checksum as we recurse, if we shared left and\n    // right reader after recursing to children, and possibly within recursed children,\n    // since all together they make a single pass through the file.  But this is a sizable re-org,\n    // and would mean leaving readers (IndexInputs) open for longer:\n    if (writer instanceof OfflinePointWriter) {\n      // We are reading from a temp file; go verify the checksum:\n      String tempFileName = ((OfflinePointWriter) writer).name;\n      if (tempDir.getCreatedFiles().contains(tempFileName)) {\n        try (ChecksumIndexInput in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE)) {\n          CodecUtil.checkFooter(in, priorException);\n        }\n      }\n    }\n    \n    // We are reading from heap; nothing to add:\n    throw IOUtils.rethrowAlways(priorException);\n  }\n\n","sourceOld":"  /** Called on exception, to check whether the checksum is also corrupt in this source, and add that\n   *  information (checksum matched or didn't) as a suppressed exception. */\n  private Error verifyChecksum(Throwable priorException, PointWriter writer) throws IOException {\n    assert priorException != null;\n\n    // TODO: we could improve this, to always validate checksum as we recurse, if we shared left and\n    // right reader after recursing to children, and possibly within recursed children,\n    // since all together they make a single pass through the file.  But this is a sizable re-org,\n    // and would mean leaving readers (IndexInputs) open for longer:\n    if (writer instanceof OfflinePointWriter) {\n      // We are reading from a temp file; go verify the checksum:\n      String tempFileName = ((OfflinePointWriter) writer).name;\n      try (ChecksumIndexInput in = tempDir.openChecksumInput(tempFileName, IOContext.READONCE)) {\n        CodecUtil.checkFooter(in, priorException);\n      }\n    }\n    \n    // We are reading from heap; nothing to add:\n    throw IOUtils.rethrowAlways(priorException);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"ee52259641568741fbc6ecc51284431e2a36475c":["950b7a6881d14da782b60444c11295e3ec50d41a"],"950b7a6881d14da782b60444c11295e3ec50d41a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["ee52259641568741fbc6ecc51284431e2a36475c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ee52259641568741fbc6ecc51284431e2a36475c","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["ee52259641568741fbc6ecc51284431e2a36475c","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["e9017cf144952056066919f1ebc7897ff9bd71b1","78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["950b7a6881d14da782b60444c11295e3ec50d41a"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ee52259641568741fbc6ecc51284431e2a36475c":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"950b7a6881d14da782b60444c11295e3ec50d41a":["ee52259641568741fbc6ecc51284431e2a36475c"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["e9017cf144952056066919f1ebc7897ff9bd71b1","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}