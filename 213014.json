{"path":"contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher#search(String).mjava","commits":[{"id":"690dd789ebb9223a3c8689bf1f9a2da065db599f","date":1110333133,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher#search(String).mjava","pathOld":"/dev/null","sourceNew":"    /**\r\n     * Run a new search.\r\n     *\r\n     * @param searchString Any valid lucene search string\r\n     */\r\n    public void search(String searchString){\r\n\r\n        //if search string is null or empty, clear the search == search all\r\n        if (searchString == null || searchString.equals(\"\")){\r\n            clearSearchingState();\r\n            fireContentsChanged(this, 0, getSize());\r\n            return;\r\n        }\r\n\r\n\r\n        try {\r\n            //cache search String\r\n            this.searchString = searchString;\r\n\r\n            //make a new index searcher with the in memory (RAM) index.\r\n            IndexSearcher is = new IndexSearcher(directory);\r\n\r\n            //make an array of fields - one for each column\r\n            String[] fields = {FIELD_NAME};\r\n\r\n            //build a query based on the fields, searchString and cached analyzer\r\n            //NOTE: This is an area for improvement since the MultiFieldQueryParser\r\n            // has some weirdness.\r\n            Query query = MultiFieldQueryParser.parse(searchString, fields, analyzer);\r\n            //run the search\r\n            Hits hits = is.search(query);\r\n            //reset this list model with the new results\r\n            resetSearchResults(hits);\r\n        } catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n        //notify all listeners that the list has been changed\r\n        fireContentsChanged(this, 0, getSize());\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d084a2207d6589b283810431b6373c7a44fbd5b","date":1142958370,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher#search(String).mjava","pathOld":"contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher#search(String).mjava","sourceNew":"    /**\r\n     * Run a new search.\r\n     *\r\n     * @param searchString Any valid lucene search string\r\n     */\r\n    public void search(String searchString){\r\n\r\n        //if search string is null or empty, clear the search == search all\r\n        if (searchString == null || searchString.equals(\"\")){\r\n            clearSearchingState();\r\n            fireContentsChanged(this, 0, getSize());\r\n            return;\r\n        }\r\n\r\n\r\n        try {\r\n            //cache search String\r\n            this.searchString = searchString;\r\n\r\n            //make a new index searcher with the in memory (RAM) index.\r\n            IndexSearcher is = new IndexSearcher(directory);\r\n\r\n            //make an array of fields - one for each column\r\n            String[] fields = {FIELD_NAME};\r\n\r\n            //build a query based on the fields, searchString and cached analyzer\r\n            //NOTE: This is an area for improvement since the MultiFieldQueryParser\r\n            // has some weirdness.\r\n            MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, analyzer);\r\n            Query query =parser.parse(searchString);\r\n            //run the search\r\n            Hits hits = is.search(query);\r\n            //reset this list model with the new results\r\n            resetSearchResults(hits);\r\n        } catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n        //notify all listeners that the list has been changed\r\n        fireContentsChanged(this, 0, getSize());\r\n    }\r\n\n","sourceOld":"    /**\r\n     * Run a new search.\r\n     *\r\n     * @param searchString Any valid lucene search string\r\n     */\r\n    public void search(String searchString){\r\n\r\n        //if search string is null or empty, clear the search == search all\r\n        if (searchString == null || searchString.equals(\"\")){\r\n            clearSearchingState();\r\n            fireContentsChanged(this, 0, getSize());\r\n            return;\r\n        }\r\n\r\n\r\n        try {\r\n            //cache search String\r\n            this.searchString = searchString;\r\n\r\n            //make a new index searcher with the in memory (RAM) index.\r\n            IndexSearcher is = new IndexSearcher(directory);\r\n\r\n            //make an array of fields - one for each column\r\n            String[] fields = {FIELD_NAME};\r\n\r\n            //build a query based on the fields, searchString and cached analyzer\r\n            //NOTE: This is an area for improvement since the MultiFieldQueryParser\r\n            // has some weirdness.\r\n            Query query = MultiFieldQueryParser.parse(searchString, fields, analyzer);\r\n            //run the search\r\n            Hits hits = is.search(query);\r\n            //reset this list model with the new results\r\n            resetSearchResults(hits);\r\n        } catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n        //notify all listeners that the list has been changed\r\n        fireContentsChanged(this, 0, getSize());\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher#search(String).mjava","pathOld":"contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher#search(String).mjava","sourceNew":"    /**\n     * Run a new search.\n     *\n     * @param searchString Any valid lucene search string\n     */\n    public void search(String searchString){\n\n        //if search string is null or empty, clear the search == search all\n        if (searchString == null || searchString.equals(\"\")){\n            clearSearchingState();\n            fireContentsChanged(this, 0, getSize());\n            return;\n        }\n\n\n        try {\n            //cache search String\n            this.searchString = searchString;\n\n            //make a new index searcher with the in memory (RAM) index.\n            IndexSearcher is = new IndexSearcher(directory);\n\n            //make an array of fields - one for each column\n            String[] fields = {FIELD_NAME};\n\n            //build a query based on the fields, searchString and cached analyzer\n            //NOTE: This is an area for improvement since the MultiFieldQueryParser\n            // has some weirdness.\n            MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, analyzer);\n            Query query =parser.parse(searchString);\n            //run the search\n            Hits hits = is.search(query);\n            //reset this list model with the new results\n            resetSearchResults(hits);\n        } catch (Exception e){\n            e.printStackTrace();\n        }\n\n        //notify all listeners that the list has been changed\n        fireContentsChanged(this, 0, getSize());\n    }\n\n","sourceOld":"    /**\r\n     * Run a new search.\r\n     *\r\n     * @param searchString Any valid lucene search string\r\n     */\r\n    public void search(String searchString){\r\n\r\n        //if search string is null or empty, clear the search == search all\r\n        if (searchString == null || searchString.equals(\"\")){\r\n            clearSearchingState();\r\n            fireContentsChanged(this, 0, getSize());\r\n            return;\r\n        }\r\n\r\n\r\n        try {\r\n            //cache search String\r\n            this.searchString = searchString;\r\n\r\n            //make a new index searcher with the in memory (RAM) index.\r\n            IndexSearcher is = new IndexSearcher(directory);\r\n\r\n            //make an array of fields - one for each column\r\n            String[] fields = {FIELD_NAME};\r\n\r\n            //build a query based on the fields, searchString and cached analyzer\r\n            //NOTE: This is an area for improvement since the MultiFieldQueryParser\r\n            // has some weirdness.\r\n            MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, analyzer);\r\n            Query query =parser.parse(searchString);\r\n            //run the search\r\n            Hits hits = is.search(query);\r\n            //reset this list model with the new results\r\n            resetSearchResults(hits);\r\n        } catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n\r\n        //notify all listeners that the list has been changed\r\n        fireContentsChanged(this, 0, getSize());\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher#search(String).mjava","pathOld":"contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher#search(String).mjava","sourceNew":"    /**\n     * Run a new search.\n     *\n     * @param searchString Any valid lucene search string\n     */\n    public void search(String searchString){\n\n        //if search string is null or empty, clear the search == search all\n        if (searchString == null || searchString.equals(\"\")){\n            clearSearchingState();\n            fireContentsChanged(this, 0, getSize());\n            return;\n        }\n\n\n        try {\n            //cache search String\n            this.searchString = searchString;\n\n            //make a new index searcher with the in memory (RAM) index.\n            IndexSearcher is = new IndexSearcher(directory, true);\n\n            //make an array of fields - one for each column\n            String[] fields = {FIELD_NAME};\n\n            //build a query based on the fields, searchString and cached analyzer\n            //NOTE: This is an area for improvement since the MultiFieldQueryParser\n            // has some weirdness.\n            MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, analyzer);\n            Query query =parser.parse(searchString);\n            //run the search\n            Hits hits = is.search(query);\n            //reset this list model with the new results\n            resetSearchResults(hits);\n        } catch (Exception e){\n            e.printStackTrace();\n        }\n\n        //notify all listeners that the list has been changed\n        fireContentsChanged(this, 0, getSize());\n    }\n\n","sourceOld":"    /**\n     * Run a new search.\n     *\n     * @param searchString Any valid lucene search string\n     */\n    public void search(String searchString){\n\n        //if search string is null or empty, clear the search == search all\n        if (searchString == null || searchString.equals(\"\")){\n            clearSearchingState();\n            fireContentsChanged(this, 0, getSize());\n            return;\n        }\n\n\n        try {\n            //cache search String\n            this.searchString = searchString;\n\n            //make a new index searcher with the in memory (RAM) index.\n            IndexSearcher is = new IndexSearcher(directory);\n\n            //make an array of fields - one for each column\n            String[] fields = {FIELD_NAME};\n\n            //build a query based on the fields, searchString and cached analyzer\n            //NOTE: This is an area for improvement since the MultiFieldQueryParser\n            // has some weirdness.\n            MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, analyzer);\n            Query query =parser.parse(searchString);\n            //run the search\n            Hits hits = is.search(query);\n            //reset this list model with the new results\n            resetSearchResults(hits);\n        } catch (Exception e){\n            e.printStackTrace();\n        }\n\n        //notify all listeners that the list has been changed\n        fireContentsChanged(this, 0, getSize());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher#search(String).mjava","pathOld":"contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher#search(String).mjava","sourceNew":"    /**\n     * Run a new search.\n     *\n     * @param searchString Any valid lucene search string\n     */\n    public void search(String searchString){\n\n        //if search string is null or empty, clear the search == search all\n        if (searchString == null || searchString.equals(\"\")){\n            clearSearchingState();\n            fireContentsChanged(this, 0, getSize());\n            return;\n        }\n\n\n        try {\n            //cache search String\n            this.searchString = searchString;\n\n            //make a new index searcher with the in memory (RAM) index.\n            IndexSearcher is = new IndexSearcher(directory, true);\n\n            //make an array of fields - one for each column\n            String[] fields = {FIELD_NAME};\n\n            //build a query based on the fields, searchString and cached analyzer\n            //NOTE: This is an area for improvement since the MultiFieldQueryParser\n            // has some weirdness.\n            MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, analyzer);\n            Query query =parser.parse(searchString);\n            //reset this list model with the new results\n            resetSearchResults(is, query);\n        } catch (Exception e){\n            e.printStackTrace();\n        }\n\n        //notify all listeners that the list has been changed\n        fireContentsChanged(this, 0, getSize());\n    }\n\n","sourceOld":"    /**\n     * Run a new search.\n     *\n     * @param searchString Any valid lucene search string\n     */\n    public void search(String searchString){\n\n        //if search string is null or empty, clear the search == search all\n        if (searchString == null || searchString.equals(\"\")){\n            clearSearchingState();\n            fireContentsChanged(this, 0, getSize());\n            return;\n        }\n\n\n        try {\n            //cache search String\n            this.searchString = searchString;\n\n            //make a new index searcher with the in memory (RAM) index.\n            IndexSearcher is = new IndexSearcher(directory, true);\n\n            //make an array of fields - one for each column\n            String[] fields = {FIELD_NAME};\n\n            //build a query based on the fields, searchString and cached analyzer\n            //NOTE: This is an area for improvement since the MultiFieldQueryParser\n            // has some weirdness.\n            MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, analyzer);\n            Query query =parser.parse(searchString);\n            //run the search\n            Hits hits = is.search(query);\n            //reset this list model with the new results\n            resetSearchResults(hits);\n        } catch (Exception e){\n            e.printStackTrace();\n        }\n\n        //notify all listeners that the list has been changed\n        fireContentsChanged(this, 0, getSize());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher#search(String).mjava","pathOld":"contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher#search(String).mjava","sourceNew":"    /**\n     * Run a new search.\n     *\n     * @param searchString Any valid lucene search string\n     */\n    public void search(String searchString){\n\n        //if search string is null or empty, clear the search == search all\n        if (searchString == null || searchString.equals(\"\")){\n            clearSearchingState();\n            fireContentsChanged(this, 0, getSize());\n            return;\n        }\n\n\n        try {\n            //cache search String\n            this.searchString = searchString;\n\n            //make a new index searcher with the in memory (RAM) index.\n            IndexSearcher is = new IndexSearcher(directory, true);\n\n            //make an array of fields - one for each column\n            String[] fields = {FIELD_NAME};\n\n            //build a query based on the fields, searchString and cached analyzer\n            //NOTE: This is an area for improvement since the MultiFieldQueryParser\n            // has some weirdness.\n            MultiFieldQueryParser parser = new MultiFieldQueryParser(Version.LUCENE_CURRENT, fields, analyzer);\n            Query query =parser.parse(searchString);\n            //reset this list model with the new results\n            resetSearchResults(is, query);\n        } catch (Exception e){\n            e.printStackTrace();\n        }\n\n        //notify all listeners that the list has been changed\n        fireContentsChanged(this, 0, getSize());\n    }\n\n","sourceOld":"    /**\n     * Run a new search.\n     *\n     * @param searchString Any valid lucene search string\n     */\n    public void search(String searchString){\n\n        //if search string is null or empty, clear the search == search all\n        if (searchString == null || searchString.equals(\"\")){\n            clearSearchingState();\n            fireContentsChanged(this, 0, getSize());\n            return;\n        }\n\n\n        try {\n            //cache search String\n            this.searchString = searchString;\n\n            //make a new index searcher with the in memory (RAM) index.\n            IndexSearcher is = new IndexSearcher(directory, true);\n\n            //make an array of fields - one for each column\n            String[] fields = {FIELD_NAME};\n\n            //build a query based on the fields, searchString and cached analyzer\n            //NOTE: This is an area for improvement since the MultiFieldQueryParser\n            // has some weirdness.\n            MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, analyzer);\n            Query query =parser.parse(searchString);\n            //reset this list model with the new results\n            resetSearchResults(is, query);\n        } catch (Exception e){\n            e.printStackTrace();\n        }\n\n        //notify all listeners that the list has been changed\n        fireContentsChanged(this, 0, getSize());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher#search(String).mjava","pathOld":"contrib/swing/src/java/org/apache/lucene/swing/models/ListSearcher#search(String).mjava","sourceNew":"    /**\n     * Run a new search.\n     *\n     * @param searchString Any valid lucene search string\n     */\n    public void search(String searchString){\n\n        //if search string is null or empty, clear the search == search all\n        if (searchString == null || searchString.equals(\"\")){\n            clearSearchingState();\n            fireContentsChanged(this, 0, getSize());\n            return;\n        }\n\n\n        try {\n            //cache search String\n            this.searchString = searchString;\n\n            //make a new index searcher with the in memory (RAM) index.\n            IndexSearcher is = new IndexSearcher(directory, true);\n\n            //make an array of fields - one for each column\n            String[] fields = {FIELD_NAME};\n\n            //build a query based on the fields, searchString and cached analyzer\n            //NOTE: This is an area for improvement since the MultiFieldQueryParser\n            // has some weirdness.\n            MultiFieldQueryParser parser = new MultiFieldQueryParser(Version.LUCENE_CURRENT, fields, analyzer);\n            Query query =parser.parse(searchString);\n            //reset this list model with the new results\n            resetSearchResults(is, query);\n        } catch (Exception e){\n            e.printStackTrace();\n        }\n\n        //notify all listeners that the list has been changed\n        fireContentsChanged(this, 0, getSize());\n    }\n\n","sourceOld":"    /**\n     * Run a new search.\n     *\n     * @param searchString Any valid lucene search string\n     */\n    public void search(String searchString){\n\n        //if search string is null or empty, clear the search == search all\n        if (searchString == null || searchString.equals(\"\")){\n            clearSearchingState();\n            fireContentsChanged(this, 0, getSize());\n            return;\n        }\n\n\n        try {\n            //cache search String\n            this.searchString = searchString;\n\n            //make a new index searcher with the in memory (RAM) index.\n            IndexSearcher is = new IndexSearcher(directory, true);\n\n            //make an array of fields - one for each column\n            String[] fields = {FIELD_NAME};\n\n            //build a query based on the fields, searchString and cached analyzer\n            //NOTE: This is an area for improvement since the MultiFieldQueryParser\n            // has some weirdness.\n            MultiFieldQueryParser parser = new MultiFieldQueryParser(Version.LUCENE_CURRENT, fields, analyzer);\n            Query query =parser.parse(searchString);\n            //reset this list model with the new results\n            resetSearchResults(is, query);\n        } catch (Exception e){\n            e.printStackTrace();\n        }\n\n        //notify all listeners that the list has been changed\n        fireContentsChanged(this, 0, getSize());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"690dd789ebb9223a3c8689bf1f9a2da065db599f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d084a2207d6589b283810431b6373c7a44fbd5b":["690dd789ebb9223a3c8689bf1f9a2da065db599f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["2d084a2207d6589b283810431b6373c7a44fbd5b"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["4256bc1b3c94786287ccdfc751230374521843cf"],"4256bc1b3c94786287ccdfc751230374521843cf":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ba1116b3450a9c1642c89445d131b37344055245"],"ba1116b3450a9c1642c89445d131b37344055245":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"]},"commit2Childs":{"690dd789ebb9223a3c8689bf1f9a2da065db599f":["2d084a2207d6589b283810431b6373c7a44fbd5b"],"2d084a2207d6589b283810431b6373c7a44fbd5b":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["690dd789ebb9223a3c8689bf1f9a2da065db599f"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["4256bc1b3c94786287ccdfc751230374521843cf"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["ba1116b3450a9c1642c89445d131b37344055245"],"4256bc1b3c94786287ccdfc751230374521843cf":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba1116b3450a9c1642c89445d131b37344055245":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}