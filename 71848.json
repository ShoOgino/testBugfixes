{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"f18d4e1cdc7330101ca433af5e8564dfd894f2bf","date":1379041877,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  /** <code>context</code> must contain a key <code>\"valuesCache\"</code> which is a <code>Map&lt;String,FunctionValues&gt;</code>. */\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    ValueSource source;\n    Map<String, FunctionValues> valuesCache = (Map<String, FunctionValues>)context.get(\"valuesCache\");\n    if (valuesCache == null) {\n      throw new NullPointerException();\n    }\n    FunctionValues[] externalValues = new FunctionValues[expression.externals.length];\n\n    for (int i = 0; i < expression.externals.length; ++i) {\n      String externalName = expression.externals[i];\n      FunctionValues values = valuesCache.get(externalName);\n      if (values == null) {\n        source = bindings.getValueSource(externalName);\n        values = source.getValues(context, readerContext);\n        if (values == null) {\n          throw new RuntimeException(\"Internal error. External (\" + externalName + \") does not exist.\");\n        }\n        valuesCache.put(externalName, values);\n      }\n      externalValues[i] = values;\n    }\n\n    return new ExpressionFunctionValues(expression, externalValues);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a397491f6601f7c45bc425f45e95c41c3a6d1ca3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37d6b37d9aac54bcb228187c93c3ede63a974996","date":1379049687,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  /** <code>context</code> must contain a key <code>\"valuesCache\"</code> which is a <code>Map&lt;String,FunctionValues&gt;</code>. */\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    ValueSource source;\n    Map<String, FunctionValues> valuesCache = (Map<String, FunctionValues>)context.get(\"valuesCache\");\n    if (valuesCache == null) {\n      throw new NullPointerException();\n    }\n    FunctionValues[] externalValues = new FunctionValues[expression.variables.length];\n\n    for (int i = 0; i < expression.variables.length; ++i) {\n      String externalName = expression.variables[i];\n      FunctionValues values = valuesCache.get(externalName);\n      if (values == null) {\n        source = bindings.getValueSource(externalName);\n        values = source.getValues(context, readerContext);\n        if (values == null) {\n          throw new RuntimeException(\"Internal error. External (\" + externalName + \") does not exist.\");\n        }\n        valuesCache.put(externalName, values);\n      }\n      externalValues[i] = values;\n    }\n\n    return new ExpressionFunctionValues(expression, externalValues);\n  }\n\n","sourceOld":"  /** <code>context</code> must contain a key <code>\"valuesCache\"</code> which is a <code>Map&lt;String,FunctionValues&gt;</code>. */\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    ValueSource source;\n    Map<String, FunctionValues> valuesCache = (Map<String, FunctionValues>)context.get(\"valuesCache\");\n    if (valuesCache == null) {\n      throw new NullPointerException();\n    }\n    FunctionValues[] externalValues = new FunctionValues[expression.externals.length];\n\n    for (int i = 0; i < expression.externals.length; ++i) {\n      String externalName = expression.externals[i];\n      FunctionValues values = valuesCache.get(externalName);\n      if (values == null) {\n        source = bindings.getValueSource(externalName);\n        values = source.getValues(context, readerContext);\n        if (values == null) {\n          throw new RuntimeException(\"Internal error. External (\" + externalName + \") does not exist.\");\n        }\n        valuesCache.put(externalName, values);\n      }\n      externalValues[i] = values;\n    }\n\n    return new ExpressionFunctionValues(expression, externalValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  /** <code>context</code> must contain a key <code>\"valuesCache\"</code> which is a <code>Map&lt;String,FunctionValues&gt;</code>. */\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    ValueSource source;\n    Map<String, FunctionValues> valuesCache = (Map<String, FunctionValues>)context.get(\"valuesCache\");\n    if (valuesCache == null) {\n      throw new NullPointerException();\n    }\n    FunctionValues[] externalValues = new FunctionValues[expression.variables.length];\n\n    for (int i = 0; i < expression.variables.length; ++i) {\n      String externalName = expression.variables[i];\n      FunctionValues values = valuesCache.get(externalName);\n      if (values == null) {\n        source = bindings.getValueSource(externalName);\n        values = source.getValues(context, readerContext);\n        if (values == null) {\n          throw new RuntimeException(\"Internal error. External (\" + externalName + \") does not exist.\");\n        }\n        valuesCache.put(externalName, values);\n      }\n      externalValues[i] = values;\n    }\n\n    return new ExpressionFunctionValues(expression, externalValues);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb","date":1379734663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Map<String, FunctionValues> valuesCache = (Map<String, FunctionValues>)context.get(\"valuesCache\");\n    if (valuesCache == null) {\n      valuesCache = new HashMap<String, FunctionValues>();\n      context = new HashMap(context);\n      context.put(\"valuesCache\", valuesCache);\n    }\n    FunctionValues[] externalValues = new FunctionValues[expression.variables.length];\n\n    for (int i = 0; i < variables.length; ++i) {\n      String externalName = expression.variables[i];\n      FunctionValues values = valuesCache.get(externalName);\n      if (values == null) {\n        values = variables[i].getValues(context, readerContext);\n        if (values == null) {\n          throw new RuntimeException(\"Internal error. External (\" + externalName + \") does not exist.\");\n        }\n        valuesCache.put(externalName, values);\n      }\n      externalValues[i] = values;\n    }\n\n    return new ExpressionFunctionValues(expression, externalValues);\n  }\n\n","sourceOld":"  /** <code>context</code> must contain a key <code>\"valuesCache\"</code> which is a <code>Map&lt;String,FunctionValues&gt;</code>. */\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    ValueSource source;\n    Map<String, FunctionValues> valuesCache = (Map<String, FunctionValues>)context.get(\"valuesCache\");\n    if (valuesCache == null) {\n      throw new NullPointerException();\n    }\n    FunctionValues[] externalValues = new FunctionValues[expression.variables.length];\n\n    for (int i = 0; i < expression.variables.length; ++i) {\n      String externalName = expression.variables[i];\n      FunctionValues values = valuesCache.get(externalName);\n      if (values == null) {\n        source = bindings.getValueSource(externalName);\n        values = source.getValues(context, readerContext);\n        if (values == null) {\n          throw new RuntimeException(\"Internal error. External (\" + externalName + \") does not exist.\");\n        }\n        valuesCache.put(externalName, values);\n      }\n      externalValues[i] = values;\n    }\n\n    return new ExpressionFunctionValues(expression, externalValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a397491f6601f7c45bc425f45e95c41c3a6d1ca3","date":1380651240,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Map<String, FunctionValues> valuesCache = (Map<String, FunctionValues>)context.get(\"valuesCache\");\n    if (valuesCache == null) {\n      valuesCache = new HashMap<String, FunctionValues>();\n      context = new HashMap(context);\n      context.put(\"valuesCache\", valuesCache);\n    }\n    FunctionValues[] externalValues = new FunctionValues[expression.variables.length];\n\n    for (int i = 0; i < variables.length; ++i) {\n      String externalName = expression.variables[i];\n      FunctionValues values = valuesCache.get(externalName);\n      if (values == null) {\n        values = variables[i].getValues(context, readerContext);\n        if (values == null) {\n          throw new RuntimeException(\"Internal error. External (\" + externalName + \") does not exist.\");\n        }\n        valuesCache.put(externalName, values);\n      }\n      externalValues[i] = values;\n    }\n\n    return new ExpressionFunctionValues(this, expression, externalValues);\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Map<String, FunctionValues> valuesCache = (Map<String, FunctionValues>)context.get(\"valuesCache\");\n    if (valuesCache == null) {\n      valuesCache = new HashMap<String, FunctionValues>();\n      context = new HashMap(context);\n      context.put(\"valuesCache\", valuesCache);\n    }\n    FunctionValues[] externalValues = new FunctionValues[expression.variables.length];\n\n    for (int i = 0; i < variables.length; ++i) {\n      String externalName = expression.variables[i];\n      FunctionValues values = valuesCache.get(externalName);\n      if (values == null) {\n        values = variables[i].getValues(context, readerContext);\n        if (values == null) {\n          throw new RuntimeException(\"Internal error. External (\" + externalName + \") does not exist.\");\n        }\n        valuesCache.put(externalName, values);\n      }\n      externalValues[i] = values;\n    }\n\n    return new ExpressionFunctionValues(expression, externalValues);\n  }\n\n","bugFix":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Map<String, FunctionValues> valuesCache = (Map<String, FunctionValues>)context.get(\"valuesCache\");\n    if (valuesCache == null) {\n      valuesCache = new HashMap<>();\n      context = new HashMap(context);\n      context.put(\"valuesCache\", valuesCache);\n    }\n    FunctionValues[] externalValues = new FunctionValues[expression.variables.length];\n\n    for (int i = 0; i < variables.length; ++i) {\n      String externalName = expression.variables[i];\n      FunctionValues values = valuesCache.get(externalName);\n      if (values == null) {\n        values = variables[i].getValues(context, readerContext);\n        if (values == null) {\n          throw new RuntimeException(\"Internal error. External (\" + externalName + \") does not exist.\");\n        }\n        valuesCache.put(externalName, values);\n      }\n      externalValues[i] = values;\n    }\n\n    return new ExpressionFunctionValues(this, expression, externalValues);\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Map<String, FunctionValues> valuesCache = (Map<String, FunctionValues>)context.get(\"valuesCache\");\n    if (valuesCache == null) {\n      valuesCache = new HashMap<String, FunctionValues>();\n      context = new HashMap(context);\n      context.put(\"valuesCache\", valuesCache);\n    }\n    FunctionValues[] externalValues = new FunctionValues[expression.variables.length];\n\n    for (int i = 0; i < variables.length; ++i) {\n      String externalName = expression.variables[i];\n      FunctionValues values = valuesCache.get(externalName);\n      if (values == null) {\n        values = variables[i].getValues(context, readerContext);\n        if (values == null) {\n          throw new RuntimeException(\"Internal error. External (\" + externalName + \") does not exist.\");\n        }\n        valuesCache.put(externalName, values);\n      }\n      externalValues[i] = values;\n    }\n\n    return new ExpressionFunctionValues(this, expression, externalValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Map<String, FunctionValues> valuesCache = (Map<String, FunctionValues>)context.get(\"valuesCache\");\n    if (valuesCache == null) {\n      valuesCache = new HashMap<>();\n      context = new HashMap(context);\n      context.put(\"valuesCache\", valuesCache);\n    }\n    FunctionValues[] externalValues = new FunctionValues[expression.variables.length];\n\n    for (int i = 0; i < variables.length; ++i) {\n      String externalName = expression.variables[i];\n      FunctionValues values = valuesCache.get(externalName);\n      if (values == null) {\n        values = variables[i].getValues(context, readerContext);\n        if (values == null) {\n          throw new RuntimeException(\"Internal error. External (\" + externalName + \") does not exist.\");\n        }\n        valuesCache.put(externalName, values);\n      }\n      externalValues[i] = values;\n    }\n\n    return new ExpressionFunctionValues(this, expression, externalValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a397491f6601f7c45bc425f45e95c41c3a6d1ca3"],"c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37d6b37d9aac54bcb228187c93c3ede63a974996":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a397491f6601f7c45bc425f45e95c41c3a6d1ca3":["c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","37d6b37d9aac54bcb228187c93c3ede63a974996"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb":["a397491f6601f7c45bc425f45e95c41c3a6d1ca3"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["37d6b37d9aac54bcb228187c93c3ede63a974996"],"37d6b37d9aac54bcb228187c93c3ede63a974996":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"a397491f6601f7c45bc425f45e95c41c3a6d1ca3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}