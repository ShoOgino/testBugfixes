{"path":"solr/src/test/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object).mjava","commits":[{"id":"7d5f59e6aef470c175c845a8c96ea65f20ae4c1f","date":1282318824,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n  public static Object fromJSON(String json) {\r\n    try {\r\n      Object out = ObjectBuilder.fromJSON(json);\r\n    } finally {\r\n\r\n  }\r\n  **/\r\n  \r\n  public static String matchObj(String path, Object input, Object expected) throws Exception {\r\n    CollectionTester tester = new CollectionTester(input);\r\n    if (!tester.seek(path)) {\r\n      return \"Path not found: \" + path;\r\n    }\r\n    if (expected != null && !tester.match(expected)) {\r\n      return tester.err + \" @ \" + tester.getPath();\r\n    }\r\n    return null;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","date":1286051536,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object).mjava","pathOld":"solr/src/test/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object).mjava","sourceNew":"  /**\n  public static Object fromJSON(String json) {\n    try {\n      Object out = ObjectBuilder.fromJSON(json);\n    } finally {\n\n  }\n  **/\n  \n  public static String matchObj(String path, Object input, Object expected) throws Exception {\n    CollectionTester tester = new CollectionTester(input);\n    if (!tester.seek(path)) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && !tester.match(expected)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\r\n  public static Object fromJSON(String json) {\r\n    try {\r\n      Object out = ObjectBuilder.fromJSON(json);\r\n    } finally {\r\n\r\n  }\r\n  **/\r\n  \r\n  public static String matchObj(String path, Object input, Object expected) throws Exception {\r\n    CollectionTester tester = new CollectionTester(input);\r\n    if (!tester.seek(path)) {\r\n      return \"Path not found: \" + path;\r\n    }\r\n    if (expected != null && !tester.match(expected)) {\r\n      return tester.err + \" @ \" + tester.getPath();\r\n    }\r\n    return null;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f77715295363a02fda389e7060324a0a12313ad","date":1287326573,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object).mjava","pathOld":"solr/src/test/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object).mjava","sourceNew":"  /**\n  public static Object fromJSON(String json) {\n    try {\n      Object out = ObjectBuilder.fromJSON(json);\n    } finally {\n\n  }\n  **/\n  \n  public static String matchObj(String path, Object input, Object expected) throws Exception {\n    CollectionTester tester = new CollectionTester(input);\n    boolean reversed = path.startsWith(\"!\");\n    String positivePath = reversed ? path.substring(1) : path;\n    if (!tester.seek(positivePath) ^ reversed) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && (!tester.match(expected) ^ reversed)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n  public static Object fromJSON(String json) {\n    try {\n      Object out = ObjectBuilder.fromJSON(json);\n    } finally {\n\n  }\n  **/\n  \n  public static String matchObj(String path, Object input, Object expected) throws Exception {\n    CollectionTester tester = new CollectionTester(input);\n    if (!tester.seek(path)) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && !tester.match(expected)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object).mjava","pathOld":"solr/src/test/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object).mjava","sourceNew":"  /**\n  public static Object fromJSON(String json) {\n    try {\n      Object out = ObjectBuilder.fromJSON(json);\n    } finally {\n\n  }\n  **/\n  \n  public static String matchObj(String path, Object input, Object expected) throws Exception {\n    CollectionTester tester = new CollectionTester(input);\n    boolean reversed = path.startsWith(\"!\");\n    String positivePath = reversed ? path.substring(1) : path;\n    if (!tester.seek(positivePath) ^ reversed) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && (!tester.match(expected) ^ reversed)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n  public static Object fromJSON(String json) {\n    try {\n      Object out = ObjectBuilder.fromJSON(json);\n    } finally {\n\n  }\n  **/\n  \n  public static String matchObj(String path, Object input, Object expected) throws Exception {\n    CollectionTester tester = new CollectionTester(input);\n    if (!tester.seek(path)) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && !tester.match(expected)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object).mjava","pathOld":"/dev/null","sourceNew":"  /**\n  public static Object fromJSON(String json) {\n    try {\n      Object out = ObjectBuilder.fromJSON(json);\n    } finally {\n\n  }\n  **/\n  \n  public static String matchObj(String path, Object input, Object expected) throws Exception {\n    CollectionTester tester = new CollectionTester(input);\n    boolean reversed = path.startsWith(\"!\");\n    String positivePath = reversed ? path.substring(1) : path;\n    if (!tester.seek(positivePath) ^ reversed) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && (!tester.match(expected) ^ reversed)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d20d5e40789b1c42f4f926e3174b271256c43657","date":1301641092,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object).mjava","pathOld":"solr/src/test/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object).mjava","sourceNew":"  /**\n  public static Object fromJSON(String json) {\n    try {\n      Object out = ObjectBuilder.fromJSON(json);\n    } finally {\n\n  }\n  **/\n  \n  public static String matchObj(String path, Object input, Object expected) throws Exception {\n    CollectionTester tester = new CollectionTester(input);\n    boolean reversed = path.startsWith(\"!\");\n    String positivePath = reversed ? path.substring(1) : path;\n    if (!tester.seek(positivePath) ^ reversed) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && (!tester.match(expected) ^ reversed)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n  public static Object fromJSON(String json) {\n    try {\n      Object out = ObjectBuilder.fromJSON(json);\n    } finally {\n\n  }\n  **/\n  \n  public static String matchObj(String path, Object input, Object expected) throws Exception {\n    CollectionTester tester = new CollectionTester(input);\n    boolean reversed = path.startsWith(\"!\");\n    String positivePath = reversed ? path.substring(1) : path;\n    if (!tester.seek(positivePath) ^ reversed) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && (!tester.match(expected) ^ reversed)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b09c7419b92e982a901698cb401ce22ac35e4b04","date":1301668869,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object).mjava","pathOld":"solr/src/test/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object).mjava","sourceNew":"  /**\n  public static Object fromJSON(String json) {\n    try {\n      Object out = ObjectBuilder.fromJSON(json);\n    } finally {\n\n  }\n  **/\n  \n  public static String matchObj(String path, Object input, Object expected) throws Exception {\n    CollectionTester tester = new CollectionTester(input);\n    boolean reversed = path.startsWith(\"!\");\n    String positivePath = reversed ? path.substring(1) : path;\n    if (!tester.seek(positivePath) ^ reversed) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && (!tester.match(expected) ^ reversed)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n  public static Object fromJSON(String json) {\n    try {\n      Object out = ObjectBuilder.fromJSON(json);\n    } finally {\n\n  }\n  **/\n  \n  public static String matchObj(String path, Object input, Object expected) throws Exception {\n    CollectionTester tester = new CollectionTester(input);\n    boolean reversed = path.startsWith(\"!\");\n    String positivePath = reversed ? path.substring(1) : path;\n    if (!tester.seek(positivePath) ^ reversed) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && (!tester.match(expected) ^ reversed)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object).mjava","pathOld":"solr/src/test/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object).mjava","sourceNew":"  /**\n  public static Object fromJSON(String json) {\n    try {\n      Object out = ObjectBuilder.fromJSON(json);\n    } finally {\n\n  }\n  **/\n  \n  public static String matchObj(String path, Object input, Object expected) throws Exception {\n    CollectionTester tester = new CollectionTester(input);\n    boolean reversed = path.startsWith(\"!\");\n    String positivePath = reversed ? path.substring(1) : path;\n    if (!tester.seek(positivePath) ^ reversed) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && (!tester.match(expected) ^ reversed)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n  public static Object fromJSON(String json) {\n    try {\n      Object out = ObjectBuilder.fromJSON(json);\n    } finally {\n\n  }\n  **/\n  \n  public static String matchObj(String path, Object input, Object expected) throws Exception {\n    CollectionTester tester = new CollectionTester(input);\n    boolean reversed = path.startsWith(\"!\");\n    String positivePath = reversed ? path.substring(1) : path;\n    if (!tester.seek(positivePath) ^ reversed) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && (!tester.match(expected) ^ reversed)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object).mjava","pathOld":"solr/src/test/org/apache/solr/JSONTestUtil#matchObj(String,Object,Object).mjava","sourceNew":"  /**\n  public static Object fromJSON(String json) {\n    try {\n      Object out = ObjectBuilder.fromJSON(json);\n    } finally {\n\n  }\n  **/\n  \n  public static String matchObj(String path, Object input, Object expected) throws Exception {\n    CollectionTester tester = new CollectionTester(input);\n    boolean reversed = path.startsWith(\"!\");\n    String positivePath = reversed ? path.substring(1) : path;\n    if (!tester.seek(positivePath) ^ reversed) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && (!tester.match(expected) ^ reversed)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n  public static Object fromJSON(String json) {\n    try {\n      Object out = ObjectBuilder.fromJSON(json);\n    } finally {\n\n  }\n  **/\n  \n  public static String matchObj(String path, Object input, Object expected) throws Exception {\n    CollectionTester tester = new CollectionTester(input);\n    boolean reversed = path.startsWith(\"!\");\n    String positivePath = reversed ? path.substring(1) : path;\n    if (!tester.seek(positivePath) ^ reversed) {\n      return \"Path not found: \" + path;\n    }\n    if (expected != null && (!tester.match(expected) ^ reversed)) {\n      return tester.err + \" @ \" + tester.getPath();\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["7d5f59e6aef470c175c845a8c96ea65f20ae4c1f"],"7d5f59e6aef470c175c845a8c96ea65f20ae4c1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","b09c7419b92e982a901698cb401ce22ac35e4b04"],"b09c7419b92e982a901698cb401ce22ac35e4b04":["2f77715295363a02fda389e7060324a0a12313ad"],"d20d5e40789b1c42f4f926e3174b271256c43657":["2f77715295363a02fda389e7060324a0a12313ad"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2f77715295363a02fda389e7060324a0a12313ad"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","2f77715295363a02fda389e7060324a0a12313ad"],"2f77715295363a02fda389e7060324a0a12313ad":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"45669a651c970812a680841b97a77cce06af559f":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b09c7419b92e982a901698cb401ce22ac35e4b04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b09c7419b92e982a901698cb401ce22ac35e4b04"]},"commit2Childs":{"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","2f77715295363a02fda389e7060324a0a12313ad"],"7d5f59e6aef470c175c845a8c96ea65f20ae4c1f":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d5f59e6aef470c175c845a8c96ea65f20ae4c1f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b09c7419b92e982a901698cb401ce22ac35e4b04":["135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d20d5e40789b1c42f4f926e3174b271256c43657":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["45669a651c970812a680841b97a77cce06af559f"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"2f77715295363a02fda389e7060324a0a12313ad":["b09c7419b92e982a901698cb401ce22ac35e4b04","d20d5e40789b1c42f4f926e3174b271256c43657","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"45669a651c970812a680841b97a77cce06af559f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d20d5e40789b1c42f4f926e3174b271256c43657","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}