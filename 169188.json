{"path":"src/java/org/apache/lucene/index/LogMergePolicy#setMaxMergeDocs(int).mjava","commits":[{"id":"5b05dbf5e8a6920898fb3838ec15c9eb64bc01af","date":1191617513,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/LogMergePolicy#setMaxMergeDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/LogDocMergePolicy#setMaxMergeDocs(int).mjava","sourceNew":"  /** Sets the maximum docs for a segment to be merged.\n   *  When a segment has this many docs or more it will never be\n   *  merged. */\n  public void setMaxMergeDocs(int maxMergeDocs) {\n    this.maxMergeDocs = maxMergeDocs;\n  }\n\n","sourceOld":"  /** Sets the maximum size for a segment to be merged.\n   *  When a segment is this size or larger it will never be\n   *  merged. */\n  public void setMaxMergeDocs(int maxMergeDocs) {\n    maxMergeSize = maxMergeDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7f2d45bf4e1ec80e37552ebe21f66cd1a6e4270","date":1192640062,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/LogMergePolicy#setMaxMergeDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/LogMergePolicy#setMaxMergeDocs(int).mjava","sourceNew":"  /** <p>Determines the largest segment (measured by\n   * document count) that may be merged with other segments.\n   * Small values (e.g., less than 10,000) are best for\n   * interactive indexing, as this limits the length of\n   * pauses while indexing to a few seconds.  Larger values\n   * are best for batched indexing and speedier\n   * searches.</p>\n   *\n   * <p>The default value is {@link Integer#MAX_VALUE}.</p>\n   *\n   * <p>The default merge policy ({@link\n   * LogByteSizeMergePolicy}) also allows you to set this\n   * limit by net size (in MB) of the segment, using {@link\n   * LogByteSizeMergePolicy#setMaxMergeMB}.</p>\n   */\n  public void setMaxMergeDocs(int maxMergeDocs) {\n    this.maxMergeDocs = maxMergeDocs;\n  }\n\n","sourceOld":"  /** Sets the maximum docs for a segment to be merged.\n   *  When a segment has this many docs or more it will never be\n   *  merged. */\n  public void setMaxMergeDocs(int maxMergeDocs) {\n    this.maxMergeDocs = maxMergeDocs;\n  }\n\n","bugFix":["5b05dbf5e8a6920898fb3838ec15c9eb64bc01af"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#setMaxMergeDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/LogMergePolicy#setMaxMergeDocs(int).mjava","sourceNew":"  /** <p>Determines the largest segment (measured by\n   * document count) that may be merged with other segments.\n   * Small values (e.g., less than 10,000) are best for\n   * interactive indexing, as this limits the length of\n   * pauses while indexing to a few seconds.  Larger values\n   * are best for batched indexing and speedier\n   * searches.</p>\n   *\n   * <p>The default value is {@link Integer#MAX_VALUE}.</p>\n   *\n   * <p>The default merge policy ({@link\n   * LogByteSizeMergePolicy}) also allows you to set this\n   * limit by net size (in MB) of the segment, using {@link\n   * LogByteSizeMergePolicy#setMaxMergeMB}.</p>\n   */\n  public void setMaxMergeDocs(int maxMergeDocs) {\n    this.maxMergeDocs = maxMergeDocs;\n  }\n\n","sourceOld":"  /** <p>Determines the largest segment (measured by\n   * document count) that may be merged with other segments.\n   * Small values (e.g., less than 10,000) are best for\n   * interactive indexing, as this limits the length of\n   * pauses while indexing to a few seconds.  Larger values\n   * are best for batched indexing and speedier\n   * searches.</p>\n   *\n   * <p>The default value is {@link Integer#MAX_VALUE}.</p>\n   *\n   * <p>The default merge policy ({@link\n   * LogByteSizeMergePolicy}) also allows you to set this\n   * limit by net size (in MB) of the segment, using {@link\n   * LogByteSizeMergePolicy#setMaxMergeMB}.</p>\n   */\n  public void setMaxMergeDocs(int maxMergeDocs) {\n    this.maxMergeDocs = maxMergeDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d7f2d45bf4e1ec80e37552ebe21f66cd1a6e4270":["5b05dbf5e8a6920898fb3838ec15c9eb64bc01af"],"5b05dbf5e8a6920898fb3838ec15c9eb64bc01af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d7f2d45bf4e1ec80e37552ebe21f66cd1a6e4270"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b05dbf5e8a6920898fb3838ec15c9eb64bc01af"],"d7f2d45bf4e1ec80e37552ebe21f66cd1a6e4270":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5b05dbf5e8a6920898fb3838ec15c9eb64bc01af":["d7f2d45bf4e1ec80e37552ebe21f66cd1a6e4270"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}