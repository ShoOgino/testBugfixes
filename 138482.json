{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#waitForState(String,long,TimeUnit,CollectionStatePredicate).mjava","commits":[{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#waitForState(String,long,TimeUnit,CollectionStatePredicate).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Block until a CollectionStatePredicate returns true, or the wait times out\n   *\n   * Note that the predicate may be called again even after it has returned true, so\n   * implementors should avoid changing state within the predicate call itself.\n   *\n   * @param collection the collection to watch\n   * @param wait       how long to wait\n   * @param unit       the units of the wait parameter\n   * @param predicate  the predicate to call on state changes\n   * @throws InterruptedException on interrupt\n   * @throws TimeoutException on timeout\n   */\n  public void waitForState(final String collection, long wait, TimeUnit unit, CollectionStatePredicate predicate)\n      throws InterruptedException, TimeoutException {\n\n    final CountDownLatch latch = new CountDownLatch(1);\n\n    CollectionStateWatcher watcher = new CollectionStateWatcher() {\n      @Override\n      public void onStateChanged(Set<String> liveNodes, DocCollection collectionState) {\n        if (predicate.matches(liveNodes, collectionState)) {\n          latch.countDown();\n        } else {\n          registerCollectionStateWatcher(collection, this);\n        }\n      }\n    };\n    registerCollectionStateWatcher(collection, watcher);\n\n    try {\n      // check the current state\n      DocCollection dc = clusterState.getCollectionOrNull(collection);\n      if (predicate.matches(liveNodes, dc))\n        return;\n\n      // wait for the watcher predicate to return true, or time out\n      if (!latch.await(wait, unit))\n        throw new TimeoutException();\n\n    }\n    finally {\n      removeCollectionStateWatcher(collection, watcher);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#waitForState(String,long,TimeUnit,CollectionStatePredicate).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Block until a CollectionStatePredicate returns true, or the wait times out\n   *\n   * Note that the predicate may be called again even after it has returned true, so\n   * implementors should avoid changing state within the predicate call itself.\n   *\n   * @param collection the collection to watch\n   * @param wait       how long to wait\n   * @param unit       the units of the wait parameter\n   * @param predicate  the predicate to call on state changes\n   * @throws InterruptedException on interrupt\n   * @throws TimeoutException on timeout\n   */\n  public void waitForState(final String collection, long wait, TimeUnit unit, CollectionStatePredicate predicate)\n      throws InterruptedException, TimeoutException {\n\n    final CountDownLatch latch = new CountDownLatch(1);\n\n    CollectionStateWatcher watcher = new CollectionStateWatcher() {\n      @Override\n      public void onStateChanged(Set<String> liveNodes, DocCollection collectionState) {\n        if (predicate.matches(liveNodes, collectionState)) {\n          latch.countDown();\n        } else {\n          registerCollectionStateWatcher(collection, this);\n        }\n      }\n    };\n    registerCollectionStateWatcher(collection, watcher);\n\n    try {\n      // check the current state\n      DocCollection dc = clusterState.getCollectionOrNull(collection);\n      if (predicate.matches(liveNodes, dc))\n        return;\n\n      // wait for the watcher predicate to return true, or time out\n      if (!latch.await(wait, unit))\n        throw new TimeoutException();\n\n    }\n    finally {\n      removeCollectionStateWatcher(collection, watcher);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cd4080fba20c774e4183c2ceb96ede05e5fb779","date":1463477646,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#waitForState(String,long,TimeUnit,CollectionStatePredicate).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#waitForState(String,long,TimeUnit,CollectionStatePredicate).mjava","sourceNew":"  /**\n   * Block until a CollectionStatePredicate returns true, or the wait times out\n   *\n   * Note that the predicate may be called again even after it has returned true, so\n   * implementors should avoid changing state within the predicate call itself.\n   *\n   * @param collection the collection to watch\n   * @param wait       how long to wait\n   * @param unit       the units of the wait parameter\n   * @param predicate  the predicate to call on state changes\n   * @throws InterruptedException on interrupt\n   * @throws TimeoutException on timeout\n   */\n  public void waitForState(final String collection, long wait, TimeUnit unit, CollectionStatePredicate predicate)\n      throws InterruptedException, TimeoutException {\n\n    final CountDownLatch latch = new CountDownLatch(1);\n\n    CollectionStateWatcher watcher = (n, c) -> {\n      boolean matches = predicate.matches(n, c);\n      if (matches)\n        latch.countDown();\n      return matches;\n    };\n    registerCollectionStateWatcher(collection, watcher);\n\n    try {\n      // wait for the watcher predicate to return true, or time out\n      if (!latch.await(wait, unit))\n        throw new TimeoutException();\n\n    }\n    finally {\n      removeCollectionStateWatcher(collection, watcher);\n    }\n  }\n\n","sourceOld":"  /**\n   * Block until a CollectionStatePredicate returns true, or the wait times out\n   *\n   * Note that the predicate may be called again even after it has returned true, so\n   * implementors should avoid changing state within the predicate call itself.\n   *\n   * @param collection the collection to watch\n   * @param wait       how long to wait\n   * @param unit       the units of the wait parameter\n   * @param predicate  the predicate to call on state changes\n   * @throws InterruptedException on interrupt\n   * @throws TimeoutException on timeout\n   */\n  public void waitForState(final String collection, long wait, TimeUnit unit, CollectionStatePredicate predicate)\n      throws InterruptedException, TimeoutException {\n\n    final CountDownLatch latch = new CountDownLatch(1);\n\n    CollectionStateWatcher watcher = new CollectionStateWatcher() {\n      @Override\n      public void onStateChanged(Set<String> liveNodes, DocCollection collectionState) {\n        if (predicate.matches(liveNodes, collectionState)) {\n          latch.countDown();\n        } else {\n          registerCollectionStateWatcher(collection, this);\n        }\n      }\n    };\n    registerCollectionStateWatcher(collection, watcher);\n\n    try {\n      // check the current state\n      DocCollection dc = clusterState.getCollectionOrNull(collection);\n      if (predicate.matches(liveNodes, dc))\n        return;\n\n      // wait for the watcher predicate to return true, or time out\n      if (!latch.await(wait, unit))\n        throw new TimeoutException();\n\n    }\n    finally {\n      removeCollectionStateWatcher(collection, watcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#waitForState(String,long,TimeUnit,CollectionStatePredicate).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Block until a CollectionStatePredicate returns true, or the wait times out\n   *\n   * Note that the predicate may be called again even after it has returned true, so\n   * implementors should avoid changing state within the predicate call itself.\n   *\n   * @param collection the collection to watch\n   * @param wait       how long to wait\n   * @param unit       the units of the wait parameter\n   * @param predicate  the predicate to call on state changes\n   * @throws InterruptedException on interrupt\n   * @throws TimeoutException on timeout\n   */\n  public void waitForState(final String collection, long wait, TimeUnit unit, CollectionStatePredicate predicate)\n      throws InterruptedException, TimeoutException {\n\n    final CountDownLatch latch = new CountDownLatch(1);\n\n    CollectionStateWatcher watcher = (n, c) -> {\n      boolean matches = predicate.matches(n, c);\n      if (matches)\n        latch.countDown();\n      return matches;\n    };\n    registerCollectionStateWatcher(collection, watcher);\n\n    try {\n      // wait for the watcher predicate to return true, or time out\n      if (!latch.await(wait, unit))\n        throw new TimeoutException();\n\n    }\n    finally {\n      removeCollectionStateWatcher(collection, watcher);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#waitForState(String,long,TimeUnit,CollectionStatePredicate).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Block until a CollectionStatePredicate returns true, or the wait times out\n   *\n   * Note that the predicate may be called again even after it has returned true, so\n   * implementors should avoid changing state within the predicate call itself.\n   *\n   * @param collection the collection to watch\n   * @param wait       how long to wait\n   * @param unit       the units of the wait parameter\n   * @param predicate  the predicate to call on state changes\n   * @throws InterruptedException on interrupt\n   * @throws TimeoutException on timeout\n   */\n  public void waitForState(final String collection, long wait, TimeUnit unit, CollectionStatePredicate predicate)\n      throws InterruptedException, TimeoutException {\n\n    final CountDownLatch latch = new CountDownLatch(1);\n\n    CollectionStateWatcher watcher = (n, c) -> {\n      boolean matches = predicate.matches(n, c);\n      if (matches)\n        latch.countDown();\n      return matches;\n    };\n    registerCollectionStateWatcher(collection, watcher);\n\n    try {\n      // wait for the watcher predicate to return true, or time out\n      if (!latch.await(wait, unit))\n        throw new TimeoutException();\n\n    }\n    finally {\n      removeCollectionStateWatcher(collection, watcher);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#waitForState(String,long,TimeUnit,CollectionStatePredicate).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#waitForState(String,long,TimeUnit,CollectionStatePredicate).mjava","sourceNew":"  /**\n   * Block until a CollectionStatePredicate returns true, or the wait times out\n   *\n   * Note that the predicate may be called again even after it has returned true, so\n   * implementors should avoid changing state within the predicate call itself.\n   *\n   * @param collection the collection to watch\n   * @param wait       how long to wait\n   * @param unit       the units of the wait parameter\n   * @param predicate  the predicate to call on state changes\n   * @throws InterruptedException on interrupt\n   * @throws TimeoutException on timeout\n   */\n  public void waitForState(final String collection, long wait, TimeUnit unit, CollectionStatePredicate predicate)\n      throws InterruptedException, TimeoutException {\n    \n    if (closed) {\n      throw new AlreadyClosedException();\n    }\n    \n    final CountDownLatch latch = new CountDownLatch(1);\n    waitLatches.add(latch);\n    AtomicReference<DocCollection> docCollection = new AtomicReference<>();\n    CollectionStateWatcher watcher = (n, c) -> {\n      docCollection.set(c);\n      boolean matches = predicate.matches(n, c);\n      if (matches)\n        latch.countDown();\n      \n      return matches;\n    };\n    registerCollectionStateWatcher(collection, watcher);\n\n    try {\n      // wait for the watcher predicate to return true, or time out\n      if (!latch.await(wait, unit))\n        throw new TimeoutException(\"Timeout waiting to see state for collection=\" + collection + \" :\" + docCollection.get());\n\n    }\n    finally {\n      removeCollectionStateWatcher(collection, watcher);\n      waitLatches.remove(latch);\n    }\n  }\n\n","sourceOld":"  /**\n   * Block until a CollectionStatePredicate returns true, or the wait times out\n   *\n   * Note that the predicate may be called again even after it has returned true, so\n   * implementors should avoid changing state within the predicate call itself.\n   *\n   * @param collection the collection to watch\n   * @param wait       how long to wait\n   * @param unit       the units of the wait parameter\n   * @param predicate  the predicate to call on state changes\n   * @throws InterruptedException on interrupt\n   * @throws TimeoutException on timeout\n   */\n  public void waitForState(final String collection, long wait, TimeUnit unit, CollectionStatePredicate predicate)\n      throws InterruptedException, TimeoutException {\n\n    final CountDownLatch latch = new CountDownLatch(1);\n\n    CollectionStateWatcher watcher = (n, c) -> {\n      boolean matches = predicate.matches(n, c);\n      if (matches)\n        latch.countDown();\n      return matches;\n    };\n    registerCollectionStateWatcher(collection, watcher);\n\n    try {\n      // wait for the watcher predicate to return true, or time out\n      if (!latch.await(wait, unit))\n        throw new TimeoutException();\n\n    }\n    finally {\n      removeCollectionStateWatcher(collection, watcher);\n    }\n  }\n\n","bugFix":["5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"bugIntro":["e92ecc804db94989e3c224b898b8dc978ebb584f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e92ecc804db94989e3c224b898b8dc978ebb584f","date":1556036948,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#waitForState(String,long,TimeUnit,CollectionStatePredicate).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#waitForState(String,long,TimeUnit,CollectionStatePredicate).mjava","sourceNew":"  /**\n   * Block until a CollectionStatePredicate returns true, or the wait times out\n   *\n   * Note that the predicate may be called again even after it has returned true, so\n   * implementors should avoid changing state within the predicate call itself.\n   *\n   * @param collection the collection to watch\n   * @param wait       how long to wait\n   * @param unit       the units of the wait parameter\n   * @param predicate  the predicate to call on state changes\n   * @throws InterruptedException on interrupt\n   * @throws TimeoutException on timeout\n   */\n  public void waitForState(final String collection, long wait, TimeUnit unit, CollectionStatePredicate predicate)\n      throws InterruptedException, TimeoutException {\n\n    if (closed) {\n      throw new AlreadyClosedException();\n    }\n\n    final CountDownLatch latch = new CountDownLatch(1);\n    waitLatches.add(latch);\n    AtomicReference<DocCollection> docCollection = new AtomicReference<>();\n    CollectionStateWatcher watcher = (n, c) -> {\n      docCollection.set(c);\n      boolean matches = predicate.matches(n, c);\n      if (matches)\n        latch.countDown();\n\n      return matches;\n    };\n    registerCollectionStateWatcher(collection, watcher);\n\n    try {\n      // wait for the watcher predicate to return true, or time out\n      if (!latch.await(wait, unit))\n        throw new TimeoutException(\"Timeout waiting to see state for collection=\" + collection + \" :\" + docCollection.get());\n\n    }\n    finally {\n      removeCollectionStateWatcher(collection, watcher);\n      waitLatches.remove(latch);\n    }\n  }\n\n","sourceOld":"  /**\n   * Block until a CollectionStatePredicate returns true, or the wait times out\n   *\n   * Note that the predicate may be called again even after it has returned true, so\n   * implementors should avoid changing state within the predicate call itself.\n   *\n   * @param collection the collection to watch\n   * @param wait       how long to wait\n   * @param unit       the units of the wait parameter\n   * @param predicate  the predicate to call on state changes\n   * @throws InterruptedException on interrupt\n   * @throws TimeoutException on timeout\n   */\n  public void waitForState(final String collection, long wait, TimeUnit unit, CollectionStatePredicate predicate)\n      throws InterruptedException, TimeoutException {\n    \n    if (closed) {\n      throw new AlreadyClosedException();\n    }\n    \n    final CountDownLatch latch = new CountDownLatch(1);\n    waitLatches.add(latch);\n    AtomicReference<DocCollection> docCollection = new AtomicReference<>();\n    CollectionStateWatcher watcher = (n, c) -> {\n      docCollection.set(c);\n      boolean matches = predicate.matches(n, c);\n      if (matches)\n        latch.countDown();\n      \n      return matches;\n    };\n    registerCollectionStateWatcher(collection, watcher);\n\n    try {\n      // wait for the watcher predicate to return true, or time out\n      if (!latch.await(wait, unit))\n        throw new TimeoutException(\"Timeout waiting to see state for collection=\" + collection + \" :\" + docCollection.get());\n\n    }\n    finally {\n      removeCollectionStateWatcher(collection, watcher);\n      waitLatches.remove(latch);\n    }\n  }\n\n","bugFix":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#waitForState(String,long,TimeUnit,CollectionStatePredicate).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#waitForState(String,long,TimeUnit,CollectionStatePredicate).mjava","sourceNew":"  /**\n   * Block until a CollectionStatePredicate returns true, or the wait times out\n   *\n   * <p>\n   * Note that the predicate may be called again even after it has returned true, so\n   * implementors should avoid changing state within the predicate call itself.\n   * </p>\n   *\n   * <p>\n   * This implementation utilizes {@link CollectionStateWatcher} internally. \n   * Callers that don't care about liveNodes are encouraged to use a {@link DocCollection} {@link Predicate} \n   * instead\n   * </p>\n   * \n   * @see #waitForState(String, long, TimeUnit, Predicate)\n   * @see #registerCollectionStateWatcher\n   * @param collection the collection to watch\n   * @param wait       how long to wait\n   * @param unit       the units of the wait parameter\n   * @param predicate  the predicate to call on state changes\n   * @throws InterruptedException on interrupt\n   * @throws TimeoutException on timeout\n   */\n  public void waitForState(final String collection, long wait, TimeUnit unit, CollectionStatePredicate predicate)\n      throws InterruptedException, TimeoutException {\n\n    if (closed) {\n      throw new AlreadyClosedException();\n    }\n\n    final CountDownLatch latch = new CountDownLatch(1);\n    waitLatches.add(latch);\n    AtomicReference<DocCollection> docCollection = new AtomicReference<>();\n    CollectionStateWatcher watcher = (n, c) -> {\n      docCollection.set(c);\n      boolean matches = predicate.matches(n, c);\n      if (matches)\n        latch.countDown();\n\n      return matches;\n    };\n    registerCollectionStateWatcher(collection, watcher);\n\n    try {\n      // wait for the watcher predicate to return true, or time out\n      if (!latch.await(wait, unit))\n        throw new TimeoutException(\"Timeout waiting to see state for collection=\" + collection + \" :\" + docCollection.get());\n\n    }\n    finally {\n      removeCollectionStateWatcher(collection, watcher);\n      waitLatches.remove(latch);\n    }\n  }\n\n","sourceOld":"  /**\n   * Block until a CollectionStatePredicate returns true, or the wait times out\n   *\n   * Note that the predicate may be called again even after it has returned true, so\n   * implementors should avoid changing state within the predicate call itself.\n   *\n   * @param collection the collection to watch\n   * @param wait       how long to wait\n   * @param unit       the units of the wait parameter\n   * @param predicate  the predicate to call on state changes\n   * @throws InterruptedException on interrupt\n   * @throws TimeoutException on timeout\n   */\n  public void waitForState(final String collection, long wait, TimeUnit unit, CollectionStatePredicate predicate)\n      throws InterruptedException, TimeoutException {\n\n    if (closed) {\n      throw new AlreadyClosedException();\n    }\n\n    final CountDownLatch latch = new CountDownLatch(1);\n    waitLatches.add(latch);\n    AtomicReference<DocCollection> docCollection = new AtomicReference<>();\n    CollectionStateWatcher watcher = (n, c) -> {\n      docCollection.set(c);\n      boolean matches = predicate.matches(n, c);\n      if (matches)\n        latch.countDown();\n\n      return matches;\n    };\n    registerCollectionStateWatcher(collection, watcher);\n\n    try {\n      // wait for the watcher predicate to return true, or time out\n      if (!latch.await(wait, unit))\n        throw new TimeoutException(\"Timeout waiting to see state for collection=\" + collection + \" :\" + docCollection.get());\n\n    }\n    finally {\n      removeCollectionStateWatcher(collection, watcher);\n      waitLatches.remove(latch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#waitForState(String,long,TimeUnit,CollectionStatePredicate).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#waitForState(String,long,TimeUnit,CollectionStatePredicate).mjava","sourceNew":"  /**\n   * Block until a CollectionStatePredicate returns true, or the wait times out\n   *\n   * <p>\n   * Note that the predicate may be called again even after it has returned true, so\n   * implementors should avoid changing state within the predicate call itself.\n   * </p>\n   *\n   * <p>\n   * This implementation utilizes {@link CollectionStateWatcher} internally.\n   * Callers that don't care about liveNodes are encouraged to use a {@link DocCollection} {@link Predicate}\n   * instead\n   * </p>\n   *\n   * @param collection the collection to watch\n   * @param wait       how long to wait\n   * @param unit       the units of the wait parameter\n   * @param predicate  the predicate to call on state changes\n   * @throws InterruptedException on interrupt\n   * @throws TimeoutException     on timeout\n   * @see #waitForState(String, long, TimeUnit, Predicate)\n   * @see #registerCollectionStateWatcher\n   */\n  public void waitForState(final String collection, long wait, TimeUnit unit, CollectionStatePredicate predicate)\n      throws InterruptedException, TimeoutException {\n\n    if (closed) {\n      throw new AlreadyClosedException();\n    }\n\n    final CountDownLatch latch = new CountDownLatch(1);\n    waitLatches.add(latch);\n    AtomicReference<DocCollection> docCollection = new AtomicReference<>();\n    CollectionStateWatcher watcher = (n, c) -> {\n      docCollection.set(c);\n      boolean matches = predicate.matches(n, c);\n      if (matches)\n        latch.countDown();\n\n      return matches;\n    };\n    registerCollectionStateWatcher(collection, watcher);\n\n    try {\n      // wait for the watcher predicate to return true, or time out\n      if (!latch.await(wait, unit))\n        throw new TimeoutException(\"Timeout waiting to see state for collection=\" + collection + \" :\" + docCollection.get());\n\n    } finally {\n      removeCollectionStateWatcher(collection, watcher);\n      waitLatches.remove(latch);\n    }\n  }\n\n","sourceOld":"  /**\n   * Block until a CollectionStatePredicate returns true, or the wait times out\n   *\n   * <p>\n   * Note that the predicate may be called again even after it has returned true, so\n   * implementors should avoid changing state within the predicate call itself.\n   * </p>\n   *\n   * <p>\n   * This implementation utilizes {@link CollectionStateWatcher} internally. \n   * Callers that don't care about liveNodes are encouraged to use a {@link DocCollection} {@link Predicate} \n   * instead\n   * </p>\n   * \n   * @see #waitForState(String, long, TimeUnit, Predicate)\n   * @see #registerCollectionStateWatcher\n   * @param collection the collection to watch\n   * @param wait       how long to wait\n   * @param unit       the units of the wait parameter\n   * @param predicate  the predicate to call on state changes\n   * @throws InterruptedException on interrupt\n   * @throws TimeoutException on timeout\n   */\n  public void waitForState(final String collection, long wait, TimeUnit unit, CollectionStatePredicate predicate)\n      throws InterruptedException, TimeoutException {\n\n    if (closed) {\n      throw new AlreadyClosedException();\n    }\n\n    final CountDownLatch latch = new CountDownLatch(1);\n    waitLatches.add(latch);\n    AtomicReference<DocCollection> docCollection = new AtomicReference<>();\n    CollectionStateWatcher watcher = (n, c) -> {\n      docCollection.set(c);\n      boolean matches = predicate.matches(n, c);\n      if (matches)\n        latch.countDown();\n\n      return matches;\n    };\n    registerCollectionStateWatcher(collection, watcher);\n\n    try {\n      // wait for the watcher predicate to return true, or time out\n      if (!latch.await(wait, unit))\n        throw new TimeoutException(\"Timeout waiting to see state for collection=\" + collection + \" :\" + docCollection.get());\n\n    }\n    finally {\n      removeCollectionStateWatcher(collection, watcher);\n      waitLatches.remove(latch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e92ecc804db94989e3c224b898b8dc978ebb584f":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["7b366e7dd3172289251a86be96031af4002cd19c"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"5cd4080fba20c774e4183c2ceb96ede05e5fb779":["0ad30c6a479e764150a3316e57263319775f1df2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b366e7dd3172289251a86be96031af4002cd19c":["e92ecc804db94989e3c224b898b8dc978ebb584f"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5cd4080fba20c774e4183c2ceb96ede05e5fb779"]},"commit2Childs":{"e92ecc804db94989e3c224b898b8dc978ebb584f":["7b366e7dd3172289251a86be96031af4002cd19c"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e92ecc804db94989e3c224b898b8dc978ebb584f"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cd4080fba20c774e4183c2ceb96ede05e5fb779":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","5b4df85b7268ca40452d6c01343d8eb00ed1f70a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"7b366e7dd3172289251a86be96031af4002cd19c":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"0ad30c6a479e764150a3316e57263319775f1df2":["5cd4080fba20c774e4183c2ceb96ede05e5fb779"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}