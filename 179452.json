{"path":"lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector#getLeafCollector(LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    this.docBase = context.docBase;\n    if (Long.MIN_VALUE == t0) {\n      setBaseline();\n    }\n    return new FilterLeafCollector(collector.getLeafCollector(context)) {\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        final long time = clock.get();\n        if (timeout < time) {\n          if (greedy) {\n            //System.out.println(this+\"  greedy: before failing, collecting doc: \"+(docBase + doc)+\"  \"+(time-t0));\n            in.collect(doc);\n          }\n          //System.out.println(this+\"  failing on:  \"+(docBase + doc)+\"  \"+(time-t0));\n          throw new TimeExceededException( timeout-t0, time-t0, docBase + doc );\n        }\n        //System.out.println(this+\"  collecting: \"+(docBase + doc)+\"  \"+(time-t0));\n        in.collect(doc);\n      }\n      \n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e","date":1411674127,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    this.docBase = context.docBase;\n    if (Long.MIN_VALUE == t0) {\n      setBaseline();\n    }\n    return new FilterLeafCollector(collector.getLeafCollector(context)) {\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        final long time = clock.get();\n        if (time - timeout > 0L) {\n          if (greedy) {\n            //System.out.println(this+\"  greedy: before failing, collecting doc: \"+(docBase + doc)+\"  \"+(time-t0));\n            in.collect(doc);\n          }\n          //System.out.println(this+\"  failing on:  \"+(docBase + doc)+\"  \"+(time-t0));\n          throw new TimeExceededException( timeout-t0, time-t0, docBase + doc );\n        }\n        //System.out.println(this+\"  collecting: \"+(docBase + doc)+\"  \"+(time-t0));\n        in.collect(doc);\n      }\n      \n    };\n  }\n\n","sourceOld":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    this.docBase = context.docBase;\n    if (Long.MIN_VALUE == t0) {\n      setBaseline();\n    }\n    return new FilterLeafCollector(collector.getLeafCollector(context)) {\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        final long time = clock.get();\n        if (timeout < time) {\n          if (greedy) {\n            //System.out.println(this+\"  greedy: before failing, collecting doc: \"+(docBase + doc)+\"  \"+(time-t0));\n            in.collect(doc);\n          }\n          //System.out.println(this+\"  failing on:  \"+(docBase + doc)+\"  \"+(time-t0));\n          throw new TimeExceededException( timeout-t0, time-t0, docBase + doc );\n        }\n        //System.out.println(this+\"  collecting: \"+(docBase + doc)+\"  \"+(time-t0));\n        in.collect(doc);\n      }\n      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da951a24a6a87d5ba7e1820f8c28a1e2beea76c1","date":1411744836,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    this.docBase = context.docBase;\n    if (Long.MIN_VALUE == t0) {\n      setBaseline();\n    }\n    return new FilterLeafCollector(collector.getLeafCollector(context)) {\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        final long time = clock.get();\n        if (time - timeout > 0L) {\n          if (greedy) {\n            //System.out.println(this+\"  greedy: before failing, collecting doc: \"+(docBase + doc)+\"  \"+(time-t0));\n            in.collect(doc);\n          }\n          //System.out.println(this+\"  failing on:  \"+(docBase + doc)+\"  \"+(time-t0));\n          throw new TimeExceededException( timeout-t0, time-t0, docBase + doc );\n        }\n        //System.out.println(this+\"  collecting: \"+(docBase + doc)+\"  \"+(time-t0));\n        in.collect(doc);\n      }\n      \n    };\n  }\n\n","sourceOld":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    this.docBase = context.docBase;\n    if (Long.MIN_VALUE == t0) {\n      setBaseline();\n    }\n    return new FilterLeafCollector(collector.getLeafCollector(context)) {\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        final long time = clock.get();\n        if (timeout < time) {\n          if (greedy) {\n            //System.out.println(this+\"  greedy: before failing, collecting doc: \"+(docBase + doc)+\"  \"+(time-t0));\n            in.collect(doc);\n          }\n          //System.out.println(this+\"  failing on:  \"+(docBase + doc)+\"  \"+(time-t0));\n          throw new TimeExceededException( timeout-t0, time-t0, docBase + doc );\n        }\n        //System.out.println(this+\"  collecting: \"+(docBase + doc)+\"  \"+(time-t0));\n        in.collect(doc);\n      }\n      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1dccd7bcb5aed74b05d5884f4579a968cb3325fe","date":1434356398,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TimeLimitingCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    this.docBase = context.docBase;\n    if (Long.MIN_VALUE == t0) {\n      setBaseline();\n    }\n    final long time = clock.get();\n    if (time - timeout > 0L) {\n      throw new TimeExceededException(timeout - t0, time - t0, -1);\n    }\n    return new FilterLeafCollector(collector.getLeafCollector(context)) {\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        final long time = clock.get();\n        if (time - timeout > 0L) {\n          if (greedy) {\n            //System.out.println(this+\"  greedy: before failing, collecting doc: \"+(docBase + doc)+\"  \"+(time-t0));\n            in.collect(doc);\n          }\n          //System.out.println(this+\"  failing on:  \"+(docBase + doc)+\"  \"+(time-t0));\n          throw new TimeExceededException( timeout-t0, time-t0, docBase + doc );\n        }\n        //System.out.println(this+\"  collecting: \"+(docBase + doc)+\"  \"+(time-t0));\n        in.collect(doc);\n      }\n      \n    };\n  }\n\n","sourceOld":"  @Override\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    this.docBase = context.docBase;\n    if (Long.MIN_VALUE == t0) {\n      setBaseline();\n    }\n    return new FilterLeafCollector(collector.getLeafCollector(context)) {\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        final long time = clock.get();\n        if (time - timeout > 0L) {\n          if (greedy) {\n            //System.out.println(this+\"  greedy: before failing, collecting doc: \"+(docBase + doc)+\"  \"+(time-t0));\n            in.collect(doc);\n          }\n          //System.out.println(this+\"  failing on:  \"+(docBase + doc)+\"  \"+(time-t0));\n          throw new TimeExceededException( timeout-t0, time-t0, docBase + doc );\n        }\n        //System.out.println(this+\"  collecting: \"+(docBase + doc)+\"  \"+(time-t0));\n        in.collect(doc);\n      }\n      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"da951a24a6a87d5ba7e1820f8c28a1e2beea76c1":["c9fb5f46e264daf5ba3860defe623a89d202dd87","eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1dccd7bcb5aed74b05d5884f4579a968cb3325fe":["eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1dccd7bcb5aed74b05d5884f4579a968cb3325fe"]},"commit2Childs":{"eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e":["da951a24a6a87d5ba7e1820f8c28a1e2beea76c1","1dccd7bcb5aed74b05d5884f4579a968cb3325fe"],"da951a24a6a87d5ba7e1820f8c28a1e2beea76c1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"1dccd7bcb5aed74b05d5884f4579a968cb3325fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["eb9e4cb185078b4e99e3b7070abb77eb2cdfaf6e","da951a24a6a87d5ba7e1820f8c28a1e2beea76c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["da951a24a6a87d5ba7e1820f8c28a1e2beea76c1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}