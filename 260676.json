{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","commits":[{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n    List<Map<String, Object>> l = getListOfMap(\"conditions\", jsonMap);\n    clauses = l.stream()\n        .map(Clause::new)\n        .sorted()\n        .collect(toList());\n    l = getListOfMap(\"preferences\", jsonMap);\n    preferences = l.stream().map(Preference::new).collect(toList());\n    for (int i = 0; i < preferences.size() - 1; i++) {\n      Preference preference = preferences.get(i);\n      preference.next = preferences.get(i + 1);\n    }\n\n    for (Clause c : clauses) params.add(c.tag.name);\n    for (Preference preference : preferences) {\n      if (params.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      params.add(preference.name.toString());\n      preference.idx = params.size() - 1;\n    }\n  }\n\n","sourceOld":"  public Policy(Map<String, Object> jsonMap) {\n    List<Map<String, Object>> l = getListOfMap(\"conditions\", jsonMap);\n    clauses = l.stream()\n        .map(Clause::new)\n        .sorted()\n        .collect(toList());\n    l = getListOfMap(\"preferences\", jsonMap);\n    preferences = l.stream().map(Preference::new).collect(toList());\n    for (int i = 0; i < preferences.size() - 1; i++) {\n      Preference preference = preferences.get(i);\n      preference.next = preferences.get(i + 1);\n    }\n\n    for (Clause c : clauses) params.add(c.tag.name);\n    for (Preference preference : preferences) {\n      if (params.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      params.add(preference.name.toString());\n      preference.idx = params.size() - 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86fff6c123a5a1d38adb665dd045347219798da9","date":1493623721,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n\n    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < clusterPreferences.size() - 1; i++) {\n      Preference preference = clusterPreferences.get(i);\n      preference.next = clusterPreferences.get(i + 1);\n    }\n    if (clusterPreferences.isEmpty()) {\n      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString(\"{minimize : cores, precision:1}\")));\n    }\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .collect(Collectors.toList());\n\n    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(\"policies\", emptyMap())).forEach((s, l1) ->\n        this.policies.put(s, l1.stream()\n            .map(Clause::new)\n            .sorted()\n            .collect(toList())));\n\n    this.policies.forEach((s, c) -> {\n      for (Clause clause : c) {\n        if (!clause.isPerCollectiontag())\n          throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n      }\n    });\n\n    for (Preference preference : clusterPreferences) {\n      if (params.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      params.add(preference.name.toString());\n      preference.idx = params.size() - 1;\n    }\n  }\n\n","sourceOld":"  public Policy(Map<String, Object> jsonMap) {\n    List<Map<String, Object>> l = getListOfMap(\"conditions\", jsonMap);\n    clauses = l.stream()\n        .map(Clause::new)\n        .sorted()\n        .collect(toList());\n    l = getListOfMap(\"preferences\", jsonMap);\n    preferences = l.stream().map(Preference::new).collect(toList());\n    for (int i = 0; i < preferences.size() - 1; i++) {\n      Preference preference = preferences.get(i);\n      preference.next = preferences.get(i + 1);\n    }\n\n    for (Clause c : clauses) params.add(c.tag.name);\n    for (Preference preference : preferences) {\n      if (params.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      params.add(preference.name.toString());\n      preference.idx = params.size() - 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n\n    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < clusterPreferences.size() - 1; i++) {\n      Preference preference = clusterPreferences.get(i);\n      preference.next = clusterPreferences.get(i + 1);\n    }\n    if (clusterPreferences.isEmpty()) {\n      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString(\"{minimize : cores, precision:1}\")));\n    }\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .collect(Collectors.toList());\n\n    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(\"policies\", emptyMap())).forEach((s, l1) ->\n        this.policies.put(s, l1.stream()\n            .map(Clause::new)\n            .sorted()\n            .collect(toList())));\n\n    this.policies.forEach((s, c) -> {\n      for (Clause clause : c) {\n        if (!clause.isPerCollectiontag())\n          throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n      }\n    });\n\n    for (Preference preference : clusterPreferences) {\n      if (params.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      params.add(preference.name.toString());\n      preference.idx = params.size() - 1;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"611797611928fc8d5afd1c468ef7522f1cc03b61","date":1496234454,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n\n    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < clusterPreferences.size() - 1; i++) {\n      Preference preference = clusterPreferences.get(i);\n      preference.next = clusterPreferences.get(i + 1);\n    }\n    if (clusterPreferences.isEmpty()) {\n      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString(\"{minimize : cores, precision:1}\")));\n    }\n    for (Preference preference : clusterPreferences) {\n      if (params.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      params.add(preference.name.toString());\n      preference.idx = params.size() - 1;\n    }\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(params);\n          return true;\n        })\n        .collect(Collectors.toList());\n\n    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(\"policies\", emptyMap())).forEach((s, l1) ->\n        this.policies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              clause.addTags(params);\n              return true;\n            })\n            .sorted()\n            .collect(toList())));\n\n    this.policies.forEach((s, c) -> {\n      for (Clause clause : c) {\n        if (!clause.isPerCollectiontag())\n          throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n      }\n    });\n\n\n\n    clusterPolicy.stream().forEach(new Consumer<Clause>() {\n      @Override\n      public void accept(Clause clause) {\n        clause.addTags(params);\n      }\n    });\n  }\n\n","sourceOld":"  public Policy(Map<String, Object> jsonMap) {\n\n    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < clusterPreferences.size() - 1; i++) {\n      Preference preference = clusterPreferences.get(i);\n      preference.next = clusterPreferences.get(i + 1);\n    }\n    if (clusterPreferences.isEmpty()) {\n      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString(\"{minimize : cores, precision:1}\")));\n    }\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .collect(Collectors.toList());\n\n    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(\"policies\", emptyMap())).forEach((s, l1) ->\n        this.policies.put(s, l1.stream()\n            .map(Clause::new)\n            .sorted()\n            .collect(toList())));\n\n    this.policies.forEach((s, c) -> {\n      for (Clause clause : c) {\n        if (!clause.isPerCollectiontag())\n          throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n      }\n    });\n\n    for (Preference preference : clusterPreferences) {\n      if (params.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      params.add(preference.name.toString());\n      preference.idx = params.size() - 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e0880984a2cac6ebebbb3f8afc9ac6de6fe519e","date":1496297191,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n\n    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < clusterPreferences.size() - 1; i++) {\n      Preference preference = clusterPreferences.get(i);\n      preference.next = clusterPreferences.get(i + 1);\n    }\n    if (clusterPreferences.isEmpty()) {\n      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString(\"{minimize : cores, precision:1}\")));\n    }\n    for (Preference preference : clusterPreferences) {\n      if (params.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      params.add(preference.name.toString());\n      preference.idx = params.size() - 1;\n    }\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(params);\n          return true;\n        })\n        .collect(Collectors.toList());\n\n    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(\"policies\", emptyMap())).forEach((s, l1) ->\n        this.policies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(params);\n              return true;\n            })\n            .sorted()\n            .collect(toList())));\n  }\n\n","sourceOld":"  public Policy(Map<String, Object> jsonMap) {\n\n    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < clusterPreferences.size() - 1; i++) {\n      Preference preference = clusterPreferences.get(i);\n      preference.next = clusterPreferences.get(i + 1);\n    }\n    if (clusterPreferences.isEmpty()) {\n      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString(\"{minimize : cores, precision:1}\")));\n    }\n    for (Preference preference : clusterPreferences) {\n      if (params.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      params.add(preference.name.toString());\n      preference.idx = params.size() - 1;\n    }\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(params);\n          return true;\n        })\n        .collect(Collectors.toList());\n\n    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(\"policies\", emptyMap())).forEach((s, l1) ->\n        this.policies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              clause.addTags(params);\n              return true;\n            })\n            .sorted()\n            .collect(toList())));\n\n    this.policies.forEach((s, c) -> {\n      for (Clause clause : c) {\n        if (!clause.isPerCollectiontag())\n          throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n      }\n    });\n\n\n\n    clusterPolicy.stream().forEach(new Consumer<Clause>() {\n      @Override\n      public void accept(Clause clause) {\n        clause.addTags(params);\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4328dc3f7309b4c82d12f9e9420a487a1b9945dd","date":1496650286,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n\n    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < clusterPreferences.size() - 1; i++) {\n      Preference preference = clusterPreferences.get(i);\n      preference.next = clusterPreferences.get(i + 1);\n    }\n    if (clusterPreferences.isEmpty()) {\n      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString(\"{minimize : cores, precision:1}\")));\n    }\n    SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    this.params = new ArrayList<>(paramsOfInterest);\n\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(params);\n          return true;\n        })\n        .collect(Collectors.toList());\n\n    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(\"policies\", emptyMap())).forEach((s, l1) ->\n        this.policies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(params);\n              return true;\n            })\n            .sorted()\n            .collect(toList())));\n  }\n\n","sourceOld":"  public Policy(Map<String, Object> jsonMap) {\n\n    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < clusterPreferences.size() - 1; i++) {\n      Preference preference = clusterPreferences.get(i);\n      preference.next = clusterPreferences.get(i + 1);\n    }\n    if (clusterPreferences.isEmpty()) {\n      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString(\"{minimize : cores, precision:1}\")));\n    }\n    for (Preference preference : clusterPreferences) {\n      if (params.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      params.add(preference.name.toString());\n      preference.idx = params.size() - 1;\n    }\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(params);\n          return true;\n        })\n        .collect(Collectors.toList());\n\n    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(\"policies\", emptyMap())).forEach((s, l1) ->\n        this.policies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(params);\n              return true;\n            })\n            .sorted()\n            .collect(toList())));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n\n    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < clusterPreferences.size() - 1; i++) {\n      Preference preference = clusterPreferences.get(i);\n      preference.next = clusterPreferences.get(i + 1);\n    }\n    if (clusterPreferences.isEmpty()) {\n      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString(\"{minimize : cores, precision:1}\")));\n    }\n    SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    this.params = new ArrayList<>(paramsOfInterest);\n\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(params);\n          return true;\n        })\n        .collect(Collectors.toList());\n\n    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(\"policies\", emptyMap())).forEach((s, l1) ->\n        this.policies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(params);\n              return true;\n            })\n            .sorted()\n            .collect(toList())));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n\n    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < clusterPreferences.size() - 1; i++) {\n      Preference preference = clusterPreferences.get(i);\n      preference.next = clusterPreferences.get(i + 1);\n    }\n    if (clusterPreferences.isEmpty()) {\n      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString(\"{minimize : cores, precision:1}\")));\n    }\n    SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    this.params = new ArrayList<>(paramsOfInterest);\n\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(params);\n          return true;\n        })\n        .collect(Collectors.toList());\n\n    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(\"policies\", emptyMap())).forEach((s, l1) ->\n        this.policies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(params);\n              return true;\n            })\n            .sorted()\n            .collect(toList())));\n  }\n\n","sourceOld":"  public Policy(Map<String, Object> jsonMap) {\n\n    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < clusterPreferences.size() - 1; i++) {\n      Preference preference = clusterPreferences.get(i);\n      preference.next = clusterPreferences.get(i + 1);\n    }\n    if (clusterPreferences.isEmpty()) {\n      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString(\"{minimize : cores, precision:1}\")));\n    }\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .collect(Collectors.toList());\n\n    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(\"policies\", emptyMap())).forEach((s, l1) ->\n        this.policies.put(s, l1.stream()\n            .map(Clause::new)\n            .sorted()\n            .collect(toList())));\n\n    this.policies.forEach((s, c) -> {\n      for (Clause clause : c) {\n        if (!clause.isPerCollectiontag())\n          throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n      }\n    });\n\n    for (Preference preference : clusterPreferences) {\n      if (params.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      params.add(preference.name.toString());\n      preference.idx = params.size() - 1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n\n    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < clusterPreferences.size() - 1; i++) {\n      Preference preference = clusterPreferences.get(i);\n      preference.next = clusterPreferences.get(i + 1);\n    }\n    if (clusterPreferences.isEmpty()) {\n      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString(\"{minimize : cores, precision:1}\")));\n    }\n    SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    this.params = new ArrayList<>(paramsOfInterest);\n\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(params);\n          return true;\n        })\n        .collect(Collectors.toList());\n\n    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(\"policies\", emptyMap())).forEach((s, l1) ->\n        this.policies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(params);\n              return true;\n            })\n            .sorted()\n            .collect(toList())));\n  }\n\n","sourceOld":"  public Policy(Map<String, Object> jsonMap) {\n\n    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < clusterPreferences.size() - 1; i++) {\n      Preference preference = clusterPreferences.get(i);\n      preference.next = clusterPreferences.get(i + 1);\n    }\n    if (clusterPreferences.isEmpty()) {\n      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString(\"{minimize : cores, precision:1}\")));\n    }\n    SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    this.params = new ArrayList<>(paramsOfInterest);\n\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(params);\n          return true;\n        })\n        .collect(Collectors.toList());\n\n    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(\"policies\", emptyMap())).forEach((s, l1) ->\n        this.policies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(params);\n              return true;\n            })\n            .sorted()\n            .collect(toList())));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#Policy(Map[String,Object]).mjava","sourceNew":"  public Policy(Map<String, Object> jsonMap) {\n\n    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < clusterPreferences.size() - 1; i++) {\n      Preference preference = clusterPreferences.get(i);\n      preference.next = clusterPreferences.get(i + 1);\n    }\n    if (clusterPreferences.isEmpty()) {\n      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString(\"{minimize : cores, precision:1}\")));\n    }\n    SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    this.params = new ArrayList<>(paramsOfInterest);\n\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(params);\n          return true;\n        })\n        .collect(Collectors.toList());\n\n    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(\"policies\", emptyMap())).forEach((s, l1) ->\n        this.policies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(params);\n              return true;\n            })\n            .sorted()\n            .collect(toList())));\n  }\n\n","sourceOld":"  public Policy(Map<String, Object> jsonMap) {\n\n    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()\n        .map(Preference::new)\n        .collect(toList());\n    for (int i = 0; i < clusterPreferences.size() - 1; i++) {\n      Preference preference = clusterPreferences.get(i);\n      preference.next = clusterPreferences.get(i + 1);\n    }\n    if (clusterPreferences.isEmpty()) {\n      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString(\"{minimize : cores, precision:1}\")));\n    }\n    SortedSet<String> paramsOfInterest = new TreeSet<>();\n    for (Preference preference : clusterPreferences) {\n      if (paramsOfInterest.contains(preference.name.name())) {\n        throw new RuntimeException(preference.name + \" is repeated\");\n      }\n      paramsOfInterest.add(preference.name.toString());\n    }\n    this.params = new ArrayList<>(paramsOfInterest);\n\n    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()\n        .map(Clause::new)\n        .filter(clause -> {\n          clause.addTags(params);\n          return true;\n        })\n        .collect(Collectors.toList());\n\n    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(\"policies\", emptyMap())).forEach((s, l1) ->\n        this.policies.put(s, l1.stream()\n            .map(Clause::new)\n            .filter(clause -> {\n              if (!clause.isPerCollectiontag())\n                throw new RuntimeException(clause.globalTag.name + \" is only allowed in 'cluster-policy'\");\n              clause.addTags(params);\n              return true;\n            })\n            .sorted()\n            .collect(toList())));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"611797611928fc8d5afd1c468ef7522f1cc03b61":["a513b6a92751e54c76fb5447948c9e7d437163a7"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["86fff6c123a5a1d38adb665dd045347219798da9","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"86fff6c123a5a1d38adb665dd045347219798da9":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5e0880984a2cac6ebebbb3f8afc9ac6de6fe519e":["611797611928fc8d5afd1c468ef7522f1cc03b61"],"98f11c416d30e556e0004a9a84960702d12d35b1":["e9017cf144952056066919f1ebc7897ff9bd71b1","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["5e0880984a2cac6ebebbb3f8afc9ac6de6fe519e"]},"commit2Childs":{"611797611928fc8d5afd1c468ef7522f1cc03b61":["5e0880984a2cac6ebebbb3f8afc9ac6de6fe519e"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["98f11c416d30e556e0004a9a84960702d12d35b1"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["98f11c416d30e556e0004a9a84960702d12d35b1"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["611797611928fc8d5afd1c468ef7522f1cc03b61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86fff6c123a5a1d38adb665dd045347219798da9":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["86fff6c123a5a1d38adb665dd045347219798da9"],"5e0880984a2cac6ebebbb3f8afc9ac6de6fe519e":["4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}