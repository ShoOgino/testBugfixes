{"path":"lucene/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","commits":[{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.perThread.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      control.setFlushPending(state); // flush by num docs\n    } else {// flush by RAM\n      if (flushOnRAM()) {\n        final double ramBufferSizeMB = indexWriterConfig.getRAMBufferSizeMB();\n        final long totalRam = control.activeBytes();\n        final long limit = (long) (ramBufferSizeMB * 1024.d * 1024.d);\n        if (totalRam >= limit) {\n          markLargestWriterPending(control, state, totalRam);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f4cae61e16730201371ab7e9912721c19324e7","date":1303199575,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.perThread.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else {// flush by RAM\n      if (flushOnRAM()) {\n        final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n        final long totalRam = control.activeBytes();\n        if (totalRam >= limit) {\n          markLargestWriterPending(control, state, totalRam);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.perThread.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      control.setFlushPending(state); // flush by num docs\n    } else {// flush by RAM\n      if (flushOnRAM()) {\n        final double ramBufferSizeMB = indexWriterConfig.getRAMBufferSizeMB();\n        final long totalRam = control.activeBytes();\n        final long limit = (long) (ramBufferSizeMB * 1024.d * 1024.d);\n        if (totalRam >= limit) {\n          markLargestWriterPending(control, state, totalRam);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4","date":1303818069,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.perThread.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes();\n      if (totalRam >= limit) {\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.perThread.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else {// flush by RAM\n      if (flushOnRAM()) {\n        final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n        final long totalRam = control.activeBytes();\n        if (totalRam >= limit) {\n          markLargestWriterPending(control, state, totalRam);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["b7465988fd0a9c673dcb88f51473300c41d630f0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.perThread.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes();\n      if (totalRam >= limit) {\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.perThread.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes();\n      if (totalRam >= limit) {\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.perThread.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes();\n      if (totalRam >= limit) {\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7465988fd0a9c673dcb88f51473300c41d630f0","date":1311685662,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.perThread.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes() + control.getDeleteBytesUsed();\n      if (totalRam >= limit) {\n        final DocumentsWriter writer = this.writer.get();\n        if (writer.infoStream != null) {\n          writer.message(\"flush: activeBytes=\" + control.activeBytes() + \" deleteBytes=\" + control.getDeleteBytesUsed() + \" vs limit=\" + limit);\n        }\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.perThread.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes();\n      if (totalRam >= limit) {\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","bugFix":["761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.perThread.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes() + control.getDeleteBytesUsed();\n      if (totalRam >= limit) {\n        final DocumentsWriter writer = this.writer.get();\n        if (writer.infoStream != null) {\n          writer.infoStream.message(\"FP\", \"flush: activeBytes=\" + control.activeBytes() + \" deleteBytes=\" + control.getDeleteBytesUsed() + \" vs limit=\" + limit);\n        }\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.perThread.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes() + control.getDeleteBytesUsed();\n      if (totalRam >= limit) {\n        final DocumentsWriter writer = this.writer.get();\n        if (writer.infoStream != null) {\n          writer.message(\"flush: activeBytes=\" + control.activeBytes() + \" deleteBytes=\" + control.getDeleteBytesUsed() + \" vs limit=\" + limit);\n        }\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.perThread.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes() + control.getDeleteBytesUsed();\n      if (totalRam >= limit) {\n        final DocumentsWriter writer = this.writer.get();\n        if (writer.infoStream.isEnabled(\"FP\")) {\n          writer.infoStream.message(\"FP\", \"flush: activeBytes=\" + control.activeBytes() + \" deleteBytes=\" + control.getDeleteBytesUsed() + \" vs limit=\" + limit);\n        }\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.perThread.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes() + control.getDeleteBytesUsed();\n      if (totalRam >= limit) {\n        final DocumentsWriter writer = this.writer.get();\n        if (writer.infoStream != null) {\n          writer.infoStream.message(\"FP\", \"flush: activeBytes=\" + control.activeBytes() + \" deleteBytes=\" + control.getDeleteBytesUsed() + \" vs limit=\" + limit);\n        }\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.perThread.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes() + control.getDeleteBytesUsed();\n      if (totalRam >= limit) {\n        final DocumentsWriter writer = this.writer.get();\n        if (writer.infoStream.isEnabled(\"FP\")) {\n          writer.infoStream.message(\"FP\", \"flush: activeBytes=\" + control.activeBytes() + \" deleteBytes=\" + control.getDeleteBytesUsed() + \" vs limit=\" + limit);\n        }\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.perThread.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes() + control.getDeleteBytesUsed();\n      if (totalRam >= limit) {\n        final DocumentsWriter writer = this.writer.get();\n        if (writer.infoStream.isEnabled(\"FP\")) {\n          writer.infoStream.message(\"FP\", \"flush: activeBytes=\" + control.activeBytes() + \" deleteBytes=\" + control.getDeleteBytesUsed() + \" vs limit=\" + limit);\n        }\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4":["f6f4cae61e16730201371ab7e9912721c19324e7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"06584e6e98d592b34e1329b384182f368d2025e8":["b7465988fd0a9c673dcb88f51473300c41d630f0"],"b7465988fd0a9c673dcb88f51473300c41d630f0":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4"],"f6f4cae61e16730201371ab7e9912721c19324e7":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["f6f4cae61e16730201371ab7e9912721c19324e7"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7465988fd0a9c673dcb88f51473300c41d630f0":["06584e6e98d592b34e1329b384182f368d2025e8"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["b7465988fd0a9c673dcb88f51473300c41d630f0","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"f6f4cae61e16730201371ab7e9912721c19324e7":["761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}