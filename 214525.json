{"path":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperReadAPITest#testZkread().mjava","commits":[{"id":"0cdbfc1e5714aafb41cabb055936a38ba4db5362","date":1587983533,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/ZookeeperReadAPITest#testZkread().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testZkread() throws Exception {\n    URL baseUrl = cluster.getJettySolrRunner(0).getBaseUrl();\n    String basezk = baseUrl.toString().replace(\"/solr\", \"/api\") + \"/cluster/zk/data\";\n    String basezkls = baseUrl.toString().replace(\"/solr\", \"/api\") + \"/cluster/zk/ls\";\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(baseUrl.toString()).build()) {\n      Object o = Utils.executeGET(client.getHttpClient(),\n          basezk + \"/security.json\",\n          Utils.JSONCONSUMER);\n      assertNotNull(o);\n      o = Utils.executeGET(client.getHttpClient(),\n          basezkls + \"/configs\",\n          Utils.JSONCONSUMER);\n      assertEquals(\"0\", String.valueOf(getObjectByPath(o, true, split(\":/configs:_default:dataLength\", ':'))));\n      assertEquals(\"0\", String.valueOf(getObjectByPath(o, true, split(\":/configs:conf:dataLength\", ':'))));\n\n      o = Utils.executeGET(client.getHttpClient(),\n          basezk + \"/configs\",\n          Utils.JSONCONSUMER);\n      assertTrue(((Map)o).containsKey(\"/configs\"));\n      assertNull(((Map)o).get(\"/configs\"));\n\n      byte[] bytes = new byte[1024 * 5];\n      for (int i = 0; i < bytes.length; i++) {\n        bytes[i] = (byte) random().nextInt(128);\n      }\n      cluster.getZkClient().create(\"/configs/_default/testdata\", bytes, CreateMode.PERSISTENT, true);\n      Utils.executeGET(client.getHttpClient(),\n          basezk + \"/configs/_default/testdata\",\n          is -> {\n            byte[] newBytes = new byte[bytes.length];\n            is.read(newBytes);\n            for (int i = 0; i < newBytes.length; i++) {\n              assertEquals(bytes[i], newBytes[i]);\n            }\n            return null;\n          });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cdbfc1e5714aafb41cabb055936a38ba4db5362":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0cdbfc1e5714aafb41cabb055936a38ba4db5362"]},"commit2Childs":{"0cdbfc1e5714aafb41cabb055936a38ba4db5362":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cdbfc1e5714aafb41cabb055936a38ba4db5362"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}