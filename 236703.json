{"path":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testStressLocks().mjava","commits":[{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testStressLocks().mjava","pathOld":"/dev/null","sourceNew":"  // Verify: do stress test, by opening IndexReaders and\n  // IndexWriters over & over in 2 threads and making sure\n  // no unexpected exceptions are raised:\n  public void testStressLocks() throws Exception {\n    Directory dir = getDirectory(createTempDir());\n    \n    // First create a 1 doc index:\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    addDoc(w);\n    w.close();\n    \n    WriterThread writer = new WriterThread(100, dir);\n    SearcherThread searcher = new SearcherThread(100, dir);\n    writer.start();\n    searcher.start();\n    \n    while(writer.isAlive() || searcher.isAlive()) {\n      Thread.sleep(1000);\n    }\n    \n    assertTrue(\"IndexWriter hit unexpected exceptions\", !writer.hitException);\n    assertTrue(\"IndexSearcher hit unexpected exceptions\", !searcher.hitException);\n    \n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"950882a2bd2a5f9dc16a154871584eaa643d882a","date":1436366563,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testStressLocks().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testStressLocks().mjava","sourceNew":"  // Verify: do stress test, by opening IndexReaders and\n  // IndexWriters over & over in 2 threads and making sure\n  // no unexpected exceptions are raised:\n  public void testStressLocks() throws Exception {\n    Directory dir = getDirectory(createTempDir());\n\n    // First create a 1 doc index:\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    addDoc(w);\n    w.close();\n    \n    WriterThread writer = new WriterThread(100, dir);\n    SearcherThread searcher = new SearcherThread(100, dir);\n    writer.start();\n    searcher.start();\n    \n    while(writer.isAlive() || searcher.isAlive()) {\n      Thread.sleep(1000);\n    }\n    \n    assertTrue(\"IndexWriter hit unexpected exceptions\", !writer.hitException);\n    assertTrue(\"IndexSearcher hit unexpected exceptions\", !searcher.hitException);\n    \n    dir.close();\n  }\n\n","sourceOld":"  // Verify: do stress test, by opening IndexReaders and\n  // IndexWriters over & over in 2 threads and making sure\n  // no unexpected exceptions are raised:\n  public void testStressLocks() throws Exception {\n    Directory dir = getDirectory(createTempDir());\n    \n    // First create a 1 doc index:\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    addDoc(w);\n    w.close();\n    \n    WriterThread writer = new WriterThread(100, dir);\n    SearcherThread searcher = new SearcherThread(100, dir);\n    writer.start();\n    searcher.start();\n    \n    while(writer.isAlive() || searcher.isAlive()) {\n      Thread.sleep(1000);\n    }\n    \n    assertTrue(\"IndexWriter hit unexpected exceptions\", !writer.hitException);\n    assertTrue(\"IndexSearcher hit unexpected exceptions\", !searcher.hitException);\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testStressLocks().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testStressLocks().mjava","sourceNew":"  // Verify: do stress test, by opening IndexReaders and\n  // IndexWriters over & over in 2 threads and making sure\n  // no unexpected exceptions are raised:\n  public void testStressLocks() throws Exception {\n    Path tempPath = createTempDir();\n    assumeFalse(\"test works with lock files\", TestUtil.hasVirusChecker(tempPath));\n    Directory dir = getDirectory(tempPath);\n\n    // First create a 1 doc index:\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    addDoc(w);\n    w.close();\n    \n    WriterThread writer = new WriterThread(100, dir);\n    SearcherThread searcher = new SearcherThread(100, dir);\n    writer.start();\n    searcher.start();\n    \n    while(writer.isAlive() || searcher.isAlive()) {\n      Thread.sleep(1000);\n    }\n    \n    assertTrue(\"IndexWriter hit unexpected exceptions\", !writer.hitException);\n    assertTrue(\"IndexSearcher hit unexpected exceptions\", !searcher.hitException);\n    \n    dir.close();\n  }\n\n","sourceOld":"  // Verify: do stress test, by opening IndexReaders and\n  // IndexWriters over & over in 2 threads and making sure\n  // no unexpected exceptions are raised:\n  public void testStressLocks() throws Exception {\n    Directory dir = getDirectory(createTempDir());\n\n    // First create a 1 doc index:\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    addDoc(w);\n    w.close();\n    \n    WriterThread writer = new WriterThread(100, dir);\n    SearcherThread searcher = new SearcherThread(100, dir);\n    writer.start();\n    searcher.start();\n    \n    while(writer.isAlive() || searcher.isAlive()) {\n      Thread.sleep(1000);\n    }\n    \n    assertTrue(\"IndexWriter hit unexpected exceptions\", !writer.hitException);\n    assertTrue(\"IndexSearcher hit unexpected exceptions\", !searcher.hitException);\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"34d6426cef006e0c3625cabe7a7ec1c2b08bc501","date":1454683374,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testStressLocks().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testStressLocks().mjava","sourceNew":"  // Verify: do stress test, by opening IndexReaders and\n  // IndexWriters over & over in 2 threads and making sure\n  // no unexpected exceptions are raised:\n  public void testStressLocks() throws Exception {\n    Path tempPath = createTempDir();\n    Directory dir = getDirectory(tempPath);\n\n    // First create a 1 doc index:\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    addDoc(w);\n    w.close();\n    \n    WriterThread writer = new WriterThread(100, dir);\n    SearcherThread searcher = new SearcherThread(100, dir);\n    writer.start();\n    searcher.start();\n    \n    while(writer.isAlive() || searcher.isAlive()) {\n      Thread.sleep(1000);\n    }\n    \n    assertTrue(\"IndexWriter hit unexpected exceptions\", !writer.hitException);\n    assertTrue(\"IndexSearcher hit unexpected exceptions\", !searcher.hitException);\n    \n    dir.close();\n  }\n\n","sourceOld":"  // Verify: do stress test, by opening IndexReaders and\n  // IndexWriters over & over in 2 threads and making sure\n  // no unexpected exceptions are raised:\n  public void testStressLocks() throws Exception {\n    Path tempPath = createTempDir();\n    assumeFalse(\"test works with lock files\", TestUtil.hasVirusChecker(tempPath));\n    Directory dir = getDirectory(tempPath);\n\n    // First create a 1 doc index:\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    addDoc(w);\n    w.close();\n    \n    WriterThread writer = new WriterThread(100, dir);\n    SearcherThread searcher = new SearcherThread(100, dir);\n    writer.start();\n    searcher.start();\n    \n    while(writer.isAlive() || searcher.isAlive()) {\n      Thread.sleep(1000);\n    }\n    \n    assertTrue(\"IndexWriter hit unexpected exceptions\", !writer.hitException);\n    assertTrue(\"IndexSearcher hit unexpected exceptions\", !searcher.hitException);\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6105d385afcbf42689e171e9bcea48d0c9ff6c","date":1454692764,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testStressLocks().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testStressLocks().mjava","sourceNew":"  // Verify: do stress test, by opening IndexReaders and\n  // IndexWriters over & over in 2 threads and making sure\n  // no unexpected exceptions are raised:\n  public void testStressLocks() throws Exception {\n    Path tempPath = createTempDir();\n    assumeFalse(\"cannot handle buggy Files.delete\", TestUtil.hasWindowsFS(tempPath));\n\n    Directory dir = getDirectory(tempPath);\n\n    // First create a 1 doc index:\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    addDoc(w);\n    w.close();\n    \n    WriterThread writer = new WriterThread(100, dir);\n    SearcherThread searcher = new SearcherThread(100, dir);\n    writer.start();\n    searcher.start();\n    \n    while(writer.isAlive() || searcher.isAlive()) {\n      Thread.sleep(1000);\n    }\n    \n    assertTrue(\"IndexWriter hit unexpected exceptions\", !writer.hitException);\n    assertTrue(\"IndexSearcher hit unexpected exceptions\", !searcher.hitException);\n    \n    dir.close();\n  }\n\n","sourceOld":"  // Verify: do stress test, by opening IndexReaders and\n  // IndexWriters over & over in 2 threads and making sure\n  // no unexpected exceptions are raised:\n  public void testStressLocks() throws Exception {\n    Path tempPath = createTempDir();\n    Directory dir = getDirectory(tempPath);\n\n    // First create a 1 doc index:\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    addDoc(w);\n    w.close();\n    \n    WriterThread writer = new WriterThread(100, dir);\n    SearcherThread searcher = new SearcherThread(100, dir);\n    writer.start();\n    searcher.start();\n    \n    while(writer.isAlive() || searcher.isAlive()) {\n      Thread.sleep(1000);\n    }\n    \n    assertTrue(\"IndexWriter hit unexpected exceptions\", !writer.hitException);\n    assertTrue(\"IndexSearcher hit unexpected exceptions\", !searcher.hitException);\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testStressLocks().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testStressLocks().mjava","sourceNew":"  // Verify: do stress test, by opening IndexReaders and\n  // IndexWriters over & over in 2 threads and making sure\n  // no unexpected exceptions are raised:\n  public void testStressLocks() throws Exception {\n    Path tempPath = createTempDir();\n    assumeFalse(\"cannot handle buggy Files.delete\", TestUtil.hasWindowsFS(tempPath));\n\n    Directory dir = getDirectory(tempPath);\n\n    // First create a 1 doc index:\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    addDoc(w);\n    w.close();\n    \n    WriterThread writer = new WriterThread(100, dir);\n    SearcherThread searcher = new SearcherThread(100, dir);\n    writer.start();\n    searcher.start();\n    \n    while(writer.isAlive() || searcher.isAlive()) {\n      Thread.sleep(1000);\n    }\n    \n    assertTrue(\"IndexWriter hit unexpected exceptions\", !writer.hitException);\n    assertTrue(\"IndexSearcher hit unexpected exceptions\", !searcher.hitException);\n    \n    dir.close();\n  }\n\n","sourceOld":"  // Verify: do stress test, by opening IndexReaders and\n  // IndexWriters over & over in 2 threads and making sure\n  // no unexpected exceptions are raised:\n  public void testStressLocks() throws Exception {\n    Directory dir = getDirectory(createTempDir());\n\n    // First create a 1 doc index:\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    addDoc(w);\n    w.close();\n    \n    WriterThread writer = new WriterThread(100, dir);\n    SearcherThread searcher = new SearcherThread(100, dir);\n    writer.start();\n    searcher.start();\n    \n    while(writer.isAlive() || searcher.isAlive()) {\n      Thread.sleep(1000);\n    }\n    \n    assertTrue(\"IndexWriter hit unexpected exceptions\", !writer.hitException);\n    assertTrue(\"IndexSearcher hit unexpected exceptions\", !searcher.hitException);\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testStressLocks().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testStressLocks().mjava","sourceNew":"  // Verify: do stress test, by opening IndexReaders and\n  // IndexWriters over & over in 2 threads and making sure\n  // no unexpected exceptions are raised:\n  public void testStressLocks() throws Exception {\n    Path tempPath = createTempDir();\n    assumeFalse(\"cannot handle buggy Files.delete\", TestUtil.hasWindowsFS(tempPath));\n\n    Directory dir = getDirectory(tempPath);\n\n    // First create a 1 doc index:\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    addDoc(w);\n    w.close();\n    \n    WriterThread writer = new WriterThread(100, dir);\n    SearcherThread searcher = new SearcherThread(100, dir);\n    writer.start();\n    searcher.start();\n    \n    while(writer.isAlive() || searcher.isAlive()) {\n      Thread.sleep(1000);\n    }\n    \n    assertTrue(\"IndexWriter hit unexpected exceptions\", !writer.hitException);\n    assertTrue(\"IndexSearcher hit unexpected exceptions\", !searcher.hitException);\n    \n    dir.close();\n  }\n\n","sourceOld":"  // Verify: do stress test, by opening IndexReaders and\n  // IndexWriters over & over in 2 threads and making sure\n  // no unexpected exceptions are raised:\n  public void testStressLocks() throws Exception {\n    Directory dir = getDirectory(createTempDir());\n\n    // First create a 1 doc index:\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    addDoc(w);\n    w.close();\n    \n    WriterThread writer = new WriterThread(100, dir);\n    SearcherThread searcher = new SearcherThread(100, dir);\n    writer.start();\n    searcher.start();\n    \n    while(writer.isAlive() || searcher.isAlive()) {\n      Thread.sleep(1000);\n    }\n    \n    assertTrue(\"IndexWriter hit unexpected exceptions\", !writer.hitException);\n    assertTrue(\"IndexSearcher hit unexpected exceptions\", !searcher.hitException);\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testStressLocks().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testStressLocks().mjava","sourceNew":"  // Verify: do stress test, by opening IndexReaders and\n  // IndexWriters over & over in 2 threads and making sure\n  // no unexpected exceptions are raised:\n  public void testStressLocks() throws Exception {\n    Path tempPath = createTempDir();\n    assumeFalse(\"cannot handle buggy Files.delete\", TestUtil.hasWindowsFS(tempPath));\n\n    Directory dir = getDirectory(tempPath);\n\n    // First create a 1 doc index:\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    addDoc(w);\n    w.close();\n    \n    WriterThread writer = new WriterThread(100, dir);\n    SearcherThread searcher = new SearcherThread(100, dir);\n    writer.start();\n    searcher.start();\n    \n    while(writer.isAlive() || searcher.isAlive()) {\n      Thread.sleep(1000);\n    }\n    \n    assertTrue(\"IndexWriter hit unexpected exceptions\", !writer.hitException);\n    assertTrue(\"IndexSearcher hit unexpected exceptions\", !searcher.hitException);\n    \n    dir.close();\n  }\n\n","sourceOld":"  // Verify: do stress test, by opening IndexReaders and\n  // IndexWriters over & over in 2 threads and making sure\n  // no unexpected exceptions are raised:\n  public void testStressLocks() throws Exception {\n    Directory dir = getDirectory(createTempDir());\n\n    // First create a 1 doc index:\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    addDoc(w);\n    w.close();\n    \n    WriterThread writer = new WriterThread(100, dir);\n    SearcherThread searcher = new SearcherThread(100, dir);\n    writer.start();\n    searcher.start();\n    \n    while(writer.isAlive() || searcher.isAlive()) {\n      Thread.sleep(1000);\n    }\n    \n    assertTrue(\"IndexWriter hit unexpected exceptions\", !writer.hitException);\n    assertTrue(\"IndexSearcher hit unexpected exceptions\", !searcher.hitException);\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4636d93693f8d76e3d5f6940b31bde2540d7354","date":1524737410,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testStressLocks().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testStressLocks().mjava","sourceNew":"  // Verify: do stress test, by opening IndexReaders and\n  // IndexWriters over & over in 2 threads and making sure\n  // no unexpected exceptions are raised:\n  public void testStressLocks() throws Exception {\n    Path tempPath = createTempDir();\n    assumeFalse(\"cannot handle buggy Files.delete\", TestUtil.hasWindowsFS(tempPath));\n\n    Directory dir = getDirectory(tempPath);\n\n    // First create a 1 doc index:\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    addDoc(w);\n    w.close();\n    \n    WriterThread writer = new WriterThread(100, dir);\n    SearcherThread searcher = new SearcherThread(100, dir);\n    writer.start();\n    searcher.start();\n\n    writer.join();\n    searcher.join();\n\n    assertTrue(\"IndexWriter hit unexpected exceptions\", !writer.hitException);\n    assertTrue(\"IndexSearcher hit unexpected exceptions\", !searcher.hitException);\n    \n    dir.close();\n  }\n\n","sourceOld":"  // Verify: do stress test, by opening IndexReaders and\n  // IndexWriters over & over in 2 threads and making sure\n  // no unexpected exceptions are raised:\n  public void testStressLocks() throws Exception {\n    Path tempPath = createTempDir();\n    assumeFalse(\"cannot handle buggy Files.delete\", TestUtil.hasWindowsFS(tempPath));\n\n    Directory dir = getDirectory(tempPath);\n\n    // First create a 1 doc index:\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    addDoc(w);\n    w.close();\n    \n    WriterThread writer = new WriterThread(100, dir);\n    SearcherThread searcher = new SearcherThread(100, dir);\n    writer.start();\n    searcher.start();\n    \n    while(writer.isAlive() || searcher.isAlive()) {\n      Thread.sleep(1000);\n    }\n    \n    assertTrue(\"IndexWriter hit unexpected exceptions\", !writer.hitException);\n    assertTrue(\"IndexSearcher hit unexpected exceptions\", !searcher.hitException);\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testStressLocks().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseLockFactoryTestCase#testStressLocks().mjava","sourceNew":"  // Verify: do stress test, by opening IndexReaders and\n  // IndexWriters over & over in 2 threads and making sure\n  // no unexpected exceptions are raised:\n  public void testStressLocks() throws Exception {\n    Path tempPath = createTempDir();\n    assumeFalse(\"cannot handle buggy Files.delete\", TestUtil.hasWindowsFS(tempPath));\n\n    Directory dir = getDirectory(tempPath);\n\n    // First create a 1 doc index:\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    addDoc(w);\n    w.close();\n    \n    int numIterations = atLeast(20);\n    WriterThread writer = new WriterThread(numIterations, dir);\n    SearcherThread searcher = new SearcherThread(numIterations, dir);\n    writer.start();\n    searcher.start();\n\n    writer.join();\n    searcher.join();\n\n    assertTrue(\"IndexWriter hit unexpected exceptions\", !writer.hitException);\n    assertTrue(\"IndexSearcher hit unexpected exceptions\", !searcher.hitException);\n    \n    dir.close();\n  }\n\n","sourceOld":"  // Verify: do stress test, by opening IndexReaders and\n  // IndexWriters over & over in 2 threads and making sure\n  // no unexpected exceptions are raised:\n  public void testStressLocks() throws Exception {\n    Path tempPath = createTempDir();\n    assumeFalse(\"cannot handle buggy Files.delete\", TestUtil.hasWindowsFS(tempPath));\n\n    Directory dir = getDirectory(tempPath);\n\n    // First create a 1 doc index:\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n    addDoc(w);\n    w.close();\n    \n    WriterThread writer = new WriterThread(100, dir);\n    SearcherThread searcher = new SearcherThread(100, dir);\n    writer.start();\n    searcher.start();\n\n    writer.join();\n    searcher.join();\n\n    assertTrue(\"IndexWriter hit unexpected exceptions\", !writer.hitException);\n    assertTrue(\"IndexSearcher hit unexpected exceptions\", !searcher.hitException);\n    \n    dir.close();\n  }\n\n","bugFix":["618635065f043788c9e034f96ca5cd5cea1b4592"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"1e6105d385afcbf42689e171e9bcea48d0c9ff6c":["34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"5a207d19eac354d649c3f0e2cce070017c78125e":["950882a2bd2a5f9dc16a154871584eaa643d882a","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["950882a2bd2a5f9dc16a154871584eaa643d882a","1e6105d385afcbf42689e171e9bcea48d0c9ff6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["950882a2bd2a5f9dc16a154871584eaa643d882a","b470f36a9372c97283360b1304eacbde22df6c0d"],"950882a2bd2a5f9dc16a154871584eaa643d882a":["618635065f043788c9e034f96ca5cd5cea1b4592"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["950882a2bd2a5f9dc16a154871584eaa643d882a"],"c4636d93693f8d76e3d5f6940b31bde2540d7354":["5a207d19eac354d649c3f0e2cce070017c78125e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71da933d30aea361ccc224d6544c451cbf49916d"],"71da933d30aea361ccc224d6544c451cbf49916d":["c4636d93693f8d76e3d5f6940b31bde2540d7354"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["950882a2bd2a5f9dc16a154871584eaa643d882a"],"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["1e6105d385afcbf42689e171e9bcea48d0c9ff6c"],"1e6105d385afcbf42689e171e9bcea48d0c9ff6c":["b470f36a9372c97283360b1304eacbde22df6c0d"],"5a207d19eac354d649c3f0e2cce070017c78125e":["c4636d93693f8d76e3d5f6940b31bde2540d7354"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["618635065f043788c9e034f96ca5cd5cea1b4592"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"950882a2bd2a5f9dc16a154871584eaa643d882a":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"c4636d93693f8d76e3d5f6940b31bde2540d7354":["71da933d30aea361ccc224d6544c451cbf49916d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"71da933d30aea361ccc224d6544c451cbf49916d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}