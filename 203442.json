{"path":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","commits":[{"id":"68d031127d4e6ad6d28814a234474b03d6d605cf","date":1292713983,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#setUp().mjava","sourceNew":"\t@BeforeClass\n\tpublic static void beforeClass() throws Exception {\n\t  // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n\t  Analyzer analyzer=new MockAnalyzer(MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false); \n    //initialize the parser\n\t  builder=new CorePlusExtensionsParser(\"contents\",analyzer);\n\t\t\n\t\t\tBufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\"))); \n\t\t\tdir=newDirectory();\n\t\t\tIndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n\t\t\tString line = d.readLine();\t\t\n\t\t\twhile(line!=null)\n\t\t\t{\n\t\t\t\tint endOfDate=line.indexOf('\\t');\n\t\t\t\tString date=line.substring(0,endOfDate).trim();\n\t\t\t\tString content=line.substring(endOfDate).trim();\n\t\t\t\torg.apache.lucene.document.Document doc =new org.apache.lucene.document.Document();\n\t\t\t\tdoc.add(newField(\"date\",date,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tdoc.add(newField(\"contents\",content,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tNumericField numericField = new NumericField(\"date2\");\n\t\t\t\tnumericField.setIntValue(Integer.valueOf(date));\n\t\t\t\tdoc.add(numericField);\n\t\t\t\twriter.addDocument(doc);\n\t\t\t\tline=d.readLine();\n\t\t\t}\t\t\t\n\t\t\td.close();\n      writer.close();\n\t\treader=IndexReader.open(dir, true);\n\t\tsearcher=new IndexSearcher(reader);\n\t\t\n\t}\n\n","sourceOld":"\t/*\n\t * @see TestCase#setUp()\n\t */\n\t@Override\n\tpublic void setUp() throws Exception {\n\t\tsuper.setUp();\n\t\t\n\t\t//initialize the parser\n\t\tbuilder=new CorePlusExtensionsParser(\"contents\",analyzer);\n\t\t\n\t\t\tBufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\"))); \n\t\t\tdir=newDirectory();\n\t\t\tIndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n\t\t\tString line = d.readLine();\t\t\n\t\t\twhile(line!=null)\n\t\t\t{\n\t\t\t\tint endOfDate=line.indexOf('\\t');\n\t\t\t\tString date=line.substring(0,endOfDate).trim();\n\t\t\t\tString content=line.substring(endOfDate).trim();\n\t\t\t\torg.apache.lucene.document.Document doc =new org.apache.lucene.document.Document();\n\t\t\t\tdoc.add(newField(\"date\",date,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tdoc.add(newField(\"contents\",content,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tNumericField numericField = new NumericField(\"date2\");\n\t\t\t\tnumericField.setIntValue(Integer.valueOf(date));\n\t\t\t\tdoc.add(numericField);\n\t\t\t\twriter.addDocument(doc);\n\t\t\t\tline=d.readLine();\n\t\t\t}\t\t\t\n\t\t\td.close();\n      writer.close();\n\t\treader=IndexReader.open(dir, true);\n\t\tsearcher=new IndexSearcher(reader);\n\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#setUp().mjava","sourceNew":"\t@BeforeClass\n\tpublic static void beforeClass() throws Exception {\n\t  // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n\t  Analyzer analyzer=new MockAnalyzer(MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false); \n    //initialize the parser\n\t  builder=new CorePlusExtensionsParser(\"contents\",analyzer);\n\t\t\n\t\t\tBufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\"))); \n\t\t\tdir=newDirectory();\n\t\t\tIndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n\t\t\tString line = d.readLine();\t\t\n\t\t\twhile(line!=null)\n\t\t\t{\n\t\t\t\tint endOfDate=line.indexOf('\\t');\n\t\t\t\tString date=line.substring(0,endOfDate).trim();\n\t\t\t\tString content=line.substring(endOfDate).trim();\n\t\t\t\torg.apache.lucene.document.Document doc =new org.apache.lucene.document.Document();\n\t\t\t\tdoc.add(newField(\"date\",date,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tdoc.add(newField(\"contents\",content,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tNumericField numericField = new NumericField(\"date2\");\n\t\t\t\tnumericField.setIntValue(Integer.valueOf(date));\n\t\t\t\tdoc.add(numericField);\n\t\t\t\twriter.addDocument(doc);\n\t\t\t\tline=d.readLine();\n\t\t\t}\t\t\t\n\t\t\td.close();\n      writer.close();\n\t\treader=IndexReader.open(dir, true);\n\t\tsearcher=new IndexSearcher(reader);\n\t\t\n\t}\n\n","sourceOld":"\t/*\n\t * @see TestCase#setUp()\n\t */\n\t@Override\n\tpublic void setUp() throws Exception {\n\t\tsuper.setUp();\n\t\t\n\t\t//initialize the parser\n\t\tbuilder=new CorePlusExtensionsParser(\"contents\",analyzer);\n\t\t\n\t\t\tBufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\"))); \n\t\t\tdir=newDirectory();\n\t\t\tIndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n\t\t\tString line = d.readLine();\t\t\n\t\t\twhile(line!=null)\n\t\t\t{\n\t\t\t\tint endOfDate=line.indexOf('\\t');\n\t\t\t\tString date=line.substring(0,endOfDate).trim();\n\t\t\t\tString content=line.substring(endOfDate).trim();\n\t\t\t\torg.apache.lucene.document.Document doc =new org.apache.lucene.document.Document();\n\t\t\t\tdoc.add(newField(\"date\",date,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tdoc.add(newField(\"contents\",content,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tNumericField numericField = new NumericField(\"date2\");\n\t\t\t\tnumericField.setIntValue(Integer.valueOf(date));\n\t\t\t\tdoc.add(numericField);\n\t\t\t\twriter.addDocument(doc);\n\t\t\t\tline=d.readLine();\n\t\t\t}\t\t\t\n\t\t\td.close();\n      writer.close();\n\t\treader=IndexReader.open(dir, true);\n\t\tsearcher=new IndexSearcher(reader);\n\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"\t@BeforeClass\n\tpublic static void beforeClass() throws Exception {\n\t  // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n\t  Analyzer analyzer=new MockAnalyzer(MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false); \n    //initialize the parser\n\t  builder=new CorePlusExtensionsParser(\"contents\",analyzer);\n\t\t\n\t\t\tBufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\"))); \n\t\t\tdir=newDirectory();\n\t\t\tIndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n\t\t\tString line = d.readLine();\t\t\n\t\t\twhile(line!=null)\n\t\t\t{\n\t\t\t\tint endOfDate=line.indexOf('\\t');\n\t\t\t\tString date=line.substring(0,endOfDate).trim();\n\t\t\t\tString content=line.substring(endOfDate).trim();\n\t\t\t\torg.apache.lucene.document.Document doc =new org.apache.lucene.document.Document();\n\t\t\t\tdoc.add(newField(\"date\",date,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tdoc.add(newField(\"contents\",content,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tNumericField numericField = new NumericField(\"date2\");\n\t\t\t\tnumericField.setIntValue(Integer.valueOf(date));\n\t\t\t\tdoc.add(numericField);\n\t\t\t\twriter.addDocument(doc);\n\t\t\t\tline=d.readLine();\n\t\t\t}\t\t\t\n\t\t\td.close();\n      writer.close();\n\t\treader=IndexReader.open(dir, true);\n\t\tsearcher=new IndexSearcher(reader);\n\t\t\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","sourceNew":"\t@BeforeClass\n\tpublic static void beforeClass() throws Exception {\n\t  // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n\t  Analyzer analyzer=new MockAnalyzer(MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false); \n    //initialize the parser\n\t  builder=new CorePlusExtensionsParser(\"contents\",analyzer);\n\t\t\n\t\t\tBufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\"))); \n\t\t\tdir=newDirectory();\n\t\t\tIndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n\t\t\tString line = d.readLine();\t\t\n\t\t\twhile(line!=null)\n\t\t\t{\n\t\t\t\tint endOfDate=line.indexOf('\\t');\n\t\t\t\tString date=line.substring(0,endOfDate).trim();\n\t\t\t\tString content=line.substring(endOfDate).trim();\n\t\t\t\torg.apache.lucene.document.Document doc =new org.apache.lucene.document.Document();\n\t\t\t\tdoc.add(newField(\"date\",date,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tdoc.add(newField(\"contents\",content,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tNumericField numericField = new NumericField(\"date2\");\n\t\t\t\tnumericField.setIntValue(Integer.valueOf(date));\n\t\t\t\tdoc.add(numericField);\n\t\t\t\twriter.addDocument(doc);\n\t\t\t\tline=d.readLine();\n\t\t\t}\t\t\t\n\t\t\td.close();\n      writer.close();\n\t\treader=IndexReader.open(dir, true);\n\t\tsearcher=newSearcher(reader);\n\t\t\n\t}\n\n","sourceOld":"\t@BeforeClass\n\tpublic static void beforeClass() throws Exception {\n\t  // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n\t  Analyzer analyzer=new MockAnalyzer(MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false); \n    //initialize the parser\n\t  builder=new CorePlusExtensionsParser(\"contents\",analyzer);\n\t\t\n\t\t\tBufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\"))); \n\t\t\tdir=newDirectory();\n\t\t\tIndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n\t\t\tString line = d.readLine();\t\t\n\t\t\twhile(line!=null)\n\t\t\t{\n\t\t\t\tint endOfDate=line.indexOf('\\t');\n\t\t\t\tString date=line.substring(0,endOfDate).trim();\n\t\t\t\tString content=line.substring(endOfDate).trim();\n\t\t\t\torg.apache.lucene.document.Document doc =new org.apache.lucene.document.Document();\n\t\t\t\tdoc.add(newField(\"date\",date,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tdoc.add(newField(\"contents\",content,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tNumericField numericField = new NumericField(\"date2\");\n\t\t\t\tnumericField.setIntValue(Integer.valueOf(date));\n\t\t\t\tdoc.add(numericField);\n\t\t\t\twriter.addDocument(doc);\n\t\t\t\tline=d.readLine();\n\t\t\t}\t\t\t\n\t\t\td.close();\n      writer.close();\n\t\treader=IndexReader.open(dir, true);\n\t\tsearcher=new IndexSearcher(reader);\n\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","sourceNew":"\t@BeforeClass\n\tpublic static void beforeClass() throws Exception {\n\t  // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n\t  Analyzer analyzer=new MockAnalyzer(MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false); \n    //initialize the parser\n\t  builder=new CorePlusExtensionsParser(\"contents\",analyzer);\n\t\t\n\t\t\tBufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\"))); \n\t\t\tdir=newDirectory();\n\t\t\tIndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n\t\t\tString line = d.readLine();\t\t\n\t\t\twhile(line!=null)\n\t\t\t{\n\t\t\t\tint endOfDate=line.indexOf('\\t');\n\t\t\t\tString date=line.substring(0,endOfDate).trim();\n\t\t\t\tString content=line.substring(endOfDate).trim();\n\t\t\t\torg.apache.lucene.document.Document doc =new org.apache.lucene.document.Document();\n\t\t\t\tdoc.add(newField(\"date\",date,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tdoc.add(newField(\"contents\",content,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tNumericField numericField = new NumericField(\"date2\");\n\t\t\t\tnumericField.setIntValue(Integer.valueOf(date));\n\t\t\t\tdoc.add(numericField);\n\t\t\t\twriter.addDocument(doc);\n\t\t\t\tline=d.readLine();\n\t\t\t}\t\t\t\n\t\t\td.close();\n      writer.close();\n\t\treader=IndexReader.open(dir, true);\n\t\tsearcher=newSearcher(reader);\n\t\t\n\t}\n\n","sourceOld":"\t@BeforeClass\n\tpublic static void beforeClass() throws Exception {\n\t  // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n\t  Analyzer analyzer=new MockAnalyzer(MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false); \n    //initialize the parser\n\t  builder=new CorePlusExtensionsParser(\"contents\",analyzer);\n\t\t\n\t\t\tBufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\"))); \n\t\t\tdir=newDirectory();\n\t\t\tIndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n\t\t\tString line = d.readLine();\t\t\n\t\t\twhile(line!=null)\n\t\t\t{\n\t\t\t\tint endOfDate=line.indexOf('\\t');\n\t\t\t\tString date=line.substring(0,endOfDate).trim();\n\t\t\t\tString content=line.substring(endOfDate).trim();\n\t\t\t\torg.apache.lucene.document.Document doc =new org.apache.lucene.document.Document();\n\t\t\t\tdoc.add(newField(\"date\",date,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tdoc.add(newField(\"contents\",content,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tNumericField numericField = new NumericField(\"date2\");\n\t\t\t\tnumericField.setIntValue(Integer.valueOf(date));\n\t\t\t\tdoc.add(numericField);\n\t\t\t\twriter.addDocument(doc);\n\t\t\t\tline=d.readLine();\n\t\t\t}\t\t\t\n\t\t\td.close();\n      writer.close();\n\t\treader=IndexReader.open(dir, true);\n\t\tsearcher=new IndexSearcher(reader);\n\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","sourceNew":"\t@BeforeClass\n\tpublic static void beforeClass() throws Exception {\n\t  // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n\t  Analyzer analyzer=new MockAnalyzer(MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false); \n    //initialize the parser\n\t  builder=new CorePlusExtensionsParser(\"contents\",analyzer);\n\t\t\n\t\t\tBufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\"))); \n\t\t\tdir=newDirectory();\n\t\t\tIndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n\t\t\tString line = d.readLine();\t\t\n\t\t\twhile(line!=null)\n\t\t\t{\n\t\t\t\tint endOfDate=line.indexOf('\\t');\n\t\t\t\tString date=line.substring(0,endOfDate).trim();\n\t\t\t\tString content=line.substring(endOfDate).trim();\n\t\t\t\torg.apache.lucene.document.Document doc =new org.apache.lucene.document.Document();\n\t\t\t\tdoc.add(newField(\"date\",date,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tdoc.add(newField(\"contents\",content,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tNumericField numericField = new NumericField(\"date2\");\n\t\t\t\tnumericField.setIntValue(Integer.valueOf(date));\n\t\t\t\tdoc.add(numericField);\n\t\t\t\twriter.addDocument(doc);\n\t\t\t\tline=d.readLine();\n\t\t\t}\t\t\t\n\t\t\td.close();\n      writer.close();\n\t\treader=IndexReader.open(dir, true);\n\t\tsearcher=newSearcher(reader);\n\t\t\n\t}\n\n","sourceOld":"\t@BeforeClass\n\tpublic static void beforeClass() throws Exception {\n\t  // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n\t  Analyzer analyzer=new MockAnalyzer(MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false); \n    //initialize the parser\n\t  builder=new CorePlusExtensionsParser(\"contents\",analyzer);\n\t\t\n\t\t\tBufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\"))); \n\t\t\tdir=newDirectory();\n\t\t\tIndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n\t\t\tString line = d.readLine();\t\t\n\t\t\twhile(line!=null)\n\t\t\t{\n\t\t\t\tint endOfDate=line.indexOf('\\t');\n\t\t\t\tString date=line.substring(0,endOfDate).trim();\n\t\t\t\tString content=line.substring(endOfDate).trim();\n\t\t\t\torg.apache.lucene.document.Document doc =new org.apache.lucene.document.Document();\n\t\t\t\tdoc.add(newField(\"date\",date,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tdoc.add(newField(\"contents\",content,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tNumericField numericField = new NumericField(\"date2\");\n\t\t\t\tnumericField.setIntValue(Integer.valueOf(date));\n\t\t\t\tdoc.add(numericField);\n\t\t\t\twriter.addDocument(doc);\n\t\t\t\tline=d.readLine();\n\t\t\t}\t\t\t\n\t\t\td.close();\n      writer.close();\n\t\treader=IndexReader.open(dir, true);\n\t\tsearcher=new IndexSearcher(reader);\n\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","sourceNew":"\t@BeforeClass\n\tpublic static void beforeClass() throws Exception {\n\t  // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n\t  Analyzer analyzer=new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false); \n    //initialize the parser\n\t  builder=new CorePlusExtensionsParser(\"contents\",analyzer);\n\t\t\n\t\t\tBufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\"))); \n\t\t\tdir=newDirectory();\n\t\t\tIndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n\t\t\tString line = d.readLine();\t\t\n\t\t\twhile(line!=null)\n\t\t\t{\n\t\t\t\tint endOfDate=line.indexOf('\\t');\n\t\t\t\tString date=line.substring(0,endOfDate).trim();\n\t\t\t\tString content=line.substring(endOfDate).trim();\n\t\t\t\torg.apache.lucene.document.Document doc =new org.apache.lucene.document.Document();\n\t\t\t\tdoc.add(newField(\"date\",date,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tdoc.add(newField(\"contents\",content,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tNumericField numericField = new NumericField(\"date2\");\n\t\t\t\tnumericField.setIntValue(Integer.valueOf(date));\n\t\t\t\tdoc.add(numericField);\n\t\t\t\twriter.addDocument(doc);\n\t\t\t\tline=d.readLine();\n\t\t\t}\t\t\t\n\t\t\td.close();\n      writer.close();\n\t\treader=IndexReader.open(dir, true);\n\t\tsearcher=newSearcher(reader);\n\t\t\n\t}\n\n","sourceOld":"\t@BeforeClass\n\tpublic static void beforeClass() throws Exception {\n\t  // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n\t  Analyzer analyzer=new MockAnalyzer(MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false); \n    //initialize the parser\n\t  builder=new CorePlusExtensionsParser(\"contents\",analyzer);\n\t\t\n\t\t\tBufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\"))); \n\t\t\tdir=newDirectory();\n\t\t\tIndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n\t\t\tString line = d.readLine();\t\t\n\t\t\twhile(line!=null)\n\t\t\t{\n\t\t\t\tint endOfDate=line.indexOf('\\t');\n\t\t\t\tString date=line.substring(0,endOfDate).trim();\n\t\t\t\tString content=line.substring(endOfDate).trim();\n\t\t\t\torg.apache.lucene.document.Document doc =new org.apache.lucene.document.Document();\n\t\t\t\tdoc.add(newField(\"date\",date,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tdoc.add(newField(\"contents\",content,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tNumericField numericField = new NumericField(\"date2\");\n\t\t\t\tnumericField.setIntValue(Integer.valueOf(date));\n\t\t\t\tdoc.add(numericField);\n\t\t\t\twriter.addDocument(doc);\n\t\t\t\tline=d.readLine();\n\t\t\t}\t\t\t\n\t\t\td.close();\n      writer.close();\n\t\treader=IndexReader.open(dir, true);\n\t\tsearcher=newSearcher(reader);\n\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","sourceNew":"\t@BeforeClass\n\tpublic static void beforeClass() throws Exception {\n\t  // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n\t  Analyzer analyzer=new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false); \n    //initialize the parser\n\t  builder=new CorePlusExtensionsParser(\"contents\",analyzer);\n\t\t\n\t\t\tBufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\"))); \n\t\t\tdir=newDirectory();\n\t\t\tIndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n\t\t\tString line = d.readLine();\t\t\n\t\t\twhile(line!=null)\n\t\t\t{\n\t\t\t\tint endOfDate=line.indexOf('\\t');\n\t\t\t\tString date=line.substring(0,endOfDate).trim();\n\t\t\t\tString content=line.substring(endOfDate).trim();\n\t\t\t\torg.apache.lucene.document.Document doc =new org.apache.lucene.document.Document();\n\t\t\t\tdoc.add(newField(\"date\",date,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tdoc.add(newField(\"contents\",content,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tNumericField numericField = new NumericField(\"date2\");\n\t\t\t\tnumericField.setIntValue(Integer.valueOf(date));\n\t\t\t\tdoc.add(numericField);\n\t\t\t\twriter.addDocument(doc);\n\t\t\t\tline=d.readLine();\n\t\t\t}\t\t\t\n\t\t\td.close();\n      writer.close();\n\t\treader=IndexReader.open(dir, true);\n\t\tsearcher=newSearcher(reader);\n\t\t\n\t}\n\n","sourceOld":"\t@BeforeClass\n\tpublic static void beforeClass() throws Exception {\n\t  // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n\t  Analyzer analyzer=new MockAnalyzer(MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false); \n    //initialize the parser\n\t  builder=new CorePlusExtensionsParser(\"contents\",analyzer);\n\t\t\n\t\t\tBufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\"))); \n\t\t\tdir=newDirectory();\n\t\t\tIndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n\t\t\tString line = d.readLine();\t\t\n\t\t\twhile(line!=null)\n\t\t\t{\n\t\t\t\tint endOfDate=line.indexOf('\\t');\n\t\t\t\tString date=line.substring(0,endOfDate).trim();\n\t\t\t\tString content=line.substring(endOfDate).trim();\n\t\t\t\torg.apache.lucene.document.Document doc =new org.apache.lucene.document.Document();\n\t\t\t\tdoc.add(newField(\"date\",date,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tdoc.add(newField(\"contents\",content,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tNumericField numericField = new NumericField(\"date2\");\n\t\t\t\tnumericField.setIntValue(Integer.valueOf(date));\n\t\t\t\tdoc.add(numericField);\n\t\t\t\twriter.addDocument(doc);\n\t\t\t\tline=d.readLine();\n\t\t\t}\t\t\t\n\t\t\td.close();\n      writer.close();\n\t\treader=IndexReader.open(dir, true);\n\t\tsearcher=newSearcher(reader);\n\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","sourceNew":"\t@BeforeClass\n\tpublic static void beforeClass() throws Exception {\n\t  // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n\t  Analyzer analyzer=new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false); \n    //initialize the parser\n\t  builder=new CorePlusExtensionsParser(\"contents\",analyzer);\n\t\t\n\t\t\tBufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\"))); \n\t\t\tdir=newDirectory();\n\t\t\tIndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n\t\t\tString line = d.readLine();\t\t\n\t\t\twhile(line!=null)\n\t\t\t{\n\t\t\t\tint endOfDate=line.indexOf('\\t');\n\t\t\t\tString date=line.substring(0,endOfDate).trim();\n\t\t\t\tString content=line.substring(endOfDate).trim();\n\t\t\t\torg.apache.lucene.document.Document doc =new org.apache.lucene.document.Document();\n\t\t\t\tdoc.add(newField(\"date\",date,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tdoc.add(newField(\"contents\",content,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tNumericField numericField = new NumericField(\"date2\");\n\t\t\t\tnumericField.setIntValue(Integer.valueOf(date));\n\t\t\t\tdoc.add(numericField);\n\t\t\t\twriter.addDocument(doc);\n\t\t\t\tline=d.readLine();\n\t\t\t}\t\t\t\n\t\t\td.close();\n      writer.close();\n\t\treader=IndexReader.open(dir, true);\n\t\tsearcher=newSearcher(reader);\n\t\t\n\t}\n\n","sourceOld":"\t@BeforeClass\n\tpublic static void beforeClass() throws Exception {\n\t  // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n\t  Analyzer analyzer=new MockAnalyzer(MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false); \n    //initialize the parser\n\t  builder=new CorePlusExtensionsParser(\"contents\",analyzer);\n\t\t\n\t\t\tBufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\"))); \n\t\t\tdir=newDirectory();\n\t\t\tIndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n\t\t\tString line = d.readLine();\t\t\n\t\t\twhile(line!=null)\n\t\t\t{\n\t\t\t\tint endOfDate=line.indexOf('\\t');\n\t\t\t\tString date=line.substring(0,endOfDate).trim();\n\t\t\t\tString content=line.substring(endOfDate).trim();\n\t\t\t\torg.apache.lucene.document.Document doc =new org.apache.lucene.document.Document();\n\t\t\t\tdoc.add(newField(\"date\",date,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tdoc.add(newField(\"contents\",content,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tNumericField numericField = new NumericField(\"date2\");\n\t\t\t\tnumericField.setIntValue(Integer.valueOf(date));\n\t\t\t\tdoc.add(numericField);\n\t\t\t\twriter.addDocument(doc);\n\t\t\t\tline=d.readLine();\n\t\t\t}\t\t\t\n\t\t\td.close();\n      writer.close();\n\t\treader=IndexReader.open(dir, true);\n\t\tsearcher=newSearcher(reader);\n\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","sourceNew":"\t@BeforeClass\n\tpublic static void beforeClass() throws Exception {\n\t  // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n\t  Analyzer analyzer=new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false); \n    //initialize the parser\n\t  builder=new CorePlusExtensionsParser(\"contents\",analyzer);\n\t\t\n\t\t\tBufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\"))); \n\t\t\tdir=newDirectory();\n\t\t\tIndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n\t\t\tString line = d.readLine();\t\t\n\t\t\twhile(line!=null)\n\t\t\t{\n\t\t\t\tint endOfDate=line.indexOf('\\t');\n\t\t\t\tString date=line.substring(0,endOfDate).trim();\n\t\t\t\tString content=line.substring(endOfDate).trim();\n\t\t\t\torg.apache.lucene.document.Document doc =new org.apache.lucene.document.Document();\n\t\t\t\tdoc.add(newField(\"date\",date,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tdoc.add(newField(\"contents\",content,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tNumericField numericField = new NumericField(\"date2\");\n\t\t\t\tnumericField.setIntValue(Integer.valueOf(date));\n\t\t\t\tdoc.add(numericField);\n\t\t\t\twriter.addDocument(doc);\n\t\t\t\tline=d.readLine();\n\t\t\t}\t\t\t\n\t\t\td.close();\n      writer.close();\n\t\treader=IndexReader.open(dir, true);\n\t\tsearcher=newSearcher(reader);\n\t\t\n\t}\n\n","sourceOld":"\t@BeforeClass\n\tpublic static void beforeClass() throws Exception {\n\t  // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n\t  Analyzer analyzer=new MockAnalyzer(MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false); \n    //initialize the parser\n\t  builder=new CorePlusExtensionsParser(\"contents\",analyzer);\n\t\t\n\t\t\tBufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\"))); \n\t\t\tdir=newDirectory();\n\t\t\tIndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n\t\t\tString line = d.readLine();\t\t\n\t\t\twhile(line!=null)\n\t\t\t{\n\t\t\t\tint endOfDate=line.indexOf('\\t');\n\t\t\t\tString date=line.substring(0,endOfDate).trim();\n\t\t\t\tString content=line.substring(endOfDate).trim();\n\t\t\t\torg.apache.lucene.document.Document doc =new org.apache.lucene.document.Document();\n\t\t\t\tdoc.add(newField(\"date\",date,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tdoc.add(newField(\"contents\",content,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tNumericField numericField = new NumericField(\"date2\");\n\t\t\t\tnumericField.setIntValue(Integer.valueOf(date));\n\t\t\t\tdoc.add(numericField);\n\t\t\t\twriter.addDocument(doc);\n\t\t\t\tline=d.readLine();\n\t\t\t}\t\t\t\n\t\t\td.close();\n      writer.close();\n\t\treader=IndexReader.open(dir, true);\n\t\tsearcher=newSearcher(reader);\n\t\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2","date":1313460667,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      org.apache.lucene.document.Document doc = new org.apache.lucene.document.Document();\n      doc.add(newField(\"date\", date, Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(newField(\"contents\", content, Field.Store.YES, Field.Index.ANALYZED));\n      NumericField numericField = new NumericField(\"date2\");\n      numericField.setIntValue(Integer.valueOf(date));\n      doc.add(numericField);\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"\t@BeforeClass\n\tpublic static void beforeClass() throws Exception {\n\t  // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n\t  Analyzer analyzer=new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false); \n    //initialize the parser\n\t  builder=new CorePlusExtensionsParser(\"contents\",analyzer);\n\t\t\n\t\t\tBufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\"))); \n\t\t\tdir=newDirectory();\n\t\t\tIndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n\t\t\tString line = d.readLine();\t\t\n\t\t\twhile(line!=null)\n\t\t\t{\n\t\t\t\tint endOfDate=line.indexOf('\\t');\n\t\t\t\tString date=line.substring(0,endOfDate).trim();\n\t\t\t\tString content=line.substring(endOfDate).trim();\n\t\t\t\torg.apache.lucene.document.Document doc =new org.apache.lucene.document.Document();\n\t\t\t\tdoc.add(newField(\"date\",date,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tdoc.add(newField(\"contents\",content,Field.Store.YES,Field.Index.ANALYZED));\n\t\t\t\tNumericField numericField = new NumericField(\"date2\");\n\t\t\t\tnumericField.setIntValue(Integer.valueOf(date));\n\t\t\t\tdoc.add(numericField);\n\t\t\t\twriter.addDocument(doc);\n\t\t\t\tline=d.readLine();\n\t\t\t}\t\t\t\n\t\t\td.close();\n      writer.close();\n\t\treader=IndexReader.open(dir, true);\n\t\tsearcher=newSearcher(reader);\n\t\t\n\t}\n\n","bugFix":null,"bugIntro":["0bf41419d452997826ec5f17684993377be77f49","fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      NumericField numericField = new NumericField(\"date2\");\n      numericField.setIntValue(Integer.valueOf(date));\n      doc.add(numericField);\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      org.apache.lucene.document.Document doc = new org.apache.lucene.document.Document();\n      doc.add(newField(\"date\", date, Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(newField(\"contents\", content, Field.Store.YES, Field.Index.ANALYZED));\n      NumericField numericField = new NumericField(\"date2\");\n      numericField.setIntValue(Integer.valueOf(date));\n      doc.add(numericField);\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"251550f5d19b526a76f8c5126ae7bb2d22cf8935","date":1315202008,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      NumericField numericField = new NumericField(\"date2\");\n      numericField.setIntValue(Integer.valueOf(date));\n      doc.add(numericField);\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      NumericField numericField = new NumericField(\"date2\");\n      numericField.setIntValue(Integer.valueOf(date));\n      doc.add(numericField);\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","68d031127d4e6ad6d28814a234474b03d6d605cf"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","68d031127d4e6ad6d28814a234474b03d6d605cf"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["68d031127d4e6ad6d28814a234474b03d6d605cf"],"68d031127d4e6ad6d28814a234474b03d6d605cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"]},"commit2Childs":{"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"68d031127d4e6ad6d28814a234474b03d6d605cf":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","68d031127d4e6ad6d28814a234474b03d6d605cf"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}