{"path":"lucene/core/src/test/org/apache/lucene/document/TestField#testDoublePoint2D().mjava","commits":[{"id":"dd4aa10c3623b9da92a555b8d04677af8fe86877","date":1456230278,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestField#testDoublePoint2D().mjava","pathOld":"/dev/null","sourceNew":"  public void testDoublePoint2D() throws Exception {\n    DoublePoint field = new DoublePoint(\"foo\", 5d, 4d);\n\n    trySetBoost(field);\n    trySetByteValue(field);\n    trySetBytesValue(field);\n    trySetBytesRefValue(field);\n    trySetDoubleValue(field);\n    field.setDoubleValues(6d, 7d); // ok\n    trySetIntValue(field);\n    trySetFloatValue(field);\n    trySetLongValue(field);\n    trySetReaderValue(field);\n    trySetShortValue(field);\n    trySetStringValue(field);\n    trySetTokenStreamValue(field);\n\n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      field.numericValue();\n    });\n    assertTrue(expected.getMessage().contains(\"cannot convert to a single numeric value\"));\n    assertEquals(\"<foo:6.0,7.0>\", field.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestField#testDoublePoint2D().mjava","pathOld":"/dev/null","sourceNew":"  public void testDoublePoint2D() throws Exception {\n    DoublePoint field = new DoublePoint(\"foo\", 5d, 4d);\n\n    trySetBoost(field);\n    trySetByteValue(field);\n    trySetBytesValue(field);\n    trySetBytesRefValue(field);\n    trySetDoubleValue(field);\n    field.setDoubleValues(6d, 7d); // ok\n    trySetIntValue(field);\n    trySetFloatValue(field);\n    trySetLongValue(field);\n    trySetReaderValue(field);\n    trySetShortValue(field);\n    trySetStringValue(field);\n    trySetTokenStreamValue(field);\n\n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      field.numericValue();\n    });\n    assertTrue(expected.getMessage().contains(\"cannot convert to a single numeric value\"));\n    assertEquals(\"<foo:6.0,7.0>\", field.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","date":1456306182,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestField#testDoublePoint2D().mjava","pathOld":"/dev/null","sourceNew":"  public void testDoublePoint2D() throws Exception {\n    DoublePoint field = new DoublePoint(\"foo\", 5d, 4d);\n\n    trySetBoost(field);\n    trySetByteValue(field);\n    trySetBytesValue(field);\n    trySetBytesRefValue(field);\n    trySetDoubleValue(field);\n    field.setDoubleValues(6d, 7d); // ok\n    trySetIntValue(field);\n    trySetFloatValue(field);\n    trySetLongValue(field);\n    trySetReaderValue(field);\n    trySetShortValue(field);\n    trySetStringValue(field);\n    trySetTokenStreamValue(field);\n\n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      field.numericValue();\n    });\n    assertTrue(expected.getMessage().contains(\"cannot convert to a single numeric value\"));\n    assertEquals(\"<foo:6.0,7.0>\", field.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8357a0b6e20da8f78592ec8e53dbd375b1026b","date":1456330381,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestField#testDoublePoint2D().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestField#testDoublePoint2D().mjava","sourceNew":"  public void testDoublePoint2D() throws Exception {\n    DoublePoint field = new DoublePoint(\"foo\", 5d, 4d);\n\n    trySetBoost(field);\n    trySetByteValue(field);\n    trySetBytesValue(field);\n    trySetBytesRefValue(field);\n    trySetDoubleValue(field);\n    field.setDoubleValues(6d, 7d); // ok\n    trySetIntValue(field);\n    trySetFloatValue(field);\n    trySetLongValue(field);\n    trySetReaderValue(field);\n    trySetShortValue(field);\n    trySetStringValue(field);\n    trySetTokenStreamValue(field);\n\n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      field.numericValue();\n    });\n    assertTrue(expected.getMessage().contains(\"cannot convert to a single numeric value\"));\n    assertEquals(\"DoublePoint <foo:6.0,7.0>\", field.toString());\n  }\n\n","sourceOld":"  public void testDoublePoint2D() throws Exception {\n    DoublePoint field = new DoublePoint(\"foo\", 5d, 4d);\n\n    trySetBoost(field);\n    trySetByteValue(field);\n    trySetBytesValue(field);\n    trySetBytesRefValue(field);\n    trySetDoubleValue(field);\n    field.setDoubleValues(6d, 7d); // ok\n    trySetIntValue(field);\n    trySetFloatValue(field);\n    trySetLongValue(field);\n    trySetReaderValue(field);\n    trySetShortValue(field);\n    trySetStringValue(field);\n    trySetTokenStreamValue(field);\n\n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      field.numericValue();\n    });\n    assertTrue(expected.getMessage().contains(\"cannot convert to a single numeric value\"));\n    assertEquals(\"<foo:6.0,7.0>\", field.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a60784094f4a1d4e4b03b3e8086bf55d3eeed","date":1456346320,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestField#testDoublePoint2D().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestField#testDoublePoint2D().mjava","sourceNew":"  public void testDoublePoint2D() throws Exception {\n    DoublePoint field = new DoublePoint(\"foo\", 5d, 4d);\n\n    trySetBoost(field);\n    trySetByteValue(field);\n    trySetBytesValue(field);\n    trySetBytesRefValue(field);\n    trySetDoubleValue(field);\n    field.setDoubleValues(6d, 7d); // ok\n    trySetIntValue(field);\n    trySetFloatValue(field);\n    trySetLongValue(field);\n    trySetReaderValue(field);\n    trySetShortValue(field);\n    trySetStringValue(field);\n    trySetTokenStreamValue(field);\n\n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      field.numericValue();\n    });\n    assertTrue(expected.getMessage().contains(\"cannot convert to a single numeric value\"));\n    assertEquals(\"DoublePoint <foo:6.0,7.0>\", field.toString());\n  }\n\n","sourceOld":"  public void testDoublePoint2D() throws Exception {\n    DoublePoint field = new DoublePoint(\"foo\", 5d, 4d);\n\n    trySetBoost(field);\n    trySetByteValue(field);\n    trySetBytesValue(field);\n    trySetBytesRefValue(field);\n    trySetDoubleValue(field);\n    field.setDoubleValues(6d, 7d); // ok\n    trySetIntValue(field);\n    trySetFloatValue(field);\n    trySetLongValue(field);\n    trySetReaderValue(field);\n    trySetShortValue(field);\n    trySetStringValue(field);\n    trySetTokenStreamValue(field);\n\n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      field.numericValue();\n    });\n    assertTrue(expected.getMessage().contains(\"cannot convert to a single numeric value\"));\n    assertEquals(\"<foo:6.0,7.0>\", field.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestField#testDoublePoint2D().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestField#testDoublePoint2D().mjava","sourceNew":"  public void testDoublePoint2D() throws Exception {\n    DoublePoint field = new DoublePoint(\"foo\", 5d, 4d);\n\n    trySetByteValue(field);\n    trySetBytesValue(field);\n    trySetBytesRefValue(field);\n    trySetDoubleValue(field);\n    field.setDoubleValues(6d, 7d); // ok\n    trySetIntValue(field);\n    trySetFloatValue(field);\n    trySetLongValue(field);\n    trySetReaderValue(field);\n    trySetShortValue(field);\n    trySetStringValue(field);\n    trySetTokenStreamValue(field);\n\n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      field.numericValue();\n    });\n    assertTrue(expected.getMessage().contains(\"cannot convert to a single numeric value\"));\n    assertEquals(\"DoublePoint <foo:6.0,7.0>\", field.toString());\n  }\n\n","sourceOld":"  public void testDoublePoint2D() throws Exception {\n    DoublePoint field = new DoublePoint(\"foo\", 5d, 4d);\n\n    trySetBoost(field);\n    trySetByteValue(field);\n    trySetBytesValue(field);\n    trySetBytesRefValue(field);\n    trySetDoubleValue(field);\n    field.setDoubleValues(6d, 7d); // ok\n    trySetIntValue(field);\n    trySetFloatValue(field);\n    trySetLongValue(field);\n    trySetReaderValue(field);\n    trySetShortValue(field);\n    trySetStringValue(field);\n    trySetTokenStreamValue(field);\n\n    IllegalStateException expected = expectThrows(IllegalStateException.class, () -> {\n      field.numericValue();\n    });\n    assertTrue(expected.getMessage().contains(\"cannot convert to a single numeric value\"));\n    assertEquals(\"DoublePoint <foo:6.0,7.0>\", field.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf8357a0b6e20da8f78592ec8e53dbd375b1026b":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"e79a60784094f4a1d4e4b03b3e8086bf55d3eeed":["dd4aa10c3623b9da92a555b8d04677af8fe86877","cf8357a0b6e20da8f78592ec8e53dbd375b1026b"],"dd4aa10c3623b9da92a555b8d04677af8fe86877":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a5296efc4b319f5647b606629c093a94b23692c6"],"a5296efc4b319f5647b606629c093a94b23692c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dd4aa10c3623b9da92a555b8d04677af8fe86877"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cf8357a0b6e20da8f78592ec8e53dbd375b1026b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"]},"commit2Childs":{"cf8357a0b6e20da8f78592ec8e53dbd375b1026b":["e79a60784094f4a1d4e4b03b3e8086bf55d3eeed","acd9883560fd89e6448b2b447302fe543040cd4f"],"e79a60784094f4a1d4e4b03b3e8086bf55d3eeed":[],"dd4aa10c3623b9da92a555b8d04677af8fe86877":["e79a60784094f4a1d4e4b03b3e8086bf55d3eeed","a5296efc4b319f5647b606629c093a94b23692c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd4aa10c3623b9da92a555b8d04677af8fe86877","1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","a5296efc4b319f5647b606629c093a94b23692c6"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["cf8357a0b6e20da8f78592ec8e53dbd375b1026b"],"a5296efc4b319f5647b606629c093a94b23692c6":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a60784094f4a1d4e4b03b3e8086bf55d3eeed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}