{"path":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * \r\n   * The main method that allows users to write {@link SingleResponseWriter}s\r\n   * and provide them as the initial parameter <code>responseWriter</code> to\r\n   * this method which defines how output should be generated.\r\n   * \r\n   * @param responseWriter\r\n   *          The user-provided {@link SingleResponseWriter} implementation.\r\n   * @param request\r\n   *          The provided {@link SolrQueryRequest}.\r\n   * @param response\r\n   *          The provided {@link SolrQueryResponse}.\r\n   * @throws IOException\r\n   *           If any error occurs.\r\n   */\r\n  public void write(SingleResponseWriter responseWriter,\r\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\r\n    responseWriter.start();\r\n    NamedList nl = response.getValues();\r\n    for (int i = 0; i < nl.size(); i++) {\r\n      String name = nl.getName(i);\r\n      Object val = nl.getVal(i);\r\n      if (\"responseHeader\".equals(name)) {\r\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\r\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\r\n      } else if (val instanceof SolrDocumentList) {\r\n        SolrDocumentList list = (SolrDocumentList) val;\r\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(name,info);\r\n          for (SolrDocument solrDocument : list)\r\n            responseWriter.writeDoc(solrDocument);\r\n          responseWriter.endDocumentList();\r\n        } else {\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n      } else if (val instanceof DocList) {\r\n        DocList docList = (DocList) val;\r\n        int sz = docList.size();\r\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\r\n            .getSearcher(), response.getReturnFields());\r\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\r\n            docList.maxScore());\r\n        DocIterator iterator = docList.iterator();\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(name,info);\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n            responseWriter.writeDoc(sdoc);\r\n          }\r\n          responseWriter.end();\r\n        } else {\r\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\r\n              .size());\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n          }\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n\r\n      } else {\r\n        responseWriter.writeOther(name, val);\r\n\r\n      }\r\n    }\r\n    responseWriter.end();\r\n\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  /**\r\n   * \r\n   * The main method that allows users to write {@link SingleResponseWriter}s\r\n   * and provide them as the initial parameter <code>responseWriter</code> to\r\n   * this method which defines how output should be generated.\r\n   * \r\n   * @param responseWriter\r\n   *          The user-provided {@link SingleResponseWriter} implementation.\r\n   * @param request\r\n   *          The provided {@link SolrQueryRequest}.\r\n   * @param response\r\n   *          The provided {@link SolrQueryResponse}.\r\n   * @throws IOException\r\n   *           If any error occurs.\r\n   */\r\n  public void write(SingleResponseWriter responseWriter,\r\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\r\n    responseWriter.start();\r\n    NamedList nl = response.getValues();\r\n    for (int i = 0; i < nl.size(); i++) {\r\n      String name = nl.getName(i);\r\n      Object val = nl.getVal(i);\r\n      if (\"responseHeader\".equals(name)) {\r\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\r\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\r\n      } else if (val instanceof SolrDocumentList) {\r\n        SolrDocumentList list = (SolrDocumentList) val;\r\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(name,info);\r\n          for (SolrDocument solrDocument : list)\r\n            responseWriter.writeDoc(solrDocument);\r\n          responseWriter.endDocumentList();\r\n        } else {\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n      } else if (val instanceof DocList) {\r\n        DocList docList = (DocList) val;\r\n        int sz = docList.size();\r\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\r\n            .getSearcher(), response.getReturnFields());\r\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\r\n            docList.maxScore());\r\n        DocIterator iterator = docList.iterator();\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(name,info);\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n            responseWriter.writeDoc(sdoc);\r\n          }\r\n          responseWriter.end();\r\n        } else {\r\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\r\n              .size());\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n          }\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n\r\n      } else {\r\n        responseWriter.writeOther(name, val);\r\n\r\n      }\r\n    }\r\n    responseWriter.end();\r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\r\n   * \r\n   * The main method that allows users to write {@link SingleResponseWriter}s\r\n   * and provide them as the initial parameter <code>responseWriter</code> to\r\n   * this method which defines how output should be generated.\r\n   * \r\n   * @param responseWriter\r\n   *          The user-provided {@link SingleResponseWriter} implementation.\r\n   * @param request\r\n   *          The provided {@link SolrQueryRequest}.\r\n   * @param response\r\n   *          The provided {@link SolrQueryResponse}.\r\n   * @throws IOException\r\n   *           If any error occurs.\r\n   */\r\n  public void write(SingleResponseWriter responseWriter,\r\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\r\n    responseWriter.start();\r\n    NamedList nl = response.getValues();\r\n    for (int i = 0; i < nl.size(); i++) {\r\n      String name = nl.getName(i);\r\n      Object val = nl.getVal(i);\r\n      if (\"responseHeader\".equals(name)) {\r\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\r\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\r\n      } else if (val instanceof SolrDocumentList) {\r\n        SolrDocumentList list = (SolrDocumentList) val;\r\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(name,info);\r\n          for (SolrDocument solrDocument : list)\r\n            responseWriter.writeDoc(solrDocument);\r\n          responseWriter.endDocumentList();\r\n        } else {\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n      } else if (val instanceof DocList) {\r\n        DocList docList = (DocList) val;\r\n        int sz = docList.size();\r\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\r\n            .getSearcher(), response.getReturnFields());\r\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\r\n            docList.maxScore());\r\n        DocIterator iterator = docList.iterator();\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(name,info);\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n            responseWriter.writeDoc(sdoc);\r\n          }\r\n          responseWriter.end();\r\n        } else {\r\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\r\n              .size());\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n          }\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n\r\n      } else {\r\n        responseWriter.writeOther(name, val);\r\n\r\n      }\r\n    }\r\n    responseWriter.end();\r\n\r\n  }\r\n\n","sourceOld":"  /**\r\n   * \r\n   * The main method that allows users to write {@link SingleResponseWriter}s\r\n   * and provide them as the initial parameter <code>responseWriter</code> to\r\n   * this method which defines how output should be generated.\r\n   * \r\n   * @param responseWriter\r\n   *          The user-provided {@link SingleResponseWriter} implementation.\r\n   * @param request\r\n   *          The provided {@link SolrQueryRequest}.\r\n   * @param response\r\n   *          The provided {@link SolrQueryResponse}.\r\n   * @throws IOException\r\n   *           If any error occurs.\r\n   */\r\n  public void write(SingleResponseWriter responseWriter,\r\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\r\n    responseWriter.start();\r\n    NamedList nl = response.getValues();\r\n    for (int i = 0; i < nl.size(); i++) {\r\n      String name = nl.getName(i);\r\n      Object val = nl.getVal(i);\r\n      if (\"responseHeader\".equals(name)) {\r\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\r\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\r\n      } else if (val instanceof SolrDocumentList) {\r\n        SolrDocumentList list = (SolrDocumentList) val;\r\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(name,info);\r\n          for (SolrDocument solrDocument : list)\r\n            responseWriter.writeDoc(solrDocument);\r\n          responseWriter.endDocumentList();\r\n        } else {\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n      } else if (val instanceof DocList) {\r\n        DocList docList = (DocList) val;\r\n        int sz = docList.size();\r\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\r\n            .getSearcher(), response.getReturnFields());\r\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\r\n            docList.maxScore());\r\n        DocIterator iterator = docList.iterator();\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(name,info);\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n            responseWriter.writeDoc(sdoc);\r\n          }\r\n          responseWriter.end();\r\n        } else {\r\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\r\n              .size());\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n          }\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n\r\n      } else {\r\n        responseWriter.writeOther(name, val);\r\n\r\n      }\r\n    }\r\n    responseWriter.end();\r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * \r\n   * The main method that allows users to write {@link SingleResponseWriter}s\r\n   * and provide them as the initial parameter <code>responseWriter</code> to\r\n   * this method which defines how output should be generated.\r\n   * \r\n   * @param responseWriter\r\n   *          The user-provided {@link SingleResponseWriter} implementation.\r\n   * @param request\r\n   *          The provided {@link SolrQueryRequest}.\r\n   * @param response\r\n   *          The provided {@link SolrQueryResponse}.\r\n   * @throws IOException\r\n   *           If any error occurs.\r\n   */\r\n  public void write(SingleResponseWriter responseWriter,\r\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\r\n    responseWriter.start();\r\n    NamedList nl = response.getValues();\r\n    for (int i = 0; i < nl.size(); i++) {\r\n      String name = nl.getName(i);\r\n      Object val = nl.getVal(i);\r\n      if (\"responseHeader\".equals(name)) {\r\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\r\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\r\n      } else if (val instanceof SolrDocumentList) {\r\n        SolrDocumentList list = (SolrDocumentList) val;\r\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(name,info);\r\n          for (SolrDocument solrDocument : list)\r\n            responseWriter.writeDoc(solrDocument);\r\n          responseWriter.endDocumentList();\r\n        } else {\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n      } else if (val instanceof DocList) {\r\n        DocList docList = (DocList) val;\r\n        int sz = docList.size();\r\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\r\n            .getSearcher(), response.getReturnFields());\r\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\r\n            docList.maxScore());\r\n        DocIterator iterator = docList.iterator();\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(name,info);\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n            responseWriter.writeDoc(sdoc);\r\n          }\r\n          responseWriter.end();\r\n        } else {\r\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\r\n              .size());\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n          }\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n\r\n      } else {\r\n        responseWriter.writeOther(name, val);\r\n\r\n      }\r\n    }\r\n    responseWriter.end();\r\n\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dff3adc4fd8094e3973a5ecbbe8968ae45a86a55","date":1270182973,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * \n   * The main method that allows users to write {@link SingleResponseWriter}s\n   * and provide them as the initial parameter <code>responseWriter</code> to\n   * this method which defines how output should be generated.\n   * \n   * @param responseWriter\n   *          The user-provided {@link SingleResponseWriter} implementation.\n   * @param request\n   *          The provided {@link SolrQueryRequest}.\n   * @param response\n   *          The provided {@link SolrQueryResponse}.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public void write(SingleResponseWriter responseWriter,\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    responseWriter.start();\n    NamedList nl = response.getValues();\n    for (int i = 0; i < nl.size(); i++) {\n      String name = nl.getName(i);\n      Object val = nl.getVal(i);\n      if (\"responseHeader\".equals(name)) {\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\n      } else if (val instanceof SolrDocumentList) {\n        SolrDocumentList list = (SolrDocumentList) val;\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (SolrDocument solrDocument : list)\n            responseWriter.writeDoc(solrDocument);\n          responseWriter.endDocumentList();\n        } else {\n          responseWriter.writeAllDocs(info, list);\n        }\n      } else if (val instanceof DocList) {\n        DocList docList = (DocList) val;\n        int sz = docList.size();\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\n            .getSearcher(), response.getReturnFields());\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\n            docList.maxScore());\n        DocIterator iterator = docList.iterator();\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n            responseWriter.writeDoc(sdoc);\n          }\n          responseWriter.end();\n        } else {\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\n              .size());\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n          }\n          responseWriter.writeAllDocs(info, list);\n        }\n\n      } else {\n        responseWriter.writeOther(name, val);\n\n      }\n    }\n    responseWriter.end();\n\n  }\n\n","sourceOld":"  /**\r\n   * \r\n   * The main method that allows users to write {@link SingleResponseWriter}s\r\n   * and provide them as the initial parameter <code>responseWriter</code> to\r\n   * this method which defines how output should be generated.\r\n   * \r\n   * @param responseWriter\r\n   *          The user-provided {@link SingleResponseWriter} implementation.\r\n   * @param request\r\n   *          The provided {@link SolrQueryRequest}.\r\n   * @param response\r\n   *          The provided {@link SolrQueryResponse}.\r\n   * @throws IOException\r\n   *           If any error occurs.\r\n   */\r\n  public void write(SingleResponseWriter responseWriter,\r\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\r\n    responseWriter.start();\r\n    NamedList nl = response.getValues();\r\n    for (int i = 0; i < nl.size(); i++) {\r\n      String name = nl.getName(i);\r\n      Object val = nl.getVal(i);\r\n      if (\"responseHeader\".equals(name)) {\r\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\r\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\r\n      } else if (val instanceof SolrDocumentList) {\r\n        SolrDocumentList list = (SolrDocumentList) val;\r\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(name,info);\r\n          for (SolrDocument solrDocument : list)\r\n            responseWriter.writeDoc(solrDocument);\r\n          responseWriter.endDocumentList();\r\n        } else {\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n      } else if (val instanceof DocList) {\r\n        DocList docList = (DocList) val;\r\n        int sz = docList.size();\r\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\r\n            .getSearcher(), response.getReturnFields());\r\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\r\n            docList.maxScore());\r\n        DocIterator iterator = docList.iterator();\r\n        if (responseWriter.isStreamingDocs()) {\r\n          responseWriter.startDocumentList(name,info);\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n            responseWriter.writeDoc(sdoc);\r\n          }\r\n          responseWriter.end();\r\n        } else {\r\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\r\n              .size());\r\n          for (int j = 0; j < sz; j++) {\r\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\r\n            if (idxInfo.includeScore && docList.hasScores()) {\r\n              sdoc.addField(SCORE_FIELD, iterator.score());\r\n            }\r\n          }\r\n          responseWriter.writeAllDocs(info, list);\r\n        }\r\n\r\n      } else {\r\n        responseWriter.writeOther(name, val);\r\n\r\n      }\r\n    }\r\n    responseWriter.end();\r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":["53537bc67eeb8951732ea5232492defbdd9e5f9b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb77744e4d275abebb578c27538f9997bb5624a8","date":1275523174,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * \n   * The main method that allows users to write {@link SingleResponseWriter}s\n   * and provide them as the initial parameter <code>responseWriter</code> to\n   * this method which defines how output should be generated.\n   * \n   * @param responseWriter\n   *          The user-provided {@link SingleResponseWriter} implementation.\n   * @param request\n   *          The provided {@link SolrQueryRequest}.\n   * @param response\n   *          The provided {@link SolrQueryResponse}.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public void write(SingleResponseWriter responseWriter,\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    responseWriter.start();\n    NamedList nl = response.getValues();\n    for (int i = 0; i < nl.size(); i++) {\n      String name = nl.getName(i);\n      Object val = nl.getVal(i);\n      if (\"responseHeader\".equals(name)) {\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\n      } else if (val instanceof SolrDocumentList) {\n        SolrDocumentList list = (SolrDocumentList) val;\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (SolrDocument solrDocument : list)\n            responseWriter.writeDoc(solrDocument);\n          responseWriter.endDocumentList();\n        } else {\n          responseWriter.writeAllDocs(info, list);\n        }\n      } else if (val instanceof DocList) {\n        DocList docList = (DocList) val;\n        int sz = docList.size();\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\n            .getSearcher(), response.getReturnFields());\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\n            docList.maxScore());\n        DocIterator iterator = docList.iterator();\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n            responseWriter.writeDoc(sdoc);\n          }\n          responseWriter.end();\n        } else {\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\n              .size());\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n            list.add(sdoc);\n          }\n          responseWriter.writeAllDocs(info, list);\n        }\n\n      } else {\n        responseWriter.writeOther(name, val);\n\n      }\n    }\n    responseWriter.end();\n\n  }\n\n","sourceOld":"  /**\n   * \n   * The main method that allows users to write {@link SingleResponseWriter}s\n   * and provide them as the initial parameter <code>responseWriter</code> to\n   * this method which defines how output should be generated.\n   * \n   * @param responseWriter\n   *          The user-provided {@link SingleResponseWriter} implementation.\n   * @param request\n   *          The provided {@link SolrQueryRequest}.\n   * @param response\n   *          The provided {@link SolrQueryResponse}.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public void write(SingleResponseWriter responseWriter,\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    responseWriter.start();\n    NamedList nl = response.getValues();\n    for (int i = 0; i < nl.size(); i++) {\n      String name = nl.getName(i);\n      Object val = nl.getVal(i);\n      if (\"responseHeader\".equals(name)) {\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\n      } else if (val instanceof SolrDocumentList) {\n        SolrDocumentList list = (SolrDocumentList) val;\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (SolrDocument solrDocument : list)\n            responseWriter.writeDoc(solrDocument);\n          responseWriter.endDocumentList();\n        } else {\n          responseWriter.writeAllDocs(info, list);\n        }\n      } else if (val instanceof DocList) {\n        DocList docList = (DocList) val;\n        int sz = docList.size();\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\n            .getSearcher(), response.getReturnFields());\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\n            docList.maxScore());\n        DocIterator iterator = docList.iterator();\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n            responseWriter.writeDoc(sdoc);\n          }\n          responseWriter.end();\n        } else {\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\n              .size());\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n          }\n          responseWriter.writeAllDocs(info, list);\n        }\n\n      } else {\n        responseWriter.writeOther(name, val);\n\n      }\n    }\n    responseWriter.end();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53537bc67eeb8951732ea5232492defbdd9e5f9b","date":1290477531,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * \n   * The main method that allows users to write {@link SingleResponseWriter}s\n   * and provide them as the initial parameter <code>responseWriter</code> to\n   * this method which defines how output should be generated.\n   * \n   * @param responseWriter\n   *          The user-provided {@link SingleResponseWriter} implementation.\n   * @param request\n   *          The provided {@link SolrQueryRequest}.\n   * @param response\n   *          The provided {@link SolrQueryResponse}.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public void write(SingleResponseWriter responseWriter,\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    responseWriter.start();\n    NamedList nl = response.getValues();\n    for (int i = 0; i < nl.size(); i++) {\n      String name = nl.getName(i);\n      Object val = nl.getVal(i);\n      if (\"responseHeader\".equals(name)) {\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\n      } else if (val instanceof SolrDocumentList) {\n        SolrDocumentList list = (SolrDocumentList) val;\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (SolrDocument solrDocument : list)\n            responseWriter.writeDoc(solrDocument);\n          responseWriter.endDocumentList();\n        } else {\n          responseWriter.writeAllDocs(info, list);\n        }\n      } else if (val instanceof DocList) {\n        DocList docList = (DocList) val;\n        int sz = docList.size();\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\n            .getSearcher(), response.getReturnFields());\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\n            docList.maxScore());\n        DocIterator iterator = docList.iterator();\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n            responseWriter.writeDoc(sdoc);\n          }\n        } else {\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\n              .size());\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n            list.add(sdoc);\n          }\n          responseWriter.writeAllDocs(info, list);\n        }\n\n      } else {\n        responseWriter.writeOther(name, val);\n\n      }\n    }\n    responseWriter.end();\n\n  }\n\n","sourceOld":"  /**\n   * \n   * The main method that allows users to write {@link SingleResponseWriter}s\n   * and provide them as the initial parameter <code>responseWriter</code> to\n   * this method which defines how output should be generated.\n   * \n   * @param responseWriter\n   *          The user-provided {@link SingleResponseWriter} implementation.\n   * @param request\n   *          The provided {@link SolrQueryRequest}.\n   * @param response\n   *          The provided {@link SolrQueryResponse}.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public void write(SingleResponseWriter responseWriter,\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    responseWriter.start();\n    NamedList nl = response.getValues();\n    for (int i = 0; i < nl.size(); i++) {\n      String name = nl.getName(i);\n      Object val = nl.getVal(i);\n      if (\"responseHeader\".equals(name)) {\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\n      } else if (val instanceof SolrDocumentList) {\n        SolrDocumentList list = (SolrDocumentList) val;\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (SolrDocument solrDocument : list)\n            responseWriter.writeDoc(solrDocument);\n          responseWriter.endDocumentList();\n        } else {\n          responseWriter.writeAllDocs(info, list);\n        }\n      } else if (val instanceof DocList) {\n        DocList docList = (DocList) val;\n        int sz = docList.size();\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\n            .getSearcher(), response.getReturnFields());\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\n            docList.maxScore());\n        DocIterator iterator = docList.iterator();\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n            responseWriter.writeDoc(sdoc);\n          }\n          responseWriter.end();\n        } else {\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\n              .size());\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n            list.add(sdoc);\n          }\n          responseWriter.writeAllDocs(info, list);\n        }\n\n      } else {\n        responseWriter.writeOther(name, val);\n\n      }\n    }\n    responseWriter.end();\n\n  }\n\n","bugFix":["dff3adc4fd8094e3973a5ecbbe8968ae45a86a55"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * \n   * The main method that allows users to write {@link SingleResponseWriter}s\n   * and provide them as the initial parameter <code>responseWriter</code> to\n   * this method which defines how output should be generated.\n   * \n   * @param responseWriter\n   *          The user-provided {@link SingleResponseWriter} implementation.\n   * @param request\n   *          The provided {@link SolrQueryRequest}.\n   * @param response\n   *          The provided {@link SolrQueryResponse}.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public void write(SingleResponseWriter responseWriter,\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    responseWriter.start();\n    NamedList nl = response.getValues();\n    for (int i = 0; i < nl.size(); i++) {\n      String name = nl.getName(i);\n      Object val = nl.getVal(i);\n      if (\"responseHeader\".equals(name)) {\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\n      } else if (val instanceof SolrDocumentList) {\n        SolrDocumentList list = (SolrDocumentList) val;\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (SolrDocument solrDocument : list)\n            responseWriter.writeDoc(solrDocument);\n          responseWriter.endDocumentList();\n        } else {\n          responseWriter.writeAllDocs(info, list);\n        }\n      } else if (val instanceof DocList) {\n        DocList docList = (DocList) val;\n        int sz = docList.size();\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\n            .getSearcher(), response.getReturnFields());\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\n            docList.maxScore());\n        DocIterator iterator = docList.iterator();\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n            responseWriter.writeDoc(sdoc);\n          }\n        } else {\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\n              .size());\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n            list.add(sdoc);\n          }\n          responseWriter.writeAllDocs(info, list);\n        }\n\n      } else {\n        responseWriter.writeOther(name, val);\n\n      }\n    }\n    responseWriter.end();\n\n  }\n\n","sourceOld":"  /**\n   * \n   * The main method that allows users to write {@link SingleResponseWriter}s\n   * and provide them as the initial parameter <code>responseWriter</code> to\n   * this method which defines how output should be generated.\n   * \n   * @param responseWriter\n   *          The user-provided {@link SingleResponseWriter} implementation.\n   * @param request\n   *          The provided {@link SolrQueryRequest}.\n   * @param response\n   *          The provided {@link SolrQueryResponse}.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public void write(SingleResponseWriter responseWriter,\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    responseWriter.start();\n    NamedList nl = response.getValues();\n    for (int i = 0; i < nl.size(); i++) {\n      String name = nl.getName(i);\n      Object val = nl.getVal(i);\n      if (\"responseHeader\".equals(name)) {\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\n      } else if (val instanceof SolrDocumentList) {\n        SolrDocumentList list = (SolrDocumentList) val;\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (SolrDocument solrDocument : list)\n            responseWriter.writeDoc(solrDocument);\n          responseWriter.endDocumentList();\n        } else {\n          responseWriter.writeAllDocs(info, list);\n        }\n      } else if (val instanceof DocList) {\n        DocList docList = (DocList) val;\n        int sz = docList.size();\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\n            .getSearcher(), response.getReturnFields());\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\n            docList.maxScore());\n        DocIterator iterator = docList.iterator();\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n            responseWriter.writeDoc(sdoc);\n          }\n          responseWriter.end();\n        } else {\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\n              .size());\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n            list.add(sdoc);\n          }\n          responseWriter.writeAllDocs(info, list);\n        }\n\n      } else {\n        responseWriter.writeOther(name, val);\n\n      }\n    }\n    responseWriter.end();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * \n   * The main method that allows users to write {@link SingleResponseWriter}s\n   * and provide them as the initial parameter <code>responseWriter</code> to\n   * this method which defines how output should be generated.\n   * \n   * @param responseWriter\n   *          The user-provided {@link SingleResponseWriter} implementation.\n   * @param request\n   *          The provided {@link SolrQueryRequest}.\n   * @param response\n   *          The provided {@link SolrQueryResponse}.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public void write(SingleResponseWriter responseWriter,\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    responseWriter.start();\n    NamedList nl = response.getValues();\n    for (int i = 0; i < nl.size(); i++) {\n      String name = nl.getName(i);\n      Object val = nl.getVal(i);\n      if (\"responseHeader\".equals(name)) {\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\n      } else if (val instanceof SolrDocumentList) {\n        SolrDocumentList list = (SolrDocumentList) val;\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (SolrDocument solrDocument : list)\n            responseWriter.writeDoc(solrDocument);\n          responseWriter.endDocumentList();\n        } else {\n          responseWriter.writeAllDocs(info, list);\n        }\n      } else if (val instanceof DocList) {\n        DocList docList = (DocList) val;\n        int sz = docList.size();\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\n            .getSearcher(), response.getReturnFields());\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\n            docList.maxScore());\n        DocIterator iterator = docList.iterator();\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n            responseWriter.writeDoc(sdoc);\n          }\n        } else {\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\n              .size());\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n            list.add(sdoc);\n          }\n          responseWriter.writeAllDocs(info, list);\n        }\n\n      } else {\n        responseWriter.writeOther(name, val);\n\n      }\n    }\n    responseWriter.end();\n\n  }\n\n","sourceOld":"  /**\n   * \n   * The main method that allows users to write {@link SingleResponseWriter}s\n   * and provide them as the initial parameter <code>responseWriter</code> to\n   * this method which defines how output should be generated.\n   * \n   * @param responseWriter\n   *          The user-provided {@link SingleResponseWriter} implementation.\n   * @param request\n   *          The provided {@link SolrQueryRequest}.\n   * @param response\n   *          The provided {@link SolrQueryResponse}.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public void write(SingleResponseWriter responseWriter,\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    responseWriter.start();\n    NamedList nl = response.getValues();\n    for (int i = 0; i < nl.size(); i++) {\n      String name = nl.getName(i);\n      Object val = nl.getVal(i);\n      if (\"responseHeader\".equals(name)) {\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\n      } else if (val instanceof SolrDocumentList) {\n        SolrDocumentList list = (SolrDocumentList) val;\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (SolrDocument solrDocument : list)\n            responseWriter.writeDoc(solrDocument);\n          responseWriter.endDocumentList();\n        } else {\n          responseWriter.writeAllDocs(info, list);\n        }\n      } else if (val instanceof DocList) {\n        DocList docList = (DocList) val;\n        int sz = docList.size();\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\n            .getSearcher(), response.getReturnFields());\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\n            docList.maxScore());\n        DocIterator iterator = docList.iterator();\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n            responseWriter.writeDoc(sdoc);\n          }\n          responseWriter.end();\n        } else {\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\n              .size());\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n            list.add(sdoc);\n          }\n          responseWriter.writeAllDocs(info, list);\n        }\n\n      } else {\n        responseWriter.writeOther(name, val);\n\n      }\n    }\n    responseWriter.end();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * \n   * The main method that allows users to write {@link SingleResponseWriter}s\n   * and provide them as the initial parameter <code>responseWriter</code> to\n   * this method which defines how output should be generated.\n   * \n   * @param responseWriter\n   *          The user-provided {@link SingleResponseWriter} implementation.\n   * @param request\n   *          The provided {@link SolrQueryRequest}.\n   * @param response\n   *          The provided {@link SolrQueryResponse}.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public void write(SingleResponseWriter responseWriter,\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    responseWriter.start();\n    NamedList nl = response.getValues();\n    for (int i = 0; i < nl.size(); i++) {\n      String name = nl.getName(i);\n      Object val = nl.getVal(i);\n      if (\"responseHeader\".equals(name)) {\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\n      } else if (val instanceof SolrDocumentList) {\n        SolrDocumentList list = (SolrDocumentList) val;\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (SolrDocument solrDocument : list)\n            responseWriter.writeDoc(solrDocument);\n          responseWriter.endDocumentList();\n        } else {\n          responseWriter.writeAllDocs(info, list);\n        }\n      } else if (val instanceof DocList) {\n        DocList docList = (DocList) val;\n        int sz = docList.size();\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\n            .getSearcher(), response.getReturnFields());\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\n            docList.maxScore());\n        DocIterator iterator = docList.iterator();\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            responseWriter.writeDoc(sdoc);\n          }\n        } else {\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\n              .size());\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            list.add(sdoc);\n          }\n          responseWriter.writeAllDocs(info, list);\n        }\n\n      } else {\n        responseWriter.writeOther(name, val);\n\n      }\n    }\n    responseWriter.end();\n\n  }\n\n","sourceOld":"  /**\n   * \n   * The main method that allows users to write {@link SingleResponseWriter}s\n   * and provide them as the initial parameter <code>responseWriter</code> to\n   * this method which defines how output should be generated.\n   * \n   * @param responseWriter\n   *          The user-provided {@link SingleResponseWriter} implementation.\n   * @param request\n   *          The provided {@link SolrQueryRequest}.\n   * @param response\n   *          The provided {@link SolrQueryResponse}.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public void write(SingleResponseWriter responseWriter,\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    responseWriter.start();\n    NamedList nl = response.getValues();\n    for (int i = 0; i < nl.size(); i++) {\n      String name = nl.getName(i);\n      Object val = nl.getVal(i);\n      if (\"responseHeader\".equals(name)) {\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\n      } else if (val instanceof SolrDocumentList) {\n        SolrDocumentList list = (SolrDocumentList) val;\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (SolrDocument solrDocument : list)\n            responseWriter.writeDoc(solrDocument);\n          responseWriter.endDocumentList();\n        } else {\n          responseWriter.writeAllDocs(info, list);\n        }\n      } else if (val instanceof DocList) {\n        DocList docList = (DocList) val;\n        int sz = docList.size();\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\n            .getSearcher(), response.getReturnFields());\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\n            docList.maxScore());\n        DocIterator iterator = docList.iterator();\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n            responseWriter.writeDoc(sdoc);\n          }\n        } else {\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\n              .size());\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n            list.add(sdoc);\n          }\n          responseWriter.writeAllDocs(info, list);\n        }\n\n      } else {\n        responseWriter.writeOther(name, val);\n\n      }\n    }\n    responseWriter.end();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * \n   * The main method that allows users to write {@link SingleResponseWriter}s\n   * and provide them as the initial parameter <code>responseWriter</code> to\n   * this method which defines how output should be generated.\n   * \n   * @param responseWriter\n   *          The user-provided {@link SingleResponseWriter} implementation.\n   * @param request\n   *          The provided {@link SolrQueryRequest}.\n   * @param response\n   *          The provided {@link SolrQueryResponse}.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public void write(SingleResponseWriter responseWriter,\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    responseWriter.start();\n    NamedList nl = response.getValues();\n    for (int i = 0; i < nl.size(); i++) {\n      String name = nl.getName(i);\n      Object val = nl.getVal(i);\n      if (\"responseHeader\".equals(name)) {\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\n      } else if (val instanceof SolrDocumentList) {\n        SolrDocumentList list = (SolrDocumentList) val;\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (SolrDocument solrDocument : list)\n            responseWriter.writeDoc(solrDocument);\n          responseWriter.endDocumentList();\n        } else {\n          responseWriter.writeAllDocs(info, list);\n        }\n      } else if (val instanceof DocList) {\n        DocList docList = (DocList) val;\n        int sz = docList.size();\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\n            .getSearcher(), response.getReturnFields());\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\n            docList.maxScore());\n        DocIterator iterator = docList.iterator();\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            responseWriter.writeDoc(sdoc);\n          }\n        } else {\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\n              .size());\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            list.add(sdoc);\n          }\n          responseWriter.writeAllDocs(info, list);\n        }\n\n      } else {\n        responseWriter.writeOther(name, val);\n\n      }\n    }\n    responseWriter.end();\n\n  }\n\n","sourceOld":"  /**\n   * \n   * The main method that allows users to write {@link SingleResponseWriter}s\n   * and provide them as the initial parameter <code>responseWriter</code> to\n   * this method which defines how output should be generated.\n   * \n   * @param responseWriter\n   *          The user-provided {@link SingleResponseWriter} implementation.\n   * @param request\n   *          The provided {@link SolrQueryRequest}.\n   * @param response\n   *          The provided {@link SolrQueryResponse}.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public void write(SingleResponseWriter responseWriter,\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    responseWriter.start();\n    NamedList nl = response.getValues();\n    for (int i = 0; i < nl.size(); i++) {\n      String name = nl.getName(i);\n      Object val = nl.getVal(i);\n      if (\"responseHeader\".equals(name)) {\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\n      } else if (val instanceof SolrDocumentList) {\n        SolrDocumentList list = (SolrDocumentList) val;\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (SolrDocument solrDocument : list)\n            responseWriter.writeDoc(solrDocument);\n          responseWriter.endDocumentList();\n        } else {\n          responseWriter.writeAllDocs(info, list);\n        }\n      } else if (val instanceof DocList) {\n        DocList docList = (DocList) val;\n        int sz = docList.size();\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\n            .getSearcher(), response.getReturnFields());\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\n            docList.maxScore());\n        DocIterator iterator = docList.iterator();\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n            responseWriter.writeDoc(sdoc);\n          }\n        } else {\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\n              .size());\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n            list.add(sdoc);\n          }\n          responseWriter.writeAllDocs(info, list);\n        }\n\n      } else {\n        responseWriter.writeOther(name, val);\n\n      }\n    }\n    responseWriter.end();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * \n   * The main method that allows users to write {@link SingleResponseWriter}s\n   * and provide them as the initial parameter <code>responseWriter</code> to\n   * this method which defines how output should be generated.\n   * \n   * @param responseWriter\n   *          The user-provided {@link SingleResponseWriter} implementation.\n   * @param request\n   *          The provided {@link SolrQueryRequest}.\n   * @param response\n   *          The provided {@link SolrQueryResponse}.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public void write(SingleResponseWriter responseWriter,\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    responseWriter.start();\n    NamedList nl = response.getValues();\n    for (int i = 0; i < nl.size(); i++) {\n      String name = nl.getName(i);\n      Object val = nl.getVal(i);\n      if (\"responseHeader\".equals(name)) {\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\n      } else if (val instanceof SolrDocumentList) {\n        SolrDocumentList list = (SolrDocumentList) val;\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (SolrDocument solrDocument : list)\n            responseWriter.writeDoc(solrDocument);\n          responseWriter.endDocumentList();\n        } else {\n          responseWriter.writeAllDocs(info, list);\n        }\n      } else if (val instanceof DocList) {\n        DocList docList = (DocList) val;\n        int sz = docList.size();\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\n            .getSearcher(), response.getReturnFields());\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\n            docList.maxScore());\n        DocIterator iterator = docList.iterator();\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            responseWriter.writeDoc(sdoc);\n          }\n        } else {\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\n              .size());\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            list.add(sdoc);\n          }\n          responseWriter.writeAllDocs(info, list);\n        }\n\n      } else {\n        responseWriter.writeOther(name, val);\n\n      }\n    }\n    responseWriter.end();\n\n  }\n\n","sourceOld":"  /**\n   * \n   * The main method that allows users to write {@link SingleResponseWriter}s\n   * and provide them as the initial parameter <code>responseWriter</code> to\n   * this method which defines how output should be generated.\n   * \n   * @param responseWriter\n   *          The user-provided {@link SingleResponseWriter} implementation.\n   * @param request\n   *          The provided {@link SolrQueryRequest}.\n   * @param response\n   *          The provided {@link SolrQueryResponse}.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public void write(SingleResponseWriter responseWriter,\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    responseWriter.start();\n    NamedList nl = response.getValues();\n    for (int i = 0; i < nl.size(); i++) {\n      String name = nl.getName(i);\n      Object val = nl.getVal(i);\n      if (\"responseHeader\".equals(name)) {\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\n      } else if (val instanceof SolrDocumentList) {\n        SolrDocumentList list = (SolrDocumentList) val;\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (SolrDocument solrDocument : list)\n            responseWriter.writeDoc(solrDocument);\n          responseWriter.endDocumentList();\n        } else {\n          responseWriter.writeAllDocs(info, list);\n        }\n      } else if (val instanceof DocList) {\n        DocList docList = (DocList) val;\n        int sz = docList.size();\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\n            .getSearcher(), response.getReturnFields());\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\n            docList.maxScore());\n        DocIterator iterator = docList.iterator();\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n            responseWriter.writeDoc(sdoc);\n          }\n        } else {\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\n              .size());\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            if (idxInfo.includeScore && docList.hasScores()) {\n              sdoc.addField(SCORE_FIELD, iterator.score());\n            }\n            list.add(sdoc);\n          }\n          responseWriter.writeAllDocs(info, list);\n        }\n\n      } else {\n        responseWriter.writeOther(name, val);\n\n      }\n    }\n    responseWriter.end();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5ea1095b056cbefa393b519c151cd8d4c60088f","date":1304398632,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  /**\n   * \n   * The main method that allows users to write {@link SingleResponseWriter}s\n   * and provide them as the initial parameter <code>responseWriter</code> to\n   * this method which defines how output should be generated.\n   * \n   * @param responseWriter\n   *          The user-provided {@link SingleResponseWriter} implementation.\n   * @param request\n   *          The provided {@link SolrQueryRequest}.\n   * @param response\n   *          The provided {@link SolrQueryResponse}.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public void write(SingleResponseWriter responseWriter,\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    responseWriter.start();\n    NamedList nl = response.getValues();\n    for (int i = 0; i < nl.size(); i++) {\n      String name = nl.getName(i);\n      Object val = nl.getVal(i);\n      if (\"responseHeader\".equals(name)) {\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\n      } else if (val instanceof SolrDocumentList) {\n        SolrDocumentList list = (SolrDocumentList) val;\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (SolrDocument solrDocument : list)\n            responseWriter.writeDoc(solrDocument);\n          responseWriter.endDocumentList();\n        } else {\n          responseWriter.writeAllDocs(info, list);\n        }\n      } else if (val instanceof DocList) {\n        DocList docList = (DocList) val;\n        int sz = docList.size();\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\n            .getSearcher(), response.getReturnFields());\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\n            docList.maxScore());\n        DocIterator iterator = docList.iterator();\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            responseWriter.writeDoc(sdoc);\n          }\n        } else {\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\n              .size());\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            list.add(sdoc);\n          }\n          responseWriter.writeAllDocs(info, list);\n        }\n\n      } else {\n        responseWriter.writeOther(name, val);\n\n      }\n    }\n    responseWriter.end();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  /**\n   * \n   * The main method that allows users to write {@link SingleResponseWriter}s\n   * and provide them as the initial parameter <code>responseWriter</code> to\n   * this method which defines how output should be generated.\n   * \n   * @param responseWriter\n   *          The user-provided {@link SingleResponseWriter} implementation.\n   * @param request\n   *          The provided {@link SolrQueryRequest}.\n   * @param response\n   *          The provided {@link SolrQueryResponse}.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public void write(SingleResponseWriter responseWriter,\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    responseWriter.start();\n    NamedList nl = response.getValues();\n    for (int i = 0; i < nl.size(); i++) {\n      String name = nl.getName(i);\n      Object val = nl.getVal(i);\n      if (\"responseHeader\".equals(name)) {\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\n      } else if (val instanceof SolrDocumentList) {\n        SolrDocumentList list = (SolrDocumentList) val;\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (SolrDocument solrDocument : list)\n            responseWriter.writeDoc(solrDocument);\n          responseWriter.endDocumentList();\n        } else {\n          responseWriter.writeAllDocs(info, list);\n        }\n      } else if (val instanceof DocList) {\n        DocList docList = (DocList) val;\n        int sz = docList.size();\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\n            .getSearcher(), response.getReturnFields());\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\n            docList.maxScore());\n        DocIterator iterator = docList.iterator();\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            responseWriter.writeDoc(sdoc);\n          }\n        } else {\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\n              .size());\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            list.add(sdoc);\n          }\n          responseWriter.writeAllDocs(info, list);\n        }\n\n      } else {\n        responseWriter.writeOther(name, val);\n\n      }\n    }\n    responseWriter.end();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/BaseResponseWriter#write(SingleResponseWriter,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  /**\n   * \n   * The main method that allows users to write {@link SingleResponseWriter}s\n   * and provide them as the initial parameter <code>responseWriter</code> to\n   * this method which defines how output should be generated.\n   * \n   * @param responseWriter\n   *          The user-provided {@link SingleResponseWriter} implementation.\n   * @param request\n   *          The provided {@link SolrQueryRequest}.\n   * @param response\n   *          The provided {@link SolrQueryResponse}.\n   * @throws IOException\n   *           If any error occurs.\n   */\n  public void write(SingleResponseWriter responseWriter,\n      SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    responseWriter.start();\n    NamedList nl = response.getValues();\n    for (int i = 0; i < nl.size(); i++) {\n      String name = nl.getName(i);\n      Object val = nl.getVal(i);\n      if (\"responseHeader\".equals(name)) {\n        Boolean omitHeader = request.getParams().getBool(CommonParams.OMIT_HEADER);\n        if (omitHeader == null || !omitHeader) responseWriter.writeResponseHeader((NamedList) val);\n      } else if (val instanceof SolrDocumentList) {\n        SolrDocumentList list = (SolrDocumentList) val;\n        DocListInfo info = new DocListInfo((int)list.getNumFound(), list.size(), (int)list.getStart(), list.getMaxScore());\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (SolrDocument solrDocument : list)\n            responseWriter.writeDoc(solrDocument);\n          responseWriter.endDocumentList();\n        } else {\n          responseWriter.writeAllDocs(info, list);\n        }\n      } else if (val instanceof DocList) {\n        DocList docList = (DocList) val;\n        int sz = docList.size();\n        IdxInfo idxInfo = new IdxInfo(request.getSchema(), request\n            .getSearcher(), response.getReturnFields());\n        DocListInfo info = new DocListInfo(docList.matches(), docList.size(),docList.offset(),\n            docList.maxScore());\n        DocIterator iterator = docList.iterator();\n        if (responseWriter.isStreamingDocs()) {\n          responseWriter.startDocumentList(name,info);\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            responseWriter.writeDoc(sdoc);\n          }\n        } else {\n          ArrayList<SolrDocument> list = new ArrayList<SolrDocument>(docList\n              .size());\n          for (int j = 0; j < sz; j++) {\n            SolrDocument sdoc = getDoc(iterator.nextDoc(), idxInfo);\n            list.add(sdoc);\n          }\n          responseWriter.writeAllDocs(info, list);\n        }\n\n      } else {\n        responseWriter.writeOther(name, val);\n\n      }\n    }\n    responseWriter.end();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5ea1095b056cbefa393b519c151cd8d4c60088f":["6aedf81f068e430dec27d94310415cc6ff52731c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"fb77744e4d275abebb578c27538f9997bb5624a8":["dff3adc4fd8094e3973a5ecbbe8968ae45a86a55"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["fb77744e4d275abebb578c27538f9997bb5624a8","53537bc67eeb8951732ea5232492defbdd9e5f9b"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","6aedf81f068e430dec27d94310415cc6ff52731c"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["3bb13258feba31ab676502787ab2e1779f129b7a","6aedf81f068e430dec27d94310415cc6ff52731c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["6aedf81f068e430dec27d94310415cc6ff52731c","c5ea1095b056cbefa393b519c151cd8d4c60088f"],"dff3adc4fd8094e3973a5ecbbe8968ae45a86a55":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["d619839baa8ce5503e496b94a9e42ad6f079293f","c5ea1095b056cbefa393b519c151cd8d4c60088f"],"53537bc67eeb8951732ea5232492defbdd9e5f9b":["fb77744e4d275abebb578c27538f9997bb5624a8"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"6aedf81f068e430dec27d94310415cc6ff52731c":["53537bc67eeb8951732ea5232492defbdd9e5f9b"],"3bb13258feba31ab676502787ab2e1779f129b7a":["fb77744e4d275abebb578c27538f9997bb5624a8","53537bc67eeb8951732ea5232492defbdd9e5f9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c5ea1095b056cbefa393b519c151cd8d4c60088f"]},"commit2Childs":{"c5ea1095b056cbefa393b519c151cd8d4c60088f":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"fb77744e4d275abebb578c27538f9997bb5624a8":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","53537bc67eeb8951732ea5232492defbdd9e5f9b","3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"1da8d55113b689b06716246649de6f62430f15c0":["dff3adc4fd8094e3973a5ecbbe8968ae45a86a55"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"dff3adc4fd8094e3973a5ecbbe8968ae45a86a55":["fb77744e4d275abebb578c27538f9997bb5624a8"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"53537bc67eeb8951732ea5232492defbdd9e5f9b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","6aedf81f068e430dec27d94310415cc6ff52731c","3bb13258feba31ab676502787ab2e1779f129b7a"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"6aedf81f068e430dec27d94310415cc6ff52731c":["c5ea1095b056cbefa393b519c151cd8d4c60088f","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"3bb13258feba31ab676502787ab2e1779f129b7a":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}