{"path":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","sourceNew":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) {\n\n    int term = si.getOrd(docID);\n    int arrIdx = term - startTermIndex;\n    if (arrIdx >= 0 && arrIdx < nTerms) {\n      final BytesRef br = si.lookup(term, tempBR);\n      String key = br == null ? null : br.utf8ToString();\n      HashMap<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) {\n\n    int term = si.getOrd(docID);\n    int arrIdx = term - startTermIndex;\n    if (arrIdx >= 0 && arrIdx < nTerms) {\n      final BytesRef br = si.lookup(term, tempBR);\n      String key = br == null ? null : br.utf8ToString();\n      HashMap<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","sourceNew":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) {\n\n    int term = si.getOrd(docID);\n    int arrIdx = term - startTermIndex;\n    if (arrIdx >= 0 && arrIdx < nTerms) {\n      final BytesRef br = si.lookup(term, tempBR);\n      String key = br == null ? null : br.utf8ToString();\n      HashMap<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) {\n\n    int term = si.getOrd(docID);\n    int arrIdx = term - startTermIndex;\n    if (arrIdx >= 0 && arrIdx < nTerms) {\n      final BytesRef br = si.lookup(term, tempBR);\n      String key = br == null ? null : br.utf8ToString();\n      HashMap<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","sourceNew":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) {\n\n    int term = si.getOrd(docID);\n    int arrIdx = term - startTermIndex;\n    if (arrIdx >= 0 && arrIdx < nTerms) {\n      final BytesRef br = si.lookup(term, tempBR);\n      String key = br == null ? null : br.utf8ToString();\n      HashMap<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) {\n\n    int term = si.getOrd(docID);\n    int arrIdx = term - startTermIndex;\n    if (arrIdx >= 0 && arrIdx < nTerms) {\n      final BytesRef br = si.lookup(term, tempBR);\n      String key = br == null ? null : br.utf8ToString();\n      HashMap<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d7e5f3aa5935964617824d1f9b2599ddb334464","date":1353762831,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","sourceNew":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) {\n\n    int term = si.getOrd(docID);\n    int arrIdx = term - startTermIndex;\n    if (arrIdx >= 0 && arrIdx < nTerms) {\n      final BytesRef br;\n      if (term == -1) {\n        br = null;\n      } else {\n        br = tempBR;\n        si.lookupOrd(term, tempBR);\n      }\n      String key = br == null ? null : br.utf8ToString();\n      HashMap<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) {\n\n    int term = si.getOrd(docID);\n    int arrIdx = term - startTermIndex;\n    if (arrIdx >= 0 && arrIdx < nTerms) {\n      final BytesRef br = si.lookup(term, tempBR);\n      String key = br == null ? null : br.utf8ToString();\n      HashMap<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","sourceNew":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) {\n\n    int term = si.getOrd(docID);\n    int arrIdx = term - startTermIndex;\n    if (arrIdx >= 0 && arrIdx < nTerms) {\n      final BytesRef br;\n      if (term == -1) {\n        br = null;\n      } else {\n        br = tempBR;\n        si.lookupOrd(term, tempBR);\n      }\n      String key = br == null ? null : br.utf8ToString();\n      HashMap<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) {\n\n    int term = si.getOrd(docID);\n    int arrIdx = term - startTermIndex;\n    if (arrIdx >= 0 && arrIdx < nTerms) {\n      final BytesRef br = si.lookup(term, tempBR);\n      String key = br == null ? null : br.utf8ToString();\n      HashMap<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73bb5a57dc75b54a39494f99986599cae7dff417","date":1361040620,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","sourceNew":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) throws IOException {\n    if (topLevelSortedValues == null) {\n      topLevelSortedValues = FieldCache.DEFAULT.getTermsIndex(topLevelReader, name);\n    }\n    \n    int term = topLevelSortedValues.getOrd(docID);\n    int arrIdx = term;\n    if (arrIdx >= 0 && arrIdx < topLevelSortedValues.getValueCount()) {\n      final BytesRef br;\n      if (term == -1) {\n        br = null;\n      } else {\n        br = tempBR;\n        topLevelSortedValues.lookupOrd(term, tempBR);\n      }\n      String key = br == null ? null : br.utf8ToString();\n      while (facetStatsTerms.size() <= statsTermNum) {\n        facetStatsTerms.add(new HashMap<String, Integer>());\n      }\n      final Map<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) {\n\n    int term = si.getOrd(docID);\n    int arrIdx = term - startTermIndex;\n    if (arrIdx >= 0 && arrIdx < nTerms) {\n      final BytesRef br;\n      if (term == -1) {\n        br = null;\n      } else {\n        br = tempBR;\n        si.lookupOrd(term, tempBR);\n      }\n      String key = br == null ? null : br.utf8ToString();\n      HashMap<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","sourceNew":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) throws IOException {\n    if (topLevelSortedValues == null) {\n      topLevelSortedValues = FieldCache.DEFAULT.getTermsIndex(topLevelReader, name);\n    }\n    \n    int term = topLevelSortedValues.getOrd(docID);\n    int arrIdx = term;\n    if (arrIdx >= 0 && arrIdx < topLevelSortedValues.getValueCount()) {\n      final BytesRef br;\n      if (term == -1) {\n        br = null;\n      } else {\n        br = tempBR;\n        topLevelSortedValues.lookupOrd(term, tempBR);\n      }\n      String key = br == null ? null : br.utf8ToString();\n      while (facetStatsTerms.size() <= statsTermNum) {\n        facetStatsTerms.add(new HashMap<String, Integer>());\n      }\n      final Map<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) {\n\n    int term = si.getOrd(docID);\n    int arrIdx = term - startTermIndex;\n    if (arrIdx >= 0 && arrIdx < nTerms) {\n      final BytesRef br;\n      if (term == -1) {\n        br = null;\n      } else {\n        br = tempBR;\n        si.lookupOrd(term, tempBR);\n      }\n      String key = br == null ? null : br.utf8ToString();\n      HashMap<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e28b14e7783d24ca69089f13ddadadbd2afdcb29","date":1399840701,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","sourceNew":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) throws IOException {\n    if (topLevelSortedValues == null) {\n      topLevelSortedValues = DocValues.getSorted(topLevelReader, name);\n    }\n    \n    int term = topLevelSortedValues.getOrd(docID);\n    int arrIdx = term;\n    if (arrIdx >= 0 && arrIdx < topLevelSortedValues.getValueCount()) {\n      final BytesRef br;\n      if (term == -1) {\n        br = null;\n      } else {\n        br = tempBR;\n        topLevelSortedValues.lookupOrd(term, tempBR);\n      }\n      String key = br == null ? null : br.utf8ToString();\n      while (facetStatsTerms.size() <= statsTermNum) {\n        facetStatsTerms.add(new HashMap<String, Integer>());\n      }\n      final Map<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) throws IOException {\n    if (topLevelSortedValues == null) {\n      topLevelSortedValues = FieldCache.DEFAULT.getTermsIndex(topLevelReader, name);\n    }\n    \n    int term = topLevelSortedValues.getOrd(docID);\n    int arrIdx = term;\n    if (arrIdx >= 0 && arrIdx < topLevelSortedValues.getValueCount()) {\n      final BytesRef br;\n      if (term == -1) {\n        br = null;\n      } else {\n        br = tempBR;\n        topLevelSortedValues.lookupOrd(term, tempBR);\n      }\n      String key = br == null ? null : br.utf8ToString();\n      while (facetStatsTerms.size() <= statsTermNum) {\n        facetStatsTerms.add(new HashMap<String, Integer>());\n      }\n      final Map<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","sourceNew":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) throws IOException {\n    if (topLevelSortedValues == null) {\n      topLevelSortedValues = DocValues.getSorted(topLevelReader, name);\n    }\n    \n    int term = topLevelSortedValues.getOrd(docID);\n    int arrIdx = term;\n    if (arrIdx >= 0 && arrIdx < topLevelSortedValues.getValueCount()) {\n      final BytesRef br;\n      if (term == -1) {\n        br = null;\n      } else {\n        br = tempBR;\n        topLevelSortedValues.lookupOrd(term, tempBR);\n      }\n      String key = br == null ? null : br.utf8ToString();\n      while (facetStatsTerms.size() <= statsTermNum) {\n        facetStatsTerms.add(new HashMap<String, Integer>());\n      }\n      final Map<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) throws IOException {\n    if (topLevelSortedValues == null) {\n      topLevelSortedValues = FieldCache.DEFAULT.getTermsIndex(topLevelReader, name);\n    }\n    \n    int term = topLevelSortedValues.getOrd(docID);\n    int arrIdx = term;\n    if (arrIdx >= 0 && arrIdx < topLevelSortedValues.getValueCount()) {\n      final BytesRef br;\n      if (term == -1) {\n        br = null;\n      } else {\n        br = tempBR;\n        topLevelSortedValues.lookupOrd(term, tempBR);\n      }\n      String key = br == null ? null : br.utf8ToString();\n      while (facetStatsTerms.size() <= statsTermNum) {\n        facetStatsTerms.add(new HashMap<String, Integer>());\n      }\n      final Map<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","sourceNew":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) throws IOException {\n    if (topLevelSortedValues == null) {\n      topLevelSortedValues = DocValues.getSorted(topLevelReader, name);\n    }\n    \n    int term = topLevelSortedValues.getOrd(docID);\n    int arrIdx = term;\n    if (arrIdx >= 0 && arrIdx < topLevelSortedValues.getValueCount()) {\n      final BytesRef br;\n      if (term == -1) {\n        br = null;\n      } else {\n        br = tempBR;\n        topLevelSortedValues.lookupOrd(term, tempBR);\n      }\n      String key = br == null ? null : br.utf8ToString();\n      while (facetStatsTerms.size() <= statsTermNum) {\n        facetStatsTerms.add(new HashMap<String, Integer>());\n      }\n      final Map<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) throws IOException {\n    if (topLevelSortedValues == null) {\n      topLevelSortedValues = FieldCache.DEFAULT.getTermsIndex(topLevelReader, name);\n    }\n    \n    int term = topLevelSortedValues.getOrd(docID);\n    int arrIdx = term;\n    if (arrIdx >= 0 && arrIdx < topLevelSortedValues.getValueCount()) {\n      final BytesRef br;\n      if (term == -1) {\n        br = null;\n      } else {\n        br = tempBR;\n        topLevelSortedValues.lookupOrd(term, tempBR);\n      }\n      String key = br == null ? null : br.utf8ToString();\n      while (facetStatsTerms.size() <= statsTermNum) {\n        facetStatsTerms.add(new HashMap<String, Integer>());\n      }\n      final Map<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","sourceNew":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) throws IOException {\n    if (topLevelSortedValues == null) {\n      topLevelSortedValues = DocValues.getSorted(topLevelReader, name);\n    }\n    \n    int term = topLevelSortedValues.getOrd(docID);\n    int arrIdx = term;\n    if (arrIdx >= 0 && arrIdx < topLevelSortedValues.getValueCount()) {\n      final String key;\n      if (term == -1) {\n        key = null;\n      } else {\n        key = topLevelSortedValues.lookupOrd(term).utf8ToString();\n      }\n      while (facetStatsTerms.size() <= statsTermNum) {\n        facetStatsTerms.add(new HashMap<String, Integer>());\n      }\n      final Map<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) throws IOException {\n    if (topLevelSortedValues == null) {\n      topLevelSortedValues = DocValues.getSorted(topLevelReader, name);\n    }\n    \n    int term = topLevelSortedValues.getOrd(docID);\n    int arrIdx = term;\n    if (arrIdx >= 0 && arrIdx < topLevelSortedValues.getValueCount()) {\n      final BytesRef br;\n      if (term == -1) {\n        br = null;\n      } else {\n        br = tempBR;\n        topLevelSortedValues.lookupOrd(term, tempBR);\n      }\n      String key = br == null ? null : br.utf8ToString();\n      while (facetStatsTerms.size() <= statsTermNum) {\n        facetStatsTerms.add(new HashMap<String, Integer>());\n      }\n      final Map<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10eb287e62f3e48c07b2a817c1750c859bb5e7e7","date":1410374187,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","sourceNew":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) throws IOException {\n    if (topLevelSortedValues == null) {\n      topLevelSortedValues = DocValues.getSorted(topLevelReader, name);\n    }\n \n    \n    int term = topLevelSortedValues.getOrd(docID);\n    \n    int arrIdx = term;\n    if (arrIdx >= 0 && arrIdx < topLevelSortedValues.getValueCount()) {\n      final String key;\n      if (term == -1) {\n        key = null;\n      } else {\n        key = topLevelSortedValues.lookupOrd(term).utf8ToString();\n      }\n      while (facetStatsTerms.size() <= statsTermNum) {\n        facetStatsTerms.add(new HashMap<String, Integer>());\n      }\n      \n      \n      final Map<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) throws IOException {\n    if (topLevelSortedValues == null) {\n      topLevelSortedValues = DocValues.getSorted(topLevelReader, name);\n    }\n    \n    int term = topLevelSortedValues.getOrd(docID);\n    int arrIdx = term;\n    if (arrIdx >= 0 && arrIdx < topLevelSortedValues.getValueCount()) {\n      final String key;\n      if (term == -1) {\n        key = null;\n      } else {\n        key = topLevelSortedValues.lookupOrd(term).utf8ToString();\n      }\n      while (facetStatsTerms.size() <= statsTermNum) {\n        facetStatsTerms.add(new HashMap<String, Integer>());\n      }\n      final Map<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","sourceNew":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) throws IOException {\n    if (topLevelSortedValues == null) {\n      topLevelSortedValues = DocValues.getSorted(topLevelReader, name);\n    }\n\n    if (docID > topLevelSortedValues.docID()) {\n      topLevelSortedValues.advance(docID);\n    }\n \n    int term;\n    if (docID == topLevelSortedValues.docID()) {\n      term = topLevelSortedValues.ordValue();\n    } else {\n      term = -1;\n    }\n    \n    int arrIdx = term;\n    if (arrIdx >= 0 && arrIdx < topLevelSortedValues.getValueCount()) {\n      final String key;\n      if (term == -1) {\n        key = null;\n      } else {\n        key = topLevelSortedValues.lookupOrd(term).utf8ToString();\n      }\n      while (facetStatsTerms.size() <= statsTermNum) {\n        facetStatsTerms.add(new HashMap<String, Integer>());\n      }\n      \n      \n      final Map<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) throws IOException {\n    if (topLevelSortedValues == null) {\n      topLevelSortedValues = DocValues.getSorted(topLevelReader, name);\n    }\n \n    \n    int term = topLevelSortedValues.getOrd(docID);\n    \n    int arrIdx = term;\n    if (arrIdx >= 0 && arrIdx < topLevelSortedValues.getValueCount()) {\n      final String key;\n      if (term == -1) {\n        key = null;\n      } else {\n        key = topLevelSortedValues.lookupOrd(term).utf8ToString();\n      }\n      while (facetStatsTerms.size() <= statsTermNum) {\n        facetStatsTerms.add(new HashMap<String, Integer>());\n      }\n      \n      \n      final Map<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","sourceNew":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) throws IOException {\n    if (topLevelSortedValues == null) {\n      topLevelSortedValues = DocValues.getSorted(topLevelReader, name);\n    }\n\n    if (docID > topLevelSortedValues.docID()) {\n      topLevelSortedValues.advance(docID);\n    }\n \n    int term;\n    if (docID == topLevelSortedValues.docID()) {\n      term = topLevelSortedValues.ordValue();\n    } else {\n      term = -1;\n    }\n    \n    int arrIdx = term;\n    if (arrIdx >= 0 && arrIdx < topLevelSortedValues.getValueCount()) {\n      final String key;\n      if (term == -1) {\n        key = null;\n      } else {\n        key = topLevelSortedValues.lookupOrd(term).utf8ToString();\n      }\n      while (facetStatsTerms.size() <= statsTermNum) {\n        facetStatsTerms.add(new HashMap<String, Integer>());\n      }\n      \n      \n      final Map<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) throws IOException {\n    if (topLevelSortedValues == null) {\n      topLevelSortedValues = DocValues.getSorted(topLevelReader, name);\n    }\n \n    \n    int term = topLevelSortedValues.getOrd(docID);\n    \n    int arrIdx = term;\n    if (arrIdx >= 0 && arrIdx < topLevelSortedValues.getValueCount()) {\n      final String key;\n      if (term == -1) {\n        key = null;\n      } else {\n        key = topLevelSortedValues.lookupOrd(term).utf8ToString();\n      }\n      while (facetStatsTerms.size() <= statsTermNum) {\n        facetStatsTerms.add(new HashMap<String, Integer>());\n      }\n      \n      \n      final Map<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FieldFacetStats#facetTermNum(int,int).mjava","sourceNew":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) throws IOException {\n    if (topLevelSortedValues == null) {\n      topLevelSortedValues = DocValues.getSorted(topLevelReader, name);\n    }\n\n    if (docID > topLevelSortedValues.docID()) {\n      topLevelSortedValues.advance(docID);\n    }\n \n    int term;\n    if (docID == topLevelSortedValues.docID()) {\n      term = topLevelSortedValues.ordValue();\n    } else {\n      term = -1;\n    }\n    \n    int arrIdx = term;\n    if (arrIdx >= 0 && arrIdx < topLevelSortedValues.getValueCount()) {\n      final String key;\n      if (term == -1) {\n        key = null;\n      } else {\n        key = topLevelSortedValues.lookupOrd(term).utf8ToString();\n      }\n      while (facetStatsTerms.size() <= statsTermNum) {\n        facetStatsTerms.add(new HashMap<String, Integer>());\n      }\n      \n      \n      final Map<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  // Function to keep track of facet counts for term number.\n  // Currently only used by UnInvertedField stats\n  public boolean facetTermNum(int docID, int statsTermNum) throws IOException {\n    if (topLevelSortedValues == null) {\n      topLevelSortedValues = DocValues.getSorted(topLevelReader, name);\n    }\n \n    \n    int term = topLevelSortedValues.getOrd(docID);\n    \n    int arrIdx = term;\n    if (arrIdx >= 0 && arrIdx < topLevelSortedValues.getValueCount()) {\n      final String key;\n      if (term == -1) {\n        key = null;\n      } else {\n        key = topLevelSortedValues.lookupOrd(term).utf8ToString();\n      }\n      while (facetStatsTerms.size() <= statsTermNum) {\n        facetStatsTerms.add(new HashMap<String, Integer>());\n      }\n      \n      \n      final Map<String, Integer> statsTermCounts = facetStatsTerms.get(statsTermNum);\n      Integer statsTermCount = statsTermCounts.get(key);\n      if (statsTermCount == null) {\n        statsTermCounts.put(key, 1);\n      } else {\n        statsTermCounts.put(key, statsTermCount + 1);\n      }\n      return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"10eb287e62f3e48c07b2a817c1750c859bb5e7e7":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"56572ec06f1407c066d6b7399413178b33176cd8":["73bb5a57dc75b54a39494f99986599cae7dff417","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["10eb287e62f3e48c07b2a817c1750c859bb5e7e7","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["c26f00b574427b55127e869b935845554afde1fa","9d7e5f3aa5935964617824d1f9b2599ddb334464"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["d4d69c535930b5cce125cff868d40f6373dc27d4","73bb5a57dc75b54a39494f99986599cae7dff417"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["73bb5a57dc75b54a39494f99986599cae7dff417","e28b14e7783d24ca69089f13ddadadbd2afdcb29"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["10eb287e62f3e48c07b2a817c1750c859bb5e7e7","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["10eb287e62f3e48c07b2a817c1750c859bb5e7e7"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e28b14e7783d24ca69089f13ddadadbd2afdcb29":["73bb5a57dc75b54a39494f99986599cae7dff417"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"73bb5a57dc75b54a39494f99986599cae7dff417":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"10eb287e62f3e48c07b2a817c1750c859bb5e7e7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["10eb287e62f3e48c07b2a817c1750c859bb5e7e7"],"c26f00b574427b55127e869b935845554afde1fa":["d4d69c535930b5cce125cff868d40f6373dc27d4","9d7e5f3aa5935964617824d1f9b2599ddb334464"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["95303ff3749680c743b9425f9cf99e6e4065e8a8","73bb5a57dc75b54a39494f99986599cae7dff417"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"93dd449115a9247533e44bab47e8429e5dccbc6d":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","56572ec06f1407c066d6b7399413178b33176cd8"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9d7e5f3aa5935964617824d1f9b2599ddb334464":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"e28b14e7783d24ca69089f13ddadadbd2afdcb29":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"73bb5a57dc75b54a39494f99986599cae7dff417":["56572ec06f1407c066d6b7399413178b33176cd8","95303ff3749680c743b9425f9cf99e6e4065e8a8","93dd449115a9247533e44bab47e8429e5dccbc6d","e28b14e7783d24ca69089f13ddadadbd2afdcb29"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","95303ff3749680c743b9425f9cf99e6e4065e8a8","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}