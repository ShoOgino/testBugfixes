{"path":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#verifyPropDistributedAsExpected(Map[String,String],String).mjava","commits":[{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#verifyPropDistributedAsExpected(Map[String,String],String).mjava","pathOld":"/dev/null","sourceNew":"  // Used when we concentrate the leader on a few nodes.\n  private void verifyPropDistributedAsExpected(Map<String, String> expectedShardReplicaMap, String prop) throws InterruptedException, KeeperException {\n    // Make sure that the shard unique are where you expect.\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n\n    String propLC = prop.toLowerCase(Locale.ROOT);\n    boolean failure = false;\n    DocCollection docCollection = null;\n    while (timeout.hasTimedOut() == false) {\n      forceUpdateCollectionStatus();\n      docCollection = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(COLLECTION_NAME);\n      failure = false;\n      for (Map.Entry<String, String> ent : expectedShardReplicaMap.entrySet()) {\n        Replica rep = docCollection.getSlice(ent.getKey()).getReplica(ent.getValue());\n        if (rep.getBool(\"property.\" + propLC, false) == false) {\n          failure = true;\n        }\n      }\n      if (failure == false) {\n        return;\n      }\n      TimeUnit.MILLISECONDS.sleep(100);\n    }\n\n    fail(prop + \" properties are not on the expected replicas: \" + docCollection.toString()\n        + System.lineSeparator() + \"Expected \" + expectedShardReplicaMap.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#verifyPropDistributedAsExpected(Map[String,String],String).mjava","pathOld":"/dev/null","sourceNew":"  // Used when we concentrate the leader on a few nodes.\n  private void verifyPropDistributedAsExpected(Map<String, String> expectedShardReplicaMap, String prop) throws InterruptedException, KeeperException {\n    // Make sure that the shard unique are where you expect.\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n\n    String propLC = prop.toLowerCase(Locale.ROOT);\n    boolean failure = false;\n    DocCollection docCollection = null;\n    while (timeout.hasTimedOut() == false) {\n      forceUpdateCollectionStatus();\n      docCollection = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(COLLECTION_NAME);\n      failure = false;\n      for (Map.Entry<String, String> ent : expectedShardReplicaMap.entrySet()) {\n        Replica rep = docCollection.getSlice(ent.getKey()).getReplica(ent.getValue());\n        if (rep.getBool(\"property.\" + propLC, false) == false) {\n          failure = true;\n        }\n      }\n      if (failure == false) {\n        return;\n      }\n      TimeUnit.MILLISECONDS.sleep(100);\n    }\n\n    fail(prop + \" properties are not on the expected replicas: \" + docCollection.toString()\n        + System.lineSeparator() + \"Expected \" + expectedShardReplicaMap.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73fd358e8ec697393d56617f4d9cedaca74dca14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73fd358e8ec697393d56617f4d9cedaca74dca14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73fd358e8ec697393d56617f4d9cedaca74dca14"]},"commit2Childs":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}