{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#getTagType(String).mjava","commits":[{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#getTagType(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#getValidator(String).mjava","sourceNew":"  public static ConditionType getTagType(String name) {\n    ConditionType info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = validatetypes.get(\"STRING\");\n    if (info == null && name.startsWith(Clause.METRICS_PREFIX)) info = ConditionType.LAZY;\n    return info;\n  }\n\n","sourceOld":"  private static ValidateInfo getValidator(String name) {\n    ValidateInfo info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = validatetypes.get(\"STRING\");\n    if (info == null && name.startsWith(METRICS_PREFIX)) info = LazyValidator.INST;\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac52b67f02dde8ba4b452266fdf8c0e15442c856","date":1510634873,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#getTagType(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#getTagType(String).mjava","sourceNew":"  public static ConditionType getTagType(String name) {\n    ConditionType info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = ConditionType.LAZY;\n    if (info == null && name.startsWith(Clause.METRICS_PREFIX)) info = ConditionType.LAZY;\n    return info;\n  }\n\n","sourceOld":"  public static ConditionType getTagType(String name) {\n    ConditionType info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = validatetypes.get(\"STRING\");\n    if (info == null && name.startsWith(Clause.METRICS_PREFIX)) info = ConditionType.LAZY;\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78231225260fb5b3bf9920f203d71477d5501c65","date":1531726165,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#getTagType(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#getTagType(String).mjava","sourceNew":"  public static ConditionType getTagType(String name) {\n    ConditionType info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = ConditionType.STRING;\n    if (info == null && name.startsWith(Clause.METRICS_PREFIX)) info = ConditionType.LAZY;\n    return info;\n  }\n\n","sourceOld":"  public static ConditionType getTagType(String name) {\n    ConditionType info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = ConditionType.LAZY;\n    if (info == null && name.startsWith(Clause.METRICS_PREFIX)) info = ConditionType.LAZY;\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10a24d2afdf00bbe1013706b80c989315772dc9","date":1531726431,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#getTagType(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#getTagType(String).mjava","sourceNew":"  public static ConditionType getTagType(String name) {\n    ConditionType info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = ConditionType.LAZY;\n    if (info == null && name.startsWith(Clause.METRICS_PREFIX)) info = ConditionType.LAZY;\n    return info;\n  }\n\n","sourceOld":"  public static ConditionType getTagType(String name) {\n    ConditionType info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = ConditionType.STRING;\n    if (info == null && name.startsWith(Clause.METRICS_PREFIX)) info = ConditionType.LAZY;\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f91616b62c917fffa5286c4ef2d21b10cc56f8e","date":1531726562,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#getTagType(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#getTagType(String).mjava","sourceNew":"  public static ConditionType getTagType(String name) {\n    ConditionType info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = ConditionType.STRING;\n    if (info == null && name.startsWith(Clause.METRICS_PREFIX)) info = ConditionType.LAZY;\n    return info;\n  }\n\n","sourceOld":"  public static ConditionType getTagType(String name) {\n    ConditionType info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = ConditionType.LAZY;\n    if (info == null && name.startsWith(Clause.METRICS_PREFIX)) info = ConditionType.LAZY;\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#getTagType(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#getTagType(String).mjava","sourceNew":"  public static ConditionType getTagType(String name) {\n    ConditionType info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = ConditionType.STRING;\n    if (info == null && name.startsWith(Clause.METRICS_PREFIX)) info = ConditionType.LAZY;\n    return info;\n  }\n\n","sourceOld":"  public static ConditionType getTagType(String name) {\n    ConditionType info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = ConditionType.LAZY;\n    if (info == null && name.startsWith(Clause.METRICS_PREFIX)) info = ConditionType.LAZY;\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#getTagType(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#getTagType(String).mjava","sourceNew":"  public static ConditionType getTagType(String name) {\n    return Policy.getTagType(name);\n  }\n\n","sourceOld":"  public static ConditionType getTagType(String name) {\n    ConditionType info = validatetypes.get(name);\n    if (info == null && name.startsWith(ImplicitSnitch.SYSPROP)) info = ConditionType.STRING;\n    if (info == null && name.startsWith(Clause.METRICS_PREFIX)) info = ConditionType.LAZY;\n    return info;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427edb17549d4bb82462a16eec4ee0533d12d5b7","date":1533006754,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggestion#getTagType(String).mjava","sourceNew":null,"sourceOld":"  public static ConditionType getTagType(String name) {\n    return Policy.getTagType(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a10a24d2afdf00bbe1013706b80c989315772dc9":["78231225260fb5b3bf9920f203d71477d5501c65"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["ac52b67f02dde8ba4b452266fdf8c0e15442c856","8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["27639bb5e041490ce599065875dd2f6d8beef62a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78231225260fb5b3bf9920f203d71477d5501c65":["ac52b67f02dde8ba4b452266fdf8c0e15442c856"],"ac52b67f02dde8ba4b452266fdf8c0e15442c856":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"27639bb5e041490ce599065875dd2f6d8beef62a":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["427edb17549d4bb82462a16eec4ee0533d12d5b7"]},"commit2Childs":{"a10a24d2afdf00bbe1013706b80c989315772dc9":["8f91616b62c917fffa5286c4ef2d21b10cc56f8e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"78231225260fb5b3bf9920f203d71477d5501c65":["a10a24d2afdf00bbe1013706b80c989315772dc9"],"ac52b67f02dde8ba4b452266fdf8c0e15442c856":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","78231225260fb5b3bf9920f203d71477d5501c65"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["ac52b67f02dde8ba4b452266fdf8c0e15442c856"],"8f91616b62c917fffa5286c4ef2d21b10cc56f8e":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","27639bb5e041490ce599065875dd2f6d8beef62a"],"27639bb5e041490ce599065875dd2f6d8beef62a":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}