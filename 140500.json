{"path":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#createCollection(MiniSolrCloudCluster,String,String,String,Boolean,Map[String,String]).mjava","commits":[{"id":"a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2","date":1481746736,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#createCollection(MiniSolrCloudCluster,String,String,String,Boolean,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String createNodeSet, String asyncId,\n      Boolean indexToPersist, Map<String,String> collectionProperties) throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1\").resolve(\"conf\"), configName);\n\n    final boolean persistIndex = (indexToPersist != null ? indexToPersist.booleanValue() : random().nextBoolean());\n    if (collectionProperties == null) {\n      collectionProperties = new HashMap<>();\n    }\n    collectionProperties.putIfAbsent(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.putIfAbsent(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.putIfAbsent(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    if (random().nextBoolean()) {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICY, TieredMergePolicy.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"false\");\n    } else {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICYFACTORY, TieredMergePolicyFactory.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"false\");\n    }\n    collectionProperties.putIfAbsent(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.putIfAbsent(\"solr.directoryFactory\", (persistIndex ? \"solr.StandardDirectoryFactory\" : \"solr.RAMDirectoryFactory\"));\n\n    if (asyncId == null) {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .process(miniCluster.getSolrClient());\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .processAndWait(miniCluster.getSolrClient(), 30);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#createCollection(MiniSolrCloudCluster,String,String,String,Boolean,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String createNodeSet, String asyncId,\n      Boolean indexToPersist, Map<String,String> collectionProperties) throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1\").resolve(\"conf\"), configName);\n\n    final boolean persistIndex = (indexToPersist != null ? indexToPersist.booleanValue() : random().nextBoolean());\n    if (collectionProperties == null) {\n      collectionProperties = new HashMap<>();\n    }\n    collectionProperties.putIfAbsent(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.putIfAbsent(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.putIfAbsent(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    if (random().nextBoolean()) {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICY, TieredMergePolicy.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"false\");\n    } else {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICYFACTORY, TieredMergePolicyFactory.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"false\");\n    }\n    collectionProperties.putIfAbsent(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.putIfAbsent(\"solr.directoryFactory\", (persistIndex ? \"solr.StandardDirectoryFactory\" : \"solr.RAMDirectoryFactory\"));\n\n    if (asyncId == null) {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .process(miniCluster.getSolrClient());\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .processAndWait(miniCluster.getSolrClient(), 30);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#createCollection(MiniSolrCloudCluster,String,String,String,Boolean,Map[String,String]).mjava","sourceNew":null,"sourceOld":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String createNodeSet, String asyncId,\n      Boolean indexToPersist, Map<String,String> collectionProperties) throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1\").resolve(\"conf\"), configName);\n\n    final boolean persistIndex = (indexToPersist != null ? indexToPersist.booleanValue() : random().nextBoolean());\n    if (collectionProperties == null) {\n      collectionProperties = new HashMap<>();\n    }\n    collectionProperties.putIfAbsent(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.putIfAbsent(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.putIfAbsent(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    if (random().nextBoolean()) {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICY, TieredMergePolicy.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"false\");\n    } else {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICYFACTORY, TieredMergePolicyFactory.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"false\");\n    }\n    collectionProperties.putIfAbsent(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.putIfAbsent(\"solr.directoryFactory\", (persistIndex ? \"solr.StandardDirectoryFactory\" : \"solr.RAMDirectoryFactory\"));\n\n    if (asyncId == null) {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .process(miniCluster.getSolrClient());\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .processAndWait(miniCluster.getSolrClient(), 30);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#createCollection(MiniSolrCloudCluster,String,String,String,Boolean,Map[String,String]).mjava","sourceNew":null,"sourceOld":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String createNodeSet, String asyncId,\n      Boolean indexToPersist, Map<String,String> collectionProperties) throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1\").resolve(\"conf\"), configName);\n\n    final boolean persistIndex = (indexToPersist != null ? indexToPersist.booleanValue() : random().nextBoolean());\n    if (collectionProperties == null) {\n      collectionProperties = new HashMap<>();\n    }\n    collectionProperties.putIfAbsent(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.putIfAbsent(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.putIfAbsent(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    if (random().nextBoolean()) {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICY, TieredMergePolicy.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"false\");\n    } else {\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICYFACTORY, TieredMergePolicyFactory.class.getName());\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY, \"true\");\n      collectionProperties.putIfAbsent(SolrTestCaseJ4.SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY, \"false\");\n    }\n    collectionProperties.putIfAbsent(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.putIfAbsent(\"solr.directoryFactory\", (persistIndex ? \"solr.StandardDirectoryFactory\" : \"solr.RAMDirectoryFactory\"));\n\n    if (asyncId == null) {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .process(miniCluster.getSolrClient());\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .processAndWait(miniCluster.getSolrClient(), 30);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["9856095f7afb5a607bf5e65077615ed91273508c","415bbbe7da8065dd3c477bdc3c703c6425622998"],"a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["415bbbe7da8065dd3c477bdc3c703c6425622998"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2":["415bbbe7da8065dd3c477bdc3c703c6425622998","9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7fee5fdef2fee1378cc07129e0c40d0b7eab3b2","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":["598b5d23aa7c9732bf473c21a9cd309c44599394"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}