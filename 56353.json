{"path":"lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer#score().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer#score().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ReqOptSumScorer#score().mjava","sourceNew":"  /** Returns the score of the current document matching the query.\n   * Initially invalid, until {@link #nextDoc()} is called the first time.\n   * @return The score of the required scorer, eventually increased by the score\n   * of the optional scorer when it also matches the current document.\n   */\n  @Override\n  public float score() throws IOException {\n    int curDoc = reqScorer.docID();\n    float reqScore = reqScorer.score();\n    if (optScorer == null) {\n      return reqScore;\n    }\n    \n    int optScorerDoc = optScorer.docID();\n    if (optScorerDoc < curDoc && (optScorerDoc = optScorer.advance(curDoc)) == NO_MORE_DOCS) {\n      optScorer = null;\n      return reqScore;\n    }\n    \n    return optScorerDoc == curDoc ? reqScore + optScorer.score() : reqScore;\n  }\n\n","sourceOld":"  /** Returns the score of the current document matching the query.\n   * Initially invalid, until {@link #nextDoc()} is called the first time.\n   * @return The score of the required scorer, eventually increased by the score\n   * of the optional scorer when it also matches the current document.\n   */\n  @Override\n  public float score() throws IOException {\n    int curDoc = reqScorer.docID();\n    float reqScore = reqScorer.score();\n    if (optScorer == null) {\n      return reqScore;\n    }\n    \n    int optScorerDoc = optScorer.docID();\n    if (optScorerDoc < curDoc && (optScorerDoc = optScorer.advance(curDoc)) == NO_MORE_DOCS) {\n      optScorer = null;\n      return reqScore;\n    }\n    \n    return optScorerDoc == curDoc ? reqScore + optScorer.score() : reqScore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7e5e8b8d73f2aac82ca5aa45d34d8adaa6940f6","date":1345834972,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer#score().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer#score().mjava","sourceNew":"  /** Returns the score of the current document matching the query.\n   * Initially invalid, until {@link #nextDoc()} is called the first time.\n   * @return The score of the required scorer, eventually increased by the score\n   * of the optional scorer when it also matches the current document.\n   */\n  @Override\n  public float score() throws IOException {\n    // TODO: sum into a double and cast to float if we ever send required clauses to BS1\n    int curDoc = reqScorer.docID();\n    float reqScore = reqScorer.score();\n    if (optScorer == null) {\n      return reqScore;\n    }\n    \n    int optScorerDoc = optScorer.docID();\n    if (optScorerDoc < curDoc && (optScorerDoc = optScorer.advance(curDoc)) == NO_MORE_DOCS) {\n      optScorer = null;\n      return reqScore;\n    }\n    \n    return optScorerDoc == curDoc ? reqScore + optScorer.score() : reqScore;\n  }\n\n","sourceOld":"  /** Returns the score of the current document matching the query.\n   * Initially invalid, until {@link #nextDoc()} is called the first time.\n   * @return The score of the required scorer, eventually increased by the score\n   * of the optional scorer when it also matches the current document.\n   */\n  @Override\n  public float score() throws IOException {\n    int curDoc = reqScorer.docID();\n    float reqScore = reqScorer.score();\n    if (optScorer == null) {\n      return reqScore;\n    }\n    \n    int optScorerDoc = optScorer.docID();\n    if (optScorerDoc < curDoc && (optScorerDoc = optScorer.advance(curDoc)) == NO_MORE_DOCS) {\n      optScorer = null;\n      return reqScore;\n    }\n    \n    return optScorerDoc == curDoc ? reqScore + optScorer.score() : reqScore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer#score().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer#score().mjava","sourceNew":"  /** Returns the score of the current document matching the query.\n   * Initially invalid, until {@link #nextDoc()} is called the first time.\n   * @return The score of the required scorer, eventually increased by the score\n   * of the optional scorer when it also matches the current document.\n   */\n  @Override\n  public float score() throws IOException {\n    // TODO: sum into a double and cast to float if we ever send required clauses to BS1\n    int curDoc = reqScorer.docID();\n    float reqScore = reqScorer.score();\n    if (optScorer == null) {\n      return reqScore;\n    }\n    \n    int optScorerDoc = optScorer.docID();\n    if (optScorerDoc < curDoc && (optScorerDoc = optScorer.advance(curDoc)) == NO_MORE_DOCS) {\n      optScorer = null;\n      return reqScore;\n    }\n    \n    return optScorerDoc == curDoc ? reqScore + optScorer.score() : reqScore;\n  }\n\n","sourceOld":"  /** Returns the score of the current document matching the query.\n   * Initially invalid, until {@link #nextDoc()} is called the first time.\n   * @return The score of the required scorer, eventually increased by the score\n   * of the optional scorer when it also matches the current document.\n   */\n  @Override\n  public float score() throws IOException {\n    int curDoc = reqScorer.docID();\n    float reqScore = reqScorer.score();\n    if (optScorer == null) {\n      return reqScore;\n    }\n    \n    int optScorerDoc = optScorer.docID();\n    if (optScorerDoc < curDoc && (optScorerDoc = optScorer.advance(curDoc)) == NO_MORE_DOCS) {\n      optScorer = null;\n      return reqScore;\n    }\n    \n    return optScorerDoc == curDoc ? reqScore + optScorer.score() : reqScore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer#score().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer#score().mjava","sourceNew":"  /** Returns the score of the current document matching the query.\n   * Initially invalid, until the {@link #iterator()} is advanced the first time.\n   * @return The score of the required scorer, eventually increased by the score\n   * of the optional scorer when it also matches the current document.\n   */\n  @Override\n  public float score() throws IOException {\n    // TODO: sum into a double and cast to float if we ever send required clauses to BS1\n    int curDoc = reqScorer.docID();\n    float score = reqScorer.score();\n\n    int optScorerDoc = optIterator.docID();\n    if (optScorerDoc < curDoc) {\n      optScorerDoc = optIterator.advance(curDoc);\n    }\n    \n    if (optScorerDoc == curDoc) {\n      score += optScorer.score();\n    }\n    \n    return score;\n  }\n\n","sourceOld":"  /** Returns the score of the current document matching the query.\n   * Initially invalid, until {@link #nextDoc()} is called the first time.\n   * @return The score of the required scorer, eventually increased by the score\n   * of the optional scorer when it also matches the current document.\n   */\n  @Override\n  public float score() throws IOException {\n    // TODO: sum into a double and cast to float if we ever send required clauses to BS1\n    int curDoc = reqScorer.docID();\n    float reqScore = reqScorer.score();\n    if (optScorer == null) {\n      return reqScore;\n    }\n    \n    int optScorerDoc = optScorer.docID();\n    if (optScorerDoc < curDoc && (optScorerDoc = optScorer.advance(curDoc)) == NO_MORE_DOCS) {\n      optScorer = null;\n      return reqScore;\n    }\n    \n    return optScorerDoc == curDoc ? reqScore + optScorer.score() : reqScore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3f6e835e5d9dd77ae3684fd58db9dc00fb01ec0","date":1514294096,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer#score().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReqOptSumScorer#score().mjava","sourceNew":"  @Override\n  public float score() throws IOException {\n    // TODO: sum into a double and cast to float if we ever send required clauses to BS1\n    int curDoc = reqScorer.docID();\n    float score = reqScorer.score();\n\n    int optScorerDoc = optApproximation.docID();\n    if (optScorerDoc < curDoc) {\n      optScorerDoc = optApproximation.advance(curDoc);\n      if (optTwoPhase != null && optScorerDoc == curDoc && optTwoPhase.matches() == false) {\n        optScorerDoc = optApproximation.nextDoc();\n      }\n    }\n    if (optScorerDoc == curDoc) {\n      score += optScorer.score();\n    }\n\n    return score;\n  }\n\n","sourceOld":"  /** Returns the score of the current document matching the query.\n   * Initially invalid, until the {@link #iterator()} is advanced the first time.\n   * @return The score of the required scorer, eventually increased by the score\n   * of the optional scorer when it also matches the current document.\n   */\n  @Override\n  public float score() throws IOException {\n    // TODO: sum into a double and cast to float if we ever send required clauses to BS1\n    int curDoc = reqScorer.docID();\n    float score = reqScorer.score();\n\n    int optScorerDoc = optIterator.docID();\n    if (optScorerDoc < curDoc) {\n      optScorerDoc = optIterator.advance(curDoc);\n    }\n    \n    if (optScorerDoc == curDoc) {\n      score += optScorer.score();\n    }\n    \n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","d7e5e8b8d73f2aac82ca5aa45d34d8adaa6940f6"],"d7e5e8b8d73f2aac82ca5aa45d34d8adaa6940f6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dd748bb245633a8195281556bb0e68a6ea97d18":["d7e5e8b8d73f2aac82ca5aa45d34d8adaa6940f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3f6e835e5d9dd77ae3684fd58db9dc00fb01ec0"],"a3f6e835e5d9dd77ae3684fd58db9dc00fb01ec0":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["001b25b42373b22a52f399dbf072f1224632e8e6","d7e5e8b8d73f2aac82ca5aa45d34d8adaa6940f6"],"d7e5e8b8d73f2aac82ca5aa45d34d8adaa6940f6":["001b25b42373b22a52f399dbf072f1224632e8e6","7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a3f6e835e5d9dd77ae3684fd58db9dc00fb01ec0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a3f6e835e5d9dd77ae3684fd58db9dc00fb01ec0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}