{"path":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","sourceNew":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"id:1\", \"lucene\", req);\n\n    SolrQueryParser parserTwo = new SolrQueryParser(qparser, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n\n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"id:1\", \"lucene\", req);\n\n    SolrQueryParser parserTwo = new SolrQueryParser(qparser, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n\n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","sourceNew":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"id:1\", \"lucene\", req);\n\n    SolrQueryParser parserTwo = new SolrQueryParser(qparser, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n\n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"id:1\", \"lucene\", req);\n\n    SolrQueryParser parserTwo = new SolrQueryParser(qparser, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n\n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","sourceNew":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"id:1\", \"lucene\", req);\n\n    SolrQueryParser parserTwo = new SolrQueryParser(qparser, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n\n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"id:1\", \"lucene\", req);\n\n    SolrQueryParser parserTwo = new SolrQueryParser(qparser, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n\n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","date":1470751445,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","sourceNew":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"id:1\", req);\n\n    SolrQueryParser parserTwo = new SolrQueryParser(qparser, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n\n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"id:1\", \"lucene\", req);\n\n    SolrQueryParser parserTwo = new SolrQueryParser(qparser, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n\n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","sourceNew":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"id:1\", req);\n\n    SolrQueryParser parserTwo = new SolrQueryParser(qparser, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n\n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"id:1\", \"lucene\", req);\n\n    SolrQueryParser parserTwo = new SolrQueryParser(qparser, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n\n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","sourceNew":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"id:1\", req);\n\n    SolrQueryParser parserTwo = new SolrQueryParser(qparser, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n\n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"id:1\", \"lucene\", req);\n\n    SolrQueryParser parserTwo = new SolrQueryParser(qparser, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n\n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestReversedWildcardFilterFactory#testQueryParsing().mjava","sourceNew":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"id:1\", req);\n\n    SolrQueryParser parserTwo = new SolrQueryParser(qparser, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n\n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testQueryParsing() throws Exception {\n\n    // add some docs\n    assertU(adoc(\"id\", \"1\", \"one\", \"one\"));\n    assertU(adoc(\"id\", \"2\", \"two\", \"two\"));\n    assertU(adoc(\"id\", \"3\", \"three\", \"three\"));\n    assertU(adoc(\"id\", \"4\", \"one\", \"four\"));\n    assertU(adoc(\"id\", \"5\", \"two\", \"five\"));\n    assertU(adoc(\"id\", \"6\", \"three\", \"si\\uD834\\uDD1Ex\"));\n    assertU(commit());\n    \n    assertQ(\"should have matched\",\n        req(\"+id:1 +one:one\"),\n        \"//result[@numFound=1]\");\n    \n    assertQ(\"should have matched\",\n        req(\"+id:4 +one:f*ur\"),\n        \"//result[@numFound=1]\");\n        \n    assertQ(\"should have matched\",\n        req(\"+id:6 +three:*si\\uD834\\uDD1Ex\"),\n        \"//result[@numFound=1]\");\n\n    SolrQueryRequest req = req();\n    QParser qparser = QParser.getParser(\"id:1\", \"lucene\", req);\n\n    SolrQueryParser parserTwo = new SolrQueryParser(qparser, \"two\");\n    assertTrue(parserTwo.getAllowLeadingWildcard());\n\n    // test conditional reversal\n    assertTrue(wasReversed(parserTwo, \"*hree\"));\n    assertTrue(wasReversed(parserTwo, \"t*ree\"));\n    assertTrue(wasReversed(parserTwo, \"th*ee\"));\n    assertFalse(wasReversed(parserTwo, \"thr*e\"));\n    assertTrue(wasReversed(parserTwo, \"?hree\"));\n    assertTrue(wasReversed(parserTwo, \"t?ree\"));\n    assertFalse(wasReversed(parserTwo, \"th?ee\"));\n    assertFalse(wasReversed(parserTwo, \"th?*ee\"));\n    assertFalse(wasReversed(parserTwo, \"short*token\"));\n    assertTrue(wasReversed(parserTwo, \"ver*longtoken\"));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["c26f00b574427b55127e869b935845554afde1fa","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c26f00b574427b55127e869b935845554afde1fa","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["c26f00b574427b55127e869b935845554afde1fa","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"]},"commit2Childs":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}