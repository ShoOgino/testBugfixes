{"path":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\n    tp.freqStream = new CountingStream(tp.freqStream);\n\n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\n    tp.freqStream = new CountingStream(tp.freqStream);\n\n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    TermPositions tp = reader.termPositions();\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    SegmentTermPositions tp = (SegmentTermPositions) reader.termPositions();\n    tp.freqStream = new CountingStream(tp.freqStream);\n\n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    TermPositions tp = reader.termPositions();\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    TermPositions tp = reader.termPositions();\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      tp.seek(term);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(newRandom(), TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(newRandom(), TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(newRandom(), TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(newRandom(), TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3975a9b3cd376547ea9b1b3e5ea09e0d67001e56","date":1285778148,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(new Field(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = SegmentReader.getOnlySegmentReader(dir);\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")).setMergePolicy(newInOrderLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")).setMergePolicy(newInOrderLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")).setMergePolicy(newInOrderLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")).setMergePolicy(newInOrderLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")).setMergePolicy(newInOrderLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")).setMergePolicy(newInOrderLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")).setMergePolicy(newInOrderLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getDeletedDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), TextField.TYPE_UNSTORED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), Store.NO, Index.ANALYZED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), TextField.TYPE_UNSTORED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodecProvider(_TestUtil.alwaysCodec(\"Standard\")).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), TextField.TYPE_UNSTORED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), TextField.TYPE_UNSTORED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), TextField.TYPE_UNSTORED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.optimize();\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), TextField.TYPE_UNSTORED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()),\n                                                         false);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), TextField.TYPE_UNSTORED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()));\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ad6c0825c8ac3394fcb1e304855dd86a88eedc","date":1327857033,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), TextField.TYPE_UNSTORED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicIndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()),\n                                                         false);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), TextField.TYPE_UNSTORED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()),\n                                                         false);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), TextField.TYPE_UNSTORED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()),\n                                                         false);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), TextField.TYPE_UNSTORED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicIndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()),\n                                                         false);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), TextField.TYPE_UNSTORED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()),\n                                                         false);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), TextField.TYPE_UNSTORED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()),\n                                                         false);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#testSimpleSkip().mjava","sourceNew":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), TextField.TYPE_UNSTORED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()),\n                                                         false);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","sourceOld":"  public void testSimpleSkip() throws IOException {\n    Directory dir = new CountingRAMDirectory(new RAMDirectory());\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new PayloadAnalyzer()).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).setMergePolicy(newLogMergePolicy()));\n    Term term = new Term(\"test\", \"a\");\n    for (int i = 0; i < 5000; i++) {\n      Document d1 = new Document();\n      d1.add(newField(term.field(), term.text(), TextField.TYPE_UNSTORED));\n      writer.addDocument(d1);\n    }\n    writer.commit();\n    writer.forceMerge(1);\n    writer.close();\n\n    AtomicReader reader = getOnlySegmentReader(IndexReader.open(dir));\n    \n    for (int i = 0; i < 2; i++) {\n      counter = 0;\n      DocsAndPositionsEnum tp = reader.termPositionsEnum(reader.getLiveDocs(),\n                                                         term.field(),\n                                                         new BytesRef(term.text()),\n                                                         false);\n\n      checkSkipTo(tp, 14, 185); // no skips\n      checkSkipTo(tp, 17, 190); // one skip on level 0\n      checkSkipTo(tp, 287, 200); // one skip on level 1, two on level 0\n    \n      // this test would fail if we had only one skip level,\n      // because than more bytes would be read from the freqStream\n      checkSkipTo(tp, 4800, 250);// one skip on level 2\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["7b91922b55d15444d554721b352861d028eb8278"],"3975a9b3cd376547ea9b1b3e5ea09e0d67001e56":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"c19f985e36a65cc969e8e564fe337a0d41512075":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["c19f985e36a65cc969e8e564fe337a0d41512075"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","01e5948db9a07144112d2f08f28ca2e3cd880348"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","28427ef110c4c5bf5b4057731b83110bd1e13724"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["01e5948db9a07144112d2f08f28ca2e3cd880348","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["31f025ae60076ae95274433f3fe8e6ace2857a87","da6d5ac19a80d65b1e864251f155d30960353b7e"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"54ad6c0825c8ac3394fcb1e304855dd86a88eedc":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"7b91922b55d15444d554721b352861d028eb8278":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["54ad6c0825c8ac3394fcb1e304855dd86a88eedc"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","01e5948db9a07144112d2f08f28ca2e3cd880348"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"3bb13258feba31ab676502787ab2e1779f129b7a":["3975a9b3cd376547ea9b1b3e5ea09e0d67001e56","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["3975a9b3cd376547ea9b1b3e5ea09e0d67001e56"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["1509f151d7692d84fae414b2b799ac06ba60fcb4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"3975a9b3cd376547ea9b1b3e5ea09e0d67001e56":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["3975a9b3cd376547ea9b1b3e5ea09e0d67001e56"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["01e5948db9a07144112d2f08f28ca2e3cd880348","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","135621f3a0670a9394eb563224a3b76cc4dddc0f","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233","45669a651c970812a680841b97a77cce06af559f"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["b21422ff1d1d56499dec481f193b402e5e8def5b","5f4e87790277826a2aea119328600dfb07761f32"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7b91922b55d15444d554721b352861d028eb8278"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a05409176bd65129d67a785ee70e881e238a9aef"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["5cab9a86bd67202d20b6adc463008c8e982b070a","54ad6c0825c8ac3394fcb1e304855dd86a88eedc"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"54ad6c0825c8ac3394fcb1e304855dd86a88eedc":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"7b91922b55d15444d554721b352861d028eb8278":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"45669a651c970812a680841b97a77cce06af559f":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}