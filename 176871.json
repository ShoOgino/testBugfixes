{"path":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#getShortPath().mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#getShortPath().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#getShortPath().mjava","sourceNew":"  /**\n   * Find the shortest path with the Viterbi algorithm.\n   * @return {@link List}\n   */\n  public List getShortPath() {\n    int current;\n    int nodeCount = getToCount();\n    List path = new ArrayList();\n    PathNode zeroPath = new PathNode();\n    zeroPath.weight = 0;\n    zeroPath.preNode = 0;\n    path.add(zeroPath);\n    for (current = 1; current <= nodeCount; current++) {\n      double weight;\n      List edges = getToList(current);\n\n      double minWeight = Double.MAX_VALUE;\n      SegTokenPair minEdge = null;\n      for (Iterator iter1 = edges.iterator(); iter1.hasNext();) {\n        SegTokenPair edge = (SegTokenPair) iter1.next();\n        weight = edge.weight;\n        PathNode preNode = (PathNode) path.get(edge.from);\n        if (preNode.weight + weight < minWeight) {\n          minWeight = preNode.weight + weight;\n          minEdge = edge;\n        }\n      }\n      PathNode newNode = new PathNode();\n      newNode.weight = minWeight;\n      newNode.preNode = minEdge.from;\n      path.add(newNode);\n    }\n\n    // Calculate PathNodes\n    int preNode, lastNode;\n    lastNode = path.size() - 1;\n    current = lastNode;\n    List rpath = new ArrayList();\n    List resultPath = new ArrayList();\n\n    rpath.add(new Integer(current));\n    while (current != 0) {\n      PathNode currentPathNode = (PathNode) path.get(current);\n      preNode = currentPathNode.preNode;\n      rpath.add(new Integer(preNode));\n      current = preNode;\n    }\n    for (int j = rpath.size() - 1; j >= 0; j--) {\n      Integer idInteger = (Integer) rpath.get(j);\n      int id = idInteger.intValue();\n      SegToken t = (SegToken) segTokenList.get(id);\n      resultPath.add(t);\n    }\n    return resultPath;\n\n  }\n\n","sourceOld":"  /**\n   * Find the shortest path with the Viterbi algorithm.\n   * @return {@link List}\n   */\n  public List getShortPath() {\n    int current;\n    int nodeCount = getToCount();\n    List path = new ArrayList();\n    PathNode zeroPath = new PathNode();\n    zeroPath.weight = 0;\n    zeroPath.preNode = 0;\n    path.add(zeroPath);\n    for (current = 1; current <= nodeCount; current++) {\n      double weight;\n      List edges = getToList(current);\n\n      double minWeight = Double.MAX_VALUE;\n      SegTokenPair minEdge = null;\n      for (Iterator iter1 = edges.iterator(); iter1.hasNext();) {\n        SegTokenPair edge = (SegTokenPair) iter1.next();\n        weight = edge.weight;\n        PathNode preNode = (PathNode) path.get(edge.from);\n        if (preNode.weight + weight < minWeight) {\n          minWeight = preNode.weight + weight;\n          minEdge = edge;\n        }\n      }\n      PathNode newNode = new PathNode();\n      newNode.weight = minWeight;\n      newNode.preNode = minEdge.from;\n      path.add(newNode);\n    }\n\n    // Calculate PathNodes\n    int preNode, lastNode;\n    lastNode = path.size() - 1;\n    current = lastNode;\n    List rpath = new ArrayList();\n    List resultPath = new ArrayList();\n\n    rpath.add(new Integer(current));\n    while (current != 0) {\n      PathNode currentPathNode = (PathNode) path.get(current);\n      preNode = currentPathNode.preNode;\n      rpath.add(new Integer(preNode));\n      current = preNode;\n    }\n    for (int j = rpath.size() - 1; j >= 0; j--) {\n      Integer idInteger = (Integer) rpath.get(j);\n      int id = idInteger.intValue();\n      SegToken t = (SegToken) segTokenList.get(id);\n      resultPath.add(t);\n    }\n    return resultPath;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#getShortPath().mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#getShortPath().mjava","sourceNew":"  /**\n   * Find the shortest path with the Viterbi algorithm.\n   * @return {@link List}\n   */\n  public List getShortPath() {\n    int current;\n    int nodeCount = getToCount();\n    List path = new ArrayList();\n    PathNode zeroPath = new PathNode();\n    zeroPath.weight = 0;\n    zeroPath.preNode = 0;\n    path.add(zeroPath);\n    for (current = 1; current <= nodeCount; current++) {\n      double weight;\n      List edges = getToList(current);\n\n      double minWeight = Double.MAX_VALUE;\n      SegTokenPair minEdge = null;\n      for (Iterator iter1 = edges.iterator(); iter1.hasNext();) {\n        SegTokenPair edge = (SegTokenPair) iter1.next();\n        weight = edge.weight;\n        PathNode preNode = (PathNode) path.get(edge.from);\n        if (preNode.weight + weight < minWeight) {\n          minWeight = preNode.weight + weight;\n          minEdge = edge;\n        }\n      }\n      PathNode newNode = new PathNode();\n      newNode.weight = minWeight;\n      newNode.preNode = minEdge.from;\n      path.add(newNode);\n    }\n\n    // Calculate PathNodes\n    int preNode, lastNode;\n    lastNode = path.size() - 1;\n    current = lastNode;\n    List rpath = new ArrayList();\n    List resultPath = new ArrayList();\n\n    rpath.add(Integer.valueOf(current));\n    while (current != 0) {\n      PathNode currentPathNode = (PathNode) path.get(current);\n      preNode = currentPathNode.preNode;\n      rpath.add(Integer.valueOf(preNode));\n      current = preNode;\n    }\n    for (int j = rpath.size() - 1; j >= 0; j--) {\n      Integer idInteger = (Integer) rpath.get(j);\n      int id = idInteger.intValue();\n      SegToken t = (SegToken) segTokenList.get(id);\n      resultPath.add(t);\n    }\n    return resultPath;\n\n  }\n\n","sourceOld":"  /**\n   * Find the shortest path with the Viterbi algorithm.\n   * @return {@link List}\n   */\n  public List getShortPath() {\n    int current;\n    int nodeCount = getToCount();\n    List path = new ArrayList();\n    PathNode zeroPath = new PathNode();\n    zeroPath.weight = 0;\n    zeroPath.preNode = 0;\n    path.add(zeroPath);\n    for (current = 1; current <= nodeCount; current++) {\n      double weight;\n      List edges = getToList(current);\n\n      double minWeight = Double.MAX_VALUE;\n      SegTokenPair minEdge = null;\n      for (Iterator iter1 = edges.iterator(); iter1.hasNext();) {\n        SegTokenPair edge = (SegTokenPair) iter1.next();\n        weight = edge.weight;\n        PathNode preNode = (PathNode) path.get(edge.from);\n        if (preNode.weight + weight < minWeight) {\n          minWeight = preNode.weight + weight;\n          minEdge = edge;\n        }\n      }\n      PathNode newNode = new PathNode();\n      newNode.weight = minWeight;\n      newNode.preNode = minEdge.from;\n      path.add(newNode);\n    }\n\n    // Calculate PathNodes\n    int preNode, lastNode;\n    lastNode = path.size() - 1;\n    current = lastNode;\n    List rpath = new ArrayList();\n    List resultPath = new ArrayList();\n\n    rpath.add(new Integer(current));\n    while (current != 0) {\n      PathNode currentPathNode = (PathNode) path.get(current);\n      preNode = currentPathNode.preNode;\n      rpath.add(new Integer(preNode));\n      current = preNode;\n    }\n    for (int j = rpath.size() - 1; j >= 0; j--) {\n      Integer idInteger = (Integer) rpath.get(j);\n      int id = idInteger.intValue();\n      SegToken t = (SegToken) segTokenList.get(id);\n      resultPath.add(t);\n    }\n    return resultPath;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"573b8638be27860dcb2ce77889c694e5f8a76106","date":1256855390,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#getShortPath().mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#getShortPath().mjava","sourceNew":"  /**\n   * Find the shortest path with the Viterbi algorithm.\n   * @return {@link List}\n   */\n  public List<SegToken> getShortPath() {\n    int current;\n    int nodeCount = getToCount();\n    List<PathNode> path = new ArrayList<PathNode>();\n    PathNode zeroPath = new PathNode();\n    zeroPath.weight = 0;\n    zeroPath.preNode = 0;\n    path.add(zeroPath);\n    for (current = 1; current <= nodeCount; current++) {\n      double weight;\n      List<SegTokenPair> edges = getToList(current);\n\n      double minWeight = Double.MAX_VALUE;\n      SegTokenPair minEdge = null;\n      for (SegTokenPair edge : edges) {\n        weight = edge.weight;\n        PathNode preNode = path.get(edge.from);\n        if (preNode.weight + weight < minWeight) {\n          minWeight = preNode.weight + weight;\n          minEdge = edge;\n        }\n      }\n      PathNode newNode = new PathNode();\n      newNode.weight = minWeight;\n      newNode.preNode = minEdge.from;\n      path.add(newNode);\n    }\n\n    // Calculate PathNodes\n    int preNode, lastNode;\n    lastNode = path.size() - 1;\n    current = lastNode;\n    List<Integer> rpath = new ArrayList<Integer>();\n    List<SegToken> resultPath = new ArrayList<SegToken>();\n\n    rpath.add(current);\n    while (current != 0) {\n      PathNode currentPathNode = (PathNode) path.get(current);\n      preNode = currentPathNode.preNode;\n      rpath.add(Integer.valueOf(preNode));\n      current = preNode;\n    }\n    for (int j = rpath.size() - 1; j >= 0; j--) {\n      Integer idInteger = (Integer) rpath.get(j);\n      int id = idInteger.intValue();\n      SegToken t = segTokenList.get(id);\n      resultPath.add(t);\n    }\n    return resultPath;\n\n  }\n\n","sourceOld":"  /**\n   * Find the shortest path with the Viterbi algorithm.\n   * @return {@link List}\n   */\n  public List getShortPath() {\n    int current;\n    int nodeCount = getToCount();\n    List path = new ArrayList();\n    PathNode zeroPath = new PathNode();\n    zeroPath.weight = 0;\n    zeroPath.preNode = 0;\n    path.add(zeroPath);\n    for (current = 1; current <= nodeCount; current++) {\n      double weight;\n      List edges = getToList(current);\n\n      double minWeight = Double.MAX_VALUE;\n      SegTokenPair minEdge = null;\n      for (Iterator iter1 = edges.iterator(); iter1.hasNext();) {\n        SegTokenPair edge = (SegTokenPair) iter1.next();\n        weight = edge.weight;\n        PathNode preNode = (PathNode) path.get(edge.from);\n        if (preNode.weight + weight < minWeight) {\n          minWeight = preNode.weight + weight;\n          minEdge = edge;\n        }\n      }\n      PathNode newNode = new PathNode();\n      newNode.weight = minWeight;\n      newNode.preNode = minEdge.from;\n      path.add(newNode);\n    }\n\n    // Calculate PathNodes\n    int preNode, lastNode;\n    lastNode = path.size() - 1;\n    current = lastNode;\n    List rpath = new ArrayList();\n    List resultPath = new ArrayList();\n\n    rpath.add(Integer.valueOf(current));\n    while (current != 0) {\n      PathNode currentPathNode = (PathNode) path.get(current);\n      preNode = currentPathNode.preNode;\n      rpath.add(Integer.valueOf(preNode));\n      current = preNode;\n    }\n    for (int j = rpath.size() - 1; j >= 0; j--) {\n      Integer idInteger = (Integer) rpath.get(j);\n      int id = idInteger.intValue();\n      SegToken t = (SegToken) segTokenList.get(id);\n      resultPath.add(t);\n    }\n    return resultPath;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#getShortPath().mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#getShortPath().mjava","sourceNew":"  /**\n   * Find the shortest path with the Viterbi algorithm.\n   * @return {@link List}\n   */\n  public List<SegToken> getShortPath() {\n    int current;\n    int nodeCount = getToCount();\n    List<PathNode> path = new ArrayList<PathNode>();\n    PathNode zeroPath = new PathNode();\n    zeroPath.weight = 0;\n    zeroPath.preNode = 0;\n    path.add(zeroPath);\n    for (current = 1; current <= nodeCount; current++) {\n      double weight;\n      List<SegTokenPair> edges = getToList(current);\n\n      double minWeight = Double.MAX_VALUE;\n      SegTokenPair minEdge = null;\n      for (SegTokenPair edge : edges) {\n        weight = edge.weight;\n        PathNode preNode = path.get(edge.from);\n        if (preNode.weight + weight < minWeight) {\n          minWeight = preNode.weight + weight;\n          minEdge = edge;\n        }\n      }\n      PathNode newNode = new PathNode();\n      newNode.weight = minWeight;\n      newNode.preNode = minEdge.from;\n      path.add(newNode);\n    }\n\n    // Calculate PathNodes\n    int preNode, lastNode;\n    lastNode = path.size() - 1;\n    current = lastNode;\n    List<Integer> rpath = new ArrayList<Integer>();\n    List<SegToken> resultPath = new ArrayList<SegToken>();\n\n    rpath.add(current);\n    while (current != 0) {\n      PathNode currentPathNode = path.get(current);\n      preNode = currentPathNode.preNode;\n      rpath.add(Integer.valueOf(preNode));\n      current = preNode;\n    }\n    for (int j = rpath.size() - 1; j >= 0; j--) {\n      Integer idInteger = (Integer) rpath.get(j);\n      int id = idInteger.intValue();\n      SegToken t = segTokenList.get(id);\n      resultPath.add(t);\n    }\n    return resultPath;\n\n  }\n\n","sourceOld":"  /**\n   * Find the shortest path with the Viterbi algorithm.\n   * @return {@link List}\n   */\n  public List<SegToken> getShortPath() {\n    int current;\n    int nodeCount = getToCount();\n    List<PathNode> path = new ArrayList<PathNode>();\n    PathNode zeroPath = new PathNode();\n    zeroPath.weight = 0;\n    zeroPath.preNode = 0;\n    path.add(zeroPath);\n    for (current = 1; current <= nodeCount; current++) {\n      double weight;\n      List<SegTokenPair> edges = getToList(current);\n\n      double minWeight = Double.MAX_VALUE;\n      SegTokenPair minEdge = null;\n      for (SegTokenPair edge : edges) {\n        weight = edge.weight;\n        PathNode preNode = path.get(edge.from);\n        if (preNode.weight + weight < minWeight) {\n          minWeight = preNode.weight + weight;\n          minEdge = edge;\n        }\n      }\n      PathNode newNode = new PathNode();\n      newNode.weight = minWeight;\n      newNode.preNode = minEdge.from;\n      path.add(newNode);\n    }\n\n    // Calculate PathNodes\n    int preNode, lastNode;\n    lastNode = path.size() - 1;\n    current = lastNode;\n    List<Integer> rpath = new ArrayList<Integer>();\n    List<SegToken> resultPath = new ArrayList<SegToken>();\n\n    rpath.add(current);\n    while (current != 0) {\n      PathNode currentPathNode = (PathNode) path.get(current);\n      preNode = currentPathNode.preNode;\n      rpath.add(Integer.valueOf(preNode));\n      current = preNode;\n    }\n    for (int j = rpath.size() - 1; j >= 0; j--) {\n      Integer idInteger = (Integer) rpath.get(j);\n      int id = idInteger.intValue();\n      SegToken t = segTokenList.get(id);\n      resultPath.add(t);\n    }\n    return resultPath;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#getShortPath().mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BiSegGraph#getShortPath().mjava","sourceNew":"  /**\n   * Find the shortest path with the Viterbi algorithm.\n   * @return {@link List}\n   */\n  public List<SegToken> getShortPath() {\n    int current;\n    int nodeCount = getToCount();\n    List<PathNode> path = new ArrayList<PathNode>();\n    PathNode zeroPath = new PathNode();\n    zeroPath.weight = 0;\n    zeroPath.preNode = 0;\n    path.add(zeroPath);\n    for (current = 1; current <= nodeCount; current++) {\n      double weight;\n      List<SegTokenPair> edges = getToList(current);\n\n      double minWeight = Double.MAX_VALUE;\n      SegTokenPair minEdge = null;\n      for (SegTokenPair edge : edges) {\n        weight = edge.weight;\n        PathNode preNode = path.get(edge.from);\n        if (preNode.weight + weight < minWeight) {\n          minWeight = preNode.weight + weight;\n          minEdge = edge;\n        }\n      }\n      PathNode newNode = new PathNode();\n      newNode.weight = minWeight;\n      newNode.preNode = minEdge.from;\n      path.add(newNode);\n    }\n\n    // Calculate PathNodes\n    int preNode, lastNode;\n    lastNode = path.size() - 1;\n    current = lastNode;\n    List<Integer> rpath = new ArrayList<Integer>();\n    List<SegToken> resultPath = new ArrayList<SegToken>();\n\n    rpath.add(current);\n    while (current != 0) {\n      PathNode currentPathNode = path.get(current);\n      preNode = currentPathNode.preNode;\n      rpath.add(Integer.valueOf(preNode));\n      current = preNode;\n    }\n    for (int j = rpath.size() - 1; j >= 0; j--) {\n      Integer idInteger = (Integer) rpath.get(j);\n      int id = idInteger.intValue();\n      SegToken t = segTokenList.get(id);\n      resultPath.add(t);\n    }\n    return resultPath;\n\n  }\n\n","sourceOld":"  /**\n   * Find the shortest path with the Viterbi algorithm.\n   * @return {@link List}\n   */\n  public List<SegToken> getShortPath() {\n    int current;\n    int nodeCount = getToCount();\n    List<PathNode> path = new ArrayList<PathNode>();\n    PathNode zeroPath = new PathNode();\n    zeroPath.weight = 0;\n    zeroPath.preNode = 0;\n    path.add(zeroPath);\n    for (current = 1; current <= nodeCount; current++) {\n      double weight;\n      List<SegTokenPair> edges = getToList(current);\n\n      double minWeight = Double.MAX_VALUE;\n      SegTokenPair minEdge = null;\n      for (SegTokenPair edge : edges) {\n        weight = edge.weight;\n        PathNode preNode = path.get(edge.from);\n        if (preNode.weight + weight < minWeight) {\n          minWeight = preNode.weight + weight;\n          minEdge = edge;\n        }\n      }\n      PathNode newNode = new PathNode();\n      newNode.weight = minWeight;\n      newNode.preNode = minEdge.from;\n      path.add(newNode);\n    }\n\n    // Calculate PathNodes\n    int preNode, lastNode;\n    lastNode = path.size() - 1;\n    current = lastNode;\n    List<Integer> rpath = new ArrayList<Integer>();\n    List<SegToken> resultPath = new ArrayList<SegToken>();\n\n    rpath.add(current);\n    while (current != 0) {\n      PathNode currentPathNode = path.get(current);\n      preNode = currentPathNode.preNode;\n      rpath.add(Integer.valueOf(preNode));\n      current = preNode;\n    }\n    for (int j = rpath.size() - 1; j >= 0; j--) {\n      Integer idInteger = (Integer) rpath.get(j);\n      int id = idInteger.intValue();\n      SegToken t = segTokenList.get(id);\n      resultPath.add(t);\n    }\n    return resultPath;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["573b8638be27860dcb2ce77889c694e5f8a76106"],"6bcde5e3f23911110baa101ed062b544162825b5":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"573b8638be27860dcb2ce77889c694e5f8a76106":["6bcde5e3f23911110baa101ed062b544162825b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["60cdc0e643184821eb066795a8791cd82559f46e"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6bcde5e3f23911110baa101ed062b544162825b5":["573b8638be27860dcb2ce77889c694e5f8a76106"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["6bcde5e3f23911110baa101ed062b544162825b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"573b8638be27860dcb2ce77889c694e5f8a76106":["60cdc0e643184821eb066795a8791cd82559f46e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}