{"path":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","commits":[{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new WhitespaceAnalyzer(),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new WhitespaceAnalyzer(), \"�mlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new WhitespaceAnalyzer(),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new WhitespaceAnalyzer(), \"�mlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ced3401b9c4e7ed2be67711dbc83e48b81aa736","date":1265394056,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT), \"�mlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new WhitespaceAnalyzer(),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new WhitespaceAnalyzer(), \"�mlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT), \"�mlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT), \"�mlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT), \"�mlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\\\"term germ\\\"~2\", null, \"\\\"term germ\\\"~2\");\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT),\n        \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT), \"�mlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["e8a848e758754282137f42bf85793c278e250390"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a848e758754282137f42bf85793c278e250390"],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}