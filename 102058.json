{"path":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMap1Phrase().mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMap1Phrase().mjava","pathOld":"lucene/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMap1Phrase().mjava","sourceNew":"  public void testQueryPhraseMap1Phrase() throws Exception {\n    Query query = pqF( \"a\", \"b\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = true, fieldMatch = false\n    fq = new FieldQuery( query, true, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 1, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    assertNotNull( qpm.subMap.get( \"b\" ) );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    \n    // phraseHighlight = false, fieldMatch = false\n    fq = new FieldQuery( query, false, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 2, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    assertNotNull( qpm.subMap.get( \"b\" ) );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n\n    // boost != 1\n    query = pqF( 2, \"a\", \"b\" );\n    // phraseHighlight = false, fieldMatch = false\n    fq = new FieldQuery( query, false, false );\n    map = fq.rootMaps;\n    qpm = map.get( null );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertEquals( 2F, qpm2.boost );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertEquals( 2F, qpm3.boost );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertEquals( 2F, qpm2.boost );\n  }\n\n","sourceOld":"  public void testQueryPhraseMap1Phrase() throws Exception {\n    Query query = pqF( \"a\", \"b\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = true, fieldMatch = false\n    fq = new FieldQuery( query, true, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 1, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    assertNotNull( qpm.subMap.get( \"b\" ) );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    \n    // phraseHighlight = false, fieldMatch = false\n    fq = new FieldQuery( query, false, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 2, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    assertNotNull( qpm.subMap.get( \"b\" ) );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n\n    // boost != 1\n    query = pqF( 2, \"a\", \"b\" );\n    // phraseHighlight = false, fieldMatch = false\n    fq = new FieldQuery( query, false, false );\n    map = fq.rootMaps;\n    qpm = map.get( null );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertEquals( 2F, qpm2.boost );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertEquals( 2F, qpm3.boost );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertEquals( 2F, qpm2.boost );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58f6129aa3cc4d7092fe2dacee662b263fb66e94","date":1315473880,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMap1Phrase().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMap1Phrase().mjava","sourceNew":"  public void testQueryPhraseMap1Phrase() throws Exception {\n    Query query = pqF( \"a\", \"b\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n    \n    // phraseHighlight = true, fieldMatch = false\n    fq = new FieldQuery( query, true, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 1, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost, 0);\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n\n    assertNotNull( qpm.subMap.get( \"b\" ) );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost, 0);\n    \n    // phraseHighlight = false, fieldMatch = false\n    fq = new FieldQuery( query, false, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 2, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost, 0);\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n\n    assertNotNull( qpm.subMap.get( \"b\" ) );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost, 0);\n\n    // boost != 1\n    query = pqF( 2, \"a\", \"b\" );\n    // phraseHighlight = false, fieldMatch = false\n    fq = new FieldQuery( query, false, false );\n    map = fq.rootMaps;\n    qpm = map.get( null );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertEquals( 2F, qpm2.boost, 0);\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertEquals( 2F, qpm3.boost, 0);\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertEquals( 2F, qpm2.boost, 0);\n  }\n\n","sourceOld":"  public void testQueryPhraseMap1Phrase() throws Exception {\n    Query query = pqF( \"a\", \"b\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = true, fieldMatch = false\n    fq = new FieldQuery( query, true, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 1, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    assertNotNull( qpm.subMap.get( \"b\" ) );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    \n    // phraseHighlight = false, fieldMatch = false\n    fq = new FieldQuery( query, false, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 2, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost );\n\n    assertNotNull( qpm.subMap.get( \"b\" ) );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost );\n\n    // boost != 1\n    query = pqF( 2, \"a\", \"b\" );\n    // phraseHighlight = false, fieldMatch = false\n    fq = new FieldQuery( query, false, false );\n    map = fq.rootMaps;\n    qpm = map.get( null );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertEquals( 2F, qpm2.boost );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertEquals( 2F, qpm3.boost );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertEquals( 2F, qpm2.boost );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMap1Phrase().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMap1Phrase().mjava","sourceNew":"  public void testQueryPhraseMap1Phrase() throws Exception {\n    Query query = pqF( \"a\", \"b\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n    \n    // phraseHighlight = true, fieldMatch = false\n    fq = new FieldQuery( query, true, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 1, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost, 0);\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n\n    assertNotNull( qpm.subMap.get( \"b\" ) );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost, 0);\n    \n    // phraseHighlight = false, fieldMatch = false\n    fq = new FieldQuery( query, false, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 2, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost, 0);\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n\n    assertNotNull( qpm.subMap.get( \"b\" ) );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost, 0);\n\n    // boost != 1\n    query = pqF( 2, \"a\", \"b\" );\n    // phraseHighlight = false, fieldMatch = false\n    fq = new FieldQuery( query, false, false );\n    map = fq.rootMaps;\n    qpm = map.get( null );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertEquals( 2F, qpm2.boost, 0);\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertEquals( 2F, qpm3.boost, 0);\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertEquals( 2F, qpm2.boost, 0);\n  }\n\n","sourceOld":"  public void testQueryPhraseMap1Phrase() throws Exception {\n    Query query = pqF( \"a\", \"b\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    QueryPhraseMap qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    QueryPhraseMap qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n    \n    // phraseHighlight = true, fieldMatch = false\n    fq = new FieldQuery( query, true, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 1, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertFalse( qpm2.terminal );\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 2, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost, 0);\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n\n    assertNotNull( qpm.subMap.get( \"b\" ) );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost, 0);\n    \n    // phraseHighlight = false, fieldMatch = false\n    fq = new FieldQuery( query, false, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 2, qpm.subMap.size() );\n    assertNotNull( qpm.subMap.get( \"a\" ) );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost, 0);\n    assertEquals( 1, qpm2.subMap.size() );\n    assertNotNull( qpm2.subMap.get( \"b\" ) );\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertTrue( qpm3.terminal );\n    assertEquals( 1F, qpm3.boost, 0);\n\n    assertNotNull( qpm.subMap.get( \"b\" ) );\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertTrue( qpm2.terminal );\n    assertEquals( 1F, qpm2.boost, 0);\n\n    // boost != 1\n    query = pqF( 2, \"a\", \"b\" );\n    // phraseHighlight = false, fieldMatch = false\n    fq = new FieldQuery( query, false, false );\n    map = fq.rootMaps;\n    qpm = map.get( null );\n    qpm2 = qpm.subMap.get( \"a\" );\n    assertEquals( 2F, qpm2.boost, 0);\n    qpm3 = qpm2.subMap.get( \"b\" );\n    assertEquals( 2F, qpm3.boost, 0);\n    qpm2 = qpm.subMap.get( \"b\" );\n    assertEquals( 2F, qpm2.boost, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["58f6129aa3cc4d7092fe2dacee662b263fb66e94"],"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"58f6129aa3cc4d7092fe2dacee662b263fb66e94":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["58f6129aa3cc4d7092fe2dacee662b263fb66e94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}