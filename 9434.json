{"path":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortSorter#sort(AtomicReader).mjava","commits":[{"id":"cbe87c1ed50e47c3704b5fb2b690461bfc158aba","date":1394111115,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortSorter#sort(AtomicReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocMap sort(AtomicReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final FieldComparator<?> comparators[] = new FieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(2, i);\n      comparators[i].setNextReader(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            comparators[i].copy(0, docID1);\n            comparators[i].copy(1, docID2);\n            int comp = reverseMul[i] * comparators[i].compare(0, 1);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"143fbe495c6fa7e253618182fcf5342b12029f0a","date":1394120958,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortSorter#sort(AtomicReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortSorter#sort(AtomicReader).mjava","sourceNew":"  @Override\n  public DocMap sort(AtomicReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final FieldComparator<?> comparators[] = new FieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i);\n      comparators[i].setNextReader(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":"  @Override\n  public DocMap sort(AtomicReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final FieldComparator<?> comparators[] = new FieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(2, i);\n      comparators[i].setNextReader(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            comparators[i].copy(0, docID1);\n            comparators[i].copy(1, docID2);\n            int comp = reverseMul[i] * comparators[i].compare(0, 1);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4cbd3e4a2b5f0b9cfcac79bfbccd35a0de5036","date":1394123292,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortSorter#sort(AtomicReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocMap sort(AtomicReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final FieldComparator<?> comparators[] = new FieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i);\n      comparators[i].setNextReader(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e4cbd3e4a2b5f0b9cfcac79bfbccd35a0de5036":["143fbe495c6fa7e253618182fcf5342b12029f0a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"143fbe495c6fa7e253618182fcf5342b12029f0a":["cbe87c1ed50e47c3704b5fb2b690461bfc158aba"],"cbe87c1ed50e47c3704b5fb2b690461bfc158aba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3e4cbd3e4a2b5f0b9cfcac79bfbccd35a0de5036":[],"143fbe495c6fa7e253618182fcf5342b12029f0a":["3e4cbd3e4a2b5f0b9cfcac79bfbccd35a0de5036"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cbe87c1ed50e47c3704b5fb2b690461bfc158aba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cbe87c1ed50e47c3704b5fb2b690461bfc158aba":["143fbe495c6fa7e253618182fcf5342b12029f0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3e4cbd3e4a2b5f0b9cfcac79bfbccd35a0de5036","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}