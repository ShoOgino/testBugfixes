{"path":"lucene/test-framework/src/test/org/apache/lucene/util/TestExpectThrows#testExpectingNestedAssume().mjava","commits":[{"id":"8d592ac9e6400869a47757802651c715b4e88219","date":1570470117,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/util/TestExpectThrows#testExpectingNestedAssume().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Tests that {@link #expectThrows} behaves correctly when the Runnable contains an \n   * assumption that does not pass but the caller has explicitly said they expect an Exception of that type: \n   * by returning that assumption failure Exception.\n   */\n  public void testExpectingNestedAssume() {\n    final AtomicBoolean ran = new AtomicBoolean(false);\n    AssumptionViolatedException returned = null;\n    try {\n      returned = expectThrows(AssumptionViolatedException.class, () -> {\n          ran.getAndSet(true);\n          assumeTrue(\"this assumption should be returned, not propogated\", false);\n        });\n    } catch (AssumptionViolatedException caught) { // NOTE: we don't use expectThrows to test expectThrows\n      assertNull(\"An exception should not have been thrown\", caught);\n    }\n    assertTrue(ran.get());\n    assertNotNull(returned);\n    assertEquals(\"this assumption should be returned, not propogated\", returned.getMessage());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/util/TestExpectThrows#testExpectingNestedAssume().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Tests that {@link #expectThrows} behaves correctly when the Runnable contains an \n   * assumption that does not pass but the caller has explicitly said they expect an Exception of that type: \n   * by returning that assumption failure Exception.\n   */\n  public void testExpectingNestedAssume() {\n    final AtomicBoolean ran = new AtomicBoolean(false);\n    AssumptionViolatedException returned = null;\n    try {\n      returned = expectThrows(AssumptionViolatedException.class, () -> {\n          ran.getAndSet(true);\n          assumeTrue(\"this assumption should be returned, not propogated\", false);\n        });\n    } catch (AssumptionViolatedException caught) { // NOTE: we don't use expectThrows to test expectThrows\n      assertNull(\"An exception should not have been thrown\", caught);\n    }\n    assertTrue(ran.get());\n    assertNotNull(returned);\n    assertEquals(\"this assumption should be returned, not propogated\", returned.getMessage());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8d592ac9e6400869a47757802651c715b4e88219":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d592ac9e6400869a47757802651c715b4e88219"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d592ac9e6400869a47757802651c715b4e88219"]},"commit2Childs":{"8d592ac9e6400869a47757802651c715b4e88219":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d592ac9e6400869a47757802651c715b4e88219","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}