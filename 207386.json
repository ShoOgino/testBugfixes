{"path":"lucene/src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","sourceNew":"    public int doSloppyPhrase(IndexSearcher s,\n                                int termsInIndex,\n                                int maxClauses,\n                                int iter\n  ) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = r.nextInt(maxClauses-1)+2; // min 2 clauses\n      PhraseQuery q = new PhraseQuery();\n      for (int j=0; j<nClauses; j++) {\n        int tnum = r.nextInt(termsInIndex);\n        q.add(new Term(\"f\",Character.toString((char)(tnum+'A'))), j);\n      }\n      q.setSlop(termsInIndex);  // this could be random too\n\n      CountingHitCollector hc = new CountingHitCollector();\n      s.search(q, hc);\n      ret += hc.getSum();\n    }\n\n    return ret;\n  }\n\n","sourceOld":"    public int doSloppyPhrase(IndexSearcher s,\n                                int termsInIndex,\n                                int maxClauses,\n                                int iter\n  ) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = r.nextInt(maxClauses-1)+2; // min 2 clauses\n      PhraseQuery q = new PhraseQuery();\n      for (int j=0; j<nClauses; j++) {\n        int tnum = r.nextInt(termsInIndex);\n        q.add(new Term(\"f\",Character.toString((char)(tnum+'A'))), j);\n      }\n      q.setSlop(termsInIndex);  // this could be random too\n\n      CountingHitCollector hc = new CountingHitCollector();\n      s.search(q, hc);\n      ret += hc.getSum();\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","sourceNew":"    public int doSloppyPhrase(IndexSearcher s,\n                                int termsInIndex,\n                                int maxClauses,\n                                int iter\n  ) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = random.nextInt(maxClauses-1)+2; // min 2 clauses\n      PhraseQuery q = new PhraseQuery();\n      for (int j=0; j<nClauses; j++) {\n        int tnum = random.nextInt(termsInIndex);\n        q.add(new Term(\"f\",Character.toString((char)(tnum+'A'))), j);\n      }\n      q.setSlop(termsInIndex);  // this could be random too\n\n      CountingHitCollector hc = new CountingHitCollector();\n      s.search(q, hc);\n      ret += hc.getSum();\n    }\n\n    return ret;\n  }\n\n","sourceOld":"    public int doSloppyPhrase(IndexSearcher s,\n                                int termsInIndex,\n                                int maxClauses,\n                                int iter\n  ) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = r.nextInt(maxClauses-1)+2; // min 2 clauses\n      PhraseQuery q = new PhraseQuery();\n      for (int j=0; j<nClauses; j++) {\n        int tnum = r.nextInt(termsInIndex);\n        q.add(new Term(\"f\",Character.toString((char)(tnum+'A'))), j);\n      }\n      q.setSlop(termsInIndex);  // this could be random too\n\n      CountingHitCollector hc = new CountingHitCollector();\n      s.search(q, hc);\n      ret += hc.getSum();\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","sourceNew":"    public int doSloppyPhrase(IndexSearcher s,\n                                int termsInIndex,\n                                int maxClauses,\n                                int iter\n  ) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = random.nextInt(maxClauses-1)+2; // min 2 clauses\n      PhraseQuery q = new PhraseQuery();\n      for (int j=0; j<nClauses; j++) {\n        int tnum = random.nextInt(termsInIndex);\n        q.add(new Term(\"f\",Character.toString((char)(tnum+'A'))), j);\n      }\n      q.setSlop(termsInIndex);  // this could be random too\n\n      CountingHitCollector hc = new CountingHitCollector();\n      s.search(q, hc);\n      ret += hc.getSum();\n    }\n\n    return ret;\n  }\n\n","sourceOld":"    public int doSloppyPhrase(IndexSearcher s,\n                                int termsInIndex,\n                                int maxClauses,\n                                int iter\n  ) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = r.nextInt(maxClauses-1)+2; // min 2 clauses\n      PhraseQuery q = new PhraseQuery();\n      for (int j=0; j<nClauses; j++) {\n        int tnum = r.nextInt(termsInIndex);\n        q.add(new Term(\"f\",Character.toString((char)(tnum+'A'))), j);\n      }\n      q.setSlop(termsInIndex);  // this could be random too\n\n      CountingHitCollector hc = new CountingHitCollector();\n      s.search(q, hc);\n      ret += hc.getSum();\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","sourceNew":"    public int doSloppyPhrase(IndexSearcher s,\n                                int termsInIndex,\n                                int maxClauses,\n                                int iter\n  ) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = random.nextInt(maxClauses-1)+2; // min 2 clauses\n      PhraseQuery q = new PhraseQuery();\n      for (int j=0; j<nClauses; j++) {\n        int tnum = random.nextInt(termsInIndex);\n        q.add(new Term(\"f\",Character.toString((char)(tnum+'A'))), j);\n      }\n      q.setSlop(termsInIndex);  // this could be random too\n\n      CountingHitCollector hc = new CountingHitCollector();\n      s.search(q, hc);\n      ret += hc.getSum();\n    }\n\n    return ret;\n  }\n\n","sourceOld":"    public int doSloppyPhrase(IndexSearcher s,\n                                int termsInIndex,\n                                int maxClauses,\n                                int iter\n  ) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = random.nextInt(maxClauses-1)+2; // min 2 clauses\n      PhraseQuery q = new PhraseQuery();\n      for (int j=0; j<nClauses; j++) {\n        int tnum = random.nextInt(termsInIndex);\n        q.add(new Term(\"f\",Character.toString((char)(tnum+'A'))), j);\n      }\n      q.setSlop(termsInIndex);  // this could be random too\n\n      CountingHitCollector hc = new CountingHitCollector();\n      s.search(q, hc);\n      ret += hc.getSum();\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1f653cfcf159baeaafe5d01682a911e95bba4012","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}