{"path":"lucene/luke/src/java/org/apache/lucene/luke/app/desktop/components/dialog/menubar/OpenIndexDialogFactory.ListenerFunctions#openIndexOrDirectory(ActionEvent).mjava","commits":[{"id":"f554f2d9b5456248ab6467b9d4f6015686797a6c","date":1554891357,"type":0,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/app/desktop/components/dialog/menubar/OpenIndexDialogFactory.ListenerFunctions#openIndexOrDirectory(ActionEvent).mjava","pathOld":"/dev/null","sourceNew":"    void openIndexOrDirectory(ActionEvent e) {\n      try {\n        if (directoryHandler.directoryOpened()) {\n          directoryHandler.close();\n        }\n        if (indexHandler.indexOpened()) {\n          indexHandler.close();\n        }\n\n        String selectedPath = (String) idxPathCombo.getSelectedItem();\n        String dirImplClazz = (String) dirImplCombo.getSelectedItem();\n        if (selectedPath == null || selectedPath.length() == 0) {\n          String message = MessageUtils.getLocalizedMessage(\"openindex.message.index_path_not_selected\");\n          JOptionPane.showMessageDialog(dialog, message, \"Empty index path\", JOptionPane.ERROR_MESSAGE);\n        } else if (isNoReader()) {\n          directoryHandler.open(selectedPath, dirImplClazz);\n          addHistory(selectedPath);\n        } else {\n          indexHandler.open(selectedPath, dirImplClazz, isReadOnly(), useCompound(), keepAllCommits());\n          addHistory(selectedPath);\n        }\n        prefs.setIndexOpenerPrefs(\n            isReadOnly(), dirImplClazz,\n            isNoReader(), useCompound(), keepAllCommits());\n        closeDialog();\n      } catch (LukeException ex) {\n        String message = ex.getMessage() + System.lineSeparator() + \"See Logs tab or log file for more details.\";\n        JOptionPane.showMessageDialog(dialog, message, \"Invalid index path\", JOptionPane.ERROR_MESSAGE);\n      } catch (Throwable cause) {\n        JOptionPane.showMessageDialog(dialog, MessageUtils.getLocalizedMessage(\"message.error.unknown\"), \"Unknown Error\", JOptionPane.ERROR_MESSAGE);\n        log.error(cause.getMessage(), cause);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"265216658b9b02ae56c6ccd3def38eacedbea7d3","date":1593139450,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/app/desktop/components/dialog/menubar/OpenIndexDialogFactory.ListenerFunctions#openIndexOrDirectory(ActionEvent).mjava","pathOld":"lucene/luke/src/java/org/apache/lucene/luke/app/desktop/components/dialog/menubar/OpenIndexDialogFactory.ListenerFunctions#openIndexOrDirectory(ActionEvent).mjava","sourceNew":"    void openIndexOrDirectory(ActionEvent e) {\n      try {\n        if (directoryHandler.directoryOpened()) {\n          directoryHandler.close();\n        }\n        if (indexHandler.indexOpened()) {\n          indexHandler.close();\n        }\n\n        String selectedPath = (String) idxPathCombo.getSelectedItem();\n        String dirImplClazz = (String) dirImplCombo.getSelectedItem();\n        if (selectedPath == null || selectedPath.length() == 0) {\n          String message = MessageUtils.getLocalizedMessage(\"openindex.message.index_path_not_selected\");\n          JOptionPane.showMessageDialog(dialog, message, \"Empty index path\", JOptionPane.ERROR_MESSAGE);\n        } else if (isNoReader()) {\n          directoryHandler.open(selectedPath, dirImplClazz);\n          addHistory(selectedPath);\n        } else {\n          indexHandler.open(selectedPath, dirImplClazz, isReadOnly(), useCompound(), keepAllCommits());\n          addHistory(selectedPath);\n        }\n        prefs.setIndexOpenerPrefs(\n            isReadOnly(), dirImplClazz,\n            isNoReader(), useCompound(), keepAllCommits());\n        closeDialog();\n      } catch (LukeException ex) {\n        String message = ex.getMessage() + System.lineSeparator() + \"See Logs tab or log file for more details.\";\n        JOptionPane.showMessageDialog(dialog, message, \"Invalid index path\", JOptionPane.ERROR_MESSAGE);\n      } catch (Throwable cause) {\n        JOptionPane.showMessageDialog(dialog, MessageUtils.getLocalizedMessage(\"message.error.unknown\"), \"Unknown Error\", JOptionPane.ERROR_MESSAGE);\n        log.error(\"Error opening index or directory\", cause);\n      }\n    }\n\n","sourceOld":"    void openIndexOrDirectory(ActionEvent e) {\n      try {\n        if (directoryHandler.directoryOpened()) {\n          directoryHandler.close();\n        }\n        if (indexHandler.indexOpened()) {\n          indexHandler.close();\n        }\n\n        String selectedPath = (String) idxPathCombo.getSelectedItem();\n        String dirImplClazz = (String) dirImplCombo.getSelectedItem();\n        if (selectedPath == null || selectedPath.length() == 0) {\n          String message = MessageUtils.getLocalizedMessage(\"openindex.message.index_path_not_selected\");\n          JOptionPane.showMessageDialog(dialog, message, \"Empty index path\", JOptionPane.ERROR_MESSAGE);\n        } else if (isNoReader()) {\n          directoryHandler.open(selectedPath, dirImplClazz);\n          addHistory(selectedPath);\n        } else {\n          indexHandler.open(selectedPath, dirImplClazz, isReadOnly(), useCompound(), keepAllCommits());\n          addHistory(selectedPath);\n        }\n        prefs.setIndexOpenerPrefs(\n            isReadOnly(), dirImplClazz,\n            isNoReader(), useCompound(), keepAllCommits());\n        closeDialog();\n      } catch (LukeException ex) {\n        String message = ex.getMessage() + System.lineSeparator() + \"See Logs tab or log file for more details.\";\n        JOptionPane.showMessageDialog(dialog, message, \"Invalid index path\", JOptionPane.ERROR_MESSAGE);\n      } catch (Throwable cause) {\n        JOptionPane.showMessageDialog(dialog, MessageUtils.getLocalizedMessage(\"message.error.unknown\"), \"Unknown Error\", JOptionPane.ERROR_MESSAGE);\n        log.error(cause.getMessage(), cause);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"265216658b9b02ae56c6ccd3def38eacedbea7d3":["f554f2d9b5456248ab6467b9d4f6015686797a6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["265216658b9b02ae56c6ccd3def38eacedbea7d3"]},"commit2Childs":{"265216658b9b02ae56c6ccd3def38eacedbea7d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f554f2d9b5456248ab6467b9d4f6015686797a6c"],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["265216658b9b02ae56c6ccd3def38eacedbea7d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}