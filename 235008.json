{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#assertTermEquals(String,TokenStream,byte[]).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#assertTermEquals(String,TokenStream,byte[]).mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#assertTermEquals(String,TokenStream,byte[]).mjava","sourceNew":"  void assertTermEquals(String expected, TokenStream stream, byte[] expectPay) throws Exception {\n    TermAttribute termAtt = stream.getAttribute(TermAttribute.class);\n    PayloadAttribute payloadAtt = stream.getAttribute(PayloadAttribute.class);\n    assertTrue(stream.incrementToken());\n    assertEquals(expected, termAtt.term());\n    Payload payload = payloadAtt.getPayload();\n    if (payload != null) {\n      assertTrue(payload.length() + \" does not equal: \" + expectPay.length, payload.length() == expectPay.length);\n      for (int i = 0; i < expectPay.length; i++) {\n        assertTrue(expectPay[i] + \" does not equal: \" + payload.byteAt(i), expectPay[i] == payload.byteAt(i));\n\n      }\n    } else {\n      assertTrue(\"expectPay is not null and it should be\", expectPay == null);\n    }\n  }\n\n","sourceOld":"  void assertTermEquals(String expected, TokenStream stream, byte[] expectPay) throws Exception {\n    TermAttribute termAtt = stream.getAttribute(TermAttribute.class);\n    PayloadAttribute payloadAtt = stream.getAttribute(PayloadAttribute.class);\n    assertTrue(stream.incrementToken());\n    assertEquals(expected, termAtt.term());\n    Payload payload = payloadAtt.getPayload();\n    if (payload != null) {\n      assertTrue(payload.length() + \" does not equal: \" + expectPay.length, payload.length() == expectPay.length);\n      for (int i = 0; i < expectPay.length; i++) {\n        assertTrue(expectPay[i] + \" does not equal: \" + payload.byteAt(i), expectPay[i] == payload.byteAt(i));\n\n      }\n    } else {\n      assertTrue(\"expectPay is not null and it should be\", expectPay == null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#assertTermEquals(String,TokenStream,byte[]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#assertTermEquals(String,TokenStream,byte[]).mjava","sourceNew":"  void assertTermEquals(String expected, TokenStream stream, byte[] expectPay) throws Exception {\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PayloadAttribute payloadAtt = stream.getAttribute(PayloadAttribute.class);\n    assertTrue(stream.incrementToken());\n    assertEquals(expected, termAtt.toString());\n    Payload payload = payloadAtt.getPayload();\n    if (payload != null) {\n      assertTrue(payload.length() + \" does not equal: \" + expectPay.length, payload.length() == expectPay.length);\n      for (int i = 0; i < expectPay.length; i++) {\n        assertTrue(expectPay[i] + \" does not equal: \" + payload.byteAt(i), expectPay[i] == payload.byteAt(i));\n\n      }\n    } else {\n      assertTrue(\"expectPay is not null and it should be\", expectPay == null);\n    }\n  }\n\n","sourceOld":"  void assertTermEquals(String expected, TokenStream stream, byte[] expectPay) throws Exception {\n    TermAttribute termAtt = stream.getAttribute(TermAttribute.class);\n    PayloadAttribute payloadAtt = stream.getAttribute(PayloadAttribute.class);\n    assertTrue(stream.incrementToken());\n    assertEquals(expected, termAtt.term());\n    Payload payload = payloadAtt.getPayload();\n    if (payload != null) {\n      assertTrue(payload.length() + \" does not equal: \" + expectPay.length, payload.length() == expectPay.length);\n      for (int i = 0; i < expectPay.length; i++) {\n        assertTrue(expectPay[i] + \" does not equal: \" + payload.byteAt(i), expectPay[i] == payload.byteAt(i));\n\n      }\n    } else {\n      assertTrue(\"expectPay is not null and it should be\", expectPay == null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcbc12aa8147f5203ca283e7252ba4280d6ffd16","date":1305663400,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#assertTermEquals(String,TokenStream,byte[]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#assertTermEquals(String,TokenStream,byte[]).mjava","sourceNew":"  void assertTermEquals(String expected, TokenStream stream, byte[] expectPay) throws Exception {\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PayloadAttribute payloadAtt = stream.getAttribute(PayloadAttribute.class);\n    stream.reset();\n    assertTrue(stream.incrementToken());\n    assertEquals(expected, termAtt.toString());\n    Payload payload = payloadAtt.getPayload();\n    if (payload != null) {\n      assertTrue(payload.length() + \" does not equal: \" + expectPay.length, payload.length() == expectPay.length);\n      for (int i = 0; i < expectPay.length; i++) {\n        assertTrue(expectPay[i] + \" does not equal: \" + payload.byteAt(i), expectPay[i] == payload.byteAt(i));\n\n      }\n    } else {\n      assertTrue(\"expectPay is not null and it should be\", expectPay == null);\n    }\n  }\n\n","sourceOld":"  void assertTermEquals(String expected, TokenStream stream, byte[] expectPay) throws Exception {\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PayloadAttribute payloadAtt = stream.getAttribute(PayloadAttribute.class);\n    assertTrue(stream.incrementToken());\n    assertEquals(expected, termAtt.toString());\n    Payload payload = payloadAtt.getPayload();\n    if (payload != null) {\n      assertTrue(payload.length() + \" does not equal: \" + expectPay.length, payload.length() == expectPay.length);\n      for (int i = 0; i < expectPay.length; i++) {\n        assertTrue(expectPay[i] + \" does not equal: \" + payload.byteAt(i), expectPay[i] == payload.byteAt(i));\n\n      }\n    } else {\n      assertTrue(\"expectPay is not null and it should be\", expectPay == null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#assertTermEquals(String,TokenStream,byte[]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#assertTermEquals(String,TokenStream,byte[]).mjava","sourceNew":"  void assertTermEquals(String expected, TokenStream stream, byte[] expectPay) throws Exception {\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PayloadAttribute payloadAtt = stream.getAttribute(PayloadAttribute.class);\n    stream.reset();\n    assertTrue(stream.incrementToken());\n    assertEquals(expected, termAtt.toString());\n    Payload payload = payloadAtt.getPayload();\n    if (payload != null) {\n      assertTrue(payload.length() + \" does not equal: \" + expectPay.length, payload.length() == expectPay.length);\n      for (int i = 0; i < expectPay.length; i++) {\n        assertTrue(expectPay[i] + \" does not equal: \" + payload.byteAt(i), expectPay[i] == payload.byteAt(i));\n\n      }\n    } else {\n      assertTrue(\"expectPay is not null and it should be\", expectPay == null);\n    }\n  }\n\n","sourceOld":"  void assertTermEquals(String expected, TokenStream stream, byte[] expectPay) throws Exception {\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PayloadAttribute payloadAtt = stream.getAttribute(PayloadAttribute.class);\n    assertTrue(stream.incrementToken());\n    assertEquals(expected, termAtt.toString());\n    Payload payload = payloadAtt.getPayload();\n    if (payload != null) {\n      assertTrue(payload.length() + \" does not equal: \" + expectPay.length, payload.length() == expectPay.length);\n      for (int i = 0; i < expectPay.length; i++) {\n        assertTrue(expectPay[i] + \" does not equal: \" + payload.byteAt(i), expectPay[i] == payload.byteAt(i));\n\n      }\n    } else {\n      assertTrue(\"expectPay is not null and it should be\", expectPay == null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#assertTermEquals(String,TokenStream,byte[]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#assertTermEquals(String,TokenStream,byte[]).mjava","sourceNew":"  void assertTermEquals(String expected, TokenStream stream, byte[] expectPay) throws Exception {\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PayloadAttribute payloadAtt = stream.getAttribute(PayloadAttribute.class);\n    stream.reset();\n    assertTrue(stream.incrementToken());\n    assertEquals(expected, termAtt.toString());\n    Payload payload = payloadAtt.getPayload();\n    if (payload != null) {\n      assertTrue(payload.length() + \" does not equal: \" + expectPay.length, payload.length() == expectPay.length);\n      for (int i = 0; i < expectPay.length; i++) {\n        assertTrue(expectPay[i] + \" does not equal: \" + payload.byteAt(i), expectPay[i] == payload.byteAt(i));\n\n      }\n    } else {\n      assertTrue(\"expectPay is not null and it should be\", expectPay == null);\n    }\n  }\n\n","sourceOld":"  void assertTermEquals(String expected, TokenStream stream, byte[] expectPay) throws Exception {\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PayloadAttribute payloadAtt = stream.getAttribute(PayloadAttribute.class);\n    assertTrue(stream.incrementToken());\n    assertEquals(expected, termAtt.toString());\n    Payload payload = payloadAtt.getPayload();\n    if (payload != null) {\n      assertTrue(payload.length() + \" does not equal: \" + expectPay.length, payload.length() == expectPay.length);\n      for (int i = 0; i < expectPay.length; i++) {\n        assertTrue(expectPay[i] + \" does not equal: \" + payload.byteAt(i), expectPay[i] == payload.byteAt(i));\n\n      }\n    } else {\n      assertTrue(\"expectPay is not null and it should be\", expectPay == null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#assertTermEquals(String,TokenStream,byte[]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterTest#assertTermEquals(String,TokenStream,byte[]).mjava","sourceNew":"  void assertTermEquals(String expected, TokenStream stream, byte[] expectPay) throws Exception {\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PayloadAttribute payloadAtt = stream.getAttribute(PayloadAttribute.class);\n    stream.reset();\n    assertTrue(stream.incrementToken());\n    assertEquals(expected, termAtt.toString());\n    Payload payload = payloadAtt.getPayload();\n    if (payload != null) {\n      assertTrue(payload.length() + \" does not equal: \" + expectPay.length, payload.length() == expectPay.length);\n      for (int i = 0; i < expectPay.length; i++) {\n        assertTrue(expectPay[i] + \" does not equal: \" + payload.byteAt(i), expectPay[i] == payload.byteAt(i));\n\n      }\n    } else {\n      assertTrue(\"expectPay is not null and it should be\", expectPay == null);\n    }\n  }\n\n","sourceOld":"  void assertTermEquals(String expected, TokenStream stream, byte[] expectPay) throws Exception {\n    CharTermAttribute termAtt = stream.getAttribute(CharTermAttribute.class);\n    PayloadAttribute payloadAtt = stream.getAttribute(PayloadAttribute.class);\n    stream.reset();\n    assertTrue(stream.incrementToken());\n    assertEquals(expected, termAtt.toString());\n    Payload payload = payloadAtt.getPayload();\n    if (payload != null) {\n      assertTrue(payload.length() + \" does not equal: \" + expectPay.length, payload.length() == expectPay.length);\n      for (int i = 0; i < expectPay.length; i++) {\n        assertTrue(expectPay[i] + \" does not equal: \" + payload.byteAt(i), expectPay[i] == payload.byteAt(i));\n\n      }\n    } else {\n      assertTrue(\"expectPay is not null and it should be\", expectPay == null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a7347509fad0711ac30cb15a746e9a3830a38ebd","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a7347509fad0711ac30cb15a746e9a3830a38ebd","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}