{"path":"contrib/wikipedia/src/test/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerTest#checkLinkPhrases(WikipediaTokenizer).mjava","commits":[{"id":"decc8a7344e9231708f9991fa09db2cafec7a2dd","date":1201187153,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/wikipedia/src/test/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerTest#checkLinkPhrases(WikipediaTokenizer).mjava","pathOld":"/dev/null","sourceNew":"  private void checkLinkPhrases(WikipediaTokenizer tf) throws IOException {\n    Token token = new Token();\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"click\", new String(token.termBuffer(), 0, token.termLength()).equals(\"click\") == true);\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 1, token.getPositionIncrement() == 1);\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"link\", new String(token.termBuffer(), 0, token.termLength()).equals(\"link\") == true);\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 1, token.getPositionIncrement() == 1);\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"here\",\n            new String(token.termBuffer(), 0, token.termLength()).equals(\"here\") == true);\n    //The link, and here should be at the same position for phrases to work\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 1, token.getPositionIncrement() == 1);\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"again\",\n            new String(token.termBuffer(), 0, token.termLength()).equals(\"again\") == true);\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 1, token.getPositionIncrement() == 1);\n\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"click\",\n            new String(token.termBuffer(), 0, token.termLength()).equals(\"click\") == true);\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 1, token.getPositionIncrement() == 1);\n\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"http://lucene.apache.org\",\n            new String(token.termBuffer(), 0, token.termLength()).equals(\"http://lucene.apache.org\") == true);\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 1, token.getPositionIncrement() == 1);\n\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"here\",\n            new String(token.termBuffer(), 0, token.termLength()).equals(\"here\") == true);\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 0, token.getPositionIncrement() == 0);\n\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"again\",\n            new String(token.termBuffer(), 0, token.termLength()).equals(\"again\") == true);\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 1, token.getPositionIncrement() == 1);\n\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"a\",\n            new String(token.termBuffer(), 0, token.termLength()).equals(\"a\") == true);\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 1, token.getPositionIncrement() == 1);\n\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"b\",\n            new String(token.termBuffer(), 0, token.termLength()).equals(\"b\") == true);\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 1, token.getPositionIncrement() == 1);\n\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"c\",\n            new String(token.termBuffer(), 0, token.termLength()).equals(\"c\") == true);\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 1, token.getPositionIncrement() == 1);\n\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"d\",\n            new String(token.termBuffer(), 0, token.termLength()).equals(\"d\") == true);\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 1, token.getPositionIncrement() == 1);\n\n    token = tf.next();\n    assertTrue(\"token is not null and it should be\", token == null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/wikipedia/src/test/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerTest#checkLinkPhrases(WikipediaTokenizer).mjava","pathOld":"contrib/wikipedia/src/test/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerTest#checkLinkPhrases(WikipediaTokenizer).mjava","sourceNew":"  private void checkLinkPhrases(WikipediaTokenizer tf) throws IOException {\n    final Token reusableToken = new Token();\n    Token nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"click\", nextToken.term().equals(\"click\") == true);\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 1, nextToken.getPositionIncrement() == 1);\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"link\", nextToken.term().equals(\"link\") == true);\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 1, nextToken.getPositionIncrement() == 1);\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"here\",\n            nextToken.term().equals(\"here\") == true);\n    //The link, and here should be at the same position for phrases to work\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 1, nextToken.getPositionIncrement() == 1);\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"again\",\n            nextToken.term().equals(\"again\") == true);\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 1, nextToken.getPositionIncrement() == 1);\n\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"click\",\n            nextToken.term().equals(\"click\") == true);\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 1, nextToken.getPositionIncrement() == 1);\n\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"http://lucene.apache.org\",\n            nextToken.term().equals(\"http://lucene.apache.org\") == true);\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 1, nextToken.getPositionIncrement() == 1);\n\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"here\",\n            nextToken.term().equals(\"here\") == true);\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 0, nextToken.getPositionIncrement() == 0);\n\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"again\",\n            nextToken.term().equals(\"again\") == true);\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 1, nextToken.getPositionIncrement() == 1);\n\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"a\",\n            nextToken.term().equals(\"a\") == true);\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 1, nextToken.getPositionIncrement() == 1);\n\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"b\",\n            nextToken.term().equals(\"b\") == true);\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 1, nextToken.getPositionIncrement() == 1);\n\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"c\",\n            nextToken.term().equals(\"c\") == true);\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 1, nextToken.getPositionIncrement() == 1);\n\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"d\",\n            nextToken.term().equals(\"d\") == true);\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 1, nextToken.getPositionIncrement() == 1);\n\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is not null and it should be\", nextToken == null);\n  }\n\n","sourceOld":"  private void checkLinkPhrases(WikipediaTokenizer tf) throws IOException {\n    Token token = new Token();\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"click\", new String(token.termBuffer(), 0, token.termLength()).equals(\"click\") == true);\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 1, token.getPositionIncrement() == 1);\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"link\", new String(token.termBuffer(), 0, token.termLength()).equals(\"link\") == true);\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 1, token.getPositionIncrement() == 1);\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"here\",\n            new String(token.termBuffer(), 0, token.termLength()).equals(\"here\") == true);\n    //The link, and here should be at the same position for phrases to work\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 1, token.getPositionIncrement() == 1);\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"again\",\n            new String(token.termBuffer(), 0, token.termLength()).equals(\"again\") == true);\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 1, token.getPositionIncrement() == 1);\n\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"click\",\n            new String(token.termBuffer(), 0, token.termLength()).equals(\"click\") == true);\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 1, token.getPositionIncrement() == 1);\n\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"http://lucene.apache.org\",\n            new String(token.termBuffer(), 0, token.termLength()).equals(\"http://lucene.apache.org\") == true);\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 1, token.getPositionIncrement() == 1);\n\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"here\",\n            new String(token.termBuffer(), 0, token.termLength()).equals(\"here\") == true);\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 0, token.getPositionIncrement() == 0);\n\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"again\",\n            new String(token.termBuffer(), 0, token.termLength()).equals(\"again\") == true);\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 1, token.getPositionIncrement() == 1);\n\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"a\",\n            new String(token.termBuffer(), 0, token.termLength()).equals(\"a\") == true);\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 1, token.getPositionIncrement() == 1);\n\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"b\",\n            new String(token.termBuffer(), 0, token.termLength()).equals(\"b\") == true);\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 1, token.getPositionIncrement() == 1);\n\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"c\",\n            new String(token.termBuffer(), 0, token.termLength()).equals(\"c\") == true);\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 1, token.getPositionIncrement() == 1);\n\n    token = tf.next(token);\n    assertTrue(\"token is null and it shouldn't be\", token != null);\n    assertTrue(new String(token.termBuffer(), 0, token.termLength()) + \" is not equal to \" + \"d\",\n            new String(token.termBuffer(), 0, token.termLength()).equals(\"d\") == true);\n    assertTrue(token.getPositionIncrement() + \" does not equal: \" + 1, token.getPositionIncrement() == 1);\n\n    token = tf.next();\n    assertTrue(\"token is not null and it should be\", token == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/wikipedia/src/test/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerTest#checkLinkPhrases(WikipediaTokenizer).mjava","pathOld":"contrib/wikipedia/src/test/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerTest#checkLinkPhrases(WikipediaTokenizer).mjava","sourceNew":"  private void checkLinkPhrases(WikipediaTokenizer tf) throws IOException {\n    TermAttribute termAtt = (TermAttribute) tf.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) tf.addAttribute(PositionIncrementAttribute.class);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"click\", termAtt.term().equals(\"click\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"link\", termAtt.term().equals(\"link\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"here\",\n        termAtt.term().equals(\"here\") == true);\n    //The link, and here should be at the same position for phrases to work\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"again\",\n        termAtt.term().equals(\"again\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"click\",\n        termAtt.term().equals(\"click\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"http://lucene.apache.org\",\n        termAtt.term().equals(\"http://lucene.apache.org\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"here\",\n        termAtt.term().equals(\"here\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 0, posIncrAtt.getPositionIncrement() == 0);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"again\",\n        termAtt.term().equals(\"again\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"a\",\n        termAtt.term().equals(\"a\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"b\",\n        termAtt.term().equals(\"b\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"c\",\n        termAtt.term().equals(\"c\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"d\",\n        termAtt.term().equals(\"d\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertFalse(tf.incrementToken());  \n  }\n\n","sourceOld":"  private void checkLinkPhrases(WikipediaTokenizer tf) throws IOException {\n    final Token reusableToken = new Token();\n    Token nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"click\", nextToken.term().equals(\"click\") == true);\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 1, nextToken.getPositionIncrement() == 1);\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"link\", nextToken.term().equals(\"link\") == true);\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 1, nextToken.getPositionIncrement() == 1);\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"here\",\n            nextToken.term().equals(\"here\") == true);\n    //The link, and here should be at the same position for phrases to work\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 1, nextToken.getPositionIncrement() == 1);\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"again\",\n            nextToken.term().equals(\"again\") == true);\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 1, nextToken.getPositionIncrement() == 1);\n\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"click\",\n            nextToken.term().equals(\"click\") == true);\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 1, nextToken.getPositionIncrement() == 1);\n\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"http://lucene.apache.org\",\n            nextToken.term().equals(\"http://lucene.apache.org\") == true);\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 1, nextToken.getPositionIncrement() == 1);\n\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"here\",\n            nextToken.term().equals(\"here\") == true);\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 0, nextToken.getPositionIncrement() == 0);\n\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"again\",\n            nextToken.term().equals(\"again\") == true);\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 1, nextToken.getPositionIncrement() == 1);\n\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"a\",\n            nextToken.term().equals(\"a\") == true);\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 1, nextToken.getPositionIncrement() == 1);\n\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"b\",\n            nextToken.term().equals(\"b\") == true);\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 1, nextToken.getPositionIncrement() == 1);\n\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"c\",\n            nextToken.term().equals(\"c\") == true);\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 1, nextToken.getPositionIncrement() == 1);\n\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n    assertTrue(nextToken.term() + \" is not equal to \" + \"d\",\n            nextToken.term().equals(\"d\") == true);\n    assertTrue(nextToken.getPositionIncrement() + \" does not equal: \" + 1, nextToken.getPositionIncrement() == 1);\n\n    nextToken = tf.next(reusableToken);\n    assertTrue(\"nextToken is not null and it should be\", nextToken == null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/wikipedia/src/test/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerTest#checkLinkPhrases(WikipediaTokenizer).mjava","pathOld":"contrib/wikipedia/src/test/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerTest#checkLinkPhrases(WikipediaTokenizer).mjava","sourceNew":"  private void checkLinkPhrases(WikipediaTokenizer tf) throws IOException {\n    TermAttribute termAtt = tf.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = tf.addAttribute(PositionIncrementAttribute.class);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"click\", termAtt.term().equals(\"click\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"link\", termAtt.term().equals(\"link\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"here\",\n        termAtt.term().equals(\"here\") == true);\n    //The link, and here should be at the same position for phrases to work\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"again\",\n        termAtt.term().equals(\"again\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"click\",\n        termAtt.term().equals(\"click\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"http://lucene.apache.org\",\n        termAtt.term().equals(\"http://lucene.apache.org\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"here\",\n        termAtt.term().equals(\"here\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 0, posIncrAtt.getPositionIncrement() == 0);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"again\",\n        termAtt.term().equals(\"again\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"a\",\n        termAtt.term().equals(\"a\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"b\",\n        termAtt.term().equals(\"b\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"c\",\n        termAtt.term().equals(\"c\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"d\",\n        termAtt.term().equals(\"d\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertFalse(tf.incrementToken());  \n  }\n\n","sourceOld":"  private void checkLinkPhrases(WikipediaTokenizer tf) throws IOException {\n    TermAttribute termAtt = (TermAttribute) tf.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) tf.addAttribute(PositionIncrementAttribute.class);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"click\", termAtt.term().equals(\"click\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"link\", termAtt.term().equals(\"link\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"here\",\n        termAtt.term().equals(\"here\") == true);\n    //The link, and here should be at the same position for phrases to work\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"again\",\n        termAtt.term().equals(\"again\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"click\",\n        termAtt.term().equals(\"click\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"http://lucene.apache.org\",\n        termAtt.term().equals(\"http://lucene.apache.org\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"here\",\n        termAtt.term().equals(\"here\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 0, posIncrAtt.getPositionIncrement() == 0);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"again\",\n        termAtt.term().equals(\"again\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"a\",\n        termAtt.term().equals(\"a\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"b\",\n        termAtt.term().equals(\"b\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"c\",\n        termAtt.term().equals(\"c\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"d\",\n        termAtt.term().equals(\"d\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertFalse(tf.incrementToken());  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/wikipedia/src/test/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerTest#checkLinkPhrases(WikipediaTokenizer).mjava","pathOld":"contrib/wikipedia/src/test/org/apache/lucene/wikipedia/analysis/WikipediaTokenizerTest#checkLinkPhrases(WikipediaTokenizer).mjava","sourceNew":"  private void checkLinkPhrases(WikipediaTokenizer tf) throws IOException {\n    TermAttribute termAtt = tf.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = tf.addAttribute(PositionIncrementAttribute.class);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"click\", termAtt.term().equals(\"click\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"link\", termAtt.term().equals(\"link\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"here\",\n        termAtt.term().equals(\"here\") == true);\n    //The link, and here should be at the same position for phrases to work\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"again\",\n        termAtt.term().equals(\"again\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"click\",\n        termAtt.term().equals(\"click\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"http://lucene.apache.org\",\n        termAtt.term().equals(\"http://lucene.apache.org\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"here\",\n        termAtt.term().equals(\"here\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 0, posIncrAtt.getPositionIncrement() == 0);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"again\",\n        termAtt.term().equals(\"again\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"a\",\n        termAtt.term().equals(\"a\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"b\",\n        termAtt.term().equals(\"b\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"c\",\n        termAtt.term().equals(\"c\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"d\",\n        termAtt.term().equals(\"d\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertFalse(tf.incrementToken());  \n  }\n\n","sourceOld":"  private void checkLinkPhrases(WikipediaTokenizer tf) throws IOException {\n    TermAttribute termAtt = tf.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = tf.addAttribute(PositionIncrementAttribute.class);\n    \n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"click\", termAtt.term().equals(\"click\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"link\", termAtt.term().equals(\"link\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"here\",\n        termAtt.term().equals(\"here\") == true);\n    //The link, and here should be at the same position for phrases to work\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"again\",\n        termAtt.term().equals(\"again\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"click\",\n        termAtt.term().equals(\"click\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"http://lucene.apache.org\",\n        termAtt.term().equals(\"http://lucene.apache.org\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"here\",\n        termAtt.term().equals(\"here\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 0, posIncrAtt.getPositionIncrement() == 0);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"again\",\n        termAtt.term().equals(\"again\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"a\",\n        termAtt.term().equals(\"a\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"b\",\n        termAtt.term().equals(\"b\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"c\",\n        termAtt.term().equals(\"c\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertTrue(tf.incrementToken());\n    assertTrue(termAtt.term() + \" is not equal to \" + \"d\",\n        termAtt.term().equals(\"d\") == true);\n    assertTrue(posIncrAtt.getPositionIncrement() + \" does not equal: \" + 1, posIncrAtt.getPositionIncrement() == 1);\n\n    assertFalse(tf.incrementToken());  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["decc8a7344e9231708f9991fa09db2cafec7a2dd"],"decc8a7344e9231708f9991fa09db2cafec7a2dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8d78f014fded44fbde905f4f84cdc21907b371e8"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"decc8a7344e9231708f9991fa09db2cafec7a2dd":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["decc8a7344e9231708f9991fa09db2cafec7a2dd"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}