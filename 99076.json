{"path":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore#list(String,Predicate[String]).mjava","commits":[{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore#list(String,Predicate[String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized List list(String path, Predicate<String> predicate) {\n    File file = getRealpath(path).toFile();\n    List<FileDetails> fileDetails = new ArrayList<>();\n    FileType type = getType(path);\n    if (type == FileType.DIRECTORY) {\n      file.list((dir, name) -> {\n        if (predicate == null || predicate.test(name)) {\n          if (!isMetaDataFile(name)) {\n            fileDetails.add(new FileInfo(path + \"/\" + name).getDetails());\n          }\n        }\n        return false;\n      });\n\n    } else if (type == FileType.FILE) {\n\n      fileDetails.add(new FileInfo(path).getDetails());\n    }\n\n    return fileDetails;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849dbf8570155b8e5fd03d8c2274a0a60491051c","date":1570859954,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore#list(String,Predicate[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore#list(String,Predicate[String]).mjava","sourceNew":"  @Override\n  public List list(String path, Predicate<String> predicate) {\n    File file = getRealpath(path).toFile();\n    List<FileDetails> fileDetails = new ArrayList<>();\n    FileType type = getType(path, false);\n    if (type == FileType.DIRECTORY) {\n      file.list((dir, name) -> {\n        if (predicate == null || predicate.test(name)) {\n          if (!isMetaDataFile(name)) {\n            fileDetails.add(new FileInfo(path + \"/\" + name).getDetails());\n          }\n        }\n        return false;\n      });\n\n    } else if (type == FileType.FILE) {\n      fileDetails.add(new FileInfo(path).getDetails());\n    }\n\n    return fileDetails;\n  }\n\n","sourceOld":"  @Override\n  public synchronized List list(String path, Predicate<String> predicate) {\n    File file = getRealpath(path).toFile();\n    List<FileDetails> fileDetails = new ArrayList<>();\n    FileType type = getType(path);\n    if (type == FileType.DIRECTORY) {\n      file.list((dir, name) -> {\n        if (predicate == null || predicate.test(name)) {\n          if (!isMetaDataFile(name)) {\n            fileDetails.add(new FileInfo(path + \"/\" + name).getDetails());\n          }\n        }\n        return false;\n      });\n\n    } else if (type == FileType.FILE) {\n\n      fileDetails.add(new FileInfo(path).getDetails());\n    }\n\n    return fileDetails;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore#list(String,Predicate[String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public List list(String path, Predicate<String> predicate) {\n    File file = getRealpath(path).toFile();\n    List<FileDetails> fileDetails = new ArrayList<>();\n    FileType type = getType(path, false);\n    if (type == FileType.DIRECTORY) {\n      file.list((dir, name) -> {\n        if (predicate == null || predicate.test(name)) {\n          if (!isMetaDataFile(name)) {\n            fileDetails.add(new FileInfo(path + \"/\" + name).getDetails());\n          }\n        }\n        return false;\n      });\n\n    } else if (type == FileType.FILE) {\n      fileDetails.add(new FileInfo(path).getDetails());\n    }\n\n    return fileDetails;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore#list(String,Predicate[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/filestore/DistribPackageStore#list(String,Predicate[String]).mjava","sourceNew":"  @Override\n  public List<FileDetails> list(String path, Predicate<String> predicate) {\n    File file = getRealpath(path).toFile();\n    List<FileDetails> fileDetails = new ArrayList<>();\n    FileType type = getType(path, false);\n    if (type == FileType.DIRECTORY) {\n      file.list((dir, name) -> {\n        if (predicate == null || predicate.test(name)) {\n          if (!isMetaDataFile(name)) {\n            fileDetails.add(new FileInfo(path + \"/\" + name).getDetails());\n          }\n        }\n        return false;\n      });\n\n    } else if (type == FileType.FILE) {\n      fileDetails.add(new FileInfo(path).getDetails());\n    }\n\n    return fileDetails;\n  }\n\n","sourceOld":"  @Override\n  public List list(String path, Predicate<String> predicate) {\n    File file = getRealpath(path).toFile();\n    List<FileDetails> fileDetails = new ArrayList<>();\n    FileType type = getType(path, false);\n    if (type == FileType.DIRECTORY) {\n      file.list((dir, name) -> {\n        if (predicate == null || predicate.test(name)) {\n          if (!isMetaDataFile(name)) {\n            fileDetails.add(new FileInfo(path + \"/\" + name).getDetails());\n          }\n        }\n        return false;\n      });\n\n    } else if (type == FileType.FILE) {\n      fileDetails.add(new FileInfo(path).getDetails());\n    }\n\n    return fileDetails;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8476949555f799dff381770c01cfad051a264487":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["849dbf8570155b8e5fd03d8c2274a0a60491051c"],"849dbf8570155b8e5fd03d8c2274a0a60491051c":["8476949555f799dff381770c01cfad051a264487"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849dbf8570155b8e5fd03d8c2274a0a60491051c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8476949555f799dff381770c01cfad051a264487","b0b597c65628ca9e73913a07e81691f8229bae35"],"8476949555f799dff381770c01cfad051a264487":["849dbf8570155b8e5fd03d8c2274a0a60491051c"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"849dbf8570155b8e5fd03d8c2274a0a60491051c":["bd25fa3647fa73152703b8dccb4fb5f43633de20","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}