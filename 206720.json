{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestCompoundFile#testSingleFile().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestCompoundFile#testSingleFile().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestCompoundFile#testSingleFile().mjava","sourceNew":"    /** This test creates compound file based on a single file.\n     *  Files of different sizes are tested: 0, 1, 10, 100 bytes.\n     */\n    public void testSingleFile() throws IOException {\n        int data[] = new int[] { 0, 1, 10, 100 };\n        for (int i=0; i<data.length; i++) {\n            String name = \"t\" + data[i];\n            createSequenceFile(dir, name, (byte) 0, data[i]);\n            CompoundFileWriter csw = new CompoundFileWriter(dir, name + \".cfs\");\n            csw.addFile(name);\n            csw.close();\n\n            CompoundFileReader csr = new CompoundFileReader(dir, name + \".cfs\");\n            IndexInput expected = dir.openInput(name);\n            IndexInput actual = csr.openInput(name);\n            assertSameStreams(name, expected, actual);\n            assertSameSeekBehavior(name, expected, actual);\n            expected.close();\n            actual.close();\n            csr.close();\n        }\n    }\n\n","sourceOld":"    /** This test creates compound file based on a single file.\n     *  Files of different sizes are tested: 0, 1, 10, 100 bytes.\n     */\n    public void testSingleFile() throws IOException {\n        int data[] = new int[] { 0, 1, 10, 100 };\n        for (int i=0; i<data.length; i++) {\n            String name = \"t\" + data[i];\n            createSequenceFile(dir, name, (byte) 0, data[i]);\n            CompoundFileWriter csw = new CompoundFileWriter(dir, name + \".cfs\");\n            csw.addFile(name);\n            csw.close();\n\n            CompoundFileReader csr = new CompoundFileReader(dir, name + \".cfs\");\n            IndexInput expected = dir.openInput(name);\n            IndexInput actual = csr.openInput(name);\n            assertSameStreams(name, expected, actual);\n            assertSameSeekBehavior(name, expected, actual);\n            expected.close();\n            actual.close();\n            csr.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestCompoundFile#testSingleFile().mjava","sourceNew":null,"sourceOld":"    /** This test creates compound file based on a single file.\n     *  Files of different sizes are tested: 0, 1, 10, 100 bytes.\n     */\n    public void testSingleFile() throws IOException {\n        int data[] = new int[] { 0, 1, 10, 100 };\n        for (int i=0; i<data.length; i++) {\n            String name = \"t\" + data[i];\n            createSequenceFile(dir, name, (byte) 0, data[i]);\n            CompoundFileWriter csw = new CompoundFileWriter(dir, name + \".cfs\");\n            csw.addFile(name);\n            csw.close();\n\n            CompoundFileReader csr = new CompoundFileReader(dir, name + \".cfs\");\n            IndexInput expected = dir.openInput(name);\n            IndexInput actual = csr.openInput(name);\n            assertSameStreams(name, expected, actual);\n            assertSameSeekBehavior(name, expected, actual);\n            expected.close();\n            actual.close();\n            csr.close();\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}