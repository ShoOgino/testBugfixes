{"path":"lucene/core/src/test/org/apache/lucene/search/TestSimpleSearchEquivalence#testExactPhraseVersusBooleanAnd().mjava","commits":[{"id":"92749b51992f15c9e464fd464baf3372bd5573a2","date":1330019010,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleSearchEquivalence#testExactPhraseVersusBooleanAnd().mjava","pathOld":"/dev/null","sourceNew":"  /** \"A B\" ⊆ (+A +B) */\n  public void testExactPhraseVersusBooleanAnd() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    PhraseQuery q1 = new PhraseQuery();\n    q1.add(t1);\n    q1.add(t2);\n    BooleanQuery q2 = new BooleanQuery();\n    q2.add(new TermQuery(t1), Occur.MUST);\n    q2.add(new TermQuery(t2), Occur.MUST);\n    assertSubsetOf(q1, q2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleSearchEquivalence#testExactPhraseVersusBooleanAnd().mjava","pathOld":"/dev/null","sourceNew":"  /** \"A B\" ⊆ (+A +B) */\n  public void testExactPhraseVersusBooleanAnd() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    PhraseQuery q1 = new PhraseQuery();\n    q1.add(t1);\n    q1.add(t2);\n    BooleanQuery q2 = new BooleanQuery();\n    q2.add(new TermQuery(t1), Occur.MUST);\n    q2.add(new TermQuery(t2), Occur.MUST);\n    assertSubsetOf(q1, q2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleSearchEquivalence#testExactPhraseVersusBooleanAnd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimpleSearchEquivalence#testExactPhraseVersusBooleanAnd().mjava","sourceNew":"  /** \"A B\" ⊆ (+A +B) */\n  public void testExactPhraseVersusBooleanAnd() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    PhraseQuery q1 = new PhraseQuery(t1.field(), t1.bytes(), t2.bytes());\n    BooleanQuery q2 = new BooleanQuery();\n    q2.add(new TermQuery(t1), Occur.MUST);\n    q2.add(new TermQuery(t2), Occur.MUST);\n    assertSubsetOf(q1, q2);\n  }\n\n","sourceOld":"  /** \"A B\" ⊆ (+A +B) */\n  public void testExactPhraseVersusBooleanAnd() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    PhraseQuery q1 = new PhraseQuery();\n    q1.add(t1);\n    q1.add(t2);\n    BooleanQuery q2 = new BooleanQuery();\n    q2.add(new TermQuery(t1), Occur.MUST);\n    q2.add(new TermQuery(t2), Occur.MUST);\n    assertSubsetOf(q1, q2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleSearchEquivalence#testExactPhraseVersusBooleanAnd().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimpleSearchEquivalence#testExactPhraseVersusBooleanAnd().mjava","sourceNew":"  /** \"A B\" ⊆ (+A +B) */\n  public void testExactPhraseVersusBooleanAnd() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    PhraseQuery q1 = new PhraseQuery(t1.field(), t1.bytes(), t2.bytes());\n    BooleanQuery.Builder q2 = new BooleanQuery.Builder();\n    q2.add(new TermQuery(t1), Occur.MUST);\n    q2.add(new TermQuery(t2), Occur.MUST);\n    assertSubsetOf(q1, q2.build());\n  }\n\n","sourceOld":"  /** \"A B\" ⊆ (+A +B) */\n  public void testExactPhraseVersusBooleanAnd() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    PhraseQuery q1 = new PhraseQuery(t1.field(), t1.bytes(), t2.bytes());\n    BooleanQuery q2 = new BooleanQuery();\n    q2.add(new TermQuery(t1), Occur.MUST);\n    q2.add(new TermQuery(t2), Occur.MUST);\n    assertSubsetOf(q1, q2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["e9e1499c5d26c936238506df90a3c02c76707722"],"e9e1499c5d26c936238506df90a3c02c76707722":["92749b51992f15c9e464fd464baf3372bd5573a2"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92749b51992f15c9e464fd464baf3372bd5573a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92749b51992f15c9e464fd464baf3372bd5573a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9e1499c5d26c936238506df90a3c02c76707722":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","92749b51992f15c9e464fd464baf3372bd5573a2"],"92749b51992f15c9e464fd464baf3372bd5573a2":["e9e1499c5d26c936238506df90a3c02c76707722","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}