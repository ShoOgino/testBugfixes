{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#unregisterGauges(String,String).mjava","commits":[{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#unregisterGauges(String,String).mjava","pathOld":"/dev/null","sourceNew":"  public int unregisterGauges(String registryName, String tag) {\n    if (tag == null) {\n      return 0;\n    }\n    MetricRegistry registry = registry(registryName);\n    AtomicInteger removed = new AtomicInteger();\n    registry.removeMatching((name, metric) -> {\n      if (metric instanceof GaugeWrapper &&\n          tag.equals(((GaugeWrapper)metric).getTag())) {\n        removed.incrementAndGet();\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return removed.get();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#unregisterGauges(String,String).mjava","pathOld":"/dev/null","sourceNew":"  public int unregisterGauges(String registryName, String tag) {\n    if (tag == null) {\n      return 0;\n    }\n    MetricRegistry registry = registry(registryName);\n    AtomicInteger removed = new AtomicInteger();\n    registry.removeMatching((name, metric) -> {\n      if (metric instanceof GaugeWrapper &&\n          tag.equals(((GaugeWrapper)metric).getTag())) {\n        removed.incrementAndGet();\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return removed.get();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6224f40fcf60b05c62a88f50925c1bbae324bdfd","date":1565402430,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#unregisterGauges(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#unregisterGauges(String,String).mjava","sourceNew":"  public int unregisterGauges(String registryName, String tag) {\n    if (tag == null) {\n      return 0;\n    }\n    MetricRegistry registry = registry(registryName);\n    AtomicInteger removed = new AtomicInteger();\n    registry.removeMatching((name, metric) -> {\n      if (metric instanceof GaugeWrapper &&\n          tag.equals(((GaugeWrapper) metric).getTag())) {\n        removed.incrementAndGet();\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return removed.get();\n  }\n\n","sourceOld":"  public int unregisterGauges(String registryName, String tag) {\n    if (tag == null) {\n      return 0;\n    }\n    MetricRegistry registry = registry(registryName);\n    AtomicInteger removed = new AtomicInteger();\n    registry.removeMatching((name, metric) -> {\n      if (metric instanceof GaugeWrapper &&\n          tag.equals(((GaugeWrapper)metric).getTag())) {\n        removed.incrementAndGet();\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return removed.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a117d95183986014a31f25bb04e5464ca06d6068","date":1566208086,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#unregisterGauges(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#unregisterGauges(String,String).mjava","sourceNew":"  public int unregisterGauges(String registryName, String tagSegment) {\n    if (tagSegment == null) {\n      return 0;\n    }\n    MetricRegistry registry = registry(registryName);\n    if (registry == null) return 0;\n    AtomicInteger removed = new AtomicInteger();\n    registry.removeMatching((name, metric) -> {\n      if (metric instanceof GaugeWrapper) {\n        GaugeWrapper wrapper = (GaugeWrapper) metric;\n        boolean toRemove = tagSegment.equals(wrapper.getTag()) || wrapper.getTag().contains(tagSegment);\n        if (toRemove) removed.incrementAndGet();\n        return toRemove;\n      }\n      return false;\n\n    });\n    return removed.get();\n  }\n\n","sourceOld":"  public int unregisterGauges(String registryName, String tag) {\n    if (tag == null) {\n      return 0;\n    }\n    MetricRegistry registry = registry(registryName);\n    AtomicInteger removed = new AtomicInteger();\n    registry.removeMatching((name, metric) -> {\n      if (metric instanceof GaugeWrapper &&\n          tag.equals(((GaugeWrapper) metric).getTag())) {\n        removed.incrementAndGet();\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return removed.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17c468812fc0c60f3d66b176339dc70564d8c3cb","date":1567918667,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#unregisterGauges(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#unregisterGauges(String,String).mjava","sourceNew":"  public int unregisterGauges(String registryName, String tag) {\n    if (tag == null) {\n      return 0;\n    }\n    MetricRegistry registry = registry(registryName);\n    AtomicInteger removed = new AtomicInteger();\n    registry.removeMatching((name, metric) -> {\n      if (metric instanceof GaugeWrapper &&\n          tag.equals(((GaugeWrapper) metric).getTag())) {\n        removed.incrementAndGet();\n        return true;\n      } else {\n      return false;\n      }\n    });\n    return removed.get();\n  }\n\n","sourceOld":"  public int unregisterGauges(String registryName, String tagSegment) {\n    if (tagSegment == null) {\n      return 0;\n    }\n    MetricRegistry registry = registry(registryName);\n    if (registry == null) return 0;\n    AtomicInteger removed = new AtomicInteger();\n    registry.removeMatching((name, metric) -> {\n      if (metric instanceof GaugeWrapper) {\n        GaugeWrapper wrapper = (GaugeWrapper) metric;\n        boolean toRemove = tagSegment.equals(wrapper.getTag()) || wrapper.getTag().contains(tagSegment);\n        if (toRemove) removed.incrementAndGet();\n        return toRemove;\n      }\n      return false;\n\n    });\n    return removed.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52275555c0ae3b55430cef26ad7fca3f02440944","date":1568033329,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#unregisterGauges(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#unregisterGauges(String,String).mjava","sourceNew":"  public int unregisterGauges(String registryName, String tag) {\n    if (tag == null) {\n      return 0;\n    }\n    MetricRegistry registry = registry(registryName);\n    AtomicInteger removed = new AtomicInteger();\n    registry.removeMatching((name, metric) -> {\n      if (metric instanceof GaugeWrapper &&\n          tag.equals(((GaugeWrapper) metric).getTag())) {\n        removed.incrementAndGet();\n        return true;\n      } else {\n      return false;\n      }\n    });\n    return removed.get();\n  }\n\n","sourceOld":"  public int unregisterGauges(String registryName, String tagSegment) {\n    if (tagSegment == null) {\n      return 0;\n    }\n    MetricRegistry registry = registry(registryName);\n    if (registry == null) return 0;\n    AtomicInteger removed = new AtomicInteger();\n    registry.removeMatching((name, metric) -> {\n      if (metric instanceof GaugeWrapper) {\n        GaugeWrapper wrapper = (GaugeWrapper) metric;\n        boolean toRemove = tagSegment.equals(wrapper.getTag()) || wrapper.getTag().contains(tagSegment);\n        if (toRemove) removed.incrementAndGet();\n        return toRemove;\n      }\n      return false;\n\n    });\n    return removed.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#unregisterGauges(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#unregisterGauges(String,String).mjava","sourceNew":"  public int unregisterGauges(String registryName, String tag) {\n    if (tag == null) {\n      return 0;\n    }\n    MetricRegistry registry = registry(registryName);\n    AtomicInteger removed = new AtomicInteger();\n    registry.removeMatching((name, metric) -> {\n      if (metric instanceof GaugeWrapper &&\n          tag.equals(((GaugeWrapper) metric).getTag())) {\n        removed.incrementAndGet();\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return removed.get();\n  }\n\n","sourceOld":"  public int unregisterGauges(String registryName, String tag) {\n    if (tag == null) {\n      return 0;\n    }\n    MetricRegistry registry = registry(registryName);\n    AtomicInteger removed = new AtomicInteger();\n    registry.removeMatching((name, metric) -> {\n      if (metric instanceof GaugeWrapper &&\n          tag.equals(((GaugeWrapper) metric).getTag())) {\n        removed.incrementAndGet();\n        return true;\n      } else {\n      return false;\n      }\n    });\n    return removed.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#unregisterGauges(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#unregisterGauges(String,String).mjava","sourceNew":"  public int unregisterGauges(String registryName, String tag) {\n    if (tag == null) {\n      return 0;\n    }\n    MetricRegistry registry = registry(registryName);\n    AtomicInteger removed = new AtomicInteger();\n    registry.removeMatching((name, metric) -> {\n      if (metric instanceof GaugeWrapper &&\n          tag.equals(((GaugeWrapper) metric).getTag())) {\n        removed.incrementAndGet();\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return removed.get();\n  }\n\n","sourceOld":"  public int unregisterGauges(String registryName, String tag) {\n    if (tag == null) {\n      return 0;\n    }\n    MetricRegistry registry = registry(registryName);\n    AtomicInteger removed = new AtomicInteger();\n    registry.removeMatching((name, metric) -> {\n      if (metric instanceof GaugeWrapper &&\n          tag.equals(((GaugeWrapper) metric).getTag())) {\n        removed.incrementAndGet();\n        return true;\n      } else {\n      return false;\n      }\n    });\n    return removed.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#unregisterGauges(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#unregisterGauges(String,String).mjava","sourceNew":"  public int unregisterGauges(String registryName, String tagSegment) {\n    if (tagSegment == null) {\n      return 0;\n    }\n    MetricRegistry registry = registry(registryName);\n    if (registry == null) return 0;\n    AtomicInteger removed = new AtomicInteger();\n    registry.removeMatching((name, metric) -> {\n      if (metric instanceof GaugeWrapper) {\n        GaugeWrapper wrapper = (GaugeWrapper) metric;\n        boolean toRemove = wrapper.getTag().contains(tagSegment);\n        if (toRemove) {\n          removed.incrementAndGet();\n        }\n        return toRemove;\n      }\n      return false;\n\n    });\n    return removed.get();\n  }\n\n","sourceOld":"  public int unregisterGauges(String registryName, String tag) {\n    if (tag == null) {\n      return 0;\n    }\n    MetricRegistry registry = registry(registryName);\n    AtomicInteger removed = new AtomicInteger();\n    registry.removeMatching((name, metric) -> {\n      if (metric instanceof GaugeWrapper &&\n          tag.equals(((GaugeWrapper) metric).getTag())) {\n        removed.incrementAndGet();\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return removed.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#unregisterGauges(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#unregisterGauges(String,String).mjava","sourceNew":"  public int unregisterGauges(String registryName, String tagSegment) {\n    if (tagSegment == null) {\n      return 0;\n    }\n    MetricRegistry registry = registry(registryName);\n    if (registry == null) return 0;\n    AtomicInteger removed = new AtomicInteger();\n    registry.removeMatching((name, metric) -> {\n      if (metric instanceof GaugeWrapper) {\n        @SuppressWarnings({\"rawtypes\"})\n        GaugeWrapper wrapper = (GaugeWrapper) metric;\n        boolean toRemove = wrapper.getTag().contains(tagSegment);\n        if (toRemove) {\n          removed.incrementAndGet();\n        }\n        return toRemove;\n      }\n      return false;\n\n    });\n    return removed.get();\n  }\n\n","sourceOld":"  public int unregisterGauges(String registryName, String tagSegment) {\n    if (tagSegment == null) {\n      return 0;\n    }\n    MetricRegistry registry = registry(registryName);\n    if (registry == null) return 0;\n    AtomicInteger removed = new AtomicInteger();\n    registry.removeMatching((name, metric) -> {\n      if (metric instanceof GaugeWrapper) {\n        GaugeWrapper wrapper = (GaugeWrapper) metric;\n        boolean toRemove = wrapper.getTag().contains(tagSegment);\n        if (toRemove) {\n          removed.incrementAndGet();\n        }\n        return toRemove;\n      }\n      return false;\n\n    });\n    return removed.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bfc52860e6d13d034226a760813c59d984c6817a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"52275555c0ae3b55430cef26ad7fca3f02440944":["a117d95183986014a31f25bb04e5464ca06d6068","17c468812fc0c60f3d66b176339dc70564d8c3cb"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["c44cc06c26e456fe9c215072b79fce30babe3975"],"43564cbb30b064675027cfb569564e8531096e97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bfc52860e6d13d034226a760813c59d984c6817a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["52275555c0ae3b55430cef26ad7fca3f02440944"],"a117d95183986014a31f25bb04e5464ca06d6068":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"17c468812fc0c60f3d66b176339dc70564d8c3cb":["a117d95183986014a31f25bb04e5464ca06d6068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["43564cbb30b064675027cfb569564e8531096e97"],"b0b597c65628ca9e73913a07e81691f8229bae35":["52275555c0ae3b55430cef26ad7fca3f02440944","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"52275555c0ae3b55430cef26ad7fca3f02440944":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"43564cbb30b064675027cfb569564e8531096e97":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"a117d95183986014a31f25bb04e5464ca06d6068":["52275555c0ae3b55430cef26ad7fca3f02440944","17c468812fc0c60f3d66b176339dc70564d8c3cb"],"c44cc06c26e456fe9c215072b79fce30babe3975":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","b0b597c65628ca9e73913a07e81691f8229bae35"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17c468812fc0c60f3d66b176339dc70564d8c3cb":["52275555c0ae3b55430cef26ad7fca3f02440944"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["a117d95183986014a31f25bb04e5464ca06d6068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}