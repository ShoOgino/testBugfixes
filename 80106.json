{"path":"src/test/org/apache/lucene/queryParser/TestQueryParser.QPTestFilter#next(Token).mjava","commits":[{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser.QPTestFilter#next(Token).mjava","pathOld":"/dev/null","sourceNew":"    public Token next(final Token reusableToken) throws IOException {\n      assert reusableToken != null;\n      if (inPhrase) {\n        inPhrase = false;\n        return reusableToken.reinit(\"phrase2\", savedStart, savedEnd);\n      } else\n        for (Token nextToken = input.next(reusableToken); nextToken != null; nextToken = input.next(reusableToken)) {\n          if (nextToken.term().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = nextToken.startOffset();\n            savedEnd = nextToken.endOffset();\n            return nextToken.reinit(\"phrase1\", savedStart, savedEnd);\n          } else if (!nextToken.term().equals(\"stop\"))\n            return nextToken;\n        }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser.QPTestFilter#next(Token).mjava","sourceNew":null,"sourceOld":"    public Token next(final Token reusableToken) throws IOException {\n      assert reusableToken != null;\n      if (inPhrase) {\n        inPhrase = false;\n        return reusableToken.reinit(\"phrase2\", savedStart, savedEnd);\n      } else\n        for (Token nextToken = input.next(reusableToken); nextToken != null; nextToken = input.next(reusableToken)) {\n          if (nextToken.term().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = nextToken.startOffset();\n            savedEnd = nextToken.endOffset();\n            return nextToken.reinit(\"phrase1\", savedStart, savedEnd);\n          } else if (!nextToken.term().equals(\"stop\"))\n            return nextToken;\n        }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}