{"path":"lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","commits":[{"id":"5ebe14aae60589c9bb6423f3cce02d5f599e1540","date":1348361556,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","pathOld":"/dev/null","sourceNew":"  private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n    FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n    in.length = 0;\n    in.offset = 0;\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    while(true) {\n      // read all arcs:\n      fst.readFirstTargetArc(arc, arc, fstReader);\n      arcs.add(new FST.Arc<T>().copyFrom(arc));\n      while(!arc.isLast()) {\n        fst.readNextArc(arc, fstReader);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n      }\n      \n      // pick one\n      arc = arcs.get(random.nextInt(arcs.size()));\n      arcs.clear();\n\n      // accumulate output\n      output = fst.outputs.add(output, arc.output);\n\n      // append label\n      if (arc.label == FST.END_LABEL) {\n        break;\n      }\n\n      if (in.ints.length == in.length) {\n        in.grow(1+in.length);\n      }\n      in.ints[in.length++] = arc.label;\n    }\n\n    return output;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82557a475db3e0849171dc0be5b02e3ae0745ddb","date":1358195918,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","sourceNew":"  private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n    FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n    in.length = 0;\n    in.offset = 0;\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    while(true) {\n      // read all arcs:\n      fst.readFirstTargetArc(arc, arc, fstReader);\n      arcs.add(new FST.Arc<T>().copyFrom(arc));\n      while(!arc.isLast()) {\n        fst.readNextArc(arc, fstReader);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n      }\n      \n      // pick one\n      arc = arcs.get(random.nextInt(arcs.size()));\n      arcs.clear();\n\n      // accumulate output\n      output = fst.outputs.add(output, arc.output);\n\n      // append label\n      if (arc.label == FST.END_LABEL) {\n        break;\n      }\n\n      if (in.ints.length == in.length) {\n        in.grow(1+in.length);\n      }\n      in.ints[in.length++] = arc.label;\n    }\n\n    return output;\n  }\n\n","sourceOld":"  private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n    FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n    in.length = 0;\n    in.offset = 0;\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    while(true) {\n      // read all arcs:\n      fst.readFirstTargetArc(arc, arc, fstReader);\n      arcs.add(new FST.Arc<T>().copyFrom(arc));\n      while(!arc.isLast()) {\n        fst.readNextArc(arc, fstReader);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n      }\n      \n      // pick one\n      arc = arcs.get(random.nextInt(arcs.size()));\n      arcs.clear();\n\n      // accumulate output\n      output = fst.outputs.add(output, arc.output);\n\n      // append label\n      if (arc.label == FST.END_LABEL) {\n        break;\n      }\n\n      if (in.ints.length == in.length) {\n        in.grow(1+in.length);\n      }\n      in.ints[in.length++] = arc.label;\n    }\n\n    return output;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","sourceNew":"  private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n    FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n    in.length = 0;\n    in.offset = 0;\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    while(true) {\n      // read all arcs:\n      fst.readFirstTargetArc(arc, arc, fstReader);\n      arcs.add(new FST.Arc<T>().copyFrom(arc));\n      while(!arc.isLast()) {\n        fst.readNextArc(arc, fstReader);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n      }\n      \n      // pick one\n      arc = arcs.get(random.nextInt(arcs.size()));\n      arcs.clear();\n\n      // accumulate output\n      output = fst.outputs.add(output, arc.output);\n\n      // append label\n      if (arc.label == FST.END_LABEL) {\n        break;\n      }\n\n      if (in.ints.length == in.length) {\n        in.grow(1+in.length);\n      }\n      in.ints[in.length++] = arc.label;\n    }\n\n    return output;\n  }\n\n","sourceOld":"  private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n    FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n    in.length = 0;\n    in.offset = 0;\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    while(true) {\n      // read all arcs:\n      fst.readFirstTargetArc(arc, arc, fstReader);\n      arcs.add(new FST.Arc<T>().copyFrom(arc));\n      while(!arc.isLast()) {\n        fst.readNextArc(arc, fstReader);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n      }\n      \n      // pick one\n      arc = arcs.get(random.nextInt(arcs.size()));\n      arcs.clear();\n\n      // accumulate output\n      output = fst.outputs.add(output, arc.output);\n\n      // append label\n      if (arc.label == FST.END_LABEL) {\n        break;\n      }\n\n      if (in.ints.length == in.length) {\n        in.grow(1+in.length);\n      }\n      in.ints[in.length++] = arc.label;\n    }\n\n    return output;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","sourceNew":"  private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n    FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    final List<FST.Arc<T>> arcs = new ArrayList<>();\n    in.length = 0;\n    in.offset = 0;\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    while(true) {\n      // read all arcs:\n      fst.readFirstTargetArc(arc, arc, fstReader);\n      arcs.add(new FST.Arc<T>().copyFrom(arc));\n      while(!arc.isLast()) {\n        fst.readNextArc(arc, fstReader);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n      }\n      \n      // pick one\n      arc = arcs.get(random.nextInt(arcs.size()));\n      arcs.clear();\n\n      // accumulate output\n      output = fst.outputs.add(output, arc.output);\n\n      // append label\n      if (arc.label == FST.END_LABEL) {\n        break;\n      }\n\n      if (in.ints.length == in.length) {\n        in.grow(1+in.length);\n      }\n      in.ints[in.length++] = arc.label;\n    }\n\n    return output;\n  }\n\n","sourceOld":"  private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n    FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();\n    in.length = 0;\n    in.offset = 0;\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    while(true) {\n      // read all arcs:\n      fst.readFirstTargetArc(arc, arc, fstReader);\n      arcs.add(new FST.Arc<T>().copyFrom(arc));\n      while(!arc.isLast()) {\n        fst.readNextArc(arc, fstReader);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n      }\n      \n      // pick one\n      arc = arcs.get(random.nextInt(arcs.size()));\n      arcs.clear();\n\n      // accumulate output\n      output = fst.outputs.add(output, arc.output);\n\n      // append label\n      if (arc.label == FST.END_LABEL) {\n        break;\n      }\n\n      if (in.ints.length == in.length) {\n        in.grow(1+in.length);\n      }\n      in.ints[in.length++] = arc.label;\n    }\n\n    return output;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester#randomAcceptedWord(FST[T],IntsRefBuilder).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester#randomAcceptedWord(FST[T],IntsRef).mjava","sourceNew":"  private T randomAcceptedWord(FST<T> fst, IntsRefBuilder in) throws IOException {\n    FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    final List<FST.Arc<T>> arcs = new ArrayList<>();\n    in.clear();\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    while(true) {\n      // read all arcs:\n      fst.readFirstTargetArc(arc, arc, fstReader);\n      arcs.add(new FST.Arc<T>().copyFrom(arc));\n      while(!arc.isLast()) {\n        fst.readNextArc(arc, fstReader);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n      }\n      \n      // pick one\n      arc = arcs.get(random.nextInt(arcs.size()));\n      arcs.clear();\n\n      // accumulate output\n      output = fst.outputs.add(output, arc.output);\n\n      // append label\n      if (arc.label == FST.END_LABEL) {\n        break;\n      }\n\n      in.append(arc.label);\n    }\n\n    return output;\n  }\n\n","sourceOld":"  private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {\n    FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n\n    final List<FST.Arc<T>> arcs = new ArrayList<>();\n    in.length = 0;\n    in.offset = 0;\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    while(true) {\n      // read all arcs:\n      fst.readFirstTargetArc(arc, arc, fstReader);\n      arcs.add(new FST.Arc<T>().copyFrom(arc));\n      while(!arc.isLast()) {\n        fst.readNextArc(arc, fstReader);\n        arcs.add(new FST.Arc<T>().copyFrom(arc));\n      }\n      \n      // pick one\n      arc = arcs.get(random.nextInt(arcs.size()));\n      arcs.clear();\n\n      // accumulate output\n      output = fst.outputs.add(output, arc.output);\n\n      // append label\n      if (arc.label == FST.END_LABEL) {\n        break;\n      }\n\n      if (in.ints.length == in.length) {\n        in.grow(1+in.length);\n      }\n      in.ints[in.length++] = arc.label;\n    }\n\n    return output;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["82557a475db3e0849171dc0be5b02e3ae0745ddb"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["5ebe14aae60589c9bb6423f3cce02d5f599e1540"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["5ebe14aae60589c9bb6423f3cce02d5f599e1540","82557a475db3e0849171dc0be5b02e3ae0745ddb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5ebe14aae60589c9bb6423f3cce02d5f599e1540":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","c4015cd39dff8d4dec562d909f9766debac53aa6"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ebe14aae60589c9bb6423f3cce02d5f599e1540"],"5ebe14aae60589c9bb6423f3cce02d5f599e1540":["82557a475db3e0849171dc0be5b02e3ae0745ddb","c4015cd39dff8d4dec562d909f9766debac53aa6"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}