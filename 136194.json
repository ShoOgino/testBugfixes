{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandom2GraphAfter().mjava","commits":[{"id":"6795c6bc2f5a6b2a2230cb20ff4744003faf7802","date":1333839972,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandom2GraphAfter().mjava","pathOld":"/dev/null","sourceNew":"  // Adds MockGraphTokenFilter after SynFilter:\n  public void testRandom2GraphAfter() throws Exception {\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          TokenStream syns = new SynonymFilter(tokenizer, map, ignoreCase);\n          TokenStream graph = new MockGraphTokenFilter(random, syns);\n          return new TokenStreamComponents(tokenizer, graph);\n        }\n      };\n\n      checkRandomData(random, analyzer, 1000*RANDOM_MULTIPLIER);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandom2GraphAfter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandom2GraphAfter().mjava","sourceNew":"  // Adds MockGraphTokenFilter after SynFilter:\n  public void testRandom2GraphAfter() throws Exception {\n    final int numIters = atLeast(10);\n    Random random = random();\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          TokenStream syns = new SynonymFilter(tokenizer, map, ignoreCase);\n          TokenStream graph = new MockGraphTokenFilter(random(), syns);\n          return new TokenStreamComponents(tokenizer, graph);\n        }\n      };\n\n      checkRandomData(random, analyzer, 1000*RANDOM_MULTIPLIER);\n    }\n  }\n\n","sourceOld":"  // Adds MockGraphTokenFilter after SynFilter:\n  public void testRandom2GraphAfter() throws Exception {\n    final int numIters = atLeast(10);\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          TokenStream syns = new SynonymFilter(tokenizer, map, ignoreCase);\n          TokenStream graph = new MockGraphTokenFilter(random, syns);\n          return new TokenStreamComponents(tokenizer, graph);\n        }\n      };\n\n      checkRandomData(random, analyzer, 1000*RANDOM_MULTIPLIER);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandom2GraphAfter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testRandom2GraphAfter().mjava","sourceNew":"  // Adds MockGraphTokenFilter after SynFilter:\n  public void testRandom2GraphAfter() throws Exception {\n    final int numIters = atLeast(10);\n    Random random = random();\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          TokenStream syns = new SynonymFilter(tokenizer, map, ignoreCase);\n          TokenStream graph = new MockGraphTokenFilter(random(), syns);\n          return new TokenStreamComponents(tokenizer, graph);\n        }\n      };\n\n      checkRandomData(random, analyzer, 1000*RANDOM_MULTIPLIER);\n    }\n  }\n\n","sourceOld":"  // Adds MockGraphTokenFilter after SynFilter:\n  public void testRandom2GraphAfter() throws Exception {\n    final int numIters = atLeast(10);\n    Random random = random();\n    for (int i = 0; i < numIters; i++) {\n      b = new SynonymMap.Builder(random.nextBoolean());\n      final int numEntries = atLeast(10);\n      for (int j = 0; j < numEntries; j++) {\n        add(randomNonEmptyString(), randomNonEmptyString(), random.nextBoolean());\n      }\n      final SynonymMap map = b.build();\n      final boolean ignoreCase = random.nextBoolean();\n      \n      final Analyzer analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.SIMPLE, true);\n          TokenStream syns = new SynonymFilter(tokenizer, map, ignoreCase);\n          TokenStream graph = new MockGraphTokenFilter(random(), syns);\n          return new TokenStreamComponents(tokenizer, graph);\n        }\n      };\n\n      checkRandomData(random, analyzer, 1000*RANDOM_MULTIPLIER);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6795c6bc2f5a6b2a2230cb20ff4744003faf7802"],"6795c6bc2f5a6b2a2230cb20ff4744003faf7802":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6795c6bc2f5a6b2a2230cb20ff4744003faf7802"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6795c6bc2f5a6b2a2230cb20ff4744003faf7802":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}