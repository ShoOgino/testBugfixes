{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCase#setDefaultConfigDirSysPropIfNotSet().mjava","commits":[{"id":"cbb2d9cb96e731a93749beccbf9d0a5e4849cae2","date":1581705413,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCase#setDefaultConfigDirSysPropIfNotSet().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the <code>solr.default.confdir</code> system property to the value of \n   * {@link ExternalPaths#DEFAULT_CONFIGSET} if and only if the system property is not already set, \n   * and the <code>DEFAULT_CONFIGSET</code> exists and is a readable directory.\n   * <p>\n   * Logs INFO/WARNing messages as appropriate based on these 2 conditions.\n   * </p>\n   * @see SolrDispatchFilter#SOLR_DEFAULT_CONFDIR_ATTRIBUTE\n   */\n  @BeforeClass\n  public static void setDefaultConfigDirSysPropIfNotSet() {\n    final String existingValue = System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE);\n    if (null != existingValue) {\n      log.info(\"Test env includes configset dir system property '{}'='{}'\");\n      return;\n    }\n    final File extPath = new File(ExternalPaths.DEFAULT_CONFIGSET);\n    if (extPath.canRead(/* implies exists() */) && extPath.isDirectory()) {\n      log.info(\"Setting '{}' system property to test-framework derived value of '{}'\",\n               SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE, ExternalPaths.DEFAULT_CONFIGSET);\n      assert null == existingValue;\n      System.setProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE, ExternalPaths.DEFAULT_CONFIGSET);\n    } else {\n      log.warn(\"System property '{}' is not already set, but test-framework derived value ('{}') either \" +\n               \"does not exist or is not a readable directory, you may need to set the property yourself \" +\n               \"for tests to run properly\",\n               SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE, ExternalPaths.DEFAULT_CONFIGSET);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854","date":1588352817,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCase#setDefaultConfigDirSysPropIfNotSet().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCase#setDefaultConfigDirSysPropIfNotSet().mjava","sourceNew":"  /**\n   * Sets the <code>solr.default.confdir</code> system property to the value of \n   * {@link ExternalPaths#DEFAULT_CONFIGSET} if and only if the system property is not already set, \n   * and the <code>DEFAULT_CONFIGSET</code> exists and is a readable directory.\n   * <p>\n   * Logs INFO/WARNing messages as appropriate based on these 2 conditions.\n   * </p>\n   * @see SolrDispatchFilter#SOLR_DEFAULT_CONFDIR_ATTRIBUTE\n   */\n  @BeforeClass\n  public static void setDefaultConfigDirSysPropIfNotSet() {\n    final String existingValue = System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE);\n    if (null != existingValue) {\n      log.info(\"Test env includes configset dir system property '{}'='{}'\", SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE, existingValue);\n      return;\n    }\n    final File extPath = new File(ExternalPaths.DEFAULT_CONFIGSET);\n    if (extPath.canRead(/* implies exists() */) && extPath.isDirectory()) {\n      log.info(\"Setting '{}' system property to test-framework derived value of '{}'\",\n               SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE, ExternalPaths.DEFAULT_CONFIGSET);\n      assert null == existingValue;\n      System.setProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE, ExternalPaths.DEFAULT_CONFIGSET);\n    } else {\n      log.warn(\"System property '{}' is not already set, but test-framework derived value ('{}') either \" +\n               \"does not exist or is not a readable directory, you may need to set the property yourself \" +\n               \"for tests to run properly\",\n               SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE, ExternalPaths.DEFAULT_CONFIGSET);\n    }\n  }\n\n","sourceOld":"  /**\n   * Sets the <code>solr.default.confdir</code> system property to the value of \n   * {@link ExternalPaths#DEFAULT_CONFIGSET} if and only if the system property is not already set, \n   * and the <code>DEFAULT_CONFIGSET</code> exists and is a readable directory.\n   * <p>\n   * Logs INFO/WARNing messages as appropriate based on these 2 conditions.\n   * </p>\n   * @see SolrDispatchFilter#SOLR_DEFAULT_CONFDIR_ATTRIBUTE\n   */\n  @BeforeClass\n  public static void setDefaultConfigDirSysPropIfNotSet() {\n    final String existingValue = System.getProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE);\n    if (null != existingValue) {\n      log.info(\"Test env includes configset dir system property '{}'='{}'\");\n      return;\n    }\n    final File extPath = new File(ExternalPaths.DEFAULT_CONFIGSET);\n    if (extPath.canRead(/* implies exists() */) && extPath.isDirectory()) {\n      log.info(\"Setting '{}' system property to test-framework derived value of '{}'\",\n               SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE, ExternalPaths.DEFAULT_CONFIGSET);\n      assert null == existingValue;\n      System.setProperty(SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE, ExternalPaths.DEFAULT_CONFIGSET);\n    } else {\n      log.warn(\"System property '{}' is not already set, but test-framework derived value ('{}') either \" +\n               \"does not exist or is not a readable directory, you may need to set the property yourself \" +\n               \"for tests to run properly\",\n               SolrDispatchFilter.SOLR_DEFAULT_CONFDIR_ATTRIBUTE, ExternalPaths.DEFAULT_CONFIGSET);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cbb2d9cb96e731a93749beccbf9d0a5e4849cae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854":["cbb2d9cb96e731a93749beccbf9d0a5e4849cae2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cbb2d9cb96e731a93749beccbf9d0a5e4849cae2"],"cbb2d9cb96e731a93749beccbf9d0a5e4849cae2":["55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854"],"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}