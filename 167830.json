{"path":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","pathOld":"modules/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  public static void main(java.lang.String[] args) {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase();\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      try {\n        int stems = 0;\n        int words = 0;\n        \n        allocTrie();\n        \n        System.out.println(args[i]);\n        in = new LineNumberReader(new BufferedReader(new InputStreamReader(\n            new FileInputStream(args[i]), charset)));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase();\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            if (storeorig) {\n              trie.add(stem, \"-a\");\n              words++;\n            }\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                trie.add(token, diff.exec(token, stem));\n                words++;\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n        Optimizer o = new Optimizer();\n        Optimizer2 o2 = new Optimizer2();\n        Lift l = new Lift(true);\n        Lift e = new Lift(false);\n        Gener g = new Gener();\n        \n        for (int j = 0; j < optimizer.length; j++) {\n          String prefix;\n          switch (optimizer[j]) {\n            case 'G':\n              trie = trie.reduce(g);\n              prefix = \"G: \";\n              break;\n            case 'L':\n              trie = trie.reduce(l);\n              prefix = \"L: \";\n              break;\n            case 'E':\n              trie = trie.reduce(e);\n              prefix = \"E: \";\n              break;\n            case '2':\n              trie = trie.reduce(o2);\n              prefix = \"2: \";\n              break;\n            case '1':\n              trie = trie.reduce(o);\n              prefix = \"1: \";\n              break;\n            default:\n              continue;\n          }\n          trie.printInfo(prefix + \" \");\n        }\n               \n        DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n            new FileOutputStream(args[i] + \".out\")));\n        os.writeUTF(args[0]);\n        trie.store(os);\n        os.close();\n        \n      } catch (FileNotFoundException x) {\n        x.printStackTrace();\n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  public static void main(java.lang.String[] args) {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase();\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      try {\n        int stems = 0;\n        int words = 0;\n        \n        allocTrie();\n        \n        System.out.println(args[i]);\n        in = new LineNumberReader(new BufferedReader(new InputStreamReader(\n            new FileInputStream(args[i]), charset)));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase();\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            if (storeorig) {\n              trie.add(stem, \"-a\");\n              words++;\n            }\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                trie.add(token, diff.exec(token, stem));\n                words++;\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n        Optimizer o = new Optimizer();\n        Optimizer2 o2 = new Optimizer2();\n        Lift l = new Lift(true);\n        Lift e = new Lift(false);\n        Gener g = new Gener();\n        \n        for (int j = 0; j < optimizer.length; j++) {\n          String prefix;\n          switch (optimizer[j]) {\n            case 'G':\n              trie = trie.reduce(g);\n              prefix = \"G: \";\n              break;\n            case 'L':\n              trie = trie.reduce(l);\n              prefix = \"L: \";\n              break;\n            case 'E':\n              trie = trie.reduce(e);\n              prefix = \"E: \";\n              break;\n            case '2':\n              trie = trie.reduce(o2);\n              prefix = \"2: \";\n              break;\n            case '1':\n              trie = trie.reduce(o);\n              prefix = \"1: \";\n              break;\n            default:\n              continue;\n          }\n          trie.printInfo(prefix + \" \");\n        }\n               \n        DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n            new FileOutputStream(args[i] + \".out\")));\n        os.writeUTF(args[0]);\n        trie.store(os);\n        os.close();\n        \n      } catch (FileNotFoundException x) {\n        x.printStackTrace();\n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c70cdb81dc660d90f9d0664dd91b473b7e66563","date":1341679310,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  public static void main(java.lang.String[] args) {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase(Locale.ROOT);\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      try {\n        int stems = 0;\n        int words = 0;\n        \n        allocTrie();\n        \n        System.out.println(args[i]);\n        in = new LineNumberReader(new BufferedReader(new InputStreamReader(\n            new FileInputStream(args[i]), charset)));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase(Locale.ROOT);\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            if (storeorig) {\n              trie.add(stem, \"-a\");\n              words++;\n            }\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                trie.add(token, diff.exec(token, stem));\n                words++;\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n        Optimizer o = new Optimizer();\n        Optimizer2 o2 = new Optimizer2();\n        Lift l = new Lift(true);\n        Lift e = new Lift(false);\n        Gener g = new Gener();\n        \n        for (int j = 0; j < optimizer.length; j++) {\n          String prefix;\n          switch (optimizer[j]) {\n            case 'G':\n              trie = trie.reduce(g);\n              prefix = \"G: \";\n              break;\n            case 'L':\n              trie = trie.reduce(l);\n              prefix = \"L: \";\n              break;\n            case 'E':\n              trie = trie.reduce(e);\n              prefix = \"E: \";\n              break;\n            case '2':\n              trie = trie.reduce(o2);\n              prefix = \"2: \";\n              break;\n            case '1':\n              trie = trie.reduce(o);\n              prefix = \"1: \";\n              break;\n            default:\n              continue;\n          }\n          trie.printInfo(prefix + \" \");\n        }\n               \n        DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n            new FileOutputStream(args[i] + \".out\")));\n        os.writeUTF(args[0]);\n        trie.store(os);\n        os.close();\n        \n      } catch (FileNotFoundException x) {\n        x.printStackTrace();\n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  public static void main(java.lang.String[] args) {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase();\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      try {\n        int stems = 0;\n        int words = 0;\n        \n        allocTrie();\n        \n        System.out.println(args[i]);\n        in = new LineNumberReader(new BufferedReader(new InputStreamReader(\n            new FileInputStream(args[i]), charset)));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase();\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            if (storeorig) {\n              trie.add(stem, \"-a\");\n              words++;\n            }\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                trie.add(token, diff.exec(token, stem));\n                words++;\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n        Optimizer o = new Optimizer();\n        Optimizer2 o2 = new Optimizer2();\n        Lift l = new Lift(true);\n        Lift e = new Lift(false);\n        Gener g = new Gener();\n        \n        for (int j = 0; j < optimizer.length; j++) {\n          String prefix;\n          switch (optimizer[j]) {\n            case 'G':\n              trie = trie.reduce(g);\n              prefix = \"G: \";\n              break;\n            case 'L':\n              trie = trie.reduce(l);\n              prefix = \"L: \";\n              break;\n            case 'E':\n              trie = trie.reduce(e);\n              prefix = \"E: \";\n              break;\n            case '2':\n              trie = trie.reduce(o2);\n              prefix = \"2: \";\n              break;\n            case '1':\n              trie = trie.reduce(o);\n              prefix = \"1: \";\n              break;\n            default:\n              continue;\n          }\n          trie.printInfo(prefix + \" \");\n        }\n               \n        DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n            new FileOutputStream(args[i] + \".out\")));\n        os.writeUTF(args[0]);\n        trie.store(os);\n        os.close();\n        \n      } catch (FileNotFoundException x) {\n        x.printStackTrace();\n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  public static void main(java.lang.String[] args) {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase(Locale.ROOT);\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      try {\n        int stems = 0;\n        int words = 0;\n        \n        allocTrie();\n        \n        System.out.println(args[i]);\n        in = new LineNumberReader(new BufferedReader(new InputStreamReader(\n            new FileInputStream(args[i]), charset)));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase(Locale.ROOT);\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            if (storeorig) {\n              trie.add(stem, \"-a\");\n              words++;\n            }\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                trie.add(token, diff.exec(token, stem));\n                words++;\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n        Optimizer o = new Optimizer();\n        Optimizer2 o2 = new Optimizer2();\n        Lift l = new Lift(true);\n        Lift e = new Lift(false);\n        Gener g = new Gener();\n        \n        for (int j = 0; j < optimizer.length; j++) {\n          String prefix;\n          switch (optimizer[j]) {\n            case 'G':\n              trie = trie.reduce(g);\n              prefix = \"G: \";\n              break;\n            case 'L':\n              trie = trie.reduce(l);\n              prefix = \"L: \";\n              break;\n            case 'E':\n              trie = trie.reduce(e);\n              prefix = \"E: \";\n              break;\n            case '2':\n              trie = trie.reduce(o2);\n              prefix = \"2: \";\n              break;\n            case '1':\n              trie = trie.reduce(o);\n              prefix = \"1: \";\n              break;\n            default:\n              continue;\n          }\n          trie.printInfo(prefix + \" \");\n        }\n               \n        DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n            new FileOutputStream(args[i] + \".out\")));\n        os.writeUTF(args[0]);\n        trie.store(os);\n        os.close();\n        \n      } catch (FileNotFoundException x) {\n        x.printStackTrace();\n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  public static void main(java.lang.String[] args) {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase();\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      try {\n        int stems = 0;\n        int words = 0;\n        \n        allocTrie();\n        \n        System.out.println(args[i]);\n        in = new LineNumberReader(new BufferedReader(new InputStreamReader(\n            new FileInputStream(args[i]), charset)));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase();\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            if (storeorig) {\n              trie.add(stem, \"-a\");\n              words++;\n            }\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                trie.add(token, diff.exec(token, stem));\n                words++;\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n        Optimizer o = new Optimizer();\n        Optimizer2 o2 = new Optimizer2();\n        Lift l = new Lift(true);\n        Lift e = new Lift(false);\n        Gener g = new Gener();\n        \n        for (int j = 0; j < optimizer.length; j++) {\n          String prefix;\n          switch (optimizer[j]) {\n            case 'G':\n              trie = trie.reduce(g);\n              prefix = \"G: \";\n              break;\n            case 'L':\n              trie = trie.reduce(l);\n              prefix = \"L: \";\n              break;\n            case 'E':\n              trie = trie.reduce(e);\n              prefix = \"E: \";\n              break;\n            case '2':\n              trie = trie.reduce(o2);\n              prefix = \"2: \";\n              break;\n            case '1':\n              trie = trie.reduce(o);\n              prefix = \"1: \";\n              break;\n            default:\n              continue;\n          }\n          trie.printInfo(prefix + \" \");\n        }\n               \n        DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n            new FileOutputStream(args[i] + \".out\")));\n        os.writeUTF(args[0]);\n        trie.store(os);\n        os.close();\n        \n      } catch (FileNotFoundException x) {\n        x.printStackTrace();\n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  public static void main(java.lang.String[] args) {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase(Locale.ROOT);\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      try {\n        int stems = 0;\n        int words = 0;\n        \n        allocTrie();\n        \n        System.out.println(args[i]);\n        in = new LineNumberReader(new BufferedReader(new InputStreamReader(\n            new FileInputStream(args[i]), charset)));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase(Locale.ROOT);\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            if (storeorig) {\n              trie.add(stem, \"-a\");\n              words++;\n            }\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                trie.add(token, diff.exec(token, stem));\n                words++;\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n        Optimizer o = new Optimizer();\n        Optimizer2 o2 = new Optimizer2();\n        Lift l = new Lift(true);\n        Lift e = new Lift(false);\n        Gener g = new Gener();\n        \n        for (int j = 0; j < optimizer.length; j++) {\n          String prefix;\n          switch (optimizer[j]) {\n            case 'G':\n              trie = trie.reduce(g);\n              prefix = \"G: \";\n              break;\n            case 'L':\n              trie = trie.reduce(l);\n              prefix = \"L: \";\n              break;\n            case 'E':\n              trie = trie.reduce(e);\n              prefix = \"E: \";\n              break;\n            case '2':\n              trie = trie.reduce(o2);\n              prefix = \"2: \";\n              break;\n            case '1':\n              trie = trie.reduce(o);\n              prefix = \"1: \";\n              break;\n            default:\n              continue;\n          }\n          trie.printInfo(prefix + \" \");\n        }\n               \n        DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n            new FileOutputStream(args[i] + \".out\")));\n        os.writeUTF(args[0]);\n        trie.store(os);\n        os.close();\n        \n      } catch (FileNotFoundException x) {\n        x.printStackTrace();\n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  public static void main(java.lang.String[] args) {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase();\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      try {\n        int stems = 0;\n        int words = 0;\n        \n        allocTrie();\n        \n        System.out.println(args[i]);\n        in = new LineNumberReader(new BufferedReader(new InputStreamReader(\n            new FileInputStream(args[i]), charset)));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase();\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            if (storeorig) {\n              trie.add(stem, \"-a\");\n              words++;\n            }\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                trie.add(token, diff.exec(token, stem));\n                words++;\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n        Optimizer o = new Optimizer();\n        Optimizer2 o2 = new Optimizer2();\n        Lift l = new Lift(true);\n        Lift e = new Lift(false);\n        Gener g = new Gener();\n        \n        for (int j = 0; j < optimizer.length; j++) {\n          String prefix;\n          switch (optimizer[j]) {\n            case 'G':\n              trie = trie.reduce(g);\n              prefix = \"G: \";\n              break;\n            case 'L':\n              trie = trie.reduce(l);\n              prefix = \"L: \";\n              break;\n            case 'E':\n              trie = trie.reduce(e);\n              prefix = \"E: \";\n              break;\n            case '2':\n              trie = trie.reduce(o2);\n              prefix = \"2: \";\n              break;\n            case '1':\n              trie = trie.reduce(o);\n              prefix = \"1: \";\n              break;\n            default:\n              continue;\n          }\n          trie.printInfo(prefix + \" \");\n        }\n               \n        DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n            new FileOutputStream(args[i] + \".out\")));\n        os.writeUTF(args[0]);\n        trie.store(os);\n        os.close();\n        \n      } catch (FileNotFoundException x) {\n        x.printStackTrace();\n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","date":1342021960,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  public static void main(java.lang.String[] args) throws Exception {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase(Locale.ROOT);\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      int stems = 0;\n      int words = 0;\n      \n      allocTrie();\n      \n      System.out.println(args[i]);\n      in = new LineNumberReader(new BufferedReader(new InputStreamReader(\n          new FileInputStream(args[i]), charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          if (storeorig) {\n            trie.add(stem, \"-a\");\n            words++;\n          }\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              trie.add(token, diff.exec(token, stem));\n              words++;\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n      \n      Optimizer o = new Optimizer();\n      Optimizer2 o2 = new Optimizer2();\n      Lift l = new Lift(true);\n      Lift e = new Lift(false);\n      Gener g = new Gener();\n      \n      for (int j = 0; j < optimizer.length; j++) {\n        String prefix;\n        switch (optimizer[j]) {\n          case 'G':\n            trie = trie.reduce(g);\n            prefix = \"G: \";\n            break;\n          case 'L':\n            trie = trie.reduce(l);\n            prefix = \"L: \";\n            break;\n          case 'E':\n            trie = trie.reduce(e);\n            prefix = \"E: \";\n            break;\n          case '2':\n            trie = trie.reduce(o2);\n            prefix = \"2: \";\n            break;\n          case '1':\n            trie = trie.reduce(o);\n            prefix = \"1: \";\n            break;\n          default:\n            continue;\n        }\n        trie.printInfo(System.out, prefix + \" \");\n      }\n      \n      DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n          new FileOutputStream(args[i] + \".out\")));\n      os.writeUTF(args[0]);\n      trie.store(os);\n      os.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  public static void main(java.lang.String[] args) {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase(Locale.ROOT);\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      try {\n        int stems = 0;\n        int words = 0;\n        \n        allocTrie();\n        \n        System.out.println(args[i]);\n        in = new LineNumberReader(new BufferedReader(new InputStreamReader(\n            new FileInputStream(args[i]), charset)));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase(Locale.ROOT);\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            if (storeorig) {\n              trie.add(stem, \"-a\");\n              words++;\n            }\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                trie.add(token, diff.exec(token, stem));\n                words++;\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n        Optimizer o = new Optimizer();\n        Optimizer2 o2 = new Optimizer2();\n        Lift l = new Lift(true);\n        Lift e = new Lift(false);\n        Gener g = new Gener();\n        \n        for (int j = 0; j < optimizer.length; j++) {\n          String prefix;\n          switch (optimizer[j]) {\n            case 'G':\n              trie = trie.reduce(g);\n              prefix = \"G: \";\n              break;\n            case 'L':\n              trie = trie.reduce(l);\n              prefix = \"L: \";\n              break;\n            case 'E':\n              trie = trie.reduce(e);\n              prefix = \"E: \";\n              break;\n            case '2':\n              trie = trie.reduce(o2);\n              prefix = \"2: \";\n              break;\n            case '1':\n              trie = trie.reduce(o);\n              prefix = \"1: \";\n              break;\n            default:\n              continue;\n          }\n          trie.printInfo(prefix + \" \");\n        }\n               \n        DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n            new FileOutputStream(args[i] + \".out\")));\n        os.writeUTF(args[0]);\n        trie.store(os);\n        os.close();\n        \n      } catch (FileNotFoundException x) {\n        x.printStackTrace();\n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":["67748b41458c73d49a48168362cc7f4c960a2542","9c70cdb81dc660d90f9d0664dd91b473b7e66563"],"bugIntro":["28289db63ed90bbf9506cc2dccfa1f45b3b0e501"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  public static void main(java.lang.String[] args) throws Exception {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase(Locale.ROOT);\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      int stems = 0;\n      int words = 0;\n      \n      allocTrie();\n      \n      System.out.println(args[i]);\n      in = new LineNumberReader(new BufferedReader(new InputStreamReader(\n          new FileInputStream(args[i]), charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          if (storeorig) {\n            trie.add(stem, \"-a\");\n            words++;\n          }\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              trie.add(token, diff.exec(token, stem));\n              words++;\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n      \n      Optimizer o = new Optimizer();\n      Optimizer2 o2 = new Optimizer2();\n      Lift l = new Lift(true);\n      Lift e = new Lift(false);\n      Gener g = new Gener();\n      \n      for (int j = 0; j < optimizer.length; j++) {\n        String prefix;\n        switch (optimizer[j]) {\n          case 'G':\n            trie = trie.reduce(g);\n            prefix = \"G: \";\n            break;\n          case 'L':\n            trie = trie.reduce(l);\n            prefix = \"L: \";\n            break;\n          case 'E':\n            trie = trie.reduce(e);\n            prefix = \"E: \";\n            break;\n          case '2':\n            trie = trie.reduce(o2);\n            prefix = \"2: \";\n            break;\n          case '1':\n            trie = trie.reduce(o);\n            prefix = \"1: \";\n            break;\n          default:\n            continue;\n        }\n        trie.printInfo(System.out, prefix + \" \");\n      }\n      \n      DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n          new FileOutputStream(args[i] + \".out\")));\n      os.writeUTF(args[0]);\n      trie.store(os);\n      os.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  public static void main(java.lang.String[] args) {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase();\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      try {\n        int stems = 0;\n        int words = 0;\n        \n        allocTrie();\n        \n        System.out.println(args[i]);\n        in = new LineNumberReader(new BufferedReader(new InputStreamReader(\n            new FileInputStream(args[i]), charset)));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase();\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            if (storeorig) {\n              trie.add(stem, \"-a\");\n              words++;\n            }\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                trie.add(token, diff.exec(token, stem));\n                words++;\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n        Optimizer o = new Optimizer();\n        Optimizer2 o2 = new Optimizer2();\n        Lift l = new Lift(true);\n        Lift e = new Lift(false);\n        Gener g = new Gener();\n        \n        for (int j = 0; j < optimizer.length; j++) {\n          String prefix;\n          switch (optimizer[j]) {\n            case 'G':\n              trie = trie.reduce(g);\n              prefix = \"G: \";\n              break;\n            case 'L':\n              trie = trie.reduce(l);\n              prefix = \"L: \";\n              break;\n            case 'E':\n              trie = trie.reduce(e);\n              prefix = \"E: \";\n              break;\n            case '2':\n              trie = trie.reduce(o2);\n              prefix = \"2: \";\n              break;\n            case '1':\n              trie = trie.reduce(o);\n              prefix = \"1: \";\n              break;\n            default:\n              continue;\n          }\n          trie.printInfo(prefix + \" \");\n        }\n               \n        DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n            new FileOutputStream(args[i] + \".out\")));\n        os.writeUTF(args[0]);\n        trie.store(os);\n        os.close();\n        \n      } catch (FileNotFoundException x) {\n        x.printStackTrace();\n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  public static void main(java.lang.String[] args) throws Exception {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase(Locale.ROOT);\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      int stems = 0;\n      int words = 0;\n      \n      allocTrie();\n      \n      System.out.println(args[i]);\n      in = new LineNumberReader(new BufferedReader(new InputStreamReader(\n          new FileInputStream(args[i]), charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          if (storeorig) {\n            trie.add(stem, \"-a\");\n            words++;\n          }\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              trie.add(token, diff.exec(token, stem));\n              words++;\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n      \n      Optimizer o = new Optimizer();\n      Optimizer2 o2 = new Optimizer2();\n      Lift l = new Lift(true);\n      Lift e = new Lift(false);\n      Gener g = new Gener();\n      \n      for (int j = 0; j < optimizer.length; j++) {\n        String prefix;\n        switch (optimizer[j]) {\n          case 'G':\n            trie = trie.reduce(g);\n            prefix = \"G: \";\n            break;\n          case 'L':\n            trie = trie.reduce(l);\n            prefix = \"L: \";\n            break;\n          case 'E':\n            trie = trie.reduce(e);\n            prefix = \"E: \";\n            break;\n          case '2':\n            trie = trie.reduce(o2);\n            prefix = \"2: \";\n            break;\n          case '1':\n            trie = trie.reduce(o);\n            prefix = \"1: \";\n            break;\n          default:\n            continue;\n        }\n        trie.printInfo(System.out, prefix + \" \");\n      }\n      \n      DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n          new FileOutputStream(args[i] + \".out\")));\n      os.writeUTF(args[0]);\n      trie.store(os);\n      os.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  public static void main(java.lang.String[] args) {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase(Locale.ROOT);\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      try {\n        int stems = 0;\n        int words = 0;\n        \n        allocTrie();\n        \n        System.out.println(args[i]);\n        in = new LineNumberReader(new BufferedReader(new InputStreamReader(\n            new FileInputStream(args[i]), charset)));\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase(Locale.ROOT);\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            if (storeorig) {\n              trie.add(stem, \"-a\");\n              words++;\n            }\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                trie.add(token, diff.exec(token, stem));\n                words++;\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n        \n        Optimizer o = new Optimizer();\n        Optimizer2 o2 = new Optimizer2();\n        Lift l = new Lift(true);\n        Lift e = new Lift(false);\n        Gener g = new Gener();\n        \n        for (int j = 0; j < optimizer.length; j++) {\n          String prefix;\n          switch (optimizer[j]) {\n            case 'G':\n              trie = trie.reduce(g);\n              prefix = \"G: \";\n              break;\n            case 'L':\n              trie = trie.reduce(l);\n              prefix = \"L: \";\n              break;\n            case 'E':\n              trie = trie.reduce(e);\n              prefix = \"E: \";\n              break;\n            case '2':\n              trie = trie.reduce(o2);\n              prefix = \"2: \";\n              break;\n            case '1':\n              trie = trie.reduce(o);\n              prefix = \"1: \";\n              break;\n            default:\n              continue;\n          }\n          trie.printInfo(prefix + \" \");\n        }\n               \n        DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n            new FileOutputStream(args[i] + \".out\")));\n        os.writeUTF(args[0]);\n        trie.store(os);\n        os.close();\n        \n      } catch (FileNotFoundException x) {\n        x.printStackTrace();\n      } catch (IOException x) {\n        x.printStackTrace();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3123be0c46a5ed1c1a40d102db7c24106694c35","date":1355608257,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  public static void main(java.lang.String[] args) throws Exception {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase(Locale.ROOT);\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      int stems = 0;\n      int words = 0;\n      \n      allocTrie();\n      \n      System.out.println(args[i]);\n      in = new LineNumberReader(new BufferedReader(new InputStreamReader(\n          new FileInputStream(args[i]), charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          if (storeorig) {\n            trie.add(stem, \"-a\");\n            words++;\n          }\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              trie.add(token, diff.exec(token, stem));\n              words++;\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n      in.close();\n      \n      Optimizer o = new Optimizer();\n      Optimizer2 o2 = new Optimizer2();\n      Lift l = new Lift(true);\n      Lift e = new Lift(false);\n      Gener g = new Gener();\n      \n      for (int j = 0; j < optimizer.length; j++) {\n        String prefix;\n        switch (optimizer[j]) {\n          case 'G':\n            trie = trie.reduce(g);\n            prefix = \"G: \";\n            break;\n          case 'L':\n            trie = trie.reduce(l);\n            prefix = \"L: \";\n            break;\n          case 'E':\n            trie = trie.reduce(e);\n            prefix = \"E: \";\n            break;\n          case '2':\n            trie = trie.reduce(o2);\n            prefix = \"2: \";\n            break;\n          case '1':\n            trie = trie.reduce(o);\n            prefix = \"1: \";\n            break;\n          default:\n            continue;\n        }\n        trie.printInfo(System.out, prefix + \" \");\n      }\n      \n      DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n          new FileOutputStream(args[i] + \".out\")));\n      os.writeUTF(args[0]);\n      trie.store(os);\n      os.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  public static void main(java.lang.String[] args) throws Exception {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase(Locale.ROOT);\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      int stems = 0;\n      int words = 0;\n      \n      allocTrie();\n      \n      System.out.println(args[i]);\n      in = new LineNumberReader(new BufferedReader(new InputStreamReader(\n          new FileInputStream(args[i]), charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          if (storeorig) {\n            trie.add(stem, \"-a\");\n            words++;\n          }\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              trie.add(token, diff.exec(token, stem));\n              words++;\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n      \n      Optimizer o = new Optimizer();\n      Optimizer2 o2 = new Optimizer2();\n      Lift l = new Lift(true);\n      Lift e = new Lift(false);\n      Gener g = new Gener();\n      \n      for (int j = 0; j < optimizer.length; j++) {\n        String prefix;\n        switch (optimizer[j]) {\n          case 'G':\n            trie = trie.reduce(g);\n            prefix = \"G: \";\n            break;\n          case 'L':\n            trie = trie.reduce(l);\n            prefix = \"L: \";\n            break;\n          case 'E':\n            trie = trie.reduce(e);\n            prefix = \"E: \";\n            break;\n          case '2':\n            trie = trie.reduce(o2);\n            prefix = \"2: \";\n            break;\n          case '1':\n            trie = trie.reduce(o);\n            prefix = \"1: \";\n            break;\n          default:\n            continue;\n        }\n        trie.printInfo(System.out, prefix + \" \");\n      }\n      \n      DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n          new FileOutputStream(args[i] + \".out\")));\n      os.writeUTF(args[0]);\n      trie.store(os);\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  public static void main(java.lang.String[] args) throws Exception {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase(Locale.ROOT);\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      int stems = 0;\n      int words = 0;\n      \n      allocTrie();\n      \n      System.out.println(args[i]);\n      in = new LineNumberReader(new BufferedReader(new InputStreamReader(\n          new FileInputStream(args[i]), charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          if (storeorig) {\n            trie.add(stem, \"-a\");\n            words++;\n          }\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              trie.add(token, diff.exec(token, stem));\n              words++;\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n      in.close();\n      \n      Optimizer o = new Optimizer();\n      Optimizer2 o2 = new Optimizer2();\n      Lift l = new Lift(true);\n      Lift e = new Lift(false);\n      Gener g = new Gener();\n      \n      for (int j = 0; j < optimizer.length; j++) {\n        String prefix;\n        switch (optimizer[j]) {\n          case 'G':\n            trie = trie.reduce(g);\n            prefix = \"G: \";\n            break;\n          case 'L':\n            trie = trie.reduce(l);\n            prefix = \"L: \";\n            break;\n          case 'E':\n            trie = trie.reduce(e);\n            prefix = \"E: \";\n            break;\n          case '2':\n            trie = trie.reduce(o2);\n            prefix = \"2: \";\n            break;\n          case '1':\n            trie = trie.reduce(o);\n            prefix = \"1: \";\n            break;\n          default:\n            continue;\n        }\n        trie.printInfo(System.out, prefix + \" \");\n      }\n      \n      DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n          new FileOutputStream(args[i] + \".out\")));\n      os.writeUTF(args[0]);\n      trie.store(os);\n      os.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  public static void main(java.lang.String[] args) throws Exception {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase(Locale.ROOT);\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      int stems = 0;\n      int words = 0;\n      \n      allocTrie();\n      \n      System.out.println(args[i]);\n      in = new LineNumberReader(new BufferedReader(new InputStreamReader(\n          new FileInputStream(args[i]), charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          if (storeorig) {\n            trie.add(stem, \"-a\");\n            words++;\n          }\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              trie.add(token, diff.exec(token, stem));\n              words++;\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n      \n      Optimizer o = new Optimizer();\n      Optimizer2 o2 = new Optimizer2();\n      Lift l = new Lift(true);\n      Lift e = new Lift(false);\n      Gener g = new Gener();\n      \n      for (int j = 0; j < optimizer.length; j++) {\n        String prefix;\n        switch (optimizer[j]) {\n          case 'G':\n            trie = trie.reduce(g);\n            prefix = \"G: \";\n            break;\n          case 'L':\n            trie = trie.reduce(l);\n            prefix = \"L: \";\n            break;\n          case 'E':\n            trie = trie.reduce(e);\n            prefix = \"E: \";\n            break;\n          case '2':\n            trie = trie.reduce(o2);\n            prefix = \"2: \";\n            break;\n          case '1':\n            trie = trie.reduce(o);\n            prefix = \"1: \";\n            break;\n          default:\n            continue;\n        }\n        trie.printInfo(System.out, prefix + \" \");\n      }\n      \n      DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n          new FileOutputStream(args[i] + \".out\")));\n      os.writeUTF(args[0]);\n      trie.store(os);\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  public static void main(java.lang.String[] args) throws Exception {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase(Locale.ROOT);\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      int stems = 0;\n      int words = 0;\n      \n      allocTrie();\n      \n      System.out.println(args[i]);\n      in = new LineNumberReader(Files.newBufferedReader(Paths.get(args[i]), Charset.forName(charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          if (storeorig) {\n            trie.add(stem, \"-a\");\n            words++;\n          }\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              trie.add(token, diff.exec(token, stem));\n              words++;\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n      in.close();\n      \n      Optimizer o = new Optimizer();\n      Optimizer2 o2 = new Optimizer2();\n      Lift l = new Lift(true);\n      Lift e = new Lift(false);\n      Gener g = new Gener();\n      \n      for (int j = 0; j < optimizer.length; j++) {\n        String prefix;\n        switch (optimizer[j]) {\n          case 'G':\n            trie = trie.reduce(g);\n            prefix = \"G: \";\n            break;\n          case 'L':\n            trie = trie.reduce(l);\n            prefix = \"L: \";\n            break;\n          case 'E':\n            trie = trie.reduce(e);\n            prefix = \"E: \";\n            break;\n          case '2':\n            trie = trie.reduce(o2);\n            prefix = \"2: \";\n            break;\n          case '1':\n            trie = trie.reduce(o);\n            prefix = \"1: \";\n            break;\n          default:\n            continue;\n        }\n        trie.printInfo(System.out, prefix + \" \");\n      }\n      \n      DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n          Files.newOutputStream(Paths.get(args[i] + \".out\"))));\n      os.writeUTF(args[0]);\n      trie.store(os);\n      os.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  public static void main(java.lang.String[] args) throws Exception {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase(Locale.ROOT);\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      int stems = 0;\n      int words = 0;\n      \n      allocTrie();\n      \n      System.out.println(args[i]);\n      in = new LineNumberReader(new BufferedReader(new InputStreamReader(\n          new FileInputStream(args[i]), charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          if (storeorig) {\n            trie.add(stem, \"-a\");\n            words++;\n          }\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              trie.add(token, diff.exec(token, stem));\n              words++;\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n      in.close();\n      \n      Optimizer o = new Optimizer();\n      Optimizer2 o2 = new Optimizer2();\n      Lift l = new Lift(true);\n      Lift e = new Lift(false);\n      Gener g = new Gener();\n      \n      for (int j = 0; j < optimizer.length; j++) {\n        String prefix;\n        switch (optimizer[j]) {\n          case 'G':\n            trie = trie.reduce(g);\n            prefix = \"G: \";\n            break;\n          case 'L':\n            trie = trie.reduce(l);\n            prefix = \"L: \";\n            break;\n          case 'E':\n            trie = trie.reduce(e);\n            prefix = \"E: \";\n            break;\n          case '2':\n            trie = trie.reduce(o2);\n            prefix = \"2: \";\n            break;\n          case '1':\n            trie = trie.reduce(o);\n            prefix = \"1: \";\n            break;\n          default:\n            continue;\n        }\n        trie.printInfo(System.out, prefix + \" \");\n      }\n      \n      DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n          new FileOutputStream(args[i] + \".out\")));\n      os.writeUTF(args[0]);\n      trie.store(os);\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e6d6f6217dc04f29ee177d2837147dd47627787","date":1429543326,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(java.lang.String[] args) throws Exception {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase(Locale.ROOT);\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      int stems = 0;\n      int words = 0;\n      \n      allocTrie();\n      \n      System.out.println(args[i]);\n      in = new LineNumberReader(Files.newBufferedReader(Paths.get(args[i]), Charset.forName(charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          if (storeorig) {\n            trie.add(stem, \"-a\");\n            words++;\n          }\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              trie.add(token, diff.exec(token, stem));\n              words++;\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n      in.close();\n      \n      Optimizer o = new Optimizer();\n      Optimizer2 o2 = new Optimizer2();\n      Lift l = new Lift(true);\n      Lift e = new Lift(false);\n      Gener g = new Gener();\n      \n      for (int j = 0; j < optimizer.length; j++) {\n        String prefix;\n        switch (optimizer[j]) {\n          case 'G':\n            trie = trie.reduce(g);\n            prefix = \"G: \";\n            break;\n          case 'L':\n            trie = trie.reduce(l);\n            prefix = \"L: \";\n            break;\n          case 'E':\n            trie = trie.reduce(e);\n            prefix = \"E: \";\n            break;\n          case '2':\n            trie = trie.reduce(o2);\n            prefix = \"2: \";\n            break;\n          case '1':\n            trie = trie.reduce(o);\n            prefix = \"1: \";\n            break;\n          default:\n            continue;\n        }\n        trie.printInfo(System.out, prefix + \" \");\n      }\n      \n      DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n          Files.newOutputStream(Paths.get(args[i] + \".out\"))));\n      os.writeUTF(args[0]);\n      trie.store(os);\n      os.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  public static void main(java.lang.String[] args) throws Exception {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase(Locale.ROOT);\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      int stems = 0;\n      int words = 0;\n      \n      allocTrie();\n      \n      System.out.println(args[i]);\n      in = new LineNumberReader(Files.newBufferedReader(Paths.get(args[i]), Charset.forName(charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          if (storeorig) {\n            trie.add(stem, \"-a\");\n            words++;\n          }\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              trie.add(token, diff.exec(token, stem));\n              words++;\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n      in.close();\n      \n      Optimizer o = new Optimizer();\n      Optimizer2 o2 = new Optimizer2();\n      Lift l = new Lift(true);\n      Lift e = new Lift(false);\n      Gener g = new Gener();\n      \n      for (int j = 0; j < optimizer.length; j++) {\n        String prefix;\n        switch (optimizer[j]) {\n          case 'G':\n            trie = trie.reduce(g);\n            prefix = \"G: \";\n            break;\n          case 'L':\n            trie = trie.reduce(l);\n            prefix = \"L: \";\n            break;\n          case 'E':\n            trie = trie.reduce(e);\n            prefix = \"E: \";\n            break;\n          case '2':\n            trie = trie.reduce(o2);\n            prefix = \"2: \";\n            break;\n          case '1':\n            trie = trie.reduce(o);\n            prefix = \"1: \";\n            break;\n          default:\n            continue;\n        }\n        trie.printInfo(System.out, prefix + \" \");\n      }\n      \n      DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n          Files.newOutputStream(Paths.get(args[i] + \".out\"))));\n      os.writeUTF(args[0]);\n      trie.store(os);\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28289db63ed90bbf9506cc2dccfa1f45b3b0e501","date":1438284338,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(java.lang.String[] args) throws Exception {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase(Locale.ROOT);\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      \n      allocTrie();\n      \n      System.out.println(args[i]);\n      in = new LineNumberReader(Files.newBufferedReader(Paths.get(args[i]), Charset.forName(charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          if (storeorig) {\n            trie.add(stem, \"-a\");\n          }\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              trie.add(token, diff.exec(token, stem));\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n      in.close();\n      \n      Optimizer o = new Optimizer();\n      Optimizer2 o2 = new Optimizer2();\n      Lift l = new Lift(true);\n      Lift e = new Lift(false);\n      Gener g = new Gener();\n      \n      for (int j = 0; j < optimizer.length; j++) {\n        String prefix;\n        switch (optimizer[j]) {\n          case 'G':\n            trie = trie.reduce(g);\n            prefix = \"G: \";\n            break;\n          case 'L':\n            trie = trie.reduce(l);\n            prefix = \"L: \";\n            break;\n          case 'E':\n            trie = trie.reduce(e);\n            prefix = \"E: \";\n            break;\n          case '2':\n            trie = trie.reduce(o2);\n            prefix = \"2: \";\n            break;\n          case '1':\n            trie = trie.reduce(o);\n            prefix = \"1: \";\n            break;\n          default:\n            continue;\n        }\n        trie.printInfo(System.out, prefix + \" \");\n      }\n      \n      DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n          Files.newOutputStream(Paths.get(args[i] + \".out\"))));\n      os.writeUTF(args[0]);\n      trie.store(os);\n      os.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(java.lang.String[] args) throws Exception {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase(Locale.ROOT);\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      int stems = 0;\n      int words = 0;\n      \n      allocTrie();\n      \n      System.out.println(args[i]);\n      in = new LineNumberReader(Files.newBufferedReader(Paths.get(args[i]), Charset.forName(charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          if (storeorig) {\n            trie.add(stem, \"-a\");\n            words++;\n          }\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              trie.add(token, diff.exec(token, stem));\n              words++;\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n      in.close();\n      \n      Optimizer o = new Optimizer();\n      Optimizer2 o2 = new Optimizer2();\n      Lift l = new Lift(true);\n      Lift e = new Lift(false);\n      Gener g = new Gener();\n      \n      for (int j = 0; j < optimizer.length; j++) {\n        String prefix;\n        switch (optimizer[j]) {\n          case 'G':\n            trie = trie.reduce(g);\n            prefix = \"G: \";\n            break;\n          case 'L':\n            trie = trie.reduce(l);\n            prefix = \"L: \";\n            break;\n          case 'E':\n            trie = trie.reduce(e);\n            prefix = \"E: \";\n            break;\n          case '2':\n            trie = trie.reduce(o2);\n            prefix = \"2: \";\n            break;\n          case '1':\n            trie = trie.reduce(o);\n            prefix = \"1: \";\n            break;\n          default:\n            continue;\n        }\n        trie.printInfo(System.out, prefix + \" \");\n      }\n      \n      DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n          Files.newOutputStream(Paths.get(args[i] + \".out\"))));\n      os.writeUTF(args[0]);\n      trie.store(os);\n      os.close();\n    }\n  }\n\n","bugFix":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","67748b41458c73d49a48168362cc7f4c960a2542"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf30702df55f3384decc4b0e1033e8bc322e4c71","date":1465480090,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(java.lang.String[] args) throws Exception {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase(Locale.ROOT);\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      \n      allocTrie();\n      \n      System.out.println(args[i]);\n      try (LineNumberReader in = new LineNumberReader(Files.newBufferedReader(Paths.get(args[i]), Charset.forName(charset)))) {\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase(Locale.ROOT);\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            if (storeorig) {\n              trie.add(stem, \"-a\");\n            }\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                trie.add(token, diff.exec(token, stem));\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n      }\n      \n      Optimizer o = new Optimizer();\n      Optimizer2 o2 = new Optimizer2();\n      Lift l = new Lift(true);\n      Lift e = new Lift(false);\n      Gener g = new Gener();\n      \n      for (int j = 0; j < optimizer.length; j++) {\n        String prefix;\n        switch (optimizer[j]) {\n          case 'G':\n            trie = trie.reduce(g);\n            prefix = \"G: \";\n            break;\n          case 'L':\n            trie = trie.reduce(l);\n            prefix = \"L: \";\n            break;\n          case 'E':\n            trie = trie.reduce(e);\n            prefix = \"E: \";\n            break;\n          case '2':\n            trie = trie.reduce(o2);\n            prefix = \"2: \";\n            break;\n          case '1':\n            trie = trie.reduce(o);\n            prefix = \"1: \";\n            break;\n          default:\n            continue;\n        }\n        trie.printInfo(System.out, prefix + \" \");\n      }\n      \n      try (DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n          Files.newOutputStream(Paths.get(args[i] + \".out\"))))) {\n        os.writeUTF(args[0]);\n        trie.store(os);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(java.lang.String[] args) throws Exception {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase(Locale.ROOT);\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      \n      allocTrie();\n      \n      System.out.println(args[i]);\n      in = new LineNumberReader(Files.newBufferedReader(Paths.get(args[i]), Charset.forName(charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          if (storeorig) {\n            trie.add(stem, \"-a\");\n          }\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              trie.add(token, diff.exec(token, stem));\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n      in.close();\n      \n      Optimizer o = new Optimizer();\n      Optimizer2 o2 = new Optimizer2();\n      Lift l = new Lift(true);\n      Lift e = new Lift(false);\n      Gener g = new Gener();\n      \n      for (int j = 0; j < optimizer.length; j++) {\n        String prefix;\n        switch (optimizer[j]) {\n          case 'G':\n            trie = trie.reduce(g);\n            prefix = \"G: \";\n            break;\n          case 'L':\n            trie = trie.reduce(l);\n            prefix = \"L: \";\n            break;\n          case 'E':\n            trie = trie.reduce(e);\n            prefix = \"E: \";\n            break;\n          case '2':\n            trie = trie.reduce(o2);\n            prefix = \"2: \";\n            break;\n          case '1':\n            trie = trie.reduce(o);\n            prefix = \"1: \";\n            break;\n          default:\n            continue;\n        }\n        trie.printInfo(System.out, prefix + \" \");\n      }\n      \n      DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n          Files.newOutputStream(Paths.get(args[i] + \".out\"))));\n      os.writeUTF(args[0]);\n      trie.store(os);\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","pathOld":"lucene/analysis/stempel/src/java/org/egothor/stemmer/Compile#main(java.lang.String[]).mjava","sourceNew":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(java.lang.String[] args) throws Exception {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase(Locale.ROOT);\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      \n      allocTrie();\n      \n      System.out.println(args[i]);\n      try (LineNumberReader in = new LineNumberReader(Files.newBufferedReader(Paths.get(args[i]), Charset.forName(charset)))) {\n        for (String line = in.readLine(); line != null; line = in.readLine()) {\n          try {\n            line = line.toLowerCase(Locale.ROOT);\n            StringTokenizer st = new StringTokenizer(line);\n            String stem = st.nextToken();\n            if (storeorig) {\n              trie.add(stem, \"-a\");\n            }\n            while (st.hasMoreTokens()) {\n              String token = st.nextToken();\n              if (token.equals(stem) == false) {\n                trie.add(token, diff.exec(token, stem));\n              }\n            }\n          } catch (java.util.NoSuchElementException x) {\n            // no base token (stem) on a line\n          }\n        }\n      }\n      \n      Optimizer o = new Optimizer();\n      Optimizer2 o2 = new Optimizer2();\n      Lift l = new Lift(true);\n      Lift e = new Lift(false);\n      Gener g = new Gener();\n      \n      for (int j = 0; j < optimizer.length; j++) {\n        String prefix;\n        switch (optimizer[j]) {\n          case 'G':\n            trie = trie.reduce(g);\n            prefix = \"G: \";\n            break;\n          case 'L':\n            trie = trie.reduce(l);\n            prefix = \"L: \";\n            break;\n          case 'E':\n            trie = trie.reduce(e);\n            prefix = \"E: \";\n            break;\n          case '2':\n            trie = trie.reduce(o2);\n            prefix = \"2: \";\n            break;\n          case '1':\n            trie = trie.reduce(o);\n            prefix = \"1: \";\n            break;\n          default:\n            continue;\n        }\n        trie.printInfo(System.out, prefix + \" \");\n      }\n      \n      try (DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n          Files.newOutputStream(Paths.get(args[i] + \".out\"))))) {\n        os.writeUTF(args[0]);\n        trie.store(os);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point to the Compile application.\n   * <p>\n   * This program takes any number of arguments: the first is the name of the\n   * desired stemming algorithm to use (a list is available in the package\n   * description) , all of the rest should be the path or paths to a file or\n   * files containing a stemmer table to compile.\n   * \n   * @param args the command line arguments\n   */\n  @SuppressForbidden(reason = \"System.out required: command line tool\")\n  public static void main(java.lang.String[] args) throws Exception {\n    if (args.length < 1) {\n      return;\n    }\n    \n    args[0].toUpperCase(Locale.ROOT);\n    \n    backward = args[0].charAt(0) == '-';\n    int qq = (backward) ? 1 : 0;\n    boolean storeorig = false;\n    \n    if (args[0].charAt(qq) == '0') {\n      storeorig = true;\n      qq++;\n    }\n    \n    multi = args[0].charAt(qq) == 'M';\n    if (multi) {\n      qq++;\n    }\n    \n    String charset = System.getProperty(\"egothor.stemmer.charset\", \"UTF-8\");\n    \n    char optimizer[] = new char[args[0].length() - qq];\n    for (int i = 0; i < optimizer.length; i++) {\n      optimizer[i] = args[0].charAt(qq + i);\n    }\n    \n    for (int i = 1; i < args.length; i++) {\n      LineNumberReader in;\n      // System.out.println(\"[\" + args[i] + \"]\");\n      Diff diff = new Diff();\n      \n      allocTrie();\n      \n      System.out.println(args[i]);\n      in = new LineNumberReader(Files.newBufferedReader(Paths.get(args[i]), Charset.forName(charset)));\n      for (String line = in.readLine(); line != null; line = in.readLine()) {\n        try {\n          line = line.toLowerCase(Locale.ROOT);\n          StringTokenizer st = new StringTokenizer(line);\n          String stem = st.nextToken();\n          if (storeorig) {\n            trie.add(stem, \"-a\");\n          }\n          while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(stem) == false) {\n              trie.add(token, diff.exec(token, stem));\n            }\n          }\n        } catch (java.util.NoSuchElementException x) {\n          // no base token (stem) on a line\n        }\n      }\n      in.close();\n      \n      Optimizer o = new Optimizer();\n      Optimizer2 o2 = new Optimizer2();\n      Lift l = new Lift(true);\n      Lift e = new Lift(false);\n      Gener g = new Gener();\n      \n      for (int j = 0; j < optimizer.length; j++) {\n        String prefix;\n        switch (optimizer[j]) {\n          case 'G':\n            trie = trie.reduce(g);\n            prefix = \"G: \";\n            break;\n          case 'L':\n            trie = trie.reduce(l);\n            prefix = \"L: \";\n            break;\n          case 'E':\n            trie = trie.reduce(e);\n            prefix = \"E: \";\n            break;\n          case '2':\n            trie = trie.reduce(o2);\n            prefix = \"2: \";\n            break;\n          case '1':\n            trie = trie.reduce(o);\n            prefix = \"1: \";\n            break;\n          default:\n            continue;\n        }\n        trie.printInfo(System.out, prefix + \" \");\n      }\n      \n      DataOutputStream os = new DataOutputStream(new BufferedOutputStream(\n          Files.newOutputStream(Paths.get(args[i] + \".out\"))));\n      os.writeUTF(args[0]);\n      trie.store(os);\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","e3123be0c46a5ed1c1a40d102db7c24106694c35"],"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a":["2acf500f78aa12b92e371fd89c719291986b6b90"],"bf30702df55f3384decc4b0e1033e8bc322e4c71":["28289db63ed90bbf9506cc2dccfa1f45b3b0e501"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9c70cdb81dc660d90f9d0664dd91b473b7e66563"],"f4abec28b874149a7223e32cc7a01704c27790de":["e3123be0c46a5ed1c1a40d102db7c24106694c35"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["28289db63ed90bbf9506cc2dccfa1f45b3b0e501","bf30702df55f3384decc4b0e1033e8bc322e4c71"],"9c70cdb81dc660d90f9d0664dd91b473b7e66563":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"7e6d6f6217dc04f29ee177d2837147dd47627787":["f4abec28b874149a7223e32cc7a01704c27790de"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28289db63ed90bbf9506cc2dccfa1f45b3b0e501":["7e6d6f6217dc04f29ee177d2837147dd47627787"],"aba371508186796cc6151d8223a5b4e16d02e26e":["46d8ada1fff8d18cb197c38c7983225162599948","2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3123be0c46a5ed1c1a40d102db7c24106694c35":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bf30702df55f3384decc4b0e1033e8bc322e4c71"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"2f6156e2f0d1d529001873677c1cc6a22d6b9f9a":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","e3123be0c46a5ed1c1a40d102db7c24106694c35"],"bf30702df55f3384decc4b0e1033e8bc322e4c71":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2acf500f78aa12b92e371fd89c719291986b6b90":["2f6156e2f0d1d529001873677c1cc6a22d6b9f9a","46d8ada1fff8d18cb197c38c7983225162599948"],"f4abec28b874149a7223e32cc7a01704c27790de":["7e6d6f6217dc04f29ee177d2837147dd47627787"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"9c70cdb81dc660d90f9d0664dd91b473b7e66563":["2acf500f78aa12b92e371fd89c719291986b6b90"],"46d8ada1fff8d18cb197c38c7983225162599948":["aba371508186796cc6151d8223a5b4e16d02e26e"],"7e6d6f6217dc04f29ee177d2837147dd47627787":["28289db63ed90bbf9506cc2dccfa1f45b3b0e501"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2acf500f78aa12b92e371fd89c719291986b6b90","9c70cdb81dc660d90f9d0664dd91b473b7e66563","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"28289db63ed90bbf9506cc2dccfa1f45b3b0e501":["bf30702df55f3384decc4b0e1033e8bc322e4c71","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"e3123be0c46a5ed1c1a40d102db7c24106694c35":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}