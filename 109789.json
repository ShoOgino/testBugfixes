{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testStopPositons().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testStopPositons().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by TypeTokenFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 10; i < 20; i++) {\n      if (i % 3 != 0) {\n        sb.append(i).append(\" \");\n      } else {\n        String w = English.intToEnglish(i).trim();\n        sb.append(w).append(\" \");\n      }\n    }\n    log(sb.toString());\n    String stopTypes[] = new String[]{\"<NUM>\"};\n    Set<String> stopSet = asSet(stopTypes);\n\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    TypeTokenFilter typeTokenFilter = new TypeTokenFilter(true, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    testPositons(typeTokenFilter);\n\n    // without increments\n    reader = new StringReader(sb.toString());\n    typeTokenFilter = new TypeTokenFilter(false, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    testPositons(typeTokenFilter);\n\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by TypeTokenFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 10; i < 20; i++) {\n      if (i % 3 != 0) {\n        sb.append(i).append(\" \");\n      } else {\n        String w = English.intToEnglish(i).trim();\n        sb.append(w).append(\" \");\n      }\n    }\n    log(sb.toString());\n    String stopTypes[] = new String[]{\"<NUM>\"};\n    Set<String> stopSet = asSet(stopTypes);\n\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    TypeTokenFilter typeTokenFilter = new TypeTokenFilter(true, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    testPositons(typeTokenFilter);\n\n    // without increments\n    reader = new StringReader(sb.toString());\n    typeTokenFilter = new TypeTokenFilter(false, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    testPositons(typeTokenFilter);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testStopPositons().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by TypeTokenFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 10; i < 20; i++) {\n      if (i % 3 != 0) {\n        sb.append(i).append(\" \");\n      } else {\n        String w = English.intToEnglish(i).trim();\n        sb.append(w).append(\" \");\n      }\n    }\n    log(sb.toString());\n    String stopTypes[] = new String[]{\"<NUM>\"};\n    Set<String> stopSet = asSet(stopTypes);\n\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    TypeTokenFilter typeTokenFilter = new TypeTokenFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    testPositons(typeTokenFilter);\n\n    // without increments\n    reader = new StringReader(sb.toString());\n    typeTokenFilter = new TypeTokenFilter(Version.LUCENE_43, false, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    testPositons(typeTokenFilter);\n\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by TypeTokenFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 10; i < 20; i++) {\n      if (i % 3 != 0) {\n        sb.append(i).append(\" \");\n      } else {\n        String w = English.intToEnglish(i).trim();\n        sb.append(w).append(\" \");\n      }\n    }\n    log(sb.toString());\n    String stopTypes[] = new String[]{\"<NUM>\"};\n    Set<String> stopSet = asSet(stopTypes);\n\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    TypeTokenFilter typeTokenFilter = new TypeTokenFilter(true, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    testPositons(typeTokenFilter);\n\n    // without increments\n    reader = new StringReader(sb.toString());\n    typeTokenFilter = new TypeTokenFilter(false, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    testPositons(typeTokenFilter);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"192e49c0445803405b0bc0eebc8b758485480c21","date":1367699151,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testStopPositons().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by TypeTokenFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 10; i < 20; i++) {\n      if (i % 3 != 0) {\n        sb.append(i).append(\" \");\n      } else {\n        String w = English.intToEnglish(i).trim();\n        sb.append(w).append(\" \");\n      }\n    }\n    log(sb.toString());\n    String stopTypes[] = new String[]{\"<NUM>\"};\n    Set<String> stopSet = asSet(stopTypes);\n\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    TypeTokenFilter typeTokenFilter = new TypeTokenFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    testPositons(typeTokenFilter);\n\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by TypeTokenFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 10; i < 20; i++) {\n      if (i % 3 != 0) {\n        sb.append(i).append(\" \");\n      } else {\n        String w = English.intToEnglish(i).trim();\n        sb.append(w).append(\" \");\n      }\n    }\n    log(sb.toString());\n    String stopTypes[] = new String[]{\"<NUM>\"};\n    Set<String> stopSet = asSet(stopTypes);\n\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    TypeTokenFilter typeTokenFilter = new TypeTokenFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    testPositons(typeTokenFilter);\n\n    // without increments\n    reader = new StringReader(sb.toString());\n    typeTokenFilter = new TypeTokenFilter(Version.LUCENE_43, false, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    testPositons(typeTokenFilter);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testStopPositons().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by TypeTokenFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 10; i < 20; i++) {\n      if (i % 3 != 0) {\n        sb.append(i).append(\" \");\n      } else {\n        String w = English.intToEnglish(i).trim();\n        sb.append(w).append(\" \");\n      }\n    }\n    log(sb.toString());\n    String stopTypes[] = new String[]{\"<NUM>\"};\n    Set<String> stopSet = asSet(stopTypes);\n\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final StandardTokenizer input = new StandardTokenizer(TEST_VERSION_CURRENT);\n    input.setReader(reader);\n    TypeTokenFilter typeTokenFilter = new TypeTokenFilter(TEST_VERSION_CURRENT, input, stopSet);\n    testPositons(typeTokenFilter);\n\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by TypeTokenFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 10; i < 20; i++) {\n      if (i % 3 != 0) {\n        sb.append(i).append(\" \");\n      } else {\n        String w = English.intToEnglish(i).trim();\n        sb.append(w).append(\" \");\n      }\n    }\n    log(sb.toString());\n    String stopTypes[] = new String[]{\"<NUM>\"};\n    Set<String> stopSet = asSet(stopTypes);\n\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    TypeTokenFilter typeTokenFilter = new TypeTokenFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    testPositons(typeTokenFilter);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testStopPositons().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by TypeTokenFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 10; i < 20; i++) {\n      if (i % 3 != 0) {\n        sb.append(i).append(\" \");\n      } else {\n        String w = English.intToEnglish(i).trim();\n        sb.append(w).append(\" \");\n      }\n    }\n    log(sb.toString());\n    String stopTypes[] = new String[]{\"<NUM>\"};\n    Set<String> stopSet = asSet(stopTypes);\n\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final StandardTokenizer input = new StandardTokenizer();\n    input.setReader(reader);\n    TypeTokenFilter typeTokenFilter = new TypeTokenFilter(input, stopSet);\n    testPositons(typeTokenFilter);\n\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by TypeTokenFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 10; i < 20; i++) {\n      if (i % 3 != 0) {\n        sb.append(i).append(\" \");\n      } else {\n        String w = English.intToEnglish(i).trim();\n        sb.append(w).append(\" \");\n      }\n    }\n    log(sb.toString());\n    String stopTypes[] = new String[]{\"<NUM>\"};\n    Set<String> stopSet = asSet(stopTypes);\n\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final StandardTokenizer input = new StandardTokenizer(TEST_VERSION_CURRENT);\n    input.setReader(reader);\n    TypeTokenFilter typeTokenFilter = new TypeTokenFilter(TEST_VERSION_CURRENT, input, stopSet);\n    testPositons(typeTokenFilter);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testStopPositons().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by TypeTokenFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 10; i < 20; i++) {\n      if (i % 3 != 0) {\n        sb.append(i).append(\" \");\n      } else {\n        String w = English.intToEnglish(i).trim();\n        sb.append(w).append(\" \");\n      }\n    }\n    log(sb.toString());\n    String stopTypes[] = new String[]{\"<NUM>\"};\n    Set<String> stopSet = asSet(stopTypes);\n\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final StandardTokenizer input = new StandardTokenizer(TEST_VERSION_CURRENT);\n    input.setReader(reader);\n    TypeTokenFilter typeTokenFilter = new TypeTokenFilter(TEST_VERSION_CURRENT, input, stopSet);\n    testPositons(typeTokenFilter);\n\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by TypeTokenFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 10; i < 20; i++) {\n      if (i % 3 != 0) {\n        sb.append(i).append(\" \");\n      } else {\n        String w = English.intToEnglish(i).trim();\n        sb.append(w).append(\" \");\n      }\n    }\n    log(sb.toString());\n    String stopTypes[] = new String[]{\"<NUM>\"};\n    Set<String> stopSet = asSet(stopTypes);\n\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final StandardTokenizer input = new StandardTokenizer();\n    input.setReader(reader);\n    TypeTokenFilter typeTokenFilter = new TypeTokenFilter(input, stopSet);\n    testPositons(typeTokenFilter);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testStopPositons().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestTypeTokenFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by TypeTokenFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 10; i < 20; i++) {\n      if (i % 3 != 0) {\n        sb.append(i).append(\" \");\n      } else {\n        String w = English.intToEnglish(i).trim();\n        sb.append(w).append(\" \");\n      }\n    }\n    log(sb.toString());\n    String stopTypes[] = new String[]{\"<NUM>\"};\n    Set<String> stopSet = asSet(stopTypes);\n\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final StandardTokenizer input = new StandardTokenizer();\n    input.setReader(reader);\n    TypeTokenFilter typeTokenFilter = new TypeTokenFilter(input, stopSet);\n    testPositons(typeTokenFilter);\n\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by TypeTokenFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 10; i < 20; i++) {\n      if (i % 3 != 0) {\n        sb.append(i).append(\" \");\n      } else {\n        String w = English.intToEnglish(i).trim();\n        sb.append(w).append(\" \");\n      }\n    }\n    log(sb.toString());\n    String stopTypes[] = new String[]{\"<NUM>\"};\n    Set<String> stopSet = asSet(stopTypes);\n\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final StandardTokenizer input = new StandardTokenizer(TEST_VERSION_CURRENT);\n    input.setReader(reader);\n    TypeTokenFilter typeTokenFilter = new TypeTokenFilter(TEST_VERSION_CURRENT, input, stopSet);\n    testPositons(typeTokenFilter);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"192e49c0445803405b0bc0eebc8b758485480c21":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["192e49c0445803405b0bc0eebc8b758485480c21"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"192e49c0445803405b0bc0eebc8b758485480c21":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["192e49c0445803405b0bc0eebc8b758485480c21"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}