{"path":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTermsFromBooleanQuery(BooleanQuery,float,HashSet[WeightedTerm],boolean,String).mjava","commits":[{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTermsFromBooleanQuery(BooleanQuery,float,HashSet[WeightedTerm],boolean,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTermsFromBooleanQuery(BooleanQuery,HashSet[WeightedTerm],boolean,String).mjava","sourceNew":"  /**\n   * extractTerms is currently the only query-independent means of introspecting queries but it only reveals\n   * a list of terms for that query - not the boosts each individual term in that query may or may not have.\n   * \"Container\" queries such as BooleanQuery should be unwrapped to get at the boost info held\n   * in each child element.\n   * Some discussion around this topic here:\n   * http://www.gossamer-threads.com/lists/lucene/java-dev/34208?search_string=introspection;#34208\n   * Unfortunately there seemed to be limited interest in requiring all Query objects to implement\n   * something common which would allow access to child queries so what follows here are query-specific\n   * implementations for accessing embedded query elements.\n   */\n  private static final void getTermsFromBooleanQuery(BooleanQuery query, float boost, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName)\n  {\n    for (BooleanClause clause : query)\n    {\n      if (prohibited || clause.getOccur()!=BooleanClause.Occur.MUST_NOT)\n        getTerms(clause.getQuery(), boost, terms, prohibited, fieldName);\n    }\n  }\n\n","sourceOld":"  /**\n   * extractTerms is currently the only query-independent means of introspecting queries but it only reveals\n   * a list of terms for that query - not the boosts each individual term in that query may or may not have.\n   * \"Container\" queries such as BooleanQuery should be unwrapped to get at the boost info held\n   * in each child element.\n   * Some discussion around this topic here:\n   * http://www.gossamer-threads.com/lists/lucene/java-dev/34208?search_string=introspection;#34208\n   * Unfortunately there seemed to be limited interest in requiring all Query objects to implement\n   * something common which would allow access to child queries so what follows here are query-specific\n   * implementations for accessing embedded query elements.\n   */\n  private static final void getTermsFromBooleanQuery(BooleanQuery query, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName)\n  {\n    for (BooleanClause clause : query)\n    {\n      if (prohibited || clause.getOccur()!=BooleanClause.Occur.MUST_NOT)\n        getTerms(clause.getQuery(), terms, prohibited, fieldName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor#getTermsFromBooleanQuery(BooleanQuery,float,HashSet[WeightedTerm],boolean,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * extractTerms is currently the only query-independent means of introspecting queries but it only reveals\n   * a list of terms for that query - not the boosts each individual term in that query may or may not have.\n   * \"Container\" queries such as BooleanQuery should be unwrapped to get at the boost info held\n   * in each child element.\n   * Some discussion around this topic here:\n   * http://www.gossamer-threads.com/lists/lucene/java-dev/34208?search_string=introspection;#34208\n   * Unfortunately there seemed to be limited interest in requiring all Query objects to implement\n   * something common which would allow access to child queries so what follows here are query-specific\n   * implementations for accessing embedded query elements.\n   */\n  private static final void getTermsFromBooleanQuery(BooleanQuery query, float boost, HashSet<WeightedTerm> terms, boolean prohibited, String fieldName)\n  {\n    for (BooleanClause clause : query)\n    {\n      if (prohibited || clause.getOccur()!=BooleanClause.Occur.MUST_NOT)\n        getTerms(clause.getQuery(), boost, terms, prohibited, fieldName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}