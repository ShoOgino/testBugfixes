{"path":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleDeleteMap(int).mjava","commits":[{"id":"baa723a66f51909657c89c07a455b3c15da9f761","date":1338908663,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleDeleteMap(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#parseDelete().mjava","sourceNew":"    void handleDeleteMap(int ev) throws IOException {\n      assert ev == JSONParser.OBJECT_START;\n\n      DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n      cmd.commitWithin = commitWithin;\n\n      while( true ) {\n        ev = parser.nextEvent();\n        if( ev == JSONParser.STRING ) {\n          String key = parser.getString();\n          if( parser.wasKey() ) {\n            if( \"id\".equals( key ) ) {\n              cmd.setId(parser.getString());\n            }\n            else if( \"query\".equals(key) ) {\n              cmd.setQuery(parser.getString());\n            }\n            else if( \"commitWithin\".equals(key) ) {\n              cmd.commitWithin = Integer.parseInt(parser.getString());\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n            }\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"invalid string: \" + key\n                    +\" at [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else if( ev == JSONParser.OBJECT_END ) {\n          if( cmd.getId() == null && cmd.getQuery() == null ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n          }\n\n          processor.processDelete(cmd);\n          return;\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Got: \"+JSONParser.getEventString( ev  )\n                  +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n    }\n\n","sourceOld":"    DeleteUpdateCommand parseDelete() throws IOException {\n      assertNextEvent( JSONParser.OBJECT_START );\n  \n      DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n      cmd.commitWithin = commitWithin;\n  \n      while( true ) {\n        int ev = parser.nextEvent();\n        if( ev == JSONParser.STRING ) {\n          String key = parser.getString();\n          if( parser.wasKey() ) {\n            if( \"id\".equals( key ) ) {\n              cmd.setId(parser.getString());\n            }\n            else if( \"query\".equals(key) ) {\n              cmd.setQuery(parser.getString());\n            }\n            else if( \"commitWithin\".equals(key) ) { \n              cmd.commitWithin = Integer.parseInt(parser.getString());\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n            }\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"invalid string: \" + key \n                +\" at [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else if( ev == JSONParser.OBJECT_END ) {\n          if( cmd.getId() == null && cmd.getQuery() == null ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n          }\n          return cmd;\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Got: \"+JSONParser.getEventString( ev  )\n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dc2dbc2e49f222b72cdfc503db799a3738fb4f2","date":1338919199,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleDeleteMap(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleDeleteMap(int).mjava","sourceNew":"    void handleDeleteMap(int ev) throws IOException {\n      assert ev == JSONParser.OBJECT_START;\n\n      DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n      cmd.commitWithin = commitWithin;\n\n      while( true ) {\n        ev = parser.nextEvent();\n        if( ev == JSONParser.STRING ) {\n          String key = parser.getString();\n          if( parser.wasKey() ) {\n            if( \"id\".equals( key ) ) {\n              cmd.setId(getString(parser.nextEvent()));\n            } else if( \"query\".equals(key) ) {\n              cmd.setQuery(parser.getString());\n            } else if( \"commitWithin\".equals(key) ) {\n              cmd.commitWithin = (int)parser.getLong();\n            } else if( \"_version_\".equals(key) ) {\n              cmd.setVersion(parser.getLong());\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n            }\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"invalid string: \" + key\n                    +\" at [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else if( ev == JSONParser.OBJECT_END ) {\n          if( cmd.getId() == null && cmd.getQuery() == null ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n          }\n\n          processor.processDelete(cmd);\n          return;\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Got: \"+JSONParser.getEventString( ev  )\n                  +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n    }\n\n","sourceOld":"    void handleDeleteMap(int ev) throws IOException {\n      assert ev == JSONParser.OBJECT_START;\n\n      DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n      cmd.commitWithin = commitWithin;\n\n      while( true ) {\n        ev = parser.nextEvent();\n        if( ev == JSONParser.STRING ) {\n          String key = parser.getString();\n          if( parser.wasKey() ) {\n            if( \"id\".equals( key ) ) {\n              cmd.setId(parser.getString());\n            }\n            else if( \"query\".equals(key) ) {\n              cmd.setQuery(parser.getString());\n            }\n            else if( \"commitWithin\".equals(key) ) {\n              cmd.commitWithin = Integer.parseInt(parser.getString());\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n            }\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"invalid string: \" + key\n                    +\" at [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else if( ev == JSONParser.OBJECT_END ) {\n          if( cmd.getId() == null && cmd.getQuery() == null ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n          }\n\n          processor.processDelete(cmd);\n          return;\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Got: \"+JSONParser.getEventString( ev  )\n                  +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"747dd71fefcbc7142661c25334b74c518fef4d81","date":1423504825,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleDeleteMap(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleDeleteMap(int).mjava","sourceNew":"    void handleDeleteMap(int ev) throws IOException {\n      assert ev == JSONParser.OBJECT_START;\n\n      DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n      cmd.commitWithin = commitWithin;\n\n      while( true ) {\n        ev = parser.nextEvent();\n        if( ev == JSONParser.STRING ) {\n          String key = parser.getString();\n          if( parser.wasKey() ) {\n            if( \"id\".equals( key ) ) {\n              cmd.setId(getString(parser.nextEvent()));\n            } else if( \"query\".equals(key) ) {\n              cmd.setQuery(parser.getString());\n            } else if( \"commitWithin\".equals(key) ) {\n              cmd.commitWithin = (int)parser.getLong();\n            } else if( \"_version_\".equals(key) ) {\n              cmd.setVersion(parser.getLong());\n            } else if (\"_route_\".equals(key)) {\n              cmd.setRoute(parser.getString());\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n            }\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"invalid string: \" + key\n                    +\" at [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else if( ev == JSONParser.OBJECT_END ) {\n          if( cmd.getId() == null && cmd.getQuery() == null ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n          }\n\n          processor.processDelete(cmd);\n          return;\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Got: \"+JSONParser.getEventString( ev  )\n                  +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n    }\n\n","sourceOld":"    void handleDeleteMap(int ev) throws IOException {\n      assert ev == JSONParser.OBJECT_START;\n\n      DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n      cmd.commitWithin = commitWithin;\n\n      while( true ) {\n        ev = parser.nextEvent();\n        if( ev == JSONParser.STRING ) {\n          String key = parser.getString();\n          if( parser.wasKey() ) {\n            if( \"id\".equals( key ) ) {\n              cmd.setId(getString(parser.nextEvent()));\n            } else if( \"query\".equals(key) ) {\n              cmd.setQuery(parser.getString());\n            } else if( \"commitWithin\".equals(key) ) {\n              cmd.commitWithin = (int)parser.getLong();\n            } else if( \"_version_\".equals(key) ) {\n              cmd.setVersion(parser.getLong());\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n            }\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"invalid string: \" + key\n                    +\" at [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else if( ev == JSONParser.OBJECT_END ) {\n          if( cmd.getId() == null && cmd.getQuery() == null ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n          }\n\n          processor.processDelete(cmd);\n          return;\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Got: \"+JSONParser.getEventString( ev  )\n                  +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a63f62e9f506b7a15c76fddc8ad5f22112070c2","date":1423521689,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleDeleteMap(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleDeleteMap(int).mjava","sourceNew":"    void handleDeleteMap(int ev) throws IOException {\n      assert ev == JSONParser.OBJECT_START;\n\n      DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n      cmd.commitWithin = commitWithin;\n\n      while( true ) {\n        ev = parser.nextEvent();\n        if( ev == JSONParser.STRING ) {\n          String key = parser.getString();\n          if( parser.wasKey() ) {\n            if( \"id\".equals( key ) ) {\n              cmd.setId(getString(parser.nextEvent()));\n            } else if( \"query\".equals(key) ) {\n              cmd.setQuery(parser.getString());\n            } else if( \"commitWithin\".equals(key) ) {\n              cmd.commitWithin = (int)parser.getLong();\n            } else if( \"_version_\".equals(key) ) {\n              cmd.setVersion(parser.getLong());\n            } else if (\"_route_\".equals(key)) {\n              cmd.setRoute(parser.getString());\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key '\"+key+\"' at [\"+parser.getPosition()+\"]\" );\n            }\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"invalid string: \" + key\n                    +\" at [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else if( ev == JSONParser.OBJECT_END ) {\n          if( cmd.getId() == null && cmd.getQuery() == null ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete at [\"+parser.getPosition()+\"]\" );\n          }\n\n          processor.processDelete(cmd);\n          return;\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Got: \"+JSONParser.getEventString( ev  )\n                  +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n    }\n\n","sourceOld":"    void handleDeleteMap(int ev) throws IOException {\n      assert ev == JSONParser.OBJECT_START;\n\n      DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n      cmd.commitWithin = commitWithin;\n\n      while( true ) {\n        ev = parser.nextEvent();\n        if( ev == JSONParser.STRING ) {\n          String key = parser.getString();\n          if( parser.wasKey() ) {\n            if( \"id\".equals( key ) ) {\n              cmd.setId(getString(parser.nextEvent()));\n            } else if( \"query\".equals(key) ) {\n              cmd.setQuery(parser.getString());\n            } else if( \"commitWithin\".equals(key) ) {\n              cmd.commitWithin = (int)parser.getLong();\n            } else if( \"_version_\".equals(key) ) {\n              cmd.setVersion(parser.getLong());\n            } else if (\"_route_\".equals(key)) {\n              cmd.setRoute(parser.getString());\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n            }\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"invalid string: \" + key\n                    +\" at [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else if( ev == JSONParser.OBJECT_END ) {\n          if( cmd.getId() == null && cmd.getQuery() == null ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n          }\n\n          processor.processDelete(cmd);\n          return;\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Got: \"+JSONParser.getEventString( ev  )\n                  +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f5f8e831e266692b649e39dad7a64f525aa6d21","date":1427506910,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleDeleteMap(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleDeleteMap(int).mjava","sourceNew":"    void handleDeleteMap(int ev) throws IOException {\n      assert ev == JSONParser.OBJECT_START;\n\n      DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n      cmd.commitWithin = commitWithin;\n\n      while (true) {\n        ev = parser.nextEvent();\n        if (ev == JSONParser.STRING) {\n          String key = parser.getString();\n          if (parser.wasKey()) {\n            if (\"id\".equals(key)) {\n              cmd.setId(getString(parser.nextEvent()));\n            } else if (\"query\".equals(key)) {\n              cmd.setQuery(parser.getString());\n            } else if (\"commitWithin\".equals(key)) {\n              cmd.commitWithin = (int) parser.getLong();\n            } else if (\"_version_\".equals(key)) {\n              cmd.setVersion(parser.getLong());\n            } else if (\"_route_\".equals(key)) {\n              cmd.setRoute(parser.getString());\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key '\" + key + \"' at [\" + parser.getPosition() + \"]\");\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"invalid string: \" + key\n                    + \" at [\" + parser.getPosition() + \"]\");\n          }\n        } else if (ev == JSONParser.OBJECT_END) {\n          if (cmd.getId() == null && cmd.getQuery() == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete at [\" + parser.getPosition() + \"]\");\n          }\n\n          processor.processDelete(cmd);\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Got: \" + JSONParser.getEventString(ev)\n                  + \" at [\" + parser.getPosition() + \"]\");\n        }\n      }\n    }\n\n","sourceOld":"    void handleDeleteMap(int ev) throws IOException {\n      assert ev == JSONParser.OBJECT_START;\n\n      DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n      cmd.commitWithin = commitWithin;\n\n      while( true ) {\n        ev = parser.nextEvent();\n        if( ev == JSONParser.STRING ) {\n          String key = parser.getString();\n          if( parser.wasKey() ) {\n            if( \"id\".equals( key ) ) {\n              cmd.setId(getString(parser.nextEvent()));\n            } else if( \"query\".equals(key) ) {\n              cmd.setQuery(parser.getString());\n            } else if( \"commitWithin\".equals(key) ) {\n              cmd.commitWithin = (int)parser.getLong();\n            } else if( \"_version_\".equals(key) ) {\n              cmd.setVersion(parser.getLong());\n            } else if (\"_route_\".equals(key)) {\n              cmd.setRoute(parser.getString());\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key '\"+key+\"' at [\"+parser.getPosition()+\"]\" );\n            }\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"invalid string: \" + key\n                    +\" at [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else if( ev == JSONParser.OBJECT_END ) {\n          if( cmd.getId() == null && cmd.getQuery() == null ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete at [\"+parser.getPosition()+\"]\" );\n          }\n\n          processor.processDelete(cmd);\n          return;\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Got: \"+JSONParser.getEventString( ev  )\n                  +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleDeleteMap(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleDeleteMap(int).mjava","sourceNew":"    void handleDeleteMap(int ev) throws IOException {\n      assert ev == JSONParser.OBJECT_START;\n\n      DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n      cmd.commitWithin = commitWithin;\n\n      while (true) {\n        ev = parser.nextEvent();\n        if (ev == JSONParser.STRING) {\n          String key = parser.getString();\n          if (parser.wasKey()) {\n            if (\"id\".equals(key)) {\n              cmd.setId(getString(parser.nextEvent()));\n            } else if (\"query\".equals(key)) {\n              cmd.setQuery(parser.getString());\n            } else if (\"commitWithin\".equals(key)) {\n              cmd.commitWithin = (int) parser.getLong();\n            } else if (\"_version_\".equals(key)) {\n              cmd.setVersion(parser.getLong());\n            } else if (\"_route_\".equals(key)) {\n              cmd.setRoute(parser.getString());\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key '\" + key + \"' at [\" + parser.getPosition() + \"]\");\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"invalid string: \" + key\n                    + \" at [\" + parser.getPosition() + \"]\");\n          }\n        } else if (ev == JSONParser.OBJECT_END) {\n          if (cmd.getId() == null && cmd.getQuery() == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete at [\" + parser.getPosition() + \"]\");\n          }\n\n          processor.processDelete(cmd);\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Got: \" + JSONParser.getEventString(ev)\n                  + \" at [\" + parser.getPosition() + \"]\");\n        }\n      }\n    }\n\n","sourceOld":"    void handleDeleteMap(int ev) throws IOException {\n      assert ev == JSONParser.OBJECT_START;\n\n      DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n      cmd.commitWithin = commitWithin;\n\n      while( true ) {\n        ev = parser.nextEvent();\n        if( ev == JSONParser.STRING ) {\n          String key = parser.getString();\n          if( parser.wasKey() ) {\n            if( \"id\".equals( key ) ) {\n              cmd.setId(getString(parser.nextEvent()));\n            } else if( \"query\".equals(key) ) {\n              cmd.setQuery(parser.getString());\n            } else if( \"commitWithin\".equals(key) ) {\n              cmd.commitWithin = (int)parser.getLong();\n            } else if( \"_version_\".equals(key) ) {\n              cmd.setVersion(parser.getLong());\n            } else if (\"_route_\".equals(key)) {\n              cmd.setRoute(parser.getString());\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key '\"+key+\"' at [\"+parser.getPosition()+\"]\" );\n            }\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"invalid string: \" + key\n                    +\" at [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else if( ev == JSONParser.OBJECT_END ) {\n          if( cmd.getId() == null && cmd.getQuery() == null ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete at [\"+parser.getPosition()+\"]\" );\n          }\n\n          processor.processDelete(cmd);\n          return;\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Got: \"+JSONParser.getEventString( ev  )\n                  +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleDeleteMap(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleDeleteMap(int).mjava","sourceNew":"    void handleDeleteMap(int ev) throws IOException {\n      assert ev == JSONParser.OBJECT_START;\n\n      DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n      cmd.commitWithin = commitWithin;\n\n      while (true) {\n        ev = parser.nextEvent();\n        if (ev == JSONParser.STRING) {\n          String key = parser.getString();\n          if (parser.wasKey()) {\n            if (ID.equals(key)) {\n              cmd.setId(getString(parser.nextEvent()));\n            } else if (\"query\".equals(key)) {\n              cmd.setQuery(parser.getString());\n            } else if (\"commitWithin\".equals(key)) {\n              cmd.commitWithin = (int) parser.getLong();\n            } else if (VERSION_FIELD.equals(key)) {\n              cmd.setVersion(parser.getLong());\n            } else if (_ROUTE_.equals(key)) {\n              cmd.setRoute(parser.getString());\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key '\" + key + \"' at [\" + parser.getPosition() + \"]\");\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"invalid string: \" + key\n                    + \" at [\" + parser.getPosition() + \"]\");\n          }\n        } else if (ev == JSONParser.OBJECT_END) {\n          if (cmd.getId() == null && cmd.getQuery() == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete at [\" + parser.getPosition() + \"]\");\n          }\n\n          processor.processDelete(cmd);\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Got: \" + JSONParser.getEventString(ev)\n                  + \" at [\" + parser.getPosition() + \"]\");\n        }\n      }\n    }\n\n","sourceOld":"    void handleDeleteMap(int ev) throws IOException {\n      assert ev == JSONParser.OBJECT_START;\n\n      DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n      cmd.commitWithin = commitWithin;\n\n      while (true) {\n        ev = parser.nextEvent();\n        if (ev == JSONParser.STRING) {\n          String key = parser.getString();\n          if (parser.wasKey()) {\n            if (\"id\".equals(key)) {\n              cmd.setId(getString(parser.nextEvent()));\n            } else if (\"query\".equals(key)) {\n              cmd.setQuery(parser.getString());\n            } else if (\"commitWithin\".equals(key)) {\n              cmd.commitWithin = (int) parser.getLong();\n            } else if (\"_version_\".equals(key)) {\n              cmd.setVersion(parser.getLong());\n            } else if (\"_route_\".equals(key)) {\n              cmd.setRoute(parser.getString());\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key '\" + key + \"' at [\" + parser.getPosition() + \"]\");\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"invalid string: \" + key\n                    + \" at [\" + parser.getPosition() + \"]\");\n          }\n        } else if (ev == JSONParser.OBJECT_END) {\n          if (cmd.getId() == null && cmd.getQuery() == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete at [\" + parser.getPosition() + \"]\");\n          }\n\n          processor.processDelete(cmd);\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Got: \" + JSONParser.getEventString(ev)\n                  + \" at [\" + parser.getPosition() + \"]\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleDeleteMap(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleDeleteMap(int).mjava","sourceNew":"    void handleDeleteMap(int ev) throws IOException {\n      assert ev == JSONParser.OBJECT_START;\n\n      DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n      cmd.commitWithin = commitWithin;\n\n      while (true) {\n        ev = parser.nextEvent();\n        if (ev == JSONParser.STRING) {\n          String key = parser.getString();\n          if (parser.wasKey()) {\n            if (ID.equals(key)) {\n              cmd.setId(getString(parser.nextEvent()));\n            } else if (\"query\".equals(key)) {\n              cmd.setQuery(parser.getString());\n            } else if (\"commitWithin\".equals(key)) {\n              cmd.commitWithin = (int) parser.getLong();\n            } else if (VERSION_FIELD.equals(key)) {\n              cmd.setVersion(parser.getLong());\n            } else if (_ROUTE_.equals(key)) {\n              cmd.setRoute(parser.getString());\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key '\" + key + \"' at [\" + parser.getPosition() + \"]\");\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"invalid string: \" + key\n                    + \" at [\" + parser.getPosition() + \"]\");\n          }\n        } else if (ev == JSONParser.OBJECT_END) {\n          if (cmd.getId() == null && cmd.getQuery() == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete at [\" + parser.getPosition() + \"]\");\n          }\n\n          processor.processDelete(cmd);\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Got: \" + JSONParser.getEventString(ev)\n                  + \" at [\" + parser.getPosition() + \"]\");\n        }\n      }\n    }\n\n","sourceOld":"    void handleDeleteMap(int ev) throws IOException {\n      assert ev == JSONParser.OBJECT_START;\n\n      DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n      cmd.commitWithin = commitWithin;\n\n      while (true) {\n        ev = parser.nextEvent();\n        if (ev == JSONParser.STRING) {\n          String key = parser.getString();\n          if (parser.wasKey()) {\n            if (\"id\".equals(key)) {\n              cmd.setId(getString(parser.nextEvent()));\n            } else if (\"query\".equals(key)) {\n              cmd.setQuery(parser.getString());\n            } else if (\"commitWithin\".equals(key)) {\n              cmd.commitWithin = (int) parser.getLong();\n            } else if (\"_version_\".equals(key)) {\n              cmd.setVersion(parser.getLong());\n            } else if (\"_route_\".equals(key)) {\n              cmd.setRoute(parser.getString());\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key '\" + key + \"' at [\" + parser.getPosition() + \"]\");\n            }\n          } else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"invalid string: \" + key\n                    + \" at [\" + parser.getPosition() + \"]\");\n          }\n        } else if (ev == JSONParser.OBJECT_END) {\n          if (cmd.getId() == null && cmd.getQuery() == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete at [\" + parser.getPosition() + \"]\");\n          }\n\n          processor.processDelete(cmd);\n          return;\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Got: \" + JSONParser.getEventString(ev)\n                  + \" at [\" + parser.getPosition() + \"]\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":["6f5f8e831e266692b649e39dad7a64f525aa6d21"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["2a63f62e9f506b7a15c76fddc8ad5f22112070c2","6f5f8e831e266692b649e39dad7a64f525aa6d21"],"5dc2dbc2e49f222b72cdfc503db799a3738fb4f2":["baa723a66f51909657c89c07a455b3c15da9f761"],"6f5f8e831e266692b649e39dad7a64f525aa6d21":["2a63f62e9f506b7a15c76fddc8ad5f22112070c2"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["6f5f8e831e266692b649e39dad7a64f525aa6d21"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"baa723a66f51909657c89c07a455b3c15da9f761":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a63f62e9f506b7a15c76fddc8ad5f22112070c2":["747dd71fefcbc7142661c25334b74c518fef4d81"],"747dd71fefcbc7142661c25334b74c518fef4d81":["5dc2dbc2e49f222b72cdfc503db799a3738fb4f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6d2dadc1f5ca8703d8659f4964961f9967935d75"]},"commit2Childs":{"e5fa6615014cd2288fe930f8c8bb726f9504961d":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"5dc2dbc2e49f222b72cdfc503db799a3738fb4f2":["747dd71fefcbc7142661c25334b74c518fef4d81"],"6f5f8e831e266692b649e39dad7a64f525aa6d21":["e5fa6615014cd2288fe930f8c8bb726f9504961d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6d2dadc1f5ca8703d8659f4964961f9967935d75"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["baa723a66f51909657c89c07a455b3c15da9f761"],"baa723a66f51909657c89c07a455b3c15da9f761":["5dc2dbc2e49f222b72cdfc503db799a3738fb4f2"],"2a63f62e9f506b7a15c76fddc8ad5f22112070c2":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6f5f8e831e266692b649e39dad7a64f525aa6d21"],"747dd71fefcbc7142661c25334b74c518fef4d81":["2a63f62e9f506b7a15c76fddc8ad5f22112070c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5fa6615014cd2288fe930f8c8bb726f9504961d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}