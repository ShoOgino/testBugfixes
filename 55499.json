{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#collect(int).mjava","commits":[{"id":"1fa60a501961bce2ff07ee1cde7c78699025547e","date":1307054117,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#collect(int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"FP.collect doc=\" + doc);\n\n    // If orderedGroups != null we already have collected N groups and\n    // can short circuit by comparing this document to the bottom group,\n    // without having to find what group this document belongs to.\n    \n    // Even if this document belongs to a group in the top N, we'll know that\n    // we don't have to update that group.\n\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int compIDX = 0;; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (compIDX == compIDXEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // TODO: should we add option to mean \"ignore docs that\n    // don't have the group field\" (instead of stuffing them\n    // under null group)?\n    final GROUP_VALUE_TYPE groupValue = getDocGroupValue(doc);\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> group = groupMap.get(groupValue);\n\n    if (group == null) {\n\n      // First time we are seeing this group, or, we've seen\n      // it before but it fell out of the top N and is now\n      // coming back\n\n      if (groupMap.size() < topNGroups) {\n\n        // Still in startup transient: we have not\n        // seen enough unique groups to start pruning them;\n        // just keep collecting them\n\n        // Add a new CollectedSearchGroup:\n        CollectedSearchGroup<GROUP_VALUE_TYPE> sg = new CollectedSearchGroup<GROUP_VALUE_TYPE>();\n        sg.groupValue = copyDocGroupValue(groupValue, null);\n        sg.comparatorSlot = groupMap.size();\n        sg.topDoc = docBase + doc;\n        for (FieldComparator fc : comparators) {\n          fc.copy(sg.comparatorSlot, doc);\n        }\n        groupMap.put(sg.groupValue, sg);\n\n        if (groupMap.size() == topNGroups) {\n          // End of startup transient: we now have max\n          // number of groups; from here on we will drop\n          // bottom group when we insert new one:\n          buildSortedSet();\n        }\n\n        return;\n      }\n\n      // We already tested that the document is competitive, so replace\n      // the bottom group with this new group.\n\n      // java 6-only: final CollectedSearchGroup bottomGroup = orderedGroups.pollLast();\n      final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = orderedGroups.last();\n      orderedGroups.remove(bottomGroup);\n      assert orderedGroups.size() == topNGroups -1;\n\n      groupMap.remove(bottomGroup.groupValue);\n\n      // reuse the removed CollectedSearchGroup\n      bottomGroup.groupValue = copyDocGroupValue(groupValue, bottomGroup.groupValue);\n      bottomGroup.topDoc = docBase + doc;\n\n      for (FieldComparator fc : comparators) {\n        fc.copy(bottomGroup.comparatorSlot, doc);\n      }\n\n      groupMap.put(bottomGroup.groupValue, bottomGroup);\n      orderedGroups.add(bottomGroup);\n      assert orderedGroups.size() == topNGroups;\n\n      final int lastComparatorSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator fc : comparators) {\n        fc.setBottom(lastComparatorSlot);\n      }\n\n      return;\n    }\n\n    // Update existing group:\n    for (int compIDX = 0;; compIDX++) {\n      final FieldComparator fc = comparators[compIDX];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[compIDX] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive; set remaining comparators:\n        for (int compIDX2=compIDX+1; compIDX2<comparators.length; compIDX2++) {\n          comparators[compIDX2].copy(spareSlot, doc);\n        }\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // Remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> prevLast;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == topNGroups-1;\n    } else {\n      prevLast = null;\n    }\n\n    group.topDoc = docBase + doc;\n\n    // Swap slots\n    final int tmp = spareSlot;\n    spareSlot = group.comparatorSlot;\n    group.comparatorSlot = tmp;\n\n    // Re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == topNGroups;\n      final CollectedSearchGroup newLast = orderedGroups.last();\n      // If we changed the value of the last group, or changed which group was last, then update bottom:\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators) {\n          fc.setBottom(newLast.comparatorSlot);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"FP.collect doc=\" + doc);\n\n    // If orderedGroups != null we already have collected N groups and\n    // can short circuit by comparing this document to the bottom group,\n    // without having to find what group this document belongs to.\n    \n    // Even if this document belongs to a group in the top N, we'll know that\n    // we don't have to update that group.\n\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int compIDX = 0;; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (compIDX == compIDXEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // TODO: should we add option to mean \"ignore docs that\n    // don't have the group field\" (instead of stuffing them\n    // under null group)?\n    final int ord = index.getOrd(doc);\n    //System.out.println(\"  ord=\" + ord);\n\n    final BytesRef br = ord == 0 ? null : index.lookup(ord, scratchBytesRef);\n    //System.out.println(\"  group=\" + (br == null ? \"null\" : br.utf8ToString()));\n\n    final CollectedSearchGroup group = groupMap.get(br);\n\n    if (group == null) {\n\n      // First time we are seeing this group, or, we've seen\n      // it before but it fell out of the top N and is now\n      // coming back\n\n      if (groupMap.size() < topNGroups) {\n\n        // Still in startup transient: we have not\n        // seen enough unique groups to start pruning them;\n        // just keep collecting them\n\n        // Add a new CollectedSearchGroup:\n        CollectedSearchGroup sg = new CollectedSearchGroup();\n        sg.groupValue = ord == 0 ? null : new BytesRef(scratchBytesRef);\n        sg.comparatorSlot = groupMap.size();\n        sg.topDoc = docBase + doc;\n        for (FieldComparator fc : comparators) {\n          fc.copy(sg.comparatorSlot, doc);\n        }\n        groupMap.put(sg.groupValue, sg);\n\n        if (groupMap.size() == topNGroups) {\n          // End of startup transient: we now have max\n          // number of groups; from here on we will drop\n          // bottom group when we insert new one:\n          buildSortedSet();\n        }\n\n        return;\n      }\n\n      // We already tested that the document is competitive, so replace\n      // the bottom group with this new group.\n\n      // java 6-only: final CollectedSearchGroup bottomGroup = orderedGroups.pollLast();\n      final CollectedSearchGroup bottomGroup = orderedGroups.last();\n      orderedGroups.remove(bottomGroup);\n      assert orderedGroups.size() == topNGroups -1;\n\n      groupMap.remove(bottomGroup.groupValue);\n\n      // reuse the removed CollectedSearchGroup\n      if (br == null) {\n        bottomGroup.groupValue = null;\n      } else if (bottomGroup.groupValue != null) {\n        bottomGroup.groupValue.copy(br);\n      } else {\n        bottomGroup.groupValue = new BytesRef(br);\n      }\n      bottomGroup.topDoc = docBase + doc;\n\n      for (FieldComparator fc : comparators) {\n        fc.copy(bottomGroup.comparatorSlot, doc);\n      }\n\n      groupMap.put(bottomGroup.groupValue, bottomGroup);\n      orderedGroups.add(bottomGroup);\n      assert orderedGroups.size() == topNGroups;\n\n      final int lastComparatorSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator fc : comparators) {\n        fc.setBottom(lastComparatorSlot);\n      }\n\n      return;\n    }\n\n    // Update existing group:\n    for (int compIDX = 0;; compIDX++) {\n      final FieldComparator fc = comparators[compIDX];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[compIDX] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive; set remaining comparators:\n        for (int compIDX2=compIDX+1; compIDX2<comparators.length; compIDX2++) {\n          comparators[compIDX2].copy(spareSlot, doc);\n        }\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // Remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    final CollectedSearchGroup prevLast;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == topNGroups-1;\n    } else {\n      prevLast = null;\n    }\n\n    group.topDoc = docBase + doc;\n\n    // Swap slots\n    final int tmp = spareSlot;\n    spareSlot = group.comparatorSlot;\n    group.comparatorSlot = tmp;\n\n    // Re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == topNGroups;\n      final CollectedSearchGroup newLast = orderedGroups.last();\n      // If we changed the value of the last group, or changed which group was last, then update bottom:\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators) {\n          fc.setBottom(newLast.comparatorSlot);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c715a0f99152be7566591f323c6c5a25725a1bcb","date":1307118449,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#collect(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"FP.collect doc=\" + doc);\n\n    // If orderedGroups != null we already have collected N groups and\n    // can short circuit by comparing this document to the bottom group,\n    // without having to find what group this document belongs to.\n    \n    // Even if this document belongs to a group in the top N, we'll know that\n    // we don't have to update that group.\n\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int compIDX = 0;; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (compIDX == compIDXEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // TODO: should we add option to mean \"ignore docs that\n    // don't have the group field\" (instead of stuffing them\n    // under null group)?\n    final GROUP_VALUE_TYPE groupValue = getDocGroupValue(doc);\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> group = groupMap.get(groupValue);\n\n    if (group == null) {\n\n      // First time we are seeing this group, or, we've seen\n      // it before but it fell out of the top N and is now\n      // coming back\n\n      if (groupMap.size() < topNGroups) {\n\n        // Still in startup transient: we have not\n        // seen enough unique groups to start pruning them;\n        // just keep collecting them\n\n        // Add a new CollectedSearchGroup:\n        CollectedSearchGroup<GROUP_VALUE_TYPE> sg = new CollectedSearchGroup<GROUP_VALUE_TYPE>();\n        sg.groupValue = copyDocGroupValue(groupValue, null);\n        sg.comparatorSlot = groupMap.size();\n        sg.topDoc = docBase + doc;\n        for (FieldComparator fc : comparators) {\n          fc.copy(sg.comparatorSlot, doc);\n        }\n        groupMap.put(sg.groupValue, sg);\n\n        if (groupMap.size() == topNGroups) {\n          // End of startup transient: we now have max\n          // number of groups; from here on we will drop\n          // bottom group when we insert new one:\n          buildSortedSet();\n        }\n\n        return;\n      }\n\n      // We already tested that the document is competitive, so replace\n      // the bottom group with this new group.\n\n      // java 6-only: final CollectedSearchGroup bottomGroup = orderedGroups.pollLast();\n      final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = orderedGroups.last();\n      orderedGroups.remove(bottomGroup);\n      assert orderedGroups.size() == topNGroups -1;\n\n      groupMap.remove(bottomGroup.groupValue);\n\n      // reuse the removed CollectedSearchGroup\n      bottomGroup.groupValue = copyDocGroupValue(groupValue, bottomGroup.groupValue);\n      bottomGroup.topDoc = docBase + doc;\n\n      for (FieldComparator fc : comparators) {\n        fc.copy(bottomGroup.comparatorSlot, doc);\n      }\n\n      groupMap.put(bottomGroup.groupValue, bottomGroup);\n      orderedGroups.add(bottomGroup);\n      assert orderedGroups.size() == topNGroups;\n\n      final int lastComparatorSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator fc : comparators) {\n        fc.setBottom(lastComparatorSlot);\n      }\n\n      return;\n    }\n\n    // Update existing group:\n    for (int compIDX = 0;; compIDX++) {\n      final FieldComparator fc = comparators[compIDX];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[compIDX] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive; set remaining comparators:\n        for (int compIDX2=compIDX+1; compIDX2<comparators.length; compIDX2++) {\n          comparators[compIDX2].copy(spareSlot, doc);\n        }\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // Remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> prevLast;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == topNGroups-1;\n    } else {\n      prevLast = null;\n    }\n\n    group.topDoc = docBase + doc;\n\n    // Swap slots\n    final int tmp = spareSlot;\n    spareSlot = group.comparatorSlot;\n    group.comparatorSlot = tmp;\n\n    // Re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == topNGroups;\n      final CollectedSearchGroup newLast = orderedGroups.last();\n      // If we changed the value of the last group, or changed which group was last, then update bottom:\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators) {\n          fc.setBottom(newLast.comparatorSlot);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e7c99bd45fa88a3d93a03fdd773053bef72268e","date":1307218088,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#collect(int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/FirstPassGroupingCollector#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"FP.collect doc=\" + doc);\n\n    // If orderedGroups != null we already have collected N groups and\n    // can short circuit by comparing this document to the bottom group,\n    // without having to find what group this document belongs to.\n    \n    // Even if this document belongs to a group in the top N, we'll know that\n    // we don't have to update that group.\n\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int compIDX = 0;; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (compIDX == compIDXEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // TODO: should we add option to mean \"ignore docs that\n    // don't have the group field\" (instead of stuffing them\n    // under null group)?\n    final GROUP_VALUE_TYPE groupValue = getDocGroupValue(doc);\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> group = groupMap.get(groupValue);\n\n    if (group == null) {\n\n      // First time we are seeing this group, or, we've seen\n      // it before but it fell out of the top N and is now\n      // coming back\n\n      if (groupMap.size() < topNGroups) {\n\n        // Still in startup transient: we have not\n        // seen enough unique groups to start pruning them;\n        // just keep collecting them\n\n        // Add a new CollectedSearchGroup:\n        CollectedSearchGroup<GROUP_VALUE_TYPE> sg = new CollectedSearchGroup<GROUP_VALUE_TYPE>();\n        sg.groupValue = copyDocGroupValue(groupValue, null);\n        sg.comparatorSlot = groupMap.size();\n        sg.topDoc = docBase + doc;\n        for (FieldComparator fc : comparators) {\n          fc.copy(sg.comparatorSlot, doc);\n        }\n        groupMap.put(sg.groupValue, sg);\n\n        if (groupMap.size() == topNGroups) {\n          // End of startup transient: we now have max\n          // number of groups; from here on we will drop\n          // bottom group when we insert new one:\n          buildSortedSet();\n        }\n\n        return;\n      }\n\n      // We already tested that the document is competitive, so replace\n      // the bottom group with this new group.\n\n      // java 6-only: final CollectedSearchGroup bottomGroup = orderedGroups.pollLast();\n      final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = orderedGroups.last();\n      orderedGroups.remove(bottomGroup);\n      assert orderedGroups.size() == topNGroups -1;\n\n      groupMap.remove(bottomGroup.groupValue);\n\n      // reuse the removed CollectedSearchGroup\n      bottomGroup.groupValue = copyDocGroupValue(groupValue, bottomGroup.groupValue);\n      bottomGroup.topDoc = docBase + doc;\n\n      for (FieldComparator fc : comparators) {\n        fc.copy(bottomGroup.comparatorSlot, doc);\n      }\n\n      groupMap.put(bottomGroup.groupValue, bottomGroup);\n      orderedGroups.add(bottomGroup);\n      assert orderedGroups.size() == topNGroups;\n\n      final int lastComparatorSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator fc : comparators) {\n        fc.setBottom(lastComparatorSlot);\n      }\n\n      return;\n    }\n\n    // Update existing group:\n    for (int compIDX = 0;; compIDX++) {\n      final FieldComparator fc = comparators[compIDX];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[compIDX] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive; set remaining comparators:\n        for (int compIDX2=compIDX+1; compIDX2<comparators.length; compIDX2++) {\n          comparators[compIDX2].copy(spareSlot, doc);\n        }\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // Remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> prevLast;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == topNGroups-1;\n    } else {\n      prevLast = null;\n    }\n\n    group.topDoc = docBase + doc;\n\n    // Swap slots\n    final int tmp = spareSlot;\n    spareSlot = group.comparatorSlot;\n    group.comparatorSlot = tmp;\n\n    // Re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == topNGroups;\n      final CollectedSearchGroup newLast = orderedGroups.last();\n      // If we changed the value of the last group, or changed which group was last, then update bottom:\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators) {\n          fc.setBottom(newLast.comparatorSlot);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"FP.collect doc=\" + doc);\n\n    // If orderedGroups != null we already have collected N groups and\n    // can short circuit by comparing this document to the bottom group,\n    // without having to find what group this document belongs to.\n    \n    // Even if this document belongs to a group in the top N, we'll know that\n    // we don't have to update that group.\n\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int compIDX = 0;; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (compIDX == compIDXEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // TODO: should we add option to mean \"ignore docs that\n    // don't have the group field\" (instead of stuffing them\n    // under null group)?\n    final int ord = index.getOrd(doc);\n    //System.out.println(\"  ord=\" + ord);\n\n    final BytesRef br = ord == 0 ? null : index.lookup(ord, scratchBytesRef);\n    //System.out.println(\"  group=\" + (br == null ? \"null\" : br.utf8ToString()));\n\n    final CollectedSearchGroup group = groupMap.get(br);\n\n    if (group == null) {\n\n      // First time we are seeing this group, or, we've seen\n      // it before but it fell out of the top N and is now\n      // coming back\n\n      if (groupMap.size() < topNGroups) {\n\n        // Still in startup transient: we have not\n        // seen enough unique groups to start pruning them;\n        // just keep collecting them\n\n        // Add a new CollectedSearchGroup:\n        CollectedSearchGroup sg = new CollectedSearchGroup();\n        sg.groupValue = ord == 0 ? null : new BytesRef(scratchBytesRef);\n        sg.comparatorSlot = groupMap.size();\n        sg.topDoc = docBase + doc;\n        for (FieldComparator fc : comparators) {\n          fc.copy(sg.comparatorSlot, doc);\n        }\n        groupMap.put(sg.groupValue, sg);\n\n        if (groupMap.size() == topNGroups) {\n          // End of startup transient: we now have max\n          // number of groups; from here on we will drop\n          // bottom group when we insert new one:\n          buildSortedSet();\n        }\n\n        return;\n      }\n\n      // We already tested that the document is competitive, so replace\n      // the bottom group with this new group.\n\n      // java 6-only: final CollectedSearchGroup bottomGroup = orderedGroups.pollLast();\n      final CollectedSearchGroup bottomGroup = orderedGroups.last();\n      orderedGroups.remove(bottomGroup);\n      assert orderedGroups.size() == topNGroups -1;\n\n      groupMap.remove(bottomGroup.groupValue);\n\n      // reuse the removed CollectedSearchGroup\n      if (br == null) {\n        bottomGroup.groupValue = null;\n      } else if (bottomGroup.groupValue != null) {\n        bottomGroup.groupValue.copy(br);\n      } else {\n        bottomGroup.groupValue = new BytesRef(br);\n      }\n      bottomGroup.topDoc = docBase + doc;\n\n      for (FieldComparator fc : comparators) {\n        fc.copy(bottomGroup.comparatorSlot, doc);\n      }\n\n      groupMap.put(bottomGroup.groupValue, bottomGroup);\n      orderedGroups.add(bottomGroup);\n      assert orderedGroups.size() == topNGroups;\n\n      final int lastComparatorSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator fc : comparators) {\n        fc.setBottom(lastComparatorSlot);\n      }\n\n      return;\n    }\n\n    // Update existing group:\n    for (int compIDX = 0;; compIDX++) {\n      final FieldComparator fc = comparators[compIDX];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[compIDX] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive; set remaining comparators:\n        for (int compIDX2=compIDX+1; compIDX2<comparators.length; compIDX2++) {\n          comparators[compIDX2].copy(spareSlot, doc);\n        }\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // Remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    final CollectedSearchGroup prevLast;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == topNGroups-1;\n    } else {\n      prevLast = null;\n    }\n\n    group.topDoc = docBase + doc;\n\n    // Swap slots\n    final int tmp = spareSlot;\n    spareSlot = group.comparatorSlot;\n    group.comparatorSlot = tmp;\n\n    // Re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == topNGroups;\n      final CollectedSearchGroup newLast = orderedGroups.last();\n      // If we changed the value of the last group, or changed which group was last, then update bottom:\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators) {\n          fc.setBottom(newLast.comparatorSlot);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9973590217cf3112b309f28a4d152eda4fdd101","date":1308805554,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#collect(int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"FP.collect doc=\" + doc);\n\n    // If orderedGroups != null we already have collected N groups and\n    // can short circuit by comparing this document to the bottom group,\n    // without having to find what group this document belongs to.\n    \n    // Even if this document belongs to a group in the top N, we'll know that\n    // we don't have to update that group.\n\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int compIDX = 0;; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (compIDX == compIDXEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // TODO: should we add option to mean \"ignore docs that\n    // don't have the group field\" (instead of stuffing them\n    // under null group)?\n    final GROUP_VALUE_TYPE groupValue = getDocGroupValue(doc);\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> group = groupMap.get(groupValue);\n\n    if (group == null) {\n\n      // First time we are seeing this group, or, we've seen\n      // it before but it fell out of the top N and is now\n      // coming back\n\n      if (groupMap.size() < topNGroups) {\n\n        // Still in startup transient: we have not\n        // seen enough unique groups to start pruning them;\n        // just keep collecting them\n\n        // Add a new CollectedSearchGroup:\n        CollectedSearchGroup<GROUP_VALUE_TYPE> sg = new CollectedSearchGroup<GROUP_VALUE_TYPE>();\n        sg.groupValue = copyDocGroupValue(groupValue, null);\n        sg.comparatorSlot = groupMap.size();\n        sg.topDoc = docBase + doc;\n        for (FieldComparator fc : comparators) {\n          fc.copy(sg.comparatorSlot, doc);\n        }\n        groupMap.put(sg.groupValue, sg);\n\n        if (groupMap.size() == topNGroups) {\n          // End of startup transient: we now have max\n          // number of groups; from here on we will drop\n          // bottom group when we insert new one:\n          buildSortedSet();\n        }\n\n        return;\n      }\n\n      // We already tested that the document is competitive, so replace\n      // the bottom group with this new group.\n\n      // java 6-only: final CollectedSearchGroup bottomGroup = orderedGroups.pollLast();\n      final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = pollLast();\n      assert orderedGroups.size() == topNGroups -1;\n\n      groupMap.remove(bottomGroup.groupValue);\n\n      // reuse the removed CollectedSearchGroup\n      bottomGroup.groupValue = copyDocGroupValue(groupValue, bottomGroup.groupValue);\n      bottomGroup.topDoc = docBase + doc;\n\n      for (FieldComparator fc : comparators) {\n        fc.copy(bottomGroup.comparatorSlot, doc);\n      }\n\n      groupMap.put(bottomGroup.groupValue, bottomGroup);\n      orderedGroups.add(bottomGroup);\n      assert orderedGroups.size() == topNGroups;\n\n      final int lastComparatorSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator fc : comparators) {\n        fc.setBottom(lastComparatorSlot);\n      }\n\n      return;\n    }\n\n    // Update existing group:\n    for (int compIDX = 0;; compIDX++) {\n      final FieldComparator fc = comparators[compIDX];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[compIDX] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive; set remaining comparators:\n        for (int compIDX2=compIDX+1; compIDX2<comparators.length; compIDX2++) {\n          comparators[compIDX2].copy(spareSlot, doc);\n        }\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // Remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> prevLast;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == topNGroups-1;\n    } else {\n      prevLast = null;\n    }\n\n    group.topDoc = docBase + doc;\n\n    // Swap slots\n    final int tmp = spareSlot;\n    spareSlot = group.comparatorSlot;\n    group.comparatorSlot = tmp;\n\n    // Re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == topNGroups;\n      final CollectedSearchGroup newLast = orderedGroups.last();\n      // If we changed the value of the last group, or changed which group was last, then update bottom:\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators) {\n          fc.setBottom(newLast.comparatorSlot);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"FP.collect doc=\" + doc);\n\n    // If orderedGroups != null we already have collected N groups and\n    // can short circuit by comparing this document to the bottom group,\n    // without having to find what group this document belongs to.\n    \n    // Even if this document belongs to a group in the top N, we'll know that\n    // we don't have to update that group.\n\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int compIDX = 0;; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (compIDX == compIDXEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // TODO: should we add option to mean \"ignore docs that\n    // don't have the group field\" (instead of stuffing them\n    // under null group)?\n    final GROUP_VALUE_TYPE groupValue = getDocGroupValue(doc);\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> group = groupMap.get(groupValue);\n\n    if (group == null) {\n\n      // First time we are seeing this group, or, we've seen\n      // it before but it fell out of the top N and is now\n      // coming back\n\n      if (groupMap.size() < topNGroups) {\n\n        // Still in startup transient: we have not\n        // seen enough unique groups to start pruning them;\n        // just keep collecting them\n\n        // Add a new CollectedSearchGroup:\n        CollectedSearchGroup<GROUP_VALUE_TYPE> sg = new CollectedSearchGroup<GROUP_VALUE_TYPE>();\n        sg.groupValue = copyDocGroupValue(groupValue, null);\n        sg.comparatorSlot = groupMap.size();\n        sg.topDoc = docBase + doc;\n        for (FieldComparator fc : comparators) {\n          fc.copy(sg.comparatorSlot, doc);\n        }\n        groupMap.put(sg.groupValue, sg);\n\n        if (groupMap.size() == topNGroups) {\n          // End of startup transient: we now have max\n          // number of groups; from here on we will drop\n          // bottom group when we insert new one:\n          buildSortedSet();\n        }\n\n        return;\n      }\n\n      // We already tested that the document is competitive, so replace\n      // the bottom group with this new group.\n\n      // java 6-only: final CollectedSearchGroup bottomGroup = orderedGroups.pollLast();\n      final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = orderedGroups.last();\n      orderedGroups.remove(bottomGroup);\n      assert orderedGroups.size() == topNGroups -1;\n\n      groupMap.remove(bottomGroup.groupValue);\n\n      // reuse the removed CollectedSearchGroup\n      bottomGroup.groupValue = copyDocGroupValue(groupValue, bottomGroup.groupValue);\n      bottomGroup.topDoc = docBase + doc;\n\n      for (FieldComparator fc : comparators) {\n        fc.copy(bottomGroup.comparatorSlot, doc);\n      }\n\n      groupMap.put(bottomGroup.groupValue, bottomGroup);\n      orderedGroups.add(bottomGroup);\n      assert orderedGroups.size() == topNGroups;\n\n      final int lastComparatorSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator fc : comparators) {\n        fc.setBottom(lastComparatorSlot);\n      }\n\n      return;\n    }\n\n    // Update existing group:\n    for (int compIDX = 0;; compIDX++) {\n      final FieldComparator fc = comparators[compIDX];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[compIDX] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive; set remaining comparators:\n        for (int compIDX2=compIDX+1; compIDX2<comparators.length; compIDX2++) {\n          comparators[compIDX2].copy(spareSlot, doc);\n        }\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // Remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> prevLast;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == topNGroups-1;\n    } else {\n      prevLast = null;\n    }\n\n    group.topDoc = docBase + doc;\n\n    // Swap slots\n    final int tmp = spareSlot;\n    spareSlot = group.comparatorSlot;\n    group.comparatorSlot = tmp;\n\n    // Re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == topNGroups;\n      final CollectedSearchGroup newLast = orderedGroups.last();\n      // If we changed the value of the last group, or changed which group was last, then update bottom:\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators) {\n          fc.setBottom(newLast.comparatorSlot);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#collect(int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"FP.collect doc=\" + doc);\n\n    // If orderedGroups != null we already have collected N groups and\n    // can short circuit by comparing this document to the bottom group,\n    // without having to find what group this document belongs to.\n    \n    // Even if this document belongs to a group in the top N, we'll know that\n    // we don't have to update that group.\n\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int compIDX = 0;; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (compIDX == compIDXEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // TODO: should we add option to mean \"ignore docs that\n    // don't have the group field\" (instead of stuffing them\n    // under null group)?\n    final GROUP_VALUE_TYPE groupValue = getDocGroupValue(doc);\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> group = groupMap.get(groupValue);\n\n    if (group == null) {\n\n      // First time we are seeing this group, or, we've seen\n      // it before but it fell out of the top N and is now\n      // coming back\n\n      if (groupMap.size() < topNGroups) {\n\n        // Still in startup transient: we have not\n        // seen enough unique groups to start pruning them;\n        // just keep collecting them\n\n        // Add a new CollectedSearchGroup:\n        CollectedSearchGroup<GROUP_VALUE_TYPE> sg = new CollectedSearchGroup<GROUP_VALUE_TYPE>();\n        sg.groupValue = copyDocGroupValue(groupValue, null);\n        sg.comparatorSlot = groupMap.size();\n        sg.topDoc = docBase + doc;\n        for (FieldComparator fc : comparators) {\n          fc.copy(sg.comparatorSlot, doc);\n        }\n        groupMap.put(sg.groupValue, sg);\n\n        if (groupMap.size() == topNGroups) {\n          // End of startup transient: we now have max\n          // number of groups; from here on we will drop\n          // bottom group when we insert new one:\n          buildSortedSet();\n        }\n\n        return;\n      }\n\n      // We already tested that the document is competitive, so replace\n      // the bottom group with this new group.\n\n      // java 6-only: final CollectedSearchGroup bottomGroup = orderedGroups.pollLast();\n      final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = pollLast();\n      assert orderedGroups.size() == topNGroups -1;\n\n      groupMap.remove(bottomGroup.groupValue);\n\n      // reuse the removed CollectedSearchGroup\n      bottomGroup.groupValue = copyDocGroupValue(groupValue, bottomGroup.groupValue);\n      bottomGroup.topDoc = docBase + doc;\n\n      for (FieldComparator fc : comparators) {\n        fc.copy(bottomGroup.comparatorSlot, doc);\n      }\n\n      groupMap.put(bottomGroup.groupValue, bottomGroup);\n      orderedGroups.add(bottomGroup);\n      assert orderedGroups.size() == topNGroups;\n\n      final int lastComparatorSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator fc : comparators) {\n        fc.setBottom(lastComparatorSlot);\n      }\n\n      return;\n    }\n\n    // Update existing group:\n    for (int compIDX = 0;; compIDX++) {\n      final FieldComparator fc = comparators[compIDX];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[compIDX] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive; set remaining comparators:\n        for (int compIDX2=compIDX+1; compIDX2<comparators.length; compIDX2++) {\n          comparators[compIDX2].copy(spareSlot, doc);\n        }\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // Remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> prevLast;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == topNGroups-1;\n    } else {\n      prevLast = null;\n    }\n\n    group.topDoc = docBase + doc;\n\n    // Swap slots\n    final int tmp = spareSlot;\n    spareSlot = group.comparatorSlot;\n    group.comparatorSlot = tmp;\n\n    // Re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == topNGroups;\n      final CollectedSearchGroup newLast = orderedGroups.last();\n      // If we changed the value of the last group, or changed which group was last, then update bottom:\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators) {\n          fc.setBottom(newLast.comparatorSlot);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"FP.collect doc=\" + doc);\n\n    // If orderedGroups != null we already have collected N groups and\n    // can short circuit by comparing this document to the bottom group,\n    // without having to find what group this document belongs to.\n    \n    // Even if this document belongs to a group in the top N, we'll know that\n    // we don't have to update that group.\n\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int compIDX = 0;; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (compIDX == compIDXEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // TODO: should we add option to mean \"ignore docs that\n    // don't have the group field\" (instead of stuffing them\n    // under null group)?\n    final GROUP_VALUE_TYPE groupValue = getDocGroupValue(doc);\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> group = groupMap.get(groupValue);\n\n    if (group == null) {\n\n      // First time we are seeing this group, or, we've seen\n      // it before but it fell out of the top N and is now\n      // coming back\n\n      if (groupMap.size() < topNGroups) {\n\n        // Still in startup transient: we have not\n        // seen enough unique groups to start pruning them;\n        // just keep collecting them\n\n        // Add a new CollectedSearchGroup:\n        CollectedSearchGroup<GROUP_VALUE_TYPE> sg = new CollectedSearchGroup<GROUP_VALUE_TYPE>();\n        sg.groupValue = copyDocGroupValue(groupValue, null);\n        sg.comparatorSlot = groupMap.size();\n        sg.topDoc = docBase + doc;\n        for (FieldComparator fc : comparators) {\n          fc.copy(sg.comparatorSlot, doc);\n        }\n        groupMap.put(sg.groupValue, sg);\n\n        if (groupMap.size() == topNGroups) {\n          // End of startup transient: we now have max\n          // number of groups; from here on we will drop\n          // bottom group when we insert new one:\n          buildSortedSet();\n        }\n\n        return;\n      }\n\n      // We already tested that the document is competitive, so replace\n      // the bottom group with this new group.\n\n      // java 6-only: final CollectedSearchGroup bottomGroup = orderedGroups.pollLast();\n      final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = orderedGroups.last();\n      orderedGroups.remove(bottomGroup);\n      assert orderedGroups.size() == topNGroups -1;\n\n      groupMap.remove(bottomGroup.groupValue);\n\n      // reuse the removed CollectedSearchGroup\n      bottomGroup.groupValue = copyDocGroupValue(groupValue, bottomGroup.groupValue);\n      bottomGroup.topDoc = docBase + doc;\n\n      for (FieldComparator fc : comparators) {\n        fc.copy(bottomGroup.comparatorSlot, doc);\n      }\n\n      groupMap.put(bottomGroup.groupValue, bottomGroup);\n      orderedGroups.add(bottomGroup);\n      assert orderedGroups.size() == topNGroups;\n\n      final int lastComparatorSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator fc : comparators) {\n        fc.setBottom(lastComparatorSlot);\n      }\n\n      return;\n    }\n\n    // Update existing group:\n    for (int compIDX = 0;; compIDX++) {\n      final FieldComparator fc = comparators[compIDX];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[compIDX] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive; set remaining comparators:\n        for (int compIDX2=compIDX+1; compIDX2<comparators.length; compIDX2++) {\n          comparators[compIDX2].copy(spareSlot, doc);\n        }\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // Remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> prevLast;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == topNGroups-1;\n    } else {\n      prevLast = null;\n    }\n\n    group.topDoc = docBase + doc;\n\n    // Swap slots\n    final int tmp = spareSlot;\n    spareSlot = group.comparatorSlot;\n    group.comparatorSlot = tmp;\n\n    // Re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == topNGroups;\n      final CollectedSearchGroup newLast = orderedGroups.last();\n      // If we changed the value of the last group, or changed which group was last, then update bottom:\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators) {\n          fc.setBottom(newLast.comparatorSlot);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#collect(int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"FP.collect doc=\" + doc);\n\n    // If orderedGroups != null we already have collected N groups and\n    // can short circuit by comparing this document to the bottom group,\n    // without having to find what group this document belongs to.\n    \n    // Even if this document belongs to a group in the top N, we'll know that\n    // we don't have to update that group.\n\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int compIDX = 0;; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (compIDX == compIDXEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // TODO: should we add option to mean \"ignore docs that\n    // don't have the group field\" (instead of stuffing them\n    // under null group)?\n    final GROUP_VALUE_TYPE groupValue = getDocGroupValue(doc);\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> group = groupMap.get(groupValue);\n\n    if (group == null) {\n\n      // First time we are seeing this group, or, we've seen\n      // it before but it fell out of the top N and is now\n      // coming back\n\n      if (groupMap.size() < topNGroups) {\n\n        // Still in startup transient: we have not\n        // seen enough unique groups to start pruning them;\n        // just keep collecting them\n\n        // Add a new CollectedSearchGroup:\n        CollectedSearchGroup<GROUP_VALUE_TYPE> sg = new CollectedSearchGroup<GROUP_VALUE_TYPE>();\n        sg.groupValue = copyDocGroupValue(groupValue, null);\n        sg.comparatorSlot = groupMap.size();\n        sg.topDoc = docBase + doc;\n        for (FieldComparator fc : comparators) {\n          fc.copy(sg.comparatorSlot, doc);\n        }\n        groupMap.put(sg.groupValue, sg);\n\n        if (groupMap.size() == topNGroups) {\n          // End of startup transient: we now have max\n          // number of groups; from here on we will drop\n          // bottom group when we insert new one:\n          buildSortedSet();\n        }\n\n        return;\n      }\n\n      // We already tested that the document is competitive, so replace\n      // the bottom group with this new group.\n\n      // java 6-only: final CollectedSearchGroup bottomGroup = orderedGroups.pollLast();\n      final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = pollLast();\n      assert orderedGroups.size() == topNGroups -1;\n\n      groupMap.remove(bottomGroup.groupValue);\n\n      // reuse the removed CollectedSearchGroup\n      bottomGroup.groupValue = copyDocGroupValue(groupValue, bottomGroup.groupValue);\n      bottomGroup.topDoc = docBase + doc;\n\n      for (FieldComparator fc : comparators) {\n        fc.copy(bottomGroup.comparatorSlot, doc);\n      }\n\n      groupMap.put(bottomGroup.groupValue, bottomGroup);\n      orderedGroups.add(bottomGroup);\n      assert orderedGroups.size() == topNGroups;\n\n      final int lastComparatorSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator fc : comparators) {\n        fc.setBottom(lastComparatorSlot);\n      }\n\n      return;\n    }\n\n    // Update existing group:\n    for (int compIDX = 0;; compIDX++) {\n      final FieldComparator fc = comparators[compIDX];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[compIDX] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive; set remaining comparators:\n        for (int compIDX2=compIDX+1; compIDX2<comparators.length; compIDX2++) {\n          comparators[compIDX2].copy(spareSlot, doc);\n        }\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // Remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> prevLast;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == topNGroups-1;\n    } else {\n      prevLast = null;\n    }\n\n    group.topDoc = docBase + doc;\n\n    // Swap slots\n    final int tmp = spareSlot;\n    spareSlot = group.comparatorSlot;\n    group.comparatorSlot = tmp;\n\n    // Re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == topNGroups;\n      final CollectedSearchGroup newLast = orderedGroups.last();\n      // If we changed the value of the last group, or changed which group was last, then update bottom:\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators) {\n          fc.setBottom(newLast.comparatorSlot);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"FP.collect doc=\" + doc);\n\n    // If orderedGroups != null we already have collected N groups and\n    // can short circuit by comparing this document to the bottom group,\n    // without having to find what group this document belongs to.\n    \n    // Even if this document belongs to a group in the top N, we'll know that\n    // we don't have to update that group.\n\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int compIDX = 0;; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (compIDX == compIDXEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // TODO: should we add option to mean \"ignore docs that\n    // don't have the group field\" (instead of stuffing them\n    // under null group)?\n    final GROUP_VALUE_TYPE groupValue = getDocGroupValue(doc);\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> group = groupMap.get(groupValue);\n\n    if (group == null) {\n\n      // First time we are seeing this group, or, we've seen\n      // it before but it fell out of the top N and is now\n      // coming back\n\n      if (groupMap.size() < topNGroups) {\n\n        // Still in startup transient: we have not\n        // seen enough unique groups to start pruning them;\n        // just keep collecting them\n\n        // Add a new CollectedSearchGroup:\n        CollectedSearchGroup<GROUP_VALUE_TYPE> sg = new CollectedSearchGroup<GROUP_VALUE_TYPE>();\n        sg.groupValue = copyDocGroupValue(groupValue, null);\n        sg.comparatorSlot = groupMap.size();\n        sg.topDoc = docBase + doc;\n        for (FieldComparator fc : comparators) {\n          fc.copy(sg.comparatorSlot, doc);\n        }\n        groupMap.put(sg.groupValue, sg);\n\n        if (groupMap.size() == topNGroups) {\n          // End of startup transient: we now have max\n          // number of groups; from here on we will drop\n          // bottom group when we insert new one:\n          buildSortedSet();\n        }\n\n        return;\n      }\n\n      // We already tested that the document is competitive, so replace\n      // the bottom group with this new group.\n\n      // java 6-only: final CollectedSearchGroup bottomGroup = orderedGroups.pollLast();\n      final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = orderedGroups.last();\n      orderedGroups.remove(bottomGroup);\n      assert orderedGroups.size() == topNGroups -1;\n\n      groupMap.remove(bottomGroup.groupValue);\n\n      // reuse the removed CollectedSearchGroup\n      bottomGroup.groupValue = copyDocGroupValue(groupValue, bottomGroup.groupValue);\n      bottomGroup.topDoc = docBase + doc;\n\n      for (FieldComparator fc : comparators) {\n        fc.copy(bottomGroup.comparatorSlot, doc);\n      }\n\n      groupMap.put(bottomGroup.groupValue, bottomGroup);\n      orderedGroups.add(bottomGroup);\n      assert orderedGroups.size() == topNGroups;\n\n      final int lastComparatorSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator fc : comparators) {\n        fc.setBottom(lastComparatorSlot);\n      }\n\n      return;\n    }\n\n    // Update existing group:\n    for (int compIDX = 0;; compIDX++) {\n      final FieldComparator fc = comparators[compIDX];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[compIDX] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive; set remaining comparators:\n        for (int compIDX2=compIDX+1; compIDX2<comparators.length; compIDX2++) {\n          comparators[compIDX2].copy(spareSlot, doc);\n        }\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // Remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> prevLast;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == topNGroups-1;\n    } else {\n      prevLast = null;\n    }\n\n    group.topDoc = docBase + doc;\n\n    // Swap slots\n    final int tmp = spareSlot;\n    spareSlot = group.comparatorSlot;\n    group.comparatorSlot = tmp;\n\n    // Re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == topNGroups;\n      final CollectedSearchGroup newLast = orderedGroups.last();\n      // If we changed the value of the last group, or changed which group was last, then update bottom:\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators) {\n          fc.setBottom(newLast.comparatorSlot);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a794f8d0ee44552f6e80ea582b695e5a1d32a0c","date":1317235222,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#collect(int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"FP.collect doc=\" + doc);\n\n    // If orderedGroups != null we already have collected N groups and\n    // can short circuit by comparing this document to the bottom group,\n    // without having to find what group this document belongs to.\n    \n    // Even if this document belongs to a group in the top N, we'll know that\n    // we don't have to update that group.\n\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int compIDX = 0;; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (compIDX == compIDXEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // TODO: should we add option to mean \"ignore docs that\n    // don't have the group field\" (instead of stuffing them\n    // under null group)?\n    final GROUP_VALUE_TYPE groupValue = getDocGroupValue(doc);\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> group = groupMap.get(groupValue);\n\n    if (group == null) {\n\n      // First time we are seeing this group, or, we've seen\n      // it before but it fell out of the top N and is now\n      // coming back\n\n      if (groupMap.size() < topNGroups) {\n\n        // Still in startup transient: we have not\n        // seen enough unique groups to start pruning them;\n        // just keep collecting them\n\n        // Add a new CollectedSearchGroup:\n        CollectedSearchGroup<GROUP_VALUE_TYPE> sg = new CollectedSearchGroup<GROUP_VALUE_TYPE>();\n        sg.groupValue = copyDocGroupValue(groupValue, null);\n        sg.comparatorSlot = groupMap.size();\n        sg.topDoc = docBase + doc;\n        for (FieldComparator fc : comparators) {\n          fc.copy(sg.comparatorSlot, doc);\n        }\n        groupMap.put(sg.groupValue, sg);\n\n        if (groupMap.size() == topNGroups) {\n          // End of startup transient: we now have max\n          // number of groups; from here on we will drop\n          // bottom group when we insert new one:\n          buildSortedSet();\n        }\n\n        return;\n      }\n\n      // We already tested that the document is competitive, so replace\n      // the bottom group with this new group.\n      final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = orderedGroups.pollLast();\n      assert orderedGroups.size() == topNGroups -1;\n\n      groupMap.remove(bottomGroup.groupValue);\n\n      // reuse the removed CollectedSearchGroup\n      bottomGroup.groupValue = copyDocGroupValue(groupValue, bottomGroup.groupValue);\n      bottomGroup.topDoc = docBase + doc;\n\n      for (FieldComparator fc : comparators) {\n        fc.copy(bottomGroup.comparatorSlot, doc);\n      }\n\n      groupMap.put(bottomGroup.groupValue, bottomGroup);\n      orderedGroups.add(bottomGroup);\n      assert orderedGroups.size() == topNGroups;\n\n      final int lastComparatorSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator fc : comparators) {\n        fc.setBottom(lastComparatorSlot);\n      }\n\n      return;\n    }\n\n    // Update existing group:\n    for (int compIDX = 0;; compIDX++) {\n      final FieldComparator fc = comparators[compIDX];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[compIDX] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive; set remaining comparators:\n        for (int compIDX2=compIDX+1; compIDX2<comparators.length; compIDX2++) {\n          comparators[compIDX2].copy(spareSlot, doc);\n        }\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // Remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> prevLast;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == topNGroups-1;\n    } else {\n      prevLast = null;\n    }\n\n    group.topDoc = docBase + doc;\n\n    // Swap slots\n    final int tmp = spareSlot;\n    spareSlot = group.comparatorSlot;\n    group.comparatorSlot = tmp;\n\n    // Re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == topNGroups;\n      final CollectedSearchGroup newLast = orderedGroups.last();\n      // If we changed the value of the last group, or changed which group was last, then update bottom:\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators) {\n          fc.setBottom(newLast.comparatorSlot);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"FP.collect doc=\" + doc);\n\n    // If orderedGroups != null we already have collected N groups and\n    // can short circuit by comparing this document to the bottom group,\n    // without having to find what group this document belongs to.\n    \n    // Even if this document belongs to a group in the top N, we'll know that\n    // we don't have to update that group.\n\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int compIDX = 0;; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (compIDX == compIDXEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // TODO: should we add option to mean \"ignore docs that\n    // don't have the group field\" (instead of stuffing them\n    // under null group)?\n    final GROUP_VALUE_TYPE groupValue = getDocGroupValue(doc);\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> group = groupMap.get(groupValue);\n\n    if (group == null) {\n\n      // First time we are seeing this group, or, we've seen\n      // it before but it fell out of the top N and is now\n      // coming back\n\n      if (groupMap.size() < topNGroups) {\n\n        // Still in startup transient: we have not\n        // seen enough unique groups to start pruning them;\n        // just keep collecting them\n\n        // Add a new CollectedSearchGroup:\n        CollectedSearchGroup<GROUP_VALUE_TYPE> sg = new CollectedSearchGroup<GROUP_VALUE_TYPE>();\n        sg.groupValue = copyDocGroupValue(groupValue, null);\n        sg.comparatorSlot = groupMap.size();\n        sg.topDoc = docBase + doc;\n        for (FieldComparator fc : comparators) {\n          fc.copy(sg.comparatorSlot, doc);\n        }\n        groupMap.put(sg.groupValue, sg);\n\n        if (groupMap.size() == topNGroups) {\n          // End of startup transient: we now have max\n          // number of groups; from here on we will drop\n          // bottom group when we insert new one:\n          buildSortedSet();\n        }\n\n        return;\n      }\n\n      // We already tested that the document is competitive, so replace\n      // the bottom group with this new group.\n\n      // java 6-only: final CollectedSearchGroup bottomGroup = orderedGroups.pollLast();\n      final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = pollLast();\n      assert orderedGroups.size() == topNGroups -1;\n\n      groupMap.remove(bottomGroup.groupValue);\n\n      // reuse the removed CollectedSearchGroup\n      bottomGroup.groupValue = copyDocGroupValue(groupValue, bottomGroup.groupValue);\n      bottomGroup.topDoc = docBase + doc;\n\n      for (FieldComparator fc : comparators) {\n        fc.copy(bottomGroup.comparatorSlot, doc);\n      }\n\n      groupMap.put(bottomGroup.groupValue, bottomGroup);\n      orderedGroups.add(bottomGroup);\n      assert orderedGroups.size() == topNGroups;\n\n      final int lastComparatorSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator fc : comparators) {\n        fc.setBottom(lastComparatorSlot);\n      }\n\n      return;\n    }\n\n    // Update existing group:\n    for (int compIDX = 0;; compIDX++) {\n      final FieldComparator fc = comparators[compIDX];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[compIDX] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive; set remaining comparators:\n        for (int compIDX2=compIDX+1; compIDX2<comparators.length; compIDX2++) {\n          comparators[compIDX2].copy(spareSlot, doc);\n        }\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // Remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> prevLast;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == topNGroups-1;\n    } else {\n      prevLast = null;\n    }\n\n    group.topDoc = docBase + doc;\n\n    // Swap slots\n    final int tmp = spareSlot;\n    spareSlot = group.comparatorSlot;\n    group.comparatorSlot = tmp;\n\n    // Re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == topNGroups;\n      final CollectedSearchGroup newLast = orderedGroups.last();\n      // If we changed the value of the last group, or changed which group was last, then update bottom:\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators) {\n          fc.setBottom(newLast.comparatorSlot);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bfa39296944e5fddc334aa89243d91f9cbb8367","date":1330973284,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#collect(int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"FP.collect doc=\" + doc);\n\n    // If orderedGroups != null we already have collected N groups and\n    // can short circuit by comparing this document to the bottom group,\n    // without having to find what group this document belongs to.\n    \n    // Even if this document belongs to a group in the top N, we'll know that\n    // we don't have to update that group.\n\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int compIDX = 0;; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (compIDX == compIDXEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // TODO: should we add option to mean \"ignore docs that\n    // don't have the group field\" (instead of stuffing them\n    // under null group)?\n    final GROUP_VALUE_TYPE groupValue = getDocGroupValue(doc);\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> group = groupMap.get(groupValue);\n\n    if (group == null) {\n\n      // First time we are seeing this group, or, we've seen\n      // it before but it fell out of the top N and is now\n      // coming back\n\n      if (groupMap.size() < topNGroups) {\n\n        // Still in startup transient: we have not\n        // seen enough unique groups to start pruning them;\n        // just keep collecting them\n\n        // Add a new CollectedSearchGroup:\n        CollectedSearchGroup<GROUP_VALUE_TYPE> sg = new CollectedSearchGroup<GROUP_VALUE_TYPE>();\n        sg.groupValue = copyDocGroupValue(groupValue, null);\n        sg.comparatorSlot = groupMap.size();\n        sg.topDoc = docBase + doc;\n        for (FieldComparator<?> fc : comparators) {\n          fc.copy(sg.comparatorSlot, doc);\n        }\n        groupMap.put(sg.groupValue, sg);\n\n        if (groupMap.size() == topNGroups) {\n          // End of startup transient: we now have max\n          // number of groups; from here on we will drop\n          // bottom group when we insert new one:\n          buildSortedSet();\n        }\n\n        return;\n      }\n\n      // We already tested that the document is competitive, so replace\n      // the bottom group with this new group.\n      final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = orderedGroups.pollLast();\n      assert orderedGroups.size() == topNGroups -1;\n\n      groupMap.remove(bottomGroup.groupValue);\n\n      // reuse the removed CollectedSearchGroup\n      bottomGroup.groupValue = copyDocGroupValue(groupValue, bottomGroup.groupValue);\n      bottomGroup.topDoc = docBase + doc;\n\n      for (FieldComparator<?> fc : comparators) {\n        fc.copy(bottomGroup.comparatorSlot, doc);\n      }\n\n      groupMap.put(bottomGroup.groupValue, bottomGroup);\n      orderedGroups.add(bottomGroup);\n      assert orderedGroups.size() == topNGroups;\n\n      final int lastComparatorSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator<?> fc : comparators) {\n        fc.setBottom(lastComparatorSlot);\n      }\n\n      return;\n    }\n\n    // Update existing group:\n    for (int compIDX = 0;; compIDX++) {\n      final FieldComparator<?> fc = comparators[compIDX];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[compIDX] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive; set remaining comparators:\n        for (int compIDX2=compIDX+1; compIDX2<comparators.length; compIDX2++) {\n          comparators[compIDX2].copy(spareSlot, doc);\n        }\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // Remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> prevLast;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == topNGroups-1;\n    } else {\n      prevLast = null;\n    }\n\n    group.topDoc = docBase + doc;\n\n    // Swap slots\n    final int tmp = spareSlot;\n    spareSlot = group.comparatorSlot;\n    group.comparatorSlot = tmp;\n\n    // Re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == topNGroups;\n      final CollectedSearchGroup newLast = orderedGroups.last();\n      // If we changed the value of the last group, or changed which group was last, then update bottom:\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator<?> fc : comparators) {\n          fc.setBottom(newLast.comparatorSlot);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"FP.collect doc=\" + doc);\n\n    // If orderedGroups != null we already have collected N groups and\n    // can short circuit by comparing this document to the bottom group,\n    // without having to find what group this document belongs to.\n    \n    // Even if this document belongs to a group in the top N, we'll know that\n    // we don't have to update that group.\n\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int compIDX = 0;; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (compIDX == compIDXEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // TODO: should we add option to mean \"ignore docs that\n    // don't have the group field\" (instead of stuffing them\n    // under null group)?\n    final GROUP_VALUE_TYPE groupValue = getDocGroupValue(doc);\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> group = groupMap.get(groupValue);\n\n    if (group == null) {\n\n      // First time we are seeing this group, or, we've seen\n      // it before but it fell out of the top N and is now\n      // coming back\n\n      if (groupMap.size() < topNGroups) {\n\n        // Still in startup transient: we have not\n        // seen enough unique groups to start pruning them;\n        // just keep collecting them\n\n        // Add a new CollectedSearchGroup:\n        CollectedSearchGroup<GROUP_VALUE_TYPE> sg = new CollectedSearchGroup<GROUP_VALUE_TYPE>();\n        sg.groupValue = copyDocGroupValue(groupValue, null);\n        sg.comparatorSlot = groupMap.size();\n        sg.topDoc = docBase + doc;\n        for (FieldComparator fc : comparators) {\n          fc.copy(sg.comparatorSlot, doc);\n        }\n        groupMap.put(sg.groupValue, sg);\n\n        if (groupMap.size() == topNGroups) {\n          // End of startup transient: we now have max\n          // number of groups; from here on we will drop\n          // bottom group when we insert new one:\n          buildSortedSet();\n        }\n\n        return;\n      }\n\n      // We already tested that the document is competitive, so replace\n      // the bottom group with this new group.\n      final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = orderedGroups.pollLast();\n      assert orderedGroups.size() == topNGroups -1;\n\n      groupMap.remove(bottomGroup.groupValue);\n\n      // reuse the removed CollectedSearchGroup\n      bottomGroup.groupValue = copyDocGroupValue(groupValue, bottomGroup.groupValue);\n      bottomGroup.topDoc = docBase + doc;\n\n      for (FieldComparator fc : comparators) {\n        fc.copy(bottomGroup.comparatorSlot, doc);\n      }\n\n      groupMap.put(bottomGroup.groupValue, bottomGroup);\n      orderedGroups.add(bottomGroup);\n      assert orderedGroups.size() == topNGroups;\n\n      final int lastComparatorSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator fc : comparators) {\n        fc.setBottom(lastComparatorSlot);\n      }\n\n      return;\n    }\n\n    // Update existing group:\n    for (int compIDX = 0;; compIDX++) {\n      final FieldComparator fc = comparators[compIDX];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[compIDX] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive; set remaining comparators:\n        for (int compIDX2=compIDX+1; compIDX2<comparators.length; compIDX2++) {\n          comparators[compIDX2].copy(spareSlot, doc);\n        }\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // Remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> prevLast;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == topNGroups-1;\n    } else {\n      prevLast = null;\n    }\n\n    group.topDoc = docBase + doc;\n\n    // Swap slots\n    final int tmp = spareSlot;\n    spareSlot = group.comparatorSlot;\n    group.comparatorSlot = tmp;\n\n    // Re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == topNGroups;\n      final CollectedSearchGroup newLast = orderedGroups.last();\n      // If we changed the value of the last group, or changed which group was last, then update bottom:\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators) {\n          fc.setBottom(newLast.comparatorSlot);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#collect(int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"FP.collect doc=\" + doc);\n\n    // If orderedGroups != null we already have collected N groups and\n    // can short circuit by comparing this document to the bottom group,\n    // without having to find what group this document belongs to.\n    \n    // Even if this document belongs to a group in the top N, we'll know that\n    // we don't have to update that group.\n\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int compIDX = 0;; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (compIDX == compIDXEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // TODO: should we add option to mean \"ignore docs that\n    // don't have the group field\" (instead of stuffing them\n    // under null group)?\n    final GROUP_VALUE_TYPE groupValue = getDocGroupValue(doc);\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> group = groupMap.get(groupValue);\n\n    if (group == null) {\n\n      // First time we are seeing this group, or, we've seen\n      // it before but it fell out of the top N and is now\n      // coming back\n\n      if (groupMap.size() < topNGroups) {\n\n        // Still in startup transient: we have not\n        // seen enough unique groups to start pruning them;\n        // just keep collecting them\n\n        // Add a new CollectedSearchGroup:\n        CollectedSearchGroup<GROUP_VALUE_TYPE> sg = new CollectedSearchGroup<GROUP_VALUE_TYPE>();\n        sg.groupValue = copyDocGroupValue(groupValue, null);\n        sg.comparatorSlot = groupMap.size();\n        sg.topDoc = docBase + doc;\n        for (FieldComparator<?> fc : comparators) {\n          fc.copy(sg.comparatorSlot, doc);\n        }\n        groupMap.put(sg.groupValue, sg);\n\n        if (groupMap.size() == topNGroups) {\n          // End of startup transient: we now have max\n          // number of groups; from here on we will drop\n          // bottom group when we insert new one:\n          buildSortedSet();\n        }\n\n        return;\n      }\n\n      // We already tested that the document is competitive, so replace\n      // the bottom group with this new group.\n      final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = orderedGroups.pollLast();\n      assert orderedGroups.size() == topNGroups -1;\n\n      groupMap.remove(bottomGroup.groupValue);\n\n      // reuse the removed CollectedSearchGroup\n      bottomGroup.groupValue = copyDocGroupValue(groupValue, bottomGroup.groupValue);\n      bottomGroup.topDoc = docBase + doc;\n\n      for (FieldComparator<?> fc : comparators) {\n        fc.copy(bottomGroup.comparatorSlot, doc);\n      }\n\n      groupMap.put(bottomGroup.groupValue, bottomGroup);\n      orderedGroups.add(bottomGroup);\n      assert orderedGroups.size() == topNGroups;\n\n      final int lastComparatorSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator<?> fc : comparators) {\n        fc.setBottom(lastComparatorSlot);\n      }\n\n      return;\n    }\n\n    // Update existing group:\n    for (int compIDX = 0;; compIDX++) {\n      final FieldComparator<?> fc = comparators[compIDX];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[compIDX] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive; set remaining comparators:\n        for (int compIDX2=compIDX+1; compIDX2<comparators.length; compIDX2++) {\n          comparators[compIDX2].copy(spareSlot, doc);\n        }\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // Remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> prevLast;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == topNGroups-1;\n    } else {\n      prevLast = null;\n    }\n\n    group.topDoc = docBase + doc;\n\n    // Swap slots\n    final int tmp = spareSlot;\n    spareSlot = group.comparatorSlot;\n    group.comparatorSlot = tmp;\n\n    // Re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == topNGroups;\n      final CollectedSearchGroup newLast = orderedGroups.last();\n      // If we changed the value of the last group, or changed which group was last, then update bottom:\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator<?> fc : comparators) {\n          fc.setBottom(newLast.comparatorSlot);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"FP.collect doc=\" + doc);\n\n    // If orderedGroups != null we already have collected N groups and\n    // can short circuit by comparing this document to the bottom group,\n    // without having to find what group this document belongs to.\n    \n    // Even if this document belongs to a group in the top N, we'll know that\n    // we don't have to update that group.\n\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int compIDX = 0;; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (compIDX == compIDXEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // TODO: should we add option to mean \"ignore docs that\n    // don't have the group field\" (instead of stuffing them\n    // under null group)?\n    final GROUP_VALUE_TYPE groupValue = getDocGroupValue(doc);\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> group = groupMap.get(groupValue);\n\n    if (group == null) {\n\n      // First time we are seeing this group, or, we've seen\n      // it before but it fell out of the top N and is now\n      // coming back\n\n      if (groupMap.size() < topNGroups) {\n\n        // Still in startup transient: we have not\n        // seen enough unique groups to start pruning them;\n        // just keep collecting them\n\n        // Add a new CollectedSearchGroup:\n        CollectedSearchGroup<GROUP_VALUE_TYPE> sg = new CollectedSearchGroup<GROUP_VALUE_TYPE>();\n        sg.groupValue = copyDocGroupValue(groupValue, null);\n        sg.comparatorSlot = groupMap.size();\n        sg.topDoc = docBase + doc;\n        for (FieldComparator fc : comparators) {\n          fc.copy(sg.comparatorSlot, doc);\n        }\n        groupMap.put(sg.groupValue, sg);\n\n        if (groupMap.size() == topNGroups) {\n          // End of startup transient: we now have max\n          // number of groups; from here on we will drop\n          // bottom group when we insert new one:\n          buildSortedSet();\n        }\n\n        return;\n      }\n\n      // We already tested that the document is competitive, so replace\n      // the bottom group with this new group.\n      final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = orderedGroups.pollLast();\n      assert orderedGroups.size() == topNGroups -1;\n\n      groupMap.remove(bottomGroup.groupValue);\n\n      // reuse the removed CollectedSearchGroup\n      bottomGroup.groupValue = copyDocGroupValue(groupValue, bottomGroup.groupValue);\n      bottomGroup.topDoc = docBase + doc;\n\n      for (FieldComparator fc : comparators) {\n        fc.copy(bottomGroup.comparatorSlot, doc);\n      }\n\n      groupMap.put(bottomGroup.groupValue, bottomGroup);\n      orderedGroups.add(bottomGroup);\n      assert orderedGroups.size() == topNGroups;\n\n      final int lastComparatorSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator fc : comparators) {\n        fc.setBottom(lastComparatorSlot);\n      }\n\n      return;\n    }\n\n    // Update existing group:\n    for (int compIDX = 0;; compIDX++) {\n      final FieldComparator fc = comparators[compIDX];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[compIDX] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive; set remaining comparators:\n        for (int compIDX2=compIDX+1; compIDX2<comparators.length; compIDX2++) {\n          comparators[compIDX2].copy(spareSlot, doc);\n        }\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // Remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> prevLast;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == topNGroups-1;\n    } else {\n      prevLast = null;\n    }\n\n    group.topDoc = docBase + doc;\n\n    // Swap slots\n    final int tmp = spareSlot;\n    spareSlot = group.comparatorSlot;\n    group.comparatorSlot = tmp;\n\n    // Re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == topNGroups;\n      final CollectedSearchGroup newLast = orderedGroups.last();\n      // If we changed the value of the last group, or changed which group was last, then update bottom:\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator fc : comparators) {\n          fc.setBottom(newLast.comparatorSlot);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb008c8f8fc29e5deccfa43d8a054268ba1c5e48","date":1331199997,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#collect(int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"FP.collect doc=\" + doc);\n\n    // If orderedGroups != null we already have collected N groups and\n    // can short circuit by comparing this document to the bottom group,\n    // without having to find what group this document belongs to.\n    \n    // Even if this document belongs to a group in the top N, we'll know that\n    // we don't have to update that group.\n\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int compIDX = 0;; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (compIDX == compIDXEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // TODO: should we add option to mean \"ignore docs that\n    // don't have the group field\" (instead of stuffing them\n    // under null group)?\n    final GROUP_VALUE_TYPE groupValue = getDocGroupValue(doc);\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> group = groupMap.get(groupValue);\n\n    if (group == null) {\n\n      // First time we are seeing this group, or, we've seen\n      // it before but it fell out of the top N and is now\n      // coming back\n\n      if (groupMap.size() < topNGroups) {\n\n        // Still in startup transient: we have not\n        // seen enough unique groups to start pruning them;\n        // just keep collecting them\n\n        // Add a new CollectedSearchGroup:\n        CollectedSearchGroup<GROUP_VALUE_TYPE> sg = new CollectedSearchGroup<GROUP_VALUE_TYPE>();\n        sg.groupValue = copyDocGroupValue(groupValue, null);\n        sg.comparatorSlot = groupMap.size();\n        sg.topDoc = docBase + doc;\n        for (FieldComparator<?> fc : comparators) {\n          fc.copy(sg.comparatorSlot, doc);\n        }\n        groupMap.put(sg.groupValue, sg);\n\n        if (groupMap.size() == topNGroups) {\n          // End of startup transient: we now have max\n          // number of groups; from here on we will drop\n          // bottom group when we insert new one:\n          buildSortedSet();\n        }\n\n        return;\n      }\n\n      // We already tested that the document is competitive, so replace\n      // the bottom group with this new group.\n      final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = orderedGroups.pollLast();\n      assert orderedGroups.size() == topNGroups -1;\n\n      groupMap.remove(bottomGroup.groupValue);\n\n      // reuse the removed CollectedSearchGroup\n      bottomGroup.groupValue = copyDocGroupValue(groupValue, bottomGroup.groupValue);\n      bottomGroup.topDoc = docBase + doc;\n\n      for (FieldComparator<?> fc : comparators) {\n        fc.copy(bottomGroup.comparatorSlot, doc);\n      }\n\n      groupMap.put(bottomGroup.groupValue, bottomGroup);\n      orderedGroups.add(bottomGroup);\n      assert orderedGroups.size() == topNGroups;\n\n      final int lastComparatorSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator<?> fc : comparators) {\n        fc.setBottom(lastComparatorSlot);\n      }\n\n      return;\n    }\n\n    // Update existing group:\n    for (int compIDX = 0;; compIDX++) {\n      final FieldComparator<?> fc = comparators[compIDX];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[compIDX] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive; set remaining comparators:\n        for (int compIDX2=compIDX+1; compIDX2<comparators.length; compIDX2++) {\n          comparators[compIDX2].copy(spareSlot, doc);\n        }\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // Remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> prevLast;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == topNGroups-1;\n    } else {\n      prevLast = null;\n    }\n\n    group.topDoc = docBase + doc;\n\n    // Swap slots\n    final int tmp = spareSlot;\n    spareSlot = group.comparatorSlot;\n    group.comparatorSlot = tmp;\n\n    // Re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == topNGroups;\n      final CollectedSearchGroup<?> newLast = orderedGroups.last();\n      // If we changed the value of the last group, or changed which group was last, then update bottom:\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator<?> fc : comparators) {\n          fc.setBottom(newLast.comparatorSlot);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"FP.collect doc=\" + doc);\n\n    // If orderedGroups != null we already have collected N groups and\n    // can short circuit by comparing this document to the bottom group,\n    // without having to find what group this document belongs to.\n    \n    // Even if this document belongs to a group in the top N, we'll know that\n    // we don't have to update that group.\n\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int compIDX = 0;; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (compIDX == compIDXEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // TODO: should we add option to mean \"ignore docs that\n    // don't have the group field\" (instead of stuffing them\n    // under null group)?\n    final GROUP_VALUE_TYPE groupValue = getDocGroupValue(doc);\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> group = groupMap.get(groupValue);\n\n    if (group == null) {\n\n      // First time we are seeing this group, or, we've seen\n      // it before but it fell out of the top N and is now\n      // coming back\n\n      if (groupMap.size() < topNGroups) {\n\n        // Still in startup transient: we have not\n        // seen enough unique groups to start pruning them;\n        // just keep collecting them\n\n        // Add a new CollectedSearchGroup:\n        CollectedSearchGroup<GROUP_VALUE_TYPE> sg = new CollectedSearchGroup<GROUP_VALUE_TYPE>();\n        sg.groupValue = copyDocGroupValue(groupValue, null);\n        sg.comparatorSlot = groupMap.size();\n        sg.topDoc = docBase + doc;\n        for (FieldComparator<?> fc : comparators) {\n          fc.copy(sg.comparatorSlot, doc);\n        }\n        groupMap.put(sg.groupValue, sg);\n\n        if (groupMap.size() == topNGroups) {\n          // End of startup transient: we now have max\n          // number of groups; from here on we will drop\n          // bottom group when we insert new one:\n          buildSortedSet();\n        }\n\n        return;\n      }\n\n      // We already tested that the document is competitive, so replace\n      // the bottom group with this new group.\n      final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = orderedGroups.pollLast();\n      assert orderedGroups.size() == topNGroups -1;\n\n      groupMap.remove(bottomGroup.groupValue);\n\n      // reuse the removed CollectedSearchGroup\n      bottomGroup.groupValue = copyDocGroupValue(groupValue, bottomGroup.groupValue);\n      bottomGroup.topDoc = docBase + doc;\n\n      for (FieldComparator<?> fc : comparators) {\n        fc.copy(bottomGroup.comparatorSlot, doc);\n      }\n\n      groupMap.put(bottomGroup.groupValue, bottomGroup);\n      orderedGroups.add(bottomGroup);\n      assert orderedGroups.size() == topNGroups;\n\n      final int lastComparatorSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator<?> fc : comparators) {\n        fc.setBottom(lastComparatorSlot);\n      }\n\n      return;\n    }\n\n    // Update existing group:\n    for (int compIDX = 0;; compIDX++) {\n      final FieldComparator<?> fc = comparators[compIDX];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[compIDX] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive; set remaining comparators:\n        for (int compIDX2=compIDX+1; compIDX2<comparators.length; compIDX2++) {\n          comparators[compIDX2].copy(spareSlot, doc);\n        }\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // Remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> prevLast;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == topNGroups-1;\n    } else {\n      prevLast = null;\n    }\n\n    group.topDoc = docBase + doc;\n\n    // Swap slots\n    final int tmp = spareSlot;\n    spareSlot = group.comparatorSlot;\n    group.comparatorSlot = tmp;\n\n    // Re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == topNGroups;\n      final CollectedSearchGroup newLast = orderedGroups.last();\n      // If we changed the value of the last group, or changed which group was last, then update bottom:\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator<?> fc : comparators) {\n          fc.setBottom(newLast.comparatorSlot);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#collect(int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"FP.collect doc=\" + doc);\n\n    // If orderedGroups != null we already have collected N groups and\n    // can short circuit by comparing this document to the bottom group,\n    // without having to find what group this document belongs to.\n    \n    // Even if this document belongs to a group in the top N, we'll know that\n    // we don't have to update that group.\n\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int compIDX = 0;; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (compIDX == compIDXEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // TODO: should we add option to mean \"ignore docs that\n    // don't have the group field\" (instead of stuffing them\n    // under null group)?\n    final GROUP_VALUE_TYPE groupValue = getDocGroupValue(doc);\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> group = groupMap.get(groupValue);\n\n    if (group == null) {\n\n      // First time we are seeing this group, or, we've seen\n      // it before but it fell out of the top N and is now\n      // coming back\n\n      if (groupMap.size() < topNGroups) {\n\n        // Still in startup transient: we have not\n        // seen enough unique groups to start pruning them;\n        // just keep collecting them\n\n        // Add a new CollectedSearchGroup:\n        CollectedSearchGroup<GROUP_VALUE_TYPE> sg = new CollectedSearchGroup<GROUP_VALUE_TYPE>();\n        sg.groupValue = copyDocGroupValue(groupValue, null);\n        sg.comparatorSlot = groupMap.size();\n        sg.topDoc = docBase + doc;\n        for (FieldComparator<?> fc : comparators) {\n          fc.copy(sg.comparatorSlot, doc);\n        }\n        groupMap.put(sg.groupValue, sg);\n\n        if (groupMap.size() == topNGroups) {\n          // End of startup transient: we now have max\n          // number of groups; from here on we will drop\n          // bottom group when we insert new one:\n          buildSortedSet();\n        }\n\n        return;\n      }\n\n      // We already tested that the document is competitive, so replace\n      // the bottom group with this new group.\n      final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = orderedGroups.pollLast();\n      assert orderedGroups.size() == topNGroups -1;\n\n      groupMap.remove(bottomGroup.groupValue);\n\n      // reuse the removed CollectedSearchGroup\n      bottomGroup.groupValue = copyDocGroupValue(groupValue, bottomGroup.groupValue);\n      bottomGroup.topDoc = docBase + doc;\n\n      for (FieldComparator<?> fc : comparators) {\n        fc.copy(bottomGroup.comparatorSlot, doc);\n      }\n\n      groupMap.put(bottomGroup.groupValue, bottomGroup);\n      orderedGroups.add(bottomGroup);\n      assert orderedGroups.size() == topNGroups;\n\n      final int lastComparatorSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator<?> fc : comparators) {\n        fc.setBottom(lastComparatorSlot);\n      }\n\n      return;\n    }\n\n    // Update existing group:\n    for (int compIDX = 0;; compIDX++) {\n      final FieldComparator<?> fc = comparators[compIDX];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[compIDX] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive; set remaining comparators:\n        for (int compIDX2=compIDX+1; compIDX2<comparators.length; compIDX2++) {\n          comparators[compIDX2].copy(spareSlot, doc);\n        }\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // Remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> prevLast;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == topNGroups-1;\n    } else {\n      prevLast = null;\n    }\n\n    group.topDoc = docBase + doc;\n\n    // Swap slots\n    final int tmp = spareSlot;\n    spareSlot = group.comparatorSlot;\n    group.comparatorSlot = tmp;\n\n    // Re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == topNGroups;\n      final CollectedSearchGroup<?> newLast = orderedGroups.last();\n      // If we changed the value of the last group, or changed which group was last, then update bottom:\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator<?> fc : comparators) {\n          fc.setBottom(newLast.comparatorSlot);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"FP.collect doc=\" + doc);\n\n    // If orderedGroups != null we already have collected N groups and\n    // can short circuit by comparing this document to the bottom group,\n    // without having to find what group this document belongs to.\n    \n    // Even if this document belongs to a group in the top N, we'll know that\n    // we don't have to update that group.\n\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int compIDX = 0;; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (compIDX == compIDXEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // TODO: should we add option to mean \"ignore docs that\n    // don't have the group field\" (instead of stuffing them\n    // under null group)?\n    final GROUP_VALUE_TYPE groupValue = getDocGroupValue(doc);\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> group = groupMap.get(groupValue);\n\n    if (group == null) {\n\n      // First time we are seeing this group, or, we've seen\n      // it before but it fell out of the top N and is now\n      // coming back\n\n      if (groupMap.size() < topNGroups) {\n\n        // Still in startup transient: we have not\n        // seen enough unique groups to start pruning them;\n        // just keep collecting them\n\n        // Add a new CollectedSearchGroup:\n        CollectedSearchGroup<GROUP_VALUE_TYPE> sg = new CollectedSearchGroup<GROUP_VALUE_TYPE>();\n        sg.groupValue = copyDocGroupValue(groupValue, null);\n        sg.comparatorSlot = groupMap.size();\n        sg.topDoc = docBase + doc;\n        for (FieldComparator<?> fc : comparators) {\n          fc.copy(sg.comparatorSlot, doc);\n        }\n        groupMap.put(sg.groupValue, sg);\n\n        if (groupMap.size() == topNGroups) {\n          // End of startup transient: we now have max\n          // number of groups; from here on we will drop\n          // bottom group when we insert new one:\n          buildSortedSet();\n        }\n\n        return;\n      }\n\n      // We already tested that the document is competitive, so replace\n      // the bottom group with this new group.\n      final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = orderedGroups.pollLast();\n      assert orderedGroups.size() == topNGroups -1;\n\n      groupMap.remove(bottomGroup.groupValue);\n\n      // reuse the removed CollectedSearchGroup\n      bottomGroup.groupValue = copyDocGroupValue(groupValue, bottomGroup.groupValue);\n      bottomGroup.topDoc = docBase + doc;\n\n      for (FieldComparator<?> fc : comparators) {\n        fc.copy(bottomGroup.comparatorSlot, doc);\n      }\n\n      groupMap.put(bottomGroup.groupValue, bottomGroup);\n      orderedGroups.add(bottomGroup);\n      assert orderedGroups.size() == topNGroups;\n\n      final int lastComparatorSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator<?> fc : comparators) {\n        fc.setBottom(lastComparatorSlot);\n      }\n\n      return;\n    }\n\n    // Update existing group:\n    for (int compIDX = 0;; compIDX++) {\n      final FieldComparator<?> fc = comparators[compIDX];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[compIDX] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive; set remaining comparators:\n        for (int compIDX2=compIDX+1; compIDX2<comparators.length; compIDX2++) {\n          comparators[compIDX2].copy(spareSlot, doc);\n        }\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // Remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> prevLast;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == topNGroups-1;\n    } else {\n      prevLast = null;\n    }\n\n    group.topDoc = docBase + doc;\n\n    // Swap slots\n    final int tmp = spareSlot;\n    spareSlot = group.comparatorSlot;\n    group.comparatorSlot = tmp;\n\n    // Re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == topNGroups;\n      final CollectedSearchGroup newLast = orderedGroups.last();\n      // If we changed the value of the last group, or changed which group was last, then update bottom:\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator<?> fc : comparators) {\n          fc.setBottom(newLast.comparatorSlot);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#collect(int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractFirstPassGroupingCollector#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"FP.collect doc=\" + doc);\n\n    // If orderedGroups != null we already have collected N groups and\n    // can short circuit by comparing this document to the bottom group,\n    // without having to find what group this document belongs to.\n    \n    // Even if this document belongs to a group in the top N, we'll know that\n    // we don't have to update that group.\n\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int compIDX = 0;; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (compIDX == compIDXEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // TODO: should we add option to mean \"ignore docs that\n    // don't have the group field\" (instead of stuffing them\n    // under null group)?\n    final GROUP_VALUE_TYPE groupValue = getDocGroupValue(doc);\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> group = groupMap.get(groupValue);\n\n    if (group == null) {\n\n      // First time we are seeing this group, or, we've seen\n      // it before but it fell out of the top N and is now\n      // coming back\n\n      if (groupMap.size() < topNGroups) {\n\n        // Still in startup transient: we have not\n        // seen enough unique groups to start pruning them;\n        // just keep collecting them\n\n        // Add a new CollectedSearchGroup:\n        CollectedSearchGroup<GROUP_VALUE_TYPE> sg = new CollectedSearchGroup<GROUP_VALUE_TYPE>();\n        sg.groupValue = copyDocGroupValue(groupValue, null);\n        sg.comparatorSlot = groupMap.size();\n        sg.topDoc = docBase + doc;\n        for (FieldComparator<?> fc : comparators) {\n          fc.copy(sg.comparatorSlot, doc);\n        }\n        groupMap.put(sg.groupValue, sg);\n\n        if (groupMap.size() == topNGroups) {\n          // End of startup transient: we now have max\n          // number of groups; from here on we will drop\n          // bottom group when we insert new one:\n          buildSortedSet();\n        }\n\n        return;\n      }\n\n      // We already tested that the document is competitive, so replace\n      // the bottom group with this new group.\n      final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = orderedGroups.pollLast();\n      assert orderedGroups.size() == topNGroups -1;\n\n      groupMap.remove(bottomGroup.groupValue);\n\n      // reuse the removed CollectedSearchGroup\n      bottomGroup.groupValue = copyDocGroupValue(groupValue, bottomGroup.groupValue);\n      bottomGroup.topDoc = docBase + doc;\n\n      for (FieldComparator<?> fc : comparators) {\n        fc.copy(bottomGroup.comparatorSlot, doc);\n      }\n\n      groupMap.put(bottomGroup.groupValue, bottomGroup);\n      orderedGroups.add(bottomGroup);\n      assert orderedGroups.size() == topNGroups;\n\n      final int lastComparatorSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator<?> fc : comparators) {\n        fc.setBottom(lastComparatorSlot);\n      }\n\n      return;\n    }\n\n    // Update existing group:\n    for (int compIDX = 0;; compIDX++) {\n      final FieldComparator<?> fc = comparators[compIDX];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[compIDX] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive; set remaining comparators:\n        for (int compIDX2=compIDX+1; compIDX2<comparators.length; compIDX2++) {\n          comparators[compIDX2].copy(spareSlot, doc);\n        }\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // Remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> prevLast;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == topNGroups-1;\n    } else {\n      prevLast = null;\n    }\n\n    group.topDoc = docBase + doc;\n\n    // Swap slots\n    final int tmp = spareSlot;\n    spareSlot = group.comparatorSlot;\n    group.comparatorSlot = tmp;\n\n    // Re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == topNGroups;\n      final CollectedSearchGroup<?> newLast = orderedGroups.last();\n      // If we changed the value of the last group, or changed which group was last, then update bottom:\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator<?> fc : comparators) {\n          fc.setBottom(newLast.comparatorSlot);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    //System.out.println(\"FP.collect doc=\" + doc);\n\n    // If orderedGroups != null we already have collected N groups and\n    // can short circuit by comparing this document to the bottom group,\n    // without having to find what group this document belongs to.\n    \n    // Even if this document belongs to a group in the top N, we'll know that\n    // we don't have to update that group.\n\n    // Downside: if the number of unique groups is very low, this is\n    // wasted effort as we will most likely be updating an existing group.\n    if (orderedGroups != null) {\n      for (int compIDX = 0;; compIDX++) {\n        final int c = reversed[compIDX] * comparators[compIDX].compareBottom(doc);\n        if (c < 0) {\n          // Definitely not competitive. So don't even bother to continue\n          return;\n        } else if (c > 0) {\n          // Definitely competitive.\n          break;\n        } else if (compIDX == compIDXEnd) {\n          // Here c=0. If we're at the last comparator, this doc is not\n          // competitive, since docs are visited in doc Id order, which means\n          // this doc cannot compete with any other document in the queue.\n          return;\n        }\n      }\n    }\n\n    // TODO: should we add option to mean \"ignore docs that\n    // don't have the group field\" (instead of stuffing them\n    // under null group)?\n    final GROUP_VALUE_TYPE groupValue = getDocGroupValue(doc);\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> group = groupMap.get(groupValue);\n\n    if (group == null) {\n\n      // First time we are seeing this group, or, we've seen\n      // it before but it fell out of the top N and is now\n      // coming back\n\n      if (groupMap.size() < topNGroups) {\n\n        // Still in startup transient: we have not\n        // seen enough unique groups to start pruning them;\n        // just keep collecting them\n\n        // Add a new CollectedSearchGroup:\n        CollectedSearchGroup<GROUP_VALUE_TYPE> sg = new CollectedSearchGroup<GROUP_VALUE_TYPE>();\n        sg.groupValue = copyDocGroupValue(groupValue, null);\n        sg.comparatorSlot = groupMap.size();\n        sg.topDoc = docBase + doc;\n        for (FieldComparator<?> fc : comparators) {\n          fc.copy(sg.comparatorSlot, doc);\n        }\n        groupMap.put(sg.groupValue, sg);\n\n        if (groupMap.size() == topNGroups) {\n          // End of startup transient: we now have max\n          // number of groups; from here on we will drop\n          // bottom group when we insert new one:\n          buildSortedSet();\n        }\n\n        return;\n      }\n\n      // We already tested that the document is competitive, so replace\n      // the bottom group with this new group.\n      final CollectedSearchGroup<GROUP_VALUE_TYPE> bottomGroup = orderedGroups.pollLast();\n      assert orderedGroups.size() == topNGroups -1;\n\n      groupMap.remove(bottomGroup.groupValue);\n\n      // reuse the removed CollectedSearchGroup\n      bottomGroup.groupValue = copyDocGroupValue(groupValue, bottomGroup.groupValue);\n      bottomGroup.topDoc = docBase + doc;\n\n      for (FieldComparator<?> fc : comparators) {\n        fc.copy(bottomGroup.comparatorSlot, doc);\n      }\n\n      groupMap.put(bottomGroup.groupValue, bottomGroup);\n      orderedGroups.add(bottomGroup);\n      assert orderedGroups.size() == topNGroups;\n\n      final int lastComparatorSlot = orderedGroups.last().comparatorSlot;\n      for (FieldComparator<?> fc : comparators) {\n        fc.setBottom(lastComparatorSlot);\n      }\n\n      return;\n    }\n\n    // Update existing group:\n    for (int compIDX = 0;; compIDX++) {\n      final FieldComparator<?> fc = comparators[compIDX];\n      fc.copy(spareSlot, doc);\n\n      final int c = reversed[compIDX] * fc.compare(group.comparatorSlot, spareSlot);\n      if (c < 0) {\n        // Definitely not competitive.\n        return;\n      } else if (c > 0) {\n        // Definitely competitive; set remaining comparators:\n        for (int compIDX2=compIDX+1; compIDX2<comparators.length; compIDX2++) {\n          comparators[compIDX2].copy(spareSlot, doc);\n        }\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n\n    // Remove before updating the group since lookup is done via comparators\n    // TODO: optimize this\n\n    final CollectedSearchGroup<GROUP_VALUE_TYPE> prevLast;\n    if (orderedGroups != null) {\n      prevLast = orderedGroups.last();\n      orderedGroups.remove(group);\n      assert orderedGroups.size() == topNGroups-1;\n    } else {\n      prevLast = null;\n    }\n\n    group.topDoc = docBase + doc;\n\n    // Swap slots\n    final int tmp = spareSlot;\n    spareSlot = group.comparatorSlot;\n    group.comparatorSlot = tmp;\n\n    // Re-add the changed group\n    if (orderedGroups != null) {\n      orderedGroups.add(group);\n      assert orderedGroups.size() == topNGroups;\n      final CollectedSearchGroup<?> newLast = orderedGroups.last();\n      // If we changed the value of the last group, or changed which group was last, then update bottom:\n      if (group == newLast || prevLast != newLast) {\n        for (FieldComparator<?> fc : comparators) {\n          fc.setBottom(newLast.comparatorSlot);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","eb008c8f8fc29e5deccfa43d8a054268ba1c5e48"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["1a794f8d0ee44552f6e80ea582b695e5a1d32a0c","8bfa39296944e5fddc334aa89243d91f9cbb8367"],"eb008c8f8fc29e5deccfa43d8a054268ba1c5e48":["8bfa39296944e5fddc334aa89243d91f9cbb8367"],"c715a0f99152be7566591f323c6c5a25725a1bcb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1fa60a501961bce2ff07ee1cde7c78699025547e"],"2553b00f699380c64959ccb27991289aae87be2e":["1e7c99bd45fa88a3d93a03fdd773053bef72268e","a9973590217cf3112b309f28a4d152eda4fdd101"],"1fa60a501961bce2ff07ee1cde7c78699025547e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1fa60a501961bce2ff07ee1cde7c78699025547e","a9973590217cf3112b309f28a4d152eda4fdd101"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1fa60a501961bce2ff07ee1cde7c78699025547e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["eb008c8f8fc29e5deccfa43d8a054268ba1c5e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["1a794f8d0ee44552f6e80ea582b695e5a1d32a0c"],"1a794f8d0ee44552f6e80ea582b695e5a1d32a0c":["a9973590217cf3112b309f28a4d152eda4fdd101"],"a9973590217cf3112b309f28a4d152eda4fdd101":["1fa60a501961bce2ff07ee1cde7c78699025547e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["38e3b736c7ca086d61b7dbb841c905ee115490da"],"eb008c8f8fc29e5deccfa43d8a054268ba1c5e48":["38e3b736c7ca086d61b7dbb841c905ee115490da","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c715a0f99152be7566591f323c6c5a25725a1bcb":[],"2553b00f699380c64959ccb27991289aae87be2e":[],"1fa60a501961bce2ff07ee1cde7c78699025547e":["c715a0f99152be7566591f323c6c5a25725a1bcb","d083e83f225b11e5fdd900e83d26ddb385b6955c","1e7c99bd45fa88a3d93a03fdd773053bef72268e","a9973590217cf3112b309f28a4d152eda4fdd101"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["2553b00f699380c64959ccb27991289aae87be2e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c715a0f99152be7566591f323c6c5a25725a1bcb","1fa60a501961bce2ff07ee1cde7c78699025547e","1e7c99bd45fa88a3d93a03fdd773053bef72268e"],"1a794f8d0ee44552f6e80ea582b695e5a1d32a0c":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","8bfa39296944e5fddc334aa89243d91f9cbb8367"],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","eb008c8f8fc29e5deccfa43d8a054268ba1c5e48"],"a9973590217cf3112b309f28a4d152eda4fdd101":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","1a794f8d0ee44552f6e80ea582b695e5a1d32a0c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","c715a0f99152be7566591f323c6c5a25725a1bcb","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}