{"path":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[FieldInfo,InvertedDocConsumerPerField],SegmentWriteState).mjava","commits":[{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[FieldInfo,InvertedDocConsumerPerField],SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  void flush(Map<FieldInfo,InvertedDocConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    Map<FieldInfo,TermsHashConsumerPerField> childFields = new HashMap<FieldInfo,TermsHashConsumerPerField>();\n    Map<FieldInfo,InvertedDocConsumerPerField> nextChildFields;\n\n    if (nextTermsHash != null) {\n      nextChildFields = new HashMap<FieldInfo,InvertedDocConsumerPerField>();\n    } else {\n      nextChildFields = null;\n    }\n\n    for (final Map.Entry<FieldInfo,InvertedDocConsumerPerField> entry : fieldsToFlush.entrySet()) {\n        TermsHashPerField perField = (TermsHashPerField) entry.getValue();\n        childFields.put(entry.getKey(), perField.consumer);\n        if (nextTermsHash != null) {\n          nextChildFields.put(entry.getKey(), perField.nextPerField);\n        }\n    }\n    \n    consumer.flush(childFields, state);\n\n    if (nextTermsHash != null) {\n      nextTermsHash.flush(nextChildFields, state);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[FieldInfo,InvertedDocConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[FieldInfo,InvertedDocConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<FieldInfo,InvertedDocConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    Map<FieldInfo,TermsHashConsumerPerField> childFields = new HashMap<FieldInfo,TermsHashConsumerPerField>();\n    Map<FieldInfo,InvertedDocConsumerPerField> nextChildFields;\n\n    if (nextTermsHash != null) {\n      nextChildFields = new HashMap<FieldInfo,InvertedDocConsumerPerField>();\n    } else {\n      nextChildFields = null;\n    }\n\n    for (final Map.Entry<FieldInfo,InvertedDocConsumerPerField> entry : fieldsToFlush.entrySet()) {\n        TermsHashPerField perField = (TermsHashPerField) entry.getValue();\n        childFields.put(entry.getKey(), perField.consumer);\n        if (nextTermsHash != null) {\n          nextChildFields.put(entry.getKey(), perField.nextPerField);\n        }\n    }\n\n    consumer.flush(childFields, state);\n\n    if (nextTermsHash != null) {\n      nextTermsHash.flush(nextChildFields, state);\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<FieldInfo,InvertedDocConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    Map<FieldInfo,TermsHashConsumerPerField> childFields = new HashMap<FieldInfo,TermsHashConsumerPerField>();\n    Map<FieldInfo,InvertedDocConsumerPerField> nextChildFields;\n\n    if (nextTermsHash != null) {\n      nextChildFields = new HashMap<FieldInfo,InvertedDocConsumerPerField>();\n    } else {\n      nextChildFields = null;\n    }\n\n    for (final Map.Entry<FieldInfo,InvertedDocConsumerPerField> entry : fieldsToFlush.entrySet()) {\n        TermsHashPerField perField = (TermsHashPerField) entry.getValue();\n        childFields.put(entry.getKey(), perField.consumer);\n        if (nextTermsHash != null) {\n          nextChildFields.put(entry.getKey(), perField.nextPerField);\n        }\n    }\n    \n    consumer.flush(childFields, state);\n\n    if (nextTermsHash != null) {\n      nextTermsHash.flush(nextChildFields, state);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[FieldInfo,InvertedDocConsumerPerField],SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  void flush(Map<FieldInfo,InvertedDocConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    Map<FieldInfo,TermsHashConsumerPerField> childFields = new HashMap<FieldInfo,TermsHashConsumerPerField>();\n    Map<FieldInfo,InvertedDocConsumerPerField> nextChildFields;\n\n    if (nextTermsHash != null) {\n      nextChildFields = new HashMap<FieldInfo,InvertedDocConsumerPerField>();\n    } else {\n      nextChildFields = null;\n    }\n\n    for (final Map.Entry<FieldInfo,InvertedDocConsumerPerField> entry : fieldsToFlush.entrySet()) {\n        TermsHashPerField perField = (TermsHashPerField) entry.getValue();\n        childFields.put(entry.getKey(), perField.consumer);\n        if (nextTermsHash != null) {\n          nextChildFields.put(entry.getKey(), perField.nextPerField);\n        }\n    }\n\n    consumer.flush(childFields, state);\n\n    if (nextTermsHash != null) {\n      nextTermsHash.flush(nextChildFields, state);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[FieldInfo,InvertedDocConsumerPerField],SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  void flush(Map<FieldInfo,InvertedDocConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    Map<FieldInfo,TermsHashConsumerPerField> childFields = new HashMap<FieldInfo,TermsHashConsumerPerField>();\n    Map<FieldInfo,InvertedDocConsumerPerField> nextChildFields;\n\n    if (nextTermsHash != null) {\n      nextChildFields = new HashMap<FieldInfo,InvertedDocConsumerPerField>();\n    } else {\n      nextChildFields = null;\n    }\n\n    for (final Map.Entry<FieldInfo,InvertedDocConsumerPerField> entry : fieldsToFlush.entrySet()) {\n        TermsHashPerField perField = (TermsHashPerField) entry.getValue();\n        childFields.put(entry.getKey(), perField.consumer);\n        if (nextTermsHash != null) {\n          nextChildFields.put(entry.getKey(), perField.nextPerField);\n        }\n    }\n\n    consumer.flush(childFields, state);\n\n    if (nextTermsHash != null) {\n      nextTermsHash.flush(nextChildFields, state);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[FieldInfo,InvertedDocConsumerPerField],SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  void flush(Map<FieldInfo,InvertedDocConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    Map<FieldInfo,TermsHashConsumerPerField> childFields = new HashMap<FieldInfo,TermsHashConsumerPerField>();\n    Map<FieldInfo,InvertedDocConsumerPerField> nextChildFields;\n\n    if (nextTermsHash != null) {\n      nextChildFields = new HashMap<FieldInfo,InvertedDocConsumerPerField>();\n    } else {\n      nextChildFields = null;\n    }\n\n    for (final Map.Entry<FieldInfo,InvertedDocConsumerPerField> entry : fieldsToFlush.entrySet()) {\n        TermsHashPerField perField = (TermsHashPerField) entry.getValue();\n        childFields.put(entry.getKey(), perField.consumer);\n        if (nextTermsHash != null) {\n          nextChildFields.put(entry.getKey(), perField.nextPerField);\n        }\n    }\n\n    consumer.flush(childFields, state);\n\n    if (nextTermsHash != null) {\n      nextTermsHash.flush(nextChildFields, state);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[FieldInfo,InvertedDocConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[FieldInfo,InvertedDocConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<FieldInfo,InvertedDocConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    Map<FieldInfo,TermsHashConsumerPerField> childFields = new HashMap<FieldInfo,TermsHashConsumerPerField>();\n    Map<FieldInfo,InvertedDocConsumerPerField> nextChildFields;\n\n    if (nextTermsHash != null) {\n      nextChildFields = new HashMap<FieldInfo,InvertedDocConsumerPerField>();\n    } else {\n      nextChildFields = null;\n    }\n\n    for (final Map.Entry<FieldInfo,InvertedDocConsumerPerField> entry : fieldsToFlush.entrySet()) {\n      TermsHashPerField perField = (TermsHashPerField) entry.getValue();\n      childFields.put(entry.getKey(), perField.consumer);\n      if (nextTermsHash != null) {\n        nextChildFields.put(entry.getKey(), perField.nextPerField);\n      }\n    }\n\n    consumer.flush(childFields, state);\n\n    if (nextTermsHash != null) {\n      nextTermsHash.flush(nextChildFields, state);\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<FieldInfo,InvertedDocConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    Map<FieldInfo,TermsHashConsumerPerField> childFields = new HashMap<FieldInfo,TermsHashConsumerPerField>();\n    Map<FieldInfo,InvertedDocConsumerPerField> nextChildFields;\n\n    if (nextTermsHash != null) {\n      nextChildFields = new HashMap<FieldInfo,InvertedDocConsumerPerField>();\n    } else {\n      nextChildFields = null;\n    }\n\n    for (final Map.Entry<FieldInfo,InvertedDocConsumerPerField> entry : fieldsToFlush.entrySet()) {\n        TermsHashPerField perField = (TermsHashPerField) entry.getValue();\n        childFields.put(entry.getKey(), perField.consumer);\n        if (nextTermsHash != null) {\n          nextChildFields.put(entry.getKey(), perField.nextPerField);\n        }\n    }\n\n    consumer.flush(childFields, state);\n\n    if (nextTermsHash != null) {\n      nextTermsHash.flush(nextChildFields, state);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[FieldInfo,InvertedDocConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[FieldInfo,InvertedDocConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<FieldInfo,InvertedDocConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    Map<FieldInfo,TermsHashConsumerPerField> childFields = new HashMap<FieldInfo,TermsHashConsumerPerField>();\n    Map<FieldInfo,InvertedDocConsumerPerField> nextChildFields;\n\n    if (nextTermsHash != null) {\n      nextChildFields = new HashMap<FieldInfo,InvertedDocConsumerPerField>();\n    } else {\n      nextChildFields = null;\n    }\n\n    for (final Map.Entry<FieldInfo,InvertedDocConsumerPerField> entry : fieldsToFlush.entrySet()) {\n      TermsHashPerField perField = (TermsHashPerField) entry.getValue();\n      childFields.put(entry.getKey(), perField.consumer);\n      if (nextTermsHash != null) {\n        nextChildFields.put(entry.getKey(), perField.nextPerField);\n      }\n    }\n\n    consumer.flush(childFields, state);\n\n    if (nextTermsHash != null) {\n      nextTermsHash.flush(nextChildFields, state);\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<FieldInfo,InvertedDocConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    Map<FieldInfo,TermsHashConsumerPerField> childFields = new HashMap<FieldInfo,TermsHashConsumerPerField>();\n    Map<FieldInfo,InvertedDocConsumerPerField> nextChildFields;\n\n    if (nextTermsHash != null) {\n      nextChildFields = new HashMap<FieldInfo,InvertedDocConsumerPerField>();\n    } else {\n      nextChildFields = null;\n    }\n\n    for (final Map.Entry<FieldInfo,InvertedDocConsumerPerField> entry : fieldsToFlush.entrySet()) {\n        TermsHashPerField perField = (TermsHashPerField) entry.getValue();\n        childFields.put(entry.getKey(), perField.consumer);\n        if (nextTermsHash != null) {\n          nextChildFields.put(entry.getKey(), perField.nextPerField);\n        }\n    }\n\n    consumer.flush(childFields, state);\n\n    if (nextTermsHash != null) {\n      nextTermsHash.flush(nextChildFields, state);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[FieldInfo,InvertedDocConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[FieldInfo,InvertedDocConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<FieldInfo,InvertedDocConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    Map<FieldInfo,TermsHashConsumerPerField> childFields = new HashMap<FieldInfo,TermsHashConsumerPerField>();\n    Map<FieldInfo,InvertedDocConsumerPerField> nextChildFields;\n\n    if (nextTermsHash != null) {\n      nextChildFields = new HashMap<FieldInfo,InvertedDocConsumerPerField>();\n    } else {\n      nextChildFields = null;\n    }\n\n    for (final Map.Entry<FieldInfo,InvertedDocConsumerPerField> entry : fieldsToFlush.entrySet()) {\n      TermsHashPerField perField = (TermsHashPerField) entry.getValue();\n      childFields.put(entry.getKey(), perField.consumer);\n      if (nextTermsHash != null) {\n        nextChildFields.put(entry.getKey(), perField.nextPerField);\n      }\n    }\n\n    consumer.flush(childFields, state);\n\n    if (nextTermsHash != null) {\n      nextTermsHash.flush(nextChildFields, state);\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<FieldInfo,InvertedDocConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    Map<FieldInfo,TermsHashConsumerPerField> childFields = new HashMap<FieldInfo,TermsHashConsumerPerField>();\n    Map<FieldInfo,InvertedDocConsumerPerField> nextChildFields;\n\n    if (nextTermsHash != null) {\n      nextChildFields = new HashMap<FieldInfo,InvertedDocConsumerPerField>();\n    } else {\n      nextChildFields = null;\n    }\n\n    for (final Map.Entry<FieldInfo,InvertedDocConsumerPerField> entry : fieldsToFlush.entrySet()) {\n        TermsHashPerField perField = (TermsHashPerField) entry.getValue();\n        childFields.put(entry.getKey(), perField.consumer);\n        if (nextTermsHash != null) {\n          nextChildFields.put(entry.getKey(), perField.nextPerField);\n        }\n    }\n\n    consumer.flush(childFields, state);\n\n    if (nextTermsHash != null) {\n      nextTermsHash.flush(nextChildFields, state);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermsHash#flush(Map[FieldInfo,InvertedDocConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[FieldInfo,InvertedDocConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<FieldInfo,InvertedDocConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    Map<FieldInfo,TermsHashConsumerPerField> childFields = new HashMap<FieldInfo,TermsHashConsumerPerField>();\n    Map<FieldInfo,InvertedDocConsumerPerField> nextChildFields;\n\n    if (nextTermsHash != null) {\n      nextChildFields = new HashMap<FieldInfo,InvertedDocConsumerPerField>();\n    } else {\n      nextChildFields = null;\n    }\n\n    for (final Map.Entry<FieldInfo,InvertedDocConsumerPerField> entry : fieldsToFlush.entrySet()) {\n      TermsHashPerField perField = (TermsHashPerField) entry.getValue();\n      childFields.put(entry.getKey(), perField.consumer);\n      if (nextTermsHash != null) {\n        nextChildFields.put(entry.getKey(), perField.nextPerField);\n      }\n    }\n\n    consumer.flush(childFields, state);\n\n    if (nextTermsHash != null) {\n      nextTermsHash.flush(nextChildFields, state);\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<FieldInfo,InvertedDocConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    Map<FieldInfo,TermsHashConsumerPerField> childFields = new HashMap<FieldInfo,TermsHashConsumerPerField>();\n    Map<FieldInfo,InvertedDocConsumerPerField> nextChildFields;\n\n    if (nextTermsHash != null) {\n      nextChildFields = new HashMap<FieldInfo,InvertedDocConsumerPerField>();\n    } else {\n      nextChildFields = null;\n    }\n\n    for (final Map.Entry<FieldInfo,InvertedDocConsumerPerField> entry : fieldsToFlush.entrySet()) {\n      TermsHashPerField perField = (TermsHashPerField) entry.getValue();\n      childFields.put(entry.getKey(), perField.consumer);\n      if (nextTermsHash != null) {\n        nextChildFields.put(entry.getKey(), perField.nextPerField);\n      }\n    }\n\n    consumer.flush(childFields, state);\n\n    if (nextTermsHash != null) {\n      nextTermsHash.flush(nextChildFields, state);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","efb7a19703a037c29e30440260d393500febc1f4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["efb7a19703a037c29e30440260d393500febc1f4"],"efb7a19703a037c29e30440260d393500febc1f4":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["6c18273ea5b3974d2f30117f46f1ae416c28f727","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"efb7a19703a037c29e30440260d393500febc1f4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","3a119bbc8703c10faa329ec201c654b3a35a1e3e","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c18273ea5b3974d2f30117f46f1ae416c28f727","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["efb7a19703a037c29e30440260d393500febc1f4","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}