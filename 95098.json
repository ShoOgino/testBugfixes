{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#setUseRetry(DefaultHttpClient,boolean).mjava","commits":[{"id":"eb99886ff640d94edb43e0d36112a2b7023379ba","date":1338292884,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#setUseRetry(DefaultHttpClient,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Control retry handler \n   * @param useRetry when false the client will not try to retry failed requests.\n   */\n  public static void setUseRetry(final DefaultHttpClient httpClient,\n      boolean useRetry) {\n    if (!useRetry) {\n      httpClient.setHttpRequestRetryHandler(NO_RETRY);\n    } else {\n      httpClient.setHttpRequestRetryHandler(new DefaultHttpRequestRetryHandler());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1491861ccc4b32acaaafd00c1b50fb7babb02475"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1491861ccc4b32acaaafd00c1b50fb7babb02475","date":1421260700,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#setUseRetry(DefaultHttpClient,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#setUseRetry(DefaultHttpClient,boolean).mjava","sourceNew":"  /**\n   * Control retry handler \n   * @param useRetry when false the client will not try to retry failed requests.\n   */\n  public static void setUseRetry(final DefaultHttpClient httpClient,\n      boolean useRetry) {\n    if (!useRetry) {\n      httpClient.setHttpRequestRetryHandler(NO_RETRY);\n    } else {\n      // if the request is not fully sent, we retry\n      // streaming updates are not a problem, because they are not retryable\n      httpClient.setHttpRequestRetryHandler(new DefaultHttpRequestRetryHandler(){\n        @Override\n        protected boolean handleAsIdempotent(final HttpRequest request) {\n          return false; // we can't tell if a Solr request is idempotent\n        }\n      });\n    }\n  }\n\n","sourceOld":"  /**\n   * Control retry handler \n   * @param useRetry when false the client will not try to retry failed requests.\n   */\n  public static void setUseRetry(final DefaultHttpClient httpClient,\n      boolean useRetry) {\n    if (!useRetry) {\n      httpClient.setHttpRequestRetryHandler(NO_RETRY);\n    } else {\n      httpClient.setHttpRequestRetryHandler(new DefaultHttpRequestRetryHandler());\n    }\n  }\n\n","bugFix":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"036a8cf905384ab37a3bc5c07283c3b44b773585","date":1452195789,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#setUseRetry(DefaultHttpClient,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#setUseRetry(DefaultHttpClient,boolean).mjava","sourceNew":"  /**\n   * Control retry handler \n   * @param useRetry when false the client will not try to retry failed requests.\n   */\n  public static void setUseRetry(final DefaultHttpClient httpClient,\n      boolean useRetry) {\n    if (!useRetry) {\n      httpClient.setHttpRequestRetryHandler(NO_RETRY);\n    } else {\n      // if the request is not fully sent, we retry\n      // streaming updates are not a problem, because they are not retryable\n      httpClient.setHttpRequestRetryHandler(new SolrHttpRequestRetryHandler(3));\n    }\n  }\n\n","sourceOld":"  /**\n   * Control retry handler \n   * @param useRetry when false the client will not try to retry failed requests.\n   */\n  public static void setUseRetry(final DefaultHttpClient httpClient,\n      boolean useRetry) {\n    if (!useRetry) {\n      httpClient.setHttpRequestRetryHandler(NO_RETRY);\n    } else {\n      // if the request is not fully sent, we retry\n      // streaming updates are not a problem, because they are not retryable\n      httpClient.setHttpRequestRetryHandler(new DefaultHttpRequestRetryHandler(){\n        @Override\n        protected boolean handleAsIdempotent(final HttpRequest request) {\n          return false; // we can't tell if a Solr request is idempotent\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":4,"author":"markrmiller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil#setUseRetry(DefaultHttpClient,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Control retry handler \n   * @param useRetry when false the client will not try to retry failed requests.\n   */\n  public static void setUseRetry(final DefaultHttpClient httpClient,\n      boolean useRetry) {\n    if (!useRetry) {\n      httpClient.setHttpRequestRetryHandler(NO_RETRY);\n    } else {\n      // if the request is not fully sent, we retry\n      // streaming updates are not a problem, because they are not retryable\n      httpClient.setHttpRequestRetryHandler(new SolrHttpRequestRetryHandler(3));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"859081acf00749f5dd462772c571d611d4a4d2db":["036a8cf905384ab37a3bc5c07283c3b44b773585"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"036a8cf905384ab37a3bc5c07283c3b44b773585":["1491861ccc4b32acaaafd00c1b50fb7babb02475"],"1491861ccc4b32acaaafd00c1b50fb7babb02475":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"eb99886ff640d94edb43e0d36112a2b7023379ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["859081acf00749f5dd462772c571d611d4a4d2db"]},"commit2Childs":{"859081acf00749f5dd462772c571d611d4a4d2db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eb99886ff640d94edb43e0d36112a2b7023379ba"],"036a8cf905384ab37a3bc5c07283c3b44b773585":["859081acf00749f5dd462772c571d611d4a4d2db"],"1491861ccc4b32acaaafd00c1b50fb7babb02475":["036a8cf905384ab37a3bc5c07283c3b44b773585"],"eb99886ff640d94edb43e0d36112a2b7023379ba":["1491861ccc4b32acaaafd00c1b50fb7babb02475"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}