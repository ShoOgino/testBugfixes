{"path":"solr/test-framework/src/java/org/apache/solr/cloud/CloudInspectUtil#compareResults(SolrServer,SolrServer,Set[String],Set[String]).mjava","commits":[{"id":"4339eef0c1b12030c8590187e652cd1cd0a1f3cb","date":1397833225,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/CloudInspectUtil#compareResults(SolrServer,SolrServer,Set[String],Set[String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#compareResults(long,long,Set[String],Set[String]).mjava","sourceNew":"  /**\n   * Compares the results of the control and cloud clients.\n   * \n   * @return true if the compared results are illegal.\n   */\n  public static boolean compareResults(SolrServer controlServer, SolrServer cloudServer, Set<String> addFails, Set<String> deleteFails)\n      throws SolrServerException {\n    \n    SolrParams q = SolrTestCaseJ4.params(\"q\",\"*:*\",\"rows\",\"0\", \"tests\",\"checkShardConsistency(vsControl)\");    // add a tag to aid in debugging via logs\n\n    SolrDocumentList controlDocList = controlServer.query(q).getResults();\n    long controlDocs = controlDocList.getNumFound();\n\n    SolrDocumentList cloudDocList = cloudServer.query(q).getResults();\n    long cloudClientDocs = cloudDocList.getNumFound();\n    \n    // re-execute the query getting ids\n    q = SolrTestCaseJ4.params(\"q\",\"*:*\",\"rows\",\"100000\", \"fl\",\"id\", \"tests\",\"checkShardConsistency(vsControl)/getIds\");    // add a tag to aid in debugging via logs\n    controlDocList = controlServer.query(q).getResults();\n    if (controlDocs != controlDocList.getNumFound()) {\n      log.error(\"Something changed! control now \" + controlDocList.getNumFound());\n    };\n\n    cloudDocList = cloudServer.query(q).getResults();\n    if (cloudClientDocs != cloudDocList.getNumFound()) {\n      log.error(\"Something changed! cloudClient now \" + cloudDocList.getNumFound());\n    };\n\n    if (controlDocs != cloudClientDocs && (addFails != null || deleteFails != null)) {\n      boolean legal = CloudInspectUtil.checkIfDiffIsLegal(controlDocList, cloudDocList,\n          \"controlDocList\", \"cloudDocList\", addFails, deleteFails);\n      if (legal) {\n        return false;\n      }\n    }\n    \n    Set<Map> differences = CloudInspectUtil.showDiff(controlDocList, cloudDocList,\n        \"controlDocList\", \"cloudDocList\");\n\n    // get versions for the mismatched ids\n    boolean foundId = false;\n    StringBuilder ids = new StringBuilder(\"id:(\");\n    for (Map doc : differences) {\n      ids.append(\" \"+doc.get(\"id\"));\n      foundId = true;\n    }\n    ids.append(\")\");\n    \n    if (foundId) {\n      // get versions for those ids that don't match\n      q = SolrTestCaseJ4.params(\"q\", ids.toString(), \"rows\", \"100000\", \"fl\", \"id,_version_\",\n          \"sort\", \"id asc\", \"tests\",\n          \"checkShardConsistency(vsControl)/getVers\"); // add a tag to aid in\n                                                       // debugging via logs\n      \n      SolrDocumentList a = controlServer.query(q).getResults();\n      SolrDocumentList b = cloudServer.query(q).getResults();\n      \n      log.error(\"controlClient :\" + a + \"\\n\\tcloudClient :\" + b);\n    }\n    \n    return true;\n  }\n\n","sourceOld":"  protected boolean compareResults(long controlDocs, long cloudClientDocs, Set<String> addFails, Set<String> deleteFails)\n      throws SolrServerException {\n    SolrParams q;\n    SolrDocumentList controlDocList;\n    SolrDocumentList cloudDocList;\n    // re-execute the query getting ids\n    q = params(\"q\",\"*:*\",\"rows\",\"100000\", \"fl\",\"id\", \"tests\",\"checkShardConsistency(vsControl)/getIds\");    // add a tag to aid in debugging via logs\n    controlDocList = controlClient.query(q).getResults();\n    if (controlDocs != controlDocList.getNumFound()) {\n      log.error(\"Something changed! control now \" + controlDocList.getNumFound());\n    };\n\n    cloudDocList = cloudClient.query(q).getResults();\n    if (cloudClientDocs != cloudDocList.getNumFound()) {\n      log.error(\"Something changed! cloudClient now \" + cloudDocList.getNumFound());\n    };\n\n    if (addFails != null || deleteFails != null) {\n      boolean legal = checkIfDiffIsLegal(controlDocList, cloudDocList,\n          \"controlDocList\", \"cloudDocList\", addFails, deleteFails);\n      if (legal) {\n        return false;\n      }\n    }\n    \n    Set<Map> differences = showDiff(controlDocList, cloudDocList,\n        \"controlDocList\", \"cloudDocList\");\n\n    // get versions for the mismatched ids\n    boolean foundId = false;\n    StringBuilder ids = new StringBuilder(\"id:(\");\n    for (Map doc : differences) {\n      ids.append(\" \"+doc.get(\"id\"));\n      foundId = true;\n    }\n    ids.append(\")\");\n    \n    if (foundId) {\n      // get versions for those ids that don't match\n      q = params(\"q\", ids.toString(), \"rows\", \"100000\", \"fl\", \"id,_version_\",\n          \"sort\", \"id asc\", \"tests\",\n          \"checkShardConsistency(vsControl)/getVers\"); // add a tag to aid in\n                                                       // debugging via logs\n      \n      SolrDocumentList a = controlClient.query(q).getResults();\n      SolrDocumentList b = cloudClient.query(q).getResults();\n      \n      log.error(\"controlClient :\" + a + \"\\n\\tcloudClient :\" + b);\n    }\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/CloudInspectUtil#compareResults(SolrClient,SolrClient,Set[String],Set[String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/CloudInspectUtil#compareResults(SolrServer,SolrServer,Set[String],Set[String]).mjava","sourceNew":"  /**\n   * Compares the results of the control and cloud clients.\n   * \n   * @return true if the compared results are illegal.\n   */\n  public static boolean compareResults(SolrClient controlClient, SolrClient cloudClient, Set<String> addFails, Set<String> deleteFails)\n      throws SolrServerException {\n    \n    SolrParams q = SolrTestCaseJ4.params(\"q\",\"*:*\",\"rows\",\"0\", \"tests\",\"checkShardConsistency(vsControl)\");    // add a tag to aid in debugging via logs\n\n    SolrDocumentList controlDocList = controlClient.query(q).getResults();\n    long controlDocs = controlDocList.getNumFound();\n\n    SolrDocumentList cloudDocList = cloudClient.query(q).getResults();\n    long cloudClientDocs = cloudDocList.getNumFound();\n    \n    // re-execute the query getting ids\n    q = SolrTestCaseJ4.params(\"q\", \"*:*\", \"rows\", \"100000\", \"fl\", \"id\", \"tests\", \"checkShardConsistency(vsControl)/getIds\");    // add a tag to aid in debugging via logs\n    controlDocList = controlClient.query(q).getResults();\n    if (controlDocs != controlDocList.getNumFound()) {\n      log.error(\"Something changed! control now \" + controlDocList.getNumFound());\n    };\n\n    cloudDocList = cloudClient.query(q).getResults();\n    if (cloudClientDocs != cloudDocList.getNumFound()) {\n      log.error(\"Something changed! cloudClient now \" + cloudDocList.getNumFound());\n    };\n\n    if (controlDocs != cloudClientDocs && (addFails != null || deleteFails != null)) {\n      boolean legal = CloudInspectUtil.checkIfDiffIsLegal(controlDocList, cloudDocList,\n          \"controlDocList\", \"cloudDocList\", addFails, deleteFails);\n      if (legal) {\n        return false;\n      }\n    }\n    \n    Set<Map> differences = CloudInspectUtil.showDiff(controlDocList, cloudDocList,\n        \"controlDocList\", \"cloudDocList\");\n\n    // get versions for the mismatched ids\n    boolean foundId = false;\n    StringBuilder ids = new StringBuilder(\"id:(\");\n    for (Map doc : differences) {\n      ids.append(\" \"+doc.get(\"id\"));\n      foundId = true;\n    }\n    ids.append(\")\");\n    \n    if (foundId) {\n      // get versions for those ids that don't match\n      q = SolrTestCaseJ4.params(\"q\", ids.toString(), \"rows\", \"100000\", \"fl\", \"id,_version_\",\n          \"sort\", \"id asc\", \"tests\",\n          \"checkShardConsistency(vsControl)/getVers\"); // add a tag to aid in\n                                                       // debugging via logs\n      \n      SolrDocumentList a = controlClient.query(q).getResults();\n      SolrDocumentList b = cloudClient.query(q).getResults();\n      \n      log.error(\"controlClient :\" + a + \"\\n\\tcloudClient :\" + b);\n    }\n    \n    return true;\n  }\n\n","sourceOld":"  /**\n   * Compares the results of the control and cloud clients.\n   * \n   * @return true if the compared results are illegal.\n   */\n  public static boolean compareResults(SolrServer controlServer, SolrServer cloudServer, Set<String> addFails, Set<String> deleteFails)\n      throws SolrServerException {\n    \n    SolrParams q = SolrTestCaseJ4.params(\"q\",\"*:*\",\"rows\",\"0\", \"tests\",\"checkShardConsistency(vsControl)\");    // add a tag to aid in debugging via logs\n\n    SolrDocumentList controlDocList = controlServer.query(q).getResults();\n    long controlDocs = controlDocList.getNumFound();\n\n    SolrDocumentList cloudDocList = cloudServer.query(q).getResults();\n    long cloudClientDocs = cloudDocList.getNumFound();\n    \n    // re-execute the query getting ids\n    q = SolrTestCaseJ4.params(\"q\",\"*:*\",\"rows\",\"100000\", \"fl\",\"id\", \"tests\",\"checkShardConsistency(vsControl)/getIds\");    // add a tag to aid in debugging via logs\n    controlDocList = controlServer.query(q).getResults();\n    if (controlDocs != controlDocList.getNumFound()) {\n      log.error(\"Something changed! control now \" + controlDocList.getNumFound());\n    };\n\n    cloudDocList = cloudServer.query(q).getResults();\n    if (cloudClientDocs != cloudDocList.getNumFound()) {\n      log.error(\"Something changed! cloudClient now \" + cloudDocList.getNumFound());\n    };\n\n    if (controlDocs != cloudClientDocs && (addFails != null || deleteFails != null)) {\n      boolean legal = CloudInspectUtil.checkIfDiffIsLegal(controlDocList, cloudDocList,\n          \"controlDocList\", \"cloudDocList\", addFails, deleteFails);\n      if (legal) {\n        return false;\n      }\n    }\n    \n    Set<Map> differences = CloudInspectUtil.showDiff(controlDocList, cloudDocList,\n        \"controlDocList\", \"cloudDocList\");\n\n    // get versions for the mismatched ids\n    boolean foundId = false;\n    StringBuilder ids = new StringBuilder(\"id:(\");\n    for (Map doc : differences) {\n      ids.append(\" \"+doc.get(\"id\"));\n      foundId = true;\n    }\n    ids.append(\")\");\n    \n    if (foundId) {\n      // get versions for those ids that don't match\n      q = SolrTestCaseJ4.params(\"q\", ids.toString(), \"rows\", \"100000\", \"fl\", \"id,_version_\",\n          \"sort\", \"id asc\", \"tests\",\n          \"checkShardConsistency(vsControl)/getVers\"); // add a tag to aid in\n                                                       // debugging via logs\n      \n      SolrDocumentList a = controlServer.query(q).getResults();\n      SolrDocumentList b = cloudServer.query(q).getResults();\n      \n      log.error(\"controlClient :\" + a + \"\\n\\tcloudClient :\" + b);\n    }\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":["0d875c2ae53d9e38d16cd0c08ff91c02202936d8"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["4339eef0c1b12030c8590187e652cd1cd0a1f3cb"],"4339eef0c1b12030c8590187e652cd1cd0a1f3cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4339eef0c1b12030c8590187e652cd1cd0a1f3cb"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4339eef0c1b12030c8590187e652cd1cd0a1f3cb":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}