{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.SegmentTermsEnum#nextBlock().mjava","commits":[{"id":"6d01ed6d1df51191983f4dd157aedf5f4650e2b3","date":1376572546,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.SegmentTermsEnum#nextBlock().mjava","pathOld":"/dev/null","sourceNew":"      /* Does initial decode of next block of terms; this\n         doesn't actually decode the docFreq, totalTermFreq,\n         postings details (frq/prx offset, etc.) metadata;\n         it just loads them as byte[] blobs which are then      \n         decoded on-demand if the metadata is ever requested\n         for any term in this block.  This enables terms-only\n         intensive consumes (eg certain MTQs, respelling) to\n         not pay the price of decoding metadata they won't\n         use. */\n      private boolean nextBlock() throws IOException {\n\n        // TODO: we still lazy-decode the byte[] for each\n        // term (the suffix), but, if we decoded\n        // all N terms up front then seeking could do a fast\n        // bsearch w/in the block...\n\n        //System.out.println(\"BTR.nextBlock() fp=\" + in.getFilePointer() + \" this=\" + this);\n        state.blockFilePointer = in.getFilePointer();\n        blockTermCount = in.readVInt();\n        //System.out.println(\"  blockTermCount=\" + blockTermCount);\n        if (blockTermCount == 0) {\n          return false;\n        }\n        termBlockPrefix = in.readVInt();\n\n        // term suffixes:\n        int len = in.readVInt();\n        if (termSuffixes.length < len) {\n          termSuffixes = new byte[ArrayUtil.oversize(len, 1)];\n        }\n        //System.out.println(\"  termSuffixes len=\" + len);\n        in.readBytes(termSuffixes, 0, len);\n        termSuffixesReader.reset(termSuffixes, 0, len);\n\n        // docFreq, totalTermFreq\n        len = in.readVInt();\n        if (docFreqBytes.length < len) {\n          docFreqBytes = new byte[ArrayUtil.oversize(len, 1)];\n        }\n        //System.out.println(\"  freq bytes len=\" + len);\n        in.readBytes(docFreqBytes, 0, len);\n        freqReader.reset(docFreqBytes, 0, len);\n\n        // metadata\n        len = in.readVInt();\n        if (bytes == null) {\n          bytes = new byte[ArrayUtil.oversize(len, 1)];\n          bytesReader = new ByteArrayDataInput();\n        } else if (bytes.length < len) {\n          bytes = new byte[ArrayUtil.oversize(len, 1)];\n        }\n        in.readBytes(bytes, 0, len);\n        bytesReader.reset(bytes, 0, len);\n\n        metaDataUpto = 0;\n        state.termBlockOrd = 0;\n\n        indexIsCurrent = false;\n        //System.out.println(\"  indexIsCurrent=\" + indexIsCurrent);\n\n        return true;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.SegmentTermsEnum#nextBlock().mjava","sourceNew":null,"sourceOld":"      /* Does initial decode of next block of terms; this\n         doesn't actually decode the docFreq, totalTermFreq,\n         postings details (frq/prx offset, etc.) metadata;\n         it just loads them as byte[] blobs which are then      \n         decoded on-demand if the metadata is ever requested\n         for any term in this block.  This enables terms-only\n         intensive consumes (eg certain MTQs, respelling) to\n         not pay the price of decoding metadata they won't\n         use. */\n      private boolean nextBlock() throws IOException {\n\n        // TODO: we still lazy-decode the byte[] for each\n        // term (the suffix), but, if we decoded\n        // all N terms up front then seeking could do a fast\n        // bsearch w/in the block...\n\n        //System.out.println(\"BTR.nextBlock() fp=\" + in.getFilePointer() + \" this=\" + this);\n        state.blockFilePointer = in.getFilePointer();\n        blockTermCount = in.readVInt();\n        //System.out.println(\"  blockTermCount=\" + blockTermCount);\n        if (blockTermCount == 0) {\n          return false;\n        }\n        termBlockPrefix = in.readVInt();\n\n        // term suffixes:\n        int len = in.readVInt();\n        if (termSuffixes.length < len) {\n          termSuffixes = new byte[ArrayUtil.oversize(len, 1)];\n        }\n        //System.out.println(\"  termSuffixes len=\" + len);\n        in.readBytes(termSuffixes, 0, len);\n        termSuffixesReader.reset(termSuffixes, 0, len);\n\n        // docFreq, totalTermFreq\n        len = in.readVInt();\n        if (docFreqBytes.length < len) {\n          docFreqBytes = new byte[ArrayUtil.oversize(len, 1)];\n        }\n        //System.out.println(\"  freq bytes len=\" + len);\n        in.readBytes(docFreqBytes, 0, len);\n        freqReader.reset(docFreqBytes, 0, len);\n\n        // metadata\n        len = in.readVInt();\n        if (bytes == null) {\n          bytes = new byte[ArrayUtil.oversize(len, 1)];\n          bytesReader = new ByteArrayDataInput();\n        } else if (bytes.length < len) {\n          bytes = new byte[ArrayUtil.oversize(len, 1)];\n        }\n        in.readBytes(bytes, 0, len);\n        bytesReader.reset(bytes, 0, len);\n\n        metaDataUpto = 0;\n        state.termBlockOrd = 0;\n\n        indexIsCurrent = false;\n        //System.out.println(\"  indexIsCurrent=\" + indexIsCurrent);\n\n        return true;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3"],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}