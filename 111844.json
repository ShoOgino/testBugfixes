{"path":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#request(SolrClient,MetricsQuery).mjava","commits":[{"id":"4cd8a9425419baa85ef4a56ed411ffb4c57964d3","date":1551677567,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#request(SolrClient,MetricsQuery).mjava","pathOld":"/dev/null","sourceNew":"  protected MetricSamples request(SolrClient client, MetricsQuery query) throws IOException {\n    MetricSamples samples = new MetricSamples();\n\n    QueryRequest queryRequest = new QueryRequest(query.getParameters());\n    queryRequest.setPath(query.getPath());\n\n    NamedList<Object> queryResponse = null;\n    try {\n      if (!query.getCollection().isPresent() && !query.getCore().isPresent()) {\n        queryResponse = client.request(queryRequest);\n      } else if (query.getCore().isPresent()) {\n        queryResponse = client.request(queryRequest, query.getCore().get());\n      } else if (query.getCollection().isPresent()) {\n        queryResponse = client.request(queryRequest, query.getCollection().get());\n      }\n    } catch (SolrServerException | IOException e) {\n      log.error(\"failed to request: \" + queryRequest.getPath() + \" \" + e.getMessage());\n    }\n\n    JsonNode jsonNode = OBJECT_MAPPER.readTree((String) queryResponse.get(\"response\"));\n\n    for (JsonQuery jsonQuery : query.getJsonQueries()) {\n      try {\n        List<JsonNode> results = jsonQuery.apply(jsonNode);\n        for (JsonNode result : results) {\n          String type = result.get(\"type\").textValue();\n          String name = result.get(\"name\").textValue();\n          String help = result.get(\"help\").textValue();\n          double value = result.get(\"value\").doubleValue();\n\n          List<String> labelNames = new ArrayList<>();\n          List<String> labelValues = new ArrayList<>();\n\n          /* Labels in response */\n          for (JsonNode item : result.get(\"label_names\")) {\n            labelNames.add(item.textValue());\n          }\n\n          for (JsonNode item : result.get(\"label_values\")) {\n            labelValues.add(item.textValue());\n          }\n\n          /* Labels due to client */\n          if (client instanceof HttpSolrClient) {\n            labelNames.add(\"base_url\");\n            labelValues.add(((HttpSolrClient) client).getBaseURL());\n          }\n\n          if (client instanceof CloudSolrClient) {\n            labelNames.add(\"zk_host\");\n            labelValues.add(((CloudSolrClient) client).getZkHost());\n          }\n\n          // Deduce core if not there\n          if (labelNames.indexOf(\"core\") < 0 && labelNames.indexOf(\"collection\") >= 0 && labelNames.indexOf(\"shard\") >= 0 && labelNames.indexOf(\"replica\") >= 0) {\n            labelNames.add(\"core\");\n\n            String collection = labelValues.get(labelNames.indexOf(\"collection\"));\n            String shard = labelValues.get(labelNames.indexOf(\"shard\"));\n            String replica = labelValues.get(labelNames.indexOf(\"replica\"));\n\n            labelValues.add(collection + \"_\" + shard + \"_\" + replica);\n          }\n\n          samples.addSamplesIfNotPresent(name, new Collector.MetricFamilySamples(\n              name,\n              Collector.Type.valueOf(type),\n              help,\n              new ArrayList<>()));\n\n          samples.addSampleIfMetricExists(name, new Collector.MetricFamilySamples.Sample(\n              name, labelNames, labelValues, value));\n        }\n      } catch (JsonQueryException e) {\n        log.error(\"Error apply JSON query={} to result\", jsonQuery.toString(), e);\n        scrapeErrorTotal.inc();\n      }\n    }\n\n    return samples;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#request(SolrClient,MetricsQuery).mjava","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#request(SolrClient,MetricsQuery).mjava","sourceNew":"  protected MetricSamples request(SolrClient client, MetricsQuery query) throws IOException {\n    MetricSamples samples = new MetricSamples();\n\n    QueryRequest queryRequest = new QueryRequest(query.getParameters());\n    queryRequest.setPath(query.getPath());\n\n    NamedList<Object> queryResponse = null;\n    try {\n      if (!query.getCollection().isPresent() && !query.getCore().isPresent()) {\n        queryResponse = client.request(queryRequest);\n      } else if (query.getCore().isPresent()) {\n        queryResponse = client.request(queryRequest, query.getCore().get());\n      } else if (query.getCollection().isPresent()) {\n        queryResponse = client.request(queryRequest, query.getCollection().get());\n      }\n    } catch (SolrServerException | IOException e) {\n      log.error(\"failed to request: {} {}\", queryRequest.getPath(), e.getMessage());\n    }\n\n    JsonNode jsonNode = OBJECT_MAPPER.readTree((String) queryResponse.get(\"response\"));\n\n    for (JsonQuery jsonQuery : query.getJsonQueries()) {\n      try {\n        List<JsonNode> results = jsonQuery.apply(jsonNode);\n        for (JsonNode result : results) {\n          String type = result.get(\"type\").textValue();\n          String name = result.get(\"name\").textValue();\n          String help = result.get(\"help\").textValue();\n          double value = result.get(\"value\").doubleValue();\n\n          List<String> labelNames = new ArrayList<>();\n          List<String> labelValues = new ArrayList<>();\n\n          /* Labels in response */\n          for (JsonNode item : result.get(\"label_names\")) {\n            labelNames.add(item.textValue());\n          }\n\n          for (JsonNode item : result.get(\"label_values\")) {\n            labelValues.add(item.textValue());\n          }\n\n          /* Labels due to client */\n          if (client instanceof HttpSolrClient) {\n            labelNames.add(\"base_url\");\n            labelValues.add(((HttpSolrClient) client).getBaseURL());\n          }\n\n          if (client instanceof CloudSolrClient) {\n            labelNames.add(\"zk_host\");\n            labelValues.add(((CloudSolrClient) client).getZkHost());\n          }\n\n          // Deduce core if not there\n          if (labelNames.indexOf(\"core\") < 0 && labelNames.indexOf(\"collection\") >= 0 && labelNames.indexOf(\"shard\") >= 0 && labelNames.indexOf(\"replica\") >= 0) {\n            labelNames.add(\"core\");\n\n            String collection = labelValues.get(labelNames.indexOf(\"collection\"));\n            String shard = labelValues.get(labelNames.indexOf(\"shard\"));\n            String replica = labelValues.get(labelNames.indexOf(\"replica\"));\n\n            labelValues.add(collection + \"_\" + shard + \"_\" + replica);\n          }\n\n          samples.addSamplesIfNotPresent(name, new Collector.MetricFamilySamples(\n              name,\n              Collector.Type.valueOf(type),\n              help,\n              new ArrayList<>()));\n\n          samples.addSampleIfMetricExists(name, new Collector.MetricFamilySamples.Sample(\n              name, labelNames, labelValues, value));\n        }\n      } catch (JsonQueryException e) {\n        log.error(\"Error apply JSON query={} to result\", jsonQuery, e);\n        scrapeErrorTotal.inc();\n      }\n    }\n\n    return samples;\n  }\n\n","sourceOld":"  protected MetricSamples request(SolrClient client, MetricsQuery query) throws IOException {\n    MetricSamples samples = new MetricSamples();\n\n    QueryRequest queryRequest = new QueryRequest(query.getParameters());\n    queryRequest.setPath(query.getPath());\n\n    NamedList<Object> queryResponse = null;\n    try {\n      if (!query.getCollection().isPresent() && !query.getCore().isPresent()) {\n        queryResponse = client.request(queryRequest);\n      } else if (query.getCore().isPresent()) {\n        queryResponse = client.request(queryRequest, query.getCore().get());\n      } else if (query.getCollection().isPresent()) {\n        queryResponse = client.request(queryRequest, query.getCollection().get());\n      }\n    } catch (SolrServerException | IOException e) {\n      log.error(\"failed to request: \" + queryRequest.getPath() + \" \" + e.getMessage());\n    }\n\n    JsonNode jsonNode = OBJECT_MAPPER.readTree((String) queryResponse.get(\"response\"));\n\n    for (JsonQuery jsonQuery : query.getJsonQueries()) {\n      try {\n        List<JsonNode> results = jsonQuery.apply(jsonNode);\n        for (JsonNode result : results) {\n          String type = result.get(\"type\").textValue();\n          String name = result.get(\"name\").textValue();\n          String help = result.get(\"help\").textValue();\n          double value = result.get(\"value\").doubleValue();\n\n          List<String> labelNames = new ArrayList<>();\n          List<String> labelValues = new ArrayList<>();\n\n          /* Labels in response */\n          for (JsonNode item : result.get(\"label_names\")) {\n            labelNames.add(item.textValue());\n          }\n\n          for (JsonNode item : result.get(\"label_values\")) {\n            labelValues.add(item.textValue());\n          }\n\n          /* Labels due to client */\n          if (client instanceof HttpSolrClient) {\n            labelNames.add(\"base_url\");\n            labelValues.add(((HttpSolrClient) client).getBaseURL());\n          }\n\n          if (client instanceof CloudSolrClient) {\n            labelNames.add(\"zk_host\");\n            labelValues.add(((CloudSolrClient) client).getZkHost());\n          }\n\n          // Deduce core if not there\n          if (labelNames.indexOf(\"core\") < 0 && labelNames.indexOf(\"collection\") >= 0 && labelNames.indexOf(\"shard\") >= 0 && labelNames.indexOf(\"replica\") >= 0) {\n            labelNames.add(\"core\");\n\n            String collection = labelValues.get(labelNames.indexOf(\"collection\"));\n            String shard = labelValues.get(labelNames.indexOf(\"shard\"));\n            String replica = labelValues.get(labelNames.indexOf(\"replica\"));\n\n            labelValues.add(collection + \"_\" + shard + \"_\" + replica);\n          }\n\n          samples.addSamplesIfNotPresent(name, new Collector.MetricFamilySamples(\n              name,\n              Collector.Type.valueOf(type),\n              help,\n              new ArrayList<>()));\n\n          samples.addSampleIfMetricExists(name, new Collector.MetricFamilySamples.Sample(\n              name, labelNames, labelValues, value));\n        }\n      } catch (JsonQueryException e) {\n        log.error(\"Error apply JSON query={} to result\", jsonQuery.toString(), e);\n        scrapeErrorTotal.inc();\n      }\n    }\n\n    return samples;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#request(SolrClient,MetricsQuery).mjava","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/scraper/SolrScraper#request(SolrClient,MetricsQuery).mjava","sourceNew":"  protected MetricSamples request(SolrClient client, MetricsQuery query) throws IOException {\n    MetricSamples samples = new MetricSamples();\n\n    QueryRequest queryRequest = new QueryRequest(query.getParameters());\n    queryRequest.setPath(query.getPath());\n\n    NamedList<Object> queryResponse = null;\n    try {\n      if (!query.getCollection().isPresent() && !query.getCore().isPresent()) {\n        queryResponse = client.request(queryRequest);\n      } else if (query.getCore().isPresent()) {\n        queryResponse = client.request(queryRequest, query.getCore().get());\n      } else if (query.getCollection().isPresent()) {\n        queryResponse = client.request(queryRequest, query.getCollection().get());\n      }\n    } catch (SolrServerException | IOException e) {\n      log.error(\"failed to request: {}\", queryRequest.getPath(), e);\n    }\n\n    JsonNode jsonNode = OBJECT_MAPPER.readTree((String) queryResponse.get(\"response\"));\n\n    for (JsonQuery jsonQuery : query.getJsonQueries()) {\n      try {\n        List<JsonNode> results = jsonQuery.apply(jsonNode);\n        for (JsonNode result : results) {\n          String type = result.get(\"type\").textValue();\n          String name = result.get(\"name\").textValue();\n          String help = result.get(\"help\").textValue();\n          double value = result.get(\"value\").doubleValue();\n\n          List<String> labelNames = new ArrayList<>();\n          List<String> labelValues = new ArrayList<>();\n\n          /* Labels in response */\n          for (JsonNode item : result.get(\"label_names\")) {\n            labelNames.add(item.textValue());\n          }\n\n          for (JsonNode item : result.get(\"label_values\")) {\n            labelValues.add(item.textValue());\n          }\n\n          /* Labels due to client */\n          if (client instanceof HttpSolrClient) {\n            labelNames.add(\"base_url\");\n            labelValues.add(((HttpSolrClient) client).getBaseURL());\n          }\n\n          if (client instanceof CloudSolrClient) {\n            labelNames.add(\"zk_host\");\n            labelValues.add(((CloudSolrClient) client).getZkHost());\n          }\n\n          // Deduce core if not there\n          if (labelNames.indexOf(\"core\") < 0 && labelNames.indexOf(\"collection\") >= 0 && labelNames.indexOf(\"shard\") >= 0 && labelNames.indexOf(\"replica\") >= 0) {\n            labelNames.add(\"core\");\n\n            String collection = labelValues.get(labelNames.indexOf(\"collection\"));\n            String shard = labelValues.get(labelNames.indexOf(\"shard\"));\n            String replica = labelValues.get(labelNames.indexOf(\"replica\"));\n\n            labelValues.add(collection + \"_\" + shard + \"_\" + replica);\n          }\n\n          samples.addSamplesIfNotPresent(name, new Collector.MetricFamilySamples(\n              name,\n              Collector.Type.valueOf(type),\n              help,\n              new ArrayList<>()));\n\n          samples.addSampleIfMetricExists(name, new Collector.MetricFamilySamples.Sample(\n              name, labelNames, labelValues, value));\n        }\n      } catch (JsonQueryException e) {\n        log.error(\"Error apply JSON query={} to result\", jsonQuery, e);\n        scrapeErrorTotal.inc();\n      }\n    }\n\n    return samples;\n  }\n\n","sourceOld":"  protected MetricSamples request(SolrClient client, MetricsQuery query) throws IOException {\n    MetricSamples samples = new MetricSamples();\n\n    QueryRequest queryRequest = new QueryRequest(query.getParameters());\n    queryRequest.setPath(query.getPath());\n\n    NamedList<Object> queryResponse = null;\n    try {\n      if (!query.getCollection().isPresent() && !query.getCore().isPresent()) {\n        queryResponse = client.request(queryRequest);\n      } else if (query.getCore().isPresent()) {\n        queryResponse = client.request(queryRequest, query.getCore().get());\n      } else if (query.getCollection().isPresent()) {\n        queryResponse = client.request(queryRequest, query.getCollection().get());\n      }\n    } catch (SolrServerException | IOException e) {\n      log.error(\"failed to request: {} {}\", queryRequest.getPath(), e.getMessage());\n    }\n\n    JsonNode jsonNode = OBJECT_MAPPER.readTree((String) queryResponse.get(\"response\"));\n\n    for (JsonQuery jsonQuery : query.getJsonQueries()) {\n      try {\n        List<JsonNode> results = jsonQuery.apply(jsonNode);\n        for (JsonNode result : results) {\n          String type = result.get(\"type\").textValue();\n          String name = result.get(\"name\").textValue();\n          String help = result.get(\"help\").textValue();\n          double value = result.get(\"value\").doubleValue();\n\n          List<String> labelNames = new ArrayList<>();\n          List<String> labelValues = new ArrayList<>();\n\n          /* Labels in response */\n          for (JsonNode item : result.get(\"label_names\")) {\n            labelNames.add(item.textValue());\n          }\n\n          for (JsonNode item : result.get(\"label_values\")) {\n            labelValues.add(item.textValue());\n          }\n\n          /* Labels due to client */\n          if (client instanceof HttpSolrClient) {\n            labelNames.add(\"base_url\");\n            labelValues.add(((HttpSolrClient) client).getBaseURL());\n          }\n\n          if (client instanceof CloudSolrClient) {\n            labelNames.add(\"zk_host\");\n            labelValues.add(((CloudSolrClient) client).getZkHost());\n          }\n\n          // Deduce core if not there\n          if (labelNames.indexOf(\"core\") < 0 && labelNames.indexOf(\"collection\") >= 0 && labelNames.indexOf(\"shard\") >= 0 && labelNames.indexOf(\"replica\") >= 0) {\n            labelNames.add(\"core\");\n\n            String collection = labelValues.get(labelNames.indexOf(\"collection\"));\n            String shard = labelValues.get(labelNames.indexOf(\"shard\"));\n            String replica = labelValues.get(labelNames.indexOf(\"replica\"));\n\n            labelValues.add(collection + \"_\" + shard + \"_\" + replica);\n          }\n\n          samples.addSamplesIfNotPresent(name, new Collector.MetricFamilySamples(\n              name,\n              Collector.Type.valueOf(type),\n              help,\n              new ArrayList<>()));\n\n          samples.addSampleIfMetricExists(name, new Collector.MetricFamilySamples.Sample(\n              name, labelNames, labelValues, value));\n        }\n      } catch (JsonQueryException e) {\n        log.error(\"Error apply JSON query={} to result\", jsonQuery, e);\n        scrapeErrorTotal.inc();\n      }\n    }\n\n    return samples;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57c238f5fb83803b49b37b3a1a12224a64d47542":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["4cd8a9425419baa85ef4a56ed411ffb4c57964d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"4cd8a9425419baa85ef4a56ed411ffb4c57964d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cd8a9425419baa85ef4a56ed411ffb4c57964d3"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"4cd8a9425419baa85ef4a56ed411ffb4c57964d3":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}