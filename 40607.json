{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#SelectStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"37f0902b794e42ac312bfd9daa69e6a523cf4675","date":1447303057,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#SelectStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + selectFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>(selectFieldsExpressions.size());\n    for(StreamExpressionParameter parameter : selectFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim().toLowerCase(Locale.ROOT);\n      if(value.contains(\" as \")){\n        String[] parts = value.split(\" as \");\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        selectedFields.put(parts[0].trim(), parts[1].trim());\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["02f899b620383b2af498238e3c714f5a6b1de2df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02f899b620383b2af498238e3c714f5a6b1de2df","date":1452218125,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#SelectStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#SelectStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + selectFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>(selectFieldsExpressions.size());\n    for(StreamExpressionParameter parameter : selectFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      // remove possible wrapping quotes\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); // ensure we are splitting in a case-insensitive way\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        selectedFields.put(parts[0].trim(), parts[1].trim());\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n\n","sourceOld":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + selectFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>(selectFieldsExpressions.size());\n    for(StreamExpressionParameter parameter : selectFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim().toLowerCase(Locale.ROOT);\n      if(value.contains(\" as \")){\n        String[] parts = value.split(\" as \");\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        selectedFields.put(parts[0].trim(), parts[1].trim());\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n\n","bugFix":["37f0902b794e42ac312bfd9daa69e6a523cf4675"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88073e8783f450d4c0218decc2f001a1ac2c7e7c","date":1486705191,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#SelectStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#SelectStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectAsFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamEvaluator.class);\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + selectAsFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectAsFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(0 != evaluatorExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - evaluators must be given a name, like 'add(...) as result' but found %d evaluators without names\",expression, evaluatorExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>();\n    selectedEvaluators = new HashMap<StreamEvaluator, String>();\n    for(StreamExpressionParameter parameter : selectAsFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      // remove possible wrapping quotes\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); // ensure we are splitting in a case-insensitive way\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        \n        String asValue = parts[0].trim();\n        String asName = parts[1].trim();\n        \n        boolean handled = false;\n        if(asValue.contains(\"(\")){\n          // possible evaluator\n          try{\n            StreamExpression asValueExpression = StreamExpressionParser.parse(asValue);\n            if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n              selectedEvaluators.put(factory.constructEvaluator(asValueExpression), asName);\n              handled = true;\n            }\n          }\n          catch(Throwable e){\n            // it was not handled, so treat as a non-evaluator\n          }\n        }\n        \n        if(!handled){        \n          selectedFields.put(asValue, asName);\n        }\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n\n","sourceOld":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + selectFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>(selectFieldsExpressions.size());\n    for(StreamExpressionParameter parameter : selectFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      // remove possible wrapping quotes\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); // ensure we are splitting in a case-insensitive way\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        selectedFields.put(parts[0].trim(), parts[1].trim());\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c84219732de95c058a8de66ece93c70ad1b1051c","date":1492441745,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#SelectStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#SelectStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectAsFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamEvaluator.class);\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + selectAsFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectAsFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(0 != evaluatorExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - evaluators must be given a name, like 'add(...) as result' but found %d evaluators without names\",expression, evaluatorExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>();\n    selectedEvaluators = new HashMap<StreamEvaluator, String>();\n    for(StreamExpressionParameter parameter : selectAsFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      // remove possible wrapping quotes\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); // ensure we are splitting in a case-insensitive way\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        \n        String asValue = parts[0].trim();\n        String asName = parts[1].trim();\n        \n        boolean handled = false;\n        if(asValue.contains(\"(\")){\n          // possible evaluator\n          try{\n            StreamExpression asValueExpression = StreamExpressionParser.parse(asValue);\n            if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n              selectedEvaluators.put(factory.constructEvaluator(asValueExpression), asName);\n              handled = true;\n            }\n          } catch(Throwable e) {\n            Throwable t = e;\n            while(true) {\n              if(t instanceof EvaluatorException) {\n                throw new IOException(t);\n              }\n              t = t.getCause();\n              if(t == null) {\n                break;\n              }\n            }\n            // it was not handled, so treat as a non-evaluator\n          }\n        }\n        \n        if(!handled){        \n          selectedFields.put(asValue, asName);\n        }\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n\n","sourceOld":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectAsFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamEvaluator.class);\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + selectAsFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectAsFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(0 != evaluatorExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - evaluators must be given a name, like 'add(...) as result' but found %d evaluators without names\",expression, evaluatorExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>();\n    selectedEvaluators = new HashMap<StreamEvaluator, String>();\n    for(StreamExpressionParameter parameter : selectAsFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      // remove possible wrapping quotes\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); // ensure we are splitting in a case-insensitive way\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        \n        String asValue = parts[0].trim();\n        String asName = parts[1].trim();\n        \n        boolean handled = false;\n        if(asValue.contains(\"(\")){\n          // possible evaluator\n          try{\n            StreamExpression asValueExpression = StreamExpressionParser.parse(asValue);\n            if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n              selectedEvaluators.put(factory.constructEvaluator(asValueExpression), asName);\n              handled = true;\n            }\n          }\n          catch(Throwable e){\n            // it was not handled, so treat as a non-evaluator\n          }\n        }\n        \n        if(!handled){        \n          selectedFields.put(asValue, asName);\n        }\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#SelectStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#SelectStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectAsFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamEvaluator.class);\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + selectAsFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectAsFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(0 != evaluatorExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - evaluators must be given a name, like 'add(...) as result' but found %d evaluators without names\",expression, evaluatorExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>();\n    selectedEvaluators = new HashMap<StreamEvaluator, String>();\n    for(StreamExpressionParameter parameter : selectAsFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      // remove possible wrapping quotes\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); // ensure we are splitting in a case-insensitive way\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        \n        String asValue = parts[0].trim();\n        String asName = parts[1].trim();\n        \n        boolean handled = false;\n        if(asValue.contains(\"(\")){\n          // possible evaluator\n          try{\n            StreamExpression asValueExpression = StreamExpressionParser.parse(asValue);\n            if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n              selectedEvaluators.put(factory.constructEvaluator(asValueExpression), asName);\n              handled = true;\n            }\n          } catch(Throwable e) {\n            Throwable t = e;\n            while(true) {\n              if(t instanceof EvaluatorException) {\n                throw new IOException(t);\n              }\n              t = t.getCause();\n              if(t == null) {\n                break;\n              }\n            }\n            // it was not handled, so treat as a non-evaluator\n          }\n        }\n        \n        if(!handled){        \n          selectedFields.put(asValue, asName);\n        }\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n\n","sourceOld":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectAsFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamEvaluator.class);\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + selectAsFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectAsFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(0 != evaluatorExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - evaluators must be given a name, like 'add(...) as result' but found %d evaluators without names\",expression, evaluatorExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>();\n    selectedEvaluators = new HashMap<StreamEvaluator, String>();\n    for(StreamExpressionParameter parameter : selectAsFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      // remove possible wrapping quotes\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); // ensure we are splitting in a case-insensitive way\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        \n        String asValue = parts[0].trim();\n        String asName = parts[1].trim();\n        \n        boolean handled = false;\n        if(asValue.contains(\"(\")){\n          // possible evaluator\n          try{\n            StreamExpression asValueExpression = StreamExpressionParser.parse(asValue);\n            if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n              selectedEvaluators.put(factory.constructEvaluator(asValueExpression), asName);\n              handled = true;\n            }\n          }\n          catch(Throwable e){\n            // it was not handled, so treat as a non-evaluator\n          }\n        }\n        \n        if(!handled){        \n          selectedFields.put(asValue, asName);\n        }\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc","date":1539269037,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#SelectStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#SelectStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectAsFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamEvaluator.class);\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + selectAsFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectAsFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(0 != evaluatorExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - evaluators must be given a name, like 'add(...) as result' but found %d evaluators without names\",expression, evaluatorExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>();\n    selectedEvaluators = new LinkedHashMap();\n    for(StreamExpressionParameter parameter : selectAsFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      // remove possible wrapping quotes\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); // ensure we are splitting in a case-insensitive way\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        \n        String asValue = parts[0].trim();\n        String asName = parts[1].trim();\n        \n        boolean handled = false;\n        if(asValue.contains(\"(\")){\n          // possible evaluator\n          try{\n            StreamExpression asValueExpression = StreamExpressionParser.parse(asValue);\n            if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n              selectedEvaluators.put(factory.constructEvaluator(asValueExpression), asName);\n              handled = true;\n            }\n          } catch(Throwable e) {\n            Throwable t = e;\n            while(true) {\n              if(t instanceof EvaluatorException) {\n                throw new IOException(t);\n              }\n              t = t.getCause();\n              if(t == null) {\n                break;\n              }\n            }\n            // it was not handled, so treat as a non-evaluator\n          }\n        }\n        \n        if(!handled){        \n          selectedFields.put(asValue, asName);\n        }\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n\n","sourceOld":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectAsFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamEvaluator.class);\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + selectAsFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectAsFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(0 != evaluatorExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - evaluators must be given a name, like 'add(...) as result' but found %d evaluators without names\",expression, evaluatorExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>();\n    selectedEvaluators = new HashMap<StreamEvaluator, String>();\n    for(StreamExpressionParameter parameter : selectAsFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      // remove possible wrapping quotes\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); // ensure we are splitting in a case-insensitive way\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        \n        String asValue = parts[0].trim();\n        String asName = parts[1].trim();\n        \n        boolean handled = false;\n        if(asValue.contains(\"(\")){\n          // possible evaluator\n          try{\n            StreamExpression asValueExpression = StreamExpressionParser.parse(asValue);\n            if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n              selectedEvaluators.put(factory.constructEvaluator(asValueExpression), asName);\n              handled = true;\n            }\n          } catch(Throwable e) {\n            Throwable t = e;\n            while(true) {\n              if(t instanceof EvaluatorException) {\n                throw new IOException(t);\n              }\n              t = t.getCause();\n              if(t == null) {\n                break;\n              }\n            }\n            // it was not handled, so treat as a non-evaluator\n          }\n        }\n        \n        if(!handled){        \n          selectedFields.put(asValue, asName);\n        }\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#SelectStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SelectStream#SelectStream(StreamExpression,StreamFactory).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectAsFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamEvaluator.class);\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + selectAsFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectAsFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(0 != evaluatorExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - evaluators must be given a name, like 'add(...) as result' but found %d evaluators without names\",expression, evaluatorExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>();\n    selectedEvaluators = new LinkedHashMap<>();\n    for(StreamExpressionParameter parameter : selectAsFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      // remove possible wrapping quotes\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); // ensure we are splitting in a case-insensitive way\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        \n        String asValue = parts[0].trim();\n        String asName = parts[1].trim();\n        \n        boolean handled = false;\n        if(asValue.contains(\"(\")){\n          // possible evaluator\n          try{\n            StreamExpression asValueExpression = StreamExpressionParser.parse(asValue);\n            if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n              selectedEvaluators.put(factory.constructEvaluator(asValueExpression), asName);\n              handled = true;\n            }\n          } catch(Throwable e) {\n            Throwable t = e;\n            while(true) {\n              if(t instanceof EvaluatorException) {\n                throw new IOException(t);\n              }\n              t = t.getCause();\n              if(t == null) {\n                break;\n              }\n            }\n            // it was not handled, so treat as a non-evaluator\n          }\n        }\n        \n        if(!handled){        \n          selectedFields.put(asValue, asName);\n        }\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n\n","sourceOld":"  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {\n    // grab all parameters out\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    List<StreamExpressionParameter> selectAsFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);\n    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);\n    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamEvaluator.class);\n    \n    // validate expression contains only what we want.\n    if(expression.getParameters().size() != streamExpressions.size() + selectAsFieldsExpressions.size() + operationExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)\",expression, streamExpressions.size()));\n    }\n\n    if(0 == selectAsFieldsExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one select field but found %d\",expression, streamExpressions.size()));\n    }\n    \n    if(0 != evaluatorExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - evaluators must be given a name, like 'add(...) as result' but found %d evaluators without names\",expression, evaluatorExpressions.size()));\n    }\n\n    stream = factory.constructStream(streamExpressions.get(0));\n    \n    selectedFields = new HashMap<String,String>();\n    selectedEvaluators = new LinkedHashMap();\n    for(StreamExpressionParameter parameter : selectAsFieldsExpressions){\n      StreamExpressionValue selectField = (StreamExpressionValue)parameter;\n      String value = selectField.getValue().trim();\n      \n      // remove possible wrapping quotes\n      if(value.length() > 2 && value.startsWith(\"\\\"\") && value.endsWith(\"\\\"\")){\n        value = value.substring(1, value.length() - 1);\n      }\n      if(value.toLowerCase(Locale.ROOT).contains(\" as \")){\n        String[] parts = value.split(\"(?i) as \"); // ensure we are splitting in a case-insensitive way\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s\",expression, value));\n        }\n        \n        String asValue = parts[0].trim();\n        String asName = parts[1].trim();\n        \n        boolean handled = false;\n        if(asValue.contains(\"(\")){\n          // possible evaluator\n          try{\n            StreamExpression asValueExpression = StreamExpressionParser.parse(asValue);\n            if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){\n              selectedEvaluators.put(factory.constructEvaluator(asValueExpression), asName);\n              handled = true;\n            }\n          } catch(Throwable e) {\n            Throwable t = e;\n            while(true) {\n              if(t instanceof EvaluatorException) {\n                throw new IOException(t);\n              }\n              t = t.getCause();\n              if(t == null) {\n                break;\n              }\n            }\n            // it was not handled, so treat as a non-evaluator\n          }\n        }\n        \n        if(!handled){        \n          selectedFields.put(asValue, asName);\n        }\n      }\n      else{\n        selectedFields.put(value,value);\n      }\n    }\n    \n    operations = new ArrayList<>();\n    for(StreamExpression expr : operationExpressions){\n      operations.add(factory.constructOperation(expr));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"c84219732de95c058a8de66ece93c70ad1b1051c":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["02f899b620383b2af498238e3c714f5a6b1de2df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"37f0902b794e42ac312bfd9daa69e6a523cf4675":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc"],"02f899b620383b2af498238e3c714f5a6b1de2df":["37f0902b794e42ac312bfd9daa69e6a523cf4675"],"1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc":["c84219732de95c058a8de66ece93c70ad1b1051c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"c84219732de95c058a8de66ece93c70ad1b1051c":["1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc"],"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c84219732de95c058a8de66ece93c70ad1b1051c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37f0902b794e42ac312bfd9daa69e6a523cf4675"],"37f0902b794e42ac312bfd9daa69e6a523cf4675":["02f899b620383b2af498238e3c714f5a6b1de2df"],"02f899b620383b2af498238e3c714f5a6b1de2df":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1df12fdfa92024c9bc6b6b0e70abb6f5a0cb61cc":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}