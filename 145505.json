{"path":"src/java/org/apache/lucene/index/TermInfosReader#getPosition(Term).mjava","commits":[{"id":"e0b950aef8cdf4606d480e28ea17bd870b93c81e","date":1060680143,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#getPosition(Term).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the position of a Term in the set or -1. */\n  final synchronized int getPosition(Term term) throws IOException {\n    if (size == 0) return -1;\n\n    int indexOffset = getIndexOffset(term);\n    seekEnum(indexOffset);\n\n    while(term.compareTo(enumerator.term()) > 0 && enumerator.next()) {}\n\n    if (term.compareTo(enumerator.term()) == 0)\n      return enumerator.position;\n    else\n      return -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15c469602973ef1a33c9a07367a380d278ffab20","date":1074206555,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#getPosition(Term).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#getPosition(Term).mjava","sourceNew":"  /** Returns the position of a Term in the set or -1. */\n  final synchronized long getPosition(Term term) throws IOException {\n    if (size == 0) return -1;\n\n    int indexOffset = getIndexOffset(term);\n    seekEnum(indexOffset);\n\n    while(term.compareTo(enumerator.term()) > 0 && enumerator.next()) {}\n\n    if (term.compareTo(enumerator.term()) == 0)\n      return enumerator.position;\n    else\n      return -1;\n  }\n\n","sourceOld":"  /** Returns the position of a Term in the set or -1. */\n  final synchronized int getPosition(Term term) throws IOException {\n    if (size == 0) return -1;\n\n    int indexOffset = getIndexOffset(term);\n    seekEnum(indexOffset);\n\n    while(term.compareTo(enumerator.term()) > 0 && enumerator.next()) {}\n\n    if (term.compareTo(enumerator.term()) == 0)\n      return enumerator.position;\n    else\n      return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e03e3f081e8581c90e28db2f37ab70239194e12b","date":1086627352,"type":4,"author":"Doug Cutting","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#getPosition(Term).mjava","sourceNew":null,"sourceOld":"  /** Returns the position of a Term in the set or -1. */\n  final synchronized long getPosition(Term term) throws IOException {\n    if (size == 0) return -1;\n\n    int indexOffset = getIndexOffset(term);\n    seekEnum(indexOffset);\n\n    while(term.compareTo(enumerator.term()) > 0 && enumerator.next()) {}\n\n    if (term.compareTo(enumerator.term()) == 0)\n      return enumerator.position;\n    else\n      return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafd816608011f66422f3052c37962973582d12a","date":1087172166,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#getPosition(Term).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the position of a Term in the set or -1. */\n  final long getPosition(Term term) throws IOException {\n    if (size == 0) return -1;\n\n    int indexOffset = getIndexOffset(term);\n    seekEnum(indexOffset);\n\n    SegmentTermEnum enumerator = getEnum();\n    while(term.compareTo(enumerator.term()) > 0 && enumerator.next()) {}\n\n    if (term.compareTo(enumerator.term()) == 0)\n      return enumerator.position;\n    else\n      return -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde86e98c3d4e1e436c54b2303fc946a19efb893","date":1110227284,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#getPosition(Term).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#getPosition(Term).mjava","sourceNew":"  /** Returns the position of a Term in the set or -1. */\n  final long getPosition(Term term) throws IOException {\n    if (size == 0) return -1;\n\n    ensureIndexIsRead();\n    int indexOffset = getIndexOffset(term);\n    seekEnum(indexOffset);\n\n    SegmentTermEnum enumerator = getEnum();\n    while(term.compareTo(enumerator.term()) > 0 && enumerator.next()) {}\n\n    if (term.compareTo(enumerator.term()) == 0)\n      return enumerator.position;\n    else\n      return -1;\n  }\n\n","sourceOld":"  /** Returns the position of a Term in the set or -1. */\n  final long getPosition(Term term) throws IOException {\n    if (size == 0) return -1;\n\n    int indexOffset = getIndexOffset(term);\n    seekEnum(indexOffset);\n\n    SegmentTermEnum enumerator = getEnum();\n    while(term.compareTo(enumerator.term()) > 0 && enumerator.next()) {}\n\n    if (term.compareTo(enumerator.term()) == 0)\n      return enumerator.position;\n    else\n      return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b30678d88259b68d3d1e3faba3ea3bccdf0c751","date":1211563231,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#getPosition(Term).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#getPosition(Term).mjava","sourceNew":"  /** Returns the position of a Term in the set or -1. */\n  final long getPosition(Term term) throws IOException {\n    if (size == 0) return -1;\n\n    ensureIndexIsRead();\n    int indexOffset = getIndexOffset(term);\n    \n    SegmentTermEnum enumerator = getThreadResources().termEnum;\n    seekEnum(enumerator, indexOffset);\n\n    while(term.compareTo(enumerator.term()) > 0 && enumerator.next()) {}\n\n    if (term.compareTo(enumerator.term()) == 0)\n      return enumerator.position;\n    else\n      return -1;\n  }\n\n","sourceOld":"  /** Returns the position of a Term in the set or -1. */\n  final long getPosition(Term term) throws IOException {\n    if (size == 0) return -1;\n\n    ensureIndexIsRead();\n    int indexOffset = getIndexOffset(term);\n    seekEnum(indexOffset);\n\n    SegmentTermEnum enumerator = getEnum();\n    while(term.compareTo(enumerator.term()) > 0 && enumerator.next()) {}\n\n    if (term.compareTo(enumerator.term()) == 0)\n      return enumerator.position;\n    else\n      return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermInfosReader#getPosition(Term).mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#getPosition(Term).mjava","sourceNew":"  /** Returns the position of a Term in the set or -1. */\n  final long getPosition(Term term) throws IOException {\n    if (size == 0) return -1;\n\n    ensureIndexIsRead();\n    int indexOffset = getIndexOffset(term);\n    \n    SegmentTermEnum enumerator = getThreadResources().termEnum;\n    seekEnum(enumerator, indexOffset);\n\n    while(term.compareTo(enumerator.term()) > 0 && enumerator.next()) {}\n\n    if (term.compareTo(enumerator.term()) == 0)\n      return enumerator.position;\n    else\n      return -1;\n  }\n\n","sourceOld":"  /** Returns the position of a Term in the set or -1. */\n  final long getPosition(Term term) throws IOException {\n    if (size == 0) return -1;\n\n    ensureIndexIsRead();\n    int indexOffset = getIndexOffset(term);\n    \n    SegmentTermEnum enumerator = getThreadResources().termEnum;\n    seekEnum(enumerator, indexOffset);\n\n    while(term.compareTo(enumerator.term()) > 0 && enumerator.next()) {}\n\n    if (term.compareTo(enumerator.term()) == 0)\n      return enumerator.position;\n    else\n      return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde86e98c3d4e1e436c54b2303fc946a19efb893":["eafd816608011f66422f3052c37962973582d12a"],"eafd816608011f66422f3052c37962973582d12a":["e03e3f081e8581c90e28db2f37ab70239194e12b"],"1b30678d88259b68d3d1e3faba3ea3bccdf0c751":["bde86e98c3d4e1e436c54b2303fc946a19efb893"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e03e3f081e8581c90e28db2f37ab70239194e12b":["15c469602973ef1a33c9a07367a380d278ffab20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1b30678d88259b68d3d1e3faba3ea3bccdf0c751"],"15c469602973ef1a33c9a07367a380d278ffab20":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"]},"commit2Childs":{"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["15c469602973ef1a33c9a07367a380d278ffab20"],"bde86e98c3d4e1e436c54b2303fc946a19efb893":["1b30678d88259b68d3d1e3faba3ea3bccdf0c751"],"eafd816608011f66422f3052c37962973582d12a":["bde86e98c3d4e1e436c54b2303fc946a19efb893"],"1b30678d88259b68d3d1e3faba3ea3bccdf0c751":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"e03e3f081e8581c90e28db2f37ab70239194e12b":["eafd816608011f66422f3052c37962973582d12a"],"15c469602973ef1a33c9a07367a380d278ffab20":["e03e3f081e8581c90e28db2f37ab70239194e12b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}