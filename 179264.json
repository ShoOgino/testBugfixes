{"path":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext).mjava","commits":[{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean).mjava","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION), context);\n      boolean success = false;\n      try {\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION), context);\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          closeInternal();\n        }\n      }\n    }\n\n","sourceOld":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION));\n      boolean success = false;\n      try {\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION));\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          closeInternal();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean).mjava","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION), context);\n      boolean success = false;\n      try {\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION), context);\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          closeInternal();\n        }\n      }\n    }\n\n","sourceOld":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION));\n      boolean success = false;\n      try {\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION));\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          closeInternal();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean).mjava","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION), context);\n      boolean success = false;\n      try {\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION), context);\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          closeInternal();\n        }\n      }\n    }\n\n","sourceOld":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION));\n      boolean success = false;\n      try {\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION));\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          closeInternal();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c16b371c3e5a42fa4fd50558be718acc9ec8505a","date":1317833758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext).mjava","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION), context);\n      boolean success = false;\n      try {\n        version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n        if (doIndex) {\n          idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n                                                               Writer.INDEX_EXTENSION), context);\n          final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n                                                     maxVersion, maxVersion);\n          assert version == version2;\n        } else {\n          idxIn = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          closeInternal();\n        }\n      }\n    }\n\n","sourceOld":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION), context);\n      boolean success = false;\n      try {\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION), context);\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          closeInternal();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext).mjava","sourceNew":null,"sourceOld":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION), context);\n      boolean success = false;\n      try {\n        version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n        if (doIndex) {\n          idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n                                                               Writer.INDEX_EXTENSION), context);\n          final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n                                                     maxVersion, maxVersion);\n          assert version == version2;\n        } else {\n          idxIn = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          closeInternal();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c16b371c3e5a42fa4fd50558be718acc9ec8505a":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"e128967bca58657bc0039d4bfe631e63e81f1977":["c16b371c3e5a42fa4fd50558be718acc9ec8505a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e128967bca58657bc0039d4bfe631e63e81f1977"]},"commit2Childs":{"c16b371c3e5a42fa4fd50558be718acc9ec8505a":["e128967bca58657bc0039d4bfe631e63e81f1977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["c16b371c3e5a42fa4fd50558be718acc9ec8505a","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"e128967bca58657bc0039d4bfe631e63e81f1977":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}