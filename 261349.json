{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDocParam().mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDocParam().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDocParam() throws Exception {\n    final Map<String,Object> test = new HashMap<String,Object>();\n    test.put(\"fake\", 2);\n    List<Feature> features = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    MockModel ltrScoringModel = new MockModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n    LTRScoringQuery query = new LTRScoringQuery(ltrScoringModel);\n    LTRScoringQuery.ModelWeight wgt = query.createWeight(null, true, 1f);\n    LTRScoringQuery.ModelWeight.ModelScorer modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(new Float(1f));\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n\n    features = makeFieldValueFeatures(new int[] {0, 1, 2}, \"final-score\");\n    norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    allFeatures = makeFieldValueFeatures(new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8,\n        9}, \"final-score\");\n    ltrScoringModel = new MockModel(\"test\", features, norms,\n        \"test\", allFeatures, null);\n    query = new LTRScoringQuery(ltrScoringModel);\n    wgt = query.createWeight(null, true, 1f);\n    modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(new Float(1f));\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDocParam().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDocParam() throws Exception {\n    final Map<String,Object> test = new HashMap<String,Object>();\n    test.put(\"fake\", 2);\n    List<Feature> features = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    MockModel ltrScoringModel = new MockModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n    LTRScoringQuery query = new LTRScoringQuery(ltrScoringModel);\n    LTRScoringQuery.ModelWeight wgt = query.createWeight(null, true, 1f);\n    LTRScoringQuery.ModelWeight.ModelScorer modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(new Float(1f));\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n\n    features = makeFieldValueFeatures(new int[] {0, 1, 2}, \"final-score\");\n    norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    allFeatures = makeFieldValueFeatures(new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8,\n        9}, \"final-score\");\n    ltrScoringModel = new MockModel(\"test\", features, norms,\n        \"test\", allFeatures, null);\n    query = new LTRScoringQuery(ltrScoringModel);\n    wgt = query.createWeight(null, true, 1f);\n    modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(new Float(1f));\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDocParam().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDocParam().mjava","sourceNew":"  @Test\n  public void testDocParam() throws Exception {\n    final Map<String,Object> test = new HashMap<String,Object>();\n    test.put(\"fake\", 2);\n    List<Feature> features = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    MockModel ltrScoringModel = new MockModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n    LTRScoringQuery query = new LTRScoringQuery(ltrScoringModel);\n    LTRScoringQuery.ModelWeight wgt = query.createWeight(null, ScoreMode.COMPLETE, 1f);\n    LTRScoringQuery.ModelWeight.ModelScorer modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(new Float(1f));\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n\n    features = makeFieldValueFeatures(new int[] {0, 1, 2}, \"final-score\");\n    norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    allFeatures = makeFieldValueFeatures(new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8,\n        9}, \"final-score\");\n    ltrScoringModel = new MockModel(\"test\", features, norms,\n        \"test\", allFeatures, null);\n    query = new LTRScoringQuery(ltrScoringModel);\n    wgt = query.createWeight(null, ScoreMode.COMPLETE, 1f);\n    modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(new Float(1f));\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocParam() throws Exception {\n    final Map<String,Object> test = new HashMap<String,Object>();\n    test.put(\"fake\", 2);\n    List<Feature> features = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    MockModel ltrScoringModel = new MockModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n    LTRScoringQuery query = new LTRScoringQuery(ltrScoringModel);\n    LTRScoringQuery.ModelWeight wgt = query.createWeight(null, true, 1f);\n    LTRScoringQuery.ModelWeight.ModelScorer modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(new Float(1f));\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n\n    features = makeFieldValueFeatures(new int[] {0, 1, 2}, \"final-score\");\n    norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    allFeatures = makeFieldValueFeatures(new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8,\n        9}, \"final-score\");\n    ltrScoringModel = new MockModel(\"test\", features, norms,\n        \"test\", allFeatures, null);\n    query = new LTRScoringQuery(ltrScoringModel);\n    wgt = query.createWeight(null, true, 1f);\n    modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(new Float(1f));\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDocParam().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDocParam().mjava","sourceNew":"  @Test\n  public void testDocParam() throws Exception {\n    final Map<String,Object> test = new HashMap<String,Object>();\n    test.put(\"fake\", 2);\n    List<Feature> features = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    MockModel ltrScoringModel = new MockModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n    LTRScoringQuery query = new LTRScoringQuery(ltrScoringModel);\n    LTRScoringQuery.ModelWeight wgt = query.createWeight(null, ScoreMode.COMPLETE, 1f);\n    LTRScoringQuery.ModelWeight.ModelScorer modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(new Float(1f));\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n\n    features = makeFieldValueFeatures(new int[] {0, 1, 2}, \"final-score\");\n    norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    allFeatures = makeFieldValueFeatures(new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8,\n        9}, \"final-score\");\n    ltrScoringModel = new MockModel(\"test\", features, norms,\n        \"test\", allFeatures, null);\n    query = new LTRScoringQuery(ltrScoringModel);\n    wgt = query.createWeight(null, ScoreMode.COMPLETE, 1f);\n    modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(new Float(1f));\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocParam() throws Exception {\n    final Map<String,Object> test = new HashMap<String,Object>();\n    test.put(\"fake\", 2);\n    List<Feature> features = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    MockModel ltrScoringModel = new MockModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n    LTRScoringQuery query = new LTRScoringQuery(ltrScoringModel);\n    LTRScoringQuery.ModelWeight wgt = query.createWeight(null, true, 1f);\n    LTRScoringQuery.ModelWeight.ModelScorer modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(new Float(1f));\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n\n    features = makeFieldValueFeatures(new int[] {0, 1, 2}, \"final-score\");\n    norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    allFeatures = makeFieldValueFeatures(new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8,\n        9}, \"final-score\");\n    ltrScoringModel = new MockModel(\"test\", features, norms,\n        \"test\", allFeatures, null);\n    query = new LTRScoringQuery(ltrScoringModel);\n    wgt = query.createWeight(null, true, 1f);\n    modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(new Float(1f));\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDocParam().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDocParam().mjava","sourceNew":"  @Test\n  public void testDocParam() throws Exception {\n    final Map<String,Object> test = new HashMap<String,Object>();\n    test.put(\"fake\", 2);\n    List<Feature> features = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    MockModel ltrScoringModel = new MockModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n    LTRScoringQuery query = new LTRScoringQuery(ltrScoringModel);\n    LTRScoringQuery.ModelWeight wgt = query.createWeight(null, ScoreMode.COMPLETE, 1f);\n    LTRScoringQuery.ModelWeight.ModelScorer modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(1f);\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n\n    features = makeFieldValueFeatures(new int[] {0, 1, 2}, \"final-score\");\n    norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    allFeatures = makeFieldValueFeatures(new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8,\n        9}, \"final-score\");\n    ltrScoringModel = new MockModel(\"test\", features, norms,\n        \"test\", allFeatures, null);\n    query = new LTRScoringQuery(ltrScoringModel);\n    wgt = query.createWeight(null, ScoreMode.COMPLETE, 1f);\n    modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(1f);\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocParam() throws Exception {\n    final Map<String,Object> test = new HashMap<String,Object>();\n    test.put(\"fake\", 2);\n    List<Feature> features = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    MockModel ltrScoringModel = new MockModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n    LTRScoringQuery query = new LTRScoringQuery(ltrScoringModel);\n    LTRScoringQuery.ModelWeight wgt = query.createWeight(null, ScoreMode.COMPLETE, 1f);\n    LTRScoringQuery.ModelWeight.ModelScorer modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(new Float(1f));\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n\n    features = makeFieldValueFeatures(new int[] {0, 1, 2}, \"final-score\");\n    norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    allFeatures = makeFieldValueFeatures(new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8,\n        9}, \"final-score\");\n    ltrScoringModel = new MockModel(\"test\", features, norms,\n        \"test\", allFeatures, null);\n    query = new LTRScoringQuery(ltrScoringModel);\n    wgt = query.createWeight(null, ScoreMode.COMPLETE, 1f);\n    modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(new Float(1f));\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDocParam().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDocParam().mjava","sourceNew":"  @Test\n  public void testDocParam() throws Exception {\n    final Map<String,Object> test = new HashMap<String,Object>();\n    test.put(\"fake\", 2);\n    List<Feature> features = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    MockModel ltrScoringModel = new MockModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n    LTRScoringQuery query = new LTRScoringQuery(ltrScoringModel);\n    LTRScoringQuery.ModelWeight wgt = query.createWeight(null, ScoreMode.COMPLETE, 1f);\n    LTRScoringQuery.ModelWeight.ModelScorer modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(1f);\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n\n    features = makeFieldValueFeatures(new int[] {0, 1, 2}, \"final-score\");\n    norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    allFeatures = makeFieldValueFeatures(new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8,\n        9}, \"final-score\");\n    ltrScoringModel = new MockModel(\"test\", features, norms,\n        \"test\", allFeatures, null);\n    query = new LTRScoringQuery(ltrScoringModel);\n    wgt = query.createWeight(null, ScoreMode.COMPLETE, 1f);\n    modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(1f);\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocParam() throws Exception {\n    final Map<String,Object> test = new HashMap<String,Object>();\n    test.put(\"fake\", 2);\n    List<Feature> features = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    MockModel ltrScoringModel = new MockModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n    LTRScoringQuery query = new LTRScoringQuery(ltrScoringModel);\n    LTRScoringQuery.ModelWeight wgt = query.createWeight(null, ScoreMode.COMPLETE, 1f);\n    LTRScoringQuery.ModelWeight.ModelScorer modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(new Float(1f));\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n\n    features = makeFieldValueFeatures(new int[] {0, 1, 2}, \"final-score\");\n    norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    allFeatures = makeFieldValueFeatures(new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8,\n        9}, \"final-score\");\n    ltrScoringModel = new MockModel(\"test\", features, norms,\n        \"test\", allFeatures, null);\n    query = new LTRScoringQuery(ltrScoringModel);\n    wgt = query.createWeight(null, ScoreMode.COMPLETE, 1f);\n    modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(new Float(1f));\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDocParam().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDocParam().mjava","sourceNew":"  @Test\n  public void testDocParam() throws Exception {\n    final Map<String,Object> test = new HashMap<String,Object>();\n    test.put(\"fake\", 2);\n    List<Feature> features = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    MockModel ltrScoringModel = new MockModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n    LTRScoringQuery query = new LTRScoringQuery(ltrScoringModel);\n    LTRScoringQuery.ModelWeight wgt = query.createWeight(null, ScoreMode.COMPLETE, 1f);\n    LTRScoringQuery.ModelWeight.ModelScorer modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(1f);\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n\n    features = makeFieldValueFeatures(new int[] {0, 1, 2}, \"final-score\");\n    norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    allFeatures = makeFieldValueFeatures(new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8,\n        9}, \"final-score\");\n    ltrScoringModel = new MockModel(\"test\", features, norms,\n        \"test\", allFeatures, null);\n    query = new LTRScoringQuery(ltrScoringModel);\n    wgt = query.createWeight(null, ScoreMode.COMPLETE, 1f);\n    modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(1f);\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocParam() throws Exception {\n    final Map<String,Object> test = new HashMap<String,Object>();\n    test.put(\"fake\", 2);\n    List<Feature> features = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    MockModel ltrScoringModel = new MockModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n    LTRScoringQuery query = new LTRScoringQuery(ltrScoringModel);\n    LTRScoringQuery.ModelWeight wgt = query.createWeight(null, ScoreMode.COMPLETE, 1f);\n    LTRScoringQuery.ModelWeight.ModelScorer modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(new Float(1f));\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n\n    features = makeFieldValueFeatures(new int[] {0, 1, 2}, \"final-score\");\n    norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    allFeatures = makeFieldValueFeatures(new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8,\n        9}, \"final-score\");\n    ltrScoringModel = new MockModel(\"test\", features, norms,\n        \"test\", allFeatures, null);\n    query = new LTRScoringQuery(ltrScoringModel);\n    wgt = query.createWeight(null, ScoreMode.COMPLETE, 1f);\n    modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(new Float(1f));\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDocParam().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testDocParam().mjava","sourceNew":"  @Test\n  public void testDocParam() throws Exception {\n    final Map<String,Object> test = new HashMap<String,Object>();\n    test.put(\"fake\", 2);\n    List<Feature> features = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    MockModel ltrScoringModel = new MockModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n    LTRScoringQuery query = new LTRScoringQuery(ltrScoringModel);\n    LTRScoringQuery.ModelWeight wgt = query.createWeight(null, ScoreMode.COMPLETE, 1f);\n    LTRScoringQuery.ModelWeight.ModelScorer modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(1f);\n    for (final Scorable.ChildScorable feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n\n    features = makeFieldValueFeatures(new int[] {0, 1, 2}, \"final-score\");\n    norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    allFeatures = makeFieldValueFeatures(new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8,\n        9}, \"final-score\");\n    ltrScoringModel = new MockModel(\"test\", features, norms,\n        \"test\", allFeatures, null);\n    query = new LTRScoringQuery(ltrScoringModel);\n    wgt = query.createWeight(null, ScoreMode.COMPLETE, 1f);\n    modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(1f);\n    for (final Scorable.ChildScorable feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocParam() throws Exception {\n    final Map<String,Object> test = new HashMap<String,Object>();\n    test.put(\"fake\", 2);\n    List<Feature> features = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0},\n        \"final-score\");\n    MockModel ltrScoringModel = new MockModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n    LTRScoringQuery query = new LTRScoringQuery(ltrScoringModel);\n    LTRScoringQuery.ModelWeight wgt = query.createWeight(null, ScoreMode.COMPLETE, 1f);\n    LTRScoringQuery.ModelWeight.ModelScorer modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(1f);\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n\n    features = makeFieldValueFeatures(new int[] {0, 1, 2}, \"final-score\");\n    norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    allFeatures = makeFieldValueFeatures(new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8,\n        9}, \"final-score\");\n    ltrScoringModel = new MockModel(\"test\", features, norms,\n        \"test\", allFeatures, null);\n    query = new LTRScoringQuery(ltrScoringModel);\n    wgt = query.createWeight(null, ScoreMode.COMPLETE, 1f);\n    modelScr = wgt.scorer(null);\n    modelScr.getDocInfo().setOriginalDocScore(1f);\n    for (final Scorer.ChildScorer feat : modelScr.getChildren()) {\n      assertNotNull(((Feature.FeatureWeight.FeatureScorer) feat.child).getDocInfo().getOriginalDocScore());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["417142ff08fda9cf0b72d5133e63097a166c6458"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["417142ff08fda9cf0b72d5133e63097a166c6458","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["417142ff08fda9cf0b72d5133e63097a166c6458","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"417142ff08fda9cf0b72d5133e63097a166c6458":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["9720b151fde2073f4e401450f4574e5f31c2d0ff","9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","285244982ce6aa163d1e60a707f0e6e121736ce5"],"417142ff08fda9cf0b72d5133e63097a166c6458":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}