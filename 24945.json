{"path":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    FSDirectory fsDir = FSDirectory.open(dir);\n    IndexWriter iw = new IndexWriter(fsDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    assertEquals(3, iw.getReader().getSequentialSubReaders().length);\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    IndexReader r = IndexReader.open(FSDirectory.open(destDir), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    r = IndexReader.open(FSDirectory.open(destDir2), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(FSDirectory.open(dir), true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    FSDirectory fsDir = FSDirectory.open(dir);\n    IndexWriter iw = new IndexWriter(fsDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    assertEquals(3, iw.getReader().getSequentialSubReaders().length);\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    IndexReader r = IndexReader.open(FSDirectory.open(destDir), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    r = IndexReader.open(FSDirectory.open(destDir2), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(FSDirectory.open(dir), true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    FSDirectory fsDir = FSDirectory.open(dir);\n    IndexWriter iw = new IndexWriter(fsDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    assertEquals(3, iw.getReader().getSequentialSubReaders().length);\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    IndexReader r = IndexReader.open(FSDirectory.open(destDir), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    r = IndexReader.open(FSDirectory.open(destDir2), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(FSDirectory.open(dir), true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    FSDirectory fsDir = FSDirectory.open(dir);\n    IndexWriter iw = new IndexWriter(fsDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    assertEquals(3, iw.getReader().getSequentialSubReaders().length);\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    IndexReader r = IndexReader.open(FSDirectory.open(destDir), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    r = IndexReader.open(FSDirectory.open(destDir2), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(FSDirectory.open(dir), true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38a62612cfa4e104080d89d7751a8f1a258ac335","date":1291442315,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    FSDirectory fsDir = FSDirectory.open(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    assertEquals(3, iw.getReader().getSequentialSubReaders().length);\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    IndexReader r = IndexReader.open(FSDirectory.open(destDir), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    r = IndexReader.open(FSDirectory.open(destDir2), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(FSDirectory.open(dir), true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    FSDirectory fsDir = FSDirectory.open(dir);\n    IndexWriter iw = new IndexWriter(fsDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    assertEquals(3, iw.getReader().getSequentialSubReaders().length);\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    IndexReader r = IndexReader.open(FSDirectory.open(destDir), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    r = IndexReader.open(FSDirectory.open(destDir2), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(FSDirectory.open(dir), true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","date":1291833341,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    FSDirectory fsDir = FSDirectory.open(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    assertEquals(3, iw.getReader().getSequentialSubReaders().length);\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    IndexReader r = IndexReader.open(FSDirectory.open(destDir), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    r = IndexReader.open(FSDirectory.open(destDir2), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(FSDirectory.open(dir), true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    FSDirectory fsDir = FSDirectory.open(dir);\n    IndexWriter iw = new IndexWriter(fsDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    assertEquals(3, iw.getReader().getSequentialSubReaders().length);\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    IndexReader r = IndexReader.open(FSDirectory.open(destDir), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    r = IndexReader.open(FSDirectory.open(destDir2), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(FSDirectory.open(dir), true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a13a126d15299d5c1e117ea99ddae6fb0fa3f209","date":1291909583,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir, true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    FSDirectory fsDir = FSDirectory.open(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    assertEquals(3, iw.getReader().getSequentialSubReaders().length);\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    IndexReader r = IndexReader.open(FSDirectory.open(destDir), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    r = IndexReader.open(FSDirectory.open(destDir2), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(FSDirectory.open(dir), true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir, true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    FSDirectory fsDir = FSDirectory.open(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    assertEquals(3, iw.getReader().getSequentialSubReaders().length);\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    IndexReader r = IndexReader.open(FSDirectory.open(destDir), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    r = IndexReader.open(FSDirectory.open(destDir2), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(FSDirectory.open(dir), true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir, true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    FSDirectory fsDir = FSDirectory.open(dir);\n    IndexWriter iw = new IndexWriter(fsDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(OpenMode.CREATE));\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    assertEquals(3, iw.getReader().getSequentialSubReaders().length);\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    IndexReader r = IndexReader.open(FSDirectory.open(destDir), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    r = IndexReader.open(FSDirectory.open(destDir2), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(FSDirectory.open(dir), true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb6ef15965f2bc2105c1860fe8398fc95bbcd7d","date":1294247610,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    FSDirectory fsDir = FSDirectory.open(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    assertEquals(3, iw.getReader().getSequentialSubReaders().length);\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    IndexReader r = IndexReader.open(FSDirectory.open(destDir), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    r = IndexReader.open(FSDirectory.open(destDir2), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(FSDirectory.open(dir), true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir, true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir, true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir, true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir, true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir, true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    FSDirectory fsDir = FSDirectory.open(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    assertEquals(3, iw.getReader().getSequentialSubReaders().length);\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    IndexReader r = IndexReader.open(FSDirectory.open(destDir), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    r = IndexReader.open(FSDirectory.open(destDir2), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(FSDirectory.open(dir), true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    FSDirectory fsDir = FSDirectory.open(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    assertEquals(3, iw.getReader().getSequentialSubReaders().length);\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    IndexReader r = IndexReader.open(FSDirectory.open(destDir), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    r = IndexReader.open(FSDirectory.open(destDir2), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(FSDirectory.open(dir), true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir, true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir, true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60a7198a7661e77b5fca3e73925568e36c14f766","date":1307618688,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir, true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    FSDirectory fsDir = FSDirectory.open(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    assertEquals(3, iw.getReader().getSequentialSubReaders().length);\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    IndexReader r = IndexReader.open(FSDirectory.open(destDir), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    r = IndexReader.open(FSDirectory.open(destDir2), true);\n    assertEquals(50, r.maxDoc());\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(FSDirectory.open(dir), true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0aab6e810b4b0d3743d6a048be0602801f4b3920","date":1308671625,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir, true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir, true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir, true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir, true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir, true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(3, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir, true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00743482822ec0841b0344a37944b666e6a0228d","date":1313588663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir, true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = TestIndexWriterReader.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir, true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir, true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir, true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2, true);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir, true);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04d96eb3480582ebc4cc14711c2ca1a032791d75","date":1327856672,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    IndexReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    IndexReader r = IndexReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = IndexReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = IndexReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestIndexSplitter#test().mjava","sourceNew":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File dir = new File(TEMP_DIR, \"testfilesplitter\");\n    _TestUtil.rmDir(dir);\n    dir.mkdirs();\n    File destDir = new File(TEMP_DIR, \"testfilesplitterdest\");\n    _TestUtil.rmDir(destDir);\n    destDir.mkdirs();\n    Directory fsDir = newFSDirectory(dir);\n\n    LogMergePolicy mergePolicy = new LogByteSizeMergePolicy();\n    mergePolicy.setNoCFSRatio(1);\n    IndexWriter iw = new IndexWriter(\n        fsDir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.CREATE).\n            setMergePolicy(mergePolicy)\n    );\n    for (int x=0; x < 100; x++) {\n      Document doc = DocHelper.createDocument(x, \"index\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=100; x < 150; x++) {\n      Document doc = DocHelper.createDocument(x, \"index2\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    for (int x=150; x < 200; x++) {\n      Document doc = DocHelper.createDocument(x, \"index3\", 5);\n      iw.addDocument(doc);\n    }\n    iw.commit();\n    DirectoryReader iwReader = iw.getReader();\n    assertEquals(3, iwReader.getSequentialSubReaders().length);\n    iwReader.close();\n    iw.close();\n    // we should have 2 segments now\n    IndexSplitter is = new IndexSplitter(dir);\n    String splitSegName = is.infos.info(1).name;\n    is.split(destDir, new String[] {splitSegName});\n    Directory fsDirDest = newFSDirectory(destDir);\n    DirectoryReader r = DirectoryReader.open(fsDirDest);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest.close();\n    \n    // now test cmdline\n    File destDir2 = new File(TEMP_DIR, \"testfilesplitterdest2\");\n    _TestUtil.rmDir(destDir2);\n    destDir2.mkdirs();\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), destDir2.getAbsolutePath(), splitSegName});\n    assertEquals(4, destDir2.listFiles().length);\n    Directory fsDirDest2 = newFSDirectory(destDir2);\n    r = DirectoryReader.open(fsDirDest2);\n    assertEquals(50, r.maxDoc());\n    r.close();\n    fsDirDest2.close();\n    \n    // now remove the copied segment from src\n    IndexSplitter.main(new String[] {dir.getAbsolutePath(), \"-d\", splitSegName});\n    r = DirectoryReader.open(fsDir);\n    assertEquals(2, r.getSequentialSubReaders().length);\n    r.close();\n    fsDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60a7198a7661e77b5fca3e73925568e36c14f766":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["00743482822ec0841b0344a37944b666e6a0228d","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["00743482822ec0841b0344a37944b666e6a0228d"],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":["d572389229127c297dd1fa5ce4758e1cec41e799"],"00743482822ec0841b0344a37944b666e6a0228d":["0aab6e810b4b0d3743d6a048be0602801f4b3920"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04d96eb3480582ebc4cc14711c2ca1a032791d75":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["38a62612cfa4e104080d89d7751a8f1a258ac335"],"38a62612cfa4e104080d89d7751a8f1a258ac335":["d572389229127c297dd1fa5ce4758e1cec41e799"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["9bb6ef15965f2bc2105c1860fe8398fc95bbcd7d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f2c5f0cb44df114db4228c8f77861714b5cabaea","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","04d96eb3480582ebc4cc14711c2ca1a032791d75"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"9bb6ef15965f2bc2105c1860fe8398fc95bbcd7d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["00743482822ec0841b0344a37944b666e6a0228d","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"60a7198a7661e77b5fca3e73925568e36c14f766":[],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"00743482822ec0841b0344a37944b666e6a0228d":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","0aab6e810b4b0d3743d6a048be0602801f4b3920","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"04d96eb3480582ebc4cc14711c2ca1a032791d75":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a13a126d15299d5c1e117ea99ddae6fb0fa3f209":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","ab5cb6a74aefb78aa0569857970b9151dfe2e787","a3776dccca01c11e7046323cfad46a3b4a471233"],"38a62612cfa4e104080d89d7751a8f1a258ac335":["a13a126d15299d5c1e117ea99ddae6fb0fa3f209"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["60a7198a7661e77b5fca3e73925568e36c14f766"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["00743482822ec0841b0344a37944b666e6a0228d","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d572389229127c297dd1fa5ce4758e1cec41e799":["4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","38a62612cfa4e104080d89d7751a8f1a258ac335"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["9bb6ef15965f2bc2105c1860fe8398fc95bbcd7d"],"962d04139994fce5193143ef35615499a9a96d78":[],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"9bb6ef15965f2bc2105c1860fe8398fc95bbcd7d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","04d96eb3480582ebc4cc14711c2ca1a032791d75","5cab9a86bd67202d20b6adc463008c8e982b070a"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["60a7198a7661e77b5fca3e73925568e36c14f766","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","962d04139994fce5193143ef35615499a9a96d78","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}