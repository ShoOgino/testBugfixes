{"path":"lucene/src/java/org/apache/lucene/util/ArrayUtil#grow(long[],int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#grow(long[],int).mjava","pathOld":"src/java/org/apache/lucene/util/ArrayUtil#grow(long[],int).mjava","sourceNew":"  public static long[] grow(long[] array, int minSize) {\n    if (array.length < minSize) {\n      long[] newArray = new long[oversize(minSize, RamUsageEstimator.NUM_BYTES_LONG)];\n      System.arraycopy(array, 0, newArray, 0, array.length);\n      return newArray;\n    } else\n      return array;\n  }\n\n","sourceOld":"  public static long[] grow(long[] array, int minSize) {\n    if (array.length < minSize) {\n      long[] newArray = new long[oversize(minSize, RamUsageEstimator.NUM_BYTES_LONG)];\n      System.arraycopy(array, 0, newArray, 0, array.length);\n      return newArray;\n    } else\n      return array;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83224b38ea2936daead3abe32327aeaf2e2d83fe","date":1310129261,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#grow(long[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ArrayUtil#grow(long[],int).mjava","sourceNew":"  public static long[] grow(long[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      long[] newArray = new long[oversize(minSize, RamUsageEstimator.NUM_BYTES_LONG)];\n      System.arraycopy(array, 0, newArray, 0, array.length);\n      return newArray;\n    } else\n      return array;\n  }\n\n","sourceOld":"  public static long[] grow(long[] array, int minSize) {\n    if (array.length < minSize) {\n      long[] newArray = new long[oversize(minSize, RamUsageEstimator.NUM_BYTES_LONG)];\n      System.arraycopy(array, 0, newArray, 0, array.length);\n      return newArray;\n    } else\n      return array;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#grow(long[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ArrayUtil#grow(long[],int).mjava","sourceNew":"  public static long[] grow(long[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      long[] newArray = new long[oversize(minSize, RamUsageEstimator.NUM_BYTES_LONG)];\n      System.arraycopy(array, 0, newArray, 0, array.length);\n      return newArray;\n    } else\n      return array;\n  }\n\n","sourceOld":"  public static long[] grow(long[] array, int minSize) {\n    if (array.length < minSize) {\n      long[] newArray = new long[oversize(minSize, RamUsageEstimator.NUM_BYTES_LONG)];\n      System.arraycopy(array, 0, newArray, 0, array.length);\n      return newArray;\n    } else\n      return array;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#grow(long[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ArrayUtil#grow(long[],int).mjava","sourceNew":"  public static long[] grow(long[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      long[] newArray = new long[oversize(minSize, RamUsageEstimator.NUM_BYTES_LONG)];\n      System.arraycopy(array, 0, newArray, 0, array.length);\n      return newArray;\n    } else\n      return array;\n  }\n\n","sourceOld":"  public static long[] grow(long[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      long[] newArray = new long[oversize(minSize, RamUsageEstimator.NUM_BYTES_LONG)];\n      System.arraycopy(array, 0, newArray, 0, array.length);\n      return newArray;\n    } else\n      return array;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83224b38ea2936daead3abe32327aeaf2e2d83fe":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["83224b38ea2936daead3abe32327aeaf2e2d83fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["9454a6510e2db155fb01faa5c049b06ece95fab9","83224b38ea2936daead3abe32327aeaf2e2d83fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"83224b38ea2936daead3abe32327aeaf2e2d83fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["83224b38ea2936daead3abe32327aeaf2e2d83fe","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}