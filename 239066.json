{"path":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#maybeThrowIOException().mjava","commits":[{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#maybeThrowIOException().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#maybeThrowIOException().mjava","sourceNew":"  void maybeThrowIOException() throws IOException {\n    if (randomIOExceptionRate > 0.0) {\n      int number = Math.abs(randomState.nextInt() % 1000);\n      if (number < randomIOExceptionRate*1000) {\n        throw new IOException(\"a random IOException\");\n      }\n    }\n  }\n\n","sourceOld":"  void maybeThrowIOException() throws IOException {\n    if (randomIOExceptionRate > 0.0) {\n      int number = Math.abs(randomState.nextInt() % 1000);\n      if (number < randomIOExceptionRate*1000) {\n        throw new IOException(\"a random IOException\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60679157c78fc286ee35471398529a1e5749621c","date":1292841330,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#maybeThrowIOException().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#maybeThrowIOException().mjava","sourceNew":"  void maybeThrowIOException() throws IOException {\n    if (randomIOExceptionRate > 0.0) {\n      int number = Math.abs(randomState.nextInt() % 1000);\n      if (number < randomIOExceptionRate*1000) {\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(Thread.currentThread().getName() + \": MockDirectoryWrapper: now throw random exception\");\n          new Throwable().printStackTrace(System.out);\n        }\n        throw new IOException(\"a random IOException\");\n      }\n    }\n  }\n\n","sourceOld":"  void maybeThrowIOException() throws IOException {\n    if (randomIOExceptionRate > 0.0) {\n      int number = Math.abs(randomState.nextInt() % 1000);\n      if (number < randomIOExceptionRate*1000) {\n        throw new IOException(\"a random IOException\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#maybeThrowIOException().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#maybeThrowIOException().mjava","sourceNew":"  void maybeThrowIOException() throws IOException {\n    if (randomIOExceptionRate > 0.0) {\n      int number = Math.abs(randomState.nextInt() % 1000);\n      if (number < randomIOExceptionRate*1000) {\n        throw new IOException(\"a random IOException\");\n      }\n    }\n  }\n\n","sourceOld":"  void maybeThrowIOException() throws IOException {\n    if (randomIOExceptionRate > 0.0) {\n      int number = Math.abs(randomState.nextInt() % 1000);\n      if (number < randomIOExceptionRate*1000) {\n        throw new IOException(\"a random IOException\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#maybeThrowIOException().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#maybeThrowIOException().mjava","sourceNew":"  void maybeThrowIOException() throws IOException {\n    if (randomIOExceptionRate > 0.0) {\n      int number = Math.abs(randomState.nextInt() % 1000);\n      if (number < randomIOExceptionRate*1000) {\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(Thread.currentThread().getName() + \": MockDirectoryWrapper: now throw random exception\");\n          new Throwable().printStackTrace(System.out);\n        }\n        throw new IOException(\"a random IOException\");\n      }\n    }\n  }\n\n","sourceOld":"  void maybeThrowIOException() throws IOException {\n    if (randomIOExceptionRate > 0.0) {\n      int number = Math.abs(randomState.nextInt() % 1000);\n      if (number < randomIOExceptionRate*1000) {\n        throw new IOException(\"a random IOException\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#maybeThrowIOException().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#maybeThrowIOException().mjava","sourceNew":"  void maybeThrowIOException() throws IOException {\n    if (randomIOExceptionRate > 0.0) {\n      int number = Math.abs(randomState.nextInt() % 1000);\n      if (number < randomIOExceptionRate*1000) {\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(Thread.currentThread().getName() + \": MockDirectoryWrapper: now throw random exception\");\n          new Throwable().printStackTrace(System.out);\n        }\n        throw new IOException(\"a random IOException\");\n      }\n    }\n  }\n\n","sourceOld":"  void maybeThrowIOException() throws IOException {\n    if (randomIOExceptionRate > 0.0) {\n      int number = Math.abs(randomState.nextInt() % 1000);\n      if (number < randomIOExceptionRate*1000) {\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(Thread.currentThread().getName() + \": MockDirectoryWrapper: now throw random exception\");\n          new Throwable().printStackTrace(System.out);\n        }\n        throw new IOException(\"a random IOException\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#maybeThrowIOException().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#maybeThrowIOException().mjava","sourceNew":"  void maybeThrowIOException() throws IOException {\n    if (randomIOExceptionRate > 0.0) {\n      int number = Math.abs(randomState.nextInt() % 1000);\n      if (number < randomIOExceptionRate*1000) {\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(Thread.currentThread().getName() + \": MockDirectoryWrapper: now throw random exception\");\n          new Throwable().printStackTrace(System.out);\n        }\n        throw new IOException(\"a random IOException\");\n      }\n    }\n  }\n\n","sourceOld":"  void maybeThrowIOException() throws IOException {\n    if (randomIOExceptionRate > 0.0) {\n      int number = Math.abs(randomState.nextInt() % 1000);\n      if (number < randomIOExceptionRate*1000) {\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(Thread.currentThread().getName() + \": MockDirectoryWrapper: now throw random exception\");\n          new Throwable().printStackTrace(System.out);\n        }\n        throw new IOException(\"a random IOException\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper#maybeThrowIOException().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#maybeThrowIOException().mjava","sourceNew":"  void maybeThrowIOException() throws IOException {\n    if (randomIOExceptionRate > 0.0) {\n      int number = Math.abs(randomState.nextInt() % 1000);\n      if (number < randomIOExceptionRate*1000) {\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(Thread.currentThread().getName() + \": MockDirectoryWrapper: now throw random exception\");\n          new Throwable().printStackTrace(System.out);\n        }\n        throw new IOException(\"a random IOException\");\n      }\n    }\n  }\n\n","sourceOld":"  void maybeThrowIOException() throws IOException {\n    if (randomIOExceptionRate > 0.0) {\n      int number = Math.abs(randomState.nextInt() % 1000);\n      if (number < randomIOExceptionRate*1000) {\n        throw new IOException(\"a random IOException\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a05409176bd65129d67a785ee70e881e238a9aef","60679157c78fc286ee35471398529a1e5749621c"],"60679157c78fc286ee35471398529a1e5749621c":["a05409176bd65129d67a785ee70e881e238a9aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60679157c78fc286ee35471398529a1e5749621c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["60679157c78fc286ee35471398529a1e5749621c"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"60679157c78fc286ee35471398529a1e5749621c":["70ad682703b8585f5d0a637efec044d57ec05efb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a05409176bd65129d67a785ee70e881e238a9aef","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a05409176bd65129d67a785ee70e881e238a9aef":["70ad682703b8585f5d0a637efec044d57ec05efb","60679157c78fc286ee35471398529a1e5749621c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}