{"path":"solr/core/src/test/org/apache/solr/schema/EnumFieldTest#testEnumSort().mjava","commits":[{"id":"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656","date":1383680488,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/EnumFieldTest#testEnumSort().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEnumSort() throws Exception {\n    clearIndex();\n\n    assertU(adoc(\"id\", \"0\", FIELD_NAME, \"Not Available\"));\n    assertU(adoc(\"id\", \"1\", FIELD_NAME, \"Low\"));\n    assertU(adoc(\"id\", \"2\", FIELD_NAME, \"Medium\"));\n    assertU(adoc(\"id\", \"3\", FIELD_NAME, \"High\"));\n    assertU(adoc(\"id\", \"4\", FIELD_NAME, \"Critical\"));\n\n    // two docs w/o values\n    for (int i = 8; i <= 9; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" desc\"), \"//doc[1]/str[@name='severity']/text()='Critical'\",\n            \"//doc[2]/str[@name='severity']/text()='High'\", \"//doc[3]/str[@name='severity']/text()='Medium'\", \"//doc[4]/str[@name='severity']/text()='Low'\",\n            \"//doc[5]/str[@name='severity']/text()='Not Available'\");\n\n    //sort ascending - empty values will be first\n    assertQ(req(\"fl\", \"\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" asc\"), \"//doc[3]/str[@name='severity']/text()='Not Available'\");\n\n    //q for not empty docs\n    assertQ(req(\"fl\", \"\" + FIELD_NAME, \"q\", FIELD_NAME + \":[* TO *]\" , \"sort\", FIELD_NAME + \" asc\"), \"//doc[1]/str[@name='severity']/text()='Not Available'\",\n            \"//doc[2]/str[@name='severity']/text()='Low'\", \"//doc[3]/str[@name='severity']/text()='Medium'\", \"//doc[4]/str[@name='severity']/text()='High'\",\n            \"//doc[5]/str[@name='severity']/text()='Critical'\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20f76525d3996b01b8097ebb3bc088f4ddaa9e3c","date":1425864568,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/EnumFieldTest#testEnumSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/EnumFieldTest#testEnumSort().mjava","sourceNew":"  @Test\n  public void testEnumSort() throws Exception {\n    clearIndex();\n\n    assertU(adoc(\"id\", \"0\", FIELD_NAME, \"Not Available\"));\n    assertU(adoc(\"id\", \"1\", FIELD_NAME, \"Low\"));\n    assertU(adoc(\"id\", \"2\", FIELD_NAME, \"Medium\"));\n    assertU(adoc(\"id\", \"3\", FIELD_NAME, \"High\"));\n    assertU(adoc(\"id\", \"4\", FIELD_NAME, \"Critical\"));\n\n    // two docs w/o values\n    for (int i = 8; i <= 9; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" desc\"), \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='High'\", \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\", \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //sort ascending - empty values will be first\n    assertQ(req(\"fl\", \"\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" asc\"), \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //q for not empty docs\n    assertQ(req(\"fl\", \"\" + FIELD_NAME, \"q\", FIELD_NAME + \":[* TO *]\" , \"sort\", FIELD_NAME + \" asc\"), \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\", \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\", \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='High'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testEnumSort() throws Exception {\n    clearIndex();\n\n    assertU(adoc(\"id\", \"0\", FIELD_NAME, \"Not Available\"));\n    assertU(adoc(\"id\", \"1\", FIELD_NAME, \"Low\"));\n    assertU(adoc(\"id\", \"2\", FIELD_NAME, \"Medium\"));\n    assertU(adoc(\"id\", \"3\", FIELD_NAME, \"High\"));\n    assertU(adoc(\"id\", \"4\", FIELD_NAME, \"Critical\"));\n\n    // two docs w/o values\n    for (int i = 8; i <= 9; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" desc\"), \"//doc[1]/str[@name='severity']/text()='Critical'\",\n            \"//doc[2]/str[@name='severity']/text()='High'\", \"//doc[3]/str[@name='severity']/text()='Medium'\", \"//doc[4]/str[@name='severity']/text()='Low'\",\n            \"//doc[5]/str[@name='severity']/text()='Not Available'\");\n\n    //sort ascending - empty values will be first\n    assertQ(req(\"fl\", \"\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" asc\"), \"//doc[3]/str[@name='severity']/text()='Not Available'\");\n\n    //q for not empty docs\n    assertQ(req(\"fl\", \"\" + FIELD_NAME, \"q\", FIELD_NAME + \":[* TO *]\" , \"sort\", FIELD_NAME + \" asc\"), \"//doc[1]/str[@name='severity']/text()='Not Available'\",\n            \"//doc[2]/str[@name='severity']/text()='Low'\", \"//doc[3]/str[@name='severity']/text()='Medium'\", \"//doc[4]/str[@name='severity']/text()='High'\",\n            \"//doc[5]/str[@name='severity']/text()='Critical'\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/EnumFieldTest#testEnumSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/EnumFieldTest#testEnumSort().mjava","sourceNew":"  @Test\n  public void testEnumSort() throws Exception {\n    clearIndex();\n\n    assertU(adoc(\"id\", \"0\", FIELD_NAME, \"Not Available\"));\n    assertU(adoc(\"id\", \"1\", FIELD_NAME, \"Low\"));\n    assertU(adoc(\"id\", \"2\", FIELD_NAME, \"Medium\"));\n    assertU(adoc(\"id\", \"3\", FIELD_NAME, \"High\"));\n    assertU(adoc(\"id\", \"4\", FIELD_NAME, \"Critical\"));\n\n    // two docs w/o values\n    for (int i = 8; i <= 9; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" desc\"), \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='High'\", \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\", \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //sort ascending - empty values will be first\n    assertQ(req(\"fl\", \"\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" asc\"), \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //q for not empty docs\n    assertQ(req(\"fl\", \"\" + FIELD_NAME, \"q\", FIELD_NAME + \":[* TO *]\" , \"sort\", FIELD_NAME + \" asc\"), \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\", \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\", \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='High'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testEnumSort() throws Exception {\n    clearIndex();\n\n    assertU(adoc(\"id\", \"0\", FIELD_NAME, \"Not Available\"));\n    assertU(adoc(\"id\", \"1\", FIELD_NAME, \"Low\"));\n    assertU(adoc(\"id\", \"2\", FIELD_NAME, \"Medium\"));\n    assertU(adoc(\"id\", \"3\", FIELD_NAME, \"High\"));\n    assertU(adoc(\"id\", \"4\", FIELD_NAME, \"Critical\"));\n\n    // two docs w/o values\n    for (int i = 8; i <= 9; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" desc\"), \"//doc[1]/str[@name='severity']/text()='Critical'\",\n            \"//doc[2]/str[@name='severity']/text()='High'\", \"//doc[3]/str[@name='severity']/text()='Medium'\", \"//doc[4]/str[@name='severity']/text()='Low'\",\n            \"//doc[5]/str[@name='severity']/text()='Not Available'\");\n\n    //sort ascending - empty values will be first\n    assertQ(req(\"fl\", \"\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" asc\"), \"//doc[3]/str[@name='severity']/text()='Not Available'\");\n\n    //q for not empty docs\n    assertQ(req(\"fl\", \"\" + FIELD_NAME, \"q\", FIELD_NAME + \":[* TO *]\" , \"sort\", FIELD_NAME + \" asc\"), \"//doc[1]/str[@name='severity']/text()='Not Available'\",\n            \"//doc[2]/str[@name='severity']/text()='Low'\", \"//doc[3]/str[@name='severity']/text()='Medium'\", \"//doc[4]/str[@name='severity']/text()='High'\",\n            \"//doc[5]/str[@name='severity']/text()='Critical'\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ad8c9e9210e008dc7b8ad5a037ff20879150ea","date":1501889566,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/EnumFieldTest#testEnumSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/EnumFieldTest#testEnumSort().mjava","sourceNew":"  @Test\n  public void testEnumSort() throws Exception {\n    assumeFalse(\"Skipping testing of EnumFieldType without docValues, which is unsupported.\",\n        System.getProperty(\"solr.tests.EnumFieldType\").equals(\"solr.EnumFieldType\")\n            && System.getProperty(\"solr.tests.numeric.dv\").equals(\"false\"));\n    assumeFalse(\"Skipping testing of unindexed EnumField without docValues, which is unsupported.\",\n        System.getProperty(\"solr.tests.EnumFieldType\").equals(\"solr.EnumField\")\n            && System.getProperty(\"solr.tests.EnumFieldTest.indexed\").equals(\"false\")\n            && System.getProperty(\"solr.tests.numeric.dv\").equals(\"false\"));\n\n    clearIndex();\n    assertU(adoc(\"id\", \"0\", FIELD_NAME, \"Not Available\"));\n    assertU(adoc(\"id\", \"1\", FIELD_NAME, \"Low\"));\n    assertU(adoc(\"id\", \"2\", FIELD_NAME, \"Medium\"));\n    assertU(adoc(\"id\", \"3\", FIELD_NAME, \"High\"));\n    assertU(adoc(\"id\", \"4\", FIELD_NAME, \"Critical\"));\n\n    // two docs w/o values\n    for (int i = 8; i <= 9; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" desc\", \"indent\",\"on\"),\n            \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='High'\",\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\",\n            \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //sort ascending - empty values will be first\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" asc\", \"indent\", \"on\"),\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //q for not empty docs\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", FIELD_NAME + \":[* TO *]\" , \"sort\", FIELD_NAME + \" asc\", \"indent\", \"on\"),\n            \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\",\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\",\n            \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='High'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testEnumSort() throws Exception {\n    clearIndex();\n\n    assertU(adoc(\"id\", \"0\", FIELD_NAME, \"Not Available\"));\n    assertU(adoc(\"id\", \"1\", FIELD_NAME, \"Low\"));\n    assertU(adoc(\"id\", \"2\", FIELD_NAME, \"Medium\"));\n    assertU(adoc(\"id\", \"3\", FIELD_NAME, \"High\"));\n    assertU(adoc(\"id\", \"4\", FIELD_NAME, \"Critical\"));\n\n    // two docs w/o values\n    for (int i = 8; i <= 9; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" desc\"), \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='High'\", \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\", \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //sort ascending - empty values will be first\n    assertQ(req(\"fl\", \"\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" asc\"), \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //q for not empty docs\n    assertQ(req(\"fl\", \"\" + FIELD_NAME, \"q\", FIELD_NAME + \":[* TO *]\" , \"sort\", FIELD_NAME + \" asc\"), \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\", \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\", \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='High'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/EnumFieldTest#testEnumSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/EnumFieldTest#testEnumSort().mjava","sourceNew":"  @Test\n  public void testEnumSort() throws Exception {\n    assumeFalse(\"Skipping testing of EnumFieldType without docValues, which is unsupported.\",\n        System.getProperty(\"solr.tests.EnumFieldType\").equals(\"solr.EnumFieldType\")\n            && System.getProperty(\"solr.tests.numeric.dv\").equals(\"false\"));\n    assumeFalse(\"Skipping testing of unindexed EnumField without docValues, which is unsupported.\",\n        System.getProperty(\"solr.tests.EnumFieldType\").equals(\"solr.EnumField\")\n            && System.getProperty(\"solr.tests.EnumFieldTest.indexed\").equals(\"false\")\n            && System.getProperty(\"solr.tests.numeric.dv\").equals(\"false\"));\n\n    clearIndex();\n    assertU(adoc(\"id\", \"0\", FIELD_NAME, \"Not Available\"));\n    assertU(adoc(\"id\", \"1\", FIELD_NAME, \"Low\"));\n    assertU(adoc(\"id\", \"2\", FIELD_NAME, \"Medium\"));\n    assertU(adoc(\"id\", \"3\", FIELD_NAME, \"High\"));\n    assertU(adoc(\"id\", \"4\", FIELD_NAME, \"Critical\"));\n\n    // two docs w/o values\n    for (int i = 8; i <= 9; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" desc\", \"indent\",\"on\"),\n            \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='High'\",\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\",\n            \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //sort ascending - empty values will be first\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" asc\", \"indent\", \"on\"),\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //q for not empty docs\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", FIELD_NAME + \":[* TO *]\" , \"sort\", FIELD_NAME + \" asc\", \"indent\", \"on\"),\n            \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\",\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\",\n            \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='High'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testEnumSort() throws Exception {\n    clearIndex();\n\n    assertU(adoc(\"id\", \"0\", FIELD_NAME, \"Not Available\"));\n    assertU(adoc(\"id\", \"1\", FIELD_NAME, \"Low\"));\n    assertU(adoc(\"id\", \"2\", FIELD_NAME, \"Medium\"));\n    assertU(adoc(\"id\", \"3\", FIELD_NAME, \"High\"));\n    assertU(adoc(\"id\", \"4\", FIELD_NAME, \"Critical\"));\n\n    // two docs w/o values\n    for (int i = 8; i <= 9; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" desc\"), \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='High'\", \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\", \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //sort ascending - empty values will be first\n    assertQ(req(\"fl\", \"\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" asc\"), \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //q for not empty docs\n    assertQ(req(\"fl\", \"\" + FIELD_NAME, \"q\", FIELD_NAME + \":[* TO *]\" , \"sort\", FIELD_NAME + \" asc\"), \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\", \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\", \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='High'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70052d44b40be0028db94b4cffeb9aaa5468055e","date":1505151510,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/EnumFieldTest#testEnumSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/EnumFieldTest#testEnumSort().mjava","sourceNew":"  @Test\n  public void testEnumSort() throws Exception {\n    assumeFalse(\"Skipping testing of EnumFieldType without docValues, which is unsupported.\",\n        System.getProperty(\"solr.tests.EnumFieldType\").equals(\"solr.EnumFieldType\")\n            && System.getProperty(\"solr.tests.numeric.dv\").equals(\"false\"));\n    assumeFalse(\"Skipping testing of unindexed EnumField without docValues, which is unsupported.\",\n        System.getProperty(\"solr.tests.EnumFieldType\").equals(\"solr.EnumField\")\n            && System.getProperty(\"solr.tests.EnumFieldTest.indexed\").equals(\"false\")\n            && System.getProperty(\"solr.tests.numeric.dv\").equals(\"false\"));\n\n    clearIndex();\n    assertU(adoc(\"id\", \"0\", FIELD_NAME, \"Not Available\"));\n    assertU(adoc(\"id\", \"1\", FIELD_NAME, \"Low\"));\n    assertU(adoc(\"id\", \"2\", FIELD_NAME, \"Medium\"));\n    assertU(adoc(\"id\", \"3\", FIELD_NAME, \"High\"));\n    assertU(adoc(\"id\", \"4\", FIELD_NAME, \"Critical\"));\n\n    // two docs w/o values\n    for (int i = 8; i <= 9; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" desc\", \"indent\",\"on\"),\n            \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='High'\",\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\",\n            \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //sort ascending - empty values will be first\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" asc\", \"indent\", \"on\"),\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //q for not empty docs\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", FIELD_NAME + \":[* TO *]\" , \"sort\", FIELD_NAME + \" asc\", \"indent\", \"on\"),\n            \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\",\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\",\n            \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='High'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\"\n    );\n\n    // missing first....\n    for (String dir : Arrays.asList(\"asc\", \"desc\")) {\n      assertQ(req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", FIELD_NAME + \"_missingFirst \" + dir + \", id desc\")\n              , \"//doc[1]/str[@name='id']/text()='9'\"\n              , \"//doc[2]/str[@name='id']/text()='8'\"\n              );\n    }\n    // missing last...\n    for (String dir : Arrays.asList(\"asc\", \"desc\")) {\n      assertQ(req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", FIELD_NAME + \"_missingLast \" + dir + \", id desc\")\n              , \"//doc[6]/str[@name='id']/text()='9'\"\n              , \"//doc[7]/str[@name='id']/text()='8'\"\n              );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEnumSort() throws Exception {\n    assumeFalse(\"Skipping testing of EnumFieldType without docValues, which is unsupported.\",\n        System.getProperty(\"solr.tests.EnumFieldType\").equals(\"solr.EnumFieldType\")\n            && System.getProperty(\"solr.tests.numeric.dv\").equals(\"false\"));\n    assumeFalse(\"Skipping testing of unindexed EnumField without docValues, which is unsupported.\",\n        System.getProperty(\"solr.tests.EnumFieldType\").equals(\"solr.EnumField\")\n            && System.getProperty(\"solr.tests.EnumFieldTest.indexed\").equals(\"false\")\n            && System.getProperty(\"solr.tests.numeric.dv\").equals(\"false\"));\n\n    clearIndex();\n    assertU(adoc(\"id\", \"0\", FIELD_NAME, \"Not Available\"));\n    assertU(adoc(\"id\", \"1\", FIELD_NAME, \"Low\"));\n    assertU(adoc(\"id\", \"2\", FIELD_NAME, \"Medium\"));\n    assertU(adoc(\"id\", \"3\", FIELD_NAME, \"High\"));\n    assertU(adoc(\"id\", \"4\", FIELD_NAME, \"Critical\"));\n\n    // two docs w/o values\n    for (int i = 8; i <= 9; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" desc\", \"indent\",\"on\"),\n            \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='High'\",\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\",\n            \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //sort ascending - empty values will be first\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" asc\", \"indent\", \"on\"),\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //q for not empty docs\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", FIELD_NAME + \":[* TO *]\" , \"sort\", FIELD_NAME + \" asc\", \"indent\", \"on\"),\n            \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\",\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\",\n            \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='High'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffb85feece8645a035c02443a625f5af15e1106b","date":1505219692,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/EnumFieldTest#testEnumSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/EnumFieldTest#testEnumSort().mjava","sourceNew":"  @Test\n  public void testEnumSort() throws Exception {\n    assumeFalse(\"Skipping testing of EnumFieldType without docValues, which is unsupported.\",\n        System.getProperty(\"solr.tests.EnumFieldType\").equals(\"solr.EnumFieldType\")\n            && System.getProperty(\"solr.tests.numeric.dv\").equals(\"false\"));\n    assumeFalse(\"Skipping testing of unindexed EnumField without docValues, which is unsupported.\",\n        System.getProperty(\"solr.tests.EnumFieldType\").equals(\"solr.EnumField\")\n            && System.getProperty(\"solr.tests.EnumFieldTest.indexed\").equals(\"false\")\n            && System.getProperty(\"solr.tests.numeric.dv\").equals(\"false\"));\n\n    clearIndex();\n    assertU(adoc(\"id\", \"0\", FIELD_NAME, \"Not Available\"));\n    assertU(adoc(\"id\", \"1\", FIELD_NAME, \"Low\"));\n    assertU(adoc(\"id\", \"2\", FIELD_NAME, \"Medium\"));\n    assertU(adoc(\"id\", \"3\", FIELD_NAME, \"High\"));\n    assertU(adoc(\"id\", \"4\", FIELD_NAME, \"Critical\"));\n\n    // two docs w/o values\n    for (int i = 8; i <= 9; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" desc\", \"indent\",\"on\"),\n            \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='High'\",\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\",\n            \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //sort ascending - empty values will be first\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" asc\", \"indent\", \"on\"),\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //q for not empty docs\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", FIELD_NAME + \":[* TO *]\" , \"sort\", FIELD_NAME + \" asc\", \"indent\", \"on\"),\n            \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\",\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\",\n            \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='High'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\"\n    );\n\n    // missing first....\n    for (String dir : Arrays.asList(\"asc\", \"desc\")) {\n      assertQ(req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", FIELD_NAME + \"_missingFirst \" + dir + \", id desc\")\n              , \"//doc[1]/str[@name='id']/text()='9'\"\n              , \"//doc[2]/str[@name='id']/text()='8'\"\n              );\n    }\n    // missing last...\n    for (String dir : Arrays.asList(\"asc\", \"desc\")) {\n      assertQ(req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", FIELD_NAME + \"_missingLast \" + dir + \", id desc\")\n              , \"//doc[6]/str[@name='id']/text()='9'\"\n              , \"//doc[7]/str[@name='id']/text()='8'\"\n              );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEnumSort() throws Exception {\n    assumeFalse(\"Skipping testing of EnumFieldType without docValues, which is unsupported.\",\n        System.getProperty(\"solr.tests.EnumFieldType\").equals(\"solr.EnumFieldType\")\n            && System.getProperty(\"solr.tests.numeric.dv\").equals(\"false\"));\n    assumeFalse(\"Skipping testing of unindexed EnumField without docValues, which is unsupported.\",\n        System.getProperty(\"solr.tests.EnumFieldType\").equals(\"solr.EnumField\")\n            && System.getProperty(\"solr.tests.EnumFieldTest.indexed\").equals(\"false\")\n            && System.getProperty(\"solr.tests.numeric.dv\").equals(\"false\"));\n\n    clearIndex();\n    assertU(adoc(\"id\", \"0\", FIELD_NAME, \"Not Available\"));\n    assertU(adoc(\"id\", \"1\", FIELD_NAME, \"Low\"));\n    assertU(adoc(\"id\", \"2\", FIELD_NAME, \"Medium\"));\n    assertU(adoc(\"id\", \"3\", FIELD_NAME, \"High\"));\n    assertU(adoc(\"id\", \"4\", FIELD_NAME, \"Critical\"));\n\n    // two docs w/o values\n    for (int i = 8; i <= 9; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" desc\", \"indent\",\"on\"),\n            \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='High'\",\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\",\n            \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //sort ascending - empty values will be first\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" asc\", \"indent\", \"on\"),\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //q for not empty docs\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", FIELD_NAME + \":[* TO *]\" , \"sort\", FIELD_NAME + \" asc\", \"indent\", \"on\"),\n            \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\",\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\",\n            \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='High'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/EnumFieldTest#testEnumSort().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/EnumFieldTest#testEnumSort().mjava","sourceNew":"  @Test\n  public void testEnumSort() throws Exception {\n    assumeFalse(\"Skipping testing of EnumFieldType without docValues, which is unsupported.\",\n        System.getProperty(\"solr.tests.EnumFieldType\").equals(\"solr.EnumFieldType\")\n            && System.getProperty(\"solr.tests.numeric.dv\").equals(\"false\"));\n    assumeFalse(\"Skipping testing of unindexed EnumField without docValues, which is unsupported.\",\n        System.getProperty(\"solr.tests.EnumFieldType\").equals(\"solr.EnumField\")\n            && System.getProperty(\"solr.tests.EnumFieldTest.indexed\").equals(\"false\")\n            && System.getProperty(\"solr.tests.numeric.dv\").equals(\"false\"));\n\n    clearIndex();\n    assertU(adoc(\"id\", \"0\", FIELD_NAME, \"Not Available\"));\n    assertU(adoc(\"id\", \"1\", FIELD_NAME, \"Low\"));\n    assertU(adoc(\"id\", \"2\", FIELD_NAME, \"Medium\"));\n    assertU(adoc(\"id\", \"3\", FIELD_NAME, \"High\"));\n    assertU(adoc(\"id\", \"4\", FIELD_NAME, \"Critical\"));\n\n    // two docs w/o values\n    for (int i = 8; i <= 9; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" desc\", \"indent\",\"on\"),\n            \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='High'\",\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\",\n            \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //sort ascending - empty values will be first\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" asc\", \"indent\", \"on\"),\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //q for not empty docs\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", FIELD_NAME + \":[* TO *]\" , \"sort\", FIELD_NAME + \" asc\", \"indent\", \"on\"),\n            \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\",\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\",\n            \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='High'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\"\n    );\n\n    // missing first....\n    for (String dir : Arrays.asList(\"asc\", \"desc\")) {\n      assertQ(req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", FIELD_NAME + \"_missingFirst \" + dir + \", id desc\")\n              , \"//doc[1]/str[@name='id']/text()='9'\"\n              , \"//doc[2]/str[@name='id']/text()='8'\"\n              );\n    }\n    // missing last...\n    for (String dir : Arrays.asList(\"asc\", \"desc\")) {\n      assertQ(req(\"fl\", \"id\", \"q\", \"*:*\", \"sort\", FIELD_NAME + \"_missingLast \" + dir + \", id desc\")\n              , \"//doc[6]/str[@name='id']/text()='9'\"\n              , \"//doc[7]/str[@name='id']/text()='8'\"\n              );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testEnumSort() throws Exception {\n    assumeFalse(\"Skipping testing of EnumFieldType without docValues, which is unsupported.\",\n        System.getProperty(\"solr.tests.EnumFieldType\").equals(\"solr.EnumFieldType\")\n            && System.getProperty(\"solr.tests.numeric.dv\").equals(\"false\"));\n    assumeFalse(\"Skipping testing of unindexed EnumField without docValues, which is unsupported.\",\n        System.getProperty(\"solr.tests.EnumFieldType\").equals(\"solr.EnumField\")\n            && System.getProperty(\"solr.tests.EnumFieldTest.indexed\").equals(\"false\")\n            && System.getProperty(\"solr.tests.numeric.dv\").equals(\"false\"));\n\n    clearIndex();\n    assertU(adoc(\"id\", \"0\", FIELD_NAME, \"Not Available\"));\n    assertU(adoc(\"id\", \"1\", FIELD_NAME, \"Low\"));\n    assertU(adoc(\"id\", \"2\", FIELD_NAME, \"Medium\"));\n    assertU(adoc(\"id\", \"3\", FIELD_NAME, \"High\"));\n    assertU(adoc(\"id\", \"4\", FIELD_NAME, \"Critical\"));\n\n    // two docs w/o values\n    for (int i = 8; i <= 9; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" desc\", \"indent\",\"on\"),\n            \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='High'\",\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\",\n            \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //sort ascending - empty values will be first\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", \"*:*\", \"sort\", FIELD_NAME + \" asc\", \"indent\", \"on\"),\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\");\n\n    //q for not empty docs\n    assertQ(req(\"fl\", \"id,\" + FIELD_NAME, \"q\", FIELD_NAME + \":[* TO *]\" , \"sort\", FIELD_NAME + \" asc\", \"indent\", \"on\"),\n            \"//doc[1]/str[@name='\" + FIELD_NAME + \"']/text()='Not Available'\",\n            \"//doc[2]/str[@name='\" + FIELD_NAME + \"']/text()='Low'\",\n            \"//doc[3]/str[@name='\" + FIELD_NAME + \"']/text()='Medium'\",\n            \"//doc[4]/str[@name='\" + FIELD_NAME + \"']/text()='High'\",\n            \"//doc[5]/str[@name='\" + FIELD_NAME + \"']/text()='Critical'\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","ffb85feece8645a035c02443a625f5af15e1106b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["567c8d957d62e7e7bcf2ac9e7fb9bacb03182656","20f76525d3996b01b8097ebb3bc088f4ddaa9e3c"],"ffb85feece8645a035c02443a625f5af15e1106b":["54ad8c9e9210e008dc7b8ad5a037ff20879150ea","70052d44b40be0028db94b4cffeb9aaa5468055e"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["20f76525d3996b01b8097ebb3bc088f4ddaa9e3c","54ad8c9e9210e008dc7b8ad5a037ff20879150ea"],"20f76525d3996b01b8097ebb3bc088f4ddaa9e3c":["567c8d957d62e7e7bcf2ac9e7fb9bacb03182656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70052d44b40be0028db94b4cffeb9aaa5468055e":["54ad8c9e9210e008dc7b8ad5a037ff20879150ea"],"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ad8c9e9210e008dc7b8ad5a037ff20879150ea":["20f76525d3996b01b8097ebb3bc088f4ddaa9e3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ffb85feece8645a035c02443a625f5af15e1106b"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["685bd38810c206c93e9058f3c2cfa9827c086c27"],"ffb85feece8645a035c02443a625f5af15e1106b":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"20f76525d3996b01b8097ebb3bc088f4ddaa9e3c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","54ad8c9e9210e008dc7b8ad5a037ff20879150ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["567c8d957d62e7e7bcf2ac9e7fb9bacb03182656"],"70052d44b40be0028db94b4cffeb9aaa5468055e":["ffb85feece8645a035c02443a625f5af15e1106b"],"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f76525d3996b01b8097ebb3bc088f4ddaa9e3c"],"54ad8c9e9210e008dc7b8ad5a037ff20879150ea":["ffb85feece8645a035c02443a625f5af15e1106b","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","70052d44b40be0028db94b4cffeb9aaa5468055e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}