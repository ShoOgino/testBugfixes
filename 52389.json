{"path":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/shape/simple/CircleImpl#relateRectanglePhase2(Rectangle,SpatialRelation,SpatialContext).mjava","commits":[{"id":"b17c5c53627893d93f9261826cc6d9c447c5ee3a","date":1329777932,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/shape/simple/CircleImpl#relateRectanglePhase2(Rectangle,SpatialRelation,SpatialContext).mjava","pathOld":"/dev/null","sourceNew":"  protected SpatialRelation relateRectanglePhase2(final Rectangle r, SpatialRelation bboxSect, SpatialContext ctx) {\n    /*\n     !! DOES NOT WORK WITH GEO CROSSING DATELINE OR WORLD-WRAP.\n     TODO upgrade to handle crossing dateline, but not world-wrap; use some x-shifting code from RectangleImpl.\n     */\n\n    //At this point, the only thing we are certain of is that circle is *NOT* WITHIN r, since the bounding box of a\n    // circle MUST be within r for the circle to be within r.\n\n    //--Quickly determine if they are DISJOINT or not.\n    //see http://stackoverflow.com/questions/401847/circle-rectangle-collision-detection-intersection/1879223#1879223\n    final double closestX;\n    double ctr_x = getXAxis();\n    if ( ctr_x < r.getMinX() )\n      closestX = r.getMinX();\n    else if (ctr_x > r.getMaxX())\n      closestX = r.getMaxX();\n    else\n      closestX = ctr_x;\n\n    final double closestY;\n    double ctr_y = getYAxis();\n    if ( ctr_y < r.getMinY() )\n      closestY = r.getMinY();\n    else if (ctr_y > r.getMaxY())\n      closestY = r.getMaxY();\n    else\n      closestY = ctr_y;\n\n    //Check if there is an intersection from this circle to closestXY\n    boolean didContainOnClosestXY = false;\n    if (ctr_x == closestX) {\n      double deltaY = Math.abs(ctr_y - closestY);\n      double distYCirc = (ctr_y < closestY ? enclosingBox.getMaxY() - ctr_y : ctr_y - enclosingBox.getMinY());\n      if (deltaY > distYCirc)\n        return SpatialRelation.DISJOINT;\n    } else if (ctr_y == closestY) {\n      double deltaX = Math.abs(ctr_x - closestX);\n      double distXCirc = (ctr_x < closestX ? enclosingBox.getMaxX() - ctr_x : ctr_x - enclosingBox.getMinX());\n      if (deltaX > distXCirc)\n        return SpatialRelation.DISJOINT;\n    } else {\n      //fallback on more expensive calculation\n      didContainOnClosestXY = true;\n      if(! contains(closestX,closestY) )\n        return SpatialRelation.DISJOINT;\n    }\n\n    //At this point we know that it's *NOT* DISJOINT, so there is some level of intersection. It's *NOT* WITHIN either.\n    // The only question left is whether circle CONTAINS r or simply intersects it.\n\n    //If circle contains r, then its bbox MUST also CONTAIN r.\n    if (bboxSect != SpatialRelation.CONTAINS)\n      return SpatialRelation.INTERSECTS;\n\n    //Find the farthest point of r away from the center of the circle. If that point is contained, then all of r is\n    // contained.\n    double farthestX = r.getMaxX() - ctr_x > ctr_x - r.getMinX() ? r.getMaxX() : r.getMinX();\n    double farthestY = r.getMaxY() - ctr_y > ctr_y - r.getMinY() ? r.getMaxY() : r.getMinY();\n    if (contains(farthestX,farthestY))\n      return SpatialRelation.CONTAINS;\n    return SpatialRelation.INTERSECTS;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/main/java/org/apache/lucene/spatial/base/shape/simple/CircleImpl#relateRectanglePhase2(Rectangle,SpatialRelation,SpatialContext).mjava","pathOld":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/shape/simple/CircleImpl#relateRectanglePhase2(Rectangle,SpatialRelation,SpatialContext).mjava","sourceNew":"  protected SpatialRelation relateRectanglePhase2(final Rectangle r, SpatialRelation bboxSect, SpatialContext ctx) {\n    /*\n     !! DOES NOT WORK WITH GEO CROSSING DATELINE OR WORLD-WRAP.\n     TODO upgrade to handle crossing dateline, but not world-wrap; use some x-shifting code from RectangleImpl.\n     */\n\n    //At this point, the only thing we are certain of is that circle is *NOT* WITHIN r, since the bounding box of a\n    // circle MUST be within r for the circle to be within r.\n\n    //--Quickly determine if they are DISJOINT or not.\n    //see http://stackoverflow.com/questions/401847/circle-rectangle-collision-detection-intersection/1879223#1879223\n    final double closestX;\n    double ctr_x = getXAxis();\n    if ( ctr_x < r.getMinX() )\n      closestX = r.getMinX();\n    else if (ctr_x > r.getMaxX())\n      closestX = r.getMaxX();\n    else\n      closestX = ctr_x;\n\n    final double closestY;\n    double ctr_y = getYAxis();\n    if ( ctr_y < r.getMinY() )\n      closestY = r.getMinY();\n    else if (ctr_y > r.getMaxY())\n      closestY = r.getMaxY();\n    else\n      closestY = ctr_y;\n\n    //Check if there is an intersection from this circle to closestXY\n    boolean didContainOnClosestXY = false;\n    if (ctr_x == closestX) {\n      double deltaY = Math.abs(ctr_y - closestY);\n      double distYCirc = (ctr_y < closestY ? enclosingBox.getMaxY() - ctr_y : ctr_y - enclosingBox.getMinY());\n      if (deltaY > distYCirc)\n        return SpatialRelation.DISJOINT;\n    } else if (ctr_y == closestY) {\n      double deltaX = Math.abs(ctr_x - closestX);\n      double distXCirc = (ctr_x < closestX ? enclosingBox.getMaxX() - ctr_x : ctr_x - enclosingBox.getMinX());\n      if (deltaX > distXCirc)\n        return SpatialRelation.DISJOINT;\n    } else {\n      //fallback on more expensive calculation\n      didContainOnClosestXY = true;\n      if(! contains(closestX,closestY) )\n        return SpatialRelation.DISJOINT;\n    }\n\n    //At this point we know that it's *NOT* DISJOINT, so there is some level of intersection. It's *NOT* WITHIN either.\n    // The only question left is whether circle CONTAINS r or simply intersects it.\n\n    //If circle contains r, then its bbox MUST also CONTAIN r.\n    if (bboxSect != SpatialRelation.CONTAINS)\n      return SpatialRelation.INTERSECTS;\n\n    //Find the farthest point of r away from the center of the circle. If that point is contained, then all of r is\n    // contained.\n    double farthestX = r.getMaxX() - ctr_x > ctr_x - r.getMinX() ? r.getMaxX() : r.getMinX();\n    double farthestY = r.getMaxY() - ctr_y > ctr_y - r.getMinY() ? r.getMaxY() : r.getMinY();\n    if (contains(farthestX,farthestY))\n      return SpatialRelation.CONTAINS;\n    return SpatialRelation.INTERSECTS;\n  }\n\n","sourceOld":"  protected SpatialRelation relateRectanglePhase2(final Rectangle r, SpatialRelation bboxSect, SpatialContext ctx) {\n    /*\n     !! DOES NOT WORK WITH GEO CROSSING DATELINE OR WORLD-WRAP.\n     TODO upgrade to handle crossing dateline, but not world-wrap; use some x-shifting code from RectangleImpl.\n     */\n\n    //At this point, the only thing we are certain of is that circle is *NOT* WITHIN r, since the bounding box of a\n    // circle MUST be within r for the circle to be within r.\n\n    //--Quickly determine if they are DISJOINT or not.\n    //see http://stackoverflow.com/questions/401847/circle-rectangle-collision-detection-intersection/1879223#1879223\n    final double closestX;\n    double ctr_x = getXAxis();\n    if ( ctr_x < r.getMinX() )\n      closestX = r.getMinX();\n    else if (ctr_x > r.getMaxX())\n      closestX = r.getMaxX();\n    else\n      closestX = ctr_x;\n\n    final double closestY;\n    double ctr_y = getYAxis();\n    if ( ctr_y < r.getMinY() )\n      closestY = r.getMinY();\n    else if (ctr_y > r.getMaxY())\n      closestY = r.getMaxY();\n    else\n      closestY = ctr_y;\n\n    //Check if there is an intersection from this circle to closestXY\n    boolean didContainOnClosestXY = false;\n    if (ctr_x == closestX) {\n      double deltaY = Math.abs(ctr_y - closestY);\n      double distYCirc = (ctr_y < closestY ? enclosingBox.getMaxY() - ctr_y : ctr_y - enclosingBox.getMinY());\n      if (deltaY > distYCirc)\n        return SpatialRelation.DISJOINT;\n    } else if (ctr_y == closestY) {\n      double deltaX = Math.abs(ctr_x - closestX);\n      double distXCirc = (ctr_x < closestX ? enclosingBox.getMaxX() - ctr_x : ctr_x - enclosingBox.getMinX());\n      if (deltaX > distXCirc)\n        return SpatialRelation.DISJOINT;\n    } else {\n      //fallback on more expensive calculation\n      didContainOnClosestXY = true;\n      if(! contains(closestX,closestY) )\n        return SpatialRelation.DISJOINT;\n    }\n\n    //At this point we know that it's *NOT* DISJOINT, so there is some level of intersection. It's *NOT* WITHIN either.\n    // The only question left is whether circle CONTAINS r or simply intersects it.\n\n    //If circle contains r, then its bbox MUST also CONTAIN r.\n    if (bboxSect != SpatialRelation.CONTAINS)\n      return SpatialRelation.INTERSECTS;\n\n    //Find the farthest point of r away from the center of the circle. If that point is contained, then all of r is\n    // contained.\n    double farthestX = r.getMaxX() - ctr_x > ctr_x - r.getMinX() ? r.getMaxX() : r.getMinX();\n    double farthestY = r.getMaxY() - ctr_y > ctr_y - r.getMinY() ? r.getMaxY() : r.getMinY();\n    if (contains(farthestX,farthestY))\n      return SpatialRelation.CONTAINS;\n    return SpatialRelation.INTERSECTS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["b17c5c53627893d93f9261826cc6d9c447c5ee3a"],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b17c5c53627893d93f9261826cc6d9c447c5ee3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":[],"b17c5c53627893d93f9261826cc6d9c447c5ee3a":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}