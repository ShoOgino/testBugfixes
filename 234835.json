{"path":"solr/core/src/java/org/apache/solr/search/Grouping#addFieldCommand(String,SolrQueryRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#addFieldCommand(String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping#addFieldCommand(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Adds a field command based on the specified field.\n   * If the field is not compatible with {@link CommandField} it invokes the\n   * {@link #addFunctionCommand(String, org.apache.solr.request.SolrQueryRequest)} method.\n   *\n   * @param field The fieldname to group by.\n   */\n  public void addFieldCommand(String field, SolrQueryRequest request) throws ParseException {\n    SchemaField schemaField = searcher.getSchema().getField(field); // Throws an exception when field doesn't exist. Bad request.\n    FieldType fieldType = schemaField.getType();\n    ValueSource valueSource = fieldType.getValueSource(schemaField, null);\n    if (!(valueSource instanceof StrFieldSource)) {\n      addFunctionCommand(field, request);\n      return;\n    }\n\n    Grouping.CommandField gc = new CommandField();\n    gc.groupSort = groupSort;\n    gc.groupBy = field;\n    gc.key = field;\n    gc.numGroups = limitDefault;\n    gc.docsPerGroup = docsPerGroupDefault;\n    gc.groupOffset = groupOffsetDefault;\n    gc.offset = cmd.getOffset();\n    gc.sort = sort;\n    gc.format = defaultFormat;\n    gc.totalCount = defaultTotalCount;\n\n    if (main) {\n      gc.main = true;\n      gc.format = Grouping.Format.simple;\n    }\n\n    if (gc.format == Grouping.Format.simple) {\n      gc.groupOffset = 0;  // doesn't make sense\n    }\n    commands.add(gc);\n  }\n\n","sourceOld":"  /**\n   * Adds a field command based on the specified field.\n   * If the field is not compatible with {@link CommandField} it invokes the\n   * {@link #addFunctionCommand(String, org.apache.solr.request.SolrQueryRequest)} method.\n   *\n   * @param field The fieldname to group by.\n   */\n  public void addFieldCommand(String field, SolrQueryRequest request) throws ParseException {\n    SchemaField schemaField = searcher.getSchema().getField(field); // Throws an exception when field doesn't exist. Bad request.\n    FieldType fieldType = schemaField.getType();\n    ValueSource valueSource = fieldType.getValueSource(schemaField, null);\n    if (!(valueSource instanceof StrFieldSource)) {\n      addFunctionCommand(field, request);\n      return;\n    }\n\n    Grouping.CommandField gc = new CommandField();\n    gc.groupSort = groupSort;\n    gc.groupBy = field;\n    gc.key = field;\n    gc.numGroups = limitDefault;\n    gc.docsPerGroup = docsPerGroupDefault;\n    gc.groupOffset = groupOffsetDefault;\n    gc.offset = cmd.getOffset();\n    gc.sort = sort;\n    gc.format = defaultFormat;\n    gc.totalCount = defaultTotalCount;\n\n    if (main) {\n      gc.main = true;\n      gc.format = Grouping.Format.simple;\n    }\n\n    if (gc.format == Grouping.Format.simple) {\n      gc.groupOffset = 0;  // doesn't make sense\n    }\n    commands.add(gc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#addFieldCommand(String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping#addFieldCommand(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Adds a field command based on the specified field.\n   * If the field is not compatible with {@link CommandField} it invokes the\n   * {@link #addFunctionCommand(String, org.apache.solr.request.SolrQueryRequest)} method.\n   *\n   * @param field The fieldname to group by.\n   */\n  public void addFieldCommand(String field, SolrQueryRequest request) throws ParseException {\n    SchemaField schemaField = searcher.getSchema().getField(field); // Throws an exception when field doesn't exist. Bad request.\n    FieldType fieldType = schemaField.getType();\n    ValueSource valueSource = fieldType.getValueSource(schemaField, null);\n    if (!(valueSource instanceof StrFieldSource)) {\n      addFunctionCommand(field, request);\n      return;\n    }\n\n    Grouping.CommandField gc = new CommandField();\n    gc.groupSort = groupSort;\n    gc.groupBy = field;\n    gc.key = field;\n    gc.numGroups = limitDefault;\n    gc.docsPerGroup = docsPerGroupDefault;\n    gc.groupOffset = groupOffsetDefault;\n    gc.offset = cmd.getOffset();\n    gc.sort = sort;\n    gc.format = defaultFormat;\n    gc.totalCount = defaultTotalCount;\n\n    if (main) {\n      gc.main = true;\n      gc.format = Grouping.Format.simple;\n    }\n\n    if (gc.format == Grouping.Format.simple) {\n      gc.groupOffset = 0;  // doesn't make sense\n    }\n    commands.add(gc);\n  }\n\n","sourceOld":"  /**\n   * Adds a field command based on the specified field.\n   * If the field is not compatible with {@link CommandField} it invokes the\n   * {@link #addFunctionCommand(String, org.apache.solr.request.SolrQueryRequest)} method.\n   *\n   * @param field The fieldname to group by.\n   */\n  public void addFieldCommand(String field, SolrQueryRequest request) throws ParseException {\n    SchemaField schemaField = searcher.getSchema().getField(field); // Throws an exception when field doesn't exist. Bad request.\n    FieldType fieldType = schemaField.getType();\n    ValueSource valueSource = fieldType.getValueSource(schemaField, null);\n    if (!(valueSource instanceof StrFieldSource)) {\n      addFunctionCommand(field, request);\n      return;\n    }\n\n    Grouping.CommandField gc = new CommandField();\n    gc.groupSort = groupSort;\n    gc.groupBy = field;\n    gc.key = field;\n    gc.numGroups = limitDefault;\n    gc.docsPerGroup = docsPerGroupDefault;\n    gc.groupOffset = groupOffsetDefault;\n    gc.offset = cmd.getOffset();\n    gc.sort = sort;\n    gc.format = defaultFormat;\n    gc.totalCount = defaultTotalCount;\n\n    if (main) {\n      gc.main = true;\n      gc.format = Grouping.Format.simple;\n    }\n\n    if (gc.format == Grouping.Format.simple) {\n      gc.groupOffset = 0;  // doesn't make sense\n    }\n    commands.add(gc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#addFieldCommand(String,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping#addFieldCommand(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Adds a field command based on the specified field.\n   * If the field is not compatible with {@link CommandField} it invokes the\n   * {@link #addFunctionCommand(String, org.apache.solr.request.SolrQueryRequest)} method.\n   *\n   * @param field The fieldname to group by.\n   */\n  public void addFieldCommand(String field, SolrQueryRequest request) throws ParseException {\n    SchemaField schemaField = searcher.getSchema().getField(field); // Throws an exception when field doesn't exist. Bad request.\n    FieldType fieldType = schemaField.getType();\n    ValueSource valueSource = fieldType.getValueSource(schemaField, null);\n    if (!(valueSource instanceof StrFieldSource)) {\n      addFunctionCommand(field, request);\n      return;\n    }\n\n    Grouping.CommandField gc = new CommandField();\n    gc.groupSort = groupSort;\n    gc.groupBy = field;\n    gc.key = field;\n    gc.numGroups = limitDefault;\n    gc.docsPerGroup = docsPerGroupDefault;\n    gc.groupOffset = groupOffsetDefault;\n    gc.offset = cmd.getOffset();\n    gc.sort = sort;\n    gc.format = defaultFormat;\n    gc.totalCount = defaultTotalCount;\n\n    if (main) {\n      gc.main = true;\n      gc.format = Grouping.Format.simple;\n    }\n\n    if (gc.format == Grouping.Format.simple) {\n      gc.groupOffset = 0;  // doesn't make sense\n    }\n    commands.add(gc);\n  }\n\n","sourceOld":"  /**\n   * Adds a field command based on the specified field.\n   * If the field is not compatible with {@link CommandField} it invokes the\n   * {@link #addFunctionCommand(String, org.apache.solr.request.SolrQueryRequest)} method.\n   *\n   * @param field The fieldname to group by.\n   */\n  public void addFieldCommand(String field, SolrQueryRequest request) throws ParseException {\n    SchemaField schemaField = searcher.getSchema().getField(field); // Throws an exception when field doesn't exist. Bad request.\n    FieldType fieldType = schemaField.getType();\n    ValueSource valueSource = fieldType.getValueSource(schemaField, null);\n    if (!(valueSource instanceof StrFieldSource)) {\n      addFunctionCommand(field, request);\n      return;\n    }\n\n    Grouping.CommandField gc = new CommandField();\n    gc.groupSort = groupSort;\n    gc.groupBy = field;\n    gc.key = field;\n    gc.numGroups = limitDefault;\n    gc.docsPerGroup = docsPerGroupDefault;\n    gc.groupOffset = groupOffsetDefault;\n    gc.offset = cmd.getOffset();\n    gc.sort = sort;\n    gc.format = defaultFormat;\n    gc.totalCount = defaultTotalCount;\n\n    if (main) {\n      gc.main = true;\n      gc.format = Grouping.Format.simple;\n    }\n\n    if (gc.format == Grouping.Format.simple) {\n      gc.groupOffset = 0;  // doesn't make sense\n    }\n    commands.add(gc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#addFieldCommand(String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping#addFieldCommand(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Adds a field command based on the specified field.\n   * If the field is not compatible with {@link CommandField} it invokes the\n   * {@link #addFunctionCommand(String, org.apache.solr.request.SolrQueryRequest)} method.\n   *\n   * @param field The fieldname to group by.\n   */\n  public void addFieldCommand(String field, SolrQueryRequest request) throws SyntaxError {\n    SchemaField schemaField = searcher.getSchema().getField(field); // Throws an exception when field doesn't exist. Bad request.\n    FieldType fieldType = schemaField.getType();\n    ValueSource valueSource = fieldType.getValueSource(schemaField, null);\n    if (!(valueSource instanceof StrFieldSource)) {\n      addFunctionCommand(field, request);\n      return;\n    }\n\n    Grouping.CommandField gc = new CommandField();\n    gc.groupSort = groupSort;\n    gc.groupBy = field;\n    gc.key = field;\n    gc.numGroups = limitDefault;\n    gc.docsPerGroup = docsPerGroupDefault;\n    gc.groupOffset = groupOffsetDefault;\n    gc.offset = cmd.getOffset();\n    gc.sort = sort;\n    gc.format = defaultFormat;\n    gc.totalCount = defaultTotalCount;\n\n    if (main) {\n      gc.main = true;\n      gc.format = Grouping.Format.simple;\n    }\n\n    if (gc.format == Grouping.Format.simple) {\n      gc.groupOffset = 0;  // doesn't make sense\n    }\n    commands.add(gc);\n  }\n\n","sourceOld":"  /**\n   * Adds a field command based on the specified field.\n   * If the field is not compatible with {@link CommandField} it invokes the\n   * {@link #addFunctionCommand(String, org.apache.solr.request.SolrQueryRequest)} method.\n   *\n   * @param field The fieldname to group by.\n   */\n  public void addFieldCommand(String field, SolrQueryRequest request) throws ParseException {\n    SchemaField schemaField = searcher.getSchema().getField(field); // Throws an exception when field doesn't exist. Bad request.\n    FieldType fieldType = schemaField.getType();\n    ValueSource valueSource = fieldType.getValueSource(schemaField, null);\n    if (!(valueSource instanceof StrFieldSource)) {\n      addFunctionCommand(field, request);\n      return;\n    }\n\n    Grouping.CommandField gc = new CommandField();\n    gc.groupSort = groupSort;\n    gc.groupBy = field;\n    gc.key = field;\n    gc.numGroups = limitDefault;\n    gc.docsPerGroup = docsPerGroupDefault;\n    gc.groupOffset = groupOffsetDefault;\n    gc.offset = cmd.getOffset();\n    gc.sort = sort;\n    gc.format = defaultFormat;\n    gc.totalCount = defaultTotalCount;\n\n    if (main) {\n      gc.main = true;\n      gc.format = Grouping.Format.simple;\n    }\n\n    if (gc.format == Grouping.Format.simple) {\n      gc.groupOffset = 0;  // doesn't make sense\n    }\n    commands.add(gc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#addFieldCommand(String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping#addFieldCommand(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Adds a field command based on the specified field.\n   * If the field is not compatible with {@link CommandField} it invokes the\n   * {@link #addFunctionCommand(String, org.apache.solr.request.SolrQueryRequest)} method.\n   *\n   * @param field The fieldname to group by.\n   */\n  public void addFieldCommand(String field, SolrQueryRequest request) throws SyntaxError {\n    SchemaField schemaField = searcher.getSchema().getField(field); // Throws an exception when field doesn't exist. Bad request.\n    FieldType fieldType = schemaField.getType();\n    ValueSource valueSource = fieldType.getValueSource(schemaField, null);\n    if (!(valueSource instanceof StrFieldSource)) {\n      addFunctionCommand(field, request);\n      return;\n    }\n\n    Grouping.CommandField gc = new CommandField();\n    gc.groupSort = groupSort;\n    gc.groupBy = field;\n    gc.key = field;\n    gc.numGroups = limitDefault;\n    gc.docsPerGroup = docsPerGroupDefault;\n    gc.groupOffset = groupOffsetDefault;\n    gc.offset = cmd.getOffset();\n    gc.sort = sort;\n    gc.format = defaultFormat;\n    gc.totalCount = defaultTotalCount;\n\n    if (main) {\n      gc.main = true;\n      gc.format = Grouping.Format.simple;\n    }\n\n    if (gc.format == Grouping.Format.simple) {\n      gc.groupOffset = 0;  // doesn't make sense\n    }\n    commands.add(gc);\n  }\n\n","sourceOld":"  /**\n   * Adds a field command based on the specified field.\n   * If the field is not compatible with {@link CommandField} it invokes the\n   * {@link #addFunctionCommand(String, org.apache.solr.request.SolrQueryRequest)} method.\n   *\n   * @param field The fieldname to group by.\n   */\n  public void addFieldCommand(String field, SolrQueryRequest request) throws ParseException {\n    SchemaField schemaField = searcher.getSchema().getField(field); // Throws an exception when field doesn't exist. Bad request.\n    FieldType fieldType = schemaField.getType();\n    ValueSource valueSource = fieldType.getValueSource(schemaField, null);\n    if (!(valueSource instanceof StrFieldSource)) {\n      addFunctionCommand(field, request);\n      return;\n    }\n\n    Grouping.CommandField gc = new CommandField();\n    gc.groupSort = groupSort;\n    gc.groupBy = field;\n    gc.key = field;\n    gc.numGroups = limitDefault;\n    gc.docsPerGroup = docsPerGroupDefault;\n    gc.groupOffset = groupOffsetDefault;\n    gc.offset = cmd.getOffset();\n    gc.sort = sort;\n    gc.format = defaultFormat;\n    gc.totalCount = defaultTotalCount;\n\n    if (main) {\n      gc.main = true;\n      gc.format = Grouping.Format.simple;\n    }\n\n    if (gc.format == Grouping.Format.simple) {\n      gc.groupOffset = 0;  // doesn't make sense\n    }\n    commands.add(gc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#addFieldCommand(String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping#addFieldCommand(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Adds a field command based on the specified field.\n   * If the field is not compatible with {@link CommandField} it invokes the\n   * {@link #addFunctionCommand(String, org.apache.solr.request.SolrQueryRequest)} method.\n   *\n   * @param field The fieldname to group by.\n   */\n  public void addFieldCommand(String field, SolrQueryRequest request) throws SyntaxError {\n    SchemaField schemaField = searcher.getSchema().getField(field); // Throws an exception when field doesn't exist. Bad request.\n    FieldType fieldType = schemaField.getType();\n    ValueSource valueSource = fieldType.getValueSource(schemaField, null);\n    if (!(valueSource instanceof StrFieldSource)) {\n      addFunctionCommand(field, request);\n      return;\n    }\n\n    Grouping.CommandField gc = new CommandField();\n    gc.groupSort = groupSort;\n    gc.groupBy = field;\n    gc.key = field;\n    gc.numGroups = limitDefault;\n    gc.docsPerGroup = docsPerGroupDefault;\n    gc.groupOffset = groupOffsetDefault;\n    gc.offset = cmd.getOffset();\n    gc.sort = sort;\n    gc.format = defaultFormat;\n    gc.totalCount = defaultTotalCount;\n\n    if (main) {\n      gc.main = true;\n      gc.format = Grouping.Format.simple;\n    }\n\n    if (gc.format == Grouping.Format.simple) {\n      gc.groupOffset = 0;  // doesn't make sense\n    }\n    commands.add(gc);\n  }\n\n","sourceOld":"  /**\n   * Adds a field command based on the specified field.\n   * If the field is not compatible with {@link CommandField} it invokes the\n   * {@link #addFunctionCommand(String, org.apache.solr.request.SolrQueryRequest)} method.\n   *\n   * @param field The fieldname to group by.\n   */\n  public void addFieldCommand(String field, SolrQueryRequest request) throws SyntaxError {\n    SchemaField schemaField = searcher.getSchema().getField(field); // Throws an exception when field doesn't exist. Bad request.\n    FieldType fieldType = schemaField.getType();\n    ValueSource valueSource = fieldType.getValueSource(schemaField, null);\n    if (!(valueSource instanceof StrFieldSource)) {\n      addFunctionCommand(field, request);\n      return;\n    }\n\n    Grouping.CommandField gc = new CommandField();\n    gc.groupSort = groupSort;\n    gc.groupBy = field;\n    gc.key = field;\n    gc.numGroups = limitDefault;\n    gc.docsPerGroup = docsPerGroupDefault;\n    gc.groupOffset = groupOffsetDefault;\n    gc.offset = cmd.getOffset();\n    gc.sort = sort;\n    gc.format = defaultFormat;\n    gc.totalCount = defaultTotalCount;\n\n    if (main) {\n      gc.main = true;\n      gc.format = Grouping.Format.simple;\n    }\n\n    if (gc.format == Grouping.Format.simple) {\n      gc.groupOffset = 0;  // doesn't make sense\n    }\n    commands.add(gc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#addFieldCommand(String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping#addFieldCommand(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Adds a field command based on the specified field.\n   * If the field is not compatible with {@link CommandField} it invokes the\n   * {@link #addFunctionCommand(String, org.apache.solr.request.SolrQueryRequest)} method.\n   *\n   * @param field The fieldname to group by.\n   */\n  public void addFieldCommand(String field, SolrQueryRequest request) throws SyntaxError {\n    SchemaField schemaField = searcher.getSchema().getField(field); // Throws an exception when field doesn't exist. Bad request.\n    FieldType fieldType = schemaField.getType();\n    ValueSource valueSource = fieldType.getValueSource(schemaField, null);\n    if (!(valueSource instanceof StrFieldSource)) {\n      addFunctionCommand(field, request);\n      return;\n    }\n\n    Grouping.CommandField gc = new CommandField();\n    gc.groupSort = groupSort;\n    gc.groupBy = field;\n    gc.key = field;\n    gc.numGroups = limitDefault;\n    gc.docsPerGroup = docsPerGroupDefault;\n    gc.groupOffset = groupOffsetDefault;\n    gc.offset = cmd.getOffset();\n    gc.sort = sort;\n    gc.format = defaultFormat;\n    gc.totalCount = defaultTotalCount;\n\n    if (main) {\n      gc.main = true;\n      gc.format = Grouping.Format.simple;\n    }\n\n    if (gc.format == Grouping.Format.simple) {\n      gc.groupOffset = 0;  // doesn't make sense\n    }\n    commands.add(gc);\n  }\n\n","sourceOld":"  /**\n   * Adds a field command based on the specified field.\n   * If the field is not compatible with {@link CommandField} it invokes the\n   * {@link #addFunctionCommand(String, org.apache.solr.request.SolrQueryRequest)} method.\n   *\n   * @param field The fieldname to group by.\n   */\n  public void addFieldCommand(String field, SolrQueryRequest request) throws SyntaxError {\n    SchemaField schemaField = searcher.getSchema().getField(field); // Throws an exception when field doesn't exist. Bad request.\n    FieldType fieldType = schemaField.getType();\n    ValueSource valueSource = fieldType.getValueSource(schemaField, null);\n    if (!(valueSource instanceof StrFieldSource)) {\n      addFunctionCommand(field, request);\n      return;\n    }\n\n    Grouping.CommandField gc = new CommandField();\n    gc.groupSort = groupSort;\n    gc.groupBy = field;\n    gc.key = field;\n    gc.numGroups = limitDefault;\n    gc.docsPerGroup = docsPerGroupDefault;\n    gc.groupOffset = groupOffsetDefault;\n    gc.offset = cmd.getOffset();\n    gc.sort = sort;\n    gc.format = defaultFormat;\n    gc.totalCount = defaultTotalCount;\n\n    if (main) {\n      gc.main = true;\n      gc.format = Grouping.Format.simple;\n    }\n\n    if (gc.format == Grouping.Format.simple) {\n      gc.groupOffset = 0;  // doesn't make sense\n    }\n    commands.add(gc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de65fb6e86ba37c5409efafefe587d0c897c2764","date":1445143934,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#addFieldCommand(String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping#addFieldCommand(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Adds a field command based on the specified field.\n   * If the field is not compatible with {@link CommandField} it invokes the\n   * {@link #addFunctionCommand(String, org.apache.solr.request.SolrQueryRequest)} method.\n   *\n   * @param field The fieldname to group by.\n   */\n  public void addFieldCommand(String field, SolrQueryRequest request) throws SyntaxError {\n    SchemaField schemaField = searcher.getSchema().getField(field); // Throws an exception when field doesn't exist. Bad request.\n    FieldType fieldType = schemaField.getType();\n    ValueSource valueSource = fieldType.getValueSource(schemaField, null);\n    if (!(valueSource instanceof StrFieldSource)) {\n      addFunctionCommand(field, request);\n      return;\n    }\n\n    Grouping.CommandField gc = new CommandField();\n    gc.withinGroupSort = withinGroupSort;\n    gc.groupBy = field;\n    gc.key = field;\n    gc.numGroups = limitDefault;\n    gc.docsPerGroup = docsPerGroupDefault;\n    gc.groupOffset = groupOffsetDefault;\n    gc.offset = cmd.getOffset();\n    gc.sort = sort;\n    gc.format = defaultFormat;\n    gc.totalCount = defaultTotalCount;\n\n    if (main) {\n      gc.main = true;\n      gc.format = Grouping.Format.simple;\n    }\n\n    if (gc.format == Grouping.Format.simple) {\n      gc.groupOffset = 0;  // doesn't make sense\n    }\n    commands.add(gc);\n  }\n\n","sourceOld":"  /**\n   * Adds a field command based on the specified field.\n   * If the field is not compatible with {@link CommandField} it invokes the\n   * {@link #addFunctionCommand(String, org.apache.solr.request.SolrQueryRequest)} method.\n   *\n   * @param field The fieldname to group by.\n   */\n  public void addFieldCommand(String field, SolrQueryRequest request) throws SyntaxError {\n    SchemaField schemaField = searcher.getSchema().getField(field); // Throws an exception when field doesn't exist. Bad request.\n    FieldType fieldType = schemaField.getType();\n    ValueSource valueSource = fieldType.getValueSource(schemaField, null);\n    if (!(valueSource instanceof StrFieldSource)) {\n      addFunctionCommand(field, request);\n      return;\n    }\n\n    Grouping.CommandField gc = new CommandField();\n    gc.groupSort = groupSort;\n    gc.groupBy = field;\n    gc.key = field;\n    gc.numGroups = limitDefault;\n    gc.docsPerGroup = docsPerGroupDefault;\n    gc.groupOffset = groupOffsetDefault;\n    gc.offset = cmd.getOffset();\n    gc.sort = sort;\n    gc.format = defaultFormat;\n    gc.totalCount = defaultTotalCount;\n\n    if (main) {\n      gc.main = true;\n      gc.format = Grouping.Format.simple;\n    }\n\n    if (gc.format == Grouping.Format.simple) {\n      gc.groupOffset = 0;  // doesn't make sense\n    }\n    commands.add(gc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09cb2e0d073412dbf283b88292b70aaf62d55276","date":1445181245,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#addFieldCommand(String,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping#addFieldCommand(String,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Adds a field command based on the specified field.\n   * If the field is not compatible with {@link CommandField} it invokes the\n   * {@link #addFunctionCommand(String, org.apache.solr.request.SolrQueryRequest)} method.\n   *\n   * @param field The fieldname to group by.\n   */\n  public void addFieldCommand(String field, SolrQueryRequest request) throws SyntaxError {\n    SchemaField schemaField = searcher.getSchema().getField(field); // Throws an exception when field doesn't exist. Bad request.\n    FieldType fieldType = schemaField.getType();\n    ValueSource valueSource = fieldType.getValueSource(schemaField, null);\n    if (!(valueSource instanceof StrFieldSource)) {\n      addFunctionCommand(field, request);\n      return;\n    }\n\n    Grouping.CommandField gc = new CommandField();\n    gc.withinGroupSort = withinGroupSort;\n    gc.groupBy = field;\n    gc.key = field;\n    gc.numGroups = limitDefault;\n    gc.docsPerGroup = docsPerGroupDefault;\n    gc.groupOffset = groupOffsetDefault;\n    gc.offset = cmd.getOffset();\n    gc.groupSort = groupSort;\n    gc.format = defaultFormat;\n    gc.totalCount = defaultTotalCount;\n\n    if (main) {\n      gc.main = true;\n      gc.format = Grouping.Format.simple;\n    }\n\n    if (gc.format == Grouping.Format.simple) {\n      gc.groupOffset = 0;  // doesn't make sense\n    }\n    commands.add(gc);\n  }\n\n","sourceOld":"  /**\n   * Adds a field command based on the specified field.\n   * If the field is not compatible with {@link CommandField} it invokes the\n   * {@link #addFunctionCommand(String, org.apache.solr.request.SolrQueryRequest)} method.\n   *\n   * @param field The fieldname to group by.\n   */\n  public void addFieldCommand(String field, SolrQueryRequest request) throws SyntaxError {\n    SchemaField schemaField = searcher.getSchema().getField(field); // Throws an exception when field doesn't exist. Bad request.\n    FieldType fieldType = schemaField.getType();\n    ValueSource valueSource = fieldType.getValueSource(schemaField, null);\n    if (!(valueSource instanceof StrFieldSource)) {\n      addFunctionCommand(field, request);\n      return;\n    }\n\n    Grouping.CommandField gc = new CommandField();\n    gc.withinGroupSort = withinGroupSort;\n    gc.groupBy = field;\n    gc.key = field;\n    gc.numGroups = limitDefault;\n    gc.docsPerGroup = docsPerGroupDefault;\n    gc.groupOffset = groupOffsetDefault;\n    gc.offset = cmd.getOffset();\n    gc.sort = sort;\n    gc.format = defaultFormat;\n    gc.totalCount = defaultTotalCount;\n\n    if (main) {\n      gc.main = true;\n      gc.format = Grouping.Format.simple;\n    }\n\n    if (gc.format == Grouping.Format.simple) {\n      gc.groupOffset = 0;  // doesn't make sense\n    }\n    commands.add(gc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"de65fb6e86ba37c5409efafefe587d0c897c2764":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["3cdb67100dc016748799a77218aa409478372d79","19275ba31e621f6da1b83bf13af75233876fd3d4"],"09cb2e0d073412dbf283b88292b70aaf62d55276":["de65fb6e86ba37c5409efafefe587d0c897c2764"],"3cdb67100dc016748799a77218aa409478372d79":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","3cdb67100dc016748799a77218aa409478372d79"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3cdb67100dc016748799a77218aa409478372d79"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09cb2e0d073412dbf283b88292b70aaf62d55276"]},"commit2Childs":{"de65fb6e86ba37c5409efafefe587d0c897c2764":["09cb2e0d073412dbf283b88292b70aaf62d55276"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"3cdb67100dc016748799a77218aa409478372d79":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","19275ba31e621f6da1b83bf13af75233876fd3d4"],"09cb2e0d073412dbf283b88292b70aaf62d55276":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["de65fb6e86ba37c5409efafefe587d0c897c2764","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}