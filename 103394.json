{"path":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#addSharedExternalDependencies().mjava","commits":[{"id":"71b83dcf02fe2854488bc83d70dee29c5baa7e5c","date":1383232808,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#addSharedExternalDependencies().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * For each module that include other modules' external dependencies via\n   * including all files under their \".../lib/\" dirs in their (test.)classpath,\n   * add the other modules' dependencies to its set of external dependencies. \n   */\n  private void addSharedExternalDependencies() {\n    // Delay adding shared compile-scope dependencies until after all have been processed,\n    // so dependency sharing is limited to a depth of one.\n    Map<String,SortedSet<ExternalDependency>> sharedDependencies = new HashMap<String,SortedSet<ExternalDependency>>();\n    for (String artifactId : interModuleExternalCompileScopeDependencies.keySet()) {\n      TreeSet<ExternalDependency> deps = new TreeSet<>();\n      sharedDependencies.put(artifactId, deps);\n      Set<String> moduleDependencies = interModuleExternalCompileScopeDependencies.get(artifactId);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId); \n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if ( ! otherDep.isTestDependency) {\n                deps.add(otherDep);\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String artifactId : interModuleExternalTestScopeDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = sharedDependencies.get(artifactId);\n      if (null == deps) {\n        deps = new TreeSet<ExternalDependency>();\n        sharedDependencies.put(artifactId, deps);\n      }\n      Set<String> moduleDependencies = interModuleExternalTestScopeDependencies.get(artifactId);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId);\n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if ( ! otherDep.isTestDependency) {\n                if (  ! deps.contains(otherDep)\n                   && (  null == allExternalDependencies.get(artifactId)\n                      || ! allExternalDependencies.get(artifactId).contains(otherDep))) { \n                  // Add test-scope clone only if it's not already a compile-scope dependency. \n                  ExternalDependency otherDepTestScope = new ExternalDependency\n                      (otherDep.groupId, otherDep.artifactId, otherDep.classifier, true, otherDep.isOptional);\n                  deps.add(otherDepTestScope);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String artifactId : sharedDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = allExternalDependencies.get(artifactId);\n      if (null == deps) {\n        deps = new TreeSet<ExternalDependency>();\n        allExternalDependencies.put(artifactId, deps);\n      }\n      deps.addAll(sharedDependencies.get(artifactId));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1895a927902788cc1b62e5cfd03b0848303689ad"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"582a32eeb049d563d59e2958fe2d130e473101ff","date":1385502371,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#addSharedExternalDependencies().mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#addSharedExternalDependencies().mjava","sourceNew":"  /**\n   * For each module that include other modules' external dependencies via\n   * including all files under their \".../lib/\" dirs in their (test.)classpath,\n   * add the other modules' dependencies to its set of external dependencies. \n   */\n  private void addSharedExternalDependencies() {\n    // Delay adding shared compile-scope dependencies until after all have been processed,\n    // so dependency sharing is limited to a depth of one.\n    Map<String,SortedSet<ExternalDependency>> sharedDependencies = new HashMap<String,SortedSet<ExternalDependency>>();\n    for (String artifactId : interModuleExternalCompileScopeDependencies.keySet()) {\n      TreeSet<ExternalDependency> deps = new TreeSet<>();\n      sharedDependencies.put(artifactId, deps);\n      Set<String> moduleDependencies = interModuleExternalCompileScopeDependencies.get(artifactId);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId); \n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if ( ! otherDep.isTestDependency) {\n                deps.add(otherDep);\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String artifactId : interModuleExternalTestScopeDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = sharedDependencies.get(artifactId);\n      if (null == deps) {\n        deps = new TreeSet<ExternalDependency>();\n        sharedDependencies.put(artifactId, deps);\n      }\n      Set<String> moduleDependencies = interModuleExternalTestScopeDependencies.get(artifactId);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          int testScopePos = otherArtifactId.indexOf(\":test\");\n          boolean isTestScope = false;\n          if (-1 != testScopePos) {\n            otherArtifactId = otherArtifactId.substring(0, testScopePos);\n            isTestScope = true;\n          }\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId);\n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if (otherDep.isTestDependency == isTestScope) {\n                if (  ! deps.contains(otherDep)\n                   && (  null == allExternalDependencies.get(artifactId)\n                      || ! allExternalDependencies.get(artifactId).contains(otherDep))) { \n                  // Add test-scope clone only if it's not already a compile-scope dependency. \n                  ExternalDependency otherDepTestScope = new ExternalDependency\n                      (otherDep.groupId, otherDep.artifactId, otherDep.classifier, true, otherDep.isOptional);\n                  deps.add(otherDepTestScope);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String artifactId : sharedDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = allExternalDependencies.get(artifactId);\n      if (null == deps) {\n        deps = new TreeSet<ExternalDependency>();\n        allExternalDependencies.put(artifactId, deps);\n      }\n      deps.addAll(sharedDependencies.get(artifactId));\n    }\n  }\n\n","sourceOld":"  /**\n   * For each module that include other modules' external dependencies via\n   * including all files under their \".../lib/\" dirs in their (test.)classpath,\n   * add the other modules' dependencies to its set of external dependencies. \n   */\n  private void addSharedExternalDependencies() {\n    // Delay adding shared compile-scope dependencies until after all have been processed,\n    // so dependency sharing is limited to a depth of one.\n    Map<String,SortedSet<ExternalDependency>> sharedDependencies = new HashMap<String,SortedSet<ExternalDependency>>();\n    for (String artifactId : interModuleExternalCompileScopeDependencies.keySet()) {\n      TreeSet<ExternalDependency> deps = new TreeSet<>();\n      sharedDependencies.put(artifactId, deps);\n      Set<String> moduleDependencies = interModuleExternalCompileScopeDependencies.get(artifactId);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId); \n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if ( ! otherDep.isTestDependency) {\n                deps.add(otherDep);\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String artifactId : interModuleExternalTestScopeDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = sharedDependencies.get(artifactId);\n      if (null == deps) {\n        deps = new TreeSet<ExternalDependency>();\n        sharedDependencies.put(artifactId, deps);\n      }\n      Set<String> moduleDependencies = interModuleExternalTestScopeDependencies.get(artifactId);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId);\n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if ( ! otherDep.isTestDependency) {\n                if (  ! deps.contains(otherDep)\n                   && (  null == allExternalDependencies.get(artifactId)\n                      || ! allExternalDependencies.get(artifactId).contains(otherDep))) { \n                  // Add test-scope clone only if it's not already a compile-scope dependency. \n                  ExternalDependency otherDepTestScope = new ExternalDependency\n                      (otherDep.groupId, otherDep.artifactId, otherDep.classifier, true, otherDep.isOptional);\n                  deps.add(otherDepTestScope);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String artifactId : sharedDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = allExternalDependencies.get(artifactId);\n      if (null == deps) {\n        deps = new TreeSet<ExternalDependency>();\n        allExternalDependencies.put(artifactId, deps);\n      }\n      deps.addAll(sharedDependencies.get(artifactId));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#addSharedExternalDependencies().mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#addSharedExternalDependencies().mjava","sourceNew":"  /**\n   * For each module that include other modules' external dependencies via\n   * including all files under their \".../lib/\" dirs in their (test.)classpath,\n   * add the other modules' dependencies to its set of external dependencies. \n   */\n  private void addSharedExternalDependencies() {\n    // Delay adding shared compile-scope dependencies until after all have been processed,\n    // so dependency sharing is limited to a depth of one.\n    Map<String,SortedSet<ExternalDependency>> sharedDependencies = new HashMap<String,SortedSet<ExternalDependency>>();\n    for (String artifactId : interModuleExternalCompileScopeDependencies.keySet()) {\n      TreeSet<ExternalDependency> deps = new TreeSet<>();\n      sharedDependencies.put(artifactId, deps);\n      Set<String> moduleDependencies = interModuleExternalCompileScopeDependencies.get(artifactId);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId); \n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if ( ! otherDep.isTestDependency) {\n                deps.add(otherDep);\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String artifactId : interModuleExternalTestScopeDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = sharedDependencies.get(artifactId);\n      if (null == deps) {\n        deps = new TreeSet<ExternalDependency>();\n        sharedDependencies.put(artifactId, deps);\n      }\n      Set<String> moduleDependencies = interModuleExternalTestScopeDependencies.get(artifactId);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          int testScopePos = otherArtifactId.indexOf(\":test\");\n          boolean isTestScope = false;\n          if (-1 != testScopePos) {\n            otherArtifactId = otherArtifactId.substring(0, testScopePos);\n            isTestScope = true;\n          }\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId);\n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if (otherDep.isTestDependency == isTestScope) {\n                if (  ! deps.contains(otherDep)\n                   && (  null == allExternalDependencies.get(artifactId)\n                      || ! allExternalDependencies.get(artifactId).contains(otherDep))) { \n                  // Add test-scope clone only if it's not already a compile-scope dependency. \n                  ExternalDependency otherDepTestScope = new ExternalDependency\n                      (otherDep.groupId, otherDep.artifactId, otherDep.classifier, true, otherDep.isOptional);\n                  deps.add(otherDepTestScope);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String artifactId : sharedDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = allExternalDependencies.get(artifactId);\n      if (null == deps) {\n        deps = new TreeSet<ExternalDependency>();\n        allExternalDependencies.put(artifactId, deps);\n      }\n      deps.addAll(sharedDependencies.get(artifactId));\n    }\n  }\n\n","sourceOld":"  /**\n   * For each module that include other modules' external dependencies via\n   * including all files under their \".../lib/\" dirs in their (test.)classpath,\n   * add the other modules' dependencies to its set of external dependencies. \n   */\n  private void addSharedExternalDependencies() {\n    // Delay adding shared compile-scope dependencies until after all have been processed,\n    // so dependency sharing is limited to a depth of one.\n    Map<String,SortedSet<ExternalDependency>> sharedDependencies = new HashMap<String,SortedSet<ExternalDependency>>();\n    for (String artifactId : interModuleExternalCompileScopeDependencies.keySet()) {\n      TreeSet<ExternalDependency> deps = new TreeSet<>();\n      sharedDependencies.put(artifactId, deps);\n      Set<String> moduleDependencies = interModuleExternalCompileScopeDependencies.get(artifactId);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId); \n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if ( ! otherDep.isTestDependency) {\n                deps.add(otherDep);\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String artifactId : interModuleExternalTestScopeDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = sharedDependencies.get(artifactId);\n      if (null == deps) {\n        deps = new TreeSet<ExternalDependency>();\n        sharedDependencies.put(artifactId, deps);\n      }\n      Set<String> moduleDependencies = interModuleExternalTestScopeDependencies.get(artifactId);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId);\n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if ( ! otherDep.isTestDependency) {\n                if (  ! deps.contains(otherDep)\n                   && (  null == allExternalDependencies.get(artifactId)\n                      || ! allExternalDependencies.get(artifactId).contains(otherDep))) { \n                  // Add test-scope clone only if it's not already a compile-scope dependency. \n                  ExternalDependency otherDepTestScope = new ExternalDependency\n                      (otherDep.groupId, otherDep.artifactId, otherDep.classifier, true, otherDep.isOptional);\n                  deps.add(otherDepTestScope);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String artifactId : sharedDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = allExternalDependencies.get(artifactId);\n      if (null == deps) {\n        deps = new TreeSet<ExternalDependency>();\n        allExternalDependencies.put(artifactId, deps);\n      }\n      deps.addAll(sharedDependencies.get(artifactId));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#addSharedExternalDependencies().mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#addSharedExternalDependencies().mjava","sourceNew":"  /**\n   * For each module that include other modules' external dependencies via\n   * including all files under their \".../lib/\" dirs in their (test.)classpath,\n   * add the other modules' dependencies to its set of external dependencies. \n   */\n  private void addSharedExternalDependencies() {\n    // Delay adding shared compile-scope dependencies until after all have been processed,\n    // so dependency sharing is limited to a depth of one.\n    Map<String,SortedSet<ExternalDependency>> sharedDependencies = new HashMap<>();\n    for (String artifactId : interModuleExternalCompileScopeDependencies.keySet()) {\n      TreeSet<ExternalDependency> deps = new TreeSet<>();\n      sharedDependencies.put(artifactId, deps);\n      Set<String> moduleDependencies = interModuleExternalCompileScopeDependencies.get(artifactId);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId); \n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if ( ! otherDep.isTestDependency) {\n                deps.add(otherDep);\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String artifactId : interModuleExternalTestScopeDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = sharedDependencies.get(artifactId);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        sharedDependencies.put(artifactId, deps);\n      }\n      Set<String> moduleDependencies = interModuleExternalTestScopeDependencies.get(artifactId);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          int testScopePos = otherArtifactId.indexOf(\":test\");\n          boolean isTestScope = false;\n          if (-1 != testScopePos) {\n            otherArtifactId = otherArtifactId.substring(0, testScopePos);\n            isTestScope = true;\n          }\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId);\n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if (otherDep.isTestDependency == isTestScope) {\n                if (  ! deps.contains(otherDep)\n                   && (  null == allExternalDependencies.get(artifactId)\n                      || ! allExternalDependencies.get(artifactId).contains(otherDep))) { \n                  // Add test-scope clone only if it's not already a compile-scope dependency. \n                  ExternalDependency otherDepTestScope = new ExternalDependency\n                      (otherDep.groupId, otherDep.artifactId, otherDep.classifier, true, otherDep.isOptional);\n                  deps.add(otherDepTestScope);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String artifactId : sharedDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = allExternalDependencies.get(artifactId);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        allExternalDependencies.put(artifactId, deps);\n      }\n      deps.addAll(sharedDependencies.get(artifactId));\n    }\n  }\n\n","sourceOld":"  /**\n   * For each module that include other modules' external dependencies via\n   * including all files under their \".../lib/\" dirs in their (test.)classpath,\n   * add the other modules' dependencies to its set of external dependencies. \n   */\n  private void addSharedExternalDependencies() {\n    // Delay adding shared compile-scope dependencies until after all have been processed,\n    // so dependency sharing is limited to a depth of one.\n    Map<String,SortedSet<ExternalDependency>> sharedDependencies = new HashMap<String,SortedSet<ExternalDependency>>();\n    for (String artifactId : interModuleExternalCompileScopeDependencies.keySet()) {\n      TreeSet<ExternalDependency> deps = new TreeSet<>();\n      sharedDependencies.put(artifactId, deps);\n      Set<String> moduleDependencies = interModuleExternalCompileScopeDependencies.get(artifactId);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId); \n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if ( ! otherDep.isTestDependency) {\n                deps.add(otherDep);\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String artifactId : interModuleExternalTestScopeDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = sharedDependencies.get(artifactId);\n      if (null == deps) {\n        deps = new TreeSet<ExternalDependency>();\n        sharedDependencies.put(artifactId, deps);\n      }\n      Set<String> moduleDependencies = interModuleExternalTestScopeDependencies.get(artifactId);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          int testScopePos = otherArtifactId.indexOf(\":test\");\n          boolean isTestScope = false;\n          if (-1 != testScopePos) {\n            otherArtifactId = otherArtifactId.substring(0, testScopePos);\n            isTestScope = true;\n          }\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId);\n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if (otherDep.isTestDependency == isTestScope) {\n                if (  ! deps.contains(otherDep)\n                   && (  null == allExternalDependencies.get(artifactId)\n                      || ! allExternalDependencies.get(artifactId).contains(otherDep))) { \n                  // Add test-scope clone only if it's not already a compile-scope dependency. \n                  ExternalDependency otherDepTestScope = new ExternalDependency\n                      (otherDep.groupId, otherDep.artifactId, otherDep.classifier, true, otherDep.isOptional);\n                  deps.add(otherDepTestScope);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String artifactId : sharedDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = allExternalDependencies.get(artifactId);\n      if (null == deps) {\n        deps = new TreeSet<ExternalDependency>();\n        allExternalDependencies.put(artifactId, deps);\n      }\n      deps.addAll(sharedDependencies.get(artifactId));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1895a927902788cc1b62e5cfd03b0848303689ad","date":1396568948,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#addSharedExternalDependencies().mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#addSharedExternalDependencies().mjava","sourceNew":"  /**\n   * For each module that include other modules' external dependencies via\n   * including all files under their \".../lib/\" dirs in their (test.)classpath,\n   * add the other modules' dependencies to its set of external dependencies. \n   */\n  private void addSharedExternalDependencies() {\n    // Delay adding shared compile-scope dependencies until after all have been processed,\n    // so dependency sharing is limited to a depth of one.\n    Map<String,SortedSet<ExternalDependency>> sharedDependencies = new HashMap<>();\n    for (String module : interModuleExternalCompileScopeDependencies.keySet()) {\n      TreeSet<ExternalDependency> deps = new TreeSet<>();\n      sharedDependencies.put(module, deps);\n      Set<String> moduleDependencies = interModuleExternalCompileScopeDependencies.get(module);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId); \n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if ( ! otherDep.isTestDependency) {\n                deps.add(otherDep);\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String module : interModuleExternalTestScopeDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = sharedDependencies.get(module);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        sharedDependencies.put(module, deps);\n      }\n      Set<String> moduleDependencies = interModuleExternalTestScopeDependencies.get(module);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          int testScopePos = otherArtifactId.indexOf(\":test\");\n          boolean isTestScope = false;\n          if (-1 != testScopePos) {\n            otherArtifactId = otherArtifactId.substring(0, testScopePos);\n            isTestScope = true;\n          }\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId);\n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if (otherDep.isTestDependency == isTestScope) {\n                if (  ! deps.contains(otherDep)\n                   && (  null == allExternalDependencies.get(module)\n                      || ! allExternalDependencies.get(module).contains(otherDep))) {\n                  // Add test-scope clone only if it's not already a compile-scope dependency. \n                  ExternalDependency otherDepTestScope = new ExternalDependency\n                      (otherDep.groupId, otherDep.artifactId, otherDep.classifier, true, otherDep.isOptional);\n                  deps.add(otherDepTestScope);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String module : sharedDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = allExternalDependencies.get(module);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        allExternalDependencies.put(module, deps);\n      }\n      for (ExternalDependency dep : sharedDependencies.get(module)) {\n        String dependencyCoordinate = dep.groupId + \":\" + dep.artifactId;\n        if (globalOptionalExternalDependencies.contains(dependencyCoordinate)\n            || (perModuleOptionalExternalDependencies.containsKey(module)\n                && perModuleOptionalExternalDependencies.get(module).contains(dependencyCoordinate))) {\n          dep = new ExternalDependency(dep.groupId, dep.artifactId, dep.classifier, dep.isTestDependency, true);\n        }\n        deps.add(dep);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * For each module that include other modules' external dependencies via\n   * including all files under their \".../lib/\" dirs in their (test.)classpath,\n   * add the other modules' dependencies to its set of external dependencies. \n   */\n  private void addSharedExternalDependencies() {\n    // Delay adding shared compile-scope dependencies until after all have been processed,\n    // so dependency sharing is limited to a depth of one.\n    Map<String,SortedSet<ExternalDependency>> sharedDependencies = new HashMap<>();\n    for (String artifactId : interModuleExternalCompileScopeDependencies.keySet()) {\n      TreeSet<ExternalDependency> deps = new TreeSet<>();\n      sharedDependencies.put(artifactId, deps);\n      Set<String> moduleDependencies = interModuleExternalCompileScopeDependencies.get(artifactId);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId); \n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if ( ! otherDep.isTestDependency) {\n                deps.add(otherDep);\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String artifactId : interModuleExternalTestScopeDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = sharedDependencies.get(artifactId);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        sharedDependencies.put(artifactId, deps);\n      }\n      Set<String> moduleDependencies = interModuleExternalTestScopeDependencies.get(artifactId);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          int testScopePos = otherArtifactId.indexOf(\":test\");\n          boolean isTestScope = false;\n          if (-1 != testScopePos) {\n            otherArtifactId = otherArtifactId.substring(0, testScopePos);\n            isTestScope = true;\n          }\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId);\n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if (otherDep.isTestDependency == isTestScope) {\n                if (  ! deps.contains(otherDep)\n                   && (  null == allExternalDependencies.get(artifactId)\n                      || ! allExternalDependencies.get(artifactId).contains(otherDep))) { \n                  // Add test-scope clone only if it's not already a compile-scope dependency. \n                  ExternalDependency otherDepTestScope = new ExternalDependency\n                      (otherDep.groupId, otherDep.artifactId, otherDep.classifier, true, otherDep.isOptional);\n                  deps.add(otherDepTestScope);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String artifactId : sharedDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = allExternalDependencies.get(artifactId);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        allExternalDependencies.put(artifactId, deps);\n      }\n      deps.addAll(sharedDependencies.get(artifactId));\n    }\n  }\n\n","bugFix":["71b83dcf02fe2854488bc83d70dee29c5baa7e5c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#addSharedExternalDependencies().mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#addSharedExternalDependencies().mjava","sourceNew":"  /**\n   * For each module that include other modules' external dependencies via\n   * including all files under their \".../lib/\" dirs in their (test.)classpath,\n   * add the other modules' dependencies to its set of external dependencies. \n   */\n  private void addSharedExternalDependencies() {\n    // Delay adding shared compile-scope dependencies until after all have been processed,\n    // so dependency sharing is limited to a depth of one.\n    Map<String,SortedSet<ExternalDependency>> sharedDependencies = new HashMap<>();\n    for (String module : interModuleExternalCompileScopeDependencies.keySet()) {\n      TreeSet<ExternalDependency> deps = new TreeSet<>();\n      sharedDependencies.put(module, deps);\n      Set<String> moduleDependencies = interModuleExternalCompileScopeDependencies.get(module);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId); \n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if ( ! otherDep.isTestDependency) {\n                deps.add(otherDep);\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String module : interModuleExternalTestScopeDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = sharedDependencies.get(module);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        sharedDependencies.put(module, deps);\n      }\n      Set<String> moduleDependencies = interModuleExternalTestScopeDependencies.get(module);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          int testScopePos = otherArtifactId.indexOf(\":test\");\n          boolean isTestScope = false;\n          if (-1 != testScopePos) {\n            otherArtifactId = otherArtifactId.substring(0, testScopePos);\n            isTestScope = true;\n          }\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId);\n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if (otherDep.isTestDependency == isTestScope) {\n                if (  ! deps.contains(otherDep)\n                   && (  null == allExternalDependencies.get(module)\n                      || ! allExternalDependencies.get(module).contains(otherDep))) {\n                  // Add test-scope clone only if it's not already a compile-scope dependency. \n                  ExternalDependency otherDepTestScope = new ExternalDependency\n                      (otherDep.groupId, otherDep.artifactId, otherDep.classifier, true, otherDep.isOptional);\n                  deps.add(otherDepTestScope);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String module : sharedDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = allExternalDependencies.get(module);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        allExternalDependencies.put(module, deps);\n      }\n      for (ExternalDependency dep : sharedDependencies.get(module)) {\n        String dependencyCoordinate = dep.groupId + \":\" + dep.artifactId;\n        if (globalOptionalExternalDependencies.contains(dependencyCoordinate)\n            || (perModuleOptionalExternalDependencies.containsKey(module)\n                && perModuleOptionalExternalDependencies.get(module).contains(dependencyCoordinate))) {\n          dep = new ExternalDependency(dep.groupId, dep.artifactId, dep.classifier, dep.isTestDependency, true);\n        }\n        deps.add(dep);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * For each module that include other modules' external dependencies via\n   * including all files under their \".../lib/\" dirs in their (test.)classpath,\n   * add the other modules' dependencies to its set of external dependencies. \n   */\n  private void addSharedExternalDependencies() {\n    // Delay adding shared compile-scope dependencies until after all have been processed,\n    // so dependency sharing is limited to a depth of one.\n    Map<String,SortedSet<ExternalDependency>> sharedDependencies = new HashMap<>();\n    for (String artifactId : interModuleExternalCompileScopeDependencies.keySet()) {\n      TreeSet<ExternalDependency> deps = new TreeSet<>();\n      sharedDependencies.put(artifactId, deps);\n      Set<String> moduleDependencies = interModuleExternalCompileScopeDependencies.get(artifactId);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId); \n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if ( ! otherDep.isTestDependency) {\n                deps.add(otherDep);\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String artifactId : interModuleExternalTestScopeDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = sharedDependencies.get(artifactId);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        sharedDependencies.put(artifactId, deps);\n      }\n      Set<String> moduleDependencies = interModuleExternalTestScopeDependencies.get(artifactId);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          int testScopePos = otherArtifactId.indexOf(\":test\");\n          boolean isTestScope = false;\n          if (-1 != testScopePos) {\n            otherArtifactId = otherArtifactId.substring(0, testScopePos);\n            isTestScope = true;\n          }\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId);\n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if (otherDep.isTestDependency == isTestScope) {\n                if (  ! deps.contains(otherDep)\n                   && (  null == allExternalDependencies.get(artifactId)\n                      || ! allExternalDependencies.get(artifactId).contains(otherDep))) { \n                  // Add test-scope clone only if it's not already a compile-scope dependency. \n                  ExternalDependency otherDepTestScope = new ExternalDependency\n                      (otherDep.groupId, otherDep.artifactId, otherDep.classifier, true, otherDep.isOptional);\n                  deps.add(otherDepTestScope);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String artifactId : sharedDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = allExternalDependencies.get(artifactId);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        allExternalDependencies.put(artifactId, deps);\n      }\n      deps.addAll(sharedDependencies.get(artifactId));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3664979e90fe16c4d429c1a1b16cbc4f244ab4a1","date":1421196403,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#addSharedExternalDependencies().mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#addSharedExternalDependencies().mjava","sourceNew":"  /**\n   * For each module that includes other modules' external dependencies via\n   * including all files under their \".../lib/\" dirs in their (test.)classpath,\n   * add the other modules' dependencies to its set of external dependencies. \n   */\n  private void addSharedExternalDependencies() {\n    // Delay adding shared compile-scope dependencies until after all have been processed,\n    // so dependency sharing is limited to a depth of one.\n    Map<String,SortedSet<ExternalDependency>> sharedDependencies = new HashMap<>();\n    for (String module : interModuleExternalCompileScopeDependencies.keySet()) {\n      TreeSet<ExternalDependency> deps = new TreeSet<>();\n      sharedDependencies.put(module, deps);\n      Set<String> moduleDependencies = interModuleExternalCompileScopeDependencies.get(module);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId); \n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if ( ! otherDep.isTestDependency) {\n                deps.add(otherDep);\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String module : interModuleExternalTestScopeDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = sharedDependencies.get(module);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        sharedDependencies.put(module, deps);\n      }\n      Set<String> moduleDependencies = interModuleExternalTestScopeDependencies.get(module);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          int testScopePos = otherArtifactId.indexOf(\":test\");\n          boolean isTestScope = false;\n          if (-1 != testScopePos) {\n            otherArtifactId = otherArtifactId.substring(0, testScopePos);\n            isTestScope = true;\n          }\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId);\n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if (otherDep.isTestDependency == isTestScope) {\n                if (  ! deps.contains(otherDep)\n                   && (  null == allExternalDependencies.get(module)\n                      || ! allExternalDependencies.get(module).contains(otherDep))) {\n                  // Add test-scope clone only if it's not already a compile-scope dependency. \n                  ExternalDependency otherDepTestScope = new ExternalDependency\n                      (otherDep.groupId, otherDep.artifactId, otherDep.classifier, true, otherDep.isOptional);\n                  deps.add(otherDepTestScope);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String module : sharedDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = allExternalDependencies.get(module);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        allExternalDependencies.put(module, deps);\n      }\n      for (ExternalDependency dep : sharedDependencies.get(module)) {\n        String dependencyCoordinate = dep.groupId + \":\" + dep.artifactId;\n        if (globalOptionalExternalDependencies.contains(dependencyCoordinate)\n            || (perModuleOptionalExternalDependencies.containsKey(module)\n                && perModuleOptionalExternalDependencies.get(module).contains(dependencyCoordinate))) {\n          // make a copy of the dep and set optional=true\n          dep = new ExternalDependency(dep.groupId, dep.artifactId, dep.classifier, dep.isTestDependency, true);\n        }\n        deps.add(dep);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * For each module that include other modules' external dependencies via\n   * including all files under their \".../lib/\" dirs in their (test.)classpath,\n   * add the other modules' dependencies to its set of external dependencies. \n   */\n  private void addSharedExternalDependencies() {\n    // Delay adding shared compile-scope dependencies until after all have been processed,\n    // so dependency sharing is limited to a depth of one.\n    Map<String,SortedSet<ExternalDependency>> sharedDependencies = new HashMap<>();\n    for (String module : interModuleExternalCompileScopeDependencies.keySet()) {\n      TreeSet<ExternalDependency> deps = new TreeSet<>();\n      sharedDependencies.put(module, deps);\n      Set<String> moduleDependencies = interModuleExternalCompileScopeDependencies.get(module);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId); \n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if ( ! otherDep.isTestDependency) {\n                deps.add(otherDep);\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String module : interModuleExternalTestScopeDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = sharedDependencies.get(module);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        sharedDependencies.put(module, deps);\n      }\n      Set<String> moduleDependencies = interModuleExternalTestScopeDependencies.get(module);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          int testScopePos = otherArtifactId.indexOf(\":test\");\n          boolean isTestScope = false;\n          if (-1 != testScopePos) {\n            otherArtifactId = otherArtifactId.substring(0, testScopePos);\n            isTestScope = true;\n          }\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId);\n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if (otherDep.isTestDependency == isTestScope) {\n                if (  ! deps.contains(otherDep)\n                   && (  null == allExternalDependencies.get(module)\n                      || ! allExternalDependencies.get(module).contains(otherDep))) {\n                  // Add test-scope clone only if it's not already a compile-scope dependency. \n                  ExternalDependency otherDepTestScope = new ExternalDependency\n                      (otherDep.groupId, otherDep.artifactId, otherDep.classifier, true, otherDep.isOptional);\n                  deps.add(otherDepTestScope);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String module : sharedDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = allExternalDependencies.get(module);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        allExternalDependencies.put(module, deps);\n      }\n      for (ExternalDependency dep : sharedDependencies.get(module)) {\n        String dependencyCoordinate = dep.groupId + \":\" + dep.artifactId;\n        if (globalOptionalExternalDependencies.contains(dependencyCoordinate)\n            || (perModuleOptionalExternalDependencies.containsKey(module)\n                && perModuleOptionalExternalDependencies.get(module).contains(dependencyCoordinate))) {\n          dep = new ExternalDependency(dep.groupId, dep.artifactId, dep.classifier, dep.isTestDependency, true);\n        }\n        deps.add(dep);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","date":1571070979,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#addSharedExternalDependencies().mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#addSharedExternalDependencies().mjava","sourceNew":"  /**\n   * For each module that includes other modules' external dependencies via\n   * including all files under their \".../lib/\" dirs in their (test.)classpath,\n   * add the other modules' dependencies to its set of external dependencies. \n   */\n  private void addSharedExternalDependencies() {\n    // Delay adding shared compile-scope dependencies until after all have been processed,\n    // so dependency sharing is limited to a depth of one.\n    Map<String,SortedSet<ExternalDependency>> sharedDependencies = new HashMap<>();\n    for (Map.Entry<String, Set<String>> entry : interModuleExternalCompileScopeDependencies.entrySet()) {\n      TreeSet<ExternalDependency> deps = new TreeSet<>();\n      sharedDependencies.put(entry.getKey(), deps);\n      Set<String> moduleDependencies = entry.getValue();\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId); \n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if ( ! otherDep.isTestDependency) {\n                deps.add(otherDep);\n              }\n            }\n          }\n        }\n      }\n    }\n    for (Map.Entry<String, Set<String>> entry : interModuleExternalTestScopeDependencies.entrySet()) {\n      String module = entry.getKey();\n      SortedSet<ExternalDependency> deps = sharedDependencies.get(module);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        sharedDependencies.put(module, deps);\n      }\n      Set<String> moduleDependencies = entry.getValue();\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          int testScopePos = otherArtifactId.indexOf(\":test\");\n          boolean isTestScope = false;\n          if (-1 != testScopePos) {\n            otherArtifactId = otherArtifactId.substring(0, testScopePos);\n            isTestScope = true;\n          }\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId);\n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if (otherDep.isTestDependency == isTestScope) {\n                if (  ! deps.contains(otherDep)\n                   && (  null == allExternalDependencies.get(module)\n                      || ! allExternalDependencies.get(module).contains(otherDep))) {\n                  // Add test-scope clone only if it's not already a compile-scope dependency. \n                  ExternalDependency otherDepTestScope = new ExternalDependency\n                      (otherDep.groupId, otherDep.artifactId, otherDep.classifier, true, otherDep.isOptional);\n                  deps.add(otherDepTestScope);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (Map.Entry<String, SortedSet<ExternalDependency>> entry : sharedDependencies.entrySet()) {\n      String module = entry.getKey();\n      SortedSet<ExternalDependency> deps = allExternalDependencies.get(module);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        allExternalDependencies.put(module, deps);\n      }\n      for (ExternalDependency dep : entry.getValue()) {\n        String dependencyCoordinate = dep.groupId + \":\" + dep.artifactId;\n        if (globalOptionalExternalDependencies.contains(dependencyCoordinate)\n            || (perModuleOptionalExternalDependencies.containsKey(module)\n                && perModuleOptionalExternalDependencies.get(module).contains(dependencyCoordinate))) {\n          // make a copy of the dep and set optional=true\n          dep = new ExternalDependency(dep.groupId, dep.artifactId, dep.classifier, dep.isTestDependency, true);\n        }\n        deps.add(dep);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * For each module that includes other modules' external dependencies via\n   * including all files under their \".../lib/\" dirs in their (test.)classpath,\n   * add the other modules' dependencies to its set of external dependencies. \n   */\n  private void addSharedExternalDependencies() {\n    // Delay adding shared compile-scope dependencies until after all have been processed,\n    // so dependency sharing is limited to a depth of one.\n    Map<String,SortedSet<ExternalDependency>> sharedDependencies = new HashMap<>();\n    for (String module : interModuleExternalCompileScopeDependencies.keySet()) {\n      TreeSet<ExternalDependency> deps = new TreeSet<>();\n      sharedDependencies.put(module, deps);\n      Set<String> moduleDependencies = interModuleExternalCompileScopeDependencies.get(module);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId); \n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if ( ! otherDep.isTestDependency) {\n                deps.add(otherDep);\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String module : interModuleExternalTestScopeDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = sharedDependencies.get(module);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        sharedDependencies.put(module, deps);\n      }\n      Set<String> moduleDependencies = interModuleExternalTestScopeDependencies.get(module);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          int testScopePos = otherArtifactId.indexOf(\":test\");\n          boolean isTestScope = false;\n          if (-1 != testScopePos) {\n            otherArtifactId = otherArtifactId.substring(0, testScopePos);\n            isTestScope = true;\n          }\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId);\n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if (otherDep.isTestDependency == isTestScope) {\n                if (  ! deps.contains(otherDep)\n                   && (  null == allExternalDependencies.get(module)\n                      || ! allExternalDependencies.get(module).contains(otherDep))) {\n                  // Add test-scope clone only if it's not already a compile-scope dependency. \n                  ExternalDependency otherDepTestScope = new ExternalDependency\n                      (otherDep.groupId, otherDep.artifactId, otherDep.classifier, true, otherDep.isOptional);\n                  deps.add(otherDepTestScope);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String module : sharedDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = allExternalDependencies.get(module);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        allExternalDependencies.put(module, deps);\n      }\n      for (ExternalDependency dep : sharedDependencies.get(module)) {\n        String dependencyCoordinate = dep.groupId + \":\" + dep.artifactId;\n        if (globalOptionalExternalDependencies.contains(dependencyCoordinate)\n            || (perModuleOptionalExternalDependencies.containsKey(module)\n                && perModuleOptionalExternalDependencies.get(module).contains(dependencyCoordinate))) {\n          // make a copy of the dep and set optional=true\n          dep = new ExternalDependency(dep.groupId, dep.artifactId, dep.classifier, dep.isTestDependency, true);\n        }\n        deps.add(dep);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#addSharedExternalDependencies().mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#addSharedExternalDependencies().mjava","sourceNew":"  /**\n   * For each module that includes other modules' external dependencies via\n   * including all files under their \".../lib/\" dirs in their (test.)classpath,\n   * add the other modules' dependencies to its set of external dependencies. \n   */\n  private void addSharedExternalDependencies() {\n    // Delay adding shared compile-scope dependencies until after all have been processed,\n    // so dependency sharing is limited to a depth of one.\n    Map<String,SortedSet<ExternalDependency>> sharedDependencies = new HashMap<>();\n    for (Map.Entry<String, Set<String>> entry : interModuleExternalCompileScopeDependencies.entrySet()) {\n      TreeSet<ExternalDependency> deps = new TreeSet<>();\n      sharedDependencies.put(entry.getKey(), deps);\n      Set<String> moduleDependencies = entry.getValue();\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId); \n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if ( ! otherDep.isTestDependency) {\n                deps.add(otherDep);\n              }\n            }\n          }\n        }\n      }\n    }\n    for (Map.Entry<String, Set<String>> entry : interModuleExternalTestScopeDependencies.entrySet()) {\n      String module = entry.getKey();\n      SortedSet<ExternalDependency> deps = sharedDependencies.get(module);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        sharedDependencies.put(module, deps);\n      }\n      Set<String> moduleDependencies = entry.getValue();\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          int testScopePos = otherArtifactId.indexOf(\":test\");\n          boolean isTestScope = false;\n          if (-1 != testScopePos) {\n            otherArtifactId = otherArtifactId.substring(0, testScopePos);\n            isTestScope = true;\n          }\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId);\n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if (otherDep.isTestDependency == isTestScope) {\n                if (  ! deps.contains(otherDep)\n                   && (  null == allExternalDependencies.get(module)\n                      || ! allExternalDependencies.get(module).contains(otherDep))) {\n                  // Add test-scope clone only if it's not already a compile-scope dependency. \n                  ExternalDependency otherDepTestScope = new ExternalDependency\n                      (otherDep.groupId, otherDep.artifactId, otherDep.classifier, true, otherDep.isOptional);\n                  deps.add(otherDepTestScope);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (Map.Entry<String, SortedSet<ExternalDependency>> entry : sharedDependencies.entrySet()) {\n      String module = entry.getKey();\n      SortedSet<ExternalDependency> deps = allExternalDependencies.get(module);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        allExternalDependencies.put(module, deps);\n      }\n      for (ExternalDependency dep : entry.getValue()) {\n        String dependencyCoordinate = dep.groupId + \":\" + dep.artifactId;\n        if (globalOptionalExternalDependencies.contains(dependencyCoordinate)\n            || (perModuleOptionalExternalDependencies.containsKey(module)\n                && perModuleOptionalExternalDependencies.get(module).contains(dependencyCoordinate))) {\n          // make a copy of the dep and set optional=true\n          dep = new ExternalDependency(dep.groupId, dep.artifactId, dep.classifier, dep.isTestDependency, true);\n        }\n        deps.add(dep);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * For each module that includes other modules' external dependencies via\n   * including all files under their \".../lib/\" dirs in their (test.)classpath,\n   * add the other modules' dependencies to its set of external dependencies. \n   */\n  private void addSharedExternalDependencies() {\n    // Delay adding shared compile-scope dependencies until after all have been processed,\n    // so dependency sharing is limited to a depth of one.\n    Map<String,SortedSet<ExternalDependency>> sharedDependencies = new HashMap<>();\n    for (String module : interModuleExternalCompileScopeDependencies.keySet()) {\n      TreeSet<ExternalDependency> deps = new TreeSet<>();\n      sharedDependencies.put(module, deps);\n      Set<String> moduleDependencies = interModuleExternalCompileScopeDependencies.get(module);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId); \n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if ( ! otherDep.isTestDependency) {\n                deps.add(otherDep);\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String module : interModuleExternalTestScopeDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = sharedDependencies.get(module);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        sharedDependencies.put(module, deps);\n      }\n      Set<String> moduleDependencies = interModuleExternalTestScopeDependencies.get(module);\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          int testScopePos = otherArtifactId.indexOf(\":test\");\n          boolean isTestScope = false;\n          if (-1 != testScopePos) {\n            otherArtifactId = otherArtifactId.substring(0, testScopePos);\n            isTestScope = true;\n          }\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId);\n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if (otherDep.isTestDependency == isTestScope) {\n                if (  ! deps.contains(otherDep)\n                   && (  null == allExternalDependencies.get(module)\n                      || ! allExternalDependencies.get(module).contains(otherDep))) {\n                  // Add test-scope clone only if it's not already a compile-scope dependency. \n                  ExternalDependency otherDepTestScope = new ExternalDependency\n                      (otherDep.groupId, otherDep.artifactId, otherDep.classifier, true, otherDep.isOptional);\n                  deps.add(otherDepTestScope);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (String module : sharedDependencies.keySet()) {\n      SortedSet<ExternalDependency> deps = allExternalDependencies.get(module);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        allExternalDependencies.put(module, deps);\n      }\n      for (ExternalDependency dep : sharedDependencies.get(module)) {\n        String dependencyCoordinate = dep.groupId + \":\" + dep.artifactId;\n        if (globalOptionalExternalDependencies.contains(dependencyCoordinate)\n            || (perModuleOptionalExternalDependencies.containsKey(module)\n                && perModuleOptionalExternalDependencies.get(module).contains(dependencyCoordinate))) {\n          // make a copy of the dep and set optional=true\n          dep = new ExternalDependency(dep.groupId, dep.artifactId, dep.classifier, dep.isTestDependency, true);\n        }\n        deps.add(dep);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e025cf1c07150c8db28879d785db17eb3a66ca9f","date":1598788864,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#addSharedExternalDependencies().mjava","sourceNew":null,"sourceOld":"  /**\n   * For each module that includes other modules' external dependencies via\n   * including all files under their \".../lib/\" dirs in their (test.)classpath,\n   * add the other modules' dependencies to its set of external dependencies. \n   */\n  private void addSharedExternalDependencies() {\n    // Delay adding shared compile-scope dependencies until after all have been processed,\n    // so dependency sharing is limited to a depth of one.\n    Map<String,SortedSet<ExternalDependency>> sharedDependencies = new HashMap<>();\n    for (Map.Entry<String, Set<String>> entry : interModuleExternalCompileScopeDependencies.entrySet()) {\n      TreeSet<ExternalDependency> deps = new TreeSet<>();\n      sharedDependencies.put(entry.getKey(), deps);\n      Set<String> moduleDependencies = entry.getValue();\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId); \n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if ( ! otherDep.isTestDependency) {\n                deps.add(otherDep);\n              }\n            }\n          }\n        }\n      }\n    }\n    for (Map.Entry<String, Set<String>> entry : interModuleExternalTestScopeDependencies.entrySet()) {\n      String module = entry.getKey();\n      SortedSet<ExternalDependency> deps = sharedDependencies.get(module);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        sharedDependencies.put(module, deps);\n      }\n      Set<String> moduleDependencies = entry.getValue();\n      if (null != moduleDependencies) {\n        for (String otherArtifactId : moduleDependencies) {\n          int testScopePos = otherArtifactId.indexOf(\":test\");\n          boolean isTestScope = false;\n          if (-1 != testScopePos) {\n            otherArtifactId = otherArtifactId.substring(0, testScopePos);\n            isTestScope = true;\n          }\n          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId);\n          if (null != otherExtDeps) {\n            for (ExternalDependency otherDep : otherExtDeps) {\n              if (otherDep.isTestDependency == isTestScope) {\n                if (  ! deps.contains(otherDep)\n                   && (  null == allExternalDependencies.get(module)\n                      || ! allExternalDependencies.get(module).contains(otherDep))) {\n                  // Add test-scope clone only if it's not already a compile-scope dependency. \n                  ExternalDependency otherDepTestScope = new ExternalDependency\n                      (otherDep.groupId, otherDep.artifactId, otherDep.classifier, true, otherDep.isOptional);\n                  deps.add(otherDepTestScope);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    for (Map.Entry<String, SortedSet<ExternalDependency>> entry : sharedDependencies.entrySet()) {\n      String module = entry.getKey();\n      SortedSet<ExternalDependency> deps = allExternalDependencies.get(module);\n      if (null == deps) {\n        deps = new TreeSet<>();\n        allExternalDependencies.put(module, deps);\n      }\n      for (ExternalDependency dep : entry.getValue()) {\n        String dependencyCoordinate = dep.groupId + \":\" + dep.artifactId;\n        if (globalOptionalExternalDependencies.contains(dependencyCoordinate)\n            || (perModuleOptionalExternalDependencies.containsKey(module)\n                && perModuleOptionalExternalDependencies.get(module).contains(dependencyCoordinate))) {\n          // make a copy of the dep and set optional=true\n          dep = new ExternalDependency(dep.groupId, dep.artifactId, dep.classifier, dep.isTestDependency, true);\n        }\n        deps.add(dep);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1895a927902788cc1b62e5cfd03b0848303689ad":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","1895a927902788cc1b62e5cfd03b0848303689ad"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["582a32eeb049d563d59e2958fe2d130e473101ff"],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["3664979e90fe16c4d429c1a1b16cbc4f244ab4a1"],"582a32eeb049d563d59e2958fe2d130e473101ff":["71b83dcf02fe2854488bc83d70dee29c5baa7e5c"],"e025cf1c07150c8db28879d785db17eb3a66ca9f":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"71b83dcf02fe2854488bc83d70dee29c5baa7e5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["71b83dcf02fe2854488bc83d70dee29c5baa7e5c","582a32eeb049d563d59e2958fe2d130e473101ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e025cf1c07150c8db28879d785db17eb3a66ca9f"],"3664979e90fe16c4d429c1a1b16cbc4f244ab4a1":["1895a927902788cc1b62e5cfd03b0848303689ad"],"b0b597c65628ca9e73913a07e81691f8229bae35":["3664979e90fe16c4d429c1a1b16cbc4f244ab4a1","7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"]},"commit2Childs":{"1895a927902788cc1b62e5cfd03b0848303689ad":["5eb2511ababf862ea11e10761c70ee560cd84510","3664979e90fe16c4d429c1a1b16cbc4f244ab4a1"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1895a927902788cc1b62e5cfd03b0848303689ad","5eb2511ababf862ea11e10761c70ee560cd84510"],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["e025cf1c07150c8db28879d785db17eb3a66ca9f","b0b597c65628ca9e73913a07e81691f8229bae35"],"582a32eeb049d563d59e2958fe2d130e473101ff":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"71b83dcf02fe2854488bc83d70dee29c5baa7e5c":["582a32eeb049d563d59e2958fe2d130e473101ff","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"e025cf1c07150c8db28879d785db17eb3a66ca9f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71b83dcf02fe2854488bc83d70dee29c5baa7e5c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"3664979e90fe16c4d429c1a1b16cbc4f244ab4a1":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}