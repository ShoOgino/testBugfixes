{"path":"contrib/miscellaneous/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#_testSimple().mjava","commits":[{"id":"9129ce11ed65491288f215548376e03906d27474","date":1180494051,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/miscellaneous/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#_testSimple().mjava","pathOld":"contrib/miscellaneous/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testSimple().mjava","sourceNew":"  // failing tests disabled since PrecedenceQueryParser\n  // is currently unmaintained\n  public void _testSimple() throws Exception {\n    assertQueryEquals(\"\", null, \"\");\n\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", null, \"türm term term\");\n    assertQueryEquals(\"ümlaut\", null, \"ümlaut\");\n\n    assertQueryEquals(\"+a\", null, \"+a\");\n    assertQueryEquals(\"-a\", null, \"-a\");\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    PrecedenceQueryParser qp = new PrecedenceQueryParser(\"field\", new StandardAnalyzer());\n    // make sure OR is the default:\n    assertEquals(PrecedenceQueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(PrecedenceQueryParser.AND_OPERATOR);\n    assertEquals(PrecedenceQueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(PrecedenceQueryParser.OR_OPERATOR);\n    assertEquals(PrecedenceQueryParser.OR_OPERATOR, qp.getDefaultOperator());\n\n    assertQueryEquals(\"a OR !b\", null, \"a (-b)\");\n    assertQueryEquals(\"a OR ! b\", null, \"a (-b)\");\n    assertQueryEquals(\"a OR -b\", null, \"a (-b)\");\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"\", null, \"\");\n\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", null, \"türm term term\");\n    assertQueryEquals(\"ümlaut\", null, \"ümlaut\");\n\n    assertQueryEquals(\"+a\", null, \"+a\");\n    assertQueryEquals(\"-a\", null, \"-a\");\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    PrecedenceQueryParser qp = new PrecedenceQueryParser(\"field\", new StandardAnalyzer());\n    // make sure OR is the default:\n    assertEquals(PrecedenceQueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(PrecedenceQueryParser.AND_OPERATOR);\n    assertEquals(PrecedenceQueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(PrecedenceQueryParser.OR_OPERATOR);\n    assertEquals(PrecedenceQueryParser.OR_OPERATOR, qp.getDefaultOperator());\n\n    assertQueryEquals(\"a OR !b\", null, \"a (-b)\");\n    assertQueryEquals(\"a OR ! b\", null, \"a (-b)\");\n    assertQueryEquals(\"a OR -b\", null, \"a (-b)\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#_testSimple().mjava","pathOld":"contrib/miscellaneous/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#_testSimple().mjava","sourceNew":"  // failing tests disabled since PrecedenceQueryParser\n  // is currently unmaintained\n  public void _testSimple() throws Exception {\n    assertQueryEquals(\"\", null, \"\");\n\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", null, \"türm term term\");\n    assertQueryEquals(\"ümlaut\", null, \"ümlaut\");\n\n    assertQueryEquals(\"+a\", null, \"+a\");\n    assertQueryEquals(\"-a\", null, \"-a\");\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    PrecedenceQueryParser qp = new PrecedenceQueryParser(\"field\", new StandardAnalyzer());\n    // make sure OR is the default:\n    assertEquals(PrecedenceQueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(PrecedenceQueryParser.AND_OPERATOR);\n    assertEquals(PrecedenceQueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(PrecedenceQueryParser.OR_OPERATOR);\n    assertEquals(PrecedenceQueryParser.OR_OPERATOR, qp.getDefaultOperator());\n\n    assertQueryEquals(\"a OR !b\", null, \"a (-b)\");\n    assertQueryEquals(\"a OR ! b\", null, \"a (-b)\");\n    assertQueryEquals(\"a OR -b\", null, \"a (-b)\");\n  }\n\n","sourceOld":"  // failing tests disabled since PrecedenceQueryParser\n  // is currently unmaintained\n  public void _testSimple() throws Exception {\n    assertQueryEquals(\"\", null, \"\");\n\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", null, \"türm term term\");\n    assertQueryEquals(\"ümlaut\", null, \"ümlaut\");\n\n    assertQueryEquals(\"+a\", null, \"+a\");\n    assertQueryEquals(\"-a\", null, \"-a\");\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    PrecedenceQueryParser qp = new PrecedenceQueryParser(\"field\", new StandardAnalyzer());\n    // make sure OR is the default:\n    assertEquals(PrecedenceQueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(PrecedenceQueryParser.AND_OPERATOR);\n    assertEquals(PrecedenceQueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(PrecedenceQueryParser.OR_OPERATOR);\n    assertEquals(PrecedenceQueryParser.OR_OPERATOR, qp.getDefaultOperator());\n\n    assertQueryEquals(\"a OR !b\", null, \"a (-b)\");\n    assertQueryEquals(\"a OR ! b\", null, \"a (-b)\");\n    assertQueryEquals(\"a OR -b\", null, \"a (-b)\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9129ce11ed65491288f215548376e03906d27474":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["9129ce11ed65491288f215548376e03906d27474"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"9129ce11ed65491288f215548376e03906d27474":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9129ce11ed65491288f215548376e03906d27474"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}