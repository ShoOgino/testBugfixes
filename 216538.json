{"path":"lucene/core/src/test/org/apache/lucene/index/TestTragicIndexWriterDeadlock#testDeadlockExcNRTReaderCommit().mjava","commits":[{"id":"901d103ab7c2eeae92b111fc91bb1b00580a3fd7","date":1422827173,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTragicIndexWriterDeadlock#testDeadlockExcNRTReaderCommit().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeadlockExcNRTReaderCommit() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    if (iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler) {\n      iwc.setMergeScheduler(new SuppressingConcurrentMergeScheduler() {\n          @Override\n          protected boolean isOK(Throwable th) {\n            return true;\n          }\n        });\n    }\n    final IndexWriter w = new IndexWriter(dir, iwc);\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean done = new AtomicBoolean();\n    Thread commitThread = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            while (done.get() == false) {\n              w.addDocument(new Document());\n              w.commit();\n            }\n          } catch (Throwable t) {\n            done.set(true);\n            //System.out.println(\"commit exc:\");\n            //t.printStackTrace(System.out);\n          }\n        }\n      };\n    commitThread.start();\n    final DirectoryReader r0 = DirectoryReader.open(w, true);\n    Thread nrtThread = new Thread() {\n        @Override\n        public void run() {\n          DirectoryReader r = r0;\n          try {\n            try {\n              startingGun.await();\n              while (done.get() == false) {\n                DirectoryReader oldReader = r;                  \n                DirectoryReader r2 = DirectoryReader.openIfChanged(oldReader);\n                if (r2 != null) {\n                  r = r2;\n                  oldReader.decRef();       \n                }\n              }\n            } finally {\n              r.close();\n            }\n          } catch (Throwable t) {\n            done.set(true);\n            //System.out.println(\"nrt exc:\");\n            //t.printStackTrace(System.out);\n          }\n        }\n      };\n    nrtThread.start();\n    dir.setRandomIOExceptionRate(.1);\n    startingGun.countDown();\n    commitThread.join();\n    nrtThread.join();\n    dir.setRandomIOExceptionRate(0.0);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTragicIndexWriterDeadlock#testDeadlockExcNRTReaderCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTragicIndexWriterDeadlock#testDeadlockExcNRTReaderCommit().mjava","sourceNew":"  public void testDeadlockExcNRTReaderCommit() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    if (iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler) {\n      iwc.setMergeScheduler(new SuppressingConcurrentMergeScheduler() {\n          @Override\n          protected boolean isOK(Throwable th) {\n            return true;\n          }\n        });\n    }\n    final IndexWriter w = new IndexWriter(dir, iwc);\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean done = new AtomicBoolean();\n    Thread commitThread = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            while (done.get() == false) {\n              w.addDocument(new Document());\n              w.commit();\n            }\n          } catch (Throwable t) {\n            done.set(true);\n            //System.out.println(\"commit exc:\");\n            //t.printStackTrace(System.out);\n          }\n        }\n      };\n    commitThread.start();\n    final DirectoryReader r0 = DirectoryReader.open(w);\n    Thread nrtThread = new Thread() {\n        @Override\n        public void run() {\n          DirectoryReader r = r0;\n          try {\n            try {\n              startingGun.await();\n              while (done.get() == false) {\n                DirectoryReader oldReader = r;                  \n                DirectoryReader r2 = DirectoryReader.openIfChanged(oldReader);\n                if (r2 != null) {\n                  r = r2;\n                  oldReader.decRef();       \n                }\n              }\n            } finally {\n              r.close();\n            }\n          } catch (Throwable t) {\n            done.set(true);\n            //System.out.println(\"nrt exc:\");\n            //t.printStackTrace(System.out);\n          }\n        }\n      };\n    nrtThread.start();\n    dir.setRandomIOExceptionRate(.1);\n    startingGun.countDown();\n    commitThread.join();\n    nrtThread.join();\n    dir.setRandomIOExceptionRate(0.0);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeadlockExcNRTReaderCommit() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    if (iwc.getMergeScheduler() instanceof ConcurrentMergeScheduler) {\n      iwc.setMergeScheduler(new SuppressingConcurrentMergeScheduler() {\n          @Override\n          protected boolean isOK(Throwable th) {\n            return true;\n          }\n        });\n    }\n    final IndexWriter w = new IndexWriter(dir, iwc);\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean done = new AtomicBoolean();\n    Thread commitThread = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            while (done.get() == false) {\n              w.addDocument(new Document());\n              w.commit();\n            }\n          } catch (Throwable t) {\n            done.set(true);\n            //System.out.println(\"commit exc:\");\n            //t.printStackTrace(System.out);\n          }\n        }\n      };\n    commitThread.start();\n    final DirectoryReader r0 = DirectoryReader.open(w, true);\n    Thread nrtThread = new Thread() {\n        @Override\n        public void run() {\n          DirectoryReader r = r0;\n          try {\n            try {\n              startingGun.await();\n              while (done.get() == false) {\n                DirectoryReader oldReader = r;                  \n                DirectoryReader r2 = DirectoryReader.openIfChanged(oldReader);\n                if (r2 != null) {\n                  r = r2;\n                  oldReader.decRef();       \n                }\n              }\n            } finally {\n              r.close();\n            }\n          } catch (Throwable t) {\n            done.set(true);\n            //System.out.println(\"nrt exc:\");\n            //t.printStackTrace(System.out);\n          }\n        }\n      };\n    nrtThread.start();\n    dir.setRandomIOExceptionRate(.1);\n    startingGun.countDown();\n    commitThread.join();\n    nrtThread.join();\n    dir.setRandomIOExceptionRate(0.0);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a1862266772deb28cdcb7d996b64d2177022687":["901d103ab7c2eeae92b111fc91bb1b00580a3fd7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"901d103ab7c2eeae92b111fc91bb1b00580a3fd7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a1862266772deb28cdcb7d996b64d2177022687"]},"commit2Childs":{"2a1862266772deb28cdcb7d996b64d2177022687":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["901d103ab7c2eeae92b111fc91bb1b00580a3fd7"],"901d103ab7c2eeae92b111fc91bb1b00580a3fd7":["2a1862266772deb28cdcb7d996b64d2177022687"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}