{"path":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int).mjava","sourceNew":"  /** Sorts via in-place, but unstable, QuickSort algorithm.\n   * For small collections falls back to {@link #insertionSort(int,int)}. */\n  public final void quickSort(final int lo, final int hi) {\n    if (hi <= lo) return;\n    // from Integer's Javadocs: ceil(log2(x)) = 32 - numberOfLeadingZeros(x - 1)\n    quickSort(lo, hi, (Integer.SIZE - Integer.numberOfLeadingZeros(hi - lo)) << 1);\n  }\n\n","sourceOld":"  /** Sorts via in-place, but unstable, QuickSort algorithm.\n   * For small collections falls back to {@link #insertionSort(int,int)}. */\n  public final void quickSort(final int lo, final int hi) {\n    if (hi <= lo) return;\n    // from Integer's Javadocs: ceil(log2(x)) = 32 - numberOfLeadingZeros(x - 1)\n    quickSort(lo, hi, (Integer.SIZE - Integer.numberOfLeadingZeros(hi - lo)) << 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#quickSort(int,int).mjava","sourceNew":null,"sourceOld":"  /** Sorts via in-place, but unstable, QuickSort algorithm.\n   * For small collections falls back to {@link #insertionSort(int,int)}. */\n  public final void quickSort(final int lo, final int hi) {\n    if (hi <= lo) return;\n    // from Integer's Javadocs: ceil(log2(x)) = 32 - numberOfLeadingZeros(x - 1)\n    quickSort(lo, hi, (Integer.SIZE - Integer.numberOfLeadingZeros(hi - lo)) << 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}