{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    waitForState(\"Timeout waiting for collection to become active\", \"policiesTest\", clusterShape(2, 1));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(solrClient);\n    waitForState(\"Timeout waiting for collection to become active\", \"policiesTest\", clusterShape(3, 1));\n\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c6c0dad4932399aec99b4818086cb1772773916","date":1520515900,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(2, 1));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(3, 1));\n\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    waitForState(\"Timeout waiting for collection to become active\", \"policiesTest\", clusterShape(2, 1));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(solrClient);\n    waitForState(\"Timeout waiting for collection to become active\", \"policiesTest\", clusterShape(3, 1));\n\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testCreateCollectionAddShardUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(2, 1));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(3, 1));\n\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String nodeId = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n    int port = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.PORT);\n\n    String commands =  \"{set-policy :{c1 : [{replica:1 , shard:'#EACH', port: '\" + port + \"'}]}}\";\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\"+ Utils.toJSONString(json) , \"#EACH\",\n        Utils.getObjectByPath(json, true, \"/policies/c1[0]/shard\"));\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1,s2\", 1)\n        .setPolicy(\"c1\")\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(2, 1));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n    assertEquals(\"c1\", coll.getPolicyName());\n    assertEquals(2,coll.getReplicas().size());\n    coll.forEachReplica((s, replica) -> assertEquals(nodeId, replica.getNodeName()));\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(3, 1));\n\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(1, coll.getSlice(\"s3\").getReplicas().size());\n    coll.getSlice(\"s3\").forEach(replica -> assertEquals(nodeId, replica.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["9c6c0dad4932399aec99b4818086cb1772773916"],"9c6c0dad4932399aec99b4818086cb1772773916":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9c6c0dad4932399aec99b4818086cb1772773916":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["9c6c0dad4932399aec99b4818086cb1772773916"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}