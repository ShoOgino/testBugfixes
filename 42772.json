{"path":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite.TermFreqBoostByteStart#grow().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite.TermFreqBoostByteStart#grow().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ScoringRewrite.TermFreqBoostByteStart#grow().mjava","sourceNew":"    @Override\n    public int[] grow() {\n      final int[] ord = super.grow();\n      boost = ArrayUtil.grow(boost, ord.length);\n      if (termState.length < ord.length) {\n        TermContext[] tmpTermState = new TermContext[ArrayUtil.oversize(ord.length, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(termState, 0, tmpTermState, 0, termState.length);\n        termState = tmpTermState;\n      }     \n      assert termState.length >= ord.length && boost.length >= ord.length;\n      return ord;\n    }\n\n","sourceOld":"    @Override\n    public int[] grow() {\n      final int[] ord = super.grow();\n      boost = ArrayUtil.grow(boost, ord.length);\n      if (termState.length < ord.length) {\n        TermContext[] tmpTermState = new TermContext[ArrayUtil.oversize(ord.length, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(termState, 0, tmpTermState, 0, termState.length);\n        termState = tmpTermState;\n      }     \n      assert termState.length >= ord.length && boost.length >= ord.length;\n      return ord;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite.TermFreqBoostByteStart#grow().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite.TermFreqBoostByteStart#grow().mjava","sourceNew":"    @Override\n    public int[] grow() {\n      final int[] ord = super.grow();\n      boost = ArrayUtil.grow(boost, ord.length);\n      if (termState.length < ord.length) {\n        TermStates[] tmpTermState = new TermStates[ArrayUtil.oversize(ord.length, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(termState, 0, tmpTermState, 0, termState.length);\n        termState = tmpTermState;\n      }     \n      assert termState.length >= ord.length && boost.length >= ord.length;\n      return ord;\n    }\n\n","sourceOld":"    @Override\n    public int[] grow() {\n      final int[] ord = super.grow();\n      boost = ArrayUtil.grow(boost, ord.length);\n      if (termState.length < ord.length) {\n        TermContext[] tmpTermState = new TermContext[ArrayUtil.oversize(ord.length, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(termState, 0, tmpTermState, 0, termState.length);\n        termState = tmpTermState;\n      }     \n      assert termState.length >= ord.length && boost.length >= ord.length;\n      return ord;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite.TermFreqBoostByteStart#grow().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ScoringRewrite.TermFreqBoostByteStart#grow().mjava","sourceNew":"    @Override\n    public int[] grow() {\n      final int[] ord = super.grow();\n      boost = ArrayUtil.grow(boost, ord.length);\n      if (termState.length < ord.length) {\n        TermStates[] tmpTermState = new TermStates[ArrayUtil.oversize(ord.length, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(termState, 0, tmpTermState, 0, termState.length);\n        termState = tmpTermState;\n      }     \n      assert termState.length >= ord.length && boost.length >= ord.length;\n      return ord;\n    }\n\n","sourceOld":"    @Override\n    public int[] grow() {\n      final int[] ord = super.grow();\n      boost = ArrayUtil.grow(boost, ord.length);\n      if (termState.length < ord.length) {\n        TermContext[] tmpTermState = new TermContext[ArrayUtil.oversize(ord.length, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(termState, 0, tmpTermState, 0, termState.length);\n        termState = tmpTermState;\n      }     \n      assert termState.length >= ord.length && boost.length >= ord.length;\n      return ord;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}