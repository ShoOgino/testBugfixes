{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","pathOld":"/dev/null","sourceNew":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockRAMDirectory(addDir);\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexesNoOptimize\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < NUM_THREADS; i++)\n        threads[i].start();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockRAMDirectory(addDir);\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexesNoOptimize\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < NUM_THREADS; i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockRAMDirectory(addDir);\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexesNoOptimize\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < NUM_THREADS; i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}