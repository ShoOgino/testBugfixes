{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#filterPoints(Node,Node).mjava","commits":[{"id":"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","date":1531585717,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#filterPoints(Node,Node).mjava","pathOld":"/dev/null","sourceNew":"  /** Eliminate colinear/duplicate points from the doubly linked list */\n  private static final Node filterPoints(final Node start, Node end) {\n    if (start == null) {\n      return start;\n    }\n\n    if(end == null) {\n      end = start;\n    }\n\n    Node node = start;\n    Node nextNode;\n    Node prevNode;\n    boolean continueIteration;\n\n    do {\n      continueIteration = false;\n      nextNode = node.next;\n      prevNode = node.previous;\n      if (node.isSteiner == false && isVertexEquals(node, nextNode)\n          || area(prevNode.getX(), prevNode.getY(), node.getX(), node.getY(), nextNode.getX(), nextNode.getY()) == 0) {\n        // Remove the node\n        removeNode(node);\n        node = end = prevNode;\n\n        if (node == nextNode) {\n          break;\n        }\n        continueIteration = true;\n      } else {\n        node = nextNode;\n      }\n    } while (continueIteration || node != end);\n    return end;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["af3d65dc4ed982e4cd039cdc714a74f15757fa53"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#filterPoints(Node,Node).mjava","pathOld":"/dev/null","sourceNew":"  /** Eliminate colinear/duplicate points from the doubly linked list */\n  private static final Node filterPoints(final Node start, Node end) {\n    if (start == null) {\n      return start;\n    }\n\n    if(end == null) {\n      end = start;\n    }\n\n    Node node = start;\n    Node nextNode;\n    Node prevNode;\n    boolean continueIteration;\n\n    do {\n      continueIteration = false;\n      nextNode = node.next;\n      prevNode = node.previous;\n      if (node.isSteiner == false && isVertexEquals(node, nextNode)\n          || area(prevNode.getX(), prevNode.getY(), node.getX(), node.getY(), nextNode.getX(), nextNode.getY()) == 0) {\n        // Remove the node\n        removeNode(node);\n        node = end = prevNode;\n\n        if (node == nextNode) {\n          break;\n        }\n        continueIteration = true;\n      } else {\n        node = nextNode;\n      }\n    } while (continueIteration || node != end);\n    return end;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#filterPoints(Node,Node).mjava","pathOld":"/dev/null","sourceNew":"  /** Eliminate colinear/duplicate points from the doubly linked list */\n  private static final Node filterPoints(final Node start, Node end) {\n    if (start == null) {\n      return start;\n    }\n\n    if(end == null) {\n      end = start;\n    }\n\n    Node node = start;\n    Node nextNode;\n    Node prevNode;\n    boolean continueIteration;\n\n    do {\n      continueIteration = false;\n      nextNode = node.next;\n      prevNode = node.previous;\n      if (node.isSteiner == false && isVertexEquals(node, nextNode)\n          || area(prevNode.getX(), prevNode.getY(), node.getX(), node.getY(), nextNode.getX(), nextNode.getY()) == 0) {\n        // Remove the node\n        removeNode(node);\n        node = end = prevNode;\n\n        if (node == nextNode) {\n          break;\n        }\n        continueIteration = true;\n      } else {\n        node = nextNode;\n      }\n    } while (continueIteration || node != end);\n    return end;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af3d65dc4ed982e4cd039cdc714a74f15757fa53","date":1561362093,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#filterPoints(Node,Node).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#filterPoints(Node,Node).mjava","sourceNew":"  /** Eliminate colinear/duplicate points from the doubly linked list */\n  private static final Node filterPoints(final Node start, Node end) {\n    if (start == null) {\n      return start;\n    }\n\n    if(end == null) {\n      end = start;\n    }\n\n    Node node = start;\n    Node nextNode;\n    Node prevNode;\n    boolean continueIteration;\n\n    do {\n      continueIteration = false;\n      nextNode = node.next;\n      prevNode = node.previous;\n      if (isVertexEquals(node, nextNode)\n          || area(prevNode.getX(), prevNode.getY(), node.getX(), node.getY(), nextNode.getX(), nextNode.getY()) == 0) {\n        // Remove the node\n        removeNode(node);\n        node = end = prevNode;\n\n        if (node == nextNode) {\n          break;\n        }\n        continueIteration = true;\n      } else {\n        node = nextNode;\n      }\n    } while (continueIteration || node != end);\n    return end;\n  }\n\n","sourceOld":"  /** Eliminate colinear/duplicate points from the doubly linked list */\n  private static final Node filterPoints(final Node start, Node end) {\n    if (start == null) {\n      return start;\n    }\n\n    if(end == null) {\n      end = start;\n    }\n\n    Node node = start;\n    Node nextNode;\n    Node prevNode;\n    boolean continueIteration;\n\n    do {\n      continueIteration = false;\n      nextNode = node.next;\n      prevNode = node.previous;\n      if (node.isSteiner == false && isVertexEquals(node, nextNode)\n          || area(prevNode.getX(), prevNode.getY(), node.getX(), node.getY(), nextNode.getX(), nextNode.getY()) == 0) {\n        // Remove the node\n        removeNode(node);\n        node = end = prevNode;\n\n        if (node == nextNode) {\n          break;\n        }\n        continueIteration = true;\n      } else {\n        node = nextNode;\n      }\n    } while (continueIteration || node != end);\n    return end;\n  }\n\n","bugFix":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ed90f8ba7e7be13d155f954862178b23a324125","date":1568020603,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#filterPoints(Node,Node).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#filterPoints(Node,Node).mjava","sourceNew":"  /** Eliminate colinear/duplicate points from the doubly linked list */\n  private static final Node filterPoints(final Node start, Node end) {\n    if (start == null) {\n      return start;\n    }\n\n    if(end == null) {\n      end = start;\n    }\n\n    Node node = start;\n    Node nextNode;\n    Node prevNode;\n    boolean continueIteration;\n\n    do {\n      continueIteration = false;\n      nextNode = node.next;\n      prevNode = node.previous;\n      //We can filter points when they are the same, if not and they are co-linear we can only\n      //remove it if both edges have the same value in .isNextEdgeFromPolygon\n      if (isVertexEquals(node, nextNode)  ||\n          (prevNode.isNextEdgeFromPolygon == node.isNextEdgeFromPolygon &&\n              area(prevNode.getX(), prevNode.getY(), node.getX(), node.getY(), nextNode.getX(), nextNode.getY()) == 0)) {\n        // Remove the node\n        removeNode(node, prevNode.isNextEdgeFromPolygon);\n        node = end = prevNode;\n\n        if (node == nextNode) {\n          break;\n        }\n        continueIteration = true;\n      } else {\n        node = nextNode;\n      }\n    } while (continueIteration || node != end);\n    return end;\n  }\n\n","sourceOld":"  /** Eliminate colinear/duplicate points from the doubly linked list */\n  private static final Node filterPoints(final Node start, Node end) {\n    if (start == null) {\n      return start;\n    }\n\n    if(end == null) {\n      end = start;\n    }\n\n    Node node = start;\n    Node nextNode;\n    Node prevNode;\n    boolean continueIteration;\n\n    do {\n      continueIteration = false;\n      nextNode = node.next;\n      prevNode = node.previous;\n      if (isVertexEquals(node, nextNode)\n          || area(prevNode.getX(), prevNode.getY(), node.getX(), node.getY(), nextNode.getX(), nextNode.getY()) == 0) {\n        // Remove the node\n        removeNode(node);\n        node = end = prevNode;\n\n        if (node == nextNode) {\n          break;\n        }\n        continueIteration = true;\n      } else {\n        node = nextNode;\n      }\n    } while (continueIteration || node != end);\n    return end;\n  }\n\n","bugFix":null,"bugIntro":["eceee20589caeb7460b16920df2a241d3e801b90"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#filterPoints(Node,Node).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#filterPoints(Node,Node).mjava","sourceNew":"  /** Eliminate colinear/duplicate points from the doubly linked list */\n  private static final Node filterPoints(final Node start, Node end) {\n    if (start == null) {\n      return start;\n    }\n\n    if(end == null) {\n      end = start;\n    }\n\n    Node node = start;\n    Node nextNode;\n    Node prevNode;\n    boolean continueIteration;\n\n    do {\n      continueIteration = false;\n      nextNode = node.next;\n      prevNode = node.previous;\n      //We can filter points when they are the same, if not and they are co-linear we can only\n      //remove it if both edges have the same value in .isNextEdgeFromPolygon\n      if (isVertexEquals(node, nextNode)  ||\n          (prevNode.isNextEdgeFromPolygon == node.isNextEdgeFromPolygon &&\n              area(prevNode.getX(), prevNode.getY(), node.getX(), node.getY(), nextNode.getX(), nextNode.getY()) == 0)) {\n        // Remove the node\n        removeNode(node, prevNode.isNextEdgeFromPolygon);\n        node = end = prevNode;\n\n        if (node == nextNode) {\n          break;\n        }\n        continueIteration = true;\n      } else {\n        node = nextNode;\n      }\n    } while (continueIteration || node != end);\n    return end;\n  }\n\n","sourceOld":"  /** Eliminate colinear/duplicate points from the doubly linked list */\n  private static final Node filterPoints(final Node start, Node end) {\n    if (start == null) {\n      return start;\n    }\n\n    if(end == null) {\n      end = start;\n    }\n\n    Node node = start;\n    Node nextNode;\n    Node prevNode;\n    boolean continueIteration;\n\n    do {\n      continueIteration = false;\n      nextNode = node.next;\n      prevNode = node.previous;\n      //We can filter points when they are the same, if not and they are co-linear we can only\n      //remove it if both edges have the same value in .isNextEdgeFromPolygon\n      if (isVertexEquals(node, nextNode)  ||\n          (prevNode.isNextEdgeFromPolygon == node.isNextEdgeFromPolygon &&\n              area(prevNode.getX(), prevNode.getY(), node.getX(), node.getY(), nextNode.getX(), nextNode.getY()) == 0)) {\n        // Remove the node\n        removeNode(node, prevNode.isNextEdgeFromPolygon);\n        node = end = prevNode;\n\n        if (node == nextNode) {\n          break;\n        }\n        continueIteration = true;\n      } else {\n        node = nextNode;\n      }\n    } while (continueIteration || node != end);\n    return end;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["5ed90f8ba7e7be13d155f954862178b23a324125"],"5ed90f8ba7e7be13d155f954862178b23a324125":["af3d65dc4ed982e4cd039cdc714a74f15757fa53"],"af3d65dc4ed982e4cd039cdc714a74f15757fa53":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"]},"commit2Childs":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","af3d65dc4ed982e4cd039cdc714a74f15757fa53","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ed90f8ba7e7be13d155f954862178b23a324125":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"af3d65dc4ed982e4cd039cdc714a74f15757fa53":["5ed90f8ba7e7be13d155f954862178b23a324125"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}