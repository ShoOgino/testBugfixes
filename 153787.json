{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (sdoc != null) {\n          if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n          }\n          rb._responseDocs.set(sdoc.positionInResponse, doc);\n        }\n      }      \n    }\n  }\n\n","sourceOld":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (sdoc != null) {\n          if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n          }\n          rb._responseDocs.set(sdoc.positionInResponse, doc);\n        }\n      }      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (sdoc != null) {\n          if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n          }\n          rb._responseDocs.set(sdoc.positionInResponse, doc);\n        }\n      }      \n    }\n  }\n\n","sourceOld":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (sdoc != null) {\n          if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n          }\n          rb._responseDocs.set(sdoc.positionInResponse, doc);\n        }\n      }      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (sdoc != null) {\n          if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n          }\n          rb._responseDocs.set(sdoc.positionInResponse, doc);\n        }\n      }      \n    }\n  }\n\n","sourceOld":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (sdoc != null) {\n          if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n          }\n          rb._responseDocs.set(sdoc.positionInResponse, doc);\n        }\n      }      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccc08aa684aee4964baee0644a6ba047bfd70829","date":1316263707,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (sdoc != null) {\n          if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n          }\n          rb._responseDocs.set(sdoc.positionInResponse, doc);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (sdoc != null) {\n          if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n          }\n          rb._responseDocs.set(sdoc.positionInResponse, doc);\n        }\n      }      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a63520843c1d9af055af89fbaeb67eae848f28ae","date":1332870078,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (sdoc != null) {\n          if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n          }\n          if(removeKeyField) {\n            doc.removeFields(keyFieldName);\n          }\n          rb._responseDocs.set(sdoc.positionInResponse, doc);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (sdoc != null) {\n          if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n          }\n          rb._responseDocs.set(sdoc.positionInResponse, doc);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6446ce810056afd1a06b7a7239ec3cb3b65e31e","date":1393220603,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb._responseDocs.set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (sdoc != null) {\n          if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n          }\n          if(removeKeyField) {\n            doc.removeFields(keyFieldName);\n          }\n          rb._responseDocs.set(sdoc.positionInResponse, doc);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["a4aa1632edb30be45101a30485138211a97b2c5c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb._responseDocs.set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      assert(sreq.responses.size() == 1);\n      ShardResponse srsp = sreq.responses.get(0);\n      SolrDocumentList docs = (SolrDocumentList)srsp.getSolrResponse().getResponse().get(\"response\");\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (SolrDocument doc : docs) {\n        Object id = doc.getFieldValue(keyFieldName);\n        ShardDoc sdoc = rb.resultIds.get(id.toString());\n        if (sdoc != null) {\n          if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n          }\n          if(removeKeyField) {\n            doc.removeFields(keyFieldName);\n          }\n          rb._responseDocs.set(sdoc.positionInResponse, doc);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25b6cbab4dc52657a3a562c0c3f2886c683954f1","date":1397859026,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb._responseDocs.set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores && sdoc.score != null) {\n              doc.setField(\"score\", sdoc.score);\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb._responseDocs.set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1af881a1691e32ac2275b4008656709aa96e369","date":1404496493,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          // Don't try to get the documents if there was an exception in the shard\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              // Add the error to the shards info section if it wasn't added before\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb._responseDocs.set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb._responseDocs.set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"63050a64dea4ad92b4c30bd6b7008232038e5818","date":1417473851,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","sourceNew":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          // Don't try to get the documents if there was an exception in the shard\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              // Add the error to the shards info section if it wasn't added before\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              // Score might have been added (in createMainQuery) to shard-requests (and therefore in shard-response-docs)\n              // Remove score if the outer request did not ask for it returned\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb._responseDocs.set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          // Don't try to get the documents if there was an exception in the shard\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              // Add the error to the shards info section if it wasn't added before\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb._responseDocs.set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"35d59689803f4ad27f96148bb7c7167e373c6770","date":1454297137,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","sourceNew":"  protected void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          // Don't try to get the documents if there was an exception in the shard\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              // Add the error to the shards info section if it wasn't added before\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              // Score might have been added (in createMainQuery) to shard-requests (and therefore in shard-response-docs)\n              // Remove score if the outer request did not ask for it returned\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb.getResponseDocs().set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          // Don't try to get the documents if there was an exception in the shard\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              // Add the error to the shards info section if it wasn't added before\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              // Score might have been added (in createMainQuery) to shard-requests (and therefore in shard-response-docs)\n              // Remove score if the outer request did not ask for it returned\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb._responseDocs.set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","sourceNew":"  protected void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          // Don't try to get the documents if there was an exception in the shard\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              // Add the error to the shards info section if it wasn't added before\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              // Score might have been added (in createMainQuery) to shard-requests (and therefore in shard-response-docs)\n              // Remove score if the outer request did not ask for it returned\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb.getResponseDocs().set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          // Don't try to get the documents if there was an exception in the shard\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              // Add the error to the shards info section if it wasn't added before\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              // Score might have been added (in createMainQuery) to shard-requests (and therefore in shard-response-docs)\n              // Remove score if the outer request did not ask for it returned\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb._responseDocs.set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4aa1632edb30be45101a30485138211a97b2c5c","date":1472253048,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","sourceNew":"  protected void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n      if (rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName) != null) {\n        // if id was renamed we need to use the new name\n        keyFieldName = rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          // Don't try to get the documents if there was an exception in the shard\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              // Add the error to the shards info section if it wasn't added before\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              // Score might have been added (in createMainQuery) to shard-requests (and therefore in shard-response-docs)\n              // Remove score if the outer request did not ask for it returned\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb.getResponseDocs().set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          // Don't try to get the documents if there was an exception in the shard\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              // Add the error to the shards info section if it wasn't added before\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              // Score might have been added (in createMainQuery) to shard-requests (and therefore in shard-response-docs)\n              // Remove score if the outer request did not ask for it returned\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb.getResponseDocs().set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":["a6446ce810056afd1a06b7a7239ec3cb3b65e31e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","sourceNew":"  protected void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n      if (rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName) != null) {\n        // if id was renamed we need to use the new name\n        keyFieldName = rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          // Don't try to get the documents if there was an exception in the shard\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              // Add the error to the shards info section if it wasn't added before\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              // Score might have been added (in createMainQuery) to shard-requests (and therefore in shard-response-docs)\n              // Remove score if the outer request did not ask for it returned\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb.getResponseDocs().set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          // Don't try to get the documents if there was an exception in the shard\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              // Add the error to the shards info section if it wasn't added before\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              // Score might have been added (in createMainQuery) to shard-requests (and therefore in shard-response-docs)\n              // Remove score if the outer request did not ask for it returned\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb.getResponseDocs().set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","sourceNew":"  protected void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n      if (rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName) != null) {\n        // if id was renamed we need to use the new name\n        keyFieldName = rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          // Don't try to get the documents if there was an exception in the shard\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              // Add the error to the shards info section if it wasn't added before\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              // Score might have been added (in createMainQuery) to shard-requests (and therefore in shard-response-docs)\n              // Remove score if the outer request did not ask for it returned\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb.getResponseDocs().set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          // Don't try to get the documents if there was an exception in the shard\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              // Add the error to the shards info section if it wasn't added before\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              // Score might have been added (in createMainQuery) to shard-requests (and therefore in shard-response-docs)\n              // Remove score if the outer request did not ask for it returned\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb.getResponseDocs().set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3584d3db8b472772e3329d9d95d584b68ae997e","date":1551710517,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","sourceNew":"  protected void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n      if (rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName) != null) {\n        // if id was renamed we need to use the new name\n        keyFieldName = rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          // Don't try to get the documents if there was an exception in the shard\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              // Add the error to the shards info section if it wasn't added before\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        {\n          NamedList<?> responseHeader = (NamedList<?>)srsp.getSolrResponse().getResponse().get(\"responseHeader\");\n          if (responseHeader!=null && Boolean.TRUE.equals(responseHeader.getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY))) {\n            rb.rsp.getResponseHeader().asShallowMap()\n               .put(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY, Boolean.TRUE);\n          }\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              // Score might have been added (in createMainQuery) to shard-requests (and therefore in shard-response-docs)\n              // Remove score if the outer request did not ask for it returned\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb.getResponseDocs().set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n      if (rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName) != null) {\n        // if id was renamed we need to use the new name\n        keyFieldName = rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          // Don't try to get the documents if there was an exception in the shard\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              // Add the error to the shards info section if it wasn't added before\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              // Score might have been added (in createMainQuery) to shard-requests (and therefore in shard-response-docs)\n              // Remove score if the outer request did not ask for it returned\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb.getResponseDocs().set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["68f345f3b4bee014d571c564dac11b519febe85f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"68f345f3b4bee014d571c564dac11b519febe85f","date":1560355769,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#returnFields(ResponseBuilder,ShardRequest).mjava","sourceNew":"  protected void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n      if (rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName) != null) {\n        // if id was renamed we need to use the new name\n        keyFieldName = rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          // Don't try to get the documents if there was an exception in the shard\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              // Add the error to the shards info section if it wasn't added before\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        {\n          NamedList<?> responseHeader = (NamedList<?>)srsp.getSolrResponse().getResponse().get(\"responseHeader\");\n          if (Boolean.TRUE.equals(responseHeader.getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY))) {\n            rb.rsp.getResponseHeader().asShallowMap()\n               .put(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY, Boolean.TRUE);\n          }\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              // Score might have been added (in createMainQuery) to shard-requests (and therefore in shard-response-docs)\n              // Remove score if the outer request did not ask for it returned\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb.getResponseDocs().set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void returnFields(ResponseBuilder rb, ShardRequest sreq) {\n    // Keep in mind that this could also be a shard in a multi-tiered system.\n    // TODO: if a multi-tiered system, it seems like some requests\n    // could/should bypass middlemen (like retrieving stored fields)\n    // TODO: merge fsv to if requested\n\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n      String keyFieldName = rb.req.getSchema().getUniqueKeyField().getName();\n      boolean removeKeyField = !rb.rsp.getReturnFields().wantsField(keyFieldName);\n      if (rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName) != null) {\n        // if id was renamed we need to use the new name\n        keyFieldName = rb.rsp.getReturnFields().getFieldRenames().get(keyFieldName);\n      }\n\n      for (ShardResponse srsp : sreq.responses) {\n        if (srsp.getException() != null) {\n          // Don't try to get the documents if there was an exception in the shard\n          if(rb.req.getParams().getBool(ShardParams.SHARDS_INFO, false)) {\n            @SuppressWarnings(\"unchecked\")\n            NamedList<Object> shardInfo = (NamedList<Object>) rb.rsp.getValues().get(ShardParams.SHARDS_INFO);\n            @SuppressWarnings(\"unchecked\")\n            SimpleOrderedMap<Object> nl = (SimpleOrderedMap<Object>) shardInfo.get(srsp.getShard());\n            if (nl.get(\"error\") == null) {\n              // Add the error to the shards info section if it wasn't added before\n              Throwable t = srsp.getException();\n              if(t instanceof SolrServerException) {\n                t = ((SolrServerException)t).getCause();\n              }\n              nl.add(\"error\", t.toString() );\n              StringWriter trace = new StringWriter();\n              t.printStackTrace(new PrintWriter(trace));\n              nl.add(\"trace\", trace.toString() );\n            }\n          }\n          \n          continue;\n        }\n        {\n          NamedList<?> responseHeader = (NamedList<?>)srsp.getSolrResponse().getResponse().get(\"responseHeader\");\n          if (responseHeader!=null && Boolean.TRUE.equals(responseHeader.getBooleanArg(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY))) {\n            rb.rsp.getResponseHeader().asShallowMap()\n               .put(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY, Boolean.TRUE);\n          }\n        }\n        SolrDocumentList docs = (SolrDocumentList) srsp.getSolrResponse().getResponse().get(\"response\");\n        for (SolrDocument doc : docs) {\n          Object id = doc.getFieldValue(keyFieldName);\n          ShardDoc sdoc = rb.resultIds.get(id.toString());\n          if (sdoc != null) {\n            if (returnScores) {\n              doc.setField(\"score\", sdoc.score);\n            } else {\n              // Score might have been added (in createMainQuery) to shard-requests (and therefore in shard-response-docs)\n              // Remove score if the outer request did not ask for it returned\n              doc.remove(\"score\");\n            }\n            if (removeKeyField) {\n              doc.removeFields(keyFieldName);\n            }\n            rb.getResponseDocs().set(sdoc.positionInResponse, doc);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":["a3584d3db8b472772e3329d9d95d584b68ae997e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a63520843c1d9af055af89fbaeb67eae848f28ae":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["63050a64dea4ad92b4c30bd6b7008232038e5818","35d59689803f4ad27f96148bb7c7167e373c6770"],"a3584d3db8b472772e3329d9d95d584b68ae997e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["35d59689803f4ad27f96148bb7c7167e373c6770","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["a63520843c1d9af055af89fbaeb67eae848f28ae","a6446ce810056afd1a06b7a7239ec3cb3b65e31e"],"a6446ce810056afd1a06b7a7239ec3cb3b65e31e":["a63520843c1d9af055af89fbaeb67eae848f28ae"],"68f345f3b4bee014d571c564dac11b519febe85f":["a3584d3db8b472772e3329d9d95d584b68ae997e"],"a4aa1632edb30be45101a30485138211a97b2c5c":["35d59689803f4ad27f96148bb7c7167e373c6770"],"63050a64dea4ad92b4c30bd6b7008232038e5818":["c1af881a1691e32ac2275b4008656709aa96e369"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"25b6cbab4dc52657a3a562c0c3f2886c683954f1":["a6446ce810056afd1a06b7a7239ec3cb3b65e31e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["35d59689803f4ad27f96148bb7c7167e373c6770","a4aa1632edb30be45101a30485138211a97b2c5c"],"35d59689803f4ad27f96148bb7c7167e373c6770":["63050a64dea4ad92b4c30bd6b7008232038e5818"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68f345f3b4bee014d571c564dac11b519febe85f"],"c1af881a1691e32ac2275b4008656709aa96e369":["25b6cbab4dc52657a3a562c0c3f2886c683954f1"]},"commit2Childs":{"a63520843c1d9af055af89fbaeb67eae848f28ae":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","a6446ce810056afd1a06b7a7239ec3cb3b65e31e"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["a63520843c1d9af055af89fbaeb67eae848f28ae"],"c26f00b574427b55127e869b935845554afde1fa":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"a3584d3db8b472772e3329d9d95d584b68ae997e":["68f345f3b4bee014d571c564dac11b519febe85f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"a6446ce810056afd1a06b7a7239ec3cb3b65e31e":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","25b6cbab4dc52657a3a562c0c3f2886c683954f1"],"68f345f3b4bee014d571c564dac11b519febe85f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a4aa1632edb30be45101a30485138211a97b2c5c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"63050a64dea4ad92b4c30bd6b7008232038e5818":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","35d59689803f4ad27f96148bb7c7167e373c6770"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"25b6cbab4dc52657a3a562c0c3f2886c683954f1":["c1af881a1691e32ac2275b4008656709aa96e369"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a3584d3db8b472772e3329d9d95d584b68ae997e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"35d59689803f4ad27f96148bb7c7167e373c6770":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a4aa1632edb30be45101a30485138211a97b2c5c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"c1af881a1691e32ac2275b4008656709aa96e369":["63050a64dea4ad92b4c30bd6b7008232038e5818"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}