{"path":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","sourceNew":"  public void testSpansSkipTo() throws Exception {\n\t  SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  Spans s1 = t1.getSpans(searcher.getIndexReader());\n\t  Spans s2 = t2.getSpans(searcher.getIndexReader());\n\t  \n\t  assertTrue(s1.next());\n\t  assertTrue(s2.next());\n\t  \n\t  boolean hasMore = true;\n\t  \n\t  do {\n\t\t  hasMore = skipToAccoringToJavaDocs(s1, s1.doc());\n\t\t  assertEquals(hasMore, s2.skipTo(s2.doc()));\n\t\t  assertEquals(s1.doc(), s2.doc());\n\t  } while (hasMore);\n  }\n\n","sourceOld":"  public void testSpansSkipTo() throws Exception {\n\t  SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  Spans s1 = t1.getSpans(searcher.getIndexReader());\n\t  Spans s2 = t2.getSpans(searcher.getIndexReader());\n\t  \n\t  assertTrue(s1.next());\n\t  assertTrue(s2.next());\n\t  \n\t  boolean hasMore = true;\n\t  \n\t  do {\n\t\t  hasMore = skipToAccoringToJavaDocs(s1, s1.doc());\n\t\t  assertEquals(hasMore, s2.skipTo(s2.doc()));\n\t\t  assertEquals(s1.doc(), s2.doc());\n\t  } while (hasMore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"150488c1317972164a9a824be05b1ba2ba0fc68c","date":1284316090,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","sourceNew":"  @Test\n  public void testSpansSkipTo() throws Exception {\n\t  SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  Spans s1 = t1.getSpans(searcher.getIndexReader());\n\t  Spans s2 = t2.getSpans(searcher.getIndexReader());\n\t  \n\t  assertTrue(s1.next());\n\t  assertTrue(s2.next());\n\t  \n\t  boolean hasMore = true;\n\t  \n\t  do {\n\t\t  hasMore = skipToAccoringToJavaDocs(s1, s1.doc());\n\t\t  assertEquals(hasMore, s2.skipTo(s2.doc()));\n\t\t  assertEquals(s1.doc(), s2.doc());\n\t  } while (hasMore);\n  }\n\n","sourceOld":"  public void testSpansSkipTo() throws Exception {\n\t  SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  Spans s1 = t1.getSpans(searcher.getIndexReader());\n\t  Spans s2 = t2.getSpans(searcher.getIndexReader());\n\t  \n\t  assertTrue(s1.next());\n\t  assertTrue(s2.next());\n\t  \n\t  boolean hasMore = true;\n\t  \n\t  do {\n\t\t  hasMore = skipToAccoringToJavaDocs(s1, s1.doc());\n\t\t  assertEquals(hasMore, s2.skipTo(s2.doc()));\n\t\t  assertEquals(s1.doc(), s2.doc());\n\t  } while (hasMore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e454a2545d2cb65a99044886565f39373be24796","date":1291079172,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","sourceNew":"  @Test\n  public void testSpansSkipTo() throws Exception {\n\t  SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  Spans s1 = t1.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n\t  Spans s2 = t2.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n\t  \n\t  assertTrue(s1.next());\n\t  assertTrue(s2.next());\n\t  \n\t  boolean hasMore = true;\n\t  \n\t  do {\n\t\t  hasMore = skipToAccoringToJavaDocs(s1, s1.doc());\n\t\t  assertEquals(hasMore, s2.skipTo(s2.doc()));\n\t\t  assertEquals(s1.doc(), s2.doc());\n\t  } while (hasMore);\n  }\n\n","sourceOld":"  @Test\n  public void testSpansSkipTo() throws Exception {\n\t  SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  Spans s1 = t1.getSpans(searcher.getIndexReader());\n\t  Spans s2 = t2.getSpans(searcher.getIndexReader());\n\t  \n\t  assertTrue(s1.next());\n\t  assertTrue(s2.next());\n\t  \n\t  boolean hasMore = true;\n\t  \n\t  do {\n\t\t  hasMore = skipToAccoringToJavaDocs(s1, s1.doc());\n\t\t  assertEquals(hasMore, s2.skipTo(s2.doc()));\n\t\t  assertEquals(s1.doc(), s2.doc());\n\t  } while (hasMore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","sourceNew":"  @Test\n  public void testSpansSkipTo() throws Exception {\n\t  SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  Spans s1 = t1.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n\t  Spans s2 = t2.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n\t  \n\t  assertTrue(s1.next());\n\t  assertTrue(s2.next());\n\t  \n\t  boolean hasMore = true;\n\t  \n\t  do {\n\t\t  hasMore = skipToAccoringToJavaDocs(s1, s1.doc());\n\t\t  assertEquals(hasMore, s2.skipTo(s2.doc()));\n\t\t  assertEquals(s1.doc(), s2.doc());\n\t  } while (hasMore);\n  }\n\n","sourceOld":"  @Test\n  public void testSpansSkipTo() throws Exception {\n\t  SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  Spans s1 = t1.getSpans(searcher.getIndexReader());\n\t  Spans s2 = t2.getSpans(searcher.getIndexReader());\n\t  \n\t  assertTrue(s1.next());\n\t  assertTrue(s2.next());\n\t  \n\t  boolean hasMore = true;\n\t  \n\t  do {\n\t\t  hasMore = skipToAccoringToJavaDocs(s1, s1.doc());\n\t\t  assertEquals(hasMore, s2.skipTo(s2.doc()));\n\t\t  assertEquals(s1.doc(), s2.doc());\n\t  } while (hasMore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","sourceNew":"  @Test\n  public void testSpansSkipTo() throws Exception {\n\t  SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  Spans s1 = t1.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n\t  Spans s2 = t2.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n\t  \n\t  assertTrue(s1.next());\n\t  assertTrue(s2.next());\n\t  \n\t  boolean hasMore = true;\n\t  \n\t  do {\n\t\t  hasMore = skipToAccoringToJavaDocs(s1, s1.doc());\n\t\t  assertEquals(hasMore, s2.skipTo(s2.doc()));\n\t\t  assertEquals(s1.doc(), s2.doc());\n\t  } while (hasMore);\n  }\n\n","sourceOld":"  public void testSpansSkipTo() throws Exception {\n\t  SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  Spans s1 = t1.getSpans(searcher.getIndexReader());\n\t  Spans s2 = t2.getSpans(searcher.getIndexReader());\n\t  \n\t  assertTrue(s1.next());\n\t  assertTrue(s2.next());\n\t  \n\t  boolean hasMore = true;\n\t  \n\t  do {\n\t\t  hasMore = skipToAccoringToJavaDocs(s1, s1.doc());\n\t\t  assertEquals(hasMore, s2.skipTo(s2.doc()));\n\t\t  assertEquals(s1.doc(), s2.doc());\n\t  } while (hasMore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","sourceNew":"  @Test\n  public void testSpansSkipTo() throws Exception {\n\t  SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  Spans s1 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t1);\n\t  Spans s2 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t2);\n\t  \n\t  assertTrue(s1.next());\n\t  assertTrue(s2.next());\n\t  \n\t  boolean hasMore = true;\n\t  \n\t  do {\n\t\t  hasMore = skipToAccoringToJavaDocs(s1, s1.doc());\n\t\t  assertEquals(hasMore, s2.skipTo(s2.doc()));\n\t\t  assertEquals(s1.doc(), s2.doc());\n\t  } while (hasMore);\n  }\n\n","sourceOld":"  @Test\n  public void testSpansSkipTo() throws Exception {\n\t  SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  Spans s1 = t1.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n\t  Spans s2 = t2.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n\t  \n\t  assertTrue(s1.next());\n\t  assertTrue(s2.next());\n\t  \n\t  boolean hasMore = true;\n\t  \n\t  do {\n\t\t  hasMore = skipToAccoringToJavaDocs(s1, s1.doc());\n\t\t  assertEquals(hasMore, s2.skipTo(s2.doc()));\n\t\t  assertEquals(s1.doc(), s2.doc());\n\t  } while (hasMore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","sourceNew":"  @Test\n  public void testSpansSkipTo() throws Exception {\n\t  SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  Spans s1 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t1);\n\t  Spans s2 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t2);\n\t  \n\t  assertTrue(s1.next());\n\t  assertTrue(s2.next());\n\t  \n\t  boolean hasMore = true;\n\t  \n\t  do {\n\t\t  hasMore = skipToAccoringToJavaDocs(s1, s1.doc());\n\t\t  assertEquals(hasMore, s2.skipTo(s2.doc()));\n\t\t  assertEquals(s1.doc(), s2.doc());\n\t  } while (hasMore);\n  }\n\n","sourceOld":"  @Test\n  public void testSpansSkipTo() throws Exception {\n\t  SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  Spans s1 = t1.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n\t  Spans s2 = t2.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n\t  \n\t  assertTrue(s1.next());\n\t  assertTrue(s2.next());\n\t  \n\t  boolean hasMore = true;\n\t  \n\t  do {\n\t\t  hasMore = skipToAccoringToJavaDocs(s1, s1.doc());\n\t\t  assertEquals(hasMore, s2.skipTo(s2.doc()));\n\t\t  assertEquals(s1.doc(), s2.doc());\n\t  } while (hasMore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","sourceNew":"  @Test\n  public void testSpansSkipTo() throws Exception {\n\t  SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  Spans s1 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t1);\n\t  Spans s2 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t2);\n\t  \n\t  assertTrue(s1.next());\n\t  assertTrue(s2.next());\n\t  \n\t  boolean hasMore = true;\n\t  \n\t  do {\n\t\t  hasMore = skipToAccoringToJavaDocs(s1, s1.doc());\n\t\t  assertEquals(hasMore, s2.skipTo(s2.doc()));\n\t\t  assertEquals(s1.doc(), s2.doc());\n\t  } while (hasMore);\n  }\n\n","sourceOld":"  @Test\n  public void testSpansSkipTo() throws Exception {\n\t  SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  Spans s1 = t1.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n\t  Spans s2 = t2.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n\t  \n\t  assertTrue(s1.next());\n\t  assertTrue(s2.next());\n\t  \n\t  boolean hasMore = true;\n\t  \n\t  do {\n\t\t  hasMore = skipToAccoringToJavaDocs(s1, s1.doc());\n\t\t  assertEquals(hasMore, s2.skipTo(s2.doc()));\n\t\t  assertEquals(s1.doc(), s2.doc());\n\t  } while (hasMore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","sourceNew":"  @Test\n  public void testSpansSkipTo() throws Exception {\n\t  SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  Spans s1 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t1);\n\t  Spans s2 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t2);\n\t  \n\t  assertTrue(s1.next());\n\t  assertTrue(s2.next());\n\t  \n\t  boolean hasMore = true;\n\t  \n\t  do {\n\t\t  hasMore = skipToAccoringToJavaDocs(s1, s1.doc());\n\t\t  assertEquals(hasMore, s2.skipTo(s2.doc()));\n\t\t  assertEquals(s1.doc(), s2.doc());\n\t  } while (hasMore);\n  }\n\n","sourceOld":"  @Test\n  public void testSpansSkipTo() throws Exception {\n\t  SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  Spans s1 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t1);\n\t  Spans s2 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t2);\n\t  \n\t  assertTrue(s1.next());\n\t  assertTrue(s2.next());\n\t  \n\t  boolean hasMore = true;\n\t  \n\t  do {\n\t\t  hasMore = skipToAccoringToJavaDocs(s1, s1.doc());\n\t\t  assertEquals(hasMore, s2.skipTo(s2.doc()));\n\t\t  assertEquals(s1.doc(), s2.doc());\n\t  } while (hasMore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8323d210478d76a02372693d254b69aac614689":["e454a2545d2cb65a99044886565f39373be24796"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c8323d210478d76a02372693d254b69aac614689"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","c8323d210478d76a02372693d254b69aac614689"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e454a2545d2cb65a99044886565f39373be24796":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","e454a2545d2cb65a99044886565f39373be24796"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3bb13258feba31ab676502787ab2e1779f129b7a":["150488c1317972164a9a824be05b1ba2ba0fc68c","e454a2545d2cb65a99044886565f39373be24796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c8323d210478d76a02372693d254b69aac614689"]},"commit2Childs":{"c8323d210478d76a02372693d254b69aac614689":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e454a2545d2cb65a99044886565f39373be24796":["c8323d210478d76a02372693d254b69aac614689","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["e454a2545d2cb65a99044886565f39373be24796","3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","150488c1317972164a9a824be05b1ba2ba0fc68c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}