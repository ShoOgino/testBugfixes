{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechStemmer#normalize(char[],int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechStemmer#normalize(char[],int).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechStemmer#normalize(char[],int).mjava","sourceNew":"  private int normalize(char s[], int len) {\n    if (endsWith(s, len, \"čt\")) { // čt -> ck\n      s[len - 2] = 'c';\n      s[len - 1] = 'k';\n      return len;\n    }\n    \n    if (endsWith(s, len, \"št\")) { // št -> sk\n      s[len - 2] = 's';\n      s[len - 1] = 'k';\n      return len;\n    }\n    \n    switch(s[len - 1]) {\n      case 'c': // [cč] -> k\n      case 'č':\n        s[len - 1] = 'k';\n        return len;\n      case 'z': // [zž] -> h\n      case 'ž':\n        s[len - 1] = 'h';\n        return len;\n    }\n    \n    if (len > 1 && s[len - 2] == 'e') {\n      s[len - 2] = s[len - 1]; // e* > *\n      return len - 1;\n    }\n    \n    if (len > 2 && s[len - 2] == 'ů') {\n      s[len - 2] = 'o'; // *ů* -> *o*\n      return len;\n    }\n\n    return len;\n  }\n\n","sourceOld":"  private int normalize(char s[], int len) {\n    if (endsWith(s, len, \"čt\")) { // čt -> ck\n      s[len - 2] = 'c';\n      s[len - 1] = 'k';\n      return len;\n    }\n    \n    if (endsWith(s, len, \"št\")) { // št -> sk\n      s[len - 2] = 's';\n      s[len - 1] = 'k';\n      return len;\n    }\n    \n    switch(s[len - 1]) {\n      case 'c': // [cč] -> k\n      case 'č':\n        s[len - 1] = 'k';\n        return len;\n      case 'z': // [zž] -> h\n      case 'ž':\n        s[len - 1] = 'h';\n        return len;\n    }\n    \n    if (len > 1 && s[len - 2] == 'e') {\n      s[len - 2] = s[len - 1]; // e* > *\n      return len - 1;\n    }\n    \n    if (len > 2 && s[len - 2] == 'ů') {\n      s[len - 2] = 'o'; // *ů* -> *o*\n      return len;\n    }\n\n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/cz/CzechStemmer#normalize(char[],int).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/cz/CzechStemmer#normalize(char[],int).mjava","sourceNew":"  private int normalize(char s[], int len) {\n    if (endsWith(s, len, \"čt\")) { // čt -> ck\n      s[len - 2] = 'c';\n      s[len - 1] = 'k';\n      return len;\n    }\n    \n    if (endsWith(s, len, \"št\")) { // št -> sk\n      s[len - 2] = 's';\n      s[len - 1] = 'k';\n      return len;\n    }\n    \n    switch(s[len - 1]) {\n      case 'c': // [cč] -> k\n      case 'č':\n        s[len - 1] = 'k';\n        return len;\n      case 'z': // [zž] -> h\n      case 'ž':\n        s[len - 1] = 'h';\n        return len;\n    }\n    \n    if (len > 1 && s[len - 2] == 'e') {\n      s[len - 2] = s[len - 1]; // e* > *\n      return len - 1;\n    }\n    \n    if (len > 2 && s[len - 2] == 'ů') {\n      s[len - 2] = 'o'; // *ů* -> *o*\n      return len;\n    }\n\n    return len;\n  }\n\n","sourceOld":"  private int normalize(char s[], int len) {\n    if (endsWith(s, len, \"čt\")) { // čt -> ck\n      s[len - 2] = 'c';\n      s[len - 1] = 'k';\n      return len;\n    }\n    \n    if (endsWith(s, len, \"št\")) { // št -> sk\n      s[len - 2] = 's';\n      s[len - 1] = 'k';\n      return len;\n    }\n    \n    switch(s[len - 1]) {\n      case 'c': // [cč] -> k\n      case 'č':\n        s[len - 1] = 'k';\n        return len;\n      case 'z': // [zž] -> h\n      case 'ž':\n        s[len - 1] = 'h';\n        return len;\n    }\n    \n    if (len > 1 && s[len - 2] == 'e') {\n      s[len - 2] = s[len - 1]; // e* > *\n      return len - 1;\n    }\n    \n    if (len > 2 && s[len - 2] == 'ů') {\n      s[len - 2] = 'o'; // *ů* -> *o*\n      return len;\n    }\n\n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}