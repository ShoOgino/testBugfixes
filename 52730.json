{"path":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testXML().mjava","commits":[{"id":"637a392e2e05d4e1179ac3c532cfeef0cde977ba","date":1376347977,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testXML().mjava","pathOld":"/dev/null","sourceNew":"  //This is the same as testSolrJXML above but uses the XMLLoader\n  // to illustrate the structure of the XML documents\n  @Test\n  public void testXML() throws IOException, XMLStreamException {\n    UpdateRequest req = new UpdateRequest();\n    \n List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    \n \n    String xml_doc1 =\n    \"<doc >\" +\n      \"  <field name=\\\"id\\\">1</field>\" +\n      \"  <field name=\\\"parent_s\\\">X</field>\" +\n         \"<doc>  \" +\n         \"  <field name=\\\"id\\\" >2</field>\" +\n         \"  <field name=\\\"child_s\\\">y</field>\" +\n         \"</doc>\"+\n         \"<doc>  \" +\n         \"  <field name=\\\"id\\\" >3</field>\" +\n         \"  <field name=\\\"child_s\\\">z</field>\" +\n         \"</doc>\"+\n    \"</doc>\";\n\n    String xml_doc2 =\n        \"<doc >\" +\n          \"  <field name=\\\"id\\\">4</field>\" +\n          \"  <field name=\\\"parent_s\\\">A</field>\" +\n             \"<doc>  \" +\n             \"  <field name=\\\"id\\\" >5</field>\" +\n             \"  <field name=\\\"child_s\\\">b</field>\" +\n             \"</doc>\"+\n             \"<doc>  \" +\n             \"  <field name=\\\"id\\\" >6</field>\" +\n             \"  <field name=\\\"child_s\\\">c</field>\" +\n             \"</doc>\"+\n        \"</doc>\";\n\n    \n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml_doc1 ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader();\n    SolrInputDocument document1 = loader.readDoc( parser );\n  \n    XMLStreamReader parser2 = \n        inputFactory.createXMLStreamReader( new StringReader( xml_doc2 ) );\n      parser2.next(); // read the START document...\n      //null for the processor is all right here\n      //XMLLoader loader = new XMLLoader();\n      SolrInputDocument document2 = loader.readDoc( parser2 );\n    \n    \n    docs.add(document1);\n    docs.add(document2);\n    \n    Collections.shuffle(docs, random());\n    req.add(docs);\n    \n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n       \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testXML().mjava","pathOld":"/dev/null","sourceNew":"  //This is the same as testSolrJXML above but uses the XMLLoader\n  // to illustrate the structure of the XML documents\n  @Test\n  public void testXML() throws IOException, XMLStreamException {\n    UpdateRequest req = new UpdateRequest();\n    \n List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    \n \n    String xml_doc1 =\n    \"<doc >\" +\n      \"  <field name=\\\"id\\\">1</field>\" +\n      \"  <field name=\\\"parent_s\\\">X</field>\" +\n         \"<doc>  \" +\n         \"  <field name=\\\"id\\\" >2</field>\" +\n         \"  <field name=\\\"child_s\\\">y</field>\" +\n         \"</doc>\"+\n         \"<doc>  \" +\n         \"  <field name=\\\"id\\\" >3</field>\" +\n         \"  <field name=\\\"child_s\\\">z</field>\" +\n         \"</doc>\"+\n    \"</doc>\";\n\n    String xml_doc2 =\n        \"<doc >\" +\n          \"  <field name=\\\"id\\\">4</field>\" +\n          \"  <field name=\\\"parent_s\\\">A</field>\" +\n             \"<doc>  \" +\n             \"  <field name=\\\"id\\\" >5</field>\" +\n             \"  <field name=\\\"child_s\\\">b</field>\" +\n             \"</doc>\"+\n             \"<doc>  \" +\n             \"  <field name=\\\"id\\\" >6</field>\" +\n             \"  <field name=\\\"child_s\\\">c</field>\" +\n             \"</doc>\"+\n        \"</doc>\";\n\n    \n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml_doc1 ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader();\n    SolrInputDocument document1 = loader.readDoc( parser );\n  \n    XMLStreamReader parser2 = \n        inputFactory.createXMLStreamReader( new StringReader( xml_doc2 ) );\n      parser2.next(); // read the START document...\n      //null for the processor is all right here\n      //XMLLoader loader = new XMLLoader();\n      SolrInputDocument document2 = loader.readDoc( parser2 );\n    \n    \n    docs.add(document1);\n    docs.add(document2);\n    \n    Collections.shuffle(docs, random());\n    req.add(docs);\n    \n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n       \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testXML().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testXML().mjava","sourceNew":"  //This is the same as testSolrJXML above but uses the XMLLoader\n  // to illustrate the structure of the XML documents\n  @Test\n  public void testXML() throws IOException, XMLStreamException {\n    UpdateRequest req = new UpdateRequest();\n    \n List<SolrInputDocument> docs = new ArrayList<>();\n    \n \n    String xml_doc1 =\n    \"<doc >\" +\n      \"  <field name=\\\"id\\\">1</field>\" +\n      \"  <field name=\\\"parent_s\\\">X</field>\" +\n         \"<doc>  \" +\n         \"  <field name=\\\"id\\\" >2</field>\" +\n         \"  <field name=\\\"child_s\\\">y</field>\" +\n         \"</doc>\"+\n         \"<doc>  \" +\n         \"  <field name=\\\"id\\\" >3</field>\" +\n         \"  <field name=\\\"child_s\\\">z</field>\" +\n         \"</doc>\"+\n    \"</doc>\";\n\n    String xml_doc2 =\n        \"<doc >\" +\n          \"  <field name=\\\"id\\\">4</field>\" +\n          \"  <field name=\\\"parent_s\\\">A</field>\" +\n             \"<doc>  \" +\n             \"  <field name=\\\"id\\\" >5</field>\" +\n             \"  <field name=\\\"child_s\\\">b</field>\" +\n             \"</doc>\"+\n             \"<doc>  \" +\n             \"  <field name=\\\"id\\\" >6</field>\" +\n             \"  <field name=\\\"child_s\\\">c</field>\" +\n             \"</doc>\"+\n        \"</doc>\";\n\n    \n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml_doc1 ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader();\n    SolrInputDocument document1 = loader.readDoc( parser );\n  \n    XMLStreamReader parser2 = \n        inputFactory.createXMLStreamReader( new StringReader( xml_doc2 ) );\n      parser2.next(); // read the START document...\n      //null for the processor is all right here\n      //XMLLoader loader = new XMLLoader();\n      SolrInputDocument document2 = loader.readDoc( parser2 );\n    \n    \n    docs.add(document1);\n    docs.add(document2);\n    \n    Collections.shuffle(docs, random());\n    req.add(docs);\n    \n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n       \n  }\n\n","sourceOld":"  //This is the same as testSolrJXML above but uses the XMLLoader\n  // to illustrate the structure of the XML documents\n  @Test\n  public void testXML() throws IOException, XMLStreamException {\n    UpdateRequest req = new UpdateRequest();\n    \n List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    \n \n    String xml_doc1 =\n    \"<doc >\" +\n      \"  <field name=\\\"id\\\">1</field>\" +\n      \"  <field name=\\\"parent_s\\\">X</field>\" +\n         \"<doc>  \" +\n         \"  <field name=\\\"id\\\" >2</field>\" +\n         \"  <field name=\\\"child_s\\\">y</field>\" +\n         \"</doc>\"+\n         \"<doc>  \" +\n         \"  <field name=\\\"id\\\" >3</field>\" +\n         \"  <field name=\\\"child_s\\\">z</field>\" +\n         \"</doc>\"+\n    \"</doc>\";\n\n    String xml_doc2 =\n        \"<doc >\" +\n          \"  <field name=\\\"id\\\">4</field>\" +\n          \"  <field name=\\\"parent_s\\\">A</field>\" +\n             \"<doc>  \" +\n             \"  <field name=\\\"id\\\" >5</field>\" +\n             \"  <field name=\\\"child_s\\\">b</field>\" +\n             \"</doc>\"+\n             \"<doc>  \" +\n             \"  <field name=\\\"id\\\" >6</field>\" +\n             \"  <field name=\\\"child_s\\\">c</field>\" +\n             \"</doc>\"+\n        \"</doc>\";\n\n    \n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml_doc1 ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader();\n    SolrInputDocument document1 = loader.readDoc( parser );\n  \n    XMLStreamReader parser2 = \n        inputFactory.createXMLStreamReader( new StringReader( xml_doc2 ) );\n      parser2.next(); // read the START document...\n      //null for the processor is all right here\n      //XMLLoader loader = new XMLLoader();\n      SolrInputDocument document2 = loader.readDoc( parser2 );\n    \n    \n    docs.add(document1);\n    docs.add(document2);\n    \n    Collections.shuffle(docs, random());\n    req.add(docs);\n    \n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n       \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1a5eff758fefcac883606f32579ae501a14119","date":1553516101,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testXML().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testXML().mjava","sourceNew":"  //This is the same as testSolrJXML above but uses the XMLLoader\n  // to illustrate the structure of the XML documents\n  @Test\n  public void testXML() throws IOException, XMLStreamException {\n    UpdateRequest req = new UpdateRequest();\n\n    List<SolrInputDocument> docs = new ArrayList<>();\n\n    String xml_doc1 =\n    \"<doc >\" +\n      \"  <field name=\\\"id\\\">1</field>\" +\n      \"  <field name=\\\"parent_s\\\">X</field>\" +\n         \"<doc>  \" +\n         \"  <field name=\\\"id\\\" >2</field>\" +\n         \"  <field name=\\\"child_s\\\">y</field>\" +\n         \"</doc>\"+\n         \"<doc>  \" +\n         \"  <field name=\\\"id\\\" >3</field>\" +\n         \"  <field name=\\\"child_s\\\">z</field>\" +\n         \"</doc>\"+\n    \"</doc>\";\n\n    String xml_doc2 =\n        \"<doc >\" +\n          \"  <field name=\\\"id\\\">4</field>\" +\n          \"  <field name=\\\"parent_s\\\">A</field>\" +\n             \"<doc>  \" +\n             \"  <field name=\\\"id\\\" >5</field>\" +\n             \"  <field name=\\\"child_s\\\">b</field>\" +\n             \"</doc>\"+\n             \"<doc>  \" +\n             \"  <field name=\\\"id\\\" >6</field>\" +\n             \"  <field name=\\\"child_s\\\">c</field>\" +\n             \"</doc>\"+\n        \"</doc>\";\n\n\n    XMLStreamReader parser =\n      inputFactory.createXMLStreamReader( new StringReader( xml_doc1 ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader();\n    SolrInputDocument document1 = loader.readDoc( parser );\n\n    XMLStreamReader parser2 =\n        inputFactory.createXMLStreamReader( new StringReader( xml_doc2 ) );\n      parser2.next(); // read the START document...\n      //null for the processor is all right here\n      //XMLLoader loader = new XMLLoader();\n      SolrInputDocument document2 = loader.readDoc( parser2 );\n\n    docs.add(document1);\n    docs.add(document2);\n\n    Collections.shuffle(docs, random());\n    req.add(docs);\n\n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n\n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n  }\n\n","sourceOld":"  //This is the same as testSolrJXML above but uses the XMLLoader\n  // to illustrate the structure of the XML documents\n  @Test\n  public void testXML() throws IOException, XMLStreamException {\n    UpdateRequest req = new UpdateRequest();\n    \n List<SolrInputDocument> docs = new ArrayList<>();\n    \n \n    String xml_doc1 =\n    \"<doc >\" +\n      \"  <field name=\\\"id\\\">1</field>\" +\n      \"  <field name=\\\"parent_s\\\">X</field>\" +\n         \"<doc>  \" +\n         \"  <field name=\\\"id\\\" >2</field>\" +\n         \"  <field name=\\\"child_s\\\">y</field>\" +\n         \"</doc>\"+\n         \"<doc>  \" +\n         \"  <field name=\\\"id\\\" >3</field>\" +\n         \"  <field name=\\\"child_s\\\">z</field>\" +\n         \"</doc>\"+\n    \"</doc>\";\n\n    String xml_doc2 =\n        \"<doc >\" +\n          \"  <field name=\\\"id\\\">4</field>\" +\n          \"  <field name=\\\"parent_s\\\">A</field>\" +\n             \"<doc>  \" +\n             \"  <field name=\\\"id\\\" >5</field>\" +\n             \"  <field name=\\\"child_s\\\">b</field>\" +\n             \"</doc>\"+\n             \"<doc>  \" +\n             \"  <field name=\\\"id\\\" >6</field>\" +\n             \"  <field name=\\\"child_s\\\">c</field>\" +\n             \"</doc>\"+\n        \"</doc>\";\n\n    \n    XMLStreamReader parser = \n      inputFactory.createXMLStreamReader( new StringReader( xml_doc1 ) );\n    parser.next(); // read the START document...\n    //null for the processor is all right here\n    XMLLoader loader = new XMLLoader();\n    SolrInputDocument document1 = loader.readDoc( parser );\n  \n    XMLStreamReader parser2 = \n        inputFactory.createXMLStreamReader( new StringReader( xml_doc2 ) );\n      parser2.next(); // read the START document...\n      //null for the processor is all right here\n      //XMLLoader loader = new XMLLoader();\n      SolrInputDocument document2 = loader.readDoc( parser2 );\n    \n    \n    docs.add(document1);\n    docs.add(document2);\n    \n    Collections.shuffle(docs, random());\n    req.add(docs);\n    \n    RequestWriter requestWriter = new RequestWriter();\n    OutputStream os = new ByteArrayOutputStream();\n    requestWriter.write(req, os);\n    assertBlockU(os.toString());\n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertSingleParentOf(searcher, one(\"yz\"), \"X\");\n    assertSingleParentOf(searcher, one(\"bc\"), \"A\");\n       \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb1a5eff758fefcac883606f32579ae501a14119":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb1a5eff758fefcac883606f32579ae501a14119"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bb1a5eff758fefcac883606f32579ae501a14119"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"bb1a5eff758fefcac883606f32579ae501a14119":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}