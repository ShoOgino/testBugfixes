{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","sourceNew":"  @Test\n  public void testDistributed() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    // Add to core0\n    doc.setField( \"id\", \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore0() );\n    up.clear();\n\n    // Add to core1\n    doc.setField( \"id\", \"core1\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"*:*\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 1, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Distributed\n    String baseURL = \"localhost:\"+port+context+\"/\";\n    q = new SolrQuery( \"*:*\" );\n    q.set( ShardParams.SHARDS, baseURL+\"core0,\"+baseURL+\"core1\" );\n    q.set( \"fl\", \"id,s:[shard]\" );\n    r = new QueryRequest( q );\n    SolrDocumentList docs = r.process( getSolrCore0() ).getResults();\n    assertEquals( 2, docs.size() );\n    for( SolrDocument d : docs ) {\n      String id = (String)d.get(\"id\");\n      String shard = (String)d.get(\"s\");\n      assertEquals(baseURL+id, shard); // The shard ends with the core name\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDistributed() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    // Add to core0\n    doc.setField( \"id\", \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore0() );\n    up.clear();\n\n    // Add to core1\n    doc.setField( \"id\", \"core1\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"*:*\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 1, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Distributed\n    String baseURL = \"localhost:\"+port+context+\"/\";\n    q = new SolrQuery( \"*:*\" );\n    q.set( ShardParams.SHARDS, baseURL+\"core0,\"+baseURL+\"core1\" );\n    q.set( \"fl\", \"id,s:[shard]\" );\n    r = new QueryRequest( q );\n    SolrDocumentList docs = r.process( getSolrCore0() ).getResults();\n    assertEquals( 2, docs.size() );\n    for( SolrDocument d : docs ) {\n      String id = (String)d.get(\"id\");\n      String shard = (String)d.get(\"s\");\n      assertEquals(baseURL+id, shard); // The shard ends with the core name\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","sourceNew":"  @Test\n  public void testDistributed() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    // Add to core0\n    doc.setField( \"id\", \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore0() );\n    up.clear();\n\n    // Add to core1\n    doc.setField( \"id\", \"core1\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"*:*\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 1, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Distributed\n    String baseURL = \"localhost:\"+port+context+\"/\";\n    q = new SolrQuery( \"*:*\" );\n    q.set( ShardParams.SHARDS, baseURL+\"core0,\"+baseURL+\"core1\" );\n    q.set( \"fl\", \"id,s:[shard]\" );\n    r = new QueryRequest( q );\n    SolrDocumentList docs = r.process( getSolrCore0() ).getResults();\n    assertEquals( 2, docs.size() );\n    for( SolrDocument d : docs ) {\n      String id = (String)d.get(\"id\");\n      String shard = (String)d.get(\"s\");\n      assertEquals(baseURL+id, shard); // The shard ends with the core name\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDistributed() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    // Add to core0\n    doc.setField( \"id\", \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore0() );\n    up.clear();\n\n    // Add to core1\n    doc.setField( \"id\", \"core1\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"*:*\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 1, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Distributed\n    String baseURL = \"localhost:\"+port+context+\"/\";\n    q = new SolrQuery( \"*:*\" );\n    q.set( ShardParams.SHARDS, baseURL+\"core0,\"+baseURL+\"core1\" );\n    q.set( \"fl\", \"id,s:[shard]\" );\n    r = new QueryRequest( q );\n    SolrDocumentList docs = r.process( getSolrCore0() ).getResults();\n    assertEquals( 2, docs.size() );\n    for( SolrDocument d : docs ) {\n      String id = (String)d.get(\"id\");\n      String shard = (String)d.get(\"s\");\n      assertEquals(baseURL+id, shard); // The shard ends with the core name\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","sourceNew":"  @Test\n  public void testDistributed() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    // Add to core0\n    doc.setField( \"id\", \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore0() );\n    up.clear();\n\n    // Add to core1\n    doc.setField( \"id\", \"core1\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"*:*\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 1, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Distributed\n    String baseURL = \"localhost:\"+port+context+\"/\";\n    q = new SolrQuery( \"*:*\" );\n    q.set( ShardParams.SHARDS, baseURL+\"core0,\"+baseURL+\"core1\" );\n    q.set( \"fl\", \"id,s:[shard]\" );\n    r = new QueryRequest( q );\n    SolrDocumentList docs = r.process( getSolrCore0() ).getResults();\n    assertEquals( 2, docs.size() );\n    for( SolrDocument d : docs ) {\n      String id = (String)d.get(\"id\");\n      String shard = (String)d.get(\"s\");\n      assertEquals(baseURL+id, shard); // The shard ends with the core name\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDistributed() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    // Add to core0\n    doc.setField( \"id\", \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore0() );\n    up.clear();\n\n    // Add to core1\n    doc.setField( \"id\", \"core1\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"*:*\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 1, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Distributed\n    String baseURL = \"localhost:\"+port+context+\"/\";\n    q = new SolrQuery( \"*:*\" );\n    q.set( ShardParams.SHARDS, baseURL+\"core0,\"+baseURL+\"core1\" );\n    q.set( \"fl\", \"id,s:[shard]\" );\n    r = new QueryRequest( q );\n    SolrDocumentList docs = r.process( getSolrCore0() ).getResults();\n    assertEquals( 2, docs.size() );\n    for( SolrDocument d : docs ) {\n      String id = (String)d.get(\"id\");\n      String shard = (String)d.get(\"s\");\n      assertEquals(baseURL+id, shard); // The shard ends with the core name\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5feef8a61b3cf481ea3eb95b284faeb6aa83434c","date":1333098189,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","sourceNew":"  @Test\n  public void testDistributed() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    // Add to core0\n    doc.setField( \"id\", \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore0() );\n    up.clear();\n\n    // Add to core1\n    doc.setField( \"id\", \"core1\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"*:*\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 1, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Distributed\n    String baseURL = \"localhost:\"+port+context+\"/\";\n    q = new SolrQuery( \"*:*\" );\n    q.set( ShardParams.SHARDS, baseURL+\"core0,\"+baseURL+\"core1\" );\n    q.set( \"fl\", \"id,s:[shard]\" );\n    r = new QueryRequest( q );\n    SolrDocumentList docs = r.process( getSolrCore0() ).getResults();\n    assertEquals( 2, docs.size() );\n    for( SolrDocument d : docs ) {\n      String id = (String)d.get(\"id\");\n      String shard = (String)d.get(\"s\");\n      assertEquals(baseURL+id, shard); // The shard ends with the core name\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDistributed() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction( ACTION.COMMIT, true, true );\n    up.deleteByQuery( \"*:*\" );\n    up.process( getSolrCore0() );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    // Add to core0\n    doc.setField( \"id\", \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore0() );\n    up.clear();\n\n    // Add to core1\n    doc.setField( \"id\", \"core1\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"*:*\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 1, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Distributed\n    String baseURL = \"localhost:\"+port+context+\"/\";\n    q = new SolrQuery( \"*:*\" );\n    q.set( ShardParams.SHARDS, baseURL+\"core0,\"+baseURL+\"core1\" );\n    q.set( \"fl\", \"id,s:[shard]\" );\n    r = new QueryRequest( q );\n    SolrDocumentList docs = r.process( getSolrCore0() ).getResults();\n    assertEquals( 2, docs.size() );\n    for( SolrDocument d : docs ) {\n      String id = (String)d.get(\"id\");\n      String shard = (String)d.get(\"s\");\n      assertEquals(baseURL+id, shard); // The shard ends with the core name\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47c952a4f0f0e9b74763a0609a3726dbb217164a","date":1347968413,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","sourceNew":"  @Test\n  public void testDistributed() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    // Add to core0\n    doc.setField( \"id\", \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore0() );\n    up.clear();\n\n    // Add to core1\n    doc.setField( \"id\", \"core1\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"*:*\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 1, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Distributed\n    String baseURL = \"127.0.0.1:\"+port+context+\"/\";\n    q = new SolrQuery( \"*:*\" );\n    q.set( ShardParams.SHARDS, baseURL+\"core0,\"+baseURL+\"core1\" );\n    q.set( \"fl\", \"id,s:[shard]\" );\n    r = new QueryRequest( q );\n    SolrDocumentList docs = r.process( getSolrCore0() ).getResults();\n    assertEquals( 2, docs.size() );\n    for( SolrDocument d : docs ) {\n      String id = (String)d.get(\"id\");\n      String shard = (String)d.get(\"s\");\n      assertEquals(baseURL+id, shard); // The shard ends with the core name\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDistributed() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    // Add to core0\n    doc.setField( \"id\", \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore0() );\n    up.clear();\n\n    // Add to core1\n    doc.setField( \"id\", \"core1\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"*:*\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 1, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Distributed\n    String baseURL = \"localhost:\"+port+context+\"/\";\n    q = new SolrQuery( \"*:*\" );\n    q.set( ShardParams.SHARDS, baseURL+\"core0,\"+baseURL+\"core1\" );\n    q.set( \"fl\", \"id,s:[shard]\" );\n    r = new QueryRequest( q );\n    SolrDocumentList docs = r.process( getSolrCore0() ).getResults();\n    assertEquals( 2, docs.size() );\n    for( SolrDocument d : docs ) {\n      String id = (String)d.get(\"id\");\n      String shard = (String)d.get(\"s\");\n      assertEquals(baseURL+id, shard); // The shard ends with the core name\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81ec897f0eb789ef9536a8130d1cdb9337ef108a","date":1392217884,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","sourceNew":"  @Test\n  public void testDistributed() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    // Add to core0\n    doc.setField( \"id\", \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore0() );\n    up.clear();\n\n    // Add to core1\n    doc.setField( \"id\", \"core1\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"*:*\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 1, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Distributed\n    String baseURL = buildUrl(port, context) + \"/\";\n    q = new SolrQuery( \"*:*\" );\n    q.set( ShardParams.SHARDS, baseURL+\"core0,\"+baseURL+\"core1\" );\n    q.set( \"fl\", \"id,s:[shard]\" );\n    r = new QueryRequest( q );\n    SolrDocumentList docs = r.process( getSolrCore0() ).getResults();\n    assertEquals( 2, docs.size() );\n    for( SolrDocument d : docs ) {\n      String id = (String)d.get(\"id\");\n      String shard = (String)d.get(\"s\");\n      assertEquals(baseURL+id, shard); // The shard ends with the core name\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDistributed() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    // Add to core0\n    doc.setField( \"id\", \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore0() );\n    up.clear();\n\n    // Add to core1\n    doc.setField( \"id\", \"core1\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"*:*\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 1, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Distributed\n    String baseURL = \"127.0.0.1:\"+port+context+\"/\";\n    q = new SolrQuery( \"*:*\" );\n    q.set( ShardParams.SHARDS, baseURL+\"core0,\"+baseURL+\"core1\" );\n    q.set( \"fl\", \"id,s:[shard]\" );\n    r = new QueryRequest( q );\n    SolrDocumentList docs = r.process( getSolrCore0() ).getResults();\n    assertEquals( 2, docs.size() );\n    for( SolrDocument d : docs ) {\n      String id = (String)d.get(\"id\");\n      String shard = (String)d.get(\"s\");\n      assertEquals(baseURL+id, shard); // The shard ends with the core name\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fb75838ea3c6b1fa977394f436bfffb53b417bc","date":1418226395,"type":4,"author":"Timothy Potter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest#testDistributed().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testDistributed() throws Exception\n  {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n    \n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    // Add to core0\n    doc.setField( \"id\", \"core0\" );\n    up.add( doc );\n    up.process( getSolrCore0() );\n    up.clear();\n\n    // Add to core1\n    doc.setField( \"id\", \"core1\" );\n    up.add( doc );\n    up.process( getSolrCore1() );\n    up.clear();\n    \n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest( q );\n    q.setQuery( \"*:*\" );\n    assertEquals( 1, r.process( getSolrCore0() ).getResults().size() );\n    assertEquals( 1, r.process( getSolrCore1() ).getResults().size() );\n    \n    // Distributed\n    String baseURL = buildUrl(port, context) + \"/\";\n    q = new SolrQuery( \"*:*\" );\n    q.set( ShardParams.SHARDS, baseURL+\"core0,\"+baseURL+\"core1\" );\n    q.set( \"fl\", \"id,s:[shard]\" );\n    r = new QueryRequest( q );\n    SolrDocumentList docs = r.process( getSolrCore0() ).getResults();\n    assertEquals( 2, docs.size() );\n    for( SolrDocument d : docs ) {\n      String id = (String)d.get(\"id\");\n      String shard = (String)d.get(\"s\");\n      assertEquals(baseURL+id, shard); // The shard ends with the core name\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"47c952a4f0f0e9b74763a0609a3726dbb217164a":["5feef8a61b3cf481ea3eb95b284faeb6aa83434c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"6fb75838ea3c6b1fa977394f436bfffb53b417bc":["81ec897f0eb789ef9536a8130d1cdb9337ef108a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81ec897f0eb789ef9536a8130d1cdb9337ef108a":["47c952a4f0f0e9b74763a0609a3726dbb217164a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6fb75838ea3c6b1fa977394f436bfffb53b417bc"],"5feef8a61b3cf481ea3eb95b284faeb6aa83434c":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"47c952a4f0f0e9b74763a0609a3726dbb217164a":["81ec897f0eb789ef9536a8130d1cdb9337ef108a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["5feef8a61b3cf481ea3eb95b284faeb6aa83434c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"6fb75838ea3c6b1fa977394f436bfffb53b417bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"81ec897f0eb789ef9536a8130d1cdb9337ef108a":["6fb75838ea3c6b1fa977394f436bfffb53b417bc"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5feef8a61b3cf481ea3eb95b284faeb6aa83434c":["47c952a4f0f0e9b74763a0609a3726dbb217164a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}