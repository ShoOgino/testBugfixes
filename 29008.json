{"path":"lucene/core/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testFirstSegmentTooLarge().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testFirstSegmentTooLarge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testFirstSegmentTooLarge().mjava","sourceNew":"  public void testFirstSegmentTooLarge() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 5);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    \n    writer.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.forceMerge(1);\n    writer.close();\n    \n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(2, sis.size());\n  }\n\n","sourceOld":"  public void testFirstSegmentTooLarge() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 5);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    \n    writer.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.forceMerge(1);\n    writer.close();\n    \n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(2, sis.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testFirstSegmentTooLarge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testFirstSegmentTooLarge().mjava","sourceNew":"  public void testFirstSegmentTooLarge() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 5);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    \n    writer.shutdown();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.forceMerge(1);\n    writer.shutdown();\n    \n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(2, sis.size());\n  }\n\n","sourceOld":"  public void testFirstSegmentTooLarge() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 5);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    \n    writer.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.forceMerge(1);\n    writer.close();\n    \n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(2, sis.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testFirstSegmentTooLarge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testFirstSegmentTooLarge().mjava","sourceNew":"  public void testFirstSegmentTooLarge() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 5);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    \n    writer.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.forceMerge(1);\n    writer.close();\n    \n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(2, sis.size());\n  }\n\n","sourceOld":"  public void testFirstSegmentTooLarge() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 5);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    \n    writer.shutdown();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.forceMerge(1);\n    writer.shutdown();\n    \n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(2, sis.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testFirstSegmentTooLarge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testFirstSegmentTooLarge().mjava","sourceNew":"  public void testFirstSegmentTooLarge() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 5);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    \n    writer.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.forceMerge(1);\n    writer.close();\n    \n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    assertEquals(2, sis.size());\n  }\n\n","sourceOld":"  public void testFirstSegmentTooLarge() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 5);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    \n    writer.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.forceMerge(1);\n    writer.close();\n    \n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(2, sis.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testFirstSegmentTooLarge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testFirstSegmentTooLarge().mjava","sourceNew":"  public void testFirstSegmentTooLarge() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 5);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    \n    writer.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.forceMerge(1);\n    writer.close();\n    \n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    assertEquals(2, sis.size());\n  }\n\n","sourceOld":"  public void testFirstSegmentTooLarge() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 5);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    \n    writer.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.forceMerge(1);\n    writer.close();\n    \n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    assertEquals(2, sis.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testFirstSegmentTooLarge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#testFirstSegmentTooLarge().mjava","sourceNew":"  public void testFirstSegmentTooLarge() throws Exception {\n    Directory dir = new ByteBuffersDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 5);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    \n    writer.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.forceMerge(1);\n    writer.close();\n    \n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    assertEquals(2, sis.size());\n  }\n\n","sourceOld":"  public void testFirstSegmentTooLarge() throws Exception {\n    Directory dir = new RAMDirectory();\n    \n    IndexWriterConfig conf = newWriterConfig();\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    addDocs(writer, 5);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    addDocs(writer, 3);\n    \n    writer.close();\n    \n    conf = newWriterConfig();\n    LogMergePolicy lmp = new LogDocMergePolicy();\n    lmp.setMaxMergeDocs(3);\n    conf.setMergePolicy(lmp);\n    \n    writer = new IndexWriter(dir, conf);\n    writer.forceMerge(1);\n    writer.close();\n    \n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    assertEquals(2, sis.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d77dafd89756a5161d244985903e3487ca109182":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["d0ef034a4f10871667ae75181537775ddcf8ade4","3384e6013a93e4d11b7d75388693f8d0388602bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["3384e6013a93e4d11b7d75388693f8d0388602bf","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["d77dafd89756a5161d244985903e3487ca109182"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}