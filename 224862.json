{"path":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#createReaderWithNDocs(Random,int,DocumentFactory,Directory).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#createReaderWithNDocs(Random,int,DocumentFactory,Directory).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#createReaderWithNDocs(Random,int,DocumentFactory,Directory).mjava","sourceNew":"  static IndexReader createReaderWithNDocs(Random random, int nDocs, DocumentFactory docFactory, Directory dir) throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n            new MockAnalyzer(random, MockTokenizer.KEYWORD, false)));\n    for (int docNum = 0; docNum < nDocs; docNum++) {\n      writer.addDocument(docFactory.getDoc(docNum));\n    }\n    // Delete documents marked for deletion\n    writer.deleteDocuments(new Term(DocumentFactory.field, DocumentFactory.delTxt));\n    writer.close();\n\n    // Open a fresh read-only reader with the deletions in place\n    return IndexReader.open(dir);\n  }\n\n","sourceOld":"  static IndexReader createReaderWithNDocs(Random random, int nDocs, DocumentFactory docFactory, Directory dir) throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n            new MockAnalyzer(random, MockTokenizer.KEYWORD, false)));\n    for (int docNum = 0; docNum < nDocs; docNum++) {\n      writer.addDocument(docFactory.getDoc(docNum));\n    }\n    // Delete documents marked for deletion\n    writer.deleteDocuments(new Term(DocumentFactory.field, DocumentFactory.delTxt));\n    writer.close();\n\n    // Open a fresh read-only reader with the deletions in place\n    return IndexReader.open(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#createReaderWithNDocs(Random,int,DocumentFactory,Directory).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#createReaderWithNDocs(Random,int,DocumentFactory,Directory).mjava","sourceNew":"  static IndexReader createReaderWithNDocs(Random random, int nDocs, DocumentFactory docFactory, Directory dir) throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n            new MockAnalyzer(random, MockTokenizer.KEYWORD, false)));\n    for (int docNum = 0; docNum < nDocs; docNum++) {\n      writer.addDocument(docFactory.getDoc(docNum));\n    }\n    // Delete documents marked for deletion\n    writer.deleteDocuments(new Term(DocumentFactory.field, DocumentFactory.delTxt));\n    writer.close();\n\n    // Open a fresh read-only reader with the deletions in place\n    return DirectoryReader.open(dir);\n  }\n\n","sourceOld":"  static IndexReader createReaderWithNDocs(Random random, int nDocs, DocumentFactory docFactory, Directory dir) throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n            new MockAnalyzer(random, MockTokenizer.KEYWORD, false)));\n    for (int docNum = 0; docNum < nDocs; docNum++) {\n      writer.addDocument(docFactory.getDoc(docNum));\n    }\n    // Delete documents marked for deletion\n    writer.deleteDocuments(new Term(DocumentFactory.field, DocumentFactory.delTxt));\n    writer.close();\n\n    // Open a fresh read-only reader with the deletions in place\n    return IndexReader.open(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/old/TestScoredDocIDsUtils#createReaderWithNDocs(Random,int,DocumentFactory,Directory).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#createReaderWithNDocs(Random,int,DocumentFactory,Directory).mjava","sourceNew":"  static IndexReader createReaderWithNDocs(Random random, int nDocs, DocumentFactory docFactory, Directory dir) throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n            new MockAnalyzer(random, MockTokenizer.KEYWORD, false)));\n    for (int docNum = 0; docNum < nDocs; docNum++) {\n      writer.addDocument(docFactory.getDoc(docNum));\n    }\n    // Delete documents marked for deletion\n    writer.deleteDocuments(new Term(DocumentFactory.field, DocumentFactory.delTxt));\n    writer.close();\n\n    // Open a fresh read-only reader with the deletions in place\n    return DirectoryReader.open(dir);\n  }\n\n","sourceOld":"  static IndexReader createReaderWithNDocs(Random random, int nDocs, DocumentFactory docFactory, Directory dir) throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n            new MockAnalyzer(random, MockTokenizer.KEYWORD, false)));\n    for (int docNum = 0; docNum < nDocs; docNum++) {\n      writer.addDocument(docFactory.getDoc(docNum));\n    }\n    // Delete documents marked for deletion\n    writer.deleteDocuments(new Term(DocumentFactory.field, DocumentFactory.delTxt));\n    writer.close();\n\n    // Open a fresh read-only reader with the deletions in place\n    return DirectoryReader.open(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/old/TestScoredDocIDsUtils#createReaderWithNDocs(Random,int,DocumentFactory,Directory).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#createReaderWithNDocs(Random,int,DocumentFactory,Directory).mjava","sourceNew":"  static IndexReader createReaderWithNDocs(Random random, int nDocs, DocumentFactory docFactory, Directory dir) throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n            new MockAnalyzer(random, MockTokenizer.KEYWORD, false)));\n    for (int docNum = 0; docNum < nDocs; docNum++) {\n      writer.addDocument(docFactory.getDoc(docNum));\n    }\n    // Delete documents marked for deletion\n    writer.deleteDocuments(new Term(DocumentFactory.field, DocumentFactory.delTxt));\n    writer.close();\n\n    // Open a fresh read-only reader with the deletions in place\n    return DirectoryReader.open(dir);\n  }\n\n","sourceOld":"  static IndexReader createReaderWithNDocs(Random random, int nDocs, DocumentFactory docFactory, Directory dir) throws IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n            new MockAnalyzer(random, MockTokenizer.KEYWORD, false)));\n    for (int docNum = 0; docNum < nDocs; docNum++) {\n      writer.addDocument(docFactory.getDoc(docNum));\n    }\n    // Delete documents marked for deletion\n    writer.deleteDocuments(new Term(DocumentFactory.field, DocumentFactory.delTxt));\n    writer.close();\n\n    // Open a fresh read-only reader with the deletions in place\n    return DirectoryReader.open(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}