{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#createToken(String,Token).mjava","commits":[{"id":"4c9661df01b81c277277a01afbca7851557a2148","date":1133588656,"type":0,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#createToken(String,Token).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Creates and returns a token for the given synonym of the current input\n\t * token; Override for custom (stateless or stateful) behaviour, if desired.\n\t * \n\t * @param synonym \n\t *            a synonym for the current token's term\n\t * @param current\n\t *            the current token from the underlying child stream\n\t * @return a new token, or null to indicate that the given synonym should be\n\t *         ignored\n\t */\n\tprotected Token createToken(String synonym, Token current) {\n\t\tToken token = new Token(\n\t\t\tsynonym, current.startOffset(), current.endOffset(), SYNONYM_TOKEN_TYPE);\n\t\ttoken.setPositionIncrement(0);\n\t\treturn token;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#createToken(String,Token).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#createToken(String,Token).mjava","sourceNew":"  /**\n   * Creates and returns a token for the given synonym of the current input\n   * token; Override for custom (stateless or stateful) behaviour, if desired.\n   * \n   * @param synonym \n   *            a synonym for the current token's term\n   * @param current\n   *            the current token from the underlying child stream\n   * @return a new token, or null to indicate that the given synonym should be\n   *         ignored\n   */\n  protected Token createToken(String synonym, Token current) {\n    Token token = new Token(\n      synonym, current.startOffset(), current.endOffset(), SYNONYM_TOKEN_TYPE);\n    token.setPositionIncrement(0);\n    return token;\n  }\n\n","sourceOld":"\t/**\n\t * Creates and returns a token for the given synonym of the current input\n\t * token; Override for custom (stateless or stateful) behaviour, if desired.\n\t * \n\t * @param synonym \n\t *            a synonym for the current token's term\n\t * @param current\n\t *            the current token from the underlying child stream\n\t * @return a new token, or null to indicate that the given synonym should be\n\t *         ignored\n\t */\n\tprotected Token createToken(String synonym, Token current) {\n\t\tToken token = new Token(\n\t\t\tsynonym, current.startOffset(), current.endOffset(), SYNONYM_TOKEN_TYPE);\n\t\ttoken.setPositionIncrement(0);\n\t\treturn token;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#createToken(String,Token,Token).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/SynonymTokenFilter#createToken(String,Token).mjava","sourceNew":"  /**\n   * Creates and returns a token for the given synonym of the current input\n   * token; Override for custom (stateless or stateful) behavior, if desired.\n   * \n   * @param synonym \n   *            a synonym for the current token's term\n   * @param current\n   *            the current token from the underlying child stream\n   * @param reusableToken\n   *            the token to reuse\n   * @return a new token, or null to indicate that the given synonym should be\n   *         ignored\n   */\n  protected Token createToken(String synonym, Token current, final Token reusableToken) {\n    reusableToken.reinit(current, synonym);\n    reusableToken.setTermBuffer(synonym);\n    reusableToken.setType(SYNONYM_TOKEN_TYPE);\n    reusableToken.setPositionIncrement(0);\n    return reusableToken;\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a token for the given synonym of the current input\n   * token; Override for custom (stateless or stateful) behaviour, if desired.\n   * \n   * @param synonym \n   *            a synonym for the current token's term\n   * @param current\n   *            the current token from the underlying child stream\n   * @return a new token, or null to indicate that the given synonym should be\n   *         ignored\n   */\n  protected Token createToken(String synonym, Token current) {\n    Token token = new Token(\n      synonym, current.startOffset(), current.endOffset(), SYNONYM_TOKEN_TYPE);\n    token.setPositionIncrement(0);\n    return token;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"4c9661df01b81c277277a01afbca7851557a2148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["4c9661df01b81c277277a01afbca7851557a2148"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e2cb543b41c145f33390f460ee743d6693c9c6c"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c9661df01b81c277277a01afbca7851557a2148":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c9661df01b81c277277a01afbca7851557a2148"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}