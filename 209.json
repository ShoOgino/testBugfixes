{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/QueryRequest#process(SolrClient).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/QueryRequest#process(SolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/QueryRequest#process(SolrServer).mjava","sourceNew":"  @Override\n  public QueryResponse process( SolrClient client ) throws SolrServerException\n  {\n    try {\n      long startTime = TimeUnit.MILLISECONDS.convert(System.nanoTime(), TimeUnit.NANOSECONDS);\n      QueryResponse res = new QueryResponse( client.request( this ), client );\n      long endTime = TimeUnit.MILLISECONDS.convert(System.nanoTime(), TimeUnit.NANOSECONDS);\n      res.setElapsedTime(endTime - startTime);\n      return res;\n    } catch (SolrServerException e){\n      throw e;\n    } catch (SolrException s){\n      throw s;\n    } catch (Exception e) {\n      throw new SolrServerException(\"Error executing query\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public QueryResponse process( SolrServer server ) throws SolrServerException \n  {\n    try {\n      long startTime = TimeUnit.MILLISECONDS.convert(System.nanoTime(), TimeUnit.NANOSECONDS);\n      QueryResponse res = new QueryResponse( server.request( this ), server );\n      long endTime = TimeUnit.MILLISECONDS.convert(System.nanoTime(), TimeUnit.NANOSECONDS);\n      res.setElapsedTime(endTime - startTime);\n      return res;\n    } catch (SolrServerException e){\n      throw e;\n    } catch (SolrException s){\n      throw s;\n    } catch (Exception e) {\n      throw new SolrServerException(\"Error executing query\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/QueryRequest#process(SolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/QueryRequest#process(SolrClient).mjava","sourceNew":"  @Override\n  public QueryResponse process( SolrClient client ) throws SolrServerException\n  {\n    try {\n      long startTime = TimeUnit.MILLISECONDS.convert(System.nanoTime(), TimeUnit.NANOSECONDS);\n      QueryResponse res = new QueryResponse( client.request( this ), client );\n      long endTime = TimeUnit.MILLISECONDS.convert(System.nanoTime(), TimeUnit.NANOSECONDS);\n      res.setElapsedTime(endTime - startTime);\n      return res;\n    } catch (SolrServerException | SolrException e){\n      throw e;\n    } catch (Exception e) {\n      throw new SolrServerException(\"Error executing query\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public QueryResponse process( SolrClient client ) throws SolrServerException\n  {\n    try {\n      long startTime = TimeUnit.MILLISECONDS.convert(System.nanoTime(), TimeUnit.NANOSECONDS);\n      QueryResponse res = new QueryResponse( client.request( this ), client );\n      long endTime = TimeUnit.MILLISECONDS.convert(System.nanoTime(), TimeUnit.NANOSECONDS);\n      res.setElapsedTime(endTime - startTime);\n      return res;\n    } catch (SolrServerException e){\n      throw e;\n    } catch (SolrException s){\n      throw s;\n    } catch (Exception e) {\n      throw new SolrServerException(\"Error executing query\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4eb3c3f8289738e479c1ef1e80191be21aa07a52","date":1424862842,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/QueryRequest#process(SolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/QueryRequest#process(SolrClient).mjava","sourceNew":"  /**\n   * Send this request to a {@link SolrClient} and return the response\n   * @param client the SolrClient to communicate with\n   * @return the response\n   * @throws org.apache.solr.client.solrj.SolrServerException if there is an error on the Solr server\n   */\n  @Override\n  public QueryResponse process(SolrClient client) throws SolrServerException {\n    long startTime = TimeUnit.MILLISECONDS.convert(System.nanoTime(), TimeUnit.NANOSECONDS);\n    QueryResponse res = createResponse(client);\n    try {\n      res.setResponse(client.request(this));\n    } catch (IOException e) {\n      throw new SolrServerException(\"Error executing query\", e);\n    }\n    long endTime = TimeUnit.MILLISECONDS.convert(System.nanoTime(), TimeUnit.NANOSECONDS);\n    res.setElapsedTime(endTime - startTime);\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public QueryResponse process( SolrClient client ) throws SolrServerException\n  {\n    try {\n      long startTime = TimeUnit.MILLISECONDS.convert(System.nanoTime(), TimeUnit.NANOSECONDS);\n      QueryResponse res = new QueryResponse( client.request( this ), client );\n      long endTime = TimeUnit.MILLISECONDS.convert(System.nanoTime(), TimeUnit.NANOSECONDS);\n      res.setElapsedTime(endTime - startTime);\n      return res;\n    } catch (SolrServerException | SolrException e){\n      throw e;\n    } catch (Exception e) {\n      throw new SolrServerException(\"Error executing query\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa","date":1425039471,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/QueryRequest#process(SolrClient).mjava","sourceNew":null,"sourceOld":"  /**\n   * Send this request to a {@link SolrClient} and return the response\n   * @param client the SolrClient to communicate with\n   * @return the response\n   * @throws org.apache.solr.client.solrj.SolrServerException if there is an error on the Solr server\n   */\n  @Override\n  public QueryResponse process(SolrClient client) throws SolrServerException {\n    long startTime = TimeUnit.MILLISECONDS.convert(System.nanoTime(), TimeUnit.NANOSECONDS);\n    QueryResponse res = createResponse(client);\n    try {\n      res.setResponse(client.request(this));\n    } catch (IOException e) {\n      throw new SolrServerException(\"Error executing query\", e);\n    }\n    long endTime = TimeUnit.MILLISECONDS.convert(System.nanoTime(), TimeUnit.NANOSECONDS);\n    res.setElapsedTime(endTime - startTime);\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/QueryRequest#process(SolrClient).mjava","sourceNew":null,"sourceOld":"  @Override\n  public QueryResponse process( SolrClient client ) throws SolrServerException\n  {\n    try {\n      long startTime = TimeUnit.MILLISECONDS.convert(System.nanoTime(), TimeUnit.NANOSECONDS);\n      QueryResponse res = new QueryResponse( client.request( this ), client );\n      long endTime = TimeUnit.MILLISECONDS.convert(System.nanoTime(), TimeUnit.NANOSECONDS);\n      res.setElapsedTime(endTime - startTime);\n      return res;\n    } catch (SolrServerException | SolrException e){\n      throw e;\n    } catch (Exception e) {\n      throw new SolrServerException(\"Error executing query\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c6e1dc1bb4254226c8d7151b596cc1be40671751","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["4eb3c3f8289738e479c1ef1e80191be21aa07a52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"4eb3c3f8289738e479c1ef1e80191be21aa07a52":["c6e1dc1bb4254226c8d7151b596cc1be40671751"]},"commit2Childs":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4eb3c3f8289738e479c1ef1e80191be21aa07a52"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"4eb3c3f8289738e479c1ef1e80191be21aa07a52":["b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}