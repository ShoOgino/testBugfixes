{"path":"solr/core/src/java/org/apache/solr/schema/FieldType#getSetQuery(QParser,SchemaField,Collection[String]).mjava","commits":[{"id":"68c354ba50abc8ed5c5fe98901e61d68f93952bb","date":1479836000,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getSetQuery(QParser,SchemaField,Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  /** @lucene.experimental  */\n  public Query getSetQuery(QParser parser, SchemaField field, Collection<String> externalVals) {\n    if (!field.indexed()) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (String externalVal : externalVals) {\n        Query subq = getFieldQuery(parser, field, externalVal);\n        builder.add(subq, BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    }\n\n    List<BytesRef> lst = new ArrayList<>(externalVals.size());\n    BytesRefBuilder br = new BytesRefBuilder();\n    for (String externalVal : externalVals) {\n      readableToIndexed(externalVal, br);\n      lst.add( br.toBytesRef() );\n    }\n    return new TermsQuery(field.getName() , lst);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getSetQuery(QParser,SchemaField,Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  /** @lucene.experimental  */\n  public Query getSetQuery(QParser parser, SchemaField field, Collection<String> externalVals) {\n    if (!field.indexed()) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (String externalVal : externalVals) {\n        Query subq = getFieldQuery(parser, field, externalVal);\n        builder.add(subq, BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    }\n\n    List<BytesRef> lst = new ArrayList<>(externalVals.size());\n    BytesRefBuilder br = new BytesRefBuilder();\n    for (String externalVal : externalVals) {\n      readableToIndexed(externalVal, br);\n      lst.add( br.toBytesRef() );\n    }\n    return new TermsQuery(field.getName() , lst);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d73510b39df24d6b65de48e56f8dccb136b9d01","date":1483971905,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getSetQuery(QParser,SchemaField,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getSetQuery(QParser,SchemaField,Collection[String]).mjava","sourceNew":"  /** @lucene.experimental  */\n  public Query getSetQuery(QParser parser, SchemaField field, Collection<String> externalVals) {\n    if (!field.indexed()) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (String externalVal : externalVals) {\n        Query subq = getFieldQuery(parser, field, externalVal);\n        builder.add(subq, BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    }\n\n    List<BytesRef> lst = new ArrayList<>(externalVals.size());\n    BytesRefBuilder br = new BytesRefBuilder();\n    for (String externalVal : externalVals) {\n      readableToIndexed(externalVal, br);\n      lst.add( br.toBytesRef() );\n    }\n    return new TermInSetQuery(field.getName() , lst);\n  }\n\n","sourceOld":"  /** @lucene.experimental  */\n  public Query getSetQuery(QParser parser, SchemaField field, Collection<String> externalVals) {\n    if (!field.indexed()) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (String externalVal : externalVals) {\n        Query subq = getFieldQuery(parser, field, externalVal);\n        builder.add(subq, BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    }\n\n    List<BytesRef> lst = new ArrayList<>(externalVals.size());\n    BytesRefBuilder br = new BytesRefBuilder();\n    for (String externalVal : externalVals) {\n      readableToIndexed(externalVal, br);\n      lst.add( br.toBytesRef() );\n    }\n    return new TermsQuery(field.getName() , lst);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getSetQuery(QParser,SchemaField,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getSetQuery(QParser,SchemaField,Collection[String]).mjava","sourceNew":"  /** @lucene.experimental  */\n  public Query getSetQuery(QParser parser, SchemaField field, Collection<String> externalVals) {\n    if (!field.indexed()) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (String externalVal : externalVals) {\n        Query subq = getFieldQuery(parser, field, externalVal);\n        builder.add(subq, BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    }\n\n    List<BytesRef> lst = new ArrayList<>(externalVals.size());\n    BytesRefBuilder br = new BytesRefBuilder();\n    for (String externalVal : externalVals) {\n      readableToIndexed(externalVal, br);\n      lst.add( br.toBytesRef() );\n    }\n    return new TermInSetQuery(field.getName() , lst);\n  }\n\n","sourceOld":"  /** @lucene.experimental  */\n  public Query getSetQuery(QParser parser, SchemaField field, Collection<String> externalVals) {\n    if (!field.indexed()) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (String externalVal : externalVals) {\n        Query subq = getFieldQuery(parser, field, externalVal);\n        builder.add(subq, BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    }\n\n    List<BytesRef> lst = new ArrayList<>(externalVals.size());\n    BytesRefBuilder br = new BytesRefBuilder();\n    for (String externalVal : externalVals) {\n      readableToIndexed(externalVal, br);\n      lst.add( br.toBytesRef() );\n    }\n    return new TermsQuery(field.getName() , lst);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39fdbc59d893f5a211736e861fe145798a40b9ff","date":1498161919,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getSetQuery(QParser,SchemaField,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getSetQuery(QParser,SchemaField,Collection[String]).mjava","sourceNew":"  /** @lucene.experimental  */\n  public Query getSetQuery(QParser parser, SchemaField field, Collection<String> externalVals) {\n    if (!field.indexed()) {\n      // TODO: if the field isn't indexed, this feels like the wrong query type to use?\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (String externalVal : externalVals) {\n        Query subq = getFieldQuery(parser, field, externalVal);\n        builder.add(subq, BooleanClause.Occur.SHOULD);\n      }\n      return QueryUtils.build(builder, parser);\n    }\n\n    List<BytesRef> lst = new ArrayList<>(externalVals.size());\n    BytesRefBuilder br = new BytesRefBuilder();\n    for (String externalVal : externalVals) {\n      readableToIndexed(externalVal, br);\n      lst.add( br.toBytesRef() );\n    }\n    return new TermInSetQuery(field.getName() , lst);\n  }\n\n","sourceOld":"  /** @lucene.experimental  */\n  public Query getSetQuery(QParser parser, SchemaField field, Collection<String> externalVals) {\n    if (!field.indexed()) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (String externalVal : externalVals) {\n        Query subq = getFieldQuery(parser, field, externalVal);\n        builder.add(subq, BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    }\n\n    List<BytesRef> lst = new ArrayList<>(externalVals.size());\n    BytesRefBuilder br = new BytesRefBuilder();\n    for (String externalVal : externalVals) {\n      readableToIndexed(externalVal, br);\n      lst.add( br.toBytesRef() );\n    }\n    return new TermInSetQuery(field.getName() , lst);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getSetQuery(QParser,SchemaField,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getSetQuery(QParser,SchemaField,Collection[String]).mjava","sourceNew":"  /** @lucene.experimental  */\n  public Query getSetQuery(QParser parser, SchemaField field, Collection<String> externalVals) {\n    if (!field.indexed()) {\n      // TODO: if the field isn't indexed, this feels like the wrong query type to use?\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (String externalVal : externalVals) {\n        Query subq = getFieldQuery(parser, field, externalVal);\n        builder.add(subq, BooleanClause.Occur.SHOULD);\n      }\n      return QueryUtils.build(builder, parser);\n    }\n\n    List<BytesRef> lst = new ArrayList<>(externalVals.size());\n    BytesRefBuilder br = new BytesRefBuilder();\n    for (String externalVal : externalVals) {\n      readableToIndexed(externalVal, br);\n      lst.add( br.toBytesRef() );\n    }\n    return new TermInSetQuery(field.getName() , lst);\n  }\n\n","sourceOld":"  /** @lucene.experimental  */\n  public Query getSetQuery(QParser parser, SchemaField field, Collection<String> externalVals) {\n    if (!field.indexed()) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (String externalVal : externalVals) {\n        Query subq = getFieldQuery(parser, field, externalVal);\n        builder.add(subq, BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    }\n\n    List<BytesRef> lst = new ArrayList<>(externalVals.size());\n    BytesRefBuilder br = new BytesRefBuilder();\n    for (String externalVal : externalVals) {\n      readableToIndexed(externalVal, br);\n      lst.add( br.toBytesRef() );\n    }\n    return new TermInSetQuery(field.getName() , lst);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#getSetQuery(QParser,SchemaField,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#getSetQuery(QParser,SchemaField,Collection[String]).mjava","sourceNew":"  /** @lucene.experimental  */\n  public Query getSetQuery(QParser parser, SchemaField field, Collection<String> externalVals) {\n    if (!field.indexed()) {\n      // TODO: if the field isn't indexed, this feels like the wrong query type to use?\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (String externalVal : externalVals) {\n        Query subq = getFieldQuery(parser, field, externalVal);\n        builder.add(subq, BooleanClause.Occur.SHOULD);\n      }\n      return QueryUtils.build(builder, parser);\n    }\n\n    List<BytesRef> lst = new ArrayList<>(externalVals.size());\n    BytesRefBuilder br = new BytesRefBuilder();\n    for (String externalVal : externalVals) {\n      readableToIndexed(externalVal, br);\n      lst.add( br.toBytesRef() );\n    }\n    return new TermInSetQuery(field.getName() , lst);\n  }\n\n","sourceOld":"  /** @lucene.experimental  */\n  public Query getSetQuery(QParser parser, SchemaField field, Collection<String> externalVals) {\n    if (!field.indexed()) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (String externalVal : externalVals) {\n        Query subq = getFieldQuery(parser, field, externalVal);\n        builder.add(subq, BooleanClause.Occur.SHOULD);\n      }\n      return builder.build();\n    }\n\n    List<BytesRef> lst = new ArrayList<>(externalVals.size());\n    BytesRefBuilder br = new BytesRefBuilder();\n    for (String externalVal : externalVals) {\n      readableToIndexed(externalVal, br);\n      lst.add( br.toBytesRef() );\n    }\n    return new TermInSetQuery(field.getName() , lst);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"39fdbc59d893f5a211736e861fe145798a40b9ff":["8d73510b39df24d6b65de48e56f8dccb136b9d01"],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["727bb765ff2542275f6d31f67be18d7104bae148","8d73510b39df24d6b65de48e56f8dccb136b9d01"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["8d73510b39df24d6b65de48e56f8dccb136b9d01","39fdbc59d893f5a211736e861fe145798a40b9ff"],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["8d73510b39df24d6b65de48e56f8dccb136b9d01","39fdbc59d893f5a211736e861fe145798a40b9ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"727bb765ff2542275f6d31f67be18d7104bae148":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["727bb765ff2542275f6d31f67be18d7104bae148","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"39fdbc59d893f5a211736e861fe145798a40b9ff":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["39fdbc59d893f5a211736e861fe145798a40b9ff","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["727bb765ff2542275f6d31f67be18d7104bae148","8d73510b39df24d6b65de48e56f8dccb136b9d01"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}