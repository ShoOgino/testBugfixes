{"path":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationFieldDocValues#setupSolrHome().mjava","commits":[{"id":"14b8979f99ff6ba77ce7fd57b57c86ace7a1ef64","date":1385598663,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationFieldDocValues#setupSolrHome().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate-dv.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationFieldDocValues#setupSolrHome().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate-dv.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationFieldDocValues#setupSolrHome().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationFieldDocValues#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate-dv.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate-dv.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationFieldDocValues#setupSolrHome().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationFieldDocValues#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate-dv.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate-dv.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationFieldDocValues#setupSolrHome().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationFieldDocValues#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    File tmpFile = createTempDir();\n    \n    // make data and conf dirs\n    new File(tmpFile + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate-dv.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate-dv.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationFieldDocValues#setupSolrHome().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationFieldDocValues#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    File tmpFile = createTempDir();\n    \n    // make data and conf dirs\n    new File(tmpFile + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate-dv.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    // make a solr home underneath the test's TEMP_DIR\n    File tmpFile = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpFile.delete();\n    tmpFile.mkdir();\n    \n    // make data and conf dirs\n    new File(tmpFile + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate-dv.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationFieldDocValues#setupSolrHome().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationFieldDocValues#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    File tmpFile = createTempDir().toFile();\n    \n    // make data and conf dirs\n    new File(tmpFile + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate-dv.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    File tmpFile = createTempDir();\n    \n    // make data and conf dirs\n    new File(tmpFile + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate-dv.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationFieldDocValues#setupSolrHome().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/schema/TestICUCollationFieldDocValues#setupSolrHome().mjava","sourceNew":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So it's preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    File tmpFile = createTempDir().toFile();\n    \n    // make data and conf dirs\n    new File(tmpFile + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate-dv.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","sourceOld":"  /**\n   * Ugly: but what to do? We want to test custom sort, which reads rules in as a resource.\n   * These are largish files, and jvm-specific (as our documentation says, you should always\n   * look out for jvm differences with collation).\n   * So its preferable to create this file on-the-fly.\n   */\n  public static String setupSolrHome() throws Exception {\n    File tmpFile = createTempDir().toFile();\n    \n    // make data and conf dirs\n    new File(tmpFile + \"/collection1\", \"data\").mkdirs();\n    File confDir = new File(tmpFile + \"/collection1\", \"conf\");\n    confDir.mkdirs();\n    \n    // copy over configuration files\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/solrconfig-icucollate.xml\"), new File(confDir, \"solrconfig.xml\"));\n    FileUtils.copyFile(getFile(\"analysis-extras/solr/collection1/conf/schema-icucollate-dv.xml\"), new File(confDir, \"schema.xml\"));\n    \n    // generate custom collation rules (DIN 5007-2), saving to customrules.dat\n    RuleBasedCollator baseCollator = (RuleBasedCollator) Collator.getInstance(new ULocale(\"de\", \"DE\"));\n\n    String DIN5007_2_tailorings =\n      \"& ae , a\\u0308 & AE , A\\u0308\"+\n      \"& oe , o\\u0308 & OE , O\\u0308\"+\n      \"& ue , u\\u0308 & UE , u\\u0308\";\n\n    RuleBasedCollator tailoredCollator = new RuleBasedCollator(baseCollator.getRules() + DIN5007_2_tailorings);\n    String tailoredRules = tailoredCollator.getRules();\n    FileOutputStream os = new FileOutputStream(new File(confDir, \"customrules.dat\"));\n    IOUtils.write(tailoredRules, os, \"UTF-8\");\n    os.close();\n\n    return tmpFile.getAbsolutePath();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["f4abec28b874149a7223e32cc7a01704c27790de"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["1416f9d09d016a6894cd17e1caac137dad2bba59","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["14b8979f99ff6ba77ce7fd57b57c86ace7a1ef64"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"14b8979f99ff6ba77ce7fd57b57c86ace7a1ef64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","14b8979f99ff6ba77ce7fd57b57c86ace7a1ef64"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["14b8979f99ff6ba77ce7fd57b57c86ace7a1ef64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["14b8979f99ff6ba77ce7fd57b57c86ace7a1ef64","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"14b8979f99ff6ba77ce7fd57b57c86ace7a1ef64":["1416f9d09d016a6894cd17e1caac137dad2bba59","74f45af4339b0daf7a95c820ab88c1aea74fbce0","d0d579490a72f2e6297eaa648940611234c57cf1"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"f4abec28b874149a7223e32cc7a01704c27790de":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}