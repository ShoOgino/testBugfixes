{"path":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","commits":[{"id":"5db1d0b312c5915094ef798a33d392623fd40bb3","date":1148622242,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"/dev/null","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional \n   * writers may also be configured. */\n  private void initWriters() {\n    String xpath = \"queryResponseWriter\";\n    NodeList nodes = (NodeList) SolrConfig.config.evaluate(xpath, XPathConstants.NODESET);\n    int length = nodes.getLength();\n    for (int i=0; i<length; i++) {\n      Element elm = (Element) nodes.item(i);\n      \n      try {\n        String name = DOMUtil.getAttr(elm,\"name\", xpath+\" config\");\n        String className = DOMUtil.getAttr(elm,\"class\", xpath+\" config\");\n        log.info(\"adding queryResponseWriter \"+name+\"=\"+className);\n          \n        QueryResponseWriter writer = (QueryResponseWriter) Config.newInstance(className);\n        responseWriters.put(name, writer);\n      } catch (Exception ex) {\n        SolrException.logOnce(log,null, ex);\n        // if a writer can't be created, skip it and continue\n      }\n    }\n\n    // configure the default response writer; this one should never be null\n    if (responseWriters.containsKey(\"standard\")) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = new XMLResponseWriter();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a39b7e8581f02785ad75d4c481f0da0e3482dde6","date":1153346428,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional \n   * writers may also be configured. */\n  private void initWriters() {\n    String xpath = \"queryResponseWriter\";\n    NodeList nodes = (NodeList) SolrConfig.config.evaluate(xpath, XPathConstants.NODESET);\n    int length = nodes.getLength();\n    for (int i=0; i<length; i++) {\n      Element elm = (Element) nodes.item(i);\n      \n      try {\n        String name = DOMUtil.getAttr(elm,\"name\", xpath+\" config\");\n        String className = DOMUtil.getAttr(elm,\"class\", xpath+\" config\");\n        log.info(\"adding queryResponseWriter \"+name+\"=\"+className);\n          \n        QueryResponseWriter writer = (QueryResponseWriter) Config.newInstance(className);\n        responseWriters.put(name, writer);\n      } catch (Exception ex) {\n        SolrException.logOnce(log,null, ex);\n        // if a writer can't be created, skip it and continue\n      }\n    }\n\n    // configure the default response writer; this one should never be null\n    if (responseWriters.containsKey(\"standard\")) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = new XMLResponseWriter();\n    }\n\n    // make JSON response writers available by default\n    if (responseWriters.get(\"json\")==null) {\n      responseWriters.put(\"json\", new JSONResponseWriter());\n    }\n    if (responseWriters.get(\"python\")==null) {\n      responseWriters.put(\"python\", new PythonResponseWriter());\n    }\n    if (responseWriters.get(\"ruby\")==null) {\n      responseWriters.put(\"ruby\", new RubyResponseWriter());\n    }\n\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional \n   * writers may also be configured. */\n  private void initWriters() {\n    String xpath = \"queryResponseWriter\";\n    NodeList nodes = (NodeList) SolrConfig.config.evaluate(xpath, XPathConstants.NODESET);\n    int length = nodes.getLength();\n    for (int i=0; i<length; i++) {\n      Element elm = (Element) nodes.item(i);\n      \n      try {\n        String name = DOMUtil.getAttr(elm,\"name\", xpath+\" config\");\n        String className = DOMUtil.getAttr(elm,\"class\", xpath+\" config\");\n        log.info(\"adding queryResponseWriter \"+name+\"=\"+className);\n          \n        QueryResponseWriter writer = (QueryResponseWriter) Config.newInstance(className);\n        responseWriters.put(name, writer);\n      } catch (Exception ex) {\n        SolrException.logOnce(log,null, ex);\n        // if a writer can't be created, skip it and continue\n      }\n    }\n\n    // configure the default response writer; this one should never be null\n    if (responseWriters.containsKey(\"standard\")) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = new XMLResponseWriter();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8eb6c8a345eb88b08768b150ffd0bd8088827260","date":1161193988,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional \n   * writers may also be configured. */\n  private void initWriters() {\n    String xpath = \"queryResponseWriter\";\n    NodeList nodes = (NodeList) SolrConfig.config.evaluate(xpath, XPathConstants.NODESET);\n    int length = nodes.getLength();\n    for (int i=0; i<length; i++) {\n      Element elm = (Element) nodes.item(i);\n      \n      try {\n        String name = DOMUtil.getAttr(elm,\"name\", xpath+\" config\");\n        String className = DOMUtil.getAttr(elm,\"class\", xpath+\" config\");\n        log.info(\"adding queryResponseWriter \"+name+\"=\"+className);\n          \n        QueryResponseWriter writer = (QueryResponseWriter) Config.newInstance(className);\n        writer.init(DOMUtil.childNodesToNamedList(elm));\n        responseWriters.put(name, writer);\n      } catch (Exception ex) {\n        SolrException.logOnce(log,null, ex);\n        // if a writer can't be created, skip it and continue\n      }\n    }\n\n    // configure the default response writer; this one should never be null\n    if (responseWriters.containsKey(\"standard\")) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = new XMLResponseWriter();\n    }\n\n    // make JSON response writers available by default\n    if (responseWriters.get(\"json\")==null) {\n      responseWriters.put(\"json\", new JSONResponseWriter());\n    }\n    if (responseWriters.get(\"python\")==null) {\n      responseWriters.put(\"python\", new PythonResponseWriter());\n    }\n    if (responseWriters.get(\"ruby\")==null) {\n      responseWriters.put(\"ruby\", new RubyResponseWriter());\n    }\n\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional \n   * writers may also be configured. */\n  private void initWriters() {\n    String xpath = \"queryResponseWriter\";\n    NodeList nodes = (NodeList) SolrConfig.config.evaluate(xpath, XPathConstants.NODESET);\n    int length = nodes.getLength();\n    for (int i=0; i<length; i++) {\n      Element elm = (Element) nodes.item(i);\n      \n      try {\n        String name = DOMUtil.getAttr(elm,\"name\", xpath+\" config\");\n        String className = DOMUtil.getAttr(elm,\"class\", xpath+\" config\");\n        log.info(\"adding queryResponseWriter \"+name+\"=\"+className);\n          \n        QueryResponseWriter writer = (QueryResponseWriter) Config.newInstance(className);\n        responseWriters.put(name, writer);\n      } catch (Exception ex) {\n        SolrException.logOnce(log,null, ex);\n        // if a writer can't be created, skip it and continue\n      }\n    }\n\n    // configure the default response writer; this one should never be null\n    if (responseWriters.containsKey(\"standard\")) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = new XMLResponseWriter();\n    }\n\n    // make JSON response writers available by default\n    if (responseWriters.get(\"json\")==null) {\n      responseWriters.put(\"json\", new JSONResponseWriter());\n    }\n    if (responseWriters.get(\"python\")==null) {\n      responseWriters.put(\"python\", new PythonResponseWriter());\n    }\n    if (responseWriters.get(\"ruby\")==null) {\n      responseWriters.put(\"ruby\", new RubyResponseWriter());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"368c8927753a9ca6ee214a251da2746ff35aeef6","date":1177630664,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional \n   * writers may also be configured. */\n  private void initWriters() {\n    String xpath = \"queryResponseWriter\";\n    NodeList nodes = (NodeList) SolrConfig.config.evaluate(xpath, XPathConstants.NODESET);\n    int length = nodes.getLength();\n    for (int i=0; i<length; i++) {\n      Element elm = (Element) nodes.item(i);\n      \n      try {\n        String name = DOMUtil.getAttr(elm,\"name\", xpath+\" config\");\n        String className = DOMUtil.getAttr(elm,\"class\", xpath+\" config\");\n        log.info(\"adding queryResponseWriter \"+name+\"=\"+className);\n          \n        QueryResponseWriter writer = (QueryResponseWriter) Config.newInstance(className);\n        writer.init(DOMUtil.childNodesToNamedList(elm));\n        responseWriters.put(name, writer);\n      } catch (Exception ex) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null, ex);\n        // if a writer can't be created, skip it and continue\n      }\n    }\n\n    // configure the default response writer; this one should never be null\n    if (responseWriters.containsKey(\"standard\")) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = new XMLResponseWriter();\n    }\n\n    // make JSON response writers available by default\n    if (responseWriters.get(\"json\")==null) {\n      responseWriters.put(\"json\", new JSONResponseWriter());\n    }\n    if (responseWriters.get(\"python\")==null) {\n      responseWriters.put(\"python\", new PythonResponseWriter());\n    }\n    if (responseWriters.get(\"ruby\")==null) {\n      responseWriters.put(\"ruby\", new RubyResponseWriter());\n    }\n\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional \n   * writers may also be configured. */\n  private void initWriters() {\n    String xpath = \"queryResponseWriter\";\n    NodeList nodes = (NodeList) SolrConfig.config.evaluate(xpath, XPathConstants.NODESET);\n    int length = nodes.getLength();\n    for (int i=0; i<length; i++) {\n      Element elm = (Element) nodes.item(i);\n      \n      try {\n        String name = DOMUtil.getAttr(elm,\"name\", xpath+\" config\");\n        String className = DOMUtil.getAttr(elm,\"class\", xpath+\" config\");\n        log.info(\"adding queryResponseWriter \"+name+\"=\"+className);\n          \n        QueryResponseWriter writer = (QueryResponseWriter) Config.newInstance(className);\n        writer.init(DOMUtil.childNodesToNamedList(elm));\n        responseWriters.put(name, writer);\n      } catch (Exception ex) {\n        SolrException.logOnce(log,null, ex);\n        // if a writer can't be created, skip it and continue\n      }\n    }\n\n    // configure the default response writer; this one should never be null\n    if (responseWriters.containsKey(\"standard\")) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = new XMLResponseWriter();\n    }\n\n    // make JSON response writers available by default\n    if (responseWriters.get(\"json\")==null) {\n      responseWriters.put(\"json\", new JSONResponseWriter());\n    }\n    if (responseWriters.get(\"python\")==null) {\n      responseWriters.put(\"python\", new PythonResponseWriter());\n    }\n    if (responseWriters.get(\"ruby\")==null) {\n      responseWriters.put(\"ruby\", new RubyResponseWriter());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4cc0532e82274748c1910318b92089c5604e48a","date":1183443010,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional \n   * writers may also be configured. */\n  private void initWriters() {\n    String xpath = \"queryResponseWriter\";\n    NodeList nodes = (NodeList) SolrConfig.config.evaluate(xpath, XPathConstants.NODESET);\n    \n    NamedListPluginLoader<QueryResponseWriter> loader = \n      new NamedListPluginLoader<QueryResponseWriter>( \"[solrconfig.xml] \"+xpath, responseWriters );\n    \n    defaultResponseWriter = loader.load( nodes );\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n      if( defaultResponseWriter == null ) {\n        defaultResponseWriter = new XMLResponseWriter();\n      }\n    }\n\n    // make JSON response writers available by default\n    if (responseWriters.get(\"json\")==null) {\n      responseWriters.put(\"json\", new JSONResponseWriter());\n    }\n    if (responseWriters.get(\"python\")==null) {\n      responseWriters.put(\"python\", new PythonResponseWriter());\n    }\n    if (responseWriters.get(\"ruby\")==null) {\n      responseWriters.put(\"ruby\", new RubyResponseWriter());\n    }\n\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional \n   * writers may also be configured. */\n  private void initWriters() {\n    String xpath = \"queryResponseWriter\";\n    NodeList nodes = (NodeList) SolrConfig.config.evaluate(xpath, XPathConstants.NODESET);\n    int length = nodes.getLength();\n    for (int i=0; i<length; i++) {\n      Element elm = (Element) nodes.item(i);\n      \n      try {\n        String name = DOMUtil.getAttr(elm,\"name\", xpath+\" config\");\n        String className = DOMUtil.getAttr(elm,\"class\", xpath+\" config\");\n        log.info(\"adding queryResponseWriter \"+name+\"=\"+className);\n          \n        QueryResponseWriter writer = (QueryResponseWriter) Config.newInstance(className);\n        writer.init(DOMUtil.childNodesToNamedList(elm));\n        responseWriters.put(name, writer);\n      } catch (Exception ex) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null, ex);\n        // if a writer can't be created, skip it and continue\n      }\n    }\n\n    // configure the default response writer; this one should never be null\n    if (responseWriters.containsKey(\"standard\")) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = new XMLResponseWriter();\n    }\n\n    // make JSON response writers available by default\n    if (responseWriters.get(\"json\")==null) {\n      responseWriters.put(\"json\", new JSONResponseWriter());\n    }\n    if (responseWriters.get(\"python\")==null) {\n      responseWriters.put(\"python\", new PythonResponseWriter());\n    }\n    if (responseWriters.get(\"ruby\")==null) {\n      responseWriters.put(\"ruby\", new RubyResponseWriter());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional \n   * writers may also be configured. */\n  private void initWriters() {\n    String xpath = \"queryResponseWriter\";\n    NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n    \n    NamedListPluginLoader<QueryResponseWriter> loader = \n      new NamedListPluginLoader<QueryResponseWriter>( \"[solrconfig.xml] \"+xpath, responseWriters );\n    \n    defaultResponseWriter = loader.load( this, nodes );\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n      if( defaultResponseWriter == null ) {\n        defaultResponseWriter = new XMLResponseWriter();\n      }\n    }\n\n    // make JSON response writers available by default\n    if (responseWriters.get(\"json\")==null) {\n      responseWriters.put(\"json\", new JSONResponseWriter());\n    }\n    if (responseWriters.get(\"python\")==null) {\n      responseWriters.put(\"python\", new PythonResponseWriter());\n    }\n    if (responseWriters.get(\"ruby\")==null) {\n      responseWriters.put(\"ruby\", new RubyResponseWriter());\n    }\n\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional \n   * writers may also be configured. */\n  private void initWriters() {\n    String xpath = \"queryResponseWriter\";\n    NodeList nodes = (NodeList) SolrConfig.config.evaluate(xpath, XPathConstants.NODESET);\n    \n    NamedListPluginLoader<QueryResponseWriter> loader = \n      new NamedListPluginLoader<QueryResponseWriter>( \"[solrconfig.xml] \"+xpath, responseWriters );\n    \n    defaultResponseWriter = loader.load( nodes );\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n      if( defaultResponseWriter == null ) {\n        defaultResponseWriter = new XMLResponseWriter();\n      }\n    }\n\n    // make JSON response writers available by default\n    if (responseWriters.get(\"json\")==null) {\n      responseWriters.put(\"json\", new JSONResponseWriter());\n    }\n    if (responseWriters.get(\"python\")==null) {\n      responseWriters.put(\"python\", new PythonResponseWriter());\n    }\n    if (responseWriters.get(\"ruby\")==null) {\n      responseWriters.put(\"ruby\", new RubyResponseWriter());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7","date":1189312484,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional \n   * writers may also be configured. */\n  private void initWriters() {\n    String xpath = \"queryResponseWriter\";\n    NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n    \n    NamedListPluginLoader<QueryResponseWriter> loader = \n      new NamedListPluginLoader<QueryResponseWriter>( \"[solrconfig.xml] \"+xpath, responseWriters );\n    \n    defaultResponseWriter = loader.load( solrConfig, nodes );\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n      if( defaultResponseWriter == null ) {\n        defaultResponseWriter = new XMLResponseWriter();\n      }\n    }\n\n    // make JSON response writers available by default\n    if (responseWriters.get(\"json\")==null) {\n      responseWriters.put(\"json\", new JSONResponseWriter());\n    }\n    if (responseWriters.get(\"python\")==null) {\n      responseWriters.put(\"python\", new PythonResponseWriter());\n    }\n    if (responseWriters.get(\"ruby\")==null) {\n      responseWriters.put(\"ruby\", new RubyResponseWriter());\n    }\n\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional \n   * writers may also be configured. */\n  private void initWriters() {\n    String xpath = \"queryResponseWriter\";\n    NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n    \n    NamedListPluginLoader<QueryResponseWriter> loader = \n      new NamedListPluginLoader<QueryResponseWriter>( \"[solrconfig.xml] \"+xpath, responseWriters );\n    \n    defaultResponseWriter = loader.load( this, nodes );\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n      if( defaultResponseWriter == null ) {\n        defaultResponseWriter = new XMLResponseWriter();\n      }\n    }\n\n    // make JSON response writers available by default\n    if (responseWriters.get(\"json\")==null) {\n      responseWriters.put(\"json\", new JSONResponseWriter());\n    }\n    if (responseWriters.get(\"python\")==null) {\n      responseWriters.put(\"python\", new PythonResponseWriter());\n    }\n    if (responseWriters.get(\"ruby\")==null) {\n      responseWriters.put(\"ruby\", new RubyResponseWriter());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","date":1195912306,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional \n   * writers may also be configured. */\n  private void initWriters() {\n    String xpath = \"queryResponseWriter\";\n    NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n    \n    NamedListPluginLoader<QueryResponseWriter> loader = \n      new NamedListPluginLoader<QueryResponseWriter>( \"[solrconfig.xml] \"+xpath, responseWriters );\n    \n    defaultResponseWriter = loader.load( solrConfig.getResourceLoader(), nodes );\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n      if( defaultResponseWriter == null ) {\n        defaultResponseWriter = new XMLResponseWriter();\n      }\n    }\n\n    // make JSON response writers available by default\n    if (responseWriters.get(\"json\")==null) {\n      responseWriters.put(\"json\", new JSONResponseWriter());\n    }\n    if (responseWriters.get(\"python\")==null) {\n      responseWriters.put(\"python\", new PythonResponseWriter());\n    }\n    if (responseWriters.get(\"ruby\")==null) {\n      responseWriters.put(\"ruby\", new RubyResponseWriter());\n    }\n\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional \n   * writers may also be configured. */\n  private void initWriters() {\n    String xpath = \"queryResponseWriter\";\n    NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n    \n    NamedListPluginLoader<QueryResponseWriter> loader = \n      new NamedListPluginLoader<QueryResponseWriter>( \"[solrconfig.xml] \"+xpath, responseWriters );\n    \n    defaultResponseWriter = loader.load( solrConfig, nodes );\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n      if( defaultResponseWriter == null ) {\n        defaultResponseWriter = new XMLResponseWriter();\n      }\n    }\n\n    // make JSON response writers available by default\n    if (responseWriters.get(\"json\")==null) {\n      responseWriters.put(\"json\", new JSONResponseWriter());\n    }\n    if (responseWriters.get(\"python\")==null) {\n      responseWriters.put(\"python\", new PythonResponseWriter());\n    }\n    if (responseWriters.get(\"ruby\")==null) {\n      responseWriters.put(\"ruby\", new RubyResponseWriter());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5947b6265298cdb14a6489a5fbaf8073a1b7203d","date":1199294130,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional \n   * writers may also be configured. */\n  private void initWriters() {\n    String xpath = \"queryResponseWriter\";\n    NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n    \n    NamedListPluginLoader<QueryResponseWriter> loader = \n      new NamedListPluginLoader<QueryResponseWriter>( \"[solrconfig.xml] \"+xpath, responseWriters );\n    \n    defaultResponseWriter = loader.load( solrConfig.getResourceLoader(), nodes );\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n      if( defaultResponseWriter == null ) {\n        defaultResponseWriter = new XMLResponseWriter();\n      }\n    }\n\n    // make JSON response writers available by default\n    if (responseWriters.get(\"json\")==null) {\n      responseWriters.put(\"json\", new JSONResponseWriter());\n    }\n    if (responseWriters.get(\"python\")==null) {\n      responseWriters.put(\"python\", new PythonResponseWriter());\n    }\n    if (responseWriters.get(\"ruby\")==null) {\n      responseWriters.put(\"ruby\", new RubyResponseWriter());\n    }\n    if (responseWriters.get(\"raw\")==null) {\n      responseWriters.put(\"raw\", new RawResponseWriter());\n    }\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional \n   * writers may also be configured. */\n  private void initWriters() {\n    String xpath = \"queryResponseWriter\";\n    NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n    \n    NamedListPluginLoader<QueryResponseWriter> loader = \n      new NamedListPluginLoader<QueryResponseWriter>( \"[solrconfig.xml] \"+xpath, responseWriters );\n    \n    defaultResponseWriter = loader.load( solrConfig.getResourceLoader(), nodes );\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n      if( defaultResponseWriter == null ) {\n        defaultResponseWriter = new XMLResponseWriter();\n      }\n    }\n\n    // make JSON response writers available by default\n    if (responseWriters.get(\"json\")==null) {\n      responseWriters.put(\"json\", new JSONResponseWriter());\n    }\n    if (responseWriters.get(\"python\")==null) {\n      responseWriters.put(\"python\", new PythonResponseWriter());\n    }\n    if (responseWriters.get(\"ruby\")==null) {\n      responseWriters.put(\"ruby\", new RubyResponseWriter());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da0acfe5ceed804451d76c8f887855b3d060e132","date":1208287358,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional \n   * writers may also be configured. */\n  private void initWriters() {\n    String xpath = \"queryResponseWriter\";\n    NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n    \n    NamedListPluginLoader<QueryResponseWriter> loader = \n      new NamedListPluginLoader<QueryResponseWriter>( \"[solrconfig.xml] \"+xpath, responseWriters );\n    \n    defaultResponseWriter = loader.load( solrConfig.getResourceLoader(), nodes );\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n      if( defaultResponseWriter == null ) {\n        defaultResponseWriter = new XMLResponseWriter();\n      }\n    }\n\n    // make JSON response writers available by default\n    if (responseWriters.get(\"json\")==null) {\n      responseWriters.put(\"json\", new JSONResponseWriter());\n    }\n    if (responseWriters.get(\"python\")==null) {\n      responseWriters.put(\"python\", new PythonResponseWriter());\n    }\n    if (responseWriters.get(\"ruby\")==null) {\n      responseWriters.put(\"ruby\", new RubyResponseWriter());\n    }\n    if (responseWriters.get(\"raw\")==null) {\n      responseWriters.put(\"raw\", new RawResponseWriter());\n    }\n    if (responseWriters.get(\"javabin\") == null) {\n      responseWriters.put(\"javabin\", new BinaryResponseWriter());\n    }\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional \n   * writers may also be configured. */\n  private void initWriters() {\n    String xpath = \"queryResponseWriter\";\n    NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n    \n    NamedListPluginLoader<QueryResponseWriter> loader = \n      new NamedListPluginLoader<QueryResponseWriter>( \"[solrconfig.xml] \"+xpath, responseWriters );\n    \n    defaultResponseWriter = loader.load( solrConfig.getResourceLoader(), nodes );\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n      if( defaultResponseWriter == null ) {\n        defaultResponseWriter = new XMLResponseWriter();\n      }\n    }\n\n    // make JSON response writers available by default\n    if (responseWriters.get(\"json\")==null) {\n      responseWriters.put(\"json\", new JSONResponseWriter());\n    }\n    if (responseWriters.get(\"python\")==null) {\n      responseWriters.put(\"python\", new PythonResponseWriter());\n    }\n    if (responseWriters.get(\"ruby\")==null) {\n      responseWriters.put(\"ruby\", new RubyResponseWriter());\n    }\n    if (responseWriters.get(\"raw\")==null) {\n      responseWriters.put(\"raw\", new RawResponseWriter());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeddcf8e42f213f1b4499194c6f014554e1a22ef","date":1242729902,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    String xpath = \"queryResponseWriter\";\n    NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n    \n    NamedListPluginLoader<QueryResponseWriter> loader = \n      new NamedListPluginLoader<QueryResponseWriter>( \"[solrconfig.xml] \"+xpath, responseWriters );\n    \n    defaultResponseWriter = loader.load( solrConfig.getResourceLoader(), nodes );\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional \n   * writers may also be configured. */\n  private void initWriters() {\n    String xpath = \"queryResponseWriter\";\n    NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n    \n    NamedListPluginLoader<QueryResponseWriter> loader = \n      new NamedListPluginLoader<QueryResponseWriter>( \"[solrconfig.xml] \"+xpath, responseWriters );\n    \n    defaultResponseWriter = loader.load( solrConfig.getResourceLoader(), nodes );\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n      if( defaultResponseWriter == null ) {\n        defaultResponseWriter = new XMLResponseWriter();\n      }\n    }\n\n    // make JSON response writers available by default\n    if (responseWriters.get(\"json\")==null) {\n      responseWriters.put(\"json\", new JSONResponseWriter());\n    }\n    if (responseWriters.get(\"python\")==null) {\n      responseWriters.put(\"python\", new PythonResponseWriter());\n    }\n    if (responseWriters.get(\"ruby\")==null) {\n      responseWriters.put(\"ruby\", new RubyResponseWriter());\n    }\n    if (responseWriters.get(\"raw\")==null) {\n      responseWriters.put(\"raw\", new RawResponseWriter());\n    }\n    if (responseWriters.get(\"javabin\") == null) {\n      responseWriters.put(\"javabin\", new BinaryResponseWriter());\n    }\n  }\n\n","bugFix":null,"bugIntro":["4887c5c418866929f0db7419c3c766cbcf99fb92","4887c5c418866929f0db7419c3c766cbcf99fb92","4887c5c418866929f0db7419c3c766cbcf99fb92"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b338a77d735377ad6a2b02379ce3000377ff8631","date":1244447757,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    defaultResponseWriter = initPlugins(solrConfig.getRespWriterInfo(), responseWriters, QueryResponseWriter.class);\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    String xpath = \"queryResponseWriter\";\n    NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n    \n    NamedListPluginLoader<QueryResponseWriter> loader = \n      new NamedListPluginLoader<QueryResponseWriter>( \"[solrconfig.xml] \"+xpath, responseWriters );\n    \n    defaultResponseWriter = loader.load( solrConfig.getResourceLoader(), nodes );\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28a016ae2abf4934515e45810192aa4350e3092b","date":1252309557,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    defaultResponseWriter = initPlugins(responseWriters, QueryResponseWriter.class);\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    defaultResponseWriter = initPlugins(solrConfig.getRespWriterInfo(), responseWriters, QueryResponseWriter.class);\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#initWriters().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#initWriters().mjava","sourceNew":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    defaultResponseWriter = initPlugins(responseWriters, QueryResponseWriter.class);\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","sourceOld":"  /** Configure the query response writers. There will always be a default writer; additional\n   * writers may also be configured. */\n  private void initWriters() {\n    defaultResponseWriter = initPlugins(responseWriters, QueryResponseWriter.class);\n    for (Map.Entry<String, QueryResponseWriter> entry : DEFAULT_RESPONSE_WRITERS.entrySet()) {\n      if(responseWriters.get(entry.getKey()) == null) responseWriters.put(entry.getKey(), entry.getValue());\n    }\n    \n    // configure the default response writer; this one should never be null\n    if (defaultResponseWriter == null) {\n      defaultResponseWriter = responseWriters.get(\"standard\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["a4cc0532e82274748c1910318b92089c5604e48a"],"368c8927753a9ca6ee214a251da2746ff35aeef6":["8eb6c8a345eb88b08768b150ffd0bd8088827260"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5947b6265298cdb14a6489a5fbaf8073a1b7203d":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"b338a77d735377ad6a2b02379ce3000377ff8631":["eeddcf8e42f213f1b4499194c6f014554e1a22ef"],"da0acfe5ceed804451d76c8f887855b3d060e132":["5947b6265298cdb14a6489a5fbaf8073a1b7203d"],"a4cc0532e82274748c1910318b92089c5604e48a":["368c8927753a9ca6ee214a251da2746ff35aeef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["28a016ae2abf4934515e45810192aa4350e3092b"],"eeddcf8e42f213f1b4499194c6f014554e1a22ef":["da0acfe5ceed804451d76c8f887855b3d060e132"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7"],"28a016ae2abf4934515e45810192aa4350e3092b":["b338a77d735377ad6a2b02379ce3000377ff8631"],"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7":["6d6338c87060be5f66757a94945975f3bbd377a9"],"a39b7e8581f02785ad75d4c481f0da0e3482dde6":["5db1d0b312c5915094ef798a33d392623fd40bb3"],"5db1d0b312c5915094ef798a33d392623fd40bb3":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"8eb6c8a345eb88b08768b150ffd0bd8088827260":["a39b7e8581f02785ad75d4c481f0da0e3482dde6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7"],"368c8927753a9ca6ee214a251da2746ff35aeef6":["a4cc0532e82274748c1910318b92089c5604e48a"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5db1d0b312c5915094ef798a33d392623fd40bb3"],"5947b6265298cdb14a6489a5fbaf8073a1b7203d":["da0acfe5ceed804451d76c8f887855b3d060e132"],"b338a77d735377ad6a2b02379ce3000377ff8631":["28a016ae2abf4934515e45810192aa4350e3092b"],"da0acfe5ceed804451d76c8f887855b3d060e132":["eeddcf8e42f213f1b4499194c6f014554e1a22ef"],"a4cc0532e82274748c1910318b92089c5604e48a":["6d6338c87060be5f66757a94945975f3bbd377a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["5947b6265298cdb14a6489a5fbaf8073a1b7203d"],"eeddcf8e42f213f1b4499194c6f014554e1a22ef":["b338a77d735377ad6a2b02379ce3000377ff8631"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"28a016ae2abf4934515e45810192aa4350e3092b":["ad94625fb8d088209f46650c8097196fec67f00c"],"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"a39b7e8581f02785ad75d4c481f0da0e3482dde6":["8eb6c8a345eb88b08768b150ffd0bd8088827260"],"5db1d0b312c5915094ef798a33d392623fd40bb3":["a39b7e8581f02785ad75d4c481f0da0e3482dde6"],"8eb6c8a345eb88b08768b150ffd0bd8088827260":["368c8927753a9ca6ee214a251da2746ff35aeef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}