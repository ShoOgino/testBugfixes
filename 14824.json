{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","commits":[{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(Searcher,int).mjava","sourceNew":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    return searcher.doc(docid,fldSel).get(docNameField);\n  }\n\n","sourceOld":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(Searcher searcher, int docid) throws IOException {\n    return searcher.doc(docid,fldSel).get(docNameField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    return searcher.doc(docid,fldSel).get(docNameField);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    return searcher.doc(docid,fldSel).get(docNameField);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","sourceNew":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    final List<String> name = new ArrayList<String>();\n    searcher.getIndexReader().document(docid, new StoredFieldVisitor() {\n        @Override\n        public boolean stringField(FieldInfo fieldInfo, IndexInput in, int numUTF8Bytes) throws IOException {\n          if (fieldInfo.name.equals(docNameField) && name.size() == 0) {\n            final byte[] b = new byte[numUTF8Bytes];\n            in.readBytes(b, 0, b.length);\n            name.add(new String(b, \"UTF-8\"));\n          } else {\n            in.seek(in.getFilePointer() + numUTF8Bytes);\n          }\n          return false;\n        }\n      });\n    if (name.size() != 0) {\n      return name.get(0);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    return searcher.doc(docid,fldSel).get(docNameField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","sourceNew":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    final List<String> name = new ArrayList<String>();\n    searcher.getIndexReader().document(docid, new StoredFieldVisitor() {\n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n          name.add(value);\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) throws IOException {\n          if (!name.isEmpty()) {\n            return Status.STOP;\n          } else if (fieldInfo.name.equals(docNameField)) {\n            return Status.YES;\n          } else {\n            return Status.NO;\n          }\n        }\n      });\n    if (name.size() != 0) {\n      return name.get(0);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    final List<String> name = new ArrayList<String>();\n    searcher.getIndexReader().document(docid, new StoredFieldVisitor() {\n        @Override\n        public boolean stringField(FieldInfo fieldInfo, IndexInput in, int numUTF8Bytes) throws IOException {\n          if (fieldInfo.name.equals(docNameField) && name.size() == 0) {\n            final byte[] b = new byte[numUTF8Bytes];\n            in.readBytes(b, 0, b.length);\n            name.add(new String(b, \"UTF-8\"));\n          } else {\n            in.seek(in.getFilePointer() + numUTF8Bytes);\n          }\n          return false;\n        }\n      });\n    if (name.size() != 0) {\n      return name.get(0);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/utils/DocNameExtractor#docName(IndexSearcher,int).mjava","sourceNew":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    final List<String> name = new ArrayList<String>();\n    searcher.getIndexReader().document(docid, new StoredFieldVisitor() {\n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n          name.add(value);\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) throws IOException {\n          if (!name.isEmpty()) {\n            return Status.STOP;\n          } else if (fieldInfo.name.equals(docNameField)) {\n            return Status.YES;\n          } else {\n            return Status.NO;\n          }\n        }\n      });\n    if (name.size() != 0) {\n      return name.get(0);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Extract the name of the input doc from the index.\n   * @param searcher access to the index.\n   * @param docid ID of doc whose name is needed.\n   * @return the name of the input doc as extracted from the index.\n   * @throws IOException if cannot extract the doc name from the index.\n   */\n  public String docName(IndexSearcher searcher, int docid) throws IOException {\n    final List<String> name = new ArrayList<String>();\n    searcher.getIndexReader().document(docid, new StoredFieldVisitor() {\n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n          name.add(value);\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) throws IOException {\n          if (!name.isEmpty()) {\n            return Status.STOP;\n          } else if (fieldInfo.name.equals(docNameField)) {\n            return Status.YES;\n          } else {\n            return Status.NO;\n          }\n        }\n      });\n    if (name.size() != 0) {\n      return name.get(0);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["06584e6e98d592b34e1329b384182f368d2025e8"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","1509f151d7692d84fae414b2b799ac06ba60fcb4","868da859b43505d9d2a023bfeae6dd0c795f5295"],"06584e6e98d592b34e1329b384182f368d2025e8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}