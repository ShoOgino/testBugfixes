{"path":"solr/core/src/java/org/apache/solr/handler/SnapShooter.FileCopier#copyFile(File,File,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter.FileCopier#copyFile(File,File,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapShooter.FileCopier#copyFile(File,File,boolean).mjava","sourceNew":"    public void copyFile(File source, File destination, boolean preserveFileDate)\n        throws IOException {\n      // check source exists\n      if (!source.exists()) {\n        String message = \"File \" + source + \" does not exist\";\n        throw new FileNotFoundException(message);\n      }\n\n      // does destinations directory exist ?\n      if (destination.getParentFile() != null\n          && !destination.getParentFile().exists()) {\n        destination.getParentFile().mkdirs();\n      }\n\n      // make sure we can write to destination\n      if (destination.exists() && !destination.canWrite()) {\n        String message = \"Unable to open file \" + destination + \" for writing.\";\n        throw new IOException(message);\n      }\n\n      FileInputStream input = null;\n      FileOutputStream output = null;\n      try {\n        input = new FileInputStream(source);\n        output = new FileOutputStream(destination);\n \n        int count = 0;\n        int n = 0;\n        int rcnt = 0;\n        while (-1 != (n = input.read(buffer))) {\n          output.write(buffer, 0, n);\n          count += n;\n          rcnt++;\n          /***\n          // reserve every 4.6875 MB\n          if (rcnt == 150) {\n            rcnt = 0;\n            delPolicy.setReserveDuration(indexCommit.getVersion(), reserveTime);\n          }\n           ***/\n        }\n      } finally {\n        try {\n          IOUtils.closeQuietly(input);\n        } finally {\n          IOUtils.closeQuietly(output);\n        }\n      }\n\n      if (source.length() != destination.length()) {\n        String message = \"Failed to copy full contents from \" + source + \" to \"\n            + destination;\n        throw new IOException(message);\n      }\n\n      if (preserveFileDate) {\n        // file copy should preserve file date\n        destination.setLastModified(source.lastModified());\n      }\n    }\n\n","sourceOld":"    public void copyFile(File source, File destination, boolean preserveFileDate)\n        throws IOException {\n      // check source exists\n      if (!source.exists()) {\n        String message = \"File \" + source + \" does not exist\";\n        throw new FileNotFoundException(message);\n      }\n\n      // does destinations directory exist ?\n      if (destination.getParentFile() != null\n          && !destination.getParentFile().exists()) {\n        destination.getParentFile().mkdirs();\n      }\n\n      // make sure we can write to destination\n      if (destination.exists() && !destination.canWrite()) {\n        String message = \"Unable to open file \" + destination + \" for writing.\";\n        throw new IOException(message);\n      }\n\n      FileInputStream input = null;\n      FileOutputStream output = null;\n      try {\n        input = new FileInputStream(source);\n        output = new FileOutputStream(destination);\n \n        int count = 0;\n        int n = 0;\n        int rcnt = 0;\n        while (-1 != (n = input.read(buffer))) {\n          output.write(buffer, 0, n);\n          count += n;\n          rcnt++;\n          /***\n          // reserve every 4.6875 MB\n          if (rcnt == 150) {\n            rcnt = 0;\n            delPolicy.setReserveDuration(indexCommit.getVersion(), reserveTime);\n          }\n           ***/\n        }\n      } finally {\n        try {\n          IOUtils.closeQuietly(input);\n        } finally {\n          IOUtils.closeQuietly(output);\n        }\n      }\n\n      if (source.length() != destination.length()) {\n        String message = \"Failed to copy full contents from \" + source + \" to \"\n            + destination;\n        throw new IOException(message);\n      }\n\n      if (preserveFileDate) {\n        // file copy should preserve file date\n        destination.setLastModified(source.lastModified());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter.FileCopier#copyFile(File,File,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapShooter.FileCopier#copyFile(File,File,boolean).mjava","sourceNew":"    public void copyFile(File source, File destination, boolean preserveFileDate)\n        throws IOException {\n      // check source exists\n      if (!source.exists()) {\n        String message = \"File \" + source + \" does not exist\";\n        throw new FileNotFoundException(message);\n      }\n\n      // does destinations directory exist ?\n      if (destination.getParentFile() != null\n          && !destination.getParentFile().exists()) {\n        destination.getParentFile().mkdirs();\n      }\n\n      // make sure we can write to destination\n      if (destination.exists() && !destination.canWrite()) {\n        String message = \"Unable to open file \" + destination + \" for writing.\";\n        throw new IOException(message);\n      }\n\n      FileInputStream input = null;\n      FileOutputStream output = null;\n      try {\n        input = new FileInputStream(source);\n        output = new FileOutputStream(destination);\n \n        int count = 0;\n        int n = 0;\n        int rcnt = 0;\n        while (-1 != (n = input.read(buffer))) {\n          output.write(buffer, 0, n);\n          count += n;\n          rcnt++;\n          /***\n          // reserve every 4.6875 MB\n          if (rcnt == 150) {\n            rcnt = 0;\n            delPolicy.setReserveDuration(indexCommit.getVersion(), reserveTime);\n          }\n           ***/\n        }\n      } finally {\n        try {\n          IOUtils.closeQuietly(input);\n        } finally {\n          IOUtils.closeQuietly(output);\n        }\n      }\n\n      if (source.length() != destination.length()) {\n        String message = \"Failed to copy full contents from \" + source + \" to \"\n            + destination;\n        throw new IOException(message);\n      }\n\n      if (preserveFileDate) {\n        // file copy should preserve file date\n        destination.setLastModified(source.lastModified());\n      }\n    }\n\n","sourceOld":"    public void copyFile(File source, File destination, boolean preserveFileDate)\n        throws IOException {\n      // check source exists\n      if (!source.exists()) {\n        String message = \"File \" + source + \" does not exist\";\n        throw new FileNotFoundException(message);\n      }\n\n      // does destinations directory exist ?\n      if (destination.getParentFile() != null\n          && !destination.getParentFile().exists()) {\n        destination.getParentFile().mkdirs();\n      }\n\n      // make sure we can write to destination\n      if (destination.exists() && !destination.canWrite()) {\n        String message = \"Unable to open file \" + destination + \" for writing.\";\n        throw new IOException(message);\n      }\n\n      FileInputStream input = null;\n      FileOutputStream output = null;\n      try {\n        input = new FileInputStream(source);\n        output = new FileOutputStream(destination);\n \n        int count = 0;\n        int n = 0;\n        int rcnt = 0;\n        while (-1 != (n = input.read(buffer))) {\n          output.write(buffer, 0, n);\n          count += n;\n          rcnt++;\n          /***\n          // reserve every 4.6875 MB\n          if (rcnt == 150) {\n            rcnt = 0;\n            delPolicy.setReserveDuration(indexCommit.getVersion(), reserveTime);\n          }\n           ***/\n        }\n      } finally {\n        try {\n          IOUtils.closeQuietly(input);\n        } finally {\n          IOUtils.closeQuietly(output);\n        }\n      }\n\n      if (source.length() != destination.length()) {\n        String message = \"Failed to copy full contents from \" + source + \" to \"\n            + destination;\n        throw new IOException(message);\n      }\n\n      if (preserveFileDate) {\n        // file copy should preserve file date\n        destination.setLastModified(source.lastModified());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter.FileCopier#copyFile(File,File,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapShooter.FileCopier#copyFile(File,File,boolean).mjava","sourceNew":"    public void copyFile(File source, File destination, boolean preserveFileDate)\n        throws IOException {\n      // check source exists\n      if (!source.exists()) {\n        String message = \"File \" + source + \" does not exist\";\n        throw new FileNotFoundException(message);\n      }\n\n      // does destinations directory exist ?\n      if (destination.getParentFile() != null\n          && !destination.getParentFile().exists()) {\n        destination.getParentFile().mkdirs();\n      }\n\n      // make sure we can write to destination\n      if (destination.exists() && !destination.canWrite()) {\n        String message = \"Unable to open file \" + destination + \" for writing.\";\n        throw new IOException(message);\n      }\n\n      FileInputStream input = null;\n      FileOutputStream output = null;\n      try {\n        input = new FileInputStream(source);\n        output = new FileOutputStream(destination);\n \n        int count = 0;\n        int n = 0;\n        int rcnt = 0;\n        while (-1 != (n = input.read(buffer))) {\n          output.write(buffer, 0, n);\n          count += n;\n          rcnt++;\n          /***\n          // reserve every 4.6875 MB\n          if (rcnt == 150) {\n            rcnt = 0;\n            delPolicy.setReserveDuration(indexCommit.getVersion(), reserveTime);\n          }\n           ***/\n        }\n      } finally {\n        try {\n          IOUtils.closeQuietly(input);\n        } finally {\n          IOUtils.closeQuietly(output);\n        }\n      }\n\n      if (source.length() != destination.length()) {\n        String message = \"Failed to copy full contents from \" + source + \" to \"\n            + destination;\n        throw new IOException(message);\n      }\n\n      if (preserveFileDate) {\n        // file copy should preserve file date\n        destination.setLastModified(source.lastModified());\n      }\n    }\n\n","sourceOld":"    public void copyFile(File source, File destination, boolean preserveFileDate)\n        throws IOException {\n      // check source exists\n      if (!source.exists()) {\n        String message = \"File \" + source + \" does not exist\";\n        throw new FileNotFoundException(message);\n      }\n\n      // does destinations directory exist ?\n      if (destination.getParentFile() != null\n          && !destination.getParentFile().exists()) {\n        destination.getParentFile().mkdirs();\n      }\n\n      // make sure we can write to destination\n      if (destination.exists() && !destination.canWrite()) {\n        String message = \"Unable to open file \" + destination + \" for writing.\";\n        throw new IOException(message);\n      }\n\n      FileInputStream input = null;\n      FileOutputStream output = null;\n      try {\n        input = new FileInputStream(source);\n        output = new FileOutputStream(destination);\n \n        int count = 0;\n        int n = 0;\n        int rcnt = 0;\n        while (-1 != (n = input.read(buffer))) {\n          output.write(buffer, 0, n);\n          count += n;\n          rcnt++;\n          /***\n          // reserve every 4.6875 MB\n          if (rcnt == 150) {\n            rcnt = 0;\n            delPolicy.setReserveDuration(indexCommit.getVersion(), reserveTime);\n          }\n           ***/\n        }\n      } finally {\n        try {\n          IOUtils.closeQuietly(input);\n        } finally {\n          IOUtils.closeQuietly(output);\n        }\n      }\n\n      if (source.length() != destination.length()) {\n        String message = \"Failed to copy full contents from \" + source + \" to \"\n            + destination;\n        throw new IOException(message);\n      }\n\n      if (preserveFileDate) {\n        // file copy should preserve file date\n        destination.setLastModified(source.lastModified());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60","date":1321493601,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapShooter.FileCopier#copyFile(File,File,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter.FileCopier#copyFile(File,File,boolean).mjava","sourceNew":"    public void copyFile(File source, File destination, boolean preserveFileDate)\n      throws IOException {\n      // check source exists\n      if (!source.exists()) {\n        String message = \"File \" + source + \" does not exist\";\n        throw new FileNotFoundException(message);\n      }\n\n      // does destinations directory exist ?\n      if (destination.getParentFile() != null\n          && !destination.getParentFile().exists()) {\n        destination.getParentFile().mkdirs();\n      }\n\n      // make sure we can write to destination\n      if (destination.exists() && !destination.canWrite()) {\n        String message = \"Unable to open file \" + destination + \" for writing.\";\n        throw new IOException(message);\n      }\n\n      FileInputStream input = null;\n      FileOutputStream output = null;\n      try {\n        input = new FileInputStream(source);\n        output = new FileOutputStream(destination);\n \n        int count = 0;\n        int n = 0;\n        int rcnt = 0;\n        while (-1 != (n = input.read(buffer))) {\n          output.write(buffer, 0, n);\n          count += n;\n          rcnt++;\n          /***\n          // reserve every 4.6875 MB\n          if (rcnt == 150) {\n            rcnt = 0;\n            delPolicy.setReserveDuration(indexCommit.getVersion(), reserveTime);\n          }\n           ***/\n        }\n      } finally {\n        try {\n          IOUtils.closeQuietly(input);\n        } finally {\n          IOUtils.closeQuietly(output);\n        }\n      }\n\n      if (source.length() != destination.length()) {\n        String message = \"Failed to copy full contents from \" + source + \" to \"\n          + destination;\n        throw new IOException(message);\n      }\n\n      if (preserveFileDate) {\n        // file copy should preserve file date\n        destination.setLastModified(source.lastModified());\n      }\n    }\n\n","sourceOld":"    public void copyFile(File source, File destination, boolean preserveFileDate)\n        throws IOException {\n      // check source exists\n      if (!source.exists()) {\n        String message = \"File \" + source + \" does not exist\";\n        throw new FileNotFoundException(message);\n      }\n\n      // does destinations directory exist ?\n      if (destination.getParentFile() != null\n          && !destination.getParentFile().exists()) {\n        destination.getParentFile().mkdirs();\n      }\n\n      // make sure we can write to destination\n      if (destination.exists() && !destination.canWrite()) {\n        String message = \"Unable to open file \" + destination + \" for writing.\";\n        throw new IOException(message);\n      }\n\n      FileInputStream input = null;\n      FileOutputStream output = null;\n      try {\n        input = new FileInputStream(source);\n        output = new FileOutputStream(destination);\n \n        int count = 0;\n        int n = 0;\n        int rcnt = 0;\n        while (-1 != (n = input.read(buffer))) {\n          output.write(buffer, 0, n);\n          count += n;\n          rcnt++;\n          /***\n          // reserve every 4.6875 MB\n          if (rcnt == 150) {\n            rcnt = 0;\n            delPolicy.setReserveDuration(indexCommit.getVersion(), reserveTime);\n          }\n           ***/\n        }\n      } finally {\n        try {\n          IOUtils.closeQuietly(input);\n        } finally {\n          IOUtils.closeQuietly(output);\n        }\n      }\n\n      if (source.length() != destination.length()) {\n        String message = \"Failed to copy full contents from \" + source + \" to \"\n            + destination;\n        throw new IOException(message);\n      }\n\n      if (preserveFileDate) {\n        // file copy should preserve file date\n        destination.setLastModified(source.lastModified());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter.FileCopier#copyFile(File,File,boolean).mjava","sourceNew":null,"sourceOld":"    public void copyFile(File source, File destination, boolean preserveFileDate)\n      throws IOException {\n      // check source exists\n      if (!source.exists()) {\n        String message = \"File \" + source + \" does not exist\";\n        throw new FileNotFoundException(message);\n      }\n\n      // does destinations directory exist ?\n      if (destination.getParentFile() != null\n          && !destination.getParentFile().exists()) {\n        destination.getParentFile().mkdirs();\n      }\n\n      // make sure we can write to destination\n      if (destination.exists() && !destination.canWrite()) {\n        String message = \"Unable to open file \" + destination + \" for writing.\";\n        throw new IOException(message);\n      }\n\n      FileInputStream input = null;\n      FileOutputStream output = null;\n      try {\n        input = new FileInputStream(source);\n        output = new FileOutputStream(destination);\n \n        int count = 0;\n        int n = 0;\n        int rcnt = 0;\n        while (-1 != (n = input.read(buffer))) {\n          output.write(buffer, 0, n);\n          count += n;\n          rcnt++;\n          /***\n          // reserve every 4.6875 MB\n          if (rcnt == 150) {\n            rcnt = 0;\n            delPolicy.setReserveDuration(indexCommit.getVersion(), reserveTime);\n          }\n           ***/\n        }\n      } finally {\n        try {\n          IOUtils.closeQuietly(input);\n        } finally {\n          IOUtils.closeQuietly(output);\n        }\n      }\n\n      if (source.length() != destination.length()) {\n        String message = \"Failed to copy full contents from \" + source + \" to \"\n          + destination;\n        throw new IOException(message);\n      }\n\n      if (preserveFileDate) {\n        // file copy should preserve file date\n        destination.setLastModified(source.lastModified());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapShooter.FileCopier#copyFile(File,File,boolean).mjava","sourceNew":null,"sourceOld":"    public void copyFile(File source, File destination, boolean preserveFileDate)\n      throws IOException {\n      // check source exists\n      if (!source.exists()) {\n        String message = \"File \" + source + \" does not exist\";\n        throw new FileNotFoundException(message);\n      }\n\n      // does destinations directory exist ?\n      if (destination.getParentFile() != null\n          && !destination.getParentFile().exists()) {\n        destination.getParentFile().mkdirs();\n      }\n\n      // make sure we can write to destination\n      if (destination.exists() && !destination.canWrite()) {\n        String message = \"Unable to open file \" + destination + \" for writing.\";\n        throw new IOException(message);\n      }\n\n      FileInputStream input = null;\n      FileOutputStream output = null;\n      try {\n        input = new FileInputStream(source);\n        output = new FileOutputStream(destination);\n \n        int count = 0;\n        int n = 0;\n        int rcnt = 0;\n        while (-1 != (n = input.read(buffer))) {\n          output.write(buffer, 0, n);\n          count += n;\n          rcnt++;\n          /***\n          // reserve every 4.6875 MB\n          if (rcnt == 150) {\n            rcnt = 0;\n            delPolicy.setReserveDuration(indexCommit.getVersion(), reserveTime);\n          }\n           ***/\n        }\n      } finally {\n        try {\n          IOUtils.closeQuietly(input);\n        } finally {\n          IOUtils.closeQuietly(output);\n        }\n      }\n\n      if (source.length() != destination.length()) {\n        String message = \"Failed to copy full contents from \" + source + \" to \"\n          + destination;\n        throw new IOException(message);\n      }\n\n      if (preserveFileDate) {\n        // file copy should preserve file date\n        destination.setLastModified(source.lastModified());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60"],"f2126b84bd093fa3d921582a109a0ee578c28126":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9405f486872f1e416304dfe389741f4ee2f8a4d"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"4f11ea4f58f7fefe4a8c99ee19b3c388d7f98d60":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}