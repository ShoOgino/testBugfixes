{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testRandomStrings().mjava","commits":[{"id":"1a6997833904932b5332aede01bfd0f7ce4df318","date":1327398621,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testRandomStrings().mjava","pathOld":"/dev/null","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new NGramTokenizer(reader, 2, 15);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testRandomStrings().mjava","pathOld":"/dev/null","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new NGramTokenizer(reader, 2, 15);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testRandomStrings().mjava","pathOld":"/dev/null","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new NGramTokenizer(reader, 2, 15);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c983d9f75169f8df08cc7d8006298cddc144075","date":1332524353,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testRandomStrings().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new NGramTokenizer(reader, 2, 15);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER);\n    checkRandomData(random, a, 200*RANDOM_MULTIPLIER, 8192);\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new NGramTokenizer(reader, 2, 15);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER);\n  }\n\n","bugFix":null,"bugIntro":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"888c2d6bca1edd8d9293631d6e1d188b036e0f05","date":1334076894,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testRandomStrings().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new NGramTokenizer(reader, 2, 15);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random, a, 200*RANDOM_MULTIPLIER, 8192, false, false);\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new NGramTokenizer(reader, 2, 15);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER);\n    checkRandomData(random, a, 200*RANDOM_MULTIPLIER, 8192);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","date":1334174049,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testRandomStrings().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new NGramTokenizer(reader, 2, 15);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random, a, 200*RANDOM_MULTIPLIER, 8192, false, false);\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new NGramTokenizer(reader, 2, 15);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER);\n    checkRandomData(random, a, 200*RANDOM_MULTIPLIER, 8192);\n  }\n\n","bugFix":["8c983d9f75169f8df08cc7d8006298cddc144075","1a6997833904932b5332aede01bfd0f7ce4df318"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testRandomStrings().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new NGramTokenizer(reader, 2, 15);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 10000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), a, 200*RANDOM_MULTIPLIER, 8192, false, false);\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new NGramTokenizer(reader, 2, 15);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random, a, 200*RANDOM_MULTIPLIER, 8192, false, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testRandomStrings().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/NGramTokenizerTest#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new NGramTokenizer(reader, 2, 15);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 10000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), a, 200*RANDOM_MULTIPLIER, 8192, false, false);\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new NGramTokenizer(reader, 2, 15);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 10000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), a, 200*RANDOM_MULTIPLIER, 8192, false, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"888c2d6bca1edd8d9293631d6e1d188b036e0f05":["8c983d9f75169f8df08cc7d8006298cddc144075"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1a6997833904932b5332aede01bfd0f7ce4df318"],"1a6997833904932b5332aede01bfd0f7ce4df318":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["8c983d9f75169f8df08cc7d8006298cddc144075","888c2d6bca1edd8d9293631d6e1d188b036e0f05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1a6997833904932b5332aede01bfd0f7ce4df318"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8c983d9f75169f8df08cc7d8006298cddc144075":["1a6997833904932b5332aede01bfd0f7ce4df318"]},"commit2Childs":{"888c2d6bca1edd8d9293631d6e1d188b036e0f05":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"1a6997833904932b5332aede01bfd0f7ce4df318":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8c983d9f75169f8df08cc7d8006298cddc144075"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","1a6997833904932b5332aede01bfd0f7ce4df318","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8c983d9f75169f8df08cc7d8006298cddc144075":["888c2d6bca1edd8d9293631d6e1d188b036e0f05","ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}