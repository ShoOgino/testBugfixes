{"path":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testRename().mjava","commits":[{"id":"46e4a8bdfbafda795ef9c39a2bc2d47095770299","date":1410411846,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testRename().mjava","pathOld":"/dev/null","sourceNew":"  public void testRename() throws IOException {\n    String[] listAll = directory.listAll();\n    for (String file : listAll) {\n      directory.deleteFile(file);\n    }\n    \n    IndexOutput output = directory.createOutput(\"testing.test\", new IOContext());\n    output.writeInt(12345);\n    output.close();\n    directory.renameFile(\"testing.test\", \"testing.test.renamed\");\n    assertFalse(slowFileExists(directory, \"testing.test\"));\n    assertTrue(slowFileExists(directory, \"testing.test.renamed\"));\n    IndexInput input = directory.openInput(\"testing.test.renamed\", new IOContext());\n    assertEquals(12345, input.readInt());\n    assertEquals(input.getFilePointer(), input.length());\n    input.close();\n    directory.deleteFile(\"testing.test.renamed\");\n    assertFalse(slowFileExists(directory, \"testing.test.renamed\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testRename().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testRename().mjava","sourceNew":"  public void testRename() throws IOException {\n    String[] listAll = directory.listAll();\n    directory.deleteFiles(Arrays.asList(listAll));\n    \n    IndexOutput output = directory.createOutput(\"testing.test\", new IOContext());\n    output.writeInt(12345);\n    output.close();\n    directory.renameFile(\"testing.test\", \"testing.test.renamed\");\n    assertFalse(slowFileExists(directory, \"testing.test\"));\n    assertTrue(slowFileExists(directory, \"testing.test.renamed\"));\n    IndexInput input = directory.openInput(\"testing.test.renamed\", new IOContext());\n    assertEquals(12345, input.readInt());\n    assertEquals(input.getFilePointer(), input.length());\n    input.close();\n    directory.deleteFiles(Collections.singleton(\"testing.test.renamed\"));\n    assertFalse(slowFileExists(directory, \"testing.test.renamed\"));\n  }\n\n","sourceOld":"  public void testRename() throws IOException {\n    String[] listAll = directory.listAll();\n    for (String file : listAll) {\n      directory.deleteFile(file);\n    }\n    \n    IndexOutput output = directory.createOutput(\"testing.test\", new IOContext());\n    output.writeInt(12345);\n    output.close();\n    directory.renameFile(\"testing.test\", \"testing.test.renamed\");\n    assertFalse(slowFileExists(directory, \"testing.test\"));\n    assertTrue(slowFileExists(directory, \"testing.test.renamed\"));\n    IndexInput input = directory.openInput(\"testing.test.renamed\", new IOContext());\n    assertEquals(12345, input.readInt());\n    assertEquals(input.getFilePointer(), input.length());\n    input.close();\n    directory.deleteFile(\"testing.test.renamed\");\n    assertFalse(slowFileExists(directory, \"testing.test.renamed\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44a0466296f4b2d9deac60e3e524628c97aa5191","date":1454532248,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testRename().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testRename().mjava","sourceNew":"  public void testRename() throws IOException {\n    String[] listAll = directory.listAll();\n    for (String file : listAll) {\n      directory.deleteFile(file);\n    }\n    \n    IndexOutput output = directory.createOutput(\"testing.test\", new IOContext());\n    output.writeInt(12345);\n    output.close();\n    directory.renameFile(\"testing.test\", \"testing.test.renamed\");\n    assertFalse(slowFileExists(directory, \"testing.test\"));\n    assertTrue(slowFileExists(directory, \"testing.test.renamed\"));\n    IndexInput input = directory.openInput(\"testing.test.renamed\", new IOContext());\n    assertEquals(12345, input.readInt());\n    assertEquals(input.getFilePointer(), input.length());\n    input.close();\n    directory.deleteFile(\"testing.test.renamed\");\n    assertFalse(slowFileExists(directory, \"testing.test.renamed\"));\n  }\n\n","sourceOld":"  public void testRename() throws IOException {\n    String[] listAll = directory.listAll();\n    directory.deleteFiles(Arrays.asList(listAll));\n    \n    IndexOutput output = directory.createOutput(\"testing.test\", new IOContext());\n    output.writeInt(12345);\n    output.close();\n    directory.renameFile(\"testing.test\", \"testing.test.renamed\");\n    assertFalse(slowFileExists(directory, \"testing.test\"));\n    assertTrue(slowFileExists(directory, \"testing.test.renamed\"));\n    IndexInput input = directory.openInput(\"testing.test.renamed\", new IOContext());\n    assertEquals(12345, input.readInt());\n    assertEquals(input.getFilePointer(), input.length());\n    input.close();\n    directory.deleteFiles(Collections.singleton(\"testing.test.renamed\"));\n    assertFalse(slowFileExists(directory, \"testing.test.renamed\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"214256b5eeeaba88b8293b37d30460b462b19562","date":1468250146,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testRename().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testRename().mjava","sourceNew":"  public void testRename() throws IOException {\n    String[] listAll = directory.listAll();\n    for (String file : listAll) {\n      directory.deleteFile(file);\n    }\n    \n    IndexOutput output = directory.createOutput(\"testing.test\", new IOContext());\n    output.writeInt(12345);\n    output.close();\n    directory.rename(\"testing.test\", \"testing.test.renamed\");\n    assertFalse(slowFileExists(directory, \"testing.test\"));\n    assertTrue(slowFileExists(directory, \"testing.test.renamed\"));\n    IndexInput input = directory.openInput(\"testing.test.renamed\", new IOContext());\n    assertEquals(12345, input.readInt());\n    assertEquals(input.getFilePointer(), input.length());\n    input.close();\n    directory.deleteFile(\"testing.test.renamed\");\n    assertFalse(slowFileExists(directory, \"testing.test.renamed\"));\n  }\n\n","sourceOld":"  public void testRename() throws IOException {\n    String[] listAll = directory.listAll();\n    for (String file : listAll) {\n      directory.deleteFile(file);\n    }\n    \n    IndexOutput output = directory.createOutput(\"testing.test\", new IOContext());\n    output.writeInt(12345);\n    output.close();\n    directory.renameFile(\"testing.test\", \"testing.test.renamed\");\n    assertFalse(slowFileExists(directory, \"testing.test\"));\n    assertTrue(slowFileExists(directory, \"testing.test.renamed\"));\n    IndexInput input = directory.openInput(\"testing.test.renamed\", new IOContext());\n    assertEquals(12345, input.readInt());\n    assertEquals(input.getFilePointer(), input.length());\n    input.close();\n    directory.deleteFile(\"testing.test.renamed\");\n    assertFalse(slowFileExists(directory, \"testing.test.renamed\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testRename().mjava","pathOld":"solr/core/src/test/org/apache/solr/store/hdfs/HdfsDirectoryTest#testRename().mjava","sourceNew":"  public void testRename() throws IOException {\n    String[] listAll = directory.listAll();\n    for (String file : listAll) {\n      directory.deleteFile(file);\n    }\n    \n    IndexOutput output = directory.createOutput(\"testing.test\", new IOContext());\n    output.writeInt(12345);\n    output.close();\n    directory.rename(\"testing.test\", \"testing.test.renamed\");\n    assertFalse(slowFileExists(directory, \"testing.test\"));\n    assertTrue(slowFileExists(directory, \"testing.test.renamed\"));\n    IndexInput input = directory.openInput(\"testing.test.renamed\", new IOContext());\n    assertEquals(12345, input.readInt());\n    assertEquals(input.getFilePointer(), input.length());\n    input.close();\n    directory.deleteFile(\"testing.test.renamed\");\n    assertFalse(slowFileExists(directory, \"testing.test.renamed\"));\n  }\n\n","sourceOld":"  public void testRename() throws IOException {\n    String[] listAll = directory.listAll();\n    for (String file : listAll) {\n      directory.deleteFile(file);\n    }\n    \n    IndexOutput output = directory.createOutput(\"testing.test\", new IOContext());\n    output.writeInt(12345);\n    output.close();\n    directory.renameFile(\"testing.test\", \"testing.test.renamed\");\n    assertFalse(slowFileExists(directory, \"testing.test\"));\n    assertTrue(slowFileExists(directory, \"testing.test.renamed\"));\n    IndexInput input = directory.openInput(\"testing.test.renamed\", new IOContext());\n    assertEquals(12345, input.readInt());\n    assertEquals(input.getFilePointer(), input.length());\n    input.close();\n    directory.deleteFile(\"testing.test.renamed\");\n    assertFalse(slowFileExists(directory, \"testing.test.renamed\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"214256b5eeeaba88b8293b37d30460b462b19562":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"44a0466296f4b2d9deac60e3e524628c97aa5191":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["46e4a8bdfbafda795ef9c39a2bc2d47095770299","214256b5eeeaba88b8293b37d30460b462b19562"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["214256b5eeeaba88b8293b37d30460b462b19562"]},"commit2Childs":{"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["214256b5eeeaba88b8293b37d30460b462b19562","6bfe104fc023fadc9e709f8d17403d2cc61133fe","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"214256b5eeeaba88b8293b37d30460b462b19562":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["44a0466296f4b2d9deac60e3e524628c97aa5191"],"44a0466296f4b2d9deac60e3e524628c97aa5191":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["44a0466296f4b2d9deac60e3e524628c97aa5191","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}