{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testArraySort().mjava","commits":[{"id":"53532a40300123386304e8ffd97c1df9cf57ab94","date":1496675957,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testArraySort().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testArraySort() throws Exception {\n    String cexpr = \"arraySort(array(11.5, 12.3, 4, 3, 1, 0))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    List<Number> asort = (List<Number>)tuple.get(\"return-value\");\n    assertEquals(asort.size(), 6);\n    assertEquals(asort.get(0).doubleValue(), 0, 0.0);\n    assertEquals(asort.get(1).doubleValue(), 1, 0.0);\n    assertEquals(asort.get(2).doubleValue(), 3, 0.0);\n    assertEquals(asort.get(3).doubleValue(), 4, 0.0);\n    assertEquals(asort.get(4).doubleValue(), 11.5, 0.0);\n    assertEquals(asort.get(5).doubleValue(), 12.3, 0.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testArraySort().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testArraySort() throws Exception {\n    String cexpr = \"arraySort(array(11.5, 12.3, 4, 3, 1, 0))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    List<Number> asort = (List<Number>)tuple.get(\"return-value\");\n    assertEquals(asort.size(), 6);\n    assertEquals(asort.get(0).doubleValue(), 0, 0.0);\n    assertEquals(asort.get(1).doubleValue(), 1, 0.0);\n    assertEquals(asort.get(2).doubleValue(), 3, 0.0);\n    assertEquals(asort.get(3).doubleValue(), 4, 0.0);\n    assertEquals(asort.get(4).doubleValue(), 11.5, 0.0);\n    assertEquals(asort.get(5).doubleValue(), 12.3, 0.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"724c06d6273813e2687f254e082a0b66b190236d","date":1497878183,"type":4,"author":"Joel Bernstein","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testArraySort().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testArraySort() throws Exception {\n    String cexpr = \"arraySort(array(11.5, 12.3, 4, 3, 1, 0))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    List<Number> asort = (List<Number>)tuple.get(\"return-value\");\n    assertEquals(asort.size(), 6);\n    assertEquals(asort.get(0).doubleValue(), 0, 0.0);\n    assertEquals(asort.get(1).doubleValue(), 1, 0.0);\n    assertEquals(asort.get(2).doubleValue(), 3, 0.0);\n    assertEquals(asort.get(3).doubleValue(), 4, 0.0);\n    assertEquals(asort.get(4).doubleValue(), 11.5, 0.0);\n    assertEquals(asort.get(5).doubleValue(), 12.3, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testArraySort().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testArraySort() throws Exception {\n    String cexpr = \"arraySort(array(11.5, 12.3, 4, 3, 1, 0))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    List<Number> asort = (List<Number>)tuple.get(\"return-value\");\n    assertEquals(asort.size(), 6);\n    assertEquals(asort.get(0).doubleValue(), 0, 0.0);\n    assertEquals(asort.get(1).doubleValue(), 1, 0.0);\n    assertEquals(asort.get(2).doubleValue(), 3, 0.0);\n    assertEquals(asort.get(3).doubleValue(), 4, 0.0);\n    assertEquals(asort.get(4).doubleValue(), 11.5, 0.0);\n    assertEquals(asort.get(5).doubleValue(), 12.3, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","53532a40300123386304e8ffd97c1df9cf57ab94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"53532a40300123386304e8ffd97c1df9cf57ab94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","724c06d6273813e2687f254e082a0b66b190236d"],"724c06d6273813e2687f254e082a0b66b190236d":["53532a40300123386304e8ffd97c1df9cf57ab94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","53532a40300123386304e8ffd97c1df9cf57ab94","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"53532a40300123386304e8ffd97c1df9cf57ab94":["e9017cf144952056066919f1ebc7897ff9bd71b1","724c06d6273813e2687f254e082a0b66b190236d"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"724c06d6273813e2687f254e082a0b66b190236d":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}