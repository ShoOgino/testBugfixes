{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testToString().mjava","commits":[{"id":"dd4aa10c3623b9da92a555b8d04677af8fe86877","date":1456230278,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testToString().mjava","pathOld":"/dev/null","sourceNew":"  public void testToString() throws Exception {\n    assertEquals(\"<field:1>\", new BigIntegerPoint(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"<field:1,-2>\", new BigIntegerPoint(\"field\", BigInteger.ONE, BigInteger.valueOf(-2)).toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testToString().mjava","pathOld":"/dev/null","sourceNew":"  public void testToString() throws Exception {\n    assertEquals(\"<field:1>\", new BigIntegerPoint(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"<field:1,-2>\", new BigIntegerPoint(\"field\", BigInteger.ONE, BigInteger.valueOf(-2)).toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","date":1456306182,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testToString().mjava","pathOld":"/dev/null","sourceNew":"  public void testToString() throws Exception {\n    assertEquals(\"<field:1>\", new BigIntegerPoint(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"<field:1,-2>\", new BigIntegerPoint(\"field\", BigInteger.ONE, BigInteger.valueOf(-2)).toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8357a0b6e20da8f78592ec8e53dbd375b1026b","date":1456330381,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    assertEquals(\"BigIntegerPoint <field:1>\", new BigIntegerPoint(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"BigIntegerPoint <field:1,-2>\", new BigIntegerPoint(\"field\", BigInteger.ONE, BigInteger.valueOf(-2)).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    assertEquals(\"<field:1>\", new BigIntegerPoint(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"<field:1,-2>\", new BigIntegerPoint(\"field\", BigInteger.ONE, BigInteger.valueOf(-2)).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a60784094f4a1d4e4b03b3e8086bf55d3eeed","date":1456346320,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    assertEquals(\"BigIntegerPoint <field:1>\", new BigIntegerPoint(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"BigIntegerPoint <field:1,-2>\", new BigIntegerPoint(\"field\", BigInteger.ONE, BigInteger.valueOf(-2)).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    assertEquals(\"<field:1>\", new BigIntegerPoint(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"<field:1,-2>\", new BigIntegerPoint(\"field\", BigInteger.ONE, BigInteger.valueOf(-2)).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8","date":1456349953,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    assertEquals(\"BigIntegerPoint <field:1>\", new BigIntegerPoint(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"BigIntegerPoint <field:1,-2>\", new BigIntegerPoint(\"field\", BigInteger.ONE, BigInteger.valueOf(-2)).toString());\n    assertEquals(\"field:[1 TO 1]\", BigIntegerPoint.newExactQuery(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"field:{1 TO 17]\", BigIntegerPoint.newRangeQuery(\"field\", BigInteger.ONE, false, BigInteger.valueOf(17), true).toString());\n    assertEquals(\"field:{1 TO 17],[0 TO 42}\", BigIntegerPoint.newMultiRangeQuery(\"field\",\n                                                                                 new BigInteger[] {BigInteger.ONE, BigInteger.ZERO},\n                                                                                 new boolean[] {false, true},\n                                                                                 new BigInteger[] {BigInteger.valueOf(17), BigInteger.valueOf(42)},\n                                                                                 new boolean[] {true, false}).toString());\n    assertEquals(\"field:{1}\", BigIntegerPoint.newSetQuery(\"field\", BigInteger.ONE).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    assertEquals(\"BigIntegerPoint <field:1>\", new BigIntegerPoint(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"BigIntegerPoint <field:1,-2>\", new BigIntegerPoint(\"field\", BigInteger.ONE, BigInteger.valueOf(-2)).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9ccce763ea3c7e51eff749e584c061d8744b72d","date":1456395668,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testToString().mjava","sourceNew":null,"sourceOld":"  public void testToString() throws Exception {\n    assertEquals(\"BigIntegerPoint <field:1>\", new BigIntegerPoint(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"BigIntegerPoint <field:1,-2>\", new BigIntegerPoint(\"field\", BigInteger.ONE, BigInteger.valueOf(-2)).toString());\n    assertEquals(\"field:[1 TO 1]\", BigIntegerPoint.newExactQuery(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"field:{1 TO 17]\", BigIntegerPoint.newRangeQuery(\"field\", BigInteger.ONE, false, BigInteger.valueOf(17), true).toString());\n    assertEquals(\"field:{1 TO 17],[0 TO 42}\", BigIntegerPoint.newMultiRangeQuery(\"field\",\n                                                                                 new BigInteger[] {BigInteger.ONE, BigInteger.ZERO},\n                                                                                 new boolean[] {false, true},\n                                                                                 new BigInteger[] {BigInteger.valueOf(17), BigInteger.valueOf(42)},\n                                                                                 new boolean[] {true, false}).toString());\n    assertEquals(\"field:{1}\", BigIntegerPoint.newSetQuery(\"field\", BigInteger.ONE).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2666c8ef916fe551b88266a876c0320db0683dd","date":1456397478,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testToString().mjava","pathOld":"/dev/null","sourceNew":"  public void testToString() throws Exception {\n    assertEquals(\"BigIntegerPoint <field:1>\", new BigIntegerPoint(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"BigIntegerPoint <field:1,-2>\", new BigIntegerPoint(\"field\", BigInteger.ONE, BigInteger.valueOf(-2)).toString());\n    assertEquals(\"field:[1 TO 1]\", BigIntegerPoint.newExactQuery(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"field:{1 TO 17]\", BigIntegerPoint.newRangeQuery(\"field\", BigInteger.ONE, false, BigInteger.valueOf(17), true).toString());\n    assertEquals(\"field:{1 TO 17],[0 TO 42}\", BigIntegerPoint.newMultiRangeQuery(\"field\",\n                                                                                 new BigInteger[] {BigInteger.ONE, BigInteger.ZERO},\n                                                                                 new boolean[] {false, true},\n                                                                                 new BigInteger[] {BigInteger.valueOf(17), BigInteger.valueOf(42)},\n                                                                                 new boolean[] {true, false}).toString());\n    assertEquals(\"field:{1}\", BigIntegerPoint.newSetQuery(\"field\", BigInteger.ONE).toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868f63baffb79407d4b49f3c0be8dc4725ffc6e1","date":1456423715,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    assertEquals(\"BigIntegerPoint <field:1>\", new BigIntegerPoint(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"BigIntegerPoint <field:1,-2>\", new BigIntegerPoint(\"field\", BigInteger.ONE, BigInteger.valueOf(-2)).toString());\n    assertEquals(\"field:[1 TO 1]\", BigIntegerPoint.newExactQuery(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"field:{1 TO 17]\", BigIntegerPoint.newRangeQuery(\"field\", BigInteger.ONE, false, BigInteger.valueOf(17), true).toString());\n    assertEquals(\"field:{1 TO 17],[0 TO 42}\", BigIntegerPoint.newMultiRangeQuery(\"field\",\n                                                                                 new BigInteger[] {BigInteger.ONE, BigInteger.ZERO},\n                                                                                 new boolean[] {false, true},\n                                                                                 new BigInteger[] {BigInteger.valueOf(17), BigInteger.valueOf(42)},\n                                                                                 new boolean[] {true, false}).toString());\n    assertEquals(\"field:{1}\", BigIntegerPoint.newSetQuery(\"field\", BigInteger.ONE).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    assertEquals(\"BigIntegerPoint <field:1>\", new BigIntegerPoint(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"BigIntegerPoint <field:1,-2>\", new BigIntegerPoint(\"field\", BigInteger.ONE, BigInteger.valueOf(-2)).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    assertEquals(\"BigIntegerPoint <field:1>\", new BigIntegerPoint(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"BigIntegerPoint <field:1,-2>\", new BigIntegerPoint(\"field\", BigInteger.ONE, BigInteger.valueOf(-2)).toString());\n    assertEquals(\"field:[1 TO 1]\", BigIntegerPoint.newExactQuery(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"field:[1 TO 17]\", BigIntegerPoint.newRangeQuery(\"field\", BigInteger.ONE, BigInteger.valueOf(17)).toString());\n    assertEquals(\"field:[1 TO 17],[0 TO 42]\", BigIntegerPoint.newRangeQuery(\"field\",\n                                                                                 new BigInteger[] {BigInteger.ONE, BigInteger.ZERO},\n                                                                                 new BigInteger[] {BigInteger.valueOf(17), BigInteger.valueOf(42)}).toString());\n    assertEquals(\"field:{1}\", BigIntegerPoint.newSetQuery(\"field\", BigInteger.ONE).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    assertEquals(\"BigIntegerPoint <field:1>\", new BigIntegerPoint(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"BigIntegerPoint <field:1,-2>\", new BigIntegerPoint(\"field\", BigInteger.ONE, BigInteger.valueOf(-2)).toString());\n    assertEquals(\"field:[1 TO 1]\", BigIntegerPoint.newExactQuery(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"field:{1 TO 17]\", BigIntegerPoint.newRangeQuery(\"field\", BigInteger.ONE, false, BigInteger.valueOf(17), true).toString());\n    assertEquals(\"field:{1 TO 17],[0 TO 42}\", BigIntegerPoint.newMultiRangeQuery(\"field\",\n                                                                                 new BigInteger[] {BigInteger.ONE, BigInteger.ZERO},\n                                                                                 new boolean[] {false, true},\n                                                                                 new BigInteger[] {BigInteger.valueOf(17), BigInteger.valueOf(42)},\n                                                                                 new boolean[] {true, false}).toString());\n    assertEquals(\"field:{1}\", BigIntegerPoint.newSetQuery(\"field\", BigInteger.ONE).toString());\n  }\n\n","bugFix":["d2666c8ef916fe551b88266a876c0320db0683dd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    assertEquals(\"BigIntegerPoint <field:1>\", new BigIntegerPoint(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"BigIntegerPoint <field:1,-2>\", new BigIntegerPoint(\"field\", BigInteger.ONE, BigInteger.valueOf(-2)).toString());\n    assertEquals(\"field:[1 TO 1]\", BigIntegerPoint.newExactQuery(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"field:[1 TO 17]\", BigIntegerPoint.newRangeQuery(\"field\", BigInteger.ONE, BigInteger.valueOf(17)).toString());\n    assertEquals(\"field:[1 TO 17],[0 TO 42]\", BigIntegerPoint.newRangeQuery(\"field\",\n                                                                                 new BigInteger[] {BigInteger.ONE, BigInteger.ZERO},\n                                                                                 new BigInteger[] {BigInteger.valueOf(17), BigInteger.valueOf(42)}).toString());\n    assertEquals(\"field:{1}\", BigIntegerPoint.newSetQuery(\"field\", BigInteger.ONE).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    assertEquals(\"BigIntegerPoint <field:1>\", new BigIntegerPoint(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"BigIntegerPoint <field:1,-2>\", new BigIntegerPoint(\"field\", BigInteger.ONE, BigInteger.valueOf(-2)).toString());\n    assertEquals(\"field:[1 TO 1]\", BigIntegerPoint.newExactQuery(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"field:{1 TO 17]\", BigIntegerPoint.newRangeQuery(\"field\", BigInteger.ONE, false, BigInteger.valueOf(17), true).toString());\n    assertEquals(\"field:{1 TO 17],[0 TO 42}\", BigIntegerPoint.newMultiRangeQuery(\"field\",\n                                                                                 new BigInteger[] {BigInteger.ONE, BigInteger.ZERO},\n                                                                                 new boolean[] {false, true},\n                                                                                 new BigInteger[] {BigInteger.valueOf(17), BigInteger.valueOf(42)},\n                                                                                 new boolean[] {true, false}).toString());\n    assertEquals(\"field:{1}\", BigIntegerPoint.newSetQuery(\"field\", BigInteger.ONE).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testToString().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testToString().mjava","sourceNew":"  public void testToString() throws Exception {\n    assertEquals(\"BigIntegerPoint <field:1>\", new BigIntegerPoint(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"BigIntegerPoint <field:1,-2>\", new BigIntegerPoint(\"field\", BigInteger.ONE, BigInteger.valueOf(-2)).toString());\n    assertEquals(\"field:[1 TO 1]\", BigIntegerPoint.newExactQuery(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"field:[1 TO 17]\", BigIntegerPoint.newRangeQuery(\"field\", BigInteger.ONE, BigInteger.valueOf(17)).toString());\n    assertEquals(\"field:[1 TO 17],[0 TO 42]\", BigIntegerPoint.newRangeQuery(\"field\",\n                                                                                 new BigInteger[] {BigInteger.ONE, BigInteger.ZERO},\n                                                                                 new BigInteger[] {BigInteger.valueOf(17), BigInteger.valueOf(42)}).toString());\n    assertEquals(\"field:{1}\", BigIntegerPoint.newSetQuery(\"field\", BigInteger.ONE).toString());\n  }\n\n","sourceOld":"  public void testToString() throws Exception {\n    assertEquals(\"BigIntegerPoint <field:1>\", new BigIntegerPoint(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"BigIntegerPoint <field:1,-2>\", new BigIntegerPoint(\"field\", BigInteger.ONE, BigInteger.valueOf(-2)).toString());\n    assertEquals(\"field:[1 TO 1]\", BigIntegerPoint.newExactQuery(\"field\", BigInteger.ONE).toString());\n    assertEquals(\"field:{1 TO 17]\", BigIntegerPoint.newRangeQuery(\"field\", BigInteger.ONE, false, BigInteger.valueOf(17), true).toString());\n    assertEquals(\"field:{1 TO 17],[0 TO 42}\", BigIntegerPoint.newMultiRangeQuery(\"field\",\n                                                                                 new BigInteger[] {BigInteger.ONE, BigInteger.ZERO},\n                                                                                 new boolean[] {false, true},\n                                                                                 new BigInteger[] {BigInteger.valueOf(17), BigInteger.valueOf(42)},\n                                                                                 new boolean[] {true, false}).toString());\n    assertEquals(\"field:{1}\", BigIntegerPoint.newSetQuery(\"field\", BigInteger.ONE).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8":["e79a60784094f4a1d4e4b03b3e8086bf55d3eeed"],"dd4aa10c3623b9da92a555b8d04677af8fe86877":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a5296efc4b319f5647b606629c093a94b23692c6"],"c422e924212367b334b4938f1fd3e44438e88c40":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"cf8357a0b6e20da8f78592ec8e53dbd375b1026b":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"e79a60784094f4a1d4e4b03b3e8086bf55d3eeed":["dd4aa10c3623b9da92a555b8d04677af8fe86877","cf8357a0b6e20da8f78592ec8e53dbd375b1026b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["cf8357a0b6e20da8f78592ec8e53dbd375b1026b","d2666c8ef916fe551b88266a876c0320db0683dd"],"b9ccce763ea3c7e51eff749e584c061d8744b72d":["ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8"],"a5296efc4b319f5647b606629c093a94b23692c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dd4aa10c3623b9da92a555b8d04677af8fe86877"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1","c422e924212367b334b4938f1fd3e44438e88c40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"d2666c8ef916fe551b88266a876c0320db0683dd":["b9ccce763ea3c7e51eff749e584c061d8744b72d"]},"commit2Childs":{"ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8":["b9ccce763ea3c7e51eff749e584c061d8744b72d"],"dd4aa10c3623b9da92a555b8d04677af8fe86877":["e79a60784094f4a1d4e4b03b3e8086bf55d3eeed","a5296efc4b319f5647b606629c093a94b23692c6"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["cf8357a0b6e20da8f78592ec8e53dbd375b1026b"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"e79a60784094f4a1d4e4b03b3e8086bf55d3eeed":["ebfbe42b2dae57f9ac08706e76b0ab8bdf7011c8"],"cf8357a0b6e20da8f78592ec8e53dbd375b1026b":["e79a60784094f4a1d4e4b03b3e8086bf55d3eeed","868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd4aa10c3623b9da92a555b8d04677af8fe86877","1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","a5296efc4b319f5647b606629c093a94b23692c6"],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"b9ccce763ea3c7e51eff749e584c061d8744b72d":["d2666c8ef916fe551b88266a876c0320db0683dd"],"a5296efc4b319f5647b606629c093a94b23692c6":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2666c8ef916fe551b88266a876c0320db0683dd":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}