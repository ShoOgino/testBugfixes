{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#freq().mjava","commits":[{"id":"a74e723ad6f1491f36039f9fe6af13a530f8135d","date":1400774466,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#freq().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final int freq() throws IOException {\n    if (freq < 0) {\n      visitScorers();\n    }\n    return freq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251e6911800e3a02e1da3bfd4dc49a914aef9778","date":1423063783,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#freq().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#freq().mjava","sourceNew":"  @Override\n  public final int freq() throws IOException {\n    if (freq < 0) {\n      topScorers = subScorers.topList();\n      int freq = 1;\n      for (ScorerWrapper w = topScorers.next; w != null; w = w.next) {\n        freq += 1;\n      }\n      this.freq = freq;\n    }\n    return freq;\n  }\n\n","sourceOld":"  @Override\n  public final int freq() throws IOException {\n    if (freq < 0) {\n      visitScorers();\n    }\n    return freq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"835e9a6d1c5a6cc5684c905d972d68df554cfad5","date":1424111245,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#freq().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#freq().mjava","sourceNew":"  @Override\n  public final int freq() throws IOException {\n    if (topScorers == null) {\n      topScorers = subScorers.topList();\n    }\n    int freq = 1;\n    for (ScorerWrapper w = topScorers.next; w != null; w = w.next) {\n      freq += 1;\n    }\n    return freq;\n  }\n\n","sourceOld":"  @Override\n  public final int freq() throws IOException {\n    if (freq < 0) {\n      topScorers = subScorers.topList();\n      int freq = 1;\n      for (ScorerWrapper w = topScorers.next; w != null; w = w.next) {\n        freq += 1;\n      }\n      this.freq = freq;\n    }\n    return freq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7","date":1429852340,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#freq().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#freq().mjava","sourceNew":"  @Override\n  public final int freq() throws IOException {\n    if (topScorers == null) {\n      topScorers = subScorers.topList();\n    }\n    int freq = 1;\n    for (DisiWrapper<Scorer> w = topScorers.next; w != null; w = w.next) {\n      freq += 1;\n    }\n    return freq;\n  }\n\n","sourceOld":"  @Override\n  public final int freq() throws IOException {\n    if (topScorers == null) {\n      topScorers = subScorers.topList();\n    }\n    int freq = 1;\n    for (ScorerWrapper w = topScorers.next; w != null; w = w.next) {\n      freq += 1;\n    }\n    return freq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#freq().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#freq().mjava","sourceNew":"  @Override\n  public final int freq() throws IOException {\n    if (topScorers == null) {\n      topScorers = subScorers.topList();\n    }\n    int freq = 1;\n    for (DisiWrapper w = topScorers.next; w != null; w = w.next) {\n      freq += 1;\n    }\n    return freq;\n  }\n\n","sourceOld":"  @Override\n  public final int freq() throws IOException {\n    if (topScorers == null) {\n      topScorers = subScorers.topList();\n    }\n    int freq = 1;\n    for (DisiWrapper<Scorer> w = topScorers.next; w != null; w = w.next) {\n      freq += 1;\n    }\n    return freq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac8ce4febd838561b4317a75f81313066e6d91c3","date":1449851410,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#freq().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#freq().mjava","sourceNew":"  @Override\n  public final int freq() throws IOException {\n    DisiWrapper subMatches = getSubMatches();\n    int freq = 1;\n    for (DisiWrapper w = subMatches.next; w != null; w = w.next) {\n      freq += 1;\n    }\n    return freq;\n  }\n\n","sourceOld":"  @Override\n  public final int freq() throws IOException {\n    if (topScorers == null) {\n      topScorers = subScorers.topList();\n    }\n    int freq = 1;\n    for (DisiWrapper w = topScorers.next; w != null; w = w.next) {\n      freq += 1;\n    }\n    return freq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc14da055888b63b4f8c922d0e1579f3cb315ad7","date":1510744456,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#freq().mjava","sourceNew":null,"sourceOld":"  @Override\n  public final int freq() throws IOException {\n    DisiWrapper subMatches = getSubMatches();\n    int freq = 1;\n    for (DisiWrapper w = subMatches.next; w != null; w = w.next) {\n      freq += 1;\n    }\n    return freq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"251e6911800e3a02e1da3bfd4dc49a914aef9778":["a74e723ad6f1491f36039f9fe6af13a530f8135d"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["ac8ce4febd838561b4317a75f81313066e6d91c3"],"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"a74e723ad6f1491f36039f9fe6af13a530f8135d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac8ce4febd838561b4317a75f81313066e6d91c3":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"]},"commit2Childs":{"7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"251e6911800e3a02e1da3bfd4dc49a914aef9778":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["7fd9a42c79cabbf7d82cc6081cf4dac1324c99e7"],"a74e723ad6f1491f36039f9fe6af13a530f8135d":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a74e723ad6f1491f36039f9fe6af13a530f8135d"],"ac8ce4febd838561b4317a75f81313066e6d91c3":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["ac8ce4febd838561b4317a75f81313066e6d91c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}