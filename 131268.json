{"path":"src/java/org/apache/lucene/index/MultiSegmentReader#norms(String).mjava","commits":[{"id":"f7f2552b9f13037c62acd400d263d1e9262d6e4e","date":1185490328,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","sourceNew":"  public synchronized byte[] norms(String field) throws IOException {\r\n    ensureOpen();\r\n    byte[] bytes = (byte[])normsCache.get(field);\r\n    if (bytes != null)\r\n      return bytes;          // cache hit\r\n    if (!hasNorms(field))\r\n      return fakeNorms();\r\n\r\n    bytes = new byte[maxDoc()];\r\n    for (int i = 0; i < subReaders.length; i++)\r\n      subReaders[i].norms(field, bytes, starts[i]);\r\n    normsCache.put(field, bytes);      // update cache\r\n    return bytes;\r\n  }\r\n\n","sourceOld":"  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return fakeNorms();\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"520a9bce43d52d77add8f09727f7a698289d6882","date":1190097977,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader#norms(String).mjava","sourceNew":"  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return fakeNorms();\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","sourceOld":"  public synchronized byte[] norms(String field) throws IOException {\r\n    ensureOpen();\r\n    byte[] bytes = (byte[])normsCache.get(field);\r\n    if (bytes != null)\r\n      return bytes;          // cache hit\r\n    if (!hasNorms(field))\r\n      return fakeNorms();\r\n\r\n    bytes = new byte[maxDoc()];\r\n    for (int i = 0; i < subReaders.length; i++)\r\n      subReaders[i].norms(field, bytes, starts[i]);\r\n    normsCache.put(field, bytes);      // update cache\r\n    return bytes;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a","date":1240951127,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader#norms(String).mjava","sourceNew":"  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return getDisableFakeNorms() ? null : fakeNorms();\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","sourceOld":"  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return fakeNorms();\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader#norms(String).mjava","sourceNew":"  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return getDisableFakeNorms() ? null : fakeNorms();\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","sourceOld":"  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = (byte[])normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return getDisableFakeNorms() ? null : fakeNorms();\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"520a9bce43d52d77add8f09727f7a698289d6882":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["520a9bce43d52d77add8f09727f7a698289d6882"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"]},"commit2Childs":{"520a9bce43d52d77add8f09727f7a698289d6882":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["520a9bce43d52d77add8f09727f7a698289d6882"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}