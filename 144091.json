{"path":"src/java/org/apache/lucene/store/FSDirectory#init(File,LockFactory).mjava","commits":[{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#init(File,LockFactory).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#init(File,boolean,LockFactory,boolean).mjava","sourceNew":"  private void init(File path, LockFactory lockFactory) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    directory = path;\n\n    boolean doClearLockID = false;\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null && !lockClassName.equals(\"\")) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory;\n          // default lockDir is our index directory:\n          lockFactory = new SimpleFSLockFactory(path);\n          doClearLockID = true;\n        }\n      }\n    }\n\n    setLockFactory(lockFactory);\n\n    if (doClearLockID) {\n      // Clear the prefix because write.lock will be\n      // stored in our directory:\n      lockFactory.setLockPrefix(null);\n    }\n  }\n\n","sourceOld":"  private void init(File path, boolean create, LockFactory lockFactory, boolean doRemoveOldFiles) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    boolean doClearLockID = false;\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null && !lockClassName.equals(\"\")) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory;\n          // default lockDir is our index directory:\n          lockFactory = new SimpleFSLockFactory(path);\n          doClearLockID = true;\n        }\n      }\n    }\n\n    // Must initialize directory here because setLockFactory uses it\n    // (when the LockFactory calls getLockID).  But we want to create\n    // the lockFactory before calling init() because init() needs to\n    // use the lockFactory to clear old locks.  So this breaks\n    // chicken/egg:\n    directory = path;\n\n    setLockFactory(lockFactory);\n    if (doClearLockID) {\n      // Clear the prefix because write.lock will be\n      // stored in our directory:\n      lockFactory.setLockPrefix(null);\n    }\n\n    init(path, create, doRemoveOldFiles);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"088ce71f943a02facdb970ea99322af3d16af6d2","date":1172619211,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#init(File,LockFactory).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#init(File,LockFactory).mjava","sourceNew":"  private void init(File path, LockFactory lockFactory) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    directory = path;\n\n    boolean doClearLockID = false;\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null && !lockClassName.equals(\"\")) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n\n          if (lockFactory instanceof NativeFSLockFactory) {\n            ((NativeFSLockFactory) lockFactory).setLockDir(path);\n          } else if (lockFactory instanceof SimpleFSLockFactory) {\n            ((SimpleFSLockFactory) lockFactory).setLockDir(path);\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory;\n          // default lockDir is our index directory:\n          lockFactory = new SimpleFSLockFactory(path);\n          doClearLockID = true;\n        }\n      }\n    }\n\n    setLockFactory(lockFactory);\n\n    if (doClearLockID) {\n      // Clear the prefix because write.lock will be\n      // stored in our directory:\n      lockFactory.setLockPrefix(null);\n    }\n  }\n\n","sourceOld":"  private void init(File path, LockFactory lockFactory) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    directory = path;\n\n    boolean doClearLockID = false;\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null && !lockClassName.equals(\"\")) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory;\n          // default lockDir is our index directory:\n          lockFactory = new SimpleFSLockFactory(path);\n          doClearLockID = true;\n        }\n      }\n    }\n\n    setLockFactory(lockFactory);\n\n    if (doClearLockID) {\n      // Clear the prefix because write.lock will be\n      // stored in our directory:\n      lockFactory.setLockPrefix(null);\n    }\n  }\n\n","bugFix":null,"bugIntro":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2","245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b583d3621fe173e7296abcf62f82fb707c901234","date":1194717060,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#init(File,LockFactory,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#init(File,LockFactory).mjava","sourceNew":"  private void init(File path, LockFactory lockFactory, boolean doSync) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    directory = path;\n    this.doSync = doSync;\n\n    boolean doClearLockID = false;\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null && !lockClassName.equals(\"\")) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n\n          if (lockFactory instanceof NativeFSLockFactory) {\n            ((NativeFSLockFactory) lockFactory).setLockDir(path);\n          } else if (lockFactory instanceof SimpleFSLockFactory) {\n            ((SimpleFSLockFactory) lockFactory).setLockDir(path);\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory;\n          // default lockDir is our index directory:\n          lockFactory = new SimpleFSLockFactory(path);\n          doClearLockID = true;\n        }\n      }\n    }\n\n    setLockFactory(lockFactory);\n\n    if (doClearLockID) {\n      // Clear the prefix because write.lock will be\n      // stored in our directory:\n      lockFactory.setLockPrefix(null);\n    }\n  }\n\n","sourceOld":"  private void init(File path, LockFactory lockFactory) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    directory = path;\n\n    boolean doClearLockID = false;\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null && !lockClassName.equals(\"\")) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n\n          if (lockFactory instanceof NativeFSLockFactory) {\n            ((NativeFSLockFactory) lockFactory).setLockDir(path);\n          } else if (lockFactory instanceof SimpleFSLockFactory) {\n            ((SimpleFSLockFactory) lockFactory).setLockDir(path);\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory;\n          // default lockDir is our index directory:\n          lockFactory = new SimpleFSLockFactory(path);\n          doClearLockID = true;\n        }\n      }\n    }\n\n    setLockFactory(lockFactory);\n\n    if (doClearLockID) {\n      // Clear the prefix because write.lock will be\n      // stored in our directory:\n      lockFactory.setLockPrefix(null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a015c55424dd37249054283bedc90388bd45358f","date":1197049353,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#init(File,LockFactory).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#init(File,LockFactory,boolean).mjava","sourceNew":"  private void init(File path, LockFactory lockFactory) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    directory = path;\n\n    boolean doClearLockID = false;\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null && !lockClassName.equals(\"\")) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n\n          if (lockFactory instanceof NativeFSLockFactory) {\n            ((NativeFSLockFactory) lockFactory).setLockDir(path);\n          } else if (lockFactory instanceof SimpleFSLockFactory) {\n            ((SimpleFSLockFactory) lockFactory).setLockDir(path);\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory;\n          // default lockDir is our index directory:\n          lockFactory = new SimpleFSLockFactory(path);\n          doClearLockID = true;\n        }\n      }\n    }\n\n    setLockFactory(lockFactory);\n\n    if (doClearLockID) {\n      // Clear the prefix because write.lock will be\n      // stored in our directory:\n      lockFactory.setLockPrefix(null);\n    }\n  }\n\n","sourceOld":"  private void init(File path, LockFactory lockFactory, boolean doSync) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    directory = path;\n    this.doSync = doSync;\n\n    boolean doClearLockID = false;\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null && !lockClassName.equals(\"\")) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n\n          if (lockFactory instanceof NativeFSLockFactory) {\n            ((NativeFSLockFactory) lockFactory).setLockDir(path);\n          } else if (lockFactory instanceof SimpleFSLockFactory) {\n            ((SimpleFSLockFactory) lockFactory).setLockDir(path);\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory;\n          // default lockDir is our index directory:\n          lockFactory = new SimpleFSLockFactory(path);\n          doClearLockID = true;\n        }\n      }\n    }\n\n    setLockFactory(lockFactory);\n\n    if (doClearLockID) {\n      // Clear the prefix because write.lock will be\n      // stored in our directory:\n      lockFactory.setLockPrefix(null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d54c7739bfe85d68f0352823cd70c10c619fad38","date":1228496593,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#init(File,LockFactory).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#init(File,LockFactory).mjava","sourceNew":"  private void init(File path, LockFactory lockFactory) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    directory = path;\n\n    if (directory.exists() && !directory.isDirectory())\n      throw new NoSuchDirectoryException(\"file '\" + directory + \"' exists but is not a directory\");\n\n    boolean doClearLockID = false;\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null && !lockClassName.equals(\"\")) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n\n          if (lockFactory instanceof NativeFSLockFactory) {\n            ((NativeFSLockFactory) lockFactory).setLockDir(path);\n          } else if (lockFactory instanceof SimpleFSLockFactory) {\n            ((SimpleFSLockFactory) lockFactory).setLockDir(path);\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory;\n          // default lockDir is our index directory:\n          lockFactory = new SimpleFSLockFactory(path);\n          doClearLockID = true;\n        }\n      }\n    }\n\n    setLockFactory(lockFactory);\n\n    if (doClearLockID) {\n      // Clear the prefix because write.lock will be\n      // stored in our directory:\n      lockFactory.setLockPrefix(null);\n    }\n  }\n\n","sourceOld":"  private void init(File path, LockFactory lockFactory) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    directory = path;\n\n    boolean doClearLockID = false;\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null && !lockClassName.equals(\"\")) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n\n          if (lockFactory instanceof NativeFSLockFactory) {\n            ((NativeFSLockFactory) lockFactory).setLockDir(path);\n          } else if (lockFactory instanceof SimpleFSLockFactory) {\n            ((SimpleFSLockFactory) lockFactory).setLockDir(path);\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory;\n          // default lockDir is our index directory:\n          lockFactory = new SimpleFSLockFactory(path);\n          doClearLockID = true;\n        }\n      }\n    }\n\n    setLockFactory(lockFactory);\n\n    if (doClearLockID) {\n      // Clear the prefix because write.lock will be\n      // stored in our directory:\n      lockFactory.setLockPrefix(null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"416d032f85b7ea8efc272f86ba46bc460589aff7","date":1243881250,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#init(File,LockFactory).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#init(File,LockFactory).mjava","sourceNew":"  /* will move to ctor, when reflection is removed in 3.0 */\n  private void init(File path, LockFactory lockFactory) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    directory = path;\n\n    if (directory.exists() && !directory.isDirectory())\n      throw new NoSuchDirectoryException(\"file '\" + directory + \"' exists but is not a directory\");\n\n    boolean doClearLockID = false;\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null && !lockClassName.equals(\"\")) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n\n          if (lockFactory instanceof NativeFSLockFactory) {\n            ((NativeFSLockFactory) lockFactory).setLockDir(path);\n          } else if (lockFactory instanceof SimpleFSLockFactory) {\n            ((SimpleFSLockFactory) lockFactory).setLockDir(path);\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory;\n          // default lockDir is our index directory:\n          lockFactory = new SimpleFSLockFactory(path);\n          doClearLockID = true;\n        }\n      }\n    }\n\n    setLockFactory(lockFactory);\n\n    if (doClearLockID) {\n      // Clear the prefix because write.lock will be\n      // stored in our directory:\n      lockFactory.setLockPrefix(null);\n    }\n  }\n\n","sourceOld":"  private void init(File path, LockFactory lockFactory) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    directory = path;\n\n    if (directory.exists() && !directory.isDirectory())\n      throw new NoSuchDirectoryException(\"file '\" + directory + \"' exists but is not a directory\");\n\n    boolean doClearLockID = false;\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null && !lockClassName.equals(\"\")) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n\n          if (lockFactory instanceof NativeFSLockFactory) {\n            ((NativeFSLockFactory) lockFactory).setLockDir(path);\n          } else if (lockFactory instanceof SimpleFSLockFactory) {\n            ((SimpleFSLockFactory) lockFactory).setLockDir(path);\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory;\n          // default lockDir is our index directory:\n          lockFactory = new SimpleFSLockFactory(path);\n          doClearLockID = true;\n        }\n      }\n    }\n\n    setLockFactory(lockFactory);\n\n    if (doClearLockID) {\n      // Clear the prefix because write.lock will be\n      // stored in our directory:\n      lockFactory.setLockPrefix(null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"245fee3e499fae1fc0c33a80a6dd979f9c5f49e2","date":1252016251,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#init(File,LockFactory).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#init(File,LockFactory).mjava","sourceNew":"  /* will move to ctor, when reflection is removed in 3.0 */\n  private void init(File path, LockFactory lockFactory) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    directory = path;\n\n    if (directory.exists() && !directory.isDirectory())\n      throw new NoSuchDirectoryException(\"file '\" + directory + \"' exists but is not a directory\");\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null && !lockClassName.equals(\"\")) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory;\n          // default lockDir is our index directory:\n          lockFactory = new SimpleFSLockFactory();\n        }\n      }\n    }\n\n    setLockFactory(lockFactory);\n    \n    // for filesystem based LockFactory, delete the lockPrefix, if the locks are placed\n    // in index dir. If no index dir is given, set ourselves\n    if (lockFactory instanceof FSLockFactory) {\n      final FSLockFactory lf = (FSLockFactory) lockFactory;\n      final File dir = lf.getLockDir();\n      // if the lock factory has no lockDir set, use the this directory as lockDir\n      if (dir == null) {\n        lf.setLockDir(this.directory);\n        lf.setLockPrefix(null);\n      } else if (dir.getCanonicalPath().equals(this.directory.getCanonicalPath())) {\n        lf.setLockPrefix(null);\n      }\n    }\n  }\n\n","sourceOld":"  /* will move to ctor, when reflection is removed in 3.0 */\n  private void init(File path, LockFactory lockFactory) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    directory = path;\n\n    if (directory.exists() && !directory.isDirectory())\n      throw new NoSuchDirectoryException(\"file '\" + directory + \"' exists but is not a directory\");\n\n    boolean doClearLockID = false;\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null && !lockClassName.equals(\"\")) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n\n          if (lockFactory instanceof NativeFSLockFactory) {\n            ((NativeFSLockFactory) lockFactory).setLockDir(path);\n          } else if (lockFactory instanceof SimpleFSLockFactory) {\n            ((SimpleFSLockFactory) lockFactory).setLockDir(path);\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory;\n          // default lockDir is our index directory:\n          lockFactory = new SimpleFSLockFactory(path);\n          doClearLockID = true;\n        }\n      }\n    }\n\n    setLockFactory(lockFactory);\n\n    if (doClearLockID) {\n      // Clear the prefix because write.lock will be\n      // stored in our directory:\n      lockFactory.setLockPrefix(null);\n    }\n  }\n\n","bugFix":["088ce71f943a02facdb970ea99322af3d16af6d2","66b12ba4967665216eeb706b58d424c51fb3641a","93a838d8ba57e85e9db126e862958dafc7da4d5b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/store/FSDirectory#init(File,LockFactory).mjava","sourceNew":null,"sourceOld":"  /* will move to ctor, when reflection is removed in 3.0 */\n  private void init(File path, LockFactory lockFactory) throws IOException {\n\n    // Set up lockFactory with cascaded defaults: if an instance was passed in,\n    // use that; else if locks are disabled, use NoLockFactory; else if the\n    // system property org.apache.lucene.store.FSDirectoryLockFactoryClass is set,\n    // instantiate that; else, use SimpleFSLockFactory:\n\n    directory = path;\n\n    if (directory.exists() && !directory.isDirectory())\n      throw new NoSuchDirectoryException(\"file '\" + directory + \"' exists but is not a directory\");\n\n    if (lockFactory == null) {\n\n      if (disableLocks) {\n        // Locks are disabled:\n        lockFactory = NoLockFactory.getNoLockFactory();\n      } else {\n        String lockClassName = System.getProperty(\"org.apache.lucene.store.FSDirectoryLockFactoryClass\");\n\n        if (lockClassName != null && !lockClassName.equals(\"\")) {\n          Class c;\n\n          try {\n            c = Class.forName(lockClassName);\n          } catch (ClassNotFoundException e) {\n            throw new IOException(\"unable to find LockClass \" + lockClassName);\n          }\n\n          try {\n            lockFactory = (LockFactory) c.newInstance();          \n          } catch (IllegalAccessException e) {\n            throw new IOException(\"IllegalAccessException when instantiating LockClass \" + lockClassName);\n          } catch (InstantiationException e) {\n            throw new IOException(\"InstantiationException when instantiating LockClass \" + lockClassName);\n          } catch (ClassCastException e) {\n            throw new IOException(\"unable to cast LockClass \" + lockClassName + \" instance to a LockFactory\");\n          }\n        } else {\n          // Our default lock is SimpleFSLockFactory;\n          // default lockDir is our index directory:\n          lockFactory = new SimpleFSLockFactory();\n        }\n      }\n    }\n\n    setLockFactory(lockFactory);\n    \n    // for filesystem based LockFactory, delete the lockPrefix, if the locks are placed\n    // in index dir. If no index dir is given, set ourselves\n    if (lockFactory instanceof FSLockFactory) {\n      final FSLockFactory lf = (FSLockFactory) lockFactory;\n      final File dir = lf.getLockDir();\n      // if the lock factory has no lockDir set, use the this directory as lockDir\n      if (dir == null) {\n        lf.setLockDir(this.directory);\n        lf.setLockPrefix(null);\n      } else if (dir.getCanonicalPath().equals(this.directory.getCanonicalPath())) {\n        lf.setLockPrefix(null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"245fee3e499fae1fc0c33a80a6dd979f9c5f49e2":["416d032f85b7ea8efc272f86ba46bc460589aff7"],"b583d3621fe173e7296abcf62f82fb707c901234":["088ce71f943a02facdb970ea99322af3d16af6d2"],"d54c7739bfe85d68f0352823cd70c10c619fad38":["a015c55424dd37249054283bedc90388bd45358f"],"66b12ba4967665216eeb706b58d424c51fb3641a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a015c55424dd37249054283bedc90388bd45358f":["b583d3621fe173e7296abcf62f82fb707c901234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"416d032f85b7ea8efc272f86ba46bc460589aff7":["d54c7739bfe85d68f0352823cd70c10c619fad38"],"088ce71f943a02facdb970ea99322af3d16af6d2":["66b12ba4967665216eeb706b58d424c51fb3641a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eaea03be31988a41275d45a429ac71ff0ad740fb"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"245fee3e499fae1fc0c33a80a6dd979f9c5f49e2":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"b583d3621fe173e7296abcf62f82fb707c901234":["a015c55424dd37249054283bedc90388bd45358f"],"d54c7739bfe85d68f0352823cd70c10c619fad38":["416d032f85b7ea8efc272f86ba46bc460589aff7"],"66b12ba4967665216eeb706b58d424c51fb3641a":["088ce71f943a02facdb970ea99322af3d16af6d2"],"a015c55424dd37249054283bedc90388bd45358f":["d54c7739bfe85d68f0352823cd70c10c619fad38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66b12ba4967665216eeb706b58d424c51fb3641a"],"416d032f85b7ea8efc272f86ba46bc460589aff7":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"088ce71f943a02facdb970ea99322af3d16af6d2":["b583d3621fe173e7296abcf62f82fb707c901234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}