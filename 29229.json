{"path":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","commits":[{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    assert context.reader.getTopReaderContext().isAtomic;\n    final AtomicReaderContext privateContext = (AtomicReaderContext) context.reader.getTopReaderContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    assert context.reader.getTopReaderContext().isAtomic;\n    final AtomicReaderContext privateContext = (AtomicReaderContext) context.reader.getTopReaderContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, privateContext.reader.getLiveDocs());\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = (AtomicReaderContext) context.reader.getTopReaderContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    assert context.reader.getTopReaderContext().isAtomic;\n    final AtomicReaderContext privateContext = (AtomicReaderContext) context.reader.getTopReaderContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getTopReaderContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = (AtomicReaderContext) context.reader.getTopReaderContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getTopReaderContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    assert context.reader.getTopReaderContext().isAtomic;\n    final AtomicReaderContext privateContext = (AtomicReaderContext) context.reader.getTopReaderContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/QueryWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getTopReaderContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    // get a private context that is used to rewrite, createWeight and score eventually\n    final AtomicReaderContext privateContext = context.reader().getTopReaderContext();\n    final Weight weight = new IndexSearcher(privateContext).createNormalizedWeight(query);\n    return new DocIdSet() {\n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return weight.scorer(privateContext, true, false, acceptDocs);\n      }\n      @Override\n      public boolean isCacheable() { return false; }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["6620df8541b174097b1133a4fc370adb2e570524","6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["6620df8541b174097b1133a4fc370adb2e570524"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6620df8541b174097b1133a4fc370adb2e570524"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}