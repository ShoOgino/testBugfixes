{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MinMaxScaleEvaluator#doWork(Object...).mjava","commits":[{"id":"9e0bd6ad39d1eae4e5330fcf7f2a59cf8936d3e7","date":1509644682,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MinMaxScaleEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(null == values){\n      return null;\n    }\n\n    double min = 0;\n    double max = 1;\n\n    if(values.length == 3) {\n      min = ((Number)values[1]).doubleValue();\n      max = ((Number)values[2]).doubleValue();\n    }\n\n    if(values[0] instanceof Matrix) {\n      Matrix matrix = (Matrix)values[0];\n      double[][] data = matrix.getData();\n      double[][] scaled = new double[data.length][];\n      for(int i=0; i<scaled.length; i++) {\n        double[] row = data[i];\n        scaled[i] = scale(row, min, max);\n      }\n\n      return new Matrix(scaled);\n\n    } else if(values[0] instanceof List) {\n      List<Number> vec = (List)values[0];\n      double[] data = new double[vec.size()];\n\n      for(int i=0; i<vec.size(); i++) {\n        data[i] = vec.get(i).doubleValue();\n      }\n\n      data = scale(data, min, max);\n      List<Number> scaled = new ArrayList(data.length);\n      for(double d : data) {\n        scaled.add(d);\n      }\n\n      return scaled;\n    } else {\n      throw new IOException();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MinMaxScaleEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(null == values){\n      return null;\n    }\n\n    double min = 0;\n    double max = 1;\n\n    if(values.length == 3) {\n      min = ((Number)values[1]).doubleValue();\n      max = ((Number)values[2]).doubleValue();\n    }\n\n    if(values[0] instanceof Matrix) {\n      Matrix matrix = (Matrix)values[0];\n      double[][] data = matrix.getData();\n      double[][] scaled = new double[data.length][];\n      for(int i=0; i<scaled.length; i++) {\n        double[] row = data[i];\n        scaled[i] = scale(row, min, max);\n      }\n\n      return new Matrix(scaled);\n\n    } else if(values[0] instanceof List) {\n      List<Number> vec = (List)values[0];\n      double[] data = new double[vec.size()];\n\n      for(int i=0; i<vec.size(); i++) {\n        data[i] = vec.get(i).doubleValue();\n      }\n\n      data = scale(data, min, max);\n      List<Number> scaled = new ArrayList(data.length);\n      for(double d : data) {\n        scaled.add(d);\n      }\n\n      return scaled;\n    } else {\n      throw new IOException();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MinMaxScaleEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MinMaxScaleEvaluator#doWork(Object...).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(null == values){\n      return null;\n    }\n\n    double min = 0;\n    double max = 1;\n\n    if(values.length == 3) {\n      min = ((Number)values[1]).doubleValue();\n      max = ((Number)values[2]).doubleValue();\n    }\n\n    if(values[0] instanceof Matrix) {\n      Matrix matrix = (Matrix)values[0];\n      double[][] data = matrix.getData();\n      double[][] scaled = new double[data.length][];\n      for(int i=0; i<scaled.length; i++) {\n        double[] row = data[i];\n        scaled[i] = scale(row, min, max);\n      }\n\n      return new Matrix(scaled);\n\n    } else if(values[0] instanceof List) {\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> vec = (List)values[0];\n      double[] data = new double[vec.size()];\n\n      for(int i=0; i<vec.size(); i++) {\n        data[i] = vec.get(i).doubleValue();\n      }\n\n      data = scale(data, min, max);\n      List<Number> scaled = new ArrayList<>(data.length);\n      for(double d : data) {\n        scaled.add(d);\n      }\n\n      return scaled;\n    } else {\n      throw new IOException();\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(null == values){\n      return null;\n    }\n\n    double min = 0;\n    double max = 1;\n\n    if(values.length == 3) {\n      min = ((Number)values[1]).doubleValue();\n      max = ((Number)values[2]).doubleValue();\n    }\n\n    if(values[0] instanceof Matrix) {\n      Matrix matrix = (Matrix)values[0];\n      double[][] data = matrix.getData();\n      double[][] scaled = new double[data.length][];\n      for(int i=0; i<scaled.length; i++) {\n        double[] row = data[i];\n        scaled[i] = scale(row, min, max);\n      }\n\n      return new Matrix(scaled);\n\n    } else if(values[0] instanceof List) {\n      List<Number> vec = (List)values[0];\n      double[] data = new double[vec.size()];\n\n      for(int i=0; i<vec.size(); i++) {\n        data[i] = vec.get(i).doubleValue();\n      }\n\n      data = scale(data, min, max);\n      List<Number> scaled = new ArrayList(data.length);\n      for(double d : data) {\n        scaled.add(d);\n      }\n\n      return scaled;\n    } else {\n      throw new IOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e0bd6ad39d1eae4e5330fcf7f2a59cf8936d3e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"9e0bd6ad39d1eae4e5330fcf7f2a59cf8936d3e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","9e0bd6ad39d1eae4e5330fcf7f2a59cf8936d3e7"],"9e0bd6ad39d1eae4e5330fcf7f2a59cf8936d3e7":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}