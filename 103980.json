{"path":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","commits":[{"id":"048361614025800e582bfc7a7b0329dc6fd6a95e","date":1196999392,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"/dev/null","sourceNew":"  SolrConfig(SolrResourceLoader loader, String file, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, file, is, \"/config/\");\n    this.configFile = file;\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n    Config.log.info(\"Loaded SolrConfig: \" + file);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e511b092029d56e0d4e30204fba8509c1c2647b6","e511b092029d56e0d4e30204fba8509c1c2647b6","e511b092029d56e0d4e30204fba8509c1c2647b6","74090d4b844e97e85a7b922b6a6db19362528447"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b920ba0b6285c3aaa7a64d1677f5b4ee58b0779d","date":1203633859,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"  SolrConfig(SolrResourceLoader loader, String file, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, file, is, \"/config/\");\n    this.configFile = file;\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    Config.log.info(\"Loaded SolrConfig: \" + file);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"  SolrConfig(SolrResourceLoader loader, String file, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, file, is, \"/config/\");\n    this.configFile = file;\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n    Config.log.info(\"Loaded SolrConfig: \" + file);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6dc6ab6902f8f70ae43365947ccf44c25986906d","date":1204603577,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"  SolrConfig(SolrResourceLoader loader, String file, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, file, is, \"/config/\");\n    this.configFile = file;\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    Config.log.info(\"Loaded SolrConfig: \" + file);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b","date":1217355237,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n    \n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa89a35683d73665c61d7af1d16f41649c25e5a7","date":1228684315,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");     \n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n    \n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n    \n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"656ba78dd2c0e88d11623fc5bceca3ea217ce0b3","date":1244100008,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n    \n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");     \n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n    \n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":["15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","15f9a498a407241cefcbd00ca7fc84d5e7fa573e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0fb097757a4d69c293a71ad98fc00f338651ccef","date":1244117851,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n    \n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n    \n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"696ae660e2377ef5574e572e9969026ed20f36cb","date":1244283521,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n     reqHandlerInfo = loadRequestHandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n    \n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b338a77d735377ad6a2b02379ce3000377ff8631","date":1244447757,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n     reqHandlerInfo = loadRequestHandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb","date":1244526657,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo();\n     updateProcessorChainInfo = loadUpdateProcessorInfo();\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e5d451f04bea3df3123dd3c3c2df8010d0f90c23","date":1244615057,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo();\n     updateProcessorChainInfo = loadUpdateProcessorInfo();\n     updateHandlerInfo = loadUpdatehandlerInfo();\n     loadHighLightingPlugins();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo();\n     updateProcessorChainInfo = loadUpdateProcessorInfo();\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c07ddbc5edafff8b6ae1fd5994ca8084dcbdf4c1","date":1245994464,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo();\n     updateProcessorChainInfo = loadUpdateProcessorInfo();\n     updateHandlerInfo = loadUpdatehandlerInfo();\n     loadHighLightingPlugins();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo();\n     updateProcessorChainInfo = loadUpdateProcessorInfo();\n     updateHandlerInfo = loadUpdatehandlerInfo();\n     loadHighLightingPlugins();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28a016ae2abf4934515e45810192aa4350e3092b","date":1252309557,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     updateProcessorChainInfo = loadUpdateProcessorInfo();\n     updateHandlerInfo = loadUpdatehandlerInfo();\n     loadHighLightingPlugins();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo();\n     updateProcessorChainInfo = loadUpdateProcessorInfo();\n     updateHandlerInfo = loadUpdatehandlerInfo();\n     loadHighLightingPlugins();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":["e2d531c99815e9282449614650df62aad96c688e","e2d531c99815e9282449614650df62aad96c688e","e2d531c99815e9282449614650df62aad96c688e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6a7153c5cd4b2cd8054f8e46101442030d8a3c37","date":1253512682,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n     updateHandlerInfo = loadUpdatehandlerInfo();\n     loadHighLightingPlugins();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     updateProcessorChainInfo = loadUpdateProcessorInfo();\n     updateHandlerInfo = loadUpdatehandlerInfo();\n     loadHighLightingPlugins();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":["e2d531c99815e9282449614650df62aad96c688e","e2d531c99815e9282449614650df62aad96c688e","e2d531c99815e9282449614650df62aad96c688e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae2d1b1882412cb224513ad453e3bc316a99118a","date":1253535818,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n     updateHandlerInfo = loadUpdatehandlerInfo();\n     loadHighLightingPlugins();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5dc524639edfdfa4edfb67ae889c2b6029f9314c","date":1255358511,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6a99682fbae4715b54ee35a62a2f65b72f7bb7f4","date":1258936602,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bad78684057afb0e5b908d6cebf7fb606a8b3b03","date":1263548630,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bf0e17cfd70114fa265a0ac990861cc37685024e","date":1268618829,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\", Version.LUCENE_24);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c2af3e43b9e1e69e9b234ebd9561f80c4a7c9a0d","date":1268710718,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\", Version.LUCENE_24);\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\", Version.LUCENE_24);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#SolrConfig(SolrResourceLoader,String,InputStream).mjava","sourceNew":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\", Version.LUCENE_24);\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","sourceOld":"   /** Creates a configuration instance from a resource loader, a configuration name and a stream.\n   * If the stream is null, the resource loader will open the configuration stream.\n   * If the stream is not null, no attempt to load the resource will occur (the name is not used).\n   *@param loader the resource loader\n   *@param name the configuration name\n   *@param is the configuration stream\n   */\n  SolrConfig(SolrResourceLoader loader, String name, InputStream is)\n  throws ParserConfigurationException, IOException, SAXException {\n    super(loader, name, is, \"/config/\");\n    initLibs();\n    defaultIndexConfig = new SolrIndexConfig(this, null, null);\n    mainIndexConfig = new SolrIndexConfig(this, \"mainIndex\", defaultIndexConfig);\n    reopenReaders = getBool(\"mainIndex/reopenReaders\", true);\n    \n    booleanQueryMaxClauseCount = getInt(\"query/maxBooleanClauses\", BooleanQuery.getMaxClauseCount());\n    luceneMatchVersion = getLuceneVersion(\"luceneMatchVersion\", Version.LUCENE_24);\n    log.info(\"Using Lucene MatchVersion: \" + luceneMatchVersion);\n\n    filtOptEnabled = getBool(\"query/boolTofilterOptimizer/@enabled\", false);\n    filtOptCacheSize = getInt(\"query/boolTofilterOptimizer/@cacheSize\",32);\n    filtOptThreshold = getFloat(\"query/boolTofilterOptimizer/@threshold\",.05f);\n    \n    useFilterForSortedQuery = getBool(\"query/useFilterForSortedQuery\", false);\n    queryResultWindowSize = getInt(\"query/queryResultWindowSize\", 1);\n    queryResultMaxDocsCached = getInt(\"query/queryResultMaxDocsCached\", Integer.MAX_VALUE);\n    enableLazyFieldLoading = getBool(\"query/enableLazyFieldLoading\", false);\n\n    \n    filterCacheConfig = CacheConfig.getConfig(this, \"query/filterCache\");\n    queryResultCacheConfig = CacheConfig.getConfig(this, \"query/queryResultCache\");\n    documentCacheConfig = CacheConfig.getConfig(this, \"query/documentCache\");\n    CacheConfig conf = CacheConfig.getConfig(this, \"query/fieldValueCache\");\n    if (conf == null) {\n      Map<String,String> args = new HashMap<String,String>();\n      args.put(\"name\",\"fieldValueCache\");\n      args.put(\"size\",\"10000\");\n      args.put(\"initialSize\",\"10\");\n      args.put(\"showItems\",\"-1\");\n      conf = new CacheConfig(FastLRUCache.class, args, null);\n    }\n    fieldValueCacheConfig = conf;\n    unlockOnStartup = getBool(\"mainIndex/unlockOnStartup\", false);\n    useColdSearcher = getBool(\"query/useColdSearcher\",false);\n    dataDir = get(\"dataDir\", null);\n    if (dataDir != null && dataDir.length()==0) dataDir=null;\n\n    userCacheConfigs = CacheConfig.getMultipleConfigs(this, \"query/cache\");\n\n    org.apache.solr.search.SolrIndexSearcher.initRegenerators(this);\n\n    hashSetInverseLoadFactor = 1.0f / getFloat(\"//HashDocSet/@loadFactor\",0.75f);\n    hashDocSetMaxSize= getInt(\"//HashDocSet/@maxSize\",3000);\n    \n    pingQueryParams = readPingQueryParams(this);\n\n    httpCachingConfig = new HttpCachingConfig(this);\n    \n    Node jmx = (Node) getNode(\"jmx\", false);\n    if (jmx != null) {\n      jmxConfig = new JmxConfiguration(true, get(\"jmx/@agentId\", null), get(\n          \"jmx/@serviceUrl\", null));\n    } else {\n      jmxConfig = new JmxConfiguration(false, null, null);\n    }\n     maxWarmingSearchers = getInt(\"query/maxWarmingSearchers\",Integer.MAX_VALUE);\n\n     loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",true, true);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",true, true);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",true, true);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",true, true);\n     loadPluginInfo(SearchComponent.class,\"searchComponent\",true, true);\n     loadPluginInfo(QueryConverter.class,\"queryConverter\",true, true);\n     loadPluginInfo(SolrEventListener.class, \"//listener\",false, true);\n     loadPluginInfo(DirectoryFactory.class,\"directoryFactory\",false, true);\n     loadPluginInfo(IndexDeletionPolicy.class,\"mainIndex/deletionPolicy\",false, true);\n     loadPluginInfo(IndexReaderFactory.class,\"indexReaderFactory\",false, true);\n     loadPluginInfo(UpdateRequestProcessorChain.class,\"updateRequestProcessorChain\",false, false);\n\n     //TODO deprecated remove it later\n     loadPluginInfo(SolrHighlighter.class,\"highlighting\",false, false);\n     if( pluginStore.containsKey( SolrHighlighter.class.getName() ) )\n       log.warn( \"Deprecated syntax found. <highlighting/> should move to <searchComponent/>\" );\n\n     updateHandlerInfo = loadUpdatehandlerInfo();\n\n    Config.log.info(\"Loaded SolrConfig: \" + name);\n    \n    // TODO -- at solr 2.0. this should go away\n    config = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ae2d1b1882412cb224513ad453e3bc316a99118a":["6a7153c5cd4b2cd8054f8e46101442030d8a3c37"],"0fb097757a4d69c293a71ad98fc00f338651ccef":["656ba78dd2c0e88d11623fc5bceca3ea217ce0b3"],"656ba78dd2c0e88d11623fc5bceca3ea217ce0b3":["fa89a35683d73665c61d7af1d16f41649c25e5a7"],"fa89a35683d73665c61d7af1d16f41649c25e5a7":["6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b"],"6dc6ab6902f8f70ae43365947ccf44c25986906d":["b920ba0b6285c3aaa7a64d1677f5b4ee58b0779d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5dc524639edfdfa4edfb67ae889c2b6029f9314c":["ae2d1b1882412cb224513ad453e3bc316a99118a"],"c07ddbc5edafff8b6ae1fd5994ca8084dcbdf4c1":["e5d451f04bea3df3123dd3c3c2df8010d0f90c23"],"e5d451f04bea3df3123dd3c3c2df8010d0f90c23":["a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb"],"c2af3e43b9e1e69e9b234ebd9561f80c4a7c9a0d":["bf0e17cfd70114fa265a0ac990861cc37685024e"],"b338a77d735377ad6a2b02379ce3000377ff8631":["696ae660e2377ef5574e572e9969026ed20f36cb"],"6a99682fbae4715b54ee35a62a2f65b72f7bb7f4":["5dc524639edfdfa4edfb67ae889c2b6029f9314c"],"a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb":["b338a77d735377ad6a2b02379ce3000377ff8631"],"6a7153c5cd4b2cd8054f8e46101442030d8a3c37":["28a016ae2abf4934515e45810192aa4350e3092b"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bad78684057afb0e5b908d6cebf7fb606a8b3b03":["6a99682fbae4715b54ee35a62a2f65b72f7bb7f4"],"bf0e17cfd70114fa265a0ac990861cc37685024e":["bad78684057afb0e5b908d6cebf7fb606a8b3b03"],"696ae660e2377ef5574e572e9969026ed20f36cb":["0fb097757a4d69c293a71ad98fc00f338651ccef"],"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b":["6dc6ab6902f8f70ae43365947ccf44c25986906d"],"b920ba0b6285c3aaa7a64d1677f5b4ee58b0779d":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"ad94625fb8d088209f46650c8097196fec67f00c":["c2af3e43b9e1e69e9b234ebd9561f80c4a7c9a0d"],"28a016ae2abf4934515e45810192aa4350e3092b":["c07ddbc5edafff8b6ae1fd5994ca8084dcbdf4c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ae2d1b1882412cb224513ad453e3bc316a99118a":["5dc524639edfdfa4edfb67ae889c2b6029f9314c"],"0fb097757a4d69c293a71ad98fc00f338651ccef":["696ae660e2377ef5574e572e9969026ed20f36cb"],"656ba78dd2c0e88d11623fc5bceca3ea217ce0b3":["0fb097757a4d69c293a71ad98fc00f338651ccef"],"fa89a35683d73665c61d7af1d16f41649c25e5a7":["656ba78dd2c0e88d11623fc5bceca3ea217ce0b3"],"6dc6ab6902f8f70ae43365947ccf44c25986906d":["6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"5dc524639edfdfa4edfb67ae889c2b6029f9314c":["6a99682fbae4715b54ee35a62a2f65b72f7bb7f4"],"c07ddbc5edafff8b6ae1fd5994ca8084dcbdf4c1":["28a016ae2abf4934515e45810192aa4350e3092b"],"e5d451f04bea3df3123dd3c3c2df8010d0f90c23":["c07ddbc5edafff8b6ae1fd5994ca8084dcbdf4c1"],"c2af3e43b9e1e69e9b234ebd9561f80c4a7c9a0d":["ad94625fb8d088209f46650c8097196fec67f00c"],"b338a77d735377ad6a2b02379ce3000377ff8631":["a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb"],"a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb":["e5d451f04bea3df3123dd3c3c2df8010d0f90c23"],"6a99682fbae4715b54ee35a62a2f65b72f7bb7f4":["bad78684057afb0e5b908d6cebf7fb606a8b3b03"],"6a7153c5cd4b2cd8054f8e46101442030d8a3c37":["ae2d1b1882412cb224513ad453e3bc316a99118a"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["b920ba0b6285c3aaa7a64d1677f5b4ee58b0779d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bad78684057afb0e5b908d6cebf7fb606a8b3b03":["bf0e17cfd70114fa265a0ac990861cc37685024e"],"6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b":["fa89a35683d73665c61d7af1d16f41649c25e5a7"],"bf0e17cfd70114fa265a0ac990861cc37685024e":["c2af3e43b9e1e69e9b234ebd9561f80c4a7c9a0d"],"696ae660e2377ef5574e572e9969026ed20f36cb":["b338a77d735377ad6a2b02379ce3000377ff8631"],"b920ba0b6285c3aaa7a64d1677f5b4ee58b0779d":["6dc6ab6902f8f70ae43365947ccf44c25986906d"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"28a016ae2abf4934515e45810192aa4350e3092b":["6a7153c5cd4b2cd8054f8e46101442030d8a3c37"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}