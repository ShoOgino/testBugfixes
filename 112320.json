{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[LeafReaderContext],Weight,Collector).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[LeafReaderContext],Weight,Collector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link LeafCollector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<LeafReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (LeafReaderContext ctx : leaves) { // search each subreader\n      final LeafCollector leafCollector;\n      try {\n        leafCollector = collector.getLeafCollector(ctx);\n      } catch (CollectionTerminatedException e) {\n        // there is no doc of interest in this reader context\n        // continue with the following leaf\n        continue;\n      }\n      BulkScorer scorer = weight.bulkScorer(ctx, !leafCollector.acceptsDocsOutOfOrder(), ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        try {\n          scorer.score(leafCollector);\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[LeafReaderContext],Weight,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[LeafReaderContext],Weight,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link LeafCollector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<LeafReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (LeafReaderContext ctx : leaves) { // search each subreader\n      final LeafCollector leafCollector;\n      try {\n        leafCollector = collector.getLeafCollector(ctx);\n      } catch (CollectionTerminatedException e) {\n        // there is no doc of interest in this reader context\n        // continue with the following leaf\n        continue;\n      }\n      BulkScorer scorer = weight.bulkScorer(ctx, ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        try {\n          scorer.score(leafCollector);\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link LeafCollector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<LeafReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (LeafReaderContext ctx : leaves) { // search each subreader\n      final LeafCollector leafCollector;\n      try {\n        leafCollector = collector.getLeafCollector(ctx);\n      } catch (CollectionTerminatedException e) {\n        // there is no doc of interest in this reader context\n        // continue with the following leaf\n        continue;\n      }\n      BulkScorer scorer = weight.bulkScorer(ctx, !leafCollector.acceptsDocsOutOfOrder(), ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        try {\n          scorer.score(leafCollector);\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[LeafReaderContext],Weight,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[LeafReaderContext],Weight,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link LeafCollector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<LeafReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (LeafReaderContext ctx : leaves) { // search each subreader\n      final LeafCollector leafCollector;\n      try {\n        leafCollector = collector.getLeafCollector(ctx);\n      } catch (CollectionTerminatedException e) {\n        // there is no doc of interest in this reader context\n        // continue with the following leaf\n        continue;\n      }\n      BulkScorer scorer = weight.bulkScorer(ctx, ctx.reader().getLiveDocs(), collector.needsScores());\n      if (scorer != null) {\n        try {\n          scorer.score(leafCollector);\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link LeafCollector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<LeafReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (LeafReaderContext ctx : leaves) { // search each subreader\n      final LeafCollector leafCollector;\n      try {\n        leafCollector = collector.getLeafCollector(ctx);\n      } catch (CollectionTerminatedException e) {\n        // there is no doc of interest in this reader context\n        // continue with the following leaf\n        continue;\n      }\n      BulkScorer scorer = weight.bulkScorer(ctx, ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        try {\n          scorer.score(leafCollector);\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","bugFix":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[LeafReaderContext],Weight,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[LeafReaderContext],Weight,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link LeafCollector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<LeafReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (LeafReaderContext ctx : leaves) { // search each subreader\n      final LeafCollector leafCollector;\n      try {\n        leafCollector = collector.getLeafCollector(ctx);\n      } catch (CollectionTerminatedException e) {\n        // there is no doc of interest in this reader context\n        // continue with the following leaf\n        continue;\n      }\n      BulkScorer scorer = weight.bulkScorer(ctx, ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        try {\n          scorer.score(leafCollector);\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link LeafCollector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<LeafReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (LeafReaderContext ctx : leaves) { // search each subreader\n      final LeafCollector leafCollector;\n      try {\n        leafCollector = collector.getLeafCollector(ctx);\n      } catch (CollectionTerminatedException e) {\n        // there is no doc of interest in this reader context\n        // continue with the following leaf\n        continue;\n      }\n      BulkScorer scorer = weight.bulkScorer(ctx, ctx.reader().getLiveDocs(), collector.needsScores());\n      if (scorer != null) {\n        try {\n          scorer.score(leafCollector);\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[LeafReaderContext],Weight,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[LeafReaderContext],Weight,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link LeafCollector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<LeafReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (LeafReaderContext ctx : leaves) { // search each subreader\n      final LeafCollector leafCollector;\n      try {\n        leafCollector = collector.getLeafCollector(ctx);\n      } catch (CollectionTerminatedException e) {\n        // there is no doc of interest in this reader context\n        // continue with the following leaf\n        continue;\n      }\n      BulkScorer scorer = weight.bulkScorer(ctx);\n      if (scorer != null) {\n        try {\n          scorer.score(leafCollector, ctx.reader().getLiveDocs());\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link LeafCollector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<LeafReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (LeafReaderContext ctx : leaves) { // search each subreader\n      final LeafCollector leafCollector;\n      try {\n        leafCollector = collector.getLeafCollector(ctx);\n      } catch (CollectionTerminatedException e) {\n        // there is no doc of interest in this reader context\n        // continue with the following leaf\n        continue;\n      }\n      BulkScorer scorer = weight.bulkScorer(ctx, ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        try {\n          scorer.score(leafCollector);\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36c70eb3b44de4355a7168b762cadc0f1cf194bc","date":1561542955,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[LeafReaderContext],Weight,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(List[LeafReaderContext],Weight,Collector).mjava","sourceNew":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link LeafCollector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws TooManyClauses If a query would exceed\n   *         {@link IndexSearcher#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<LeafReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (LeafReaderContext ctx : leaves) { // search each subreader\n      final LeafCollector leafCollector;\n      try {\n        leafCollector = collector.getLeafCollector(ctx);\n      } catch (CollectionTerminatedException e) {\n        // there is no doc of interest in this reader context\n        // continue with the following leaf\n        continue;\n      }\n      BulkScorer scorer = weight.bulkScorer(ctx);\n      if (scorer != null) {\n        try {\n          scorer.score(leafCollector, ctx.reader().getLiveDocs());\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Lower-level search API.\n   * \n   * <p>\n   * {@link LeafCollector#collect(int)} is called for every document. <br>\n   * \n   * <p>\n   * NOTE: this method executes the searches on all given leaves exclusively.\n   * To search across all the searchers leaves use {@link #leafContexts}.\n   * \n   * @param leaves \n   *          the searchers leaves to execute the searches on\n   * @param weight\n   *          to match documents\n   * @param collector\n   *          to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected void search(List<LeafReaderContext> leaves, Weight weight, Collector collector)\n      throws IOException {\n\n    // TODO: should we make this\n    // threaded...?  the Collector could be sync'd?\n    // always use single thread:\n    for (LeafReaderContext ctx : leaves) { // search each subreader\n      final LeafCollector leafCollector;\n      try {\n        leafCollector = collector.getLeafCollector(ctx);\n      } catch (CollectionTerminatedException e) {\n        // there is no doc of interest in this reader context\n        // continue with the following leaf\n        continue;\n      }\n      BulkScorer scorer = weight.bulkScorer(ctx);\n      if (scorer != null) {\n        try {\n          scorer.score(leafCollector, ctx.reader().getLiveDocs());\n        } catch (CollectionTerminatedException e) {\n          // collection was terminated prematurely\n          // continue with the following leaf\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["fb17639909a369c1e64866842e5c213440acc17e"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"36c70eb3b44de4355a7168b762cadc0f1cf194bc":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36c70eb3b44de4355a7168b762cadc0f1cf194bc"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["36c70eb3b44de4355a7168b762cadc0f1cf194bc"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"36c70eb3b44de4355a7168b762cadc0f1cf194bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}