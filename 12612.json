{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGeneratorTest#testNodePreferenceRulesBase().mjava","commits":[{"id":"833432c363468a5df50f87446a68015404b1fbcf","date":1572302961,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/routing/RequestReplicaListTransformerGeneratorTest#testNodePreferenceRulesBase().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodePreferenceRulesBase() {\n    RequestReplicaListTransformerGenerator generator = new RequestReplicaListTransformerGenerator();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    List<Replica> replicas = getBasicReplicaList();\n\n    String rulesParam = ShardParams.SHARDS_PREFERENCE_REPLICA_BASE + \":stable:dividend:routingPreference\";\n\n    params.add(\"routingPreference\", \"0\");\n    params.add(ShardParams.SHARDS_PREFERENCE, rulesParam);\n\n    ReplicaListTransformer rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node2\", replicas.get(1).getNodeName());\n    assertEquals(\"node3\", replicas.get(2).getNodeName());\n\n    params.set(\"routingPreference\", \"1\");\n    rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node2\", replicas.get(0).getNodeName());\n    assertEquals(\"node3\", replicas.get(1).getNodeName());\n    assertEquals(\"node1\", replicas.get(2).getNodeName());\n\n    params.set(\"routingPreference\", \"2\");\n    rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node3\", replicas.get(0).getNodeName());\n    assertEquals(\"node1\", replicas.get(1).getNodeName());\n    assertEquals(\"node2\", replicas.get(2).getNodeName());\n\n    params.set(\"routingPreference\", \"3\");\n    rlt = generator.getReplicaListTransformer(params);\n    rlt.transform(replicas);\n    assertEquals(\"node1\", replicas.get(0).getNodeName());\n    assertEquals(\"node2\", replicas.get(1).getNodeName());\n    assertEquals(\"node3\", replicas.get(2).getNodeName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"833432c363468a5df50f87446a68015404b1fbcf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["833432c363468a5df50f87446a68015404b1fbcf"]},"commit2Childs":{"833432c363468a5df50f87446a68015404b1fbcf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["833432c363468a5df50f87446a68015404b1fbcf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}