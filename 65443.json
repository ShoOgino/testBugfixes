{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSetIndexCreatedVersion().mjava","commits":[{"id":"cb769584d3433c13d4262b03a87433e9a8c5a307","date":1542374674,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSetIndexCreatedVersion().mjava","pathOld":"/dev/null","sourceNew":"  public void testSetIndexCreatedVersion() throws IOException {\n    IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n        () -> new IndexWriterConfig().setIndexCreatedVersionMajor(Version.LATEST.major+1));\n    assertEquals(\"indexCreatedVersionMajor may not be in the future: current major version is \" +\n        Version.LATEST.major + \", but got: \" + (Version.LATEST.major+1), e.getMessage());\n    e = expectThrows(IllegalArgumentException.class,\n        () -> new IndexWriterConfig().setIndexCreatedVersionMajor(Version.LATEST.major-2));\n    assertEquals(\"indexCreatedVersionMajor may not be less than the minimum supported version: \" +\n        (Version.LATEST.major-1) + \", but got: \" + (Version.LATEST.major-2), e.getMessage());\n\n    for (int previousMajor = Version.LATEST.major - 1; previousMajor <= Version.LATEST.major; previousMajor++) {\n      for (int newMajor = Version.LATEST.major - 1; newMajor <= Version.LATEST.major; newMajor++) {\n        for (OpenMode openMode : OpenMode.values()) {\n          try (Directory dir = newDirectory()) {\n            try (IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setIndexCreatedVersionMajor(previousMajor))) {}\n            SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n            assertEquals(previousMajor, infos.getIndexCreatedVersionMajor());\n            try (IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setOpenMode(openMode).setIndexCreatedVersionMajor(newMajor))) {}\n            infos = SegmentInfos.readLatestCommit(dir);\n            if (openMode == OpenMode.CREATE) {\n              assertEquals(newMajor, infos.getIndexCreatedVersionMajor());\n            } else {\n              assertEquals(previousMajor, infos.getIndexCreatedVersionMajor());\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c21918ef3ad23e254f39cb0cd6c86851fcb993","date":1580123310,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSetIndexCreatedVersion().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testSetIndexCreatedVersion().mjava","sourceNew":"  public void testSetIndexCreatedVersion() throws IOException {\n    IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n        () -> new IndexWriterConfig().setIndexCreatedVersionMajor(Version.LATEST.major+1));\n    assertEquals(\"indexCreatedVersionMajor may not be in the future: current major version is \" +\n        Version.LATEST.major + \", but got: \" + (Version.LATEST.major+1), e.getMessage());\n    e = expectThrows(IllegalArgumentException.class,\n        () -> new IndexWriterConfig().setIndexCreatedVersionMajor(Version.LATEST.major-2));\n    assertEquals(\"indexCreatedVersionMajor may not be less than the minimum supported version: \" +\n        (Version.LATEST.major-1) + \", but got: \" + (Version.LATEST.major-2), e.getMessage());\n\n    for (int previousMajor = Version.LATEST.major - 1; previousMajor <= Version.LATEST.major; previousMajor++) {\n      for (int newMajor = Version.LATEST.major - 1; newMajor <= Version.LATEST.major; newMajor++) {\n        for (OpenMode openMode : OpenMode.values()) {\n          try (Directory dir = newDirectory()) {\n            try (IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setIndexCreatedVersionMajor(previousMajor))) {\n              assert w != null;\n            }\n            SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n            assertEquals(previousMajor, infos.getIndexCreatedVersionMajor());\n            try (IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setOpenMode(openMode).setIndexCreatedVersionMajor(newMajor))) {\n              assert w != null;\n            }\n            infos = SegmentInfos.readLatestCommit(dir);\n            if (openMode == OpenMode.CREATE) {\n              assertEquals(newMajor, infos.getIndexCreatedVersionMajor());\n            } else {\n              assertEquals(previousMajor, infos.getIndexCreatedVersionMajor());\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testSetIndexCreatedVersion() throws IOException {\n    IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n        () -> new IndexWriterConfig().setIndexCreatedVersionMajor(Version.LATEST.major+1));\n    assertEquals(\"indexCreatedVersionMajor may not be in the future: current major version is \" +\n        Version.LATEST.major + \", but got: \" + (Version.LATEST.major+1), e.getMessage());\n    e = expectThrows(IllegalArgumentException.class,\n        () -> new IndexWriterConfig().setIndexCreatedVersionMajor(Version.LATEST.major-2));\n    assertEquals(\"indexCreatedVersionMajor may not be less than the minimum supported version: \" +\n        (Version.LATEST.major-1) + \", but got: \" + (Version.LATEST.major-2), e.getMessage());\n\n    for (int previousMajor = Version.LATEST.major - 1; previousMajor <= Version.LATEST.major; previousMajor++) {\n      for (int newMajor = Version.LATEST.major - 1; newMajor <= Version.LATEST.major; newMajor++) {\n        for (OpenMode openMode : OpenMode.values()) {\n          try (Directory dir = newDirectory()) {\n            try (IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setIndexCreatedVersionMajor(previousMajor))) {}\n            SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n            assertEquals(previousMajor, infos.getIndexCreatedVersionMajor());\n            try (IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setOpenMode(openMode).setIndexCreatedVersionMajor(newMajor))) {}\n            infos = SegmentInfos.readLatestCommit(dir);\n            if (openMode == OpenMode.CREATE) {\n              assertEquals(newMajor, infos.getIndexCreatedVersionMajor());\n            } else {\n              assertEquals(previousMajor, infos.getIndexCreatedVersionMajor());\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb769584d3433c13d4262b03a87433e9a8c5a307":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30c21918ef3ad23e254f39cb0cd6c86851fcb993":["cb769584d3433c13d4262b03a87433e9a8c5a307"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30c21918ef3ad23e254f39cb0cd6c86851fcb993"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb769584d3433c13d4262b03a87433e9a8c5a307"],"cb769584d3433c13d4262b03a87433e9a8c5a307":["30c21918ef3ad23e254f39cb0cd6c86851fcb993"],"30c21918ef3ad23e254f39cb0cd6c86851fcb993":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}