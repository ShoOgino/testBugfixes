{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testMixedTypesDifferentThreads().mjava","commits":[{"id":"6e2893fd5349134af382d33ccc3d84840394c6c1","date":1353682567,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testMixedTypesDifferentThreads().mjava","pathOld":"/dev/null","sourceNew":"  // Two documents with same field as different types, added\n  // from separate threads:\n  public void testMixedTypesDifferentThreads() throws Exception {\n    Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean hitExc = new AtomicBoolean();\n    Thread[] threads = new Thread[3];\n    for(int i=0;i<3;i++) {\n      Field field;\n      if (i == 0) {\n        field = new SortedBytesDocValuesField(\"foo\", new BytesRef(\"hello\"));\n      } else if (i == 1) {\n        field = new IntDocValuesField(\"foo\", 0);\n      } else {\n        field = new DerefBytesDocValuesField(\"foo\", new BytesRef(\"bazz\"), true);\n      }\n      final Document doc = new Document();\n      doc.add(field);\n\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              w.addDocument(doc);\n            } catch (IllegalArgumentException iae) {\n              // expected\n              hitExc.set(true);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    startingGun.countDown();\n\n    for(Thread t : threads) {\n      t.join();\n    }\n    assertTrue(hitExc.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testMixedTypesDifferentThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testMixedTypesDifferentThreads().mjava","sourceNew":"  // Two documents with same field as different types, added\n  // from separate threads:\n  public void testMixedTypesDifferentThreads() throws Exception {\n    Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean hitExc = new AtomicBoolean();\n    Thread[] threads = new Thread[3];\n    for(int i=0;i<3;i++) {\n      Field field;\n      if (i == 0) {\n        field = new SortedDocValuesField(\"foo\", new BytesRef(\"hello\"));\n      } else if (i == 1) {\n        field = new NumericDocValuesField(\"foo\", 0);\n      } else {\n        field = new BinaryDocValuesField(\"foo\", new BytesRef(\"bazz\"));\n      }\n      final Document doc = new Document();\n      doc.add(field);\n\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              w.addDocument(doc);\n            } catch (IllegalArgumentException iae) {\n              // expected\n              hitExc.set(true);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    startingGun.countDown();\n\n    for(Thread t : threads) {\n      t.join();\n    }\n    assertTrue(hitExc.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Two documents with same field as different types, added\n  // from separate threads:\n  public void testMixedTypesDifferentThreads() throws Exception {\n    Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean hitExc = new AtomicBoolean();\n    Thread[] threads = new Thread[3];\n    for(int i=0;i<3;i++) {\n      Field field;\n      if (i == 0) {\n        field = new SortedBytesDocValuesField(\"foo\", new BytesRef(\"hello\"));\n      } else if (i == 1) {\n        field = new IntDocValuesField(\"foo\", 0);\n      } else {\n        field = new DerefBytesDocValuesField(\"foo\", new BytesRef(\"bazz\"), true);\n      }\n      final Document doc = new Document();\n      doc.add(field);\n\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              w.addDocument(doc);\n            } catch (IllegalArgumentException iae) {\n              // expected\n              hitExc.set(true);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    startingGun.countDown();\n\n    for(Thread t : threads) {\n      t.join();\n    }\n    assertTrue(hitExc.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testMixedTypesDifferentThreads().mjava","pathOld":"/dev/null","sourceNew":"  // Two documents with same field as different types, added\n  // from separate threads:\n  public void testMixedTypesDifferentThreads() throws Exception {\n    Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean hitExc = new AtomicBoolean();\n    Thread[] threads = new Thread[3];\n    for(int i=0;i<3;i++) {\n      Field field;\n      if (i == 0) {\n        field = new SortedDocValuesField(\"foo\", new BytesRef(\"hello\"));\n      } else if (i == 1) {\n        field = new NumericDocValuesField(\"foo\", 0);\n      } else {\n        field = new BinaryDocValuesField(\"foo\", new BytesRef(\"bazz\"));\n      }\n      final Document doc = new Document();\n      doc.add(field);\n\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              w.addDocument(doc);\n            } catch (IllegalArgumentException iae) {\n              // expected\n              hitExc.set(true);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    startingGun.countDown();\n\n    for(Thread t : threads) {\n      t.join();\n    }\n    assertTrue(hitExc.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testMixedTypesDifferentThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testMixedTypesDifferentThreads().mjava","sourceNew":"  // Two documents with same field as different types, added\n  // from separate threads:\n  public void testMixedTypesDifferentThreads() throws Exception {\n    Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean hitExc = new AtomicBoolean();\n    Thread[] threads = new Thread[3];\n    for(int i=0;i<3;i++) {\n      Field field;\n      if (i == 0) {\n        field = new SortedDocValuesField(\"foo\", new BytesRef(\"hello\"));\n      } else if (i == 1) {\n        field = new NumericDocValuesField(\"foo\", 0);\n      } else {\n        field = new BinaryDocValuesField(\"foo\", new BytesRef(\"bazz\"));\n      }\n      final Document doc = new Document();\n      doc.add(field);\n\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              w.addDocument(doc);\n            } catch (IllegalArgumentException iae) {\n              // expected\n              hitExc.set(true);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    startingGun.countDown();\n\n    for(Thread t : threads) {\n      t.join();\n    }\n    assertTrue(hitExc.get());\n    w.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // Two documents with same field as different types, added\n  // from separate threads:\n  public void testMixedTypesDifferentThreads() throws Exception {\n    Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean hitExc = new AtomicBoolean();\n    Thread[] threads = new Thread[3];\n    for(int i=0;i<3;i++) {\n      Field field;\n      if (i == 0) {\n        field = new SortedDocValuesField(\"foo\", new BytesRef(\"hello\"));\n      } else if (i == 1) {\n        field = new NumericDocValuesField(\"foo\", 0);\n      } else {\n        field = new BinaryDocValuesField(\"foo\", new BytesRef(\"bazz\"));\n      }\n      final Document doc = new Document();\n      doc.add(field);\n\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              w.addDocument(doc);\n            } catch (IllegalArgumentException iae) {\n              // expected\n              hitExc.set(true);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    startingGun.countDown();\n\n    for(Thread t : threads) {\n      t.join();\n    }\n    assertTrue(hitExc.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testMixedTypesDifferentThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testMixedTypesDifferentThreads().mjava","sourceNew":"  // Two documents with same field as different types, added\n  // from separate threads:\n  public void testMixedTypesDifferentThreads() throws Exception {\n    Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean hitExc = new AtomicBoolean();\n    Thread[] threads = new Thread[3];\n    for(int i=0;i<3;i++) {\n      Field field;\n      if (i == 0) {\n        field = new SortedDocValuesField(\"foo\", new BytesRef(\"hello\"));\n      } else if (i == 1) {\n        field = new NumericDocValuesField(\"foo\", 0);\n      } else {\n        field = new BinaryDocValuesField(\"foo\", new BytesRef(\"bazz\"));\n      }\n      final Document doc = new Document();\n      doc.add(field);\n\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              w.addDocument(doc);\n            } catch (IllegalArgumentException iae) {\n              // expected\n              hitExc.set(true);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    startingGun.countDown();\n\n    for(Thread t : threads) {\n      t.join();\n    }\n    assertTrue(hitExc.get());\n    w.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // Two documents with same field as different types, added\n  // from separate threads:\n  public void testMixedTypesDifferentThreads() throws Exception {\n    Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean hitExc = new AtomicBoolean();\n    Thread[] threads = new Thread[3];\n    for(int i=0;i<3;i++) {\n      Field field;\n      if (i == 0) {\n        field = new SortedDocValuesField(\"foo\", new BytesRef(\"hello\"));\n      } else if (i == 1) {\n        field = new NumericDocValuesField(\"foo\", 0);\n      } else {\n        field = new BinaryDocValuesField(\"foo\", new BytesRef(\"bazz\"));\n      }\n      final Document doc = new Document();\n      doc.add(field);\n\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              w.addDocument(doc);\n            } catch (IllegalArgumentException iae) {\n              // expected\n              hitExc.set(true);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    startingGun.countDown();\n\n    for(Thread t : threads) {\n      t.join();\n    }\n    assertTrue(hitExc.get());\n    w.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testMixedTypesDifferentThreads().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testMixedTypesDifferentThreads().mjava","sourceNew":"  // Two documents with same field as different types, added\n  // from separate threads:\n  public void testMixedTypesDifferentThreads() throws Exception {\n    Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean hitExc = new AtomicBoolean();\n    Thread[] threads = new Thread[3];\n    for(int i=0;i<3;i++) {\n      Field field;\n      if (i == 0) {\n        field = new SortedDocValuesField(\"foo\", new BytesRef(\"hello\"));\n      } else if (i == 1) {\n        field = new NumericDocValuesField(\"foo\", 0);\n      } else {\n        field = new BinaryDocValuesField(\"foo\", new BytesRef(\"bazz\"));\n      }\n      final Document doc = new Document();\n      doc.add(field);\n\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              w.addDocument(doc);\n            } catch (IllegalArgumentException iae) {\n              // expected\n              hitExc.set(true);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    startingGun.countDown();\n\n    for(Thread t : threads) {\n      t.join();\n    }\n    assertTrue(hitExc.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Two documents with same field as different types, added\n  // from separate threads:\n  public void testMixedTypesDifferentThreads() throws Exception {\n    Directory dir = newDirectory();\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean hitExc = new AtomicBoolean();\n    Thread[] threads = new Thread[3];\n    for(int i=0;i<3;i++) {\n      Field field;\n      if (i == 0) {\n        field = new SortedDocValuesField(\"foo\", new BytesRef(\"hello\"));\n      } else if (i == 1) {\n        field = new NumericDocValuesField(\"foo\", 0);\n      } else {\n        field = new BinaryDocValuesField(\"foo\", new BytesRef(\"bazz\"));\n      }\n      final Document doc = new Document();\n      doc.add(field);\n\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              startingGun.await();\n              w.addDocument(doc);\n            } catch (IllegalArgumentException iae) {\n              // expected\n              hitExc.set(true);\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      threads[i].start();\n    }\n\n    startingGun.countDown();\n\n    for(Thread t : threads) {\n      t.join();\n    }\n    assertTrue(hitExc.get());\n    w.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["6e2893fd5349134af382d33ccc3d84840394c6c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6e2893fd5349134af382d33ccc3d84840394c6c1":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","6e2893fd5349134af382d33ccc3d84840394c6c1"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}