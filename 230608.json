{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaOnDownNode().mjava","commits":[{"id":"4aea71c8b6a44bbbd3b8fcc42e5838a92b35634f","date":1522415499,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaOnDownNode().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void deleteReplicaOnDownNode() throws Exception {\n    final String collectionName = \"deleteReplicaOnDownNode\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2).process(cluster.getSolrClient());\n    waitForState(\"Expected one shards with two replicas\", collectionName, clusterShape(1, 2));\n\n    Slice shard = getCollectionState(collectionName).getSlice(\"shard1\");\n    Replica replica = shard.getReplicas(rep -> !rep.getName().equals(shard.getLeader().getName())).get(0);\n    JettySolrRunner replicaJetty = getJettyForReplica(replica);\n    CoreDescriptor replicaCd;\n    try (SolrCore core = replicaJetty.getCoreContainer().getCore(replica.getCoreName())) {\n      replicaCd = core.getCoreDescriptor();\n    }\n    assertNotNull(\"Expected core descriptor of \"+ replica.getName() + \" is not null\",replicaCd);\n    String replicaJettyNodeName = replicaJetty.getNodeName();\n\n    // shutdown node of a replica\n    replicaJetty.stop();\n    waitForNodeLeave(replicaJettyNodeName);\n    waitForState(\"Expected one shards with one replica\", collectionName, clusterShape(1, 1));\n    CollectionAdminRequest.deleteReplica(collectionName, shard.getName(), replica.getName()).process(cluster.getSolrClient());\n    waitForState(\"Expected only one replica left\", collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 1);\n\n    // restart the test and make sure the data get deleted\n    replicaJetty.start();\n    TimeOut timeOut = new TimeOut(60, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    timeOut.waitFor(\"Expected data dir and instance dir of \" + replica.getName() + \" is deleted\", ()\n        -> !Files.exists(replicaCd.getInstanceDir()) && !FileUtils.fileExists(replicaCd.getDataDir()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4ad031303fbb1c22ddb8348ee0798afd3553f7a","date":1522482628,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteReplicaTest#deleteReplicaOnDownNode().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void deleteReplicaOnDownNode() throws Exception {\n    final String collectionName = \"deleteReplicaOnDownNode\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 2).process(cluster.getSolrClient());\n    waitForState(\"Expected one shards with two replicas\", collectionName, clusterShape(1, 2));\n\n    Slice shard = getCollectionState(collectionName).getSlice(\"shard1\");\n    Replica replica = shard.getReplicas(rep -> !rep.getName().equals(shard.getLeader().getName())).get(0);\n    JettySolrRunner replicaJetty = getJettyForReplica(replica);\n    CoreDescriptor replicaCd;\n    try (SolrCore core = replicaJetty.getCoreContainer().getCore(replica.getCoreName())) {\n      replicaCd = core.getCoreDescriptor();\n    }\n    assertNotNull(\"Expected core descriptor of \"+ replica.getName() + \" is not null\",replicaCd);\n    String replicaJettyNodeName = replicaJetty.getNodeName();\n\n    // shutdown node of a replica\n    replicaJetty.stop();\n    waitForNodeLeave(replicaJettyNodeName);\n    waitForState(\"Expected one shards with one replica\", collectionName, clusterShape(1, 1));\n    CollectionAdminRequest.deleteReplica(collectionName, shard.getName(), replica.getName()).process(cluster.getSolrClient());\n    waitForState(\"Expected only one replica left\", collectionName, (liveNodes, collectionState) -> collectionState.getReplicas().size() == 1);\n\n    // restart the test and make sure the data get deleted\n    replicaJetty.start();\n    TimeOut timeOut = new TimeOut(60, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    timeOut.waitFor(\"Expected data dir and instance dir of \" + replica.getName() + \" is deleted\", ()\n        -> !Files.exists(replicaCd.getInstanceDir()) && !FileUtils.fileExists(replicaCd.getDataDir()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4ad031303fbb1c22ddb8348ee0798afd3553f7a":["4aea71c8b6a44bbbd3b8fcc42e5838a92b35634f"],"4aea71c8b6a44bbbd3b8fcc42e5838a92b35634f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4aea71c8b6a44bbbd3b8fcc42e5838a92b35634f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4ad031303fbb1c22ddb8348ee0798afd3553f7a":[],"4aea71c8b6a44bbbd3b8fcc42e5838a92b35634f":["f4ad031303fbb1c22ddb8348ee0798afd3553f7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f4ad031303fbb1c22ddb8348ee0798afd3553f7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}