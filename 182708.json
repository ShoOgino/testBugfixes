{"path":"lucene/core/src/test/org/apache/lucene/util/TestCollectionUtil#testEmptyListSort().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestCollectionUtil#testEmptyListSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestCollectionUtil#testEmptyListSort().mjava","sourceNew":"  public void testEmptyListSort() {\n    // should produce no exceptions\n    List<Integer> list = Arrays.asList(new Integer[0]); // LUCENE-2989\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n    \n    // check that empty non-random access lists pass sorting without ex (as sorting is not needed)\n    list = new LinkedList<Integer>();\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n  }\n\n","sourceOld":"  public void testEmptyListSort() {\n    // should produce no exceptions\n    List<Integer> list = Arrays.asList(new Integer[0]); // LUCENE-2989\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n    \n    // check that empty non-random access lists pass sorting without ex (as sorting is not needed)\n    list = new LinkedList<Integer>();\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d666f5b596b5ce43296739e9453ff761c7ddde3f","date":1363451610,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestCollectionUtil#testEmptyListSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestCollectionUtil#testEmptyListSort().mjava","sourceNew":"  public void testEmptyListSort() {\n    // should produce no exceptions\n    List<Integer> list = Arrays.asList(new Integer[0]); // LUCENE-2989\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.timSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.binarySort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.timSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n    CollectionUtil.binarySort(list, Collections.reverseOrder());\n    \n    // check that empty non-random access lists pass sorting without ex (as sorting is not needed)\n    list = new LinkedList<Integer>();\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.timSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.binarySort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.timSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n    CollectionUtil.binarySort(list, Collections.reverseOrder());\n  }\n\n","sourceOld":"  public void testEmptyListSort() {\n    // should produce no exceptions\n    List<Integer> list = Arrays.asList(new Integer[0]); // LUCENE-2989\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n    \n    // check that empty non-random access lists pass sorting without ex (as sorting is not needed)\n    list = new LinkedList<Integer>();\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestCollectionUtil#testEmptyListSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestCollectionUtil#testEmptyListSort().mjava","sourceNew":"  public void testEmptyListSort() {\n    // should produce no exceptions\n    List<Integer> list = Arrays.asList(new Integer[0]); // LUCENE-2989\n    CollectionUtil.introSort(list);\n    CollectionUtil.timSort(list);\n    CollectionUtil.introSort(list, Collections.reverseOrder());\n    CollectionUtil.timSort(list, Collections.reverseOrder());\n    \n    // check that empty non-random access lists pass sorting without ex (as sorting is not needed)\n    list = new LinkedList<Integer>();\n    CollectionUtil.introSort(list);\n    CollectionUtil.timSort(list);\n    CollectionUtil.introSort(list, Collections.reverseOrder());\n    CollectionUtil.timSort(list, Collections.reverseOrder());\n  }\n\n","sourceOld":"  public void testEmptyListSort() {\n    // should produce no exceptions\n    List<Integer> list = Arrays.asList(new Integer[0]); // LUCENE-2989\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.timSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.binarySort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.timSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n    CollectionUtil.binarySort(list, Collections.reverseOrder());\n    \n    // check that empty non-random access lists pass sorting without ex (as sorting is not needed)\n    list = new LinkedList<Integer>();\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.timSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.binarySort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.timSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n    CollectionUtil.binarySort(list, Collections.reverseOrder());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestCollectionUtil#testEmptyListSort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestCollectionUtil#testEmptyListSort().mjava","sourceNew":"  public void testEmptyListSort() {\n    // should produce no exceptions\n    List<Integer> list = Arrays.asList(new Integer[0]); // LUCENE-2989\n    CollectionUtil.introSort(list);\n    CollectionUtil.timSort(list);\n    CollectionUtil.introSort(list, Collections.reverseOrder());\n    CollectionUtil.timSort(list, Collections.reverseOrder());\n    \n    // check that empty non-random access lists pass sorting without ex (as sorting is not needed)\n    list = new LinkedList<>();\n    CollectionUtil.introSort(list);\n    CollectionUtil.timSort(list);\n    CollectionUtil.introSort(list, Collections.reverseOrder());\n    CollectionUtil.timSort(list, Collections.reverseOrder());\n  }\n\n","sourceOld":"  public void testEmptyListSort() {\n    // should produce no exceptions\n    List<Integer> list = Arrays.asList(new Integer[0]); // LUCENE-2989\n    CollectionUtil.introSort(list);\n    CollectionUtil.timSort(list);\n    CollectionUtil.introSort(list, Collections.reverseOrder());\n    CollectionUtil.timSort(list, Collections.reverseOrder());\n    \n    // check that empty non-random access lists pass sorting without ex (as sorting is not needed)\n    list = new LinkedList<Integer>();\n    CollectionUtil.introSort(list);\n    CollectionUtil.timSort(list);\n    CollectionUtil.introSort(list, Collections.reverseOrder());\n    CollectionUtil.timSort(list, Collections.reverseOrder());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"d666f5b596b5ce43296739e9453ff761c7ddde3f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["d666f5b596b5ce43296739e9453ff761c7ddde3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d666f5b596b5ce43296739e9453ff761c7ddde3f":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d666f5b596b5ce43296739e9453ff761c7ddde3f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}