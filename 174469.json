{"path":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testRandom().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testRandom().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testRandom().mjava","sourceNew":"  public void testRandom() {\n    Set<Term> terms = new TreeSet<Term>();\n    int nterms = atLeast(10000);\n    for (int i = 0; i < nterms; i++) {\n      Term term = new Term(_TestUtil.randomUnicodeString(random, 2), _TestUtil.randomUnicodeString(random));\n      terms.add(term);\n    }    \n    \n    PrefixCodedTerms.Builder b = new PrefixCodedTerms.Builder();\n    for (Term ref: terms) {\n      b.add(ref);\n    }\n    PrefixCodedTerms pb = b.finish();\n    \n    Iterator<Term> expected = terms.iterator();\n    for (Term t : pb) {\n      assertTrue(expected.hasNext());\n      assertEquals(expected.next(), t);\n    }\n    assertFalse(expected.hasNext());\n  }\n\n","sourceOld":"  public void testRandom() {\n    Set<Term> terms = new TreeSet<Term>();\n    int nterms = atLeast(10000);\n    for (int i = 0; i < nterms; i++) {\n      Term term = new Term(_TestUtil.randomUnicodeString(random, 2), _TestUtil.randomUnicodeString(random));\n      terms.add(term);\n    }    \n    \n    PrefixCodedTerms.Builder b = new PrefixCodedTerms.Builder();\n    for (Term ref: terms) {\n      b.add(ref);\n    }\n    PrefixCodedTerms pb = b.finish();\n    \n    Iterator<Term> expected = terms.iterator();\n    for (Term t : pb) {\n      assertTrue(expected.hasNext());\n      assertEquals(expected.next(), t);\n    }\n    assertFalse(expected.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testRandom().mjava","sourceNew":"  public void testRandom() {\n    Set<Term> terms = new TreeSet<Term>();\n    int nterms = atLeast(10000);\n    for (int i = 0; i < nterms; i++) {\n      Term term = new Term(_TestUtil.randomUnicodeString(random(), 2), _TestUtil.randomUnicodeString(random()));\n      terms.add(term);\n    }    \n    \n    PrefixCodedTerms.Builder b = new PrefixCodedTerms.Builder();\n    for (Term ref: terms) {\n      b.add(ref);\n    }\n    PrefixCodedTerms pb = b.finish();\n    \n    Iterator<Term> expected = terms.iterator();\n    for (Term t : pb) {\n      assertTrue(expected.hasNext());\n      assertEquals(expected.next(), t);\n    }\n    assertFalse(expected.hasNext());\n  }\n\n","sourceOld":"  public void testRandom() {\n    Set<Term> terms = new TreeSet<Term>();\n    int nterms = atLeast(10000);\n    for (int i = 0; i < nterms; i++) {\n      Term term = new Term(_TestUtil.randomUnicodeString(random, 2), _TestUtil.randomUnicodeString(random));\n      terms.add(term);\n    }    \n    \n    PrefixCodedTerms.Builder b = new PrefixCodedTerms.Builder();\n    for (Term ref: terms) {\n      b.add(ref);\n    }\n    PrefixCodedTerms pb = b.finish();\n    \n    Iterator<Term> expected = terms.iterator();\n    for (Term t : pb) {\n      assertTrue(expected.hasNext());\n      assertEquals(expected.next(), t);\n    }\n    assertFalse(expected.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testRandom().mjava","sourceNew":"  public void testRandom() {\n    Set<Term> terms = new TreeSet<Term>();\n    int nterms = atLeast(10000);\n    for (int i = 0; i < nterms; i++) {\n      Term term = new Term(TestUtil.randomUnicodeString(random(), 2), TestUtil.randomUnicodeString(random()));\n      terms.add(term);\n    }    \n    \n    PrefixCodedTerms.Builder b = new PrefixCodedTerms.Builder();\n    for (Term ref: terms) {\n      b.add(ref);\n    }\n    PrefixCodedTerms pb = b.finish();\n    \n    Iterator<Term> expected = terms.iterator();\n    for (Term t : pb) {\n      assertTrue(expected.hasNext());\n      assertEquals(expected.next(), t);\n    }\n    assertFalse(expected.hasNext());\n  }\n\n","sourceOld":"  public void testRandom() {\n    Set<Term> terms = new TreeSet<Term>();\n    int nterms = atLeast(10000);\n    for (int i = 0; i < nterms; i++) {\n      Term term = new Term(_TestUtil.randomUnicodeString(random(), 2), _TestUtil.randomUnicodeString(random()));\n      terms.add(term);\n    }    \n    \n    PrefixCodedTerms.Builder b = new PrefixCodedTerms.Builder();\n    for (Term ref: terms) {\n      b.add(ref);\n    }\n    PrefixCodedTerms pb = b.finish();\n    \n    Iterator<Term> expected = terms.iterator();\n    for (Term t : pb) {\n      assertTrue(expected.hasNext());\n      assertEquals(expected.next(), t);\n    }\n    assertFalse(expected.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testRandom().mjava","sourceNew":"  public void testRandom() {\n    Set<Term> terms = new TreeSet<>();\n    int nterms = atLeast(10000);\n    for (int i = 0; i < nterms; i++) {\n      Term term = new Term(TestUtil.randomUnicodeString(random(), 2), TestUtil.randomUnicodeString(random()));\n      terms.add(term);\n    }    \n    \n    PrefixCodedTerms.Builder b = new PrefixCodedTerms.Builder();\n    for (Term ref: terms) {\n      b.add(ref);\n    }\n    PrefixCodedTerms pb = b.finish();\n    \n    Iterator<Term> expected = terms.iterator();\n    for (Term t : pb) {\n      assertTrue(expected.hasNext());\n      assertEquals(expected.next(), t);\n    }\n    assertFalse(expected.hasNext());\n  }\n\n","sourceOld":"  public void testRandom() {\n    Set<Term> terms = new TreeSet<Term>();\n    int nterms = atLeast(10000);\n    for (int i = 0; i < nterms; i++) {\n      Term term = new Term(TestUtil.randomUnicodeString(random(), 2), TestUtil.randomUnicodeString(random()));\n      terms.add(term);\n    }    \n    \n    PrefixCodedTerms.Builder b = new PrefixCodedTerms.Builder();\n    for (Term ref: terms) {\n      b.add(ref);\n    }\n    PrefixCodedTerms pb = b.finish();\n    \n    Iterator<Term> expected = terms.iterator();\n    for (Term t : pb) {\n      assertTrue(expected.hasNext());\n      assertEquals(expected.next(), t);\n    }\n    assertFalse(expected.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e4c214a1f904dde76f5611b56d4081533055b3b","date":1421938451,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testRandom().mjava","sourceNew":"  public void testRandom() {\n    Set<Term> terms = new TreeSet<>();\n    int nterms = atLeast(10000);\n    for (int i = 0; i < nterms; i++) {\n      Term term = new Term(TestUtil.randomUnicodeString(random(), 2), TestUtil.randomUnicodeString(random()));\n      terms.add(term);\n    }    \n    \n    PrefixCodedTerms.Builder b = new PrefixCodedTerms.Builder();\n    for (Term ref: terms) {\n      b.add(ref);\n    }\n    PrefixCodedTerms pb = b.finish();\n    \n    TermIterator iter = pb.iterator();\n    Iterator<Term> expected = terms.iterator();\n    String field = \"\";\n    //System.out.println(\"TEST: now iter\");\n    while (true) {\n      boolean newField = iter.next();\n      //System.out.println(\"  newField=\" + newField);\n      if (newField) {\n        field = iter.field;\n        if (field == null) {\n          break;\n        }\n      }\n      assertTrue(expected.hasNext());\n      assertEquals(expected.next(), new Term(field, iter.bytes));\n    }\n\n    assertFalse(expected.hasNext());\n  }\n\n","sourceOld":"  public void testRandom() {\n    Set<Term> terms = new TreeSet<>();\n    int nterms = atLeast(10000);\n    for (int i = 0; i < nterms; i++) {\n      Term term = new Term(TestUtil.randomUnicodeString(random(), 2), TestUtil.randomUnicodeString(random()));\n      terms.add(term);\n    }    \n    \n    PrefixCodedTerms.Builder b = new PrefixCodedTerms.Builder();\n    for (Term ref: terms) {\n      b.add(ref);\n    }\n    PrefixCodedTerms pb = b.finish();\n    \n    Iterator<Term> expected = terms.iterator();\n    for (Term t : pb) {\n      assertTrue(expected.hasNext());\n      assertEquals(expected.next(), t);\n    }\n    assertFalse(expected.hasNext());\n  }\n\n","bugFix":["9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"258f227b48a4dbfc180f6ec70f172469d6a2bef8","date":1428687213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testRandom().mjava","sourceNew":"  public void testRandom() {\n    Set<Term> terms = new TreeSet<>();\n    int nterms = atLeast(10000);\n    for (int i = 0; i < nterms; i++) {\n      Term term = new Term(TestUtil.randomUnicodeString(random(), 2), TestUtil.randomUnicodeString(random()));\n      terms.add(term);\n    }    \n    \n    PrefixCodedTerms.Builder b = new PrefixCodedTerms.Builder();\n    for (Term ref: terms) {\n      b.add(ref);\n    }\n    PrefixCodedTerms pb = b.finish();\n    \n    TermIterator iter = pb.iterator();\n    Iterator<Term> expected = terms.iterator();\n    //System.out.println(\"TEST: now iter\");\n    while (iter.next() != null) {\n      assertTrue(expected.hasNext());\n      assertEquals(expected.next(), new Term(iter.field(), iter.bytes));\n    }\n\n    assertFalse(expected.hasNext());\n  }\n\n","sourceOld":"  public void testRandom() {\n    Set<Term> terms = new TreeSet<>();\n    int nterms = atLeast(10000);\n    for (int i = 0; i < nterms; i++) {\n      Term term = new Term(TestUtil.randomUnicodeString(random(), 2), TestUtil.randomUnicodeString(random()));\n      terms.add(term);\n    }    \n    \n    PrefixCodedTerms.Builder b = new PrefixCodedTerms.Builder();\n    for (Term ref: terms) {\n      b.add(ref);\n    }\n    PrefixCodedTerms pb = b.finish();\n    \n    TermIterator iter = pb.iterator();\n    Iterator<Term> expected = terms.iterator();\n    String field = \"\";\n    //System.out.println(\"TEST: now iter\");\n    while (true) {\n      boolean newField = iter.next();\n      //System.out.println(\"  newField=\" + newField);\n      if (newField) {\n        field = iter.field;\n        if (field == null) {\n          break;\n        }\n      }\n      assertTrue(expected.hasNext());\n      assertEquals(expected.next(), new Term(field, iter.bytes));\n    }\n\n    assertFalse(expected.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e2b30bfb739689d33532e6b7d2d39582bd89a3a","date":1432237721,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testRandom().mjava","sourceNew":"  public void testRandom() {\n    Set<Term> terms = new TreeSet<>();\n    int nterms = atLeast(10000);\n    for (int i = 0; i < nterms; i++) {\n      Term term = new Term(TestUtil.randomUnicodeString(random(), 2), TestUtil.randomUnicodeString(random()));\n      terms.add(term);\n    }    \n    \n    PrefixCodedTerms.Builder b = new PrefixCodedTerms.Builder();\n    for (Term ref: terms) {\n      b.add(ref);\n    }\n    PrefixCodedTerms pb = b.finish();\n    \n    TermIterator iter = pb.iterator();\n    Iterator<Term> expected = terms.iterator();\n    assertEquals(terms.size(), pb.size());\n    //System.out.println(\"TEST: now iter\");\n    while (iter.next() != null) {\n      assertTrue(expected.hasNext());\n      assertEquals(expected.next(), new Term(iter.field(), iter.bytes));\n    }\n\n    assertFalse(expected.hasNext());\n  }\n\n","sourceOld":"  public void testRandom() {\n    Set<Term> terms = new TreeSet<>();\n    int nterms = atLeast(10000);\n    for (int i = 0; i < nterms; i++) {\n      Term term = new Term(TestUtil.randomUnicodeString(random(), 2), TestUtil.randomUnicodeString(random()));\n      terms.add(term);\n    }    \n    \n    PrefixCodedTerms.Builder b = new PrefixCodedTerms.Builder();\n    for (Term ref: terms) {\n      b.add(ref);\n    }\n    PrefixCodedTerms pb = b.finish();\n    \n    TermIterator iter = pb.iterator();\n    Iterator<Term> expected = terms.iterator();\n    //System.out.println(\"TEST: now iter\");\n    while (iter.next() != null) {\n      assertTrue(expected.hasNext());\n      assertEquals(expected.next(), new Term(iter.field(), iter.bytes));\n    }\n\n    assertFalse(expected.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e2b30bfb739689d33532e6b7d2d39582bd89a3a":["258f227b48a4dbfc180f6ec70f172469d6a2bef8"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"258f227b48a4dbfc180f6ec70f172469d6a2bef8":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"6613659748fe4411a7dcf85266e55db1f95f7315":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7e4c214a1f904dde76f5611b56d4081533055b3b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a"]},"commit2Childs":{"3e2b30bfb739689d33532e6b7d2d39582bd89a3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"258f227b48a4dbfc180f6ec70f172469d6a2bef8":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7e4c214a1f904dde76f5611b56d4081533055b3b":["258f227b48a4dbfc180f6ec70f172469d6a2bef8"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}