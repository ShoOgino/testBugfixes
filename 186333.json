{"path":"src/java/org/apache/lucene/index/IndexWriter#numRamDocs().mjava","commits":[{"id":"5657b669e16b843aac69f0ba7e89def1f93f6ea0","date":1164163669,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#numRamDocs().mjava","pathOld":"/dev/null","sourceNew":"  /** Expert:  Return the number of documents whose segments are currently cached in memory.\n   * Useful when calling flushRamSegments()\n   */\n  public final synchronized int numRamDocs() {\n    return ramSegmentInfos.size();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#numRamDocs().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#numRamDocs().mjava","sourceNew":"  /** Expert:  Return the number of documents whose segments are currently cached in memory.\n   * Useful when calling flushRamSegments()\n   */\n  public final synchronized int numRamDocs() {\n    ensureOpen();\n    return ramSegmentInfos.size();\n  }\n\n","sourceOld":"  /** Expert:  Return the number of documents whose segments are currently cached in memory.\n   * Useful when calling flushRamSegments()\n   */\n  public final synchronized int numRamDocs() {\n    return ramSegmentInfos.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#numRamDocs().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#numRamDocs().mjava","sourceNew":"  /** Expert:  Return the number of documents whose segments are currently cached in memory.\n   * Useful when calling flush()\n   */\n  public final synchronized int numRamDocs() {\n    ensureOpen();\n    return docWriter.getNumDocsInRAM();\n  }\n\n","sourceOld":"  /** Expert:  Return the number of documents whose segments are currently cached in memory.\n   * Useful when calling flushRamSegments()\n   */\n  public final synchronized int numRamDocs() {\n    ensureOpen();\n    return ramSegmentInfos.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f28433067016ab5cfa967fe96d9b3fbd45cfec8c","date":1214578808,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#numRamDocs().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#numRamDocs().mjava","sourceNew":"  /** Expert:  Return the number of documents currently\n   *  buffered in RAM. */\n  public final synchronized int numRamDocs() {\n    ensureOpen();\n    return docWriter.getNumDocsInRAM();\n  }\n\n","sourceOld":"  /** Expert:  Return the number of documents whose segments are currently cached in memory.\n   * Useful when calling flush()\n   */\n  public final synchronized int numRamDocs() {\n    ensureOpen();\n    return docWriter.getNumDocsInRAM();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#numRamDocs().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#numRamDocs().mjava","sourceNew":"  /** Expert:  Return the number of documents currently\n   *  buffered in RAM. */\n  public final synchronized int numRamDocs() {\n    ensureOpen();\n    return docWriter.getNumDocsInRAM();\n  }\n\n","sourceOld":"  /** Expert:  Return the number of documents currently\n   *  buffered in RAM. */\n  public final synchronized int numRamDocs() {\n    ensureOpen();\n    return docWriter.getNumDocsInRAM();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"328c1568e471f0c6eaa49ec00334ca59e573710f":["5657b669e16b843aac69f0ba7e89def1f93f6ea0"],"f28433067016ab5cfa967fe96d9b3fbd45cfec8c":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5657b669e16b843aac69f0ba7e89def1f93f6ea0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f28433067016ab5cfa967fe96d9b3fbd45cfec8c"]},"commit2Childs":{"328c1568e471f0c6eaa49ec00334ca59e573710f":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"f28433067016ab5cfa967fe96d9b3fbd45cfec8c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5657b669e16b843aac69f0ba7e89def1f93f6ea0"],"5657b669e16b843aac69f0ba7e89def1f93f6ea0":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["f28433067016ab5cfa967fe96d9b3fbd45cfec8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}