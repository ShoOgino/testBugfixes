{"path":"solr/core/src/test/org/apache/solr/update/processor/PreAnalyzedUpdateProcessorTest#test(String,String[],String[]).mjava","commits":[{"id":"6c7ac188e4a03a976c95993dc3cd292df966faa4","date":1365151572,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/PreAnalyzedUpdateProcessorTest#test(String,String[],String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void test(String chain, String[] title, String[] teststop) throws Exception {\n    SolrInputDocument doc = processAdd(chain,\n        doc(f(\"id\", \"1\"),\n            f(\"title\", title[0]),\n            f(\"teststop\", teststop[0]),\n            f(\"nonexistent\", \"foobar\"),\n            f(\"ssto\", teststop[0]),\n            f(\"sind\", teststop[0])));\n    assertEquals(\"title should be unchanged\", title[0], doc.getFieldValue(\"title\"));\n    assertTrue(\"teststop should be a Field\", doc.getFieldValue(\"teststop\") instanceof Field);\n    Field f = (Field)doc.getFieldValue(\"teststop\");\n    assertEquals(\"teststop should have stringValue\", \"this is a test.\", f.stringValue());\n    assertNotNull(\"teststop should have tokensStreamValue\", f.tokenStreamValue());\n    assertNull(\"nonexistent should be dropped\", doc.getField(\"nonexistent\"));\n    // check how SchemaField type affects stored/indexed part processing\n    f = (Field)doc.getFieldValue(\"ssto\");\n    assertNotNull(\"should have ssto\", f);\n    assertNotNull(\"should have stringValue\", f.stringValue());\n    assertNull(\"should not have tokenStreamValue\", f.tokenStreamValue());\n    f = (Field)doc.getFieldValue(\"sind\");\n    assertNotNull(\"should have sind\", f);\n    assertNull(\"should not have stringValue: '\" + f.stringValue() + \"'\", f.stringValue());\n    assertNotNull(\"should have tokenStreamValue\", f.tokenStreamValue());\n    \n    doc = processAdd(chain,\n        doc(f(\"id\", \"2\"),\n            f(\"title\", title[1]),\n            f(\"teststop\", teststop[1]),\n            f(\"nonexistent\", \"foobar\"),\n            f(\"ssto\", teststop[1]),\n            f(\"sind\", teststop[1])));\n    assertTrue(\"title should be a Field\", doc.getFieldValue(\"title\") instanceof Field);\n    assertTrue(\"teststop should be a Field\", doc.getFieldValue(\"teststop\") instanceof Field);\n    f = (Field)doc.getFieldValue(\"teststop\");\n    assertEquals(\"teststop should have stringValue\", \"this is a test.\", f.stringValue());\n    assertNotNull(\"teststop should have tokensStreamValue\", f.tokenStreamValue());\n    assertNull(\"nonexistent should be dropped\", doc.getField(\"nonexistent\"));\n    // check how SchemaField type affects stored/indexed part processing\n    f = (Field)doc.getFieldValue(\"ssto\");\n    assertNotNull(\"should have ssto\", f);\n    assertNotNull(\"should have stringValue\", f.stringValue());\n    assertNull(\"should not have tokenStreamValue\", f.tokenStreamValue());\n    f = (Field)doc.getFieldValue(\"sind\");\n    assertNotNull(\"should have sind\", f);\n    assertNull(\"should not have stringValue: '\" + f.stringValue() + \"'\", f.stringValue());\n    assertNotNull(\"should have tokenStreamValue\", f.tokenStreamValue());\n    \n    assertU(commit());\n    assertQ(req(\"teststop:\\\"one two three\\\"\")\n        ,\"//str[@name='id'][.='1']\"\n        ,\"//str[@name='teststop'][.='this is a test.']\"\n        );\n    assertQ(req(\"teststop:three\")\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='1']\"\n        ,\"//result/doc[1]/str[@name='title'][.='not pre-analyzed']\"\n        ,\"//result/doc[2]/str[@name='id'][.='2']\"\n        ,\"//result/doc[2]/arr[@name='title']/str[.='string value']\"\n        );\n    assertQ(req(\"ssto:three\"), \"//*[@numFound='0']\");\n    assertQ(req(\"sind:three\"), \"//*[@numFound='2']\");\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c7ac188e4a03a976c95993dc3cd292df966faa4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c7ac188e4a03a976c95993dc3cd292df966faa4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c7ac188e4a03a976c95993dc3cd292df966faa4"],"6c7ac188e4a03a976c95993dc3cd292df966faa4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}