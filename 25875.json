{"path":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/FetcherTask#handleLink(String,String,boolean).mjava","commits":[{"id":"21b526e3e9974b2651365fbae52a976e6fc77aa4","date":1022108962,"type":1,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/FetcherTask#handleLink(String,String,boolean).mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/FetcherTask#handleLink(String,boolean).mjava","sourceNew":"    /**\n     * this is called whenever a links was found in the current document,\n     * Don't create too many objects here, this will be called\n     * millions of times\n     *\n     * @param link  Description of the Parameter\n     */\n    public void handleLink(String link, String anchor, boolean isFrame)\n    {\n        try\n        {\n            // cut out Ref part\n\n\n            int refPart = link.indexOf(\"#\");\n            //System.out.println(link);\n            if (refPart == 0)\n            {\n                return;\n            }\n            else if (refPart > 0)\n            {\n                link = link.substring(0, refPart);\n            }\n\n            URL url = null;\n            if (link.startsWith(\"http:\"))\n            {\n                // distinguish between absolute and relative URLs\n\n                url = new URL(link);\n            }\n            else\n            {\n                // relative url\n                url = new URL(base, link);\n            }\n\n            URLMessage urlMessage =  new URLMessage(url, contextUrl, isFrame, anchor);\n\n            String urlString = urlMessage.getURLString();\n\n            foundUrls.add(urlMessage);\n            //messageHandler.putMessage(new actURLMessage(url)); // put them in the very end\n        }\n        catch (MalformedURLException e)\n        {\n            //log.log(\"malformed url: base:\" + base + \" -+- link:\" + link);\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n        }\n        catch (Exception e)\n        {\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n            // e.printStackTrace();\n        }\n\n    }\n\n","sourceOld":"    /**\n     * this is called whenever a links was found in the current document,\n     * Don't create too many objects here, this will be called\n     * millions of times\n     *\n     * @param link  Description of the Parameter\n     */\n    public void handleLink(String link, boolean isFrame)\n    {\n        try\n        {\n            // cut out Ref part\n\n\n            int refPart = link.indexOf(\"#\");\n            //System.out.println(link);\n            if (refPart == 0)\n            {\n                return;\n            }\n            else if (refPart > 0)\n            {\n                link = link.substring(0, refPart);\n            }\n\n            URL url = null;\n            if (link.startsWith(\"http:\"))\n            {\n                // distinguish between absolute and relative URLs\n\n                url = new URL(link);\n            }\n            else\n            {\n                // relative url\n                url = new URL(base, link);\n            }\n\n            URLMessage urlMessage =  new URLMessage(url, contextUrl, isFrame);\n\n            String urlString = urlMessage.getURLString();\n\n            foundUrls.add(urlMessage);\n            //messageHandler.putMessage(new actURLMessage(url)); // put them in the very end\n        }\n        catch (MalformedURLException e)\n        {\n            //log.log(\"malformed url: base:\" + base + \" -+- link:\" + link);\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n        }\n        catch (Exception e)\n        {\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n            // e.printStackTrace();\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e","date":1022957716,"type":3,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/FetcherTask#handleLink(String,String,boolean).mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/FetcherTask#handleLink(String,String,boolean).mjava","sourceNew":"    /**\n     * this is called whenever a link was found in the current document,\n     * Don't create too many objects here, as this will be called\n     * millions of times\n     *\n     * @param link  Description of the Parameter\n     */\n    public void handleLink(String link, String anchor, boolean isFrame)\n    {\n        try\n        {\n            // cut out Ref part\n\n\n            int refPart = link.indexOf(\"#\");\n            //System.out.println(link);\n            if (refPart == 0)\n            {\n                return;\n            }\n            else if (refPart > 0)\n            {\n                link = link.substring(0, refPart);\n            }\n\n            URL url = null;\n            if (link.startsWith(\"http:\"))\n            {\n                // distinguish between absolute and relative URLs\n\n                url = new URL(link);\n            }\n            else\n            {\n                // relative url\n                url = new URL(base, link);\n            }\n\n            URLMessage urlMessage =  new URLMessage(url, contextUrl, isFrame, anchor);\n\n            String urlString = urlMessage.getURLString();\n\n            foundUrls.add(urlMessage);\n            //messageHandler.putMessage(new actURLMessage(url)); // put them in the very end\n        }\n        catch (MalformedURLException e)\n        {\n            //log.log(\"malformed url: base:\" + base + \" -+- link:\" + link);\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n        }\n        catch (Exception e)\n        {\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n            // e.printStackTrace();\n        }\n\n    }\n\n","sourceOld":"    /**\n     * this is called whenever a links was found in the current document,\n     * Don't create too many objects here, this will be called\n     * millions of times\n     *\n     * @param link  Description of the Parameter\n     */\n    public void handleLink(String link, String anchor, boolean isFrame)\n    {\n        try\n        {\n            // cut out Ref part\n\n\n            int refPart = link.indexOf(\"#\");\n            //System.out.println(link);\n            if (refPart == 0)\n            {\n                return;\n            }\n            else if (refPart > 0)\n            {\n                link = link.substring(0, refPart);\n            }\n\n            URL url = null;\n            if (link.startsWith(\"http:\"))\n            {\n                // distinguish between absolute and relative URLs\n\n                url = new URL(link);\n            }\n            else\n            {\n                // relative url\n                url = new URL(base, link);\n            }\n\n            URLMessage urlMessage =  new URLMessage(url, contextUrl, isFrame, anchor);\n\n            String urlString = urlMessage.getURLString();\n\n            foundUrls.add(urlMessage);\n            //messageHandler.putMessage(new actURLMessage(url)); // put them in the very end\n        }\n        catch (MalformedURLException e)\n        {\n            //log.log(\"malformed url: base:\" + base + \" -+- link:\" + link);\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n        }\n        catch (Exception e)\n        {\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n            // e.printStackTrace();\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19f3112e7cf0a35b5b8d45069103cd045ed7a583","date":1024322313,"type":3,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/FetcherTask#handleLink(String,String,boolean).mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/FetcherTask#handleLink(String,String,boolean).mjava","sourceNew":"    /**\n     * this is called whenever a link was found in the current document,\n     * Don't create too many objects here, as this will be called\n     * millions of times\n     *\n     * @param link  Description of the Parameter\n     */\n    public void handleLink(String link, String anchor, boolean isFrame)\n    {\n        try\n        {\n            // cut out Ref part\n\n\n            int refPart = link.indexOf(\"#\");\n            //System.out.println(link);\n            if (refPart == 0)\n            {\n                return;\n            }\n            else if (refPart > 0)\n            {\n                link = link.substring(0, refPart);\n            }\n\n            URL url = null;\n            if (link.startsWith(\"http:\"))\n            {\n                // distinguish between absolute and relative URLs\n\n                url = new URL(link);\n            }\n            else\n            {\n                // relative url\n                url = new URL(base, link);\n            }\n\n            URLMessage urlMessage =  new URLMessage(url, contextUrl, isFrame, anchor, hostManager);\n\n            //String urlString = urlMessage.getURLString();\n\n            foundUrls.add(urlMessage);\n            //messageHandler.putMessage(new actURLMessage(url)); // put them in the very end\n        }\n        catch (MalformedURLException e)\n        {\n            //log.log(\"malformed url: base:\" + base + \" -+- link:\" + link);\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n        }\n        catch (Exception e)\n        {\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n            // e.printStackTrace();\n        }\n\n    }\n\n","sourceOld":"    /**\n     * this is called whenever a link was found in the current document,\n     * Don't create too many objects here, as this will be called\n     * millions of times\n     *\n     * @param link  Description of the Parameter\n     */\n    public void handleLink(String link, String anchor, boolean isFrame)\n    {\n        try\n        {\n            // cut out Ref part\n\n\n            int refPart = link.indexOf(\"#\");\n            //System.out.println(link);\n            if (refPart == 0)\n            {\n                return;\n            }\n            else if (refPart > 0)\n            {\n                link = link.substring(0, refPart);\n            }\n\n            URL url = null;\n            if (link.startsWith(\"http:\"))\n            {\n                // distinguish between absolute and relative URLs\n\n                url = new URL(link);\n            }\n            else\n            {\n                // relative url\n                url = new URL(base, link);\n            }\n\n            URLMessage urlMessage =  new URLMessage(url, contextUrl, isFrame, anchor);\n\n            String urlString = urlMessage.getURLString();\n\n            foundUrls.add(urlMessage);\n            //messageHandler.putMessage(new actURLMessage(url)); // put them in the very end\n        }\n        catch (MalformedURLException e)\n        {\n            //log.log(\"malformed url: base:\" + base + \" -+- link:\" + link);\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n        }\n        catch (Exception e)\n        {\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n            // e.printStackTrace();\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35d2a11130c55c5aebafaa8a680a571684104914","date":1035298963,"type":3,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/FetcherTask#handleLink(String,String,boolean).mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/FetcherTask#handleLink(String,String,boolean).mjava","sourceNew":"    /**\n     * this is called whenever a link was found in the current document, Don't\n     * create too many objects here, as this will be called millions of times\n     *\n     * @param link     Description of the Parameter\n     * @param anchor   Description of the Parameter\n     * @param isFrame  Description of the Parameter\n     */\n    public void handleLink(String link, String anchor, boolean isFrame)\n    {\n        try\n        {\n            // cut out Ref part\n\n\n            int refPart = link.indexOf(\"#\");\n            //System.out.println(link);\n            if (refPart == 0)\n            {\n                return;\n            }\n            else if (refPart > 0)\n            {\n                link = link.substring(0, refPart);\n            }\n\n            URL url = null;\n            if (link.startsWith(\"http:\"))\n            {\n                // distinguish between absolute and relative URLs\n\n                url = new URL(link);\n            }\n            else\n            {\n                // relative url\n                url = new URL(base, link);\n            }\n            if(url.getPath() == null || url.getPath().length() == 0)\n            {\n                url = new URL(url.getProtocol(), url.getHost(), url.getPort(), \"/\" + url.getFile());\n            }\n            URLMessage urlMessage = new URLMessage(url, contextUrl, isFrame ? URLMessage.LINKTYPE_FRAME : URLMessage.LINKTYPE_ANCHOR, anchor, hostResolver);\n\n            //String urlString = urlMessage.getURLString();\n\n            foundUrls.add(urlMessage);\n            //messageHandler.putMessage(new actURLMessage(url)); // put them in the very end\n        }\n        catch (MalformedURLException e)\n        {\n            //log.log(\"malformed url: base:\" + base + \" -+- link:\" + link);\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n        }\n        catch (Exception e)\n        {\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n            // e.printStackTrace();\n        }\n\n    }\n\n","sourceOld":"    /**\n     * this is called whenever a link was found in the current document,\n     * Don't create too many objects here, as this will be called\n     * millions of times\n     *\n     * @param link  Description of the Parameter\n     */\n    public void handleLink(String link, String anchor, boolean isFrame)\n    {\n        try\n        {\n            // cut out Ref part\n\n\n            int refPart = link.indexOf(\"#\");\n            //System.out.println(link);\n            if (refPart == 0)\n            {\n                return;\n            }\n            else if (refPart > 0)\n            {\n                link = link.substring(0, refPart);\n            }\n\n            URL url = null;\n            if (link.startsWith(\"http:\"))\n            {\n                // distinguish between absolute and relative URLs\n\n                url = new URL(link);\n            }\n            else\n            {\n                // relative url\n                url = new URL(base, link);\n            }\n\n            URLMessage urlMessage =  new URLMessage(url, contextUrl, isFrame, anchor, hostManager);\n\n            //String urlString = urlMessage.getURLString();\n\n            foundUrls.add(urlMessage);\n            //messageHandler.putMessage(new actURLMessage(url)); // put them in the very end\n        }\n        catch (MalformedURLException e)\n        {\n            //log.log(\"malformed url: base:\" + base + \" -+- link:\" + link);\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n        }\n        catch (Exception e)\n        {\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n            // e.printStackTrace();\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/FetcherTask#handleLink(String,String,boolean).mjava","sourceNew":null,"sourceOld":"    /**\n     * this is called whenever a link was found in the current document, Don't\n     * create too many objects here, as this will be called millions of times\n     *\n     * @param link     Description of the Parameter\n     * @param anchor   Description of the Parameter\n     * @param isFrame  Description of the Parameter\n     */\n    public void handleLink(String link, String anchor, boolean isFrame)\n    {\n        try\n        {\n            // cut out Ref part\n\n\n            int refPart = link.indexOf(\"#\");\n            //System.out.println(link);\n            if (refPart == 0)\n            {\n                return;\n            }\n            else if (refPart > 0)\n            {\n                link = link.substring(0, refPart);\n            }\n\n            URL url = null;\n            if (link.startsWith(\"http:\"))\n            {\n                // distinguish between absolute and relative URLs\n\n                url = new URL(link);\n            }\n            else\n            {\n                // relative url\n                url = new URL(base, link);\n            }\n            if(url.getPath() == null || url.getPath().length() == 0)\n            {\n                url = new URL(url.getProtocol(), url.getHost(), url.getPort(), \"/\" + url.getFile());\n            }\n            URLMessage urlMessage = new URLMessage(url, contextUrl, isFrame ? URLMessage.LINKTYPE_FRAME : URLMessage.LINKTYPE_ANCHOR, anchor, hostResolver);\n\n            //String urlString = urlMessage.getURLString();\n\n            foundUrls.add(urlMessage);\n            //messageHandler.putMessage(new actURLMessage(url)); // put them in the very end\n        }\n        catch (MalformedURLException e)\n        {\n            //log.log(\"malformed url: base:\" + base + \" -+- link:\" + link);\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n        }\n        catch (Exception e)\n        {\n            log.log(\"warning: \" + e.getClass().getName() + \": \" + e.getMessage());\n            // e.printStackTrace();\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e":["21b526e3e9974b2651365fbae52a976e6fc77aa4"],"21b526e3e9974b2651365fbae52a976e6fc77aa4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["35d2a11130c55c5aebafaa8a680a571684104914"],"19f3112e7cf0a35b5b8d45069103cd045ed7a583":["12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e"],"35d2a11130c55c5aebafaa8a680a571684104914":["19f3112e7cf0a35b5b8d45069103cd045ed7a583"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e":["19f3112e7cf0a35b5b8d45069103cd045ed7a583"],"21b526e3e9974b2651365fbae52a976e6fc77aa4":["12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21b526e3e9974b2651365fbae52a976e6fc77aa4"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19f3112e7cf0a35b5b8d45069103cd045ed7a583":["35d2a11130c55c5aebafaa8a680a571684104914"],"35d2a11130c55c5aebafaa8a680a571684104914":["afc16d717d9ed1a8e45371668ca6de674164d624"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}