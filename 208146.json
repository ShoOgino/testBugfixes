{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRow().mjava","commits":[{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRow().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRow().mjava","sourceNew":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>());\n    Row r1 = row.addReplica(\"c1\", \"s1\");\n    Row r2 = r1.addReplica(\"c1\", \"s1\");\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof Policy.ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof Policy.ReplicaInfo);\n  }\n\n","sourceOld":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>());\n    Row r1 = row.addReplica(\"c1\", \"s1\");\n    Row r2 = r1.addReplica(\"c1\", \"s1\");\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof Policy.ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof Policy.ReplicaInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRow().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRow().mjava","sourceNew":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>(), true);\n    Row r1 = row.addReplica(\"c1\", \"s1\", null);\n    Row r2 = r1.addReplica(\"c1\", \"s1\",null);\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof ReplicaInfo);\n  }\n\n","sourceOld":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>(), true);\n    Row r1 = row.addReplica(\"c1\", \"s1\", null);\n    Row r2 = r1.addReplica(\"c1\", \"s1\",null);\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof ReplicaInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRow().mjava","pathOld":"/dev/null","sourceNew":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>());\n    Row r1 = row.addReplica(\"c1\", \"s1\");\n    Row r2 = r1.addReplica(\"c1\", \"s1\");\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof Policy.ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof Policy.ReplicaInfo);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f76cd0d9d5ea9aaa4afd15a3c02356a9104deb2","date":1500018428,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRow().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRow().mjava","sourceNew":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), true);\n    Row r1 = row.addReplica(\"c1\", \"s1\", null);\n    Row r2 = r1.addReplica(\"c1\", \"s1\",null);\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof ReplicaInfo);\n  }\n\n","sourceOld":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>(), true);\n    Row r1 = row.addReplica(\"c1\", \"s1\", null);\n    Row r2 = r1.addReplica(\"c1\", \"s1\",null);\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof ReplicaInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRow().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRow().mjava","sourceNew":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), true);\n    Row r1 = row.addReplica(\"c1\", \"s1\", null);\n    Row r2 = r1.addReplica(\"c1\", \"s1\",null);\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof ReplicaInfo);\n  }\n\n","sourceOld":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>());\n    Row r1 = row.addReplica(\"c1\", \"s1\");\n    Row r2 = r1.addReplica(\"c1\", \"s1\");\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof Policy.ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof Policy.ReplicaInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRow().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRow().mjava","sourceNew":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), true);\n    Row r1 = row.addReplica(\"c1\", \"s1\", null);\n    Row r2 = r1.addReplica(\"c1\", \"s1\",null);\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof ReplicaInfo);\n  }\n\n","sourceOld":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>());\n    Row r1 = row.addReplica(\"c1\", \"s1\");\n    Row r2 = r1.addReplica(\"c1\", \"s1\");\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof Policy.ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof Policy.ReplicaInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRow().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRow().mjava","sourceNew":"  public void testRow() {\n    Policy policy = new Policy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> o = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.fromJSONString(\"{c1: {s0:[{}]}}\");\n            Utils.setObjectByPath(o, \"c1/s0[0]\", new ReplicaInfo(\"r0\", \"c1.s0\", \"c1\", \"s0\", Replica.Type.NRT, \"nodex\", new HashMap<>()));\n            return o;\n          }\n\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return Utils.makeMap(\"node\", \"nodex\", \"cores\", 1);\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public String getPolicyNameByCollection(String coll) {\n            return null;\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return Collections.singleton(\"nodex\");\n          }\n        };\n      }\n    });\n\n    Row row = session.getNode(\"nodex\");\n    Row r1 = row.addReplica(\"c1\", \"s1\", null);\n    Row r2 = r1.addReplica(\"c1\", \"s1\", null);\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof ReplicaInfo);\n  }\n\n","sourceOld":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), true);\n    Row r1 = row.addReplica(\"c1\", \"s1\", null);\n    Row r2 = r1.addReplica(\"c1\", \"s1\",null);\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof ReplicaInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ea07d22cef2406e950de111f8aa7bc2edb91d56","date":1581094599,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRow().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRow().mjava","sourceNew":"  public void testRow() {\n    Policy policy = new Policy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> o = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.fromJSONString(\"{c1: {s0:[{}]}}\");\n            Utils.setObjectByPath(o, \"c1/s0[0]\", new ReplicaInfo(\"r0\", \"c1.s0\", \"c1\", \"s0\", Replica.Type.NRT, \"nodex\", new HashMap<>()));\n            return o;\n          }\n\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return Utils.makeMap(\"node\", \"nodex\", \"cores\", 1);\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public String getPolicyNameByCollection(String coll) {\n            return null;\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return Collections.singleton(\"nodex\");\n          }\n        };\n      }\n    });\n\n    Row row = session.getNode(\"nodex\");\n    Row r1 = row.addReplica(\"c1\", \"s1\", Replica.Type.NRT);\n    Row r2 = r1.addReplica(\"c1\", \"s1\", Replica.Type.NRT);\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof ReplicaInfo);\n  }\n\n","sourceOld":"  public void testRow() {\n    Policy policy = new Policy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> o = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.fromJSONString(\"{c1: {s0:[{}]}}\");\n            Utils.setObjectByPath(o, \"c1/s0[0]\", new ReplicaInfo(\"r0\", \"c1.s0\", \"c1\", \"s0\", Replica.Type.NRT, \"nodex\", new HashMap<>()));\n            return o;\n          }\n\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return Utils.makeMap(\"node\", \"nodex\", \"cores\", 1);\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public String getPolicyNameByCollection(String coll) {\n            return null;\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return Collections.singleton(\"nodex\");\n          }\n        };\n      }\n    });\n\n    Row row = session.getNode(\"nodex\");\n    Row r1 = row.addReplica(\"c1\", \"s1\", null);\n    Row r2 = r1.addReplica(\"c1\", \"s1\", null);\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof ReplicaInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRow().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRow().mjava","sourceNew":"  public void testRow() {\n    Policy policy = new Policy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Map<String, List<ReplicaInfo>>> o = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.fromJSONString(\"{c1: {s0:[{}]}}\");\n            Utils.setObjectByPath(o, \"c1/s0[0]\", new ReplicaInfo(\"r0\", \"c1.s0\", \"c1\", \"s0\", Replica.Type.NRT, \"nodex\", new HashMap<>()));\n            return o;\n          }\n\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return Utils.makeMap(\"node\", \"nodex\", \"cores\", 1);\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public String getPolicyNameByCollection(String coll) {\n            return null;\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return Collections.singleton(\"nodex\");\n          }\n        };\n      }\n    });\n\n    Row row = session.getNode(\"nodex\");\n    Row r1 = row.addReplica(\"c1\", \"s1\", Replica.Type.NRT);\n    Row r2 = r1.addReplica(\"c1\", \"s1\", Replica.Type.NRT);\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof ReplicaInfo);\n  }\n\n","sourceOld":"  public void testRow() {\n    Policy policy = new Policy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            Map<String, Map<String, List<ReplicaInfo>>> o = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.fromJSONString(\"{c1: {s0:[{}]}}\");\n            Utils.setObjectByPath(o, \"c1/s0[0]\", new ReplicaInfo(\"r0\", \"c1.s0\", \"c1\", \"s0\", Replica.Type.NRT, \"nodex\", new HashMap<>()));\n            return o;\n          }\n\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return Utils.makeMap(\"node\", \"nodex\", \"cores\", 1);\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public String getPolicyNameByCollection(String coll) {\n            return null;\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return Collections.singleton(\"nodex\");\n          }\n        };\n      }\n    });\n\n    Row row = session.getNode(\"nodex\");\n    Row r1 = row.addReplica(\"c1\", \"s1\", Replica.Type.NRT);\n    Row r2 = r1.addReplica(\"c1\", \"s1\", Replica.Type.NRT);\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof ReplicaInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRow().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRow().mjava","sourceNew":"  public void testRow() {\n    Policy policy = new Policy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Map<String, List<Replica>>> o = (Map<String, Map<String, List<Replica>>>) Utils.fromJSONString(\"{c1: {s0:[{}]}}\");\n            Utils.setObjectByPath(o, \"c1/s0[0]\", new Replica(\"r0\", \"nodex\", \"c1\", \"s0\", \"c1.s0\", Replica.State.ACTIVE, Replica.Type.NRT, new HashMap<>()));\n            return o;\n          }\n\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return Utils.makeMap(\"node\", \"nodex\", \"cores\", 1);\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public String getPolicyNameByCollection(String coll) {\n            return null;\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return Collections.singleton(\"nodex\");\n          }\n        };\n      }\n    });\n\n    Row row = session.getNode(\"nodex\");\n    Row r1 = row.addReplica(\"c1\", \"s1\", Replica.Type.NRT);\n    Row r2 = r1.addReplica(\"c1\", \"s1\", Replica.Type.NRT);\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof Replica);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof Replica);\n  }\n\n","sourceOld":"  public void testRow() {\n    Policy policy = new Policy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Map<String, List<ReplicaInfo>>> o = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.fromJSONString(\"{c1: {s0:[{}]}}\");\n            Utils.setObjectByPath(o, \"c1/s0[0]\", new ReplicaInfo(\"r0\", \"c1.s0\", \"c1\", \"s0\", Replica.Type.NRT, \"nodex\", new HashMap<>()));\n            return o;\n          }\n\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return Utils.makeMap(\"node\", \"nodex\", \"cores\", 1);\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public String getPolicyNameByCollection(String coll) {\n            return null;\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return Collections.singleton(\"nodex\");\n          }\n        };\n      }\n    });\n\n    Row row = session.getNode(\"nodex\");\n    Row r1 = row.addReplica(\"c1\", \"s1\", Replica.Type.NRT);\n    Row r2 = r1.addReplica(\"c1\", \"s1\", Replica.Type.NRT);\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof ReplicaInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRow().mjava","sourceNew":null,"sourceOld":"  public void testRow() {\n    Policy policy = new Policy();\n    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {\n            @SuppressWarnings({\"unchecked\"})\n            Map<String, Map<String, List<Replica>>> o = (Map<String, Map<String, List<Replica>>>) Utils.fromJSONString(\"{c1: {s0:[{}]}}\");\n            Utils.setObjectByPath(o, \"c1/s0[0]\", new Replica(\"r0\", \"nodex\", \"c1\", \"s0\", \"c1.s0\", Replica.State.ACTIVE, Replica.Type.NRT, new HashMap<>()));\n            return o;\n          }\n\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            return Utils.makeMap(\"node\", \"nodex\", \"cores\", 1);\n          }\n        };\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public String getPolicyNameByCollection(String coll) {\n            return null;\n          }\n\n          @Override\n          public Set<String> getLiveNodes() {\n            return Collections.singleton(\"nodex\");\n          }\n        };\n      }\n    });\n\n    Row row = session.getNode(\"nodex\");\n    Row r1 = row.addReplica(\"c1\", \"s1\", Replica.Type.NRT);\n    Row r2 = r1.addReplica(\"c1\", \"s1\", Replica.Type.NRT);\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof Replica);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof Replica);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["3ea07d22cef2406e950de111f8aa7bc2edb91d56"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","1f76cd0d9d5ea9aaa4afd15a3c02356a9104deb2"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["560c18d71dad43d675158783c3840f8c80d6d39c"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"e4848fb683db0790f2847173af06e2ad2d03328e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1f76cd0d9d5ea9aaa4afd15a3c02356a9104deb2":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"3ea07d22cef2406e950de111f8aa7bc2edb91d56":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["1f76cd0d9d5ea9aaa4afd15a3c02356a9104deb2"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["3ea07d22cef2406e950de111f8aa7bc2edb91d56"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a"],"1f76cd0d9d5ea9aaa4afd15a3c02356a9104deb2":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a","e4848fb683db0790f2847173af06e2ad2d03328e"],"560c18d71dad43d675158783c3840f8c80d6d39c":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"3ea07d22cef2406e950de111f8aa7bc2edb91d56":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}