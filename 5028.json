{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer#ValueSourceScorer(Weight,LeafReaderContext,FunctionValues).mjava","commits":[{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer#ValueSourceScorer(Weight,LeafReaderContext,FunctionValues).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer#ValueSourceScorer(LeafReaderContext,FunctionValues).mjava","sourceNew":"  protected ValueSourceScorer(Weight weight, LeafReaderContext readerContext, FunctionValues values) {\n    super(weight);\n    this.values = values;\n    final DocIdSetIterator approximation = DocIdSetIterator.all(readerContext.reader().maxDoc()); // no approximation!\n    this.twoPhaseIterator = new TwoPhaseIterator(approximation) {\n      @Override\n      public boolean matches() throws IOException {\n        return ValueSourceScorer.this.matches(approximation.docID());\n      }\n\n      @Override\n      public float matchCost() {\n        return 100; // TODO: use cost of ValueSourceScorer.this.matches()\n      }\n    };\n    this.disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n  }\n\n","sourceOld":"  protected ValueSourceScorer(LeafReaderContext readerContext, FunctionValues values) {\n    super(null);//no weight\n    this.values = values;\n    final DocIdSetIterator approximation = DocIdSetIterator.all(readerContext.reader().maxDoc()); // no approximation!\n    this.twoPhaseIterator = new TwoPhaseIterator(approximation) {\n      @Override\n      public boolean matches() throws IOException {\n        return ValueSourceScorer.this.matches(approximation.docID());\n      }\n\n      @Override\n      public float matchCost() {\n        return 100; // TODO: use cost of ValueSourceScorer.this.matches()\n      }\n    };\n    this.disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69343b22fad784aee3ab02762544e612ebd19da1","date":1583380010,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer#ValueSourceScorer(Weight,LeafReaderContext,FunctionValues).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer#ValueSourceScorer(Weight,LeafReaderContext,FunctionValues).mjava","sourceNew":"  protected ValueSourceScorer(Weight weight, LeafReaderContext readerContext, FunctionValues values) {\n    super(weight);\n    this.values = values;\n    final DocIdSetIterator approximation = DocIdSetIterator.all(readerContext.reader().maxDoc()); // no approximation!\n    this.twoPhaseIterator = new TwoPhaseIterator(approximation) {\n      @Override\n      public boolean matches() throws IOException {\n        return ValueSourceScorer.this.matches(approximation.docID());\n      }\n\n      @Override\n      public float matchCost() {\n        return ValueSourceScorer.this.matchCost();\n      }\n    };\n    this.disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n  }\n\n","sourceOld":"  protected ValueSourceScorer(Weight weight, LeafReaderContext readerContext, FunctionValues values) {\n    super(weight);\n    this.values = values;\n    final DocIdSetIterator approximation = DocIdSetIterator.all(readerContext.reader().maxDoc()); // no approximation!\n    this.twoPhaseIterator = new TwoPhaseIterator(approximation) {\n      @Override\n      public boolean matches() throws IOException {\n        return ValueSourceScorer.this.matches(approximation.docID());\n      }\n\n      @Override\n      public float matchCost() {\n        return 100; // TODO: use cost of ValueSourceScorer.this.matches()\n      }\n    };\n    this.disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["69343b22fad784aee3ab02762544e612ebd19da1"],"69343b22fad784aee3ab02762544e612ebd19da1":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["69343b22fad784aee3ab02762544e612ebd19da1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"69343b22fad784aee3ab02762544e612ebd19da1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}