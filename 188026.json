{"path":"src/java/org/apache/solr/util/TokenOrderingFilter[HighlightingUtils]#next().mjava","commits":[{"id":"090f8d702b753c18c64a6fd5fb550596c68861ce","date":1172108327,"type":1,"author":"Mike Klaas","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TokenOrderingFilter[HighlightingUtils]#next().mjava","pathOld":"src/java/org/apache/solr/util/TokenOrderingFilter[SolrPluginUtils]#next().mjava","sourceNew":"  public Token next() throws IOException {\n    while (!done && queue.size() < windowSize) {\n      Token newTok = input.next();\n      if (newTok==null) {\n        done=true;\n        break;\n      }\n\n      // reverse iterating for better efficiency since we know the\n      // list is already sorted, and most token start offsets will be too.\n      ListIterator<Token> iter = queue.listIterator(queue.size());\n      while(iter.hasPrevious()) {\n        if (newTok.startOffset() >= iter.previous().startOffset()) {\n          // insertion will be before what next() would return (what\n          // we just compared against), so move back one so the insertion\n          // will be after.\n          iter.next();\n          break;\n        }\n      }\n      iter.add(newTok);\n    }\n\n    return queue.isEmpty() ? null : queue.removeFirst();\n  }\n\n","sourceOld":"  public Token next() throws IOException {\n    while (!done && queue.size() < windowSize) {\n      Token newTok = input.next();\n      if (newTok==null) {\n        done=true;\n        break;\n      }\n\n      // reverse iterating for better efficiency since we know the\n      // list is already sorted, and most token start offsets will be too.\n      ListIterator<Token> iter = queue.listIterator(queue.size());\n      while(iter.hasPrevious()) {\n        if (newTok.startOffset() >= iter.previous().startOffset()) {\n          // insertion will be before what next() would return (what\n          // we just compared against), so move back one so the insertion\n          // will be after.\n          iter.next();\n          break;\n        }\n      }\n      iter.add(newTok);\n    }\n\n    return queue.isEmpty() ? null : queue.removeFirst();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4114a9012ed90fa73da6201bb0aeec818808848","date":1183444190,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TokenOrderingFilter[HighlightingUtils]#next().mjava","pathOld":"src/java/org/apache/solr/util/TokenOrderingFilter[HighlightingUtils]#next().mjava","sourceNew":"  @Override\n  public Token next() throws IOException {\n    while (!done && queue.size() < windowSize) {\n      Token newTok = input.next();\n      if (newTok==null) {\n        done=true;\n        break;\n      }\n\n      // reverse iterating for better efficiency since we know the\n      // list is already sorted, and most token start offsets will be too.\n      ListIterator<Token> iter = queue.listIterator(queue.size());\n      while(iter.hasPrevious()) {\n        if (newTok.startOffset() >= iter.previous().startOffset()) {\n          // insertion will be before what next() would return (what\n          // we just compared against), so move back one so the insertion\n          // will be after.\n          iter.next();\n          break;\n        }\n      }\n      iter.add(newTok);\n    }\n\n    return queue.isEmpty() ? null : queue.removeFirst();\n  }\n\n","sourceOld":"  public Token next() throws IOException {\n    while (!done && queue.size() < windowSize) {\n      Token newTok = input.next();\n      if (newTok==null) {\n        done=true;\n        break;\n      }\n\n      // reverse iterating for better efficiency since we know the\n      // list is already sorted, and most token start offsets will be too.\n      ListIterator<Token> iter = queue.listIterator(queue.size());\n      while(iter.hasPrevious()) {\n        if (newTok.startOffset() >= iter.previous().startOffset()) {\n          // insertion will be before what next() would return (what\n          // we just compared against), so move back one so the insertion\n          // will be after.\n          iter.next();\n          break;\n        }\n      }\n      iter.add(newTok);\n    }\n\n    return queue.isEmpty() ? null : queue.removeFirst();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33e6ce261fb71637077f5afb0521a898795a4340","date":1238092945,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/util/TokenOrderingFilter[HighlightingUtils]#next().mjava","sourceNew":null,"sourceOld":"  @Override\n  public Token next() throws IOException {\n    while (!done && queue.size() < windowSize) {\n      Token newTok = input.next();\n      if (newTok==null) {\n        done=true;\n        break;\n      }\n\n      // reverse iterating for better efficiency since we know the\n      // list is already sorted, and most token start offsets will be too.\n      ListIterator<Token> iter = queue.listIterator(queue.size());\n      while(iter.hasPrevious()) {\n        if (newTok.startOffset() >= iter.previous().startOffset()) {\n          // insertion will be before what next() would return (what\n          // we just compared against), so move back one so the insertion\n          // will be after.\n          iter.next();\n          break;\n        }\n      }\n      iter.add(newTok);\n    }\n\n    return queue.isEmpty() ? null : queue.removeFirst();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33e6ce261fb71637077f5afb0521a898795a4340":["a4114a9012ed90fa73da6201bb0aeec818808848"],"a4114a9012ed90fa73da6201bb0aeec818808848":["090f8d702b753c18c64a6fd5fb550596c68861ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"090f8d702b753c18c64a6fd5fb550596c68861ce":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"33e6ce261fb71637077f5afb0521a898795a4340":[],"a4114a9012ed90fa73da6201bb0aeec818808848":["33e6ce261fb71637077f5afb0521a898795a4340"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["090f8d702b753c18c64a6fd5fb550596c68861ce"],"090f8d702b753c18c64a6fd5fb550596c68861ce":["a4114a9012ed90fa73da6201bb0aeec818808848"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["33e6ce261fb71637077f5afb0521a898795a4340","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}