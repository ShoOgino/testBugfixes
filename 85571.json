{"path":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","commits":[{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException {\n    MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsAndPositionsEnum\n    if (reuse != null && reuse instanceof MultiDocsAndPositionsEnum) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsAndPositionsEnum.canReuse(this)) {\n        docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n      }\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsAndPositionsEnum.subDocsAndPositionsEnum.length: entry.index + \" vs \" + docsAndPositionsEnum.subDocsAndPositionsEnum.length + \"; \" + subs.length;\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index], needsOffsets);\n\n      if (subPostings != null) {\n        docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index] = subPostings;\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null, false) != null) {\n          // At least one of our subs does not store\n          // offsets or positions -- we can't correctly\n          // produce a MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n    MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsAndPositionsEnum\n    if (reuse != null && reuse instanceof MultiDocsAndPositionsEnum) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsAndPositionsEnum.canReuse(this)) {\n        docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n      }\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsAndPositionsEnum.subDocsAndPositionsEnum.length: entry.index + \" vs \" + docsAndPositionsEnum.subDocsAndPositionsEnum.length + \"; \" + subs.length;\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index]);\n\n      if (subPostings != null) {\n        docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index] = subPostings;\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null, false) != null) {\n          // At least one of our subs does not store\n          // positions -- we can't correctly produce a\n          // MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException {\n    MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsAndPositionsEnum\n    if (reuse != null && reuse instanceof MultiDocsAndPositionsEnum) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsAndPositionsEnum.canReuse(this)) {\n        docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n      }\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsAndPositionsEnum.subDocsAndPositionsEnum.length: entry.index + \" vs \" + docsAndPositionsEnum.subDocsAndPositionsEnum.length + \"; \" + subs.length;\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index], needsOffsets);\n\n      if (subPostings != null) {\n        docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index] = subPostings;\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null, false) != null) {\n          // At least one of our subs does not store\n          // offsets or positions -- we can't correctly\n          // produce a MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException {\n    MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsAndPositionsEnum\n    if (reuse != null && reuse instanceof MultiDocsAndPositionsEnum) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsAndPositionsEnum.canReuse(this)) {\n        docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n      }\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsAndPositionsEnum.subDocsAndPositionsEnum.length: entry.index + \" vs \" + docsAndPositionsEnum.subDocsAndPositionsEnum.length + \"; \" + subs.length;\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index], needsOffsets);\n\n      if (subPostings != null) {\n        docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index] = subPostings;\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null, false) != null) {\n          // At least one of our subs does not store\n          // offsets or positions -- we can't correctly\n          // produce a MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}