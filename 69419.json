{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.DoubleASCIIFlagParsingStrategy#parseFlags(String).mjava","commits":[{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.DoubleASCIIFlagParsingStrategy#parseFlags(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary.DoubleASCIIFlagParsingStrategy#parseFlags(String).mjava","sourceNew":"    @Override\n    public char[] parseFlags(String rawFlags) {\n      if (rawFlags.length() == 0) {\n        return new char[0];\n      }\n\n      StringBuilder builder = new StringBuilder();\n      for (int i = 0; i < rawFlags.length(); i+=2) {\n        char cookedFlag = (char) ((int) rawFlags.charAt(i) + (int) rawFlags.charAt(i + 1));\n        builder.append(cookedFlag);\n      }\n      \n      char flags[] = new char[builder.length()];\n      builder.getChars(0, builder.length(), flags, 0);\n      return flags;\n    }\n\n","sourceOld":"    @Override\n    public char[] parseFlags(String rawFlags) {\n      if (rawFlags.length() == 0) {\n        return new char[0];\n      }\n\n      StringBuilder builder = new StringBuilder();\n      for (int i = 0; i < rawFlags.length(); i+=2) {\n        char cookedFlag = (char) ((int) rawFlags.charAt(i) + (int) rawFlags.charAt(i + 1));\n        builder.append(cookedFlag);\n      }\n      \n      char flags[] = new char[builder.length()];\n      builder.getChars(0, builder.length(), flags, 0);\n      return flags;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.DoubleASCIIFlagParsingStrategy#parseFlags(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary.DoubleASCIIFlagParsingStrategy#parseFlags(String).mjava","sourceNew":"    @Override\n    public char[] parseFlags(String rawFlags) {\n      if (rawFlags.length() == 0) {\n        return new char[0];\n      }\n\n      StringBuilder builder = new StringBuilder();\n      for (int i = 0; i < rawFlags.length(); i+=2) {\n        char cookedFlag = (char) ((int) rawFlags.charAt(i) + (int) rawFlags.charAt(i + 1));\n        builder.append(cookedFlag);\n      }\n      \n      char flags[] = new char[builder.length()];\n      builder.getChars(0, builder.length(), flags, 0);\n      return flags;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public char[] parseFlags(String rawFlags) {\n      if (rawFlags.length() == 0) {\n        return new char[0];\n      }\n\n      StringBuilder builder = new StringBuilder();\n      for (int i = 0; i < rawFlags.length(); i+=2) {\n        char cookedFlag = (char) ((int) rawFlags.charAt(i) + (int) rawFlags.charAt(i + 1));\n        builder.append(cookedFlag);\n      }\n      \n      char flags[] = new char[builder.length()];\n      builder.getChars(0, builder.length(), flags, 0);\n      return flags;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6b9214e93abd5c360b7dc32483691d5555a9c7e","date":1394289706,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.DoubleASCIIFlagParsingStrategy#parseFlags(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.DoubleASCIIFlagParsingStrategy#parseFlags(String).mjava","sourceNew":"    @Override\n    public char[] parseFlags(String rawFlags) {\n      if (rawFlags.length() == 0) {\n        return new char[0];\n      }\n\n      StringBuilder builder = new StringBuilder();\n      if (rawFlags.length() % 2 == 1) {\n        throw new IllegalArgumentException(\"Invalid flags (should be even number of characters): \" + rawFlags);\n      }\n      for (int i = 0; i < rawFlags.length(); i+=2) {\n        char cookedFlag = (char) ((int) rawFlags.charAt(i) + (int) rawFlags.charAt(i + 1));\n        builder.append(cookedFlag);\n      }\n      \n      char flags[] = new char[builder.length()];\n      builder.getChars(0, builder.length(), flags, 0);\n      return flags;\n    }\n\n","sourceOld":"    @Override\n    public char[] parseFlags(String rawFlags) {\n      if (rawFlags.length() == 0) {\n        return new char[0];\n      }\n\n      StringBuilder builder = new StringBuilder();\n      for (int i = 0; i < rawFlags.length(); i+=2) {\n        char cookedFlag = (char) ((int) rawFlags.charAt(i) + (int) rawFlags.charAt(i + 1));\n        builder.append(cookedFlag);\n      }\n      \n      char flags[] = new char[builder.length()];\n      builder.getChars(0, builder.length(), flags, 0);\n      return flags;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.DoubleASCIIFlagParsingStrategy#parseFlags(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.DoubleASCIIFlagParsingStrategy#parseFlags(String).mjava","sourceNew":"    @Override\n    public char[] parseFlags(String rawFlags) {\n      if (rawFlags.length() == 0) {\n        return new char[0];\n      }\n\n      StringBuilder builder = new StringBuilder();\n      if (rawFlags.length() % 2 == 1) {\n        throw new IllegalArgumentException(\"Invalid flags (should be even number of characters): \" + rawFlags);\n      }\n      for (int i = 0; i < rawFlags.length(); i+=2) {\n        char cookedFlag = (char) ((int) rawFlags.charAt(i) + (int) rawFlags.charAt(i + 1));\n        builder.append(cookedFlag);\n      }\n      \n      char flags[] = new char[builder.length()];\n      builder.getChars(0, builder.length(), flags, 0);\n      return flags;\n    }\n\n","sourceOld":"    @Override\n    public char[] parseFlags(String rawFlags) {\n      if (rawFlags.length() == 0) {\n        return new char[0];\n      }\n\n      StringBuilder builder = new StringBuilder();\n      for (int i = 0; i < rawFlags.length(); i+=2) {\n        char cookedFlag = (char) ((int) rawFlags.charAt(i) + (int) rawFlags.charAt(i + 1));\n        builder.append(cookedFlag);\n      }\n      \n      char flags[] = new char[builder.length()];\n      builder.getChars(0, builder.length(), flags, 0);\n      return flags;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0356bd2218e302f7f19dee9ab659b404bdac798c","date":1405433743,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.DoubleASCIIFlagParsingStrategy#parseFlags(String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.DoubleASCIIFlagParsingStrategy#parseFlags(String).mjava","sourceNew":"    @Override\n    public char[] parseFlags(String rawFlags) {\n      if (rawFlags.length() == 0) {\n        return new char[0];\n      }\n\n      StringBuilder builder = new StringBuilder();\n      if (rawFlags.length() % 2 == 1) {\n        throw new IllegalArgumentException(\"Invalid flags (should be even number of characters): \" + rawFlags);\n      }\n      for (int i = 0; i < rawFlags.length(); i+=2) {\n        char f1 = rawFlags.charAt(i);\n        char f2 = rawFlags.charAt(i+1);\n        if (f1 >= 256 || f2 >= 256) {\n          throw new IllegalArgumentException(\"Invalid flags (LONG flags must be double ASCII): \" + rawFlags);\n        }\n        char combined = (char) (f1 << 8 | f2);\n        builder.append(combined);\n      }\n      \n      char flags[] = new char[builder.length()];\n      builder.getChars(0, builder.length(), flags, 0);\n      return flags;\n    }\n\n","sourceOld":"    @Override\n    public char[] parseFlags(String rawFlags) {\n      if (rawFlags.length() == 0) {\n        return new char[0];\n      }\n\n      StringBuilder builder = new StringBuilder();\n      if (rawFlags.length() % 2 == 1) {\n        throw new IllegalArgumentException(\"Invalid flags (should be even number of characters): \" + rawFlags);\n      }\n      for (int i = 0; i < rawFlags.length(); i+=2) {\n        char cookedFlag = (char) ((int) rawFlags.charAt(i) + (int) rawFlags.charAt(i + 1));\n        builder.append(cookedFlag);\n      }\n      \n      char flags[] = new char[builder.length()];\n      builder.getChars(0, builder.length(), flags, 0);\n      return flags;\n    }\n\n","bugFix":["c214bc712d04c78c4d434119d560d0a4dd2fce4f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["ba791bce8103c79e38f957e9c5a53a75871bd918","b6b9214e93abd5c360b7dc32483691d5555a9c7e"],"b6b9214e93abd5c360b7dc32483691d5555a9c7e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0356bd2218e302f7f19dee9ab659b404bdac798c":["b6b9214e93abd5c360b7dc32483691d5555a9c7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0356bd2218e302f7f19dee9ab659b404bdac798c"]},"commit2Childs":{"ba791bce8103c79e38f957e9c5a53a75871bd918":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","b6b9214e93abd5c360b7dc32483691d5555a9c7e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"b6b9214e93abd5c360b7dc32483691d5555a9c7e":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","0356bd2218e302f7f19dee9ab659b404bdac798c"],"0356bd2218e302f7f19dee9ab659b404bdac798c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}