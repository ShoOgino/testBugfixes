{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testUniqueStream().mjava","sourceNew":"  private void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(ustream);\n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","sourceOld":"  private void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    UniqueStream ustream = new UniqueStream(stream, new AscFieldComp(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e431b0806b8db369da896b66a74e304a49953c7b","date":1434740037,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","sourceNew":"  private void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    UniqueStream ustream = new UniqueStream(stream, new StreamEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","sourceOld":"  private void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(ustream);\n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0891a6931fc352fc7e61f2752ef9add758d3fb89","date":1435151229,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","sourceNew":"  private void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n\n    try {\n      params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n      stream = new CloudSolrStream(zkHost, \"collection1\", params);\n      ustream = new UniqueStream(stream, new FieldEqualitor(\"a_i\"));\n      throw new Exception(\"Equalitors did not match but no excepion was thrown\");\n    } catch(Exception e) {\n      if(!e.getMessage().equals(\"Invalid UniqueStream - substream comparator (sort) must be a superset of this stream's equalitor.\")) {\n        throw e;\n      }\n    }\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","sourceOld":"  private void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    UniqueStream ustream = new UniqueStream(stream, new StreamEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3078cad1008b796c6d573b743c586fdf9ef5660a","date":1436019875,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","sourceNew":"  private void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","sourceOld":"  private void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n\n    try {\n      params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n      stream = new CloudSolrStream(zkHost, \"collection1\", params);\n      ustream = new UniqueStream(stream, new FieldEqualitor(\"a_i\"));\n      throw new Exception(\"Equalitors did not match but no excepion was thrown\");\n    } catch(Exception e) {\n      if(!e.getMessage().equals(\"Invalid UniqueStream - substream comparator (sort) must be a superset of this stream's equalitor.\")) {\n        throw e;\n      }\n    }\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","sourceNew":"  @Test\n  public void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n  }\n\n","sourceOld":"  private void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","sourceNew":"  @Test\n  public void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n  }\n\n","sourceOld":"  private void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","sourceNew":"  @Test\n  public void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n  }\n\n","sourceOld":"  private void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","sourceNew":"  @Test\n  public void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n  }\n\n","sourceOld":"  private void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","sourceNew":"  @Test\n  public void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n  }\n\n","sourceOld":"  @Test\n  public void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","sourceNew":"  @Test\n  public void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n  }\n\n","sourceOld":"  @Test\n  public void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","sourceNew":"  @Test\n  public void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n  }\n\n","sourceOld":"  @Test\n  public void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","sourceNew":"  @Test\n  public void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n  }\n\n","sourceOld":"  @Test\n  public void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","sourceNew":"@Test\npublic void testUniqueStream() throws Exception {\n\n  //Test CloudSolrStream and UniqueStream\n  new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n      .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n  CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n  UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n  List<Tuple> tuples = getTuples(ustream);\n  assertEquals(4, tuples.size());\n  assertOrder(tuples, 0,1,3,4);\n\n}\n\n","sourceOld":"  @Test\n  public void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","sourceNew":"@Test\npublic void testUniqueStream() throws Exception {\n\n  //Test CloudSolrStream and UniqueStream\n  new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n      .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n  CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n  UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n  List<Tuple> tuples = getTuples(ustream);\n  assertEquals(4, tuples.size());\n  assertOrder(tuples, 0,1,3,4);\n\n}\n\n","sourceOld":"  @Test\n  public void testUniqueStream() throws Exception {\n\n    //Test CloudSolrStream and UniqueStream\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","sourceNew":"@Test\npublic void testUniqueStream() throws Exception {\n\n  //Test CloudSolrStream and UniqueStream\n  new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n      .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  StreamContext streamContext = new StreamContext();\n  SolrClientCache solrClientCache = new SolrClientCache();\n  streamContext.setSolrClientCache(solrClientCache);\n  try {\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    ustream.setStreamContext(streamContext);\n    List<Tuple> tuples = getTuples(ustream);\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0, 1, 3, 4);\n  } finally {\n    solrClientCache.close();\n  }\n}\n\n","sourceOld":"@Test\npublic void testUniqueStream() throws Exception {\n\n  //Test CloudSolrStream and UniqueStream\n  new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n      .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n  CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n  UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n  List<Tuple> tuples = getTuples(ustream);\n  assertEquals(4, tuples.size());\n  assertOrder(tuples, 0,1,3,4);\n\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testUniqueStream().mjava","sourceNew":"@Test\npublic void testUniqueStream() throws Exception {\n\n  //Test CloudSolrStream and UniqueStream\n  new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n      .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  StreamContext streamContext = new StreamContext();\n  SolrClientCache solrClientCache = new SolrClientCache();\n  streamContext.setSolrClientCache(solrClientCache);\n  try {\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    ustream.setStreamContext(streamContext);\n    List<Tuple> tuples = getTuples(ustream);\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0, 1, 3, 4);\n  } finally {\n    solrClientCache.close();\n  }\n}\n\n","sourceOld":"@Test\npublic void testUniqueStream() throws Exception {\n\n  //Test CloudSolrStream and UniqueStream\n  new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n      .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n  CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n  UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n  List<Tuple> tuples = getTuples(ustream);\n  assertEquals(4, tuples.size());\n  assertOrder(tuples, 0,1,3,4);\n\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8c969f15cd04d31e520319c619a445ae21f02d72"],"3078cad1008b796c6d573b743c586fdf9ef5660a":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["e431b0806b8db369da896b66a74e304a49953c7b"],"73450c0955930295d34703e7ddbfc6973b7a121a":["3078cad1008b796c6d573b743c586fdf9ef5660a","b940572a59da1b42b6c20ab5278155b12816807a"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8c969f15cd04d31e520319c619a445ae21f02d72"],"b940572a59da1b42b6c20ab5278155b12816807a":["3078cad1008b796c6d573b743c586fdf9ef5660a"],"e431b0806b8db369da896b66a74e304a49953c7b":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["73450c0955930295d34703e7ddbfc6973b7a121a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["73450c0955930295d34703e7ddbfc6973b7a121a","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["3078cad1008b796c6d573b743c586fdf9ef5660a","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["3078cad1008b796c6d573b743c586fdf9ef5660a","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"8c969f15cd04d31e520319c619a445ae21f02d72":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["e431b0806b8db369da896b66a74e304a49953c7b"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"3078cad1008b796c6d573b743c586fdf9ef5660a":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["3078cad1008b796c6d573b743c586fdf9ef5660a"],"73450c0955930295d34703e7ddbfc6973b7a121a":["826d15444ddf61716dc768c229cd54b2c2ccce1c","d470c8182e92b264680e34081b75e70a9f2b3c89","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"e431b0806b8db369da896b66a74e304a49953c7b":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["e66a459d38c1c4a2f97128433dab546f683a9fed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c405288c4553ffb50ab8ca5adbdde9881bcec4e4","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}