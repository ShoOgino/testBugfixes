{"path":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer#advance(int).mjava","commits":[{"id":"06a4493f0c732d2928d1a4f773f15d19434aa8ba","date":1405856163,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer#advance(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n    for(int i=0;i<numSubsOnDoc;i++) {\n      EnumAndScorer sub = subsOnDoc[i];\n      if (sub.posEnum.advance(target) != NO_MORE_DOCS) {\n        sub.posLeft = sub.posEnum.freq()-1;\n        sub.pos = sub.posEnum.nextPosition();\n      }\n    }\n\n    return doNext();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50c99225e51de7d0aff8f06f1ab6a99d4bb0f2a4","date":1425256347,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer#advance(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n    if (docID == -1) {\n      popCurrentDoc();\n      if (docID >= target) {\n        return doNext();\n      }\n    }\n    for(int i=0;i<numSubsOnDoc;i++) {\n      EnumAndScorer sub = subsOnDoc[i];\n      if (sub.posEnum.advance(target) != NO_MORE_DOCS) {\n        sub.posLeft = sub.posEnum.freq()-1;\n        sub.pos = sub.posEnum.nextPosition();\n      }\n    }\n\n    return doNext();\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    for(int i=0;i<numSubsOnDoc;i++) {\n      EnumAndScorer sub = subsOnDoc[i];\n      if (sub.posEnum.advance(target) != NO_MORE_DOCS) {\n        sub.posLeft = sub.posEnum.freq()-1;\n        sub.pos = sub.posEnum.nextPosition();\n      }\n    }\n\n    return doNext();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"299a2348fa24151d150182211b6208a38e5e3450","date":1425304608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer#advance(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n    if (docID == -1) {\n      popCurrentDoc();\n      if (docID >= target) {\n        return doNext();\n      }\n    }\n    for(int i=0;i<numSubsOnDoc;i++) {\n      EnumAndScorer sub = subsOnDoc[i];\n      if (sub.posEnum.advance(target) != NO_MORE_DOCS) {\n        sub.posLeft = sub.posEnum.freq()-1;\n        sub.pos = sub.posEnum.nextPosition();\n      }\n    }\n\n    return doNext();\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    for(int i=0;i<numSubsOnDoc;i++) {\n      EnumAndScorer sub = subsOnDoc[i];\n      if (sub.posEnum.advance(target) != NO_MORE_DOCS) {\n        sub.posLeft = sub.posEnum.freq()-1;\n        sub.pos = sub.posEnum.nextPosition();\n      }\n    }\n\n    return doNext();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer#advance(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n    if (docID == -1) {\n      popCurrentDoc();\n      if (docID >= target) {\n        return doNext();\n      }\n    }\n    for(int i=0;i<numSubsOnDoc;i++) {\n      EnumAndScorer sub = subsOnDoc[i];\n      if (sub.posEnum.advance(target) != NO_MORE_DOCS) {\n        sub.posLeft = sub.posEnum.freq()-1;\n        sub.pos = sub.posEnum.nextPosition();\n      }\n    }\n\n    return doNext();\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    for(int i=0;i<numSubsOnDoc;i++) {\n      EnumAndScorer sub = subsOnDoc[i];\n      if (sub.posEnum.advance(target) != NO_MORE_DOCS) {\n        sub.posLeft = sub.posEnum.freq()-1;\n        sub.pos = sub.posEnum.nextPosition();\n      }\n    }\n\n    return doNext();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79b7ba0bc5be2ef864d2dabbe5e176f7e51bbd0","date":1428569572,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer#advance(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n    // Both positioned docs and docs in the pq might be behind target\n\n    // 1. Advance the PQ\n    if (docIDQueue.size() > 0) {\n      EnumAndScorer top = docIDQueue.top();\n      while (top.posEnum.docID() < target) {\n        if (top.posEnum.advance(target) != NO_MORE_DOCS) {\n          top.posLeft = top.posEnum.freq()-1;\n          top.pos = top.posEnum.nextPosition();\n        }\n        top = docIDQueue.updateTop();\n      }\n    }\n\n    // 2. Advance subsOnDoc\n    for(int i=0;i<numSubsOnDoc;i++) {\n      EnumAndScorer sub = subsOnDoc[i];\n      if (sub.posEnum.advance(target) != NO_MORE_DOCS) {\n        sub.posLeft = sub.posEnum.freq()-1;\n        sub.pos = sub.posEnum.nextPosition();\n      }\n    }\n    pushCurrentDoc();\n    return doNext();\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    if (docID == -1) {\n      popCurrentDoc();\n      if (docID >= target) {\n        return doNext();\n      }\n    }\n    for(int i=0;i<numSubsOnDoc;i++) {\n      EnumAndScorer sub = subsOnDoc[i];\n      if (sub.posEnum.advance(target) != NO_MORE_DOCS) {\n        sub.posLeft = sub.posEnum.freq()-1;\n        sub.pos = sub.posEnum.nextPosition();\n      }\n    }\n\n    return doNext();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer#advance(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    // Both positioned docs and docs in the pq might be behind target\n\n    // 1. Advance the PQ\n    if (docIDQueue.size() > 0) {\n      EnumAndScorer top = docIDQueue.top();\n      while (top.posEnum.docID() < target) {\n        if (top.posEnum.advance(target) != NO_MORE_DOCS) {\n          top.posLeft = top.posEnum.freq()-1;\n          top.pos = top.posEnum.nextPosition();\n        }\n        top = docIDQueue.updateTop();\n      }\n    }\n\n    // 2. Advance subsOnDoc\n    for(int i=0;i<numSubsOnDoc;i++) {\n      EnumAndScorer sub = subsOnDoc[i];\n      if (sub.posEnum.advance(target) != NO_MORE_DOCS) {\n        sub.posLeft = sub.posEnum.freq()-1;\n        sub.pos = sub.posEnum.nextPosition();\n      }\n    }\n    pushCurrentDoc();\n    return doNext();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["06a4493f0c732d2928d1a4f773f15d19434aa8ba","50c99225e51de7d0aff8f06f1ab6a99d4bb0f2a4"],"b79b7ba0bc5be2ef864d2dabbe5e176f7e51bbd0":["50c99225e51de7d0aff8f06f1ab6a99d4bb0f2a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a4493f0c732d2928d1a4f773f15d19434aa8ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["b79b7ba0bc5be2ef864d2dabbe5e176f7e51bbd0"],"299a2348fa24151d150182211b6208a38e5e3450":["06a4493f0c732d2928d1a4f773f15d19434aa8ba","50c99225e51de7d0aff8f06f1ab6a99d4bb0f2a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"50c99225e51de7d0aff8f06f1ab6a99d4bb0f2a4":["06a4493f0c732d2928d1a4f773f15d19434aa8ba"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b79b7ba0bc5be2ef864d2dabbe5e176f7e51bbd0":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06a4493f0c732d2928d1a4f773f15d19434aa8ba"],"06a4493f0c732d2928d1a4f773f15d19434aa8ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","299a2348fa24151d150182211b6208a38e5e3450","50c99225e51de7d0aff8f06f1ab6a99d4bb0f2a4"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"299a2348fa24151d150182211b6208a38e5e3450":[],"50c99225e51de7d0aff8f06f1ab6a99d4bb0f2a4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b79b7ba0bc5be2ef864d2dabbe5e176f7e51bbd0","299a2348fa24151d150182211b6208a38e5e3450"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","299a2348fa24151d150182211b6208a38e5e3450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}