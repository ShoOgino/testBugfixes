{"path":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testTermsList().mjava","commits":[{"id":"6e7761210febbbf9eb64d86512126e718181aec9","date":1467828397,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testTermsList().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTermsList() throws Exception {\n    //Terms list always returns in index order\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n            \"terms.fl\",\"standardfilt\",\n            \"terms.list\",\"spider, snake, shark, ddddd, bad\")\n        ,\"count(//lst[@name='standardfilt']/*)=4\"\n        ,\"//lst[@name='standardfilt']/int[1][@name='ddddd'][.='4']\"\n        ,\"//lst[@name='standardfilt']/int[2][@name='shark'][.='2']\"\n        ,\"//lst[@name='standardfilt']/int[3][@name='snake'][.='3']\"\n        ,\"//lst[@name='standardfilt']/int[4][@name='spider'][.='1']\"\n    );\n\n    //Test with numeric terms\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n            \"terms.fl\",\"foo_i\",\n            \"terms.list\",\"2, 1\")\n        ,\"count(//lst[@name='foo_i']/*)=2\"\n        ,\"//lst[@name='foo_i']/int[1][@name='1'][.='2']\"\n        ,\"//lst[@name='foo_i']/int[2][@name='2'][.='1']\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d","date":1467828398,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testTermsList().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testTermsList().mjava","sourceNew":"  @Test\n  public void testTermsList() throws Exception {\n    //Terms list always returns in index order\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n            \"terms.fl\",\"standardfilt\",\n            \"terms.list\",\"spider, snake, shark, ddddd, bad\")\n        ,\"count(//lst[@name='standardfilt']/*)=4\"\n        ,\"//lst[@name='standardfilt']/int[1][@name='ddddd'][.='4']\"\n        ,\"//lst[@name='standardfilt']/int[2][@name='shark'][.='2']\"\n        ,\"//lst[@name='standardfilt']/int[3][@name='snake'][.='3']\"\n        ,\"//lst[@name='standardfilt']/int[4][@name='spider'][.='1']\"\n    );\n\n\n    //Test with numeric terms\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n            \"terms.fl\",\"foo_i\",\n            \"terms.list\",\"2, 1\")\n        ,\"count(//lst[@name='foo_i']/*)=2\"\n        ,\"//lst[@name='foo_i']/int[1][@name='1'][.='2']\"\n        ,\"//lst[@name='foo_i']/int[2][@name='2'][.='1']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testTermsList() throws Exception {\n    //Terms list always returns in index order\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n            \"terms.fl\",\"standardfilt\",\n            \"terms.list\",\"spider, snake, shark, ddddd, bad\")\n        ,\"count(//lst[@name='standardfilt']/*)=4\"\n        ,\"//lst[@name='standardfilt']/int[1][@name='ddddd'][.='4']\"\n        ,\"//lst[@name='standardfilt']/int[2][@name='shark'][.='2']\"\n        ,\"//lst[@name='standardfilt']/int[3][@name='snake'][.='3']\"\n        ,\"//lst[@name='standardfilt']/int[4][@name='spider'][.='1']\"\n    );\n\n    //Test with numeric terms\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n            \"terms.fl\",\"foo_i\",\n            \"terms.list\",\"2, 1\")\n        ,\"count(//lst[@name='foo_i']/*)=2\"\n        ,\"//lst[@name='foo_i']/int[1][@name='1'][.='2']\"\n        ,\"//lst[@name='foo_i']/int[2][@name='2'][.='1']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testTermsList().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTermsList() throws Exception {\n    //Terms list always returns in index order\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n            \"terms.fl\",\"standardfilt\",\n            \"terms.list\",\"spider, snake, shark, ddddd, bad\")\n        ,\"count(//lst[@name='standardfilt']/*)=4\"\n        ,\"//lst[@name='standardfilt']/int[1][@name='ddddd'][.='4']\"\n        ,\"//lst[@name='standardfilt']/int[2][@name='shark'][.='2']\"\n        ,\"//lst[@name='standardfilt']/int[3][@name='snake'][.='3']\"\n        ,\"//lst[@name='standardfilt']/int[4][@name='spider'][.='1']\"\n    );\n\n\n    //Test with numeric terms\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n            \"terms.fl\",\"foo_i\",\n            \"terms.list\",\"2, 1\")\n        ,\"count(//lst[@name='foo_i']/*)=2\"\n        ,\"//lst[@name='foo_i']/int[1][@name='1'][.='2']\"\n        ,\"//lst[@name='foo_i']/int[2][@name='2'][.='1']\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acc205c9a28b75ff49ea105240dd87c1a9687342","date":1503604483,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testTermsList().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testTermsList().mjava","sourceNew":"  @Test\n  public void testTermsList() throws Exception {\n    //Terms list always returns in index order\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n            \"terms.fl\",\"standardfilt\",\n            \"terms.list\",\"spider,snake,a\\\\,b,shark,ddddd,bad\")\n        ,\"count(//lst[@name='standardfilt']/*)=5\"\n        ,\"//lst[@name='standardfilt']/int[1][@name='a,b'][.='1']\"\n        ,\"//lst[@name='standardfilt']/int[2][@name='ddddd'][.='4']\"\n        ,\"//lst[@name='standardfilt']/int[3][@name='shark'][.='2']\"\n        ,\"//lst[@name='standardfilt']/int[4][@name='snake'][.='3']\"\n        ,\"//lst[@name='standardfilt']/int[5][@name='spider'][.='1']\"\n    );\n\n\n    //Test with numeric terms\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n            \"terms.fl\",\"foo_i\",\n            \"terms.list\",\"2,1\")\n        ,\"count(//lst[@name='foo_i']/*)=2\"\n        ,\"//lst[@name='foo_i']/int[1][@name='1'][.='2']\"\n        ,\"//lst[@name='foo_i']/int[2][@name='2'][.='1']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testTermsList() throws Exception {\n    //Terms list always returns in index order\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n            \"terms.fl\",\"standardfilt\",\n            \"terms.list\",\"spider, snake, shark, ddddd, bad\")\n        ,\"count(//lst[@name='standardfilt']/*)=4\"\n        ,\"//lst[@name='standardfilt']/int[1][@name='ddddd'][.='4']\"\n        ,\"//lst[@name='standardfilt']/int[2][@name='shark'][.='2']\"\n        ,\"//lst[@name='standardfilt']/int[3][@name='snake'][.='3']\"\n        ,\"//lst[@name='standardfilt']/int[4][@name='spider'][.='1']\"\n    );\n\n\n    //Test with numeric terms\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n            \"terms.fl\",\"foo_i\",\n            \"terms.list\",\"2, 1\")\n        ,\"count(//lst[@name='foo_i']/*)=2\"\n        ,\"//lst[@name='foo_i']/int[1][@name='1'][.='2']\"\n        ,\"//lst[@name='foo_i']/int[2][@name='2'][.='1']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82873e945a4c6bea4384112b77e7ee51832428e5","date":1503643945,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testTermsList().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testTermsList().mjava","sourceNew":"  @Test\n  public void testTermsList() throws Exception {\n    //Terms list always returns in index order\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n            \"terms.fl\",\"standardfilt\",\n            \"terms.list\",\"spider,snake,a\\\\,b,shark,ddddd,bad\")\n        ,\"count(//lst[@name='standardfilt']/*)=5\"\n        ,\"//lst[@name='standardfilt']/int[1][@name='a,b'][.='1']\"\n        ,\"//lst[@name='standardfilt']/int[2][@name='ddddd'][.='4']\"\n        ,\"//lst[@name='standardfilt']/int[3][@name='shark'][.='2']\"\n        ,\"//lst[@name='standardfilt']/int[4][@name='snake'][.='3']\"\n        ,\"//lst[@name='standardfilt']/int[5][@name='spider'][.='1']\"\n    );\n\n\n    //Test with numeric terms\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n            \"terms.fl\",\"foo_i\",\n            \"terms.list\",\"2,1\")\n        ,\"count(//lst[@name='foo_i']/*)=2\"\n        ,\"//lst[@name='foo_i']/int[1][@name='1'][.='2']\"\n        ,\"//lst[@name='foo_i']/int[2][@name='2'][.='1']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testTermsList() throws Exception {\n    //Terms list always returns in index order\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n            \"terms.fl\",\"standardfilt\",\n            \"terms.list\",\"spider, snake, shark, ddddd, bad\")\n        ,\"count(//lst[@name='standardfilt']/*)=4\"\n        ,\"//lst[@name='standardfilt']/int[1][@name='ddddd'][.='4']\"\n        ,\"//lst[@name='standardfilt']/int[2][@name='shark'][.='2']\"\n        ,\"//lst[@name='standardfilt']/int[3][@name='snake'][.='3']\"\n        ,\"//lst[@name='standardfilt']/int[4][@name='spider'][.='1']\"\n    );\n\n\n    //Test with numeric terms\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n            \"terms.fl\",\"foo_i\",\n            \"terms.list\",\"2, 1\")\n        ,\"count(//lst[@name='foo_i']/*)=2\"\n        ,\"//lst[@name='foo_i']/int[1][@name='1'][.='2']\"\n        ,\"//lst[@name='foo_i']/int[2][@name='2'][.='1']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testTermsList().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testTermsList().mjava","sourceNew":"  @Test\n  public void testTermsList() throws Exception {\n    //Terms list always returns in index order\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n            \"terms.fl\",\"standardfilt\",\n            \"terms.list\",\"spider,snake,a\\\\,b,shark,ddddd,bad\")\n        ,\"count(//lst[@name='standardfilt']/*)=5\"\n        ,\"//lst[@name='standardfilt']/int[1][@name='a,b'][.='1']\"\n        ,\"//lst[@name='standardfilt']/int[2][@name='ddddd'][.='4']\"\n        ,\"//lst[@name='standardfilt']/int[3][@name='shark'][.='2']\"\n        ,\"//lst[@name='standardfilt']/int[4][@name='snake'][.='3']\"\n        ,\"//lst[@name='standardfilt']/int[5][@name='spider'][.='1']\"\n    );\n\n\n    //Test with numeric terms\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n            \"terms.fl\",\"foo_i\",\n            \"terms.list\",\"2,1\")\n        ,\"count(//lst[@name='foo_i']/*)=2\"\n        ,\"//lst[@name='foo_i']/int[1][@name='1'][.='2']\"\n        ,\"//lst[@name='foo_i']/int[2][@name='2'][.='1']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testTermsList() throws Exception {\n    //Terms list always returns in index order\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n            \"terms.fl\",\"standardfilt\",\n            \"terms.list\",\"spider, snake, shark, ddddd, bad\")\n        ,\"count(//lst[@name='standardfilt']/*)=4\"\n        ,\"//lst[@name='standardfilt']/int[1][@name='ddddd'][.='4']\"\n        ,\"//lst[@name='standardfilt']/int[2][@name='shark'][.='2']\"\n        ,\"//lst[@name='standardfilt']/int[3][@name='snake'][.='3']\"\n        ,\"//lst[@name='standardfilt']/int[4][@name='spider'][.='1']\"\n    );\n\n\n    //Test with numeric terms\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n            \"terms.fl\",\"foo_i\",\n            \"terms.list\",\"2, 1\")\n        ,\"count(//lst[@name='foo_i']/*)=2\"\n        ,\"//lst[@name='foo_i']/int[1][@name='1'][.='2']\"\n        ,\"//lst[@name='foo_i']/int[2][@name='2'][.='1']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"213e062dd7cfdd10e8df198b43616cb99b0c4fdd","date":1600693537,"type":3,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testTermsList().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermsComponentTest#testTermsList().mjava","sourceNew":"  @Test\n  public void testTermsList() throws Exception {\n    //Terms list always returns in index order\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",\n            \"terms.fl\",\"standardfilt\",\n            \"terms.list\",\"spider,snake,a\\\\,b,shark,ddddd,bad\")\n        ,\"count(//lst[@name='standardfilt']/*)=5\"\n        ,\"//lst[@name='standardfilt']/int[1][@name='a,b'][.='1']\"\n        ,\"//lst[@name='standardfilt']/int[2][@name='ddddd'][.='4']\"\n        ,\"//lst[@name='standardfilt']/int[3][@name='shark'][.='2']\"\n        ,\"//lst[@name='standardfilt']/int[4][@name='snake'][.='3']\"\n        ,\"//lst[@name='standardfilt']/int[5][@name='spider'][.='1']\"\n    );\n\n\n    //Test with numeric terms\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",\n            \"terms.fl\",\"foo_i\",\n            \"terms.list\",\"2,1\")\n        ,\"count(//lst[@name='foo_i']/*)=2\"\n        ,\"//lst[@name='foo_i']/int[1][@name='1'][.='2']\"\n        ,\"//lst[@name='foo_i']/int[2][@name='2'][.='1']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testTermsList() throws Exception {\n    //Terms list always returns in index order\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n            \"terms.fl\",\"standardfilt\",\n            \"terms.list\",\"spider,snake,a\\\\,b,shark,ddddd,bad\")\n        ,\"count(//lst[@name='standardfilt']/*)=5\"\n        ,\"//lst[@name='standardfilt']/int[1][@name='a,b'][.='1']\"\n        ,\"//lst[@name='standardfilt']/int[2][@name='ddddd'][.='4']\"\n        ,\"//lst[@name='standardfilt']/int[3][@name='shark'][.='2']\"\n        ,\"//lst[@name='standardfilt']/int[4][@name='snake'][.='3']\"\n        ,\"//lst[@name='standardfilt']/int[5][@name='spider'][.='1']\"\n    );\n\n\n    //Test with numeric terms\n    assertQ(req(\"indent\",\"true\", \"qt\",\"/terms\",  \"terms\",\"true\",\n            \"terms.fl\",\"foo_i\",\n            \"terms.list\",\"2,1\")\n        ,\"count(//lst[@name='foo_i']/*)=2\"\n        ,\"//lst[@name='foo_i']/int[1][@name='1'][.='2']\"\n        ,\"//lst[@name='foo_i']/int[2][@name='2'][.='1']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"acc205c9a28b75ff49ea105240dd87c1a9687342":["8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d"],"213e062dd7cfdd10e8df198b43616cb99b0c4fdd":["82873e945a4c6bea4384112b77e7ee51832428e5"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d","82873e945a4c6bea4384112b77e7ee51832428e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e7761210febbbf9eb64d86512126e718181aec9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d":["6e7761210febbbf9eb64d86512126e718181aec9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["213e062dd7cfdd10e8df198b43616cb99b0c4fdd"],"82873e945a4c6bea4384112b77e7ee51832428e5":["8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d","acc205c9a28b75ff49ea105240dd87c1a9687342"]},"commit2Childs":{"acc205c9a28b75ff49ea105240dd87c1a9687342":["82873e945a4c6bea4384112b77e7ee51832428e5"],"213e062dd7cfdd10e8df198b43616cb99b0c4fdd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e7761210febbbf9eb64d86512126e718181aec9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6e7761210febbbf9eb64d86512126e718181aec9":["8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d"],"8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d":["acc205c9a28b75ff49ea105240dd87c1a9687342","3a7809d1d753b67f48b1a706e17034bf8b624ea3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","82873e945a4c6bea4384112b77e7ee51832428e5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"82873e945a4c6bea4384112b77e7ee51832428e5":["213e062dd7cfdd10e8df198b43616cb99b0c4fdd","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}