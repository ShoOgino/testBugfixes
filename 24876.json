{"path":"solr/core/src/test/org/apache/solr/handler/admin/IndexSizeEstimatorTest#testIntegration().mjava","commits":[{"id":"e4583dbd381e291c87e23144564c59ba3391b188","date":1560187306,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/IndexSizeEstimatorTest#testIntegration().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testIntegration() throws Exception {\n    CollectionAdminResponse rsp = CollectionAdminRequest.collectionStatus(collection)\n        .setWithRawSizeInfo(true)\n        .setWithRawSizeSummary(true)\n        .setWithRawSizeDetails(true)\n        .process(solrClient);\n    CollectionAdminResponse sampledRsp = CollectionAdminRequest.collectionStatus(collection)\n        .setWithRawSizeInfo(true)\n        .setWithRawSizeSummary(true)\n        .setWithRawSizeDetails(true)\n        .setRawSizeSamplingPercent(5)\n        .process(solrClient);\n    assertEquals(0, rsp.getStatus());\n    assertEquals(0, sampledRsp.getStatus());\n    for (int i : Arrays.asList(1, 2)) {\n      NamedList<Object> segInfos = (NamedList<Object>) rsp.getResponse().findRecursive(collection, \"shards\", \"shard\" + i, \"leader\", \"segInfos\");\n      NamedList<Object> rawSize = (NamedList<Object>)segInfos.get(\"rawSize\");\n      assertNotNull(\"rawSize missing\", rawSize);\n      Map<String, Object> rawSizeMap = rawSize.asMap(10);\n      Map<String, Object> fieldsBySize = (Map<String, Object>)rawSizeMap.get(IndexSizeEstimator.FIELDS_BY_SIZE);\n      assertNotNull(\"fieldsBySize missing\", fieldsBySize);\n      assertEquals(fieldsBySize.toString(), fields.size(), fieldsBySize.size());\n      fields.forEach(field -> assertNotNull(\"missing field \" + field, fieldsBySize.get(field)));\n      Map<String, Object> typesBySize = (Map<String, Object>)rawSizeMap.get(IndexSizeEstimator.TYPES_BY_SIZE);\n      assertNotNull(\"typesBySize missing\", typesBySize);\n      assertTrue(\"expected at least 8 types: \" + typesBySize.toString(), typesBySize.size() >= 8);\n      Map<String, Object> summary = (Map<String, Object>)rawSizeMap.get(IndexSizeEstimator.SUMMARY);\n      assertNotNull(\"summary missing\", summary);\n      assertEquals(summary.toString(), fields.size(), summary.size());\n      fields.forEach(field -> assertNotNull(\"missing field \" + field, summary.get(field)));\n      Map<String, Object> details = (Map<String, Object>)rawSizeMap.get(IndexSizeEstimator.DETAILS);\n      assertNotNull(\"details missing\", summary);\n      assertEquals(details.keySet().toString(), 6, details.size());\n\n      // compare with sampled\n      NamedList<Object> sampledRawSize = (NamedList<Object>) rsp.getResponse().findRecursive(collection, \"shards\", \"shard\" + i, \"leader\", \"segInfos\", \"rawSize\");\n      assertNotNull(\"sampled rawSize missing\", sampledRawSize);\n      Map<String, Object> sampledRawSizeMap = rawSize.asMap(10);\n      Map<String, Object> sampledFieldsBySize = (Map<String, Object>)sampledRawSizeMap.get(IndexSizeEstimator.FIELDS_BY_SIZE);\n      assertNotNull(\"sampled fieldsBySize missing\", sampledFieldsBySize);\n      fieldsBySize.forEach((k, v) -> {\n        double size = fromHumanReadableUnits((String)v);\n        double sampledSize = fromHumanReadableUnits((String)sampledFieldsBySize.get(k));\n        assertNotNull(\"sampled size missing for field \" + k + \" in \" + sampledFieldsBySize, sampledSize);\n        double delta = size * 0.5;\n        assertEquals(\"sampled size of \" + k + \" is wildly off\", size, sampledSize, delta);\n      });\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/IndexSizeEstimatorTest#testIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/IndexSizeEstimatorTest#testIntegration().mjava","sourceNew":"  @Test\n  public void testIntegration() throws Exception {\n    CollectionAdminResponse rsp = CollectionAdminRequest.collectionStatus(collection)\n        .setWithRawSizeInfo(true)\n        .setWithRawSizeSummary(true)\n        .setWithRawSizeDetails(true)\n        .process(solrClient);\n    CollectionAdminResponse sampledRsp = CollectionAdminRequest.collectionStatus(collection)\n        .setWithRawSizeInfo(true)\n        .setWithRawSizeSummary(true)\n        .setWithRawSizeDetails(true)\n        .setRawSizeSamplingPercent(5)\n        .process(solrClient);\n    assertEquals(0, rsp.getStatus());\n    assertEquals(0, sampledRsp.getStatus());\n    for (int i : Arrays.asList(1, 2)) {\n      @SuppressWarnings({\"unchecked\"})\n      NamedList<Object> segInfos = (NamedList<Object>) rsp.getResponse().findRecursive(collection, \"shards\", \"shard\" + i, \"leader\", \"segInfos\");\n      @SuppressWarnings({\"unchecked\"})\n      NamedList<Object> rawSize = (NamedList<Object>)segInfos.get(\"rawSize\");\n      assertNotNull(\"rawSize missing\", rawSize);\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> rawSizeMap = rawSize.asMap(10);\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> fieldsBySize = (Map<String, Object>)rawSizeMap.get(IndexSizeEstimator.FIELDS_BY_SIZE);\n      assertNotNull(\"fieldsBySize missing\", fieldsBySize);\n      assertEquals(fieldsBySize.toString(), fields.size(), fieldsBySize.size());\n      fields.forEach(field -> assertNotNull(\"missing field \" + field, fieldsBySize.get(field)));\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> typesBySize = (Map<String, Object>)rawSizeMap.get(IndexSizeEstimator.TYPES_BY_SIZE);\n      assertNotNull(\"typesBySize missing\", typesBySize);\n      assertTrue(\"expected at least 8 types: \" + typesBySize.toString(), typesBySize.size() >= 8);\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> summary = (Map<String, Object>)rawSizeMap.get(IndexSizeEstimator.SUMMARY);\n      assertNotNull(\"summary missing\", summary);\n      assertEquals(summary.toString(), fields.size(), summary.size());\n      fields.forEach(field -> assertNotNull(\"missing field \" + field, summary.get(field)));\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> details = (Map<String, Object>)rawSizeMap.get(IndexSizeEstimator.DETAILS);\n      assertNotNull(\"details missing\", summary);\n      assertEquals(details.keySet().toString(), 6, details.size());\n\n      // compare with sampled\n      @SuppressWarnings({\"unchecked\"})\n      NamedList<Object> sampledRawSize = (NamedList<Object>) rsp.getResponse().findRecursive(collection, \"shards\", \"shard\" + i, \"leader\", \"segInfos\", \"rawSize\");\n      assertNotNull(\"sampled rawSize missing\", sampledRawSize);\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> sampledRawSizeMap = rawSize.asMap(10);\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> sampledFieldsBySize = (Map<String, Object>)sampledRawSizeMap.get(IndexSizeEstimator.FIELDS_BY_SIZE);\n      assertNotNull(\"sampled fieldsBySize missing\", sampledFieldsBySize);\n      fieldsBySize.forEach((k, v) -> {\n        double size = fromHumanReadableUnits((String)v);\n        double sampledSize = fromHumanReadableUnits((String)sampledFieldsBySize.get(k));\n        assertNotNull(\"sampled size missing for field \" + k + \" in \" + sampledFieldsBySize, sampledSize);\n        double delta = size * 0.5;\n        assertEquals(\"sampled size of \" + k + \" is wildly off\", size, sampledSize, delta);\n      });\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testIntegration() throws Exception {\n    CollectionAdminResponse rsp = CollectionAdminRequest.collectionStatus(collection)\n        .setWithRawSizeInfo(true)\n        .setWithRawSizeSummary(true)\n        .setWithRawSizeDetails(true)\n        .process(solrClient);\n    CollectionAdminResponse sampledRsp = CollectionAdminRequest.collectionStatus(collection)\n        .setWithRawSizeInfo(true)\n        .setWithRawSizeSummary(true)\n        .setWithRawSizeDetails(true)\n        .setRawSizeSamplingPercent(5)\n        .process(solrClient);\n    assertEquals(0, rsp.getStatus());\n    assertEquals(0, sampledRsp.getStatus());\n    for (int i : Arrays.asList(1, 2)) {\n      NamedList<Object> segInfos = (NamedList<Object>) rsp.getResponse().findRecursive(collection, \"shards\", \"shard\" + i, \"leader\", \"segInfos\");\n      NamedList<Object> rawSize = (NamedList<Object>)segInfos.get(\"rawSize\");\n      assertNotNull(\"rawSize missing\", rawSize);\n      Map<String, Object> rawSizeMap = rawSize.asMap(10);\n      Map<String, Object> fieldsBySize = (Map<String, Object>)rawSizeMap.get(IndexSizeEstimator.FIELDS_BY_SIZE);\n      assertNotNull(\"fieldsBySize missing\", fieldsBySize);\n      assertEquals(fieldsBySize.toString(), fields.size(), fieldsBySize.size());\n      fields.forEach(field -> assertNotNull(\"missing field \" + field, fieldsBySize.get(field)));\n      Map<String, Object> typesBySize = (Map<String, Object>)rawSizeMap.get(IndexSizeEstimator.TYPES_BY_SIZE);\n      assertNotNull(\"typesBySize missing\", typesBySize);\n      assertTrue(\"expected at least 8 types: \" + typesBySize.toString(), typesBySize.size() >= 8);\n      Map<String, Object> summary = (Map<String, Object>)rawSizeMap.get(IndexSizeEstimator.SUMMARY);\n      assertNotNull(\"summary missing\", summary);\n      assertEquals(summary.toString(), fields.size(), summary.size());\n      fields.forEach(field -> assertNotNull(\"missing field \" + field, summary.get(field)));\n      Map<String, Object> details = (Map<String, Object>)rawSizeMap.get(IndexSizeEstimator.DETAILS);\n      assertNotNull(\"details missing\", summary);\n      assertEquals(details.keySet().toString(), 6, details.size());\n\n      // compare with sampled\n      NamedList<Object> sampledRawSize = (NamedList<Object>) rsp.getResponse().findRecursive(collection, \"shards\", \"shard\" + i, \"leader\", \"segInfos\", \"rawSize\");\n      assertNotNull(\"sampled rawSize missing\", sampledRawSize);\n      Map<String, Object> sampledRawSizeMap = rawSize.asMap(10);\n      Map<String, Object> sampledFieldsBySize = (Map<String, Object>)sampledRawSizeMap.get(IndexSizeEstimator.FIELDS_BY_SIZE);\n      assertNotNull(\"sampled fieldsBySize missing\", sampledFieldsBySize);\n      fieldsBySize.forEach((k, v) -> {\n        double size = fromHumanReadableUnits((String)v);\n        double sampledSize = fromHumanReadableUnits((String)sampledFieldsBySize.get(k));\n        assertNotNull(\"sampled size missing for field \" + k + \" in \" + sampledFieldsBySize, sampledSize);\n        double delta = size * 0.5;\n        assertEquals(\"sampled size of \" + k + \" is wildly off\", size, sampledSize, delta);\n      });\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e4583dbd381e291c87e23144564c59ba3391b188":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["e4583dbd381e291c87e23144564c59ba3391b188"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4583dbd381e291c87e23144564c59ba3391b188"],"e4583dbd381e291c87e23144564c59ba3391b188":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}