{"path":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newDirectory();\n    buildIndex(dir, true);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.type());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newDirectory();\n    buildIndex(dir, true);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.type());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd0f953fbccd59aa346f280fe7e30a698f5ecb04","date":1331511349,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newDirectory();\n    buildIndex(dir, true);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.getType());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newDirectory();\n    buildIndex(dir, true);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.type());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newDirectory();\n    buildIndex(dir, true);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.getType());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newDirectory();\n    buildIndex(dir, true);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.type());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a3b1d1827232fee926b12cd22842daa4e39cd68","date":1336175028,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir, true);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.getType());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newDirectory();\n    buildIndex(dir, true);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.getType());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir, true);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.getType());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir, true);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.getType());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir, true);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.getType());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir, true);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.getType());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir, true);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.getType());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir, true);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.getType());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.simpleNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir, true);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.getType());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1552916e7512a3bbf5d2364c3a97a677ce055ea","date":1358290892,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.simpleNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, (byte)normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.simpleNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"918112640095e5d9e24767e62d9755c12d52dd37","date":1358291177,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.simpleNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.simpleNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, (byte)normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.getNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.simpleNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.getNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir, true);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    DocValues normValues = open.normValues(byteTestField);\n    assertNotNull(normValues);\n    Source source = normValues.getSource();\n    assertTrue(source.hasArray());\n    assertEquals(Type.FIXED_INTS_8, normValues.getType());\n    byte[] norms = (byte[]) source.getArray();\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals((byte)expected, norms[i]);\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":["cd0f953fbccd59aa346f280fe7e30a698f5ecb04","9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.getNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.getNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.getNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.getNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.getNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(_TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.getNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(TestUtil.createTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.getNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.getNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(createTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.getNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(TestUtil.createTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.getNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(createTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.getNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(TestUtil.getTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.getNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(createTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    LeafReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.getNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(createTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    AtomicReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.getNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(createTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    LeafReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.getNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(createTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    LeafReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.getNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      StoredDocument document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(createTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues normValues = MultiDocValues.getNormValues(open, byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(createTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    LeafReader open = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    NumericDocValues normValues = open.getNormValues(byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(createTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues normValues = MultiDocValues.getNormValues(open, byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(i, normValues.nextDoc());\n      assertEquals(expected, normValues.longValue());\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(createTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues normValues = MultiDocValues.getNormValues(open, byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(createTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues normValues = MultiDocValues.getNormValues(open, byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(i, normValues.nextDoc());\n      assertEquals(expected, normValues.longValue());\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(createTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues normValues = MultiDocValues.getNormValues(open, byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(createTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues normValues = MultiDocValues.getNormValues(open, byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(i, normValues.nextDoc());\n      assertEquals(expected, normValues.longValue());\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(createTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues normValues = MultiDocValues.getNormValues(open, byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(expected, normValues.get(i));\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(createTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues normValues = MultiDocValues.getNormValues(open, byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField).split(\" \")[0]);\n      assertEquals(i, normValues.nextDoc());\n      assertEquals(expected, normValues.longValue());\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(createTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues normValues = MultiDocValues.getNormValues(open, byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField));\n      assertEquals(i, normValues.nextDoc());\n      assertEquals(expected, normValues.longValue());\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(createTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues normValues = MultiDocValues.getNormValues(open, BYTE_TEST_FIELD);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(BYTE_TEST_FIELD).split(\" \")[0]);\n      assertEquals(i, normValues.nextDoc());\n      assertEquals(expected, normValues.longValue());\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(createTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues normValues = MultiDocValues.getNormValues(open, byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField).split(\" \")[0]);\n      assertEquals(i, normValues.nextDoc());\n      assertEquals(expected, normValues.longValue());\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNorms#testMaxByteNorms().mjava","sourceNew":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(createTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues normValues = MultiDocValues.getNormValues(open, BYTE_TEST_FIELD);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(BYTE_TEST_FIELD).split(\" \")[0]);\n      assertEquals(i, normValues.nextDoc());\n      assertEquals(expected, normValues.longValue());\n    }\n    open.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testMaxByteNorms() throws IOException {\n    Directory dir = newFSDirectory(createTempDir(\"TestNorms.testMaxByteNorms\"));\n    buildIndex(dir);\n    DirectoryReader open = DirectoryReader.open(dir);\n    NumericDocValues normValues = MultiDocValues.getNormValues(open, byteTestField);\n    assertNotNull(normValues);\n    for (int i = 0; i < open.maxDoc(); i++) {\n      Document document = open.document(i);\n      int expected = Integer.parseInt(document.get(byteTestField).split(\" \")[0]);\n      assertEquals(i, normValues.nextDoc());\n      assertEquals(expected, normValues.longValue());\n    }\n    open.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"5de502b5478255493125e7e801411ba17a6682ec":["acd9883560fd89e6448b2b447302fe543040cd4f"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["acd9883560fd89e6448b2b447302fe543040cd4f"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"1d028314cced5858683a1bb4741423d0f934257b":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["918112640095e5d9e24767e62d9755c12d52dd37"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["5a3b1d1827232fee926b12cd22842daa4e39cd68"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"0837ab0472feecb3a54260729d845f839e1cbd72":["1d028314cced5858683a1bb4741423d0f934257b"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"6613659748fe4411a7dcf85266e55db1f95f7315":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"918112640095e5d9e24767e62d9755c12d52dd37":["a1552916e7512a3bbf5d2364c3a97a677ce055ea"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"5a3b1d1827232fee926b12cd22842daa4e39cd68":["cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["1d028314cced5858683a1bb4741423d0f934257b","b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"cd0f953fbccd59aa346f280fe7e30a698f5ecb04":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a1552916e7512a3bbf5d2364c3a97a677ce055ea":["0837ab0472feecb3a54260729d845f839e1cbd72"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"acd9883560fd89e6448b2b447302fe543040cd4f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5de502b5478255493125e7e801411ba17a6682ec"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"5de502b5478255493125e7e801411ba17a6682ec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"1d028314cced5858683a1bb4741423d0f934257b":["0837ab0472feecb3a54260729d845f839e1cbd72","d4d69c535930b5cce125cff868d40f6373dc27d4"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","acd9883560fd89e6448b2b447302fe543040cd4f"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["a1552916e7512a3bbf5d2364c3a97a677ce055ea"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"918112640095e5d9e24767e62d9755c12d52dd37":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"5a3b1d1827232fee926b12cd22842daa4e39cd68":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["19275ba31e621f6da1b83bf13af75233876fd3d4","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"cd0f953fbccd59aa346f280fe7e30a698f5ecb04":["38e3b736c7ca086d61b7dbb841c905ee115490da","5a3b1d1827232fee926b12cd22842daa4e39cd68"],"a1552916e7512a3bbf5d2364c3a97a677ce055ea":["918112640095e5d9e24767e62d9755c12d52dd37"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"acd9883560fd89e6448b2b447302fe543040cd4f":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f20fd35e3055a0c5b387df0b986a68d65d86441","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","38e3b736c7ca086d61b7dbb841c905ee115490da","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}