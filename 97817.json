{"path":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","commits":[{"id":"0a12d3c6475f1b99b086e4ca6b9ba34e65081859","date":1204263291,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","pathOld":"/dev/null","sourceNew":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException{\n    \n    HttpMethod method = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = request.getContentStreams();\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion() );\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if( streams == null || isMultipart ) {\n              // Without streams, just post the parameters\n              PostMethod post = new PostMethod( url );\n\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while( iter.hasNext() ) {\n                String p = iter.next();\n                String[] vals = params.getParams( p );\n                if( vals != null && vals.length > 0 ) {\n                  for( String v : vals ) {\n                    post.addParameter( p, (v==null)?null:v );\n                  }\n                }\n                else {\n                  post.addParameter( p, null );\n                }\n              }\n\n              post.getParams().setContentCharset(\"UTF-8\");\n\n              if( isMultipart ) {\n                int i=0;\n                Part[] parts = new Part[streams.size()];\n\n                for( ContentStream content : streams ) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  String transferEncoding = null;\n                  parts[i++] = new PartBase( c.getName(), c.getContentType(), charSet, transferEncoding ) {\n                    @Override\n                    protected long lengthOfData() throws IOException {\n                      return c.getSize();\n                    }\n\n                    @Override\n                      protected void sendData(OutputStream out) throws IOException {\n                      IOUtils.copy( c.getReader(), out );\n                    }\n                  };\n                }\n\n                // Set the multi-part request\n                post.setRequestEntity( new MultipartRequestEntity( parts, post.getParams() ) );\n                method = post;\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString( params, false );\n              PostMethod post = new PostMethod( url+pstr );\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              for( ContentStream content : streams ) {\n                post.setRequestEntity(\n                    new InputStreamRequestEntity( content.getStream(), content.getContentType())\n                );\n                break;\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7c00763ceedfa0fc93dffe88eddf2ba67e7585de","e122d6e4a2d4e9b25c10c99d0df3066f9358cfda"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd2c13a9e59bd0409763aad7974a0ea46a40e0bb","date":1207927334,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","sourceNew":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException{\n    \n    HttpMethod method = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = request.getContentStreams();\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion() );\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if( streams == null || isMultipart ) {\n              // Without streams, just post the parameters\n              PostMethod post = new PostMethod( url );\n\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while( iter.hasNext() ) {\n                String p = iter.next();\n                String[] vals = params.getParams( p );\n                if( vals != null && vals.length > 0 ) {\n                  for( String v : vals ) {\n                    post.addParameter( p, (v==null)?null:v );\n                  }\n                }\n                else {\n                  post.addParameter( p, null );\n                }\n              }\n\n              post.getParams().setContentCharset(\"UTF-8\");\n\n              if( isMultipart ) {\n                int i=0;\n                Part[] parts = new Part[streams.size()];\n\n                for( ContentStream content : streams ) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  String transferEncoding = null;\n                  parts[i++] = new PartBase( c.getName(), c.getContentType(), charSet, transferEncoding ) {\n                    @Override\n                    protected long lengthOfData() throws IOException {\n                      return c.getSize();\n                    }\n\n                    @Override\n                      protected void sendData(OutputStream out) throws IOException {\n                      IOUtils.copy( c.getReader(), out );\n                    }\n                  };\n                }\n\n                // Set the multi-part request\n                post.setRequestEntity( new MultipartRequestEntity( parts, post.getParams() ) );\n                method = post;\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString( params, false );\n              PostMethod post = new PostMethod( url+pstr );\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              for( ContentStream content : streams ) {\n                post.setRequestEntity(\n                    new InputStreamRequestEntity( content.getStream(), content.getContentType())\n                );\n                break;\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n    }\n  }\n\n","sourceOld":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException{\n    \n    HttpMethod method = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = request.getContentStreams();\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion() );\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if( streams == null || isMultipart ) {\n              // Without streams, just post the parameters\n              PostMethod post = new PostMethod( url );\n\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while( iter.hasNext() ) {\n                String p = iter.next();\n                String[] vals = params.getParams( p );\n                if( vals != null && vals.length > 0 ) {\n                  for( String v : vals ) {\n                    post.addParameter( p, (v==null)?null:v );\n                  }\n                }\n                else {\n                  post.addParameter( p, null );\n                }\n              }\n\n              post.getParams().setContentCharset(\"UTF-8\");\n\n              if( isMultipart ) {\n                int i=0;\n                Part[] parts = new Part[streams.size()];\n\n                for( ContentStream content : streams ) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  String transferEncoding = null;\n                  parts[i++] = new PartBase( c.getName(), c.getContentType(), charSet, transferEncoding ) {\n                    @Override\n                    protected long lengthOfData() throws IOException {\n                      return c.getSize();\n                    }\n\n                    @Override\n                      protected void sendData(OutputStream out) throws IOException {\n                      IOUtils.copy( c.getReader(), out );\n                    }\n                  };\n                }\n\n                // Set the multi-part request\n                post.setRequestEntity( new MultipartRequestEntity( parts, post.getParams() ) );\n                method = post;\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString( params, false );\n              PostMethod post = new PostMethod( url+pstr );\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              for( ContentStream content : streams ) {\n                post.setRequestEntity(\n                    new InputStreamRequestEntity( content.getStream(), content.getContentType())\n                );\n                break;\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c00763ceedfa0fc93dffe88eddf2ba67e7585de","date":1215037404,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","sourceNew":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException{\n    \n    HttpMethod method = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = request.getContentStreams();\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion() );\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  String transferEncoding = null;\n                  parts.add(new PartBase(c.getName(), c.getContentType(),\n                      charSet, transferEncoding) {\n                    @Override\n                    protected long lengthOfData() throws IOException {\n                      return c.getSize();\n                    }\n\n                    @Override\n                    protected void sendData(OutputStream out)\n                        throws IOException {\n                      IOUtils.copy(c.getReader(), out);\n                    }\n                  });\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString( params, false );\n              PostMethod post = new PostMethod( url+pstr );\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              for( ContentStream content : streams ) {\n                post.setRequestEntity(\n                    new InputStreamRequestEntity( content.getStream(), content.getContentType())\n                );\n                break;\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n    }\n  }\n\n","sourceOld":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException{\n    \n    HttpMethod method = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = request.getContentStreams();\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion() );\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if( streams == null || isMultipart ) {\n              // Without streams, just post the parameters\n              PostMethod post = new PostMethod( url );\n\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while( iter.hasNext() ) {\n                String p = iter.next();\n                String[] vals = params.getParams( p );\n                if( vals != null && vals.length > 0 ) {\n                  for( String v : vals ) {\n                    post.addParameter( p, (v==null)?null:v );\n                  }\n                }\n                else {\n                  post.addParameter( p, null );\n                }\n              }\n\n              post.getParams().setContentCharset(\"UTF-8\");\n\n              if( isMultipart ) {\n                int i=0;\n                Part[] parts = new Part[streams.size()];\n\n                for( ContentStream content : streams ) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  String transferEncoding = null;\n                  parts[i++] = new PartBase( c.getName(), c.getContentType(), charSet, transferEncoding ) {\n                    @Override\n                    protected long lengthOfData() throws IOException {\n                      return c.getSize();\n                    }\n\n                    @Override\n                      protected void sendData(OutputStream out) throws IOException {\n                      IOUtils.copy( c.getReader(), out );\n                    }\n                  };\n                }\n\n                // Set the multi-part request\n                post.setRequestEntity( new MultipartRequestEntity( parts, post.getParams() ) );\n                method = post;\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString( params, false );\n              PostMethod post = new PostMethod( url+pstr );\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              for( ContentStream content : streams ) {\n                post.setRequestEntity(\n                    new InputStreamRequestEntity( content.getStream(), content.getContentType())\n                );\n                break;\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n    }\n  }\n\n","bugFix":["0a12d3c6475f1b99b086e4ca6b9ba34e65081859"],"bugIntro":["e122d6e4a2d4e9b25c10c99d0df3066f9358cfda","dbf8bf15546966c2999be987d32191fc1ef495ef"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#request(SolrRequest,ResponseParser).mjava","sourceNew":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException{\n    \n    HttpMethod method = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = request.getContentStreams();\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion() );\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  String transferEncoding = null;\n                  parts.add(new PartBase(c.getName(), c.getContentType(),\n                      charSet, transferEncoding) {\n                    @Override\n                    protected long lengthOfData() throws IOException {\n                      return c.getSize();\n                    }\n\n                    @Override\n                    protected void sendData(OutputStream out)\n                        throws IOException {\n                      IOUtils.copy(c.getReader(), out);\n                    }\n                  });\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString( params, false );\n              PostMethod post = new PostMethod( url+pstr );\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              for( ContentStream content : streams ) {\n                post.setRequestEntity(\n                    new InputStreamRequestEntity( content.getStream(), content.getContentType())\n                );\n                break;\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n    }\n  }\n\n","sourceOld":"  public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException{\n    \n    HttpMethod method = null;\n    SolrParams params = request.getParams();\n    Collection<ContentStream> streams = request.getContentStreams();\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n    \n    ResponseParser parser = request.getResponseParser();\n    if( parser == null ) {\n      parser = _parser;\n    }\n    \n    // The parser 'wt=' and 'version=' params are used instead of the original params\n    ModifiableSolrParams wparams = new ModifiableSolrParams();\n    wparams.set( CommonParams.WT, parser.getWriterType() );\n    wparams.set( CommonParams.VERSION, parser.getVersion() );\n    if( params == null ) {\n      params = wparams;\n    }\n    else {\n      params = new DefaultSolrParams( wparams, params );\n    }\n    \n    if( _invariantParams != null ) {\n      params = new DefaultSolrParams( _invariantParams, params );\n    }\n\n    int tries = _maxRetries + 1;\n    try {\n      while( tries-- > 0 ) {\n        // Note: since we aren't do intermittent time keeping\n        // ourselves, the potential non-timeout latency could be as\n        // much as tries-times (plus scheduling effects) the given\n        // timeAllowed.\n        try {\n          if( SolrRequest.METHOD.GET == request.getMethod() ) {\n            if( streams != null ) {\n              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"GET can't send streams!\" );\n            }\n            method = new GetMethod( _baseURL + path + ClientUtils.toQueryString( params, false ) );\n          }\n          else if( SolrRequest.METHOD.POST == request.getMethod() ) {\n\n            String url = _baseURL + path;\n            boolean isMultipart = ( streams != null && streams.size() > 1 );\n\n            if (streams == null || isMultipart) {\n              PostMethod post = new PostMethod(url);\n              post.getParams().setContentCharset(\"UTF-8\");\n              if (!this.useMultiPartPost && !isMultipart) {\n                post.addRequestHeader(\"Content-Type\",\n                    \"application/x-www-form-urlencoded; charset=UTF-8\");\n              }\n\n              List<Part> parts = new LinkedList<Part>();\n              Iterator<String> iter = params.getParameterNamesIterator();\n              while (iter.hasNext()) {\n                String p = iter.next();\n                String[] vals = params.getParams(p);\n                if (vals != null) {\n                  for (String v : vals) {\n                    if (this.useMultiPartPost || isMultipart) {\n                      parts.add(new StringPart(p, v, \"UTF-8\"));\n                    } else {\n                      post.addParameter(p, v);\n                    }\n                  }\n                }\n              }\n\n              if (isMultipart) {\n                int i = 0;\n                for (ContentStream content : streams) {\n                  final ContentStream c = content;\n\n                  String charSet = null;\n                  String transferEncoding = null;\n                  parts.add(new PartBase(c.getName(), c.getContentType(),\n                      charSet, transferEncoding) {\n                    @Override\n                    protected long lengthOfData() throws IOException {\n                      return c.getSize();\n                    }\n\n                    @Override\n                    protected void sendData(OutputStream out)\n                        throws IOException {\n                      IOUtils.copy(c.getReader(), out);\n                    }\n                  });\n                }\n              }\n              if (parts.size() > 0) {\n                post.setRequestEntity(new MultipartRequestEntity(parts\n                    .toArray(new Part[parts.size()]), post.getParams()));\n              }\n\n              method = post;\n            }\n            // It is has one stream, it is the post body, put the params in the URL\n            else {\n              String pstr = ClientUtils.toQueryString( params, false );\n              PostMethod post = new PostMethod( url+pstr );\n\n              // Single stream as body\n              // Using a loop just to get the first one\n              for( ContentStream content : streams ) {\n                post.setRequestEntity(\n                    new InputStreamRequestEntity( content.getStream(), content.getContentType())\n                );\n                break;\n              }\n              method = post;\n            }\n          }\n          else {\n            throw new SolrServerException(\"Unsupported method: \"+request.getMethod() );\n          }\n        }\n        catch( NoHttpResponseException r ) {\n          // This is generally safe to retry on\n          method.releaseConnection();\n          method = null;\n          // If out of tries then just rethrow (as normal error).\n          if( ( tries < 1 ) ) {\n            throw r;\n          }\n          //log.warn( \"Caught: \" + r + \". Retrying...\" );\n        }\n      }\n    }\n    catch( IOException ex ) {\n      throw new SolrServerException(\"error reading streams\", ex );\n    }\n\n    method.setFollowRedirects( _followRedirects );\n    method.addRequestHeader( \"User-Agent\", AGENT );\n    if( _allowCompression ) {\n      method.setRequestHeader( new Header( \"Accept-Encoding\", \"gzip,deflate\" ) );\n    }\n\n    try {\n      // Execute the method.\n      //System.out.println( \"EXECUTE:\"+method.getURI() );\n\n      int statusCode = _httpClient.executeMethod(method);\n      if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        throw new SolrException(statusCode, java.net.URLDecoder.decode(msg.toString(), \"UTF-8\") );\n      }\n\n      // Read the contents\n      String charset = \"UTF-8\";\n      if( method instanceof HttpMethodBase ) {\n        charset = ((HttpMethodBase)method).getResponseCharSet();\n      }\n      InputStream respBody = method.getResponseBodyAsStream();\n      // Jakarta Commons HTTPClient doesn't handle any\n      // compression natively.  Handle gzip or deflate\n      // here if applicable.\n      if( _allowCompression ) {\n        Header contentEncodingHeader = method.getResponseHeader( \"Content-Encoding\" );\n        if( contentEncodingHeader != null ) {\n          String contentEncoding = contentEncodingHeader.getValue();\n          if( contentEncoding.contains( \"gzip\" ) ) {\n            //log.debug( \"wrapping response in GZIPInputStream\" );\n            respBody = new GZIPInputStream( respBody );\n          }\n          else if( contentEncoding.contains( \"deflate\" ) ) {\n            //log.debug( \"wrapping response in InflaterInputStream\" );\n            respBody = new InflaterInputStream(respBody);\n          }\n        }\n        else {\n          Header contentTypeHeader = method.getResponseHeader( \"Content-Type\" );\n          if( contentTypeHeader != null ) {\n            String contentType = contentTypeHeader.getValue();\n            if( contentType != null ) {\n              if( contentType.startsWith( \"application/x-gzip-compressed\" ) ) {\n                //log.debug( \"wrapping response in GZIPInputStream\" );\n                respBody = new GZIPInputStream( respBody );\n              }\n              else if ( contentType.startsWith(\"application/x-deflate\") ) {\n                //log.debug( \"wrapping response in InflaterInputStream\" );\n                respBody = new InflaterInputStream(respBody);\n              }\n            }\n          }\n        }\n      }\n      return processor.processResponse(respBody, charset);\n    }\n    catch (HttpException e) {\n      throw new SolrServerException( e );\n    }\n    catch (IOException e) {\n      throw new SolrServerException( e );\n    }\n    finally {\n      method.releaseConnection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["7c00763ceedfa0fc93dffe88eddf2ba67e7585de"],"0a12d3c6475f1b99b086e4ca6b9ba34e65081859":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c00763ceedfa0fc93dffe88eddf2ba67e7585de":["bd2c13a9e59bd0409763aad7974a0ea46a40e0bb"],"bd2c13a9e59bd0409763aad7974a0ea46a40e0bb":["0a12d3c6475f1b99b086e4ca6b9ba34e65081859"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"0a12d3c6475f1b99b086e4ca6b9ba34e65081859":["bd2c13a9e59bd0409763aad7974a0ea46a40e0bb"],"7c00763ceedfa0fc93dffe88eddf2ba67e7585de":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"bd2c13a9e59bd0409763aad7974a0ea46a40e0bb":["7c00763ceedfa0fc93dffe88eddf2ba67e7585de"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0a12d3c6475f1b99b086e4ca6b9ba34e65081859"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}