{"path":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws IOException {\n    Terms result = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(result);\n    assertEquals(3, result.getUniqueTermCount());\n    TermsEnum termsEnum = result.iterator(null);\n    while(termsEnum.next() != null) {\n      String term = termsEnum.term().utf8ToString();\n      int freq = (int) termsEnum.totalTermFreq();\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    Fields results = reader.getTermVectors(0);\n    assertTrue(results != null);\n    assertEquals(\"We do not have 3 term freq vectors\", 3, results.getUniqueFieldCount());      \n  }    \n\n","sourceOld":"  public void testTermVectors() throws IOException {\n    Terms result = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(result);\n    assertEquals(3, result.getUniqueTermCount());\n    TermsEnum termsEnum = result.iterator(null);\n    while(termsEnum.next() != null) {\n      String term = termsEnum.term().utf8ToString();\n      int freq = (int) termsEnum.totalTermFreq();\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    Fields results = reader.getTermVectors(0);\n    assertTrue(results != null);\n    assertEquals(\"We do not have 3 term freq vectors\", 3, results.getUniqueFieldCount());      \n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws IOException {\n    Terms result = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(result);\n    assertEquals(3, result.getUniqueTermCount());\n    TermsEnum termsEnum = result.iterator(null);\n    while(termsEnum.next() != null) {\n      String term = termsEnum.term().utf8ToString();\n      int freq = (int) termsEnum.totalTermFreq();\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    InvertedFields results = reader.getTermVectors(0);\n    assertTrue(results != null);\n    assertEquals(\"We do not have 3 term freq vectors\", 3, results.getUniqueFieldCount());      \n  }    \n\n","sourceOld":"  public void testTermVectors() throws IOException {\n    Terms result = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(result);\n    assertEquals(3, result.getUniqueTermCount());\n    TermsEnum termsEnum = result.iterator(null);\n    while(termsEnum.next() != null) {\n      String term = termsEnum.term().utf8ToString();\n      int freq = (int) termsEnum.totalTermFreq();\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    Fields results = reader.getTermVectors(0);\n    assertTrue(results != null);\n    assertEquals(\"We do not have 3 term freq vectors\", 3, results.getUniqueFieldCount());      \n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws IOException {\n    Terms result = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(result);\n    assertEquals(3, result.getUniqueTermCount());\n    TermsEnum termsEnum = result.iterator(null);\n    while(termsEnum.next() != null) {\n      String term = termsEnum.term().utf8ToString();\n      int freq = (int) termsEnum.totalTermFreq();\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    Fields results = reader.getTermVectors(0);\n    assertTrue(results != null);\n    assertEquals(\"We do not have 3 term freq vectors\", 3, results.getUniqueFieldCount());      \n  }    \n\n","sourceOld":"  public void testTermVectors() throws IOException {\n    Terms result = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(result);\n    assertEquals(3, result.getUniqueTermCount());\n    TermsEnum termsEnum = result.iterator(null);\n    while(termsEnum.next() != null) {\n      String term = termsEnum.term().utf8ToString();\n      int freq = (int) termsEnum.totalTermFreq();\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    InvertedFields results = reader.getTermVectors(0);\n    assertTrue(results != null);\n    assertEquals(\"We do not have 3 term freq vectors\", 3, results.getUniqueFieldCount());      \n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdb5e42b0cecd8dfb27767a02ada71899bf17917","date":1334100099,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws IOException {\n    Terms result = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(result);\n    assertEquals(3, result.size());\n    TermsEnum termsEnum = result.iterator(null);\n    while(termsEnum.next() != null) {\n      String term = termsEnum.term().utf8ToString();\n      int freq = (int) termsEnum.totalTermFreq();\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    Fields results = reader.getTermVectors(0);\n    assertTrue(results != null);\n    assertEquals(\"We do not have 3 term freq vectors\", 3, results.size());\n  }    \n\n","sourceOld":"  public void testTermVectors() throws IOException {\n    Terms result = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(result);\n    assertEquals(3, result.getUniqueTermCount());\n    TermsEnum termsEnum = result.iterator(null);\n    while(termsEnum.next() != null) {\n      String term = termsEnum.term().utf8ToString();\n      int freq = (int) termsEnum.totalTermFreq();\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    Fields results = reader.getTermVectors(0);\n    assertTrue(results != null);\n    assertEquals(\"We do not have 3 term freq vectors\", 3, results.getUniqueFieldCount());      \n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws IOException {\n    Terms result = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(result);\n    assertEquals(3, result.size());\n    TermsEnum termsEnum = result.iterator(null);\n    while(termsEnum.next() != null) {\n      String term = termsEnum.term().utf8ToString();\n      int freq = (int) termsEnum.totalTermFreq();\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    Fields results = reader.getTermVectors(0);\n    assertTrue(results != null);\n    assertEquals(\"We do not have 3 term freq vectors\", 3, results.size());\n  }    \n\n","sourceOld":"  public void testTermVectors() throws IOException {\n    Terms result = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(result);\n    assertEquals(3, result.getUniqueTermCount());\n    TermsEnum termsEnum = result.iterator(null);\n    while(termsEnum.next() != null) {\n      String term = termsEnum.term().utf8ToString();\n      int freq = (int) termsEnum.totalTermFreq();\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    Fields results = reader.getTermVectors(0);\n    assertTrue(results != null);\n    assertEquals(\"We do not have 3 term freq vectors\", 3, results.getUniqueFieldCount());      \n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws IOException {\n    Terms result = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(result);\n    assertEquals(3, result.size());\n    TermsEnum termsEnum = result.iterator();\n    while(termsEnum.next() != null) {\n      String term = termsEnum.term().utf8ToString();\n      int freq = (int) termsEnum.totalTermFreq();\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    Fields results = reader.getTermVectors(0);\n    assertTrue(results != null);\n    assertEquals(\"We do not have 3 term freq vectors\", 3, results.size());\n  }    \n\n","sourceOld":"  public void testTermVectors() throws IOException {\n    Terms result = reader.getTermVectors(0).terms(DocHelper.TEXT_FIELD_2_KEY);\n    assertNotNull(result);\n    assertEquals(3, result.size());\n    TermsEnum termsEnum = result.iterator(null);\n    while(termsEnum.next() != null) {\n      String term = termsEnum.term().utf8ToString();\n      int freq = (int) termsEnum.totalTermFreq();\n      assertTrue(DocHelper.FIELD_2_TEXT.indexOf(term) != -1);\n      assertTrue(freq > 0);\n    }\n\n    Fields results = reader.getTermVectors(0);\n    assertTrue(results != null);\n    assertEquals(\"We do not have 3 term freq vectors\", 3, results.size());\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"5a238fc456663f685a9db1ed8d680e348bb45171":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","5a238fc456663f685a9db1ed8d680e348bb45171"],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","5a238fc456663f685a9db1ed8d680e348bb45171"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a238fc456663f685a9db1ed8d680e348bb45171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}