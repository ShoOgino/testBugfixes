{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector).mjava","commits":[{"id":"4739c84c362b9673ab5ed3e038ff760c718c30c8","date":1322161679,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createRandomFirstPassCollector(String,Sort,int).mjava","sourceNew":"  private AbstractFirstPassGroupingCollector createFirstPassCollector(String groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector firstPassGroupingCollector) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random.nextBoolean();\n      return DVFirstPassGroupingCollector.create(groupSort, topDocs, groupField, ValueType.BYTES_VAR_SORTED, diskResident);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","sourceOld":"  private AbstractFirstPassGroupingCollector createRandomFirstPassCollector(String groupField, Sort groupSort, int topDocs) throws IOException {\n    if (random.nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector).mjava","sourceNew":"  private AbstractFirstPassGroupingCollector createFirstPassCollector(String groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector firstPassGroupingCollector) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random.nextBoolean();\n      return DVFirstPassGroupingCollector.create(groupSort, topDocs, groupField, Type.BYTES_VAR_SORTED, diskResident);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","sourceOld":"  private AbstractFirstPassGroupingCollector createFirstPassCollector(String groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector firstPassGroupingCollector) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random.nextBoolean();\n      return DVFirstPassGroupingCollector.create(groupSort, topDocs, groupField, ValueType.BYTES_VAR_SORTED, diskResident);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector).mjava","sourceNew":"  private AbstractFirstPassGroupingCollector createFirstPassCollector(String groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector firstPassGroupingCollector) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random.nextBoolean();\n      return DVFirstPassGroupingCollector.create(groupSort, topDocs, groupField, Type.BYTES_VAR_SORTED, diskResident);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","sourceOld":"  private AbstractFirstPassGroupingCollector createFirstPassCollector(String groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector firstPassGroupingCollector) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random.nextBoolean();\n      return DVFirstPassGroupingCollector.create(groupSort, topDocs, groupField, ValueType.BYTES_VAR_SORTED, diskResident);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b588d7000deacb0a01f30746b91644112b94326","date":1331201456,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector).mjava","sourceNew":"  private AbstractFirstPassGroupingCollector<?> createFirstPassCollector(String groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector firstPassGroupingCollector) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random.nextBoolean();\n      return DVFirstPassGroupingCollector.create(groupSort, topDocs, groupField, Type.BYTES_VAR_SORTED, diskResident);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","sourceOld":"  private AbstractFirstPassGroupingCollector createFirstPassCollector(String groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector firstPassGroupingCollector) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random.nextBoolean();\n      return DVFirstPassGroupingCollector.create(groupSort, topDocs, groupField, Type.BYTES_VAR_SORTED, diskResident);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6005b05c19356dfca18f39979caeeb6b85bc88bb","date":1331204804,"type":5,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector[#]).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector).mjava","sourceNew":"  private AbstractFirstPassGroupingCollector<?> createFirstPassCollector(String groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector<?> firstPassGroupingCollector) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random.nextBoolean();\n      return DVFirstPassGroupingCollector.create(groupSort, topDocs, groupField, Type.BYTES_VAR_SORTED, diskResident);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","sourceOld":"  private AbstractFirstPassGroupingCollector<?> createFirstPassCollector(String groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector firstPassGroupingCollector) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random.nextBoolean();\n      return DVFirstPassGroupingCollector.create(groupSort, topDocs, groupField, Type.BYTES_VAR_SORTED, diskResident);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":5,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector[#]).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createFirstPassCollector(String,Sort,int,AbstractFirstPassGroupingCollector).mjava","sourceNew":"  private AbstractFirstPassGroupingCollector<?> createFirstPassCollector(String groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector<?> firstPassGroupingCollector) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random.nextBoolean();\n      return DVFirstPassGroupingCollector.create(groupSort, topDocs, groupField, Type.BYTES_VAR_SORTED, diskResident);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap<Object, Object>(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","sourceOld":"  private AbstractFirstPassGroupingCollector createFirstPassCollector(String groupField, Sort groupSort, int topDocs, AbstractFirstPassGroupingCollector firstPassGroupingCollector) throws IOException {\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random.nextBoolean();\n      return DVFirstPassGroupingCollector.create(groupSort, topDocs, groupField, Type.BYTES_VAR_SORTED, diskResident);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      return new FunctionFirstPassGroupingCollector(vs, new HashMap(), groupSort, topDocs);\n    } else {\n      return new TermFirstPassGroupingCollector(groupField, groupSort, topDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["d638301ad1cfcae567b681b893bc8781f0ee48a5","6005b05c19356dfca18f39979caeeb6b85bc88bb"],"6005b05c19356dfca18f39979caeeb6b85bc88bb":["6b588d7000deacb0a01f30746b91644112b94326"],"4739c84c362b9673ab5ed3e038ff760c718c30c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["4739c84c362b9673ab5ed3e038ff760c718c30c8"],"6b588d7000deacb0a01f30746b91644112b94326":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6005b05c19356dfca18f39979caeeb6b85bc88bb"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["4739c84c362b9673ab5ed3e038ff760c718c30c8","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"6005b05c19356dfca18f39979caeeb6b85bc88bb":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4739c84c362b9673ab5ed3e038ff760c718c30c8":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4739c84c362b9673ab5ed3e038ff760c718c30c8"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"6b588d7000deacb0a01f30746b91644112b94326":["6005b05c19356dfca18f39979caeeb6b85bc88bb"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["38e3b736c7ca086d61b7dbb841c905ee115490da","6b588d7000deacb0a01f30746b91644112b94326"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}