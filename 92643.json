{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext).mjava","commits":[{"id":"dded3df9e710f258905cff1def2f25eb51c62e0f","date":1475158173,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext).mjava","sourceNew":"  private void fillRole(String solrNode, SnitchContext ctx) {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    if(roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n    ctx.store(ZkStateReader.ROLES, roles == null ? Collections.emptyMap() : roles);\n    if (roles != null) {\n      for (Object o : roles.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof List) {\n          if(((List) e.getValue()).contains(solrNode)) {\n            ctx.getTags().put(ROLE, e.getKey());\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void fillRole(String solrNode, SnitchContext ctx) {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    if(roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n    ctx.store(ZkStateReader.ROLES, roles == null ? Collections.emptyMap() : roles);\n    if (roles != null) {\n      for (Object o : roles.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof List) {\n          if(((List) e.getValue()).contains(solrNode)) {\n            ctx.getTags().put(ROLE, e.getKey());\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext).mjava","sourceNew":"  private void fillRole(String solrNode, SnitchContext ctx) {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    if(roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n    ctx.store(ZkStateReader.ROLES, roles == null ? Collections.emptyMap() : roles);\n    if (roles != null) {\n      for (Object o : roles.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof List) {\n          if(((List) e.getValue()).contains(solrNode)) {\n            ctx.getTags().put(ROLE, e.getKey());\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void fillRole(String solrNode, SnitchContext ctx) {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    if(roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n    ctx.store(ZkStateReader.ROLES, roles == null ? Collections.emptyMap() : roles);\n    if (roles != null) {\n      for (Object o : roles.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof List) {\n          if(((List) e.getValue()).contains(solrNode)) {\n            ctx.getTags().put(ROLE, e.getKey());\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext).mjava","pathOld":"/dev/null","sourceNew":"  private void fillRole(String solrNode, SnitchContext ctx) {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    if(roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n    ctx.store(ZkStateReader.ROLES, roles == null ? Collections.emptyMap() : roles);\n    if (roles != null) {\n      for (Object o : roles.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof List) {\n          if(((List) e.getValue()).contains(solrNode)) {\n            ctx.getTags().put(ROLE, e.getKey());\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"961a14d298363c1efe0c3135a9f8b762dafd0d99","date":1496035169,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext).mjava","sourceNew":"  private void fillRole(String solrNode, SnitchContext ctx, String key) {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    if(roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n    ctx.store(ZkStateReader.ROLES, roles == null ? Collections.emptyMap() : roles);\n    if (roles != null) {\n      for (Object o : roles.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof List) {\n          if(((List) e.getValue()).contains(solrNode)) {\n            ctx.getTags().put(key, e.getKey());\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void fillRole(String solrNode, SnitchContext ctx) {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    if(roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n    ctx.store(ZkStateReader.ROLES, roles == null ? Collections.emptyMap() : roles);\n    if (roles != null) {\n      for (Object o : roles.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof List) {\n          if(((List) e.getValue()).contains(solrNode)) {\n            ctx.getTags().put(ROLE, e.getKey());\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext).mjava","sourceNew":"  private void fillRole(String solrNode, SnitchContext ctx, String key) {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    if(roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n    ctx.store(ZkStateReader.ROLES, roles == null ? Collections.emptyMap() : roles);\n    if (roles != null) {\n      for (Object o : roles.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof List) {\n          if(((List) e.getValue()).contains(solrNode)) {\n            ctx.getTags().put(key, e.getKey());\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void fillRole(String solrNode, SnitchContext ctx) {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    if(roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n    ctx.store(ZkStateReader.ROLES, roles == null ? Collections.emptyMap() : roles);\n    if (roles != null) {\n      for (Object o : roles.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof List) {\n          if(((List) e.getValue()).contains(solrNode)) {\n            ctx.getTags().put(ROLE, e.getKey());\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#cacheRoles(String,SnitchContext,String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext).mjava","sourceNew":"  private void cacheRoles(String solrNode, SnitchContext ctx, String key, Map roles) {\n    ctx.store(ZkStateReader.ROLES, roles);\n    if (roles != null) {\n      for (Object o : roles.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof List) {\n          if (((List) e.getValue()).contains(solrNode)) {\n            ctx.getTags().put(key, e.getKey());\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void fillRole(String solrNode, SnitchContext ctx) {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    if(roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n    ctx.store(ZkStateReader.ROLES, roles == null ? Collections.emptyMap() : roles);\n    if (roles != null) {\n      for (Object o : roles.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof List) {\n          if(((List) e.getValue()).contains(solrNode)) {\n            ctx.getTags().put(ROLE, e.getKey());\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#fillRole(String,SnitchContext).mjava","sourceNew":null,"sourceOld":"  private void fillRole(String solrNode, SnitchContext ctx) {\n    Map roles = (Map) ctx.retrieve(ZkStateReader.ROLES); // we don't want to hit the ZK for each node\n    // so cache and reuse\n    if(roles == null) roles = ctx.getZkJson(ZkStateReader.ROLES);\n    ctx.store(ZkStateReader.ROLES, roles == null ? Collections.emptyMap() : roles);\n    if (roles != null) {\n      for (Object o : roles.entrySet()) {\n        Map.Entry e = (Map.Entry) o;\n        if (e.getValue() instanceof List) {\n          if(((List) e.getValue()).contains(solrNode)) {\n            ctx.getTags().put(ROLE, e.getKey());\n            break;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"961a14d298363c1efe0c3135a9f8b762dafd0d99":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dded3df9e710f258905cff1def2f25eb51c62e0f"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"dded3df9e710f258905cff1def2f25eb51c62e0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"961a14d298363c1efe0c3135a9f8b762dafd0d99":[],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["28288370235ed02234a64753cdbf0c6ec096304a"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["961a14d298363c1efe0c3135a9f8b762dafd0d99","74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","dded3df9e710f258905cff1def2f25eb51c62e0f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"dded3df9e710f258905cff1def2f25eb51c62e0f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["961a14d298363c1efe0c3135a9f8b762dafd0d99","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}