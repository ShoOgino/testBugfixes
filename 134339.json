{"path":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetAll().mjava","commits":[{"id":"b68e97c9c933030236b0123cce18c86b084bd871","date":1431669089,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetAll().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetAll() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"x\", \"X1\");\n    params.add(\"x\", \"X2\");\n    params.add(\"y\", \"Y\");\n    Map<String, Object> m = params.getAll(null, \"x\", \"y\");\n    String[] x = (String[]) m.get(\"x\");\n    assertEquals(2, x.length);\n    assertEquals(\"X1\", x[0]);\n    assertEquals(\"X2\", x[1]);\n    assertEquals(\"Y\", m.get(\"y\"));\n    try {\n      params.required().getAll(null, \"z\");\n      fail(\"Error expected\");\n    } catch (SolrException e) {\n      assertEquals(e.code(), SolrException.ErrorCode.BAD_REQUEST.code);\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129e5b874f99ae4e04f39c337c940dda690f2d38","date":1524504409,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#testCopyParamsToMap().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/params/SolrParamTest#testGetAll().mjava","sourceNew":"  @Test\n  public void testCopyParamsToMap() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"x\", \"X1\");\n    params.add(\"x\", \"X2\");\n    params.add(\"y\", \"Y\");\n    Map<String, Object> m = CollectionsHandler.copy(params, null, \"x\", \"y\");\n    String[] x = (String[]) m.get(\"x\");\n    assertEquals(2, x.length);\n    assertEquals(\"X1\", x[0]);\n    assertEquals(\"X2\", x[1]);\n    assertEquals(\"Y\", m.get(\"y\"));\n    try {\n      CollectionsHandler.copy(params.required(), null, \"z\");\n      fail(\"Error expected\");\n    } catch (SolrException e) {\n      assertEquals(e.code(), SolrException.ErrorCode.BAD_REQUEST.code);\n\n    }\n  }\n\n","sourceOld":"  public void testGetAll() {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"x\", \"X1\");\n    params.add(\"x\", \"X2\");\n    params.add(\"y\", \"Y\");\n    Map<String, Object> m = params.getAll(null, \"x\", \"y\");\n    String[] x = (String[]) m.get(\"x\");\n    assertEquals(2, x.length);\n    assertEquals(\"X1\", x[0]);\n    assertEquals(\"X2\", x[1]);\n    assertEquals(\"Y\", m.get(\"y\"));\n    try {\n      params.required().getAll(null, \"z\");\n      fail(\"Error expected\");\n    } catch (SolrException e) {\n      assertEquals(e.code(), SolrException.ErrorCode.BAD_REQUEST.code);\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"129e5b874f99ae4e04f39c337c940dda690f2d38":["b68e97c9c933030236b0123cce18c86b084bd871"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b68e97c9c933030236b0123cce18c86b084bd871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["129e5b874f99ae4e04f39c337c940dda690f2d38"]},"commit2Childs":{"129e5b874f99ae4e04f39c337c940dda690f2d38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b68e97c9c933030236b0123cce18c86b084bd871"],"b68e97c9c933030236b0123cce18c86b084bd871":["129e5b874f99ae4e04f39c337c940dda690f2d38"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}