{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#getClassesForPackage(String,List[Class[#]]).mjava","commits":[{"id":"83fce48948948c503c3bd6d3f18e48ad21a9239c","date":1333837677,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#getClassesForPackage(String,List[Class[#]]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#getClassesForPackage(String).mjava","sourceNew":"  private static void getClassesForPackage(String pckgname, List<Class<?>> classes) throws Exception {\n    final ArrayList<File> directories = new ArrayList<File>();\n    final ClassLoader cld = TestRandomChains.class.getClassLoader();\n    final String path = pckgname.replace('.', '/');\n    final Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      directories.add(f);\n    }\n      \n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (new File(directory, file).isDirectory()) {\n            // recurse\n            String subPackage = pckgname + \".\" + file;\n            getClassesForPackage(subPackage, classes);\n          }\n          if (file.endsWith(\".class\")) {\n            String clazzName = file.substring(0, file.length() - 6);\n            // exclude Test classes that happen to be in these packages.\n            // class.ForName'ing some of them can cause trouble.\n            if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n              // Don't run static initializers, as we won't use most of them.\n              // Java will do that automatically once accessed/instantiated.\n              classes.add(Class.forName(pckgname + '.' + clazzName, false, cld));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static List<Class<?>> getClassesForPackage(String pckgname) throws Exception {\n    ArrayList<File> directories = new ArrayList<File>();\n    ClassLoader cld = Thread.currentThread().getContextClassLoader();\n    String path = pckgname.replace('.', '/');\n    Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      directories.add(f);\n    }\n      \n    ArrayList<Class<?>> classes = new ArrayList<Class<?>>();\n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (new File(directory, file).isDirectory()) {\n            // recurse\n            String subPackage = pckgname + \".\" + file;\n            classes.addAll(getClassesForPackage(subPackage));\n          }\n          if (file.endsWith(\".class\")) {\n             String clazzName = file.substring(0, file.length() - 6);\n             // exclude Test classes that happen to be in these packages.\n             // class.ForName'ing some of them can cause trouble.\n             if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n               classes.add(Class.forName(pckgname + '.' + clazzName));\n             }\n          }\n        }\n      }\n    }\n    return classes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17ceb5c8178e19fad62951784aa2d087107a25bf","date":1333837993,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#getClassesForPackage(String,List[Class[#]]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#getClassesForPackage(String,List[Class[#]]).mjava","sourceNew":"  private static void getClassesForPackage(String pckgname, List<Class<?>> classes) throws Exception {\n    final ClassLoader cld = TestRandomChains.class.getClassLoader();\n    final String path = pckgname.replace('.', '/');\n    final Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File directory = new File(resources.nextElement().toURI());\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (new File(directory, file).isDirectory()) {\n            // recurse\n            String subPackage = pckgname + \".\" + file;\n            getClassesForPackage(subPackage, classes);\n          }\n          if (file.endsWith(\".class\")) {\n            String clazzName = file.substring(0, file.length() - 6);\n            // exclude Test classes that happen to be in these packages.\n            // class.ForName'ing some of them can cause trouble.\n            if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n              // Don't run static initializers, as we won't use most of them.\n              // Java will do that automatically once accessed/instantiated.\n              classes.add(Class.forName(pckgname + '.' + clazzName, false, cld));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void getClassesForPackage(String pckgname, List<Class<?>> classes) throws Exception {\n    final ArrayList<File> directories = new ArrayList<File>();\n    final ClassLoader cld = TestRandomChains.class.getClassLoader();\n    final String path = pckgname.replace('.', '/');\n    final Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File f = new File(resources.nextElement().toURI());\n      directories.add(f);\n    }\n      \n    for (File directory : directories) {\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (new File(directory, file).isDirectory()) {\n            // recurse\n            String subPackage = pckgname + \".\" + file;\n            getClassesForPackage(subPackage, classes);\n          }\n          if (file.endsWith(\".class\")) {\n            String clazzName = file.substring(0, file.length() - 6);\n            // exclude Test classes that happen to be in these packages.\n            // class.ForName'ing some of them can cause trouble.\n            if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n              // Don't run static initializers, as we won't use most of them.\n              // Java will do that automatically once accessed/instantiated.\n              classes.add(Class.forName(pckgname + '.' + clazzName, false, cld));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#getClassesForPackage(String,List[Class[#]]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#getClassesForPackage(String,List[Class[#]]).mjava","sourceNew":"  private static void getClassesForPackage(String pckgname, List<Class<?>> classes) throws Exception {\n    final ClassLoader cld = TestRandomChains.class.getClassLoader();\n    final String path = pckgname.replace('.', '/');\n    final Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File directory = new File(resources.nextElement().toURI());\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (new File(directory, file).isDirectory()) {\n            // recurse\n            String subPackage = pckgname + \".\" + file;\n            getClassesForPackage(subPackage, classes);\n          }\n          if (file.endsWith(\".class\")) {\n            String clazzName = file.substring(0, file.length() - 6);\n            // exclude Test classes that happen to be in these packages.\n            // class.ForName'ing some of them can cause trouble.\n            if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n              // Don't run static initializers, as we won't use most of them.\n              // Java will do that automatically once accessed/instantiated.\n              classes.add(Class.forName(pckgname + '.' + clazzName, false, cld));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void getClassesForPackage(String pckgname, List<Class<?>> classes) throws Exception {\n    final ClassLoader cld = TestRandomChains.class.getClassLoader();\n    final String path = pckgname.replace('.', '/');\n    final Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File directory = new File(resources.nextElement().toURI());\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (new File(directory, file).isDirectory()) {\n            // recurse\n            String subPackage = pckgname + \".\" + file;\n            getClassesForPackage(subPackage, classes);\n          }\n          if (file.endsWith(\".class\")) {\n            String clazzName = file.substring(0, file.length() - 6);\n            // exclude Test classes that happen to be in these packages.\n            // class.ForName'ing some of them can cause trouble.\n            if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n              // Don't run static initializers, as we won't use most of them.\n              // Java will do that automatically once accessed/instantiated.\n              classes.add(Class.forName(pckgname + '.' + clazzName, false, cld));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["17ceb5c8178e19fad62951784aa2d087107a25bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17ceb5c8178e19fad62951784aa2d087107a25bf":["83fce48948948c503c3bd6d3f18e48ad21a9239c"],"83fce48948948c503c3bd6d3f18e48ad21a9239c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83fce48948948c503c3bd6d3f18e48ad21a9239c"],"17ceb5c8178e19fad62951784aa2d087107a25bf":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"83fce48948948c503c3bd6d3f18e48ad21a9239c":["17ceb5c8178e19fad62951784aa2d087107a25bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}