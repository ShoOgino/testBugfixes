{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getKey(TSTNode).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getKey(TSTNode).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getKey(TSTNode).mjava","sourceNew":"  /**\n   * Returns the key that indexes the node argument.\n   * \n   *@param node\n   *          The node whose index is to be calculated.\n   *@return The <code>String</code> that indexes the node argument.\n   */\n  protected String getKey(TSTNode node) {\n    StringBuffer getKeyBuffer = new StringBuffer();\n    getKeyBuffer.setLength(0);\n    getKeyBuffer.append(\"\" + node.splitchar);\n    TSTNode currentNode;\n    TSTNode lastNode;\n    currentNode = node.relatives[TSTNode.PARENT];\n    lastNode = node;\n    while (currentNode != null) {\n      if (currentNode.relatives[TSTNode.EQKID] == lastNode) {\n        getKeyBuffer.append(\"\" + currentNode.splitchar);\n      }\n      lastNode = currentNode;\n      currentNode = currentNode.relatives[TSTNode.PARENT];\n    }\n    getKeyBuffer.reverse();\n    return getKeyBuffer.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns the key that indexes the node argument.\n   * \n   *@param node\n   *          The node whose index is to be calculated.\n   *@return The <code>String</code> that indexes the node argument.\n   */\n  protected String getKey(TSTNode node) {\n    StringBuffer getKeyBuffer = new StringBuffer();\n    getKeyBuffer.setLength(0);\n    getKeyBuffer.append(\"\" + node.splitchar);\n    TSTNode currentNode;\n    TSTNode lastNode;\n    currentNode = node.relatives[TSTNode.PARENT];\n    lastNode = node;\n    while (currentNode != null) {\n      if (currentNode.relatives[TSTNode.EQKID] == lastNode) {\n        getKeyBuffer.append(\"\" + currentNode.splitchar);\n      }\n      lastNode = currentNode;\n      currentNode = currentNode.relatives[TSTNode.PARENT];\n    }\n    getKeyBuffer.reverse();\n    return getKeyBuffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d06343967a29132f5d782f74e8d0988400278a02","date":1388963049,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getKey(TSTNode).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getKey(TSTNode).mjava","sourceNew":"  /**\n   * Returns the key that indexes the node argument.\n   * \n   *@param node\n   *          The node whose index is to be calculated.\n   *@return The <code>String</code> that indexes the node argument.\n   */\n  protected String getKey(TSTNode node) {\n    StringBuilder getKeyBuffer = new StringBuilder();\n    getKeyBuffer.setLength(0);\n    getKeyBuffer.append(\"\" + node.splitchar);\n    TSTNode currentNode;\n    TSTNode lastNode;\n    currentNode = node.relatives[TSTNode.PARENT];\n    lastNode = node;\n    while (currentNode != null) {\n      if (currentNode.relatives[TSTNode.EQKID] == lastNode) {\n        getKeyBuffer.append(\"\" + currentNode.splitchar);\n      }\n      lastNode = currentNode;\n      currentNode = currentNode.relatives[TSTNode.PARENT];\n    }\n    getKeyBuffer.reverse();\n    return getKeyBuffer.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns the key that indexes the node argument.\n   * \n   *@param node\n   *          The node whose index is to be calculated.\n   *@return The <code>String</code> that indexes the node argument.\n   */\n  protected String getKey(TSTNode node) {\n    StringBuffer getKeyBuffer = new StringBuffer();\n    getKeyBuffer.setLength(0);\n    getKeyBuffer.append(\"\" + node.splitchar);\n    TSTNode currentNode;\n    TSTNode lastNode;\n    currentNode = node.relatives[TSTNode.PARENT];\n    lastNode = node;\n    while (currentNode != null) {\n      if (currentNode.relatives[TSTNode.EQKID] == lastNode) {\n        getKeyBuffer.append(\"\" + currentNode.splitchar);\n      }\n      lastNode = currentNode;\n      currentNode = currentNode.relatives[TSTNode.PARENT];\n    }\n    getKeyBuffer.reverse();\n    return getKeyBuffer.toString();\n  }\n\n","bugFix":["4ff4f089150b5073dcd4fa1e2018954e3a1eb1af"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ffe681f212e5073c69955b4ad22946794c84940","date":1560182863,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getKey(TSTNode).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getKey(TSTNode).mjava","sourceNew":"  /**\n   * Returns the key that indexes the node argument.\n   * \n   *@param node\n   *          The node whose index is to be calculated.\n   *@return The <code>String</code> that indexes the node argument.\n   */\n  protected String getKey(TSTNode node) {\n    StringBuilder getKeyBuffer = new StringBuilder();\n    getKeyBuffer.setLength(0);\n    getKeyBuffer.append(\"\").append(node.splitchar);\n    TSTNode currentNode;\n    TSTNode lastNode;\n    currentNode = node.relatives[TSTNode.PARENT];\n    lastNode = node;\n    while (currentNode != null) {\n      if (currentNode.relatives[TSTNode.EQKID] == lastNode) {\n        getKeyBuffer.append(\"\").append(currentNode.splitchar);\n      }\n      lastNode = currentNode;\n      currentNode = currentNode.relatives[TSTNode.PARENT];\n    }\n    getKeyBuffer.reverse();\n    return getKeyBuffer.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns the key that indexes the node argument.\n   * \n   *@param node\n   *          The node whose index is to be calculated.\n   *@return The <code>String</code> that indexes the node argument.\n   */\n  protected String getKey(TSTNode node) {\n    StringBuilder getKeyBuffer = new StringBuilder();\n    getKeyBuffer.setLength(0);\n    getKeyBuffer.append(\"\" + node.splitchar);\n    TSTNode currentNode;\n    TSTNode lastNode;\n    currentNode = node.relatives[TSTNode.PARENT];\n    lastNode = node;\n    while (currentNode != null) {\n      if (currentNode.relatives[TSTNode.EQKID] == lastNode) {\n        getKeyBuffer.append(\"\" + currentNode.splitchar);\n      }\n      lastNode = currentNode;\n      currentNode = currentNode.relatives[TSTNode.PARENT];\n    }\n    getKeyBuffer.reverse();\n    return getKeyBuffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ffe681f212e5073c69955b4ad22946794c84940":["d06343967a29132f5d782f74e8d0988400278a02"],"d06343967a29132f5d782f74e8d0988400278a02":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ffe681f212e5073c69955b4ad22946794c84940"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d06343967a29132f5d782f74e8d0988400278a02"],"2ffe681f212e5073c69955b4ad22946794c84940":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d06343967a29132f5d782f74e8d0988400278a02":["2ffe681f212e5073c69955b4ad22946794c84940"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}