{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,List[Row]).mjava","commits":[{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,List[Row]).mjava","pathOld":"/dev/null","sourceNew":"  List<Clause.Violation> testChangedMatrix(boolean strict, List<Row> rows) {\n    Policy.setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences,rows);\n    List<Clause.Violation> errors = new ArrayList<>();\n    for (Clause clause : session.expandedClauses) {\n      if (strict || clause.strict) {\n        List<Clause.Violation> errs = clause.test(rows);\n        if (!errs.isEmpty()) {\n          errors.addAll(errs);\n        }\n      }\n    }\n    return errors;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c721fca3c540a91b445e6c57e51e2fcb64af01a7","date":1508161002,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,List[Row]).mjava","sourceNew":"  List<Violation> testChangedMatrix(boolean strict, List<Row> rows) {\n    Policy.setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences,rows);\n    List<Violation> errors = new ArrayList<>();\n    for (Clause clause : session.expandedClauses) {\n      if (strict || clause.strict) {\n        List<Violation> errs = clause.test(rows);\n        if (!errs.isEmpty()) {\n          errors.addAll(errs);\n        }\n      }\n    }\n    return errors;\n  }\n\n","sourceOld":"  List<Clause.Violation> testChangedMatrix(boolean strict, List<Row> rows) {\n    Policy.setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences,rows);\n    List<Clause.Violation> errors = new ArrayList<>();\n    for (Clause clause : session.expandedClauses) {\n      if (strict || clause.strict) {\n        List<Clause.Violation> errs = clause.test(rows);\n        if (!errs.isEmpty()) {\n          errors.addAll(errs);\n        }\n      }\n    }\n    return errors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,List[Row]).mjava","sourceNew":"  List<Violation> testChangedMatrix(boolean strict, List<Row> rows) {\n    Policy.setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences, rows);\n    List<Violation> errors = new ArrayList<>();\n    for (Clause clause : session.expandedClauses) {\n      if (strict || clause.strict) {\n        List<Violation> errs = clause.test(rows);\n        if (!errs.isEmpty()) {\n          errors.addAll(errs);\n        }\n      }\n    }\n    return errors;\n  }\n\n","sourceOld":"  List<Violation> testChangedMatrix(boolean strict, List<Row> rows) {\n    Policy.setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences,rows);\n    List<Violation> errors = new ArrayList<>();\n    for (Clause clause : session.expandedClauses) {\n      if (strict || clause.strict) {\n        List<Violation> errs = clause.test(rows);\n        if (!errs.isEmpty()) {\n          errors.addAll(errs);\n        }\n      }\n    }\n    return errors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,Policy.Session).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,List[Row]).mjava","sourceNew":"  List<Violation> testChangedMatrix(boolean strict, Policy.Session session) {\n    Policy.setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences, session.matrix);\n    List<Violation> errors = new ArrayList<>();\n    for (Clause clause : session.expandedClauses) {\n      if (strict || clause.strict) {\n        List<Violation> errs = clause.test(session);\n        if (!errs.isEmpty()) {\n          errors.addAll(errs);\n        }\n      }\n    }\n    return errors;\n  }\n\n","sourceOld":"  List<Violation> testChangedMatrix(boolean strict, List<Row> rows) {\n    Policy.setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences, rows);\n    List<Violation> errors = new ArrayList<>();\n    for (Clause clause : session.expandedClauses) {\n      if (strict || clause.strict) {\n        List<Violation> errs = clause.test(rows);\n        if (!errs.isEmpty()) {\n          errors.addAll(errs);\n        }\n      }\n    }\n    return errors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,List[Row]).mjava","sourceNew":null,"sourceOld":"  List<Violation> testChangedMatrix(boolean strict, List<Row> rows) {\n    Policy.setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences, rows);\n    List<Violation> errors = new ArrayList<>();\n    for (Clause clause : session.expandedClauses) {\n      if (strict || clause.strict) {\n        List<Violation> errs = clause.test(rows);\n        if (!errs.isEmpty()) {\n          errors.addAll(errs);\n        }\n      }\n    }\n    return errors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#testChangedMatrix(boolean,List[Row]).mjava","sourceNew":null,"sourceOld":"  List<Violation> testChangedMatrix(boolean strict, List<Row> rows) {\n    Policy.setApproxValuesAndSortNodes(session.getPolicy().clusterPreferences, rows);\n    List<Violation> errors = new ArrayList<>();\n    for (Clause clause : session.expandedClauses) {\n      if (strict || clause.strict) {\n        List<Violation> errs = clause.test(rows);\n        if (!errs.isEmpty()) {\n          errors.addAll(errs);\n        }\n      }\n    }\n    return errors;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["9f0e33082a86447f4f2b59a1a5f69a310500276a","9837f40c922407d857991971de6def18eda0857b"],"c721fca3c540a91b445e6c57e51e2fcb64af01a7":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["c721fca3c540a91b445e6c57e51e2fcb64af01a7"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9837f40c922407d857991971de6def18eda0857b":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9837f40c922407d857991971de6def18eda0857b"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["9f0e33082a86447f4f2b59a1a5f69a310500276a","9837f40c922407d857991971de6def18eda0857b"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c721fca3c540a91b445e6c57e51e2fcb64af01a7":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["c721fca3c540a91b445e6c57e51e2fcb64af01a7"],"9837f40c922407d857991971de6def18eda0857b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}