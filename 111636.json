{"path":"src/test/org/apache/lucene/util/cache/TestDoubleBarrelLRUCache.CacheThread#run().mjava","commits":[{"id":"b3788e811fcba5db4611c3281af4d165044ad9d6","date":1259335977,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/cache/TestDoubleBarrelLRUCache.CacheThread#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      try {\n        long count = 0;\n        long miss = 0;\n        long hit = 0;\n        final int limit = objs.length;\n\n        while(true) {\n          final Object obj = objs[(int) ((count/2) % limit)];\n          Object v = c.get(obj);\n          if (v == null) {\n            c.put(obj, obj);\n            miss++;\n          } else {\n            assert obj == v;\n            hit++;\n          }\n          if ((++count % 10000) == 0) {\n            if (System.currentTimeMillis() >= endTime)  {\n              break;\n            }\n          }\n        }\n\n        addResults(miss, hit);\n      } catch (Throwable t) {\n        failed = true;\n        throw new RuntimeException(t);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985","date":1262018769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/cache/TestDoubleBarrelLRUCache.CacheThread#run().mjava","pathOld":"src/test/org/apache/lucene/util/cache/TestDoubleBarrelLRUCache.CacheThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        long count = 0;\n        long miss = 0;\n        long hit = 0;\n        final int limit = objs.length;\n\n        while(true) {\n          final Object obj = objs[(int) ((count/2) % limit)];\n          Object v = c.get(obj);\n          if (v == null) {\n            c.put(obj, obj);\n            miss++;\n          } else {\n            assert obj == v;\n            hit++;\n          }\n          if ((++count % 10000) == 0) {\n            if (System.currentTimeMillis() >= endTime)  {\n              break;\n            }\n          }\n        }\n\n        addResults(miss, hit);\n      } catch (Throwable t) {\n        failed = true;\n        throw new RuntimeException(t);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        long count = 0;\n        long miss = 0;\n        long hit = 0;\n        final int limit = objs.length;\n\n        while(true) {\n          final Object obj = objs[(int) ((count/2) % limit)];\n          Object v = c.get(obj);\n          if (v == null) {\n            c.put(obj, obj);\n            miss++;\n          } else {\n            assert obj == v;\n            hit++;\n          }\n          if ((++count % 10000) == 0) {\n            if (System.currentTimeMillis() >= endTime)  {\n              break;\n            }\n          }\n        }\n\n        addResults(miss, hit);\n      } catch (Throwable t) {\n        failed = true;\n        throw new RuntimeException(t);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/cache/TestDoubleBarrelLRUCache.CacheThread#run().mjava","pathOld":"src/test/org/apache/lucene/util/cache/TestDoubleBarrelLRUCache.CacheThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        long count = 0;\n        long miss = 0;\n        long hit = 0;\n        final int limit = objs.length;\n\n        while(true) {\n          final Object obj = objs[(int) ((count/2) % limit)];\n          Object v = c.get(obj);\n          if (v == null) {\n            c.put(obj, obj);\n            miss++;\n          } else {\n            assert obj == v;\n            hit++;\n          }\n          if ((++count % 10000) == 0) {\n            if (System.currentTimeMillis() >= endTime)  {\n              break;\n            }\n          }\n        }\n\n        addResults(miss, hit);\n      } catch (Throwable t) {\n        failed = true;\n        throw new RuntimeException(t);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        long count = 0;\n        long miss = 0;\n        long hit = 0;\n        final int limit = objs.length;\n\n        while(true) {\n          final Object obj = objs[(int) ((count/2) % limit)];\n          Object v = c.get(obj);\n          if (v == null) {\n            c.put(obj, obj);\n            miss++;\n          } else {\n            assert obj == v;\n            hit++;\n          }\n          if ((++count % 10000) == 0) {\n            if (System.currentTimeMillis() >= endTime)  {\n              break;\n            }\n          }\n        }\n\n        addResults(miss, hit);\n      } catch (Throwable t) {\n        failed = true;\n        throw new RuntimeException(t);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b3788e811fcba5db4611c3281af4d165044ad9d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985":["b3788e811fcba5db4611c3281af4d165044ad9d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985"]},"commit2Childs":{"b3788e811fcba5db4611c3281af4d165044ad9d6":["8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3788e811fcba5db4611c3281af4d165044ad9d6"],"8b7ca4a8be66d54de1c9a5d16a1e13e71c0b4985":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}