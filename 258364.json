{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","sourceNew":"  final String newSegmentName() {\n    // Cannot synchronize on IndexWriter because that causes\n    // deadlock\n    synchronized(segmentInfos) {\n      // Important to increment changeCount so that the\n      // segmentInfos is written on close.  Otherwise we\n      // could close, re-open and re-return the same segment\n      // name that was previously returned which can cause\n      // problems at least with ConcurrentMergeScheduler.\n      changeCount++;\n      return \"_\" + Integer.toString(segmentInfos.counter++, Character.MAX_RADIX);\n    }\n  }\n\n","sourceOld":"  final String newSegmentName() {\n    // Cannot synchronize on IndexWriter because that causes\n    // deadlock\n    synchronized(segmentInfos) {\n      // Important to increment changeCount so that the\n      // segmentInfos is written on close.  Otherwise we\n      // could close, re-open and re-return the same segment\n      // name that was previously returned which can cause\n      // problems at least with ConcurrentMergeScheduler.\n      changeCount++;\n      return \"_\" + Integer.toString(segmentInfos.counter++, Character.MAX_RADIX);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5947ccd7ba3770dcba5a0713dbd5496678256d9","date":1291744634,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","sourceNew":"  final String newSegmentName() {\n    // Cannot synchronize on IndexWriter because that causes\n    // deadlock\n    synchronized(segmentInfos) {\n      // Important to increment changeCount so that the\n      // segmentInfos is written on close.  Otherwise we\n      // could close, re-open and re-return the same segment\n      // name that was previously returned which can cause\n      // problems at least with ConcurrentMergeScheduler.\n      changeCount++;\n      segmentInfos.changed();\n      return \"_\" + Integer.toString(segmentInfos.counter++, Character.MAX_RADIX);\n    }\n  }\n\n","sourceOld":"  final String newSegmentName() {\n    // Cannot synchronize on IndexWriter because that causes\n    // deadlock\n    synchronized(segmentInfos) {\n      // Important to increment changeCount so that the\n      // segmentInfos is written on close.  Otherwise we\n      // could close, re-open and re-return the same segment\n      // name that was previously returned which can cause\n      // problems at least with ConcurrentMergeScheduler.\n      changeCount++;\n      return \"_\" + Integer.toString(segmentInfos.counter++, Character.MAX_RADIX);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","date":1291778725,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","sourceNew":"  final String newSegmentName() {\n    // Cannot synchronize on IndexWriter because that causes\n    // deadlock\n    synchronized(segmentInfos) {\n      // Important to increment changeCount so that the\n      // segmentInfos is written on close.  Otherwise we\n      // could close, re-open and re-return the same segment\n      // name that was previously returned which can cause\n      // problems at least with ConcurrentMergeScheduler.\n      changeCount++;\n      segmentInfos.changed();\n      return \"_\" + Integer.toString(segmentInfos.counter++, Character.MAX_RADIX);\n    }\n  }\n\n","sourceOld":"  final String newSegmentName() {\n    // Cannot synchronize on IndexWriter because that causes\n    // deadlock\n    synchronized(segmentInfos) {\n      // Important to increment changeCount so that the\n      // segmentInfos is written on close.  Otherwise we\n      // could close, re-open and re-return the same segment\n      // name that was previously returned which can cause\n      // problems at least with ConcurrentMergeScheduler.\n      changeCount++;\n      return \"_\" + Integer.toString(segmentInfos.counter++, Character.MAX_RADIX);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","sourceNew":"  final String newSegmentName() {\n    // Cannot synchronize on IndexWriter because that causes\n    // deadlock\n    synchronized(segmentInfos) {\n      // Important to increment changeCount so that the\n      // segmentInfos is written on close.  Otherwise we\n      // could close, re-open and re-return the same segment\n      // name that was previously returned which can cause\n      // problems at least with ConcurrentMergeScheduler.\n      changeCount++;\n      segmentInfos.changed();\n      return \"_\" + Integer.toString(segmentInfos.counter++, Character.MAX_RADIX);\n    }\n  }\n\n","sourceOld":"  final String newSegmentName() {\n    // Cannot synchronize on IndexWriter because that causes\n    // deadlock\n    synchronized(segmentInfos) {\n      // Important to increment changeCount so that the\n      // segmentInfos is written on close.  Otherwise we\n      // could close, re-open and re-return the same segment\n      // name that was previously returned which can cause\n      // problems at least with ConcurrentMergeScheduler.\n      changeCount++;\n      return \"_\" + Integer.toString(segmentInfos.counter++, Character.MAX_RADIX);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#newSegmentName().mjava","sourceNew":"  final String newSegmentName() {\n    // Cannot synchronize on IndexWriter because that causes\n    // deadlock\n    synchronized(segmentInfos) {\n      // Important to increment changeCount so that the\n      // segmentInfos is written on close.  Otherwise we\n      // could close, re-open and re-return the same segment\n      // name that was previously returned which can cause\n      // problems at least with ConcurrentMergeScheduler.\n      changeCount++;\n      segmentInfos.changed();\n      return \"_\" + Integer.toString(segmentInfos.counter++, Character.MAX_RADIX);\n    }\n  }\n\n","sourceOld":"  final String newSegmentName() {\n    // Cannot synchronize on IndexWriter because that causes\n    // deadlock\n    synchronized(segmentInfos) {\n      // Important to increment changeCount so that the\n      // segmentInfos is written on close.  Otherwise we\n      // could close, re-open and re-return the same segment\n      // name that was previously returned which can cause\n      // problems at least with ConcurrentMergeScheduler.\n      changeCount++;\n      segmentInfos.changed();\n      return \"_\" + Integer.toString(segmentInfos.counter++, Character.MAX_RADIX);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c5947ccd7ba3770dcba5a0713dbd5496678256d9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c5947ccd7ba3770dcba5a0713dbd5496678256d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","c5947ccd7ba3770dcba5a0713dbd5496678256d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c5947ccd7ba3770dcba5a0713dbd5496678256d9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c5947ccd7ba3770dcba5a0713dbd5496678256d9","4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}