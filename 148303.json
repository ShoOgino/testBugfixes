{"path":"solr/core/src/test/org/apache/solr/search/facet/SpatialHeatmapFacetsTest#testPng().mjava","commits":[{"id":"2ab027bdfe663227636ccbeda13ae82add302939","date":1529980633,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/SpatialHeatmapFacetsTest#testPng().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SpatialHeatmapFacetsTest#testPng().mjava","sourceNew":"  @Test\n  @Repeat(iterations = 3)\n  public void testPng() {\n    //We test via round-trip randomized data:\n\n    // Make random data\n    int columns = random().nextInt(100) + 1;\n    int rows = random().nextInt(100) + 1;\n    int[] counts = new int[columns * rows];\n    for (int i = 0; i < counts.length; i++) {\n      final int ri = random().nextInt(10);\n      if (ri >= 0 && ri <= 3) {\n        counts[i] = ri; // 0 thru 3 will be made common\n      } else if (ri > 3) {\n        counts[i] = Math.abs(random().nextInt());//lots of other possible values up to max\n      }\n    }\n    // Round-trip\n    final byte[] bytes = FacetHeatmap.asPngBytes(columns, rows, counts, null);\n    int[] countsOut = random().nextBoolean() ? new int[columns * rows] : null;\n    int base = 0;\n    if (countsOut != null) {\n      base = 9;\n      Arrays.fill(countsOut, base);\n    }\n    countsOut = FacetHeatmap.addPngToIntArray(bytes, countsOut);\n    // Test equal\n    assertEquals(counts.length, countsOut.length);\n    for (int i = 0; i < countsOut.length; i++) {\n      assertEquals(counts[i], countsOut[i] - base);//back out the base input to prove we added\n    }\n  }\n\n","sourceOld":"  @Test\n  @Repeat(iterations = 3)\n  public void testPng() {\n    //We test via round-trip randomized data:\n\n    // Make random data\n    int columns = random().nextInt(100) + 1;\n    int rows = random().nextInt(100) + 1;\n    int[] counts = new int[columns * rows];\n    for (int i = 0; i < counts.length; i++) {\n      final int ri = random().nextInt(10);\n      if (ri >= 0 && ri <= 3) {\n        counts[i] = ri; // 0 thru 3 will be made common\n      } else if (ri > 3) {\n        counts[i] = Math.abs(random().nextInt());//lots of other possible values up to max\n      }\n    }\n    // Round-trip\n    final byte[] bytes = SpatialHeatmapFacets.asPngBytes(columns, rows, counts, null);\n    int[] countsOut = random().nextBoolean() ? new int[columns * rows] : null;\n    int base = 0;\n    if (countsOut != null) {\n      base = 9;\n      Arrays.fill(countsOut, base);\n    }\n    countsOut = SpatialHeatmapFacets.addPngToIntArray(bytes, countsOut);\n    // Test equal\n    assertEquals(counts.length, countsOut.length);\n    for (int i = 0; i < countsOut.length; i++) {\n      assertEquals(counts[i], countsOut[i] - base);//back out the base input to prove we added\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/SpatialHeatmapFacetsTest#testPng().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @Repeat(iterations = 3)\n  public void testPng() {\n    //We test via round-trip randomized data:\n\n    // Make random data\n    int columns = random().nextInt(100) + 1;\n    int rows = random().nextInt(100) + 1;\n    int[] counts = new int[columns * rows];\n    for (int i = 0; i < counts.length; i++) {\n      final int ri = random().nextInt(10);\n      if (ri >= 0 && ri <= 3) {\n        counts[i] = ri; // 0 thru 3 will be made common\n      } else if (ri > 3) {\n        counts[i] = Math.abs(random().nextInt());//lots of other possible values up to max\n      }\n    }\n    // Round-trip\n    final byte[] bytes = FacetHeatmap.asPngBytes(columns, rows, counts, null);\n    int[] countsOut = random().nextBoolean() ? new int[columns * rows] : null;\n    int base = 0;\n    if (countsOut != null) {\n      base = 9;\n      Arrays.fill(countsOut, base);\n    }\n    countsOut = FacetHeatmap.addPngToIntArray(bytes, countsOut);\n    // Test equal\n    assertEquals(counts.length, countsOut.length);\n    for (int i = 0; i < countsOut.length; i++) {\n      assertEquals(counts[i], countsOut[i] - base);//back out the base input to prove we added\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/SpatialHeatmapFacetsTest#testPng().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @Repeat(iterations = 3)\n  public void testPng() {\n    //We test via round-trip randomized data:\n\n    // Make random data\n    int columns = random().nextInt(100) + 1;\n    int rows = random().nextInt(100) + 1;\n    int[] counts = new int[columns * rows];\n    for (int i = 0; i < counts.length; i++) {\n      final int ri = random().nextInt(10);\n      if (ri >= 0 && ri <= 3) {\n        counts[i] = ri; // 0 thru 3 will be made common\n      } else if (ri > 3) {\n        counts[i] = Math.abs(random().nextInt());//lots of other possible values up to max\n      }\n    }\n    // Round-trip\n    final byte[] bytes = FacetHeatmap.asPngBytes(columns, rows, counts, null);\n    int[] countsOut = random().nextBoolean() ? new int[columns * rows] : null;\n    int base = 0;\n    if (countsOut != null) {\n      base = 9;\n      Arrays.fill(countsOut, base);\n    }\n    countsOut = FacetHeatmap.addPngToIntArray(bytes, countsOut);\n    // Test equal\n    assertEquals(counts.length, countsOut.length);\n    for (int i = 0; i < countsOut.length; i++) {\n      assertEquals(counts[i], countsOut[i] - base);//back out the base input to prove we added\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ab027bdfe663227636ccbeda13ae82add302939":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ab027bdfe663227636ccbeda13ae82add302939"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ab027bdfe663227636ccbeda13ae82add302939"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ab027bdfe663227636ccbeda13ae82add302939"]},"commit2Childs":{"2ab027bdfe663227636ccbeda13ae82add302939":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ab027bdfe663227636ccbeda13ae82add302939","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}