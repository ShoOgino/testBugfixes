{"path":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#uploadConfigSet(String,String,String,SolrZkClient).mjava","commits":[{"id":"c7612891097d4751617c396cdd7a092833799147","date":1600707827,"type":1,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#uploadConfigSet(String,String,String,SolrZkClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#uploadConfigSet(String,String,String,String,SolrZkClient).mjava","sourceNew":"  private long uploadConfigSet(String configSetName, String suffix, String username,\n      SolrZkClient zkClient) throws IOException {\n    // Read zipped sample config\n    ByteBuffer sampleZippedConfig = TestSolrConfigHandler\n        .getFileContent(\n            createTempZipFile(\"solr/configsets/upload/\"+configSetName), false);\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n    assertFalse(configManager.configExists(configSetName+suffix));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = postDataAndGetResponse(cluster.getSolrClient(),\n        cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/admin/configs?action=UPLOAD&name=\"+configSetName+suffix,\n        sampleZippedConfig, username);\n    assertNotNull(map);\n    long statusCode = (long) getObjectByPath(map, false, Arrays.asList(\"responseHeader\", \"status\"));\n    return statusCode;\n  }\n\n","sourceOld":"  private long uploadConfigSet(String configSetName, String suffix, String username, String password,\n      SolrZkClient zkClient) throws IOException {\n    // Read zipped sample config\n    ByteBuffer sampleZippedConfig = TestSolrConfigHandler\n        .getFileContent(\n            createTempZipFile(\"solr/configsets/upload/\"+configSetName), false);\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n    assertFalse(configManager.configExists(configSetName+suffix));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = postDataAndGetResponse(solrCluster.getSolrClient(),\n        solrCluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/admin/configs?action=UPLOAD&name=\"+configSetName+suffix,\n        sampleZippedConfig, username, password);\n    assertNotNull(map);\n    long statusCode = (long) getObjectByPath(map, false, Arrays.asList(\"responseHeader\", \"status\"));\n    return statusCode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0709b256ed89906e7b5f558ba1a675826f0a858f","date":1600796219,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#uploadConfigSet(String,String,String,SolrZkClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#uploadConfigSet(String,String,String,SolrZkClient).mjava","sourceNew":"  private long uploadConfigSet(String configSetName, String suffix, String username,\n                               SolrZkClient zkClient) throws IOException {\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n    assertFalse(configManager.configExists(configSetName + suffix));\n    return uploadConfigSet(configSetName, suffix, username, zkClient, false, false);\n  }\n\n","sourceOld":"  private long uploadConfigSet(String configSetName, String suffix, String username,\n      SolrZkClient zkClient) throws IOException {\n    // Read zipped sample config\n    ByteBuffer sampleZippedConfig = TestSolrConfigHandler\n        .getFileContent(\n            createTempZipFile(\"solr/configsets/upload/\"+configSetName), false);\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n    assertFalse(configManager.configExists(configSetName+suffix));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = postDataAndGetResponse(cluster.getSolrClient(),\n        cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/admin/configs?action=UPLOAD&name=\"+configSetName+suffix,\n        sampleZippedConfig, username);\n    assertNotNull(map);\n    long statusCode = (long) getObjectByPath(map, false, Arrays.asList(\"responseHeader\", \"status\"));\n    return statusCode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7612891097d4751617c396cdd7a092833799147":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0709b256ed89906e7b5f558ba1a675826f0a858f":["c7612891097d4751617c396cdd7a092833799147"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0709b256ed89906e7b5f558ba1a675826f0a858f"]},"commit2Childs":{"c7612891097d4751617c396cdd7a092833799147":["0709b256ed89906e7b5f558ba1a675826f0a858f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7612891097d4751617c396cdd7a092833799147"],"0709b256ed89906e7b5f558ba1a675826f0a858f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}