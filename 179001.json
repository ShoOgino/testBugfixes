{"path":"client/java/solrj/src/org/apache/solr/client/solrj/impl/XMLResponseParser#readNamedList(XMLStreamReader).mjava","commits":[{"id":"acdd729ace9db5d0803eea4849ddc3c2ba196127","date":1181861605,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/impl/XMLResponseParser#readNamedList(XMLStreamReader).mjava","pathOld":"/dev/null","sourceNew":"  protected NamedList<Object> readNamedList( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n\n    StringBuilder builder = new StringBuilder();\n    NamedList<Object> nl = new NamedList<Object>();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    nl.add( name, readNamedList( parser ) ); depth--; continue;\n          case ARR:    nl.add( name, readArray(     parser ) ); depth--; continue;\n          case RESULT: nl.add( name, readDocuments( parser ) ); depth--; continue;\n          case DOC:    nl.add( name, readDocument(  parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return nl;\n        }\n        //System.out.println( \"NL:ELEM:\"+type+\"::\"+name+\"::\"+builder );\n        nl.add( name, type.read( builder.toString().trim() ) );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d84c5863f7a694ee25012d7e7652b746025a4676"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da0acfe5ceed804451d76c8f887855b3d060e132","date":1208287358,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/impl/XMLResponseParser#readNamedList(XMLStreamReader).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/impl/XMLResponseParser#readNamedList(XMLStreamReader).mjava","sourceNew":"  protected NamedList<Object> readNamedList( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n\n    StringBuilder builder = new StringBuilder();\n    NamedList<Object> nl = new SimpleOrderedMap<Object>();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    nl.add( name, readNamedList( parser ) ); depth--; continue;\n          case ARR:    nl.add( name, readArray(     parser ) ); depth--; continue;\n          case RESULT: nl.add( name, readDocuments( parser ) ); depth--; continue;\n          case DOC:    nl.add( name, readDocument(  parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return nl;\n        }\n        //System.out.println( \"NL:ELEM:\"+type+\"::\"+name+\"::\"+builder );\n        nl.add( name, type.read( builder.toString().trim() ) );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> readNamedList( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n\n    StringBuilder builder = new StringBuilder();\n    NamedList<Object> nl = new NamedList<Object>();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    nl.add( name, readNamedList( parser ) ); depth--; continue;\n          case ARR:    nl.add( name, readArray(     parser ) ); depth--; continue;\n          case RESULT: nl.add( name, readDocuments( parser ) ); depth--; continue;\n          case DOC:    nl.add( name, readDocument(  parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return nl;\n        }\n        //System.out.println( \"NL:ELEM:\"+type+\"::\"+name+\"::\"+builder );\n        nl.add( name, type.read( builder.toString().trim() ) );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readNamedList(XMLStreamReader).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/impl/XMLResponseParser#readNamedList(XMLStreamReader).mjava","sourceNew":"  protected NamedList<Object> readNamedList( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n\n    StringBuilder builder = new StringBuilder();\n    NamedList<Object> nl = new SimpleOrderedMap<Object>();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    nl.add( name, readNamedList( parser ) ); depth--; continue;\n          case ARR:    nl.add( name, readArray(     parser ) ); depth--; continue;\n          case RESULT: nl.add( name, readDocuments( parser ) ); depth--; continue;\n          case DOC:    nl.add( name, readDocument(  parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return nl;\n        }\n        //System.out.println( \"NL:ELEM:\"+type+\"::\"+name+\"::\"+builder );\n        nl.add( name, type.read( builder.toString().trim() ) );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> readNamedList( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n\n    StringBuilder builder = new StringBuilder();\n    NamedList<Object> nl = new SimpleOrderedMap<Object>();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n        \n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    nl.add( name, readNamedList( parser ) ); depth--; continue;\n          case ARR:    nl.add( name, readArray(     parser ) ); depth--; continue;\n          case RESULT: nl.add( name, readDocuments( parser ) ); depth--; continue;\n          case DOC:    nl.add( name, readDocument(  parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return nl;\n        }\n        //System.out.println( \"NL:ELEM:\"+type+\"::\"+name+\"::\"+builder );\n        nl.add( name, type.read( builder.toString().trim() ) );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["da0acfe5ceed804451d76c8f887855b3d060e132"],"da0acfe5ceed804451d76c8f887855b3d060e132":["acdd729ace9db5d0803eea4849ddc3c2ba196127"],"acdd729ace9db5d0803eea4849ddc3c2ba196127":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"da0acfe5ceed804451d76c8f887855b3d060e132":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"acdd729ace9db5d0803eea4849ddc3c2ba196127":["da0acfe5ceed804451d76c8f887855b3d060e132"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["acdd729ace9db5d0803eea4849ddc3c2ba196127"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}