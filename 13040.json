{"path":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testCustomMergeScheduler().mjava","commits":[{"id":"59e018adb27395528a3a548ec731ee436c0e9169","date":1304344843,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testCustomMergeScheduler().mjava","pathOld":"/dev/null","sourceNew":"  public void testCustomMergeScheduler() throws Exception {\n    // we don't really need to execute anything, just to make sure the custom MS\n    // compiles. But ensure that it can be used as well, e.g., no other hidden\n    // dependencies or something. Therefore, don't use any random API !\n    Directory dir = new RAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setMergeScheduler(new ReportingMergeScheduler());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(new Document());\n    writer.commit(); // trigger flush\n    writer.addDocument(new Document());\n    writer.commit(); // trigger flush\n    writer.optimize();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1f0e2f00b4449f4f1fc7473a8287cb532d631e","date":1304347497,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testCustomMergeScheduler().mjava","pathOld":"/dev/null","sourceNew":"  public void testCustomMergeScheduler() throws Exception {\n    // we don't really need to execute anything, just to make sure the custom MS\n    // compiles. But ensure that it can be used as well, e.g., no other hidden\n    // dependencies or something. Therefore, don't use any random API !\n    Directory dir = new RAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setMergeScheduler(new ReportingMergeScheduler());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(new Document());\n    writer.commit(); // trigger flush\n    writer.addDocument(new Document());\n    writer.commit(); // trigger flush\n    writer.optimize();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testCustomMergeScheduler().mjava","pathOld":"/dev/null","sourceNew":"  public void testCustomMergeScheduler() throws Exception {\n    // we don't really need to execute anything, just to make sure the custom MS\n    // compiles. But ensure that it can be used as well, e.g., no other hidden\n    // dependencies or something. Therefore, don't use any random API !\n    Directory dir = new RAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setMergeScheduler(new ReportingMergeScheduler());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(new Document());\n    writer.commit(); // trigger flush\n    writer.addDocument(new Document());\n    writer.commit(); // trigger flush\n    writer.optimize();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testCustomMergeScheduler().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testCustomMergeScheduler().mjava","sourceNew":"  public void testCustomMergeScheduler() throws Exception {\n    // we don't really need to execute anything, just to make sure the custom MS\n    // compiles. But ensure that it can be used as well, e.g., no other hidden\n    // dependencies or something. Therefore, don't use any random API !\n    Directory dir = new RAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setMergeScheduler(new ReportingMergeScheduler());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(new Document());\n    writer.commit(); // trigger flush\n    writer.addDocument(new Document());\n    writer.commit(); // trigger flush\n    writer.forceMerge(1);\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCustomMergeScheduler() throws Exception {\n    // we don't really need to execute anything, just to make sure the custom MS\n    // compiles. But ensure that it can be used as well, e.g., no other hidden\n    // dependencies or something. Therefore, don't use any random API !\n    Directory dir = new RAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setMergeScheduler(new ReportingMergeScheduler());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(new Document());\n    writer.commit(); // trigger flush\n    writer.addDocument(new Document());\n    writer.commit(); // trigger flush\n    writer.optimize();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestMergeSchedulerExternal#testCustomMergeScheduler().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestMergeSchedulerExternal#testCustomMergeScheduler().mjava","sourceNew":"  public void testCustomMergeScheduler() throws Exception {\n    // we don't really need to execute anything, just to make sure the custom MS\n    // compiles. But ensure that it can be used as well, e.g., no other hidden\n    // dependencies or something. Therefore, don't use any random API !\n    Directory dir = new RAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setMergeScheduler(new ReportingMergeScheduler());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(new Document());\n    writer.commit(); // trigger flush\n    writer.addDocument(new Document());\n    writer.commit(); // trigger flush\n    writer.forceMerge(1);\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCustomMergeScheduler() throws Exception {\n    // we don't really need to execute anything, just to make sure the custom MS\n    // compiles. But ensure that it can be used as well, e.g., no other hidden\n    // dependencies or something. Therefore, don't use any random API !\n    Directory dir = new RAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setMergeScheduler(new ReportingMergeScheduler());\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(new Document());\n    writer.commit(); // trigger flush\n    writer.addDocument(new Document());\n    writer.commit(); // trigger flush\n    writer.forceMerge(1);\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59e018adb27395528a3a548ec731ee436c0e9169":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","59e018adb27395528a3a548ec731ee436c0e9169"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["59e018adb27395528a3a548ec731ee436c0e9169"],"ba1f0e2f00b4449f4f1fc7473a8287cb532d631e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","59e018adb27395528a3a548ec731ee436c0e9169"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"59e018adb27395528a3a548ec731ee436c0e9169":["a3776dccca01c11e7046323cfad46a3b4a471233","d14e8d18c0e3970c20354dbeeb49da11bd587fbd","ba1f0e2f00b4449f4f1fc7473a8287cb532d631e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59e018adb27395528a3a548ec731ee436c0e9169","a3776dccca01c11e7046323cfad46a3b4a471233","ba1f0e2f00b4449f4f1fc7473a8287cb532d631e"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ba1f0e2f00b4449f4f1fc7473a8287cb532d631e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","ba1f0e2f00b4449f4f1fc7473a8287cb532d631e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}