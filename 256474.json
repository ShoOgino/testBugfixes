{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","commits":[{"id":"8560794cda5bcd510c60e38ed553e9c5a6204983","date":1196807382,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public Token next() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.next();\n          }\n        };\n      }\n\n    }, true);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.TOKENIZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(reader.docFreq(new Term(\"content\", \"aa\")), 3);\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0","05fe562aa248790944d43cdd478f512572835ba0","5a251aa47d1808cbae42c0e172d698c377430e60","5a251aa47d1808cbae42c0e172d698c377430e60"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a251aa47d1808cbae42c0e172d698c377430e60","date":1199375390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public Token next() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.next();\n          }\n        };\n      }\n\n    }, true);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.TOKENIZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public Token next() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.next();\n          }\n        };\n      }\n\n    }, true);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.TOKENIZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(reader.docFreq(new Term(\"content\", \"aa\")), 3);\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["8560794cda5bcd510c60e38ed553e9c5a6204983"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public Token next() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.next();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.TOKENIZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public Token next() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.next();\n          }\n        };\n      }\n\n    }, true);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.TOKENIZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public Token next(final Token reusableToken) throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.next(reusableToken);\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.TOKENIZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public Token next() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.next();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.TOKENIZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public Token next(final Token reusableToken) throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.next(reusableToken);\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public Token next(final Token reusableToken) throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.next(reusableToken);\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.TOKENIZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.TOKENIZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public Token next(final Token reusableToken) throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.next(reusableToken);\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestExceptionFromTokenStream().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void xxxtestExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void xxxtestExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(Version.LUCENE_CURRENT, reader)) {\n          private int count = 0;\n\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(Version.LUCENE_CURRENT, reader)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(Version.LUCENE_CURRENT, reader)) {\n          private int count = 0;\n\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(TEST_VERSION_CURRENT, reader)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(Version.LUCENE_CURRENT, reader)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT);\n    conf.setAnalyzer(new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(TEST_VERSION_CURRENT, reader)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(TEST_VERSION_CURRENT, reader)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(TEST_VERSION_CURRENT, reader)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT);\n    conf.setAnalyzer(new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(TEST_VERSION_CURRENT, reader)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(TEST_VERSION_CURRENT, reader)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(TEST_VERSION_CURRENT, reader)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(TEST_VERSION_CURRENT, reader)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new Analyzer() {\n\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(TEST_VERSION_CURRENT, reader)) {\n          private int count = 0;\n\n          @Override\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    });\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, true);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"0a046c0c310bc77931fc8441bd920053b607dd14":["09c482d1e63332617181729a225b215c452d8a79","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["5a251aa47d1808cbae42c0e172d698c377430e60"],"ba1116b3450a9c1642c89445d131b37344055245":["0a046c0c310bc77931fc8441bd920053b607dd14"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["ba1116b3450a9c1642c89445d131b37344055245"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["09c482d1e63332617181729a225b215c452d8a79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a251aa47d1808cbae42c0e172d698c377430e60":["8560794cda5bcd510c60e38ed553e9c5a6204983"],"8560794cda5bcd510c60e38ed553e9c5a6204983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["ba1116b3450a9c1642c89445d131b37344055245"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"ba1116b3450a9c1642c89445d131b37344055245":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8560794cda5bcd510c60e38ed553e9c5a6204983"],"5a251aa47d1808cbae42c0e172d698c377430e60":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"8560794cda5bcd510c60e38ed553e9c5a6204983":["5a251aa47d1808cbae42c0e172d698c377430e60"],"09c482d1e63332617181729a225b215c452d8a79":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}