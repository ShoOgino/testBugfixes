{"path":"src/test/org/apache/lucene/search/TestSort#testOutOfOrderDocsScoringSort().mjava","commits":[{"id":"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc","date":1241865401,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testOutOfOrderDocsScoringSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testOutOfOrderDocsScoringSort() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    boolean[][] tfcOptions = new boolean[][] {\n        new boolean[] { false, false, false },\n        new boolean[] { false, false, true },\n        new boolean[] { false, true, false },\n        new boolean[] { false, true, true },\n        new boolean[] { true, false, false },\n        new boolean[] { true, false, true },\n        new boolean[] { true, true, false },\n        new boolean[] { true, true, true },\n    };\n    String[] actualTFCClasses = new String[] {\n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\" \n    };\n    \n    // Save the original value to set later.\n    boolean origVal = BooleanQuery.getAllowDocsOutOfOrder();\n    \n    BooleanQuery.setAllowDocsOutOfOrder(true);\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    try {\n      for (int i = 0; i < sort.length; i++) {\n        for (int j = 0; j < tfcOptions.length; j++) {\n          TopDocsCollector tdc = TopFieldCollector.create(sort[i], 10,\n              tfcOptions[j][0], tfcOptions[j][1], tfcOptions[j][2], false);\n\n          assertEquals(actualTFCClasses[j], tdc.getClass().getSimpleName());\n          \n          full.search(bq, tdc);\n          \n          TopDocs td = tdc.topDocs();\n          ScoreDoc[] sd = td.scoreDocs;\n          assertEquals(10, sd.length);\n        }\n      }\n    } finally {\n      // Whatever happens, reset BooleanQuery.allowDocsOutOfOrder to the\n      // original value. Don't set it to false in case the implementation in BQ\n      // will change some day.\n      BooleanQuery.setAllowDocsOutOfOrder(origVal);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8ee2f99356e7a59e7ef4b32ca9bed77caed7779d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8ee2f99356e7a59e7ef4b32ca9bed77caed7779d","date":1243112403,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testOutOfOrderDocsScoringSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testOutOfOrderDocsScoringSort().mjava","sourceNew":"  public void testOutOfOrderDocsScoringSort() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    boolean[][] tfcOptions = new boolean[][] {\n        new boolean[] { false, false, false },\n        new boolean[] { false, false, true },\n        new boolean[] { false, true, false },\n        new boolean[] { false, true, true },\n        new boolean[] { true, false, false },\n        new boolean[] { true, false, true },\n        new boolean[] { true, true, false },\n        new boolean[] { true, true, true },\n    };\n    String[] actualTFCClasses = new String[] {\n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\" \n    };\n    \n    // Save the original value to set later.\n    boolean origVal = BooleanQuery.getAllowDocsOutOfOrder();\n    \n    BooleanQuery.setAllowDocsOutOfOrder(true);\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    try {\n      for (int i = 0; i < sort.length; i++) {\n        for (int j = 0; j < tfcOptions.length; j++) {\n          TopDocsCollector tdc = TopFieldCollector.create(sort[i], 10,\n              tfcOptions[j][0], tfcOptions[j][1], tfcOptions[j][2], false);\n\n          assertTrue(tdc.getClass().getName().endsWith(\"$\"+actualTFCClasses[j]));\n          \n          full.search(bq, tdc);\n          \n          TopDocs td = tdc.topDocs();\n          ScoreDoc[] sd = td.scoreDocs;\n          assertEquals(10, sd.length);\n        }\n      }\n    } finally {\n      // Whatever happens, reset BooleanQuery.allowDocsOutOfOrder to the\n      // original value. Don't set it to false in case the implementation in BQ\n      // will change some day.\n      BooleanQuery.setAllowDocsOutOfOrder(origVal);\n    }\n\n  }\n\n","sourceOld":"  public void testOutOfOrderDocsScoringSort() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    boolean[][] tfcOptions = new boolean[][] {\n        new boolean[] { false, false, false },\n        new boolean[] { false, false, true },\n        new boolean[] { false, true, false },\n        new boolean[] { false, true, true },\n        new boolean[] { true, false, false },\n        new boolean[] { true, false, true },\n        new boolean[] { true, true, false },\n        new boolean[] { true, true, true },\n    };\n    String[] actualTFCClasses = new String[] {\n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\" \n    };\n    \n    // Save the original value to set later.\n    boolean origVal = BooleanQuery.getAllowDocsOutOfOrder();\n    \n    BooleanQuery.setAllowDocsOutOfOrder(true);\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    try {\n      for (int i = 0; i < sort.length; i++) {\n        for (int j = 0; j < tfcOptions.length; j++) {\n          TopDocsCollector tdc = TopFieldCollector.create(sort[i], 10,\n              tfcOptions[j][0], tfcOptions[j][1], tfcOptions[j][2], false);\n\n          assertEquals(actualTFCClasses[j], tdc.getClass().getSimpleName());\n          \n          full.search(bq, tdc);\n          \n          TopDocs td = tdc.topDocs();\n          ScoreDoc[] sd = td.scoreDocs;\n          assertEquals(10, sd.length);\n        }\n      }\n    } finally {\n      // Whatever happens, reset BooleanQuery.allowDocsOutOfOrder to the\n      // original value. Don't set it to false in case the implementation in BQ\n      // will change some day.\n      BooleanQuery.setAllowDocsOutOfOrder(origVal);\n    }\n\n  }\n\n","bugFix":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"131a9e895609b4da33662dc087e0bc6303e1e29c","date":1255458397,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testOutOfOrderDocsScoringSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testOutOfOrderDocsScoringSort().mjava","sourceNew":"  public void testOutOfOrderDocsScoringSort() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    boolean[][] tfcOptions = new boolean[][] {\n        new boolean[] { false, false, false },\n        new boolean[] { false, false, true },\n        new boolean[] { false, true, false },\n        new boolean[] { false, true, true },\n        new boolean[] { true, false, false },\n        new boolean[] { true, false, true },\n        new boolean[] { true, true, false },\n        new boolean[] { true, true, true },\n    };\n    String[] actualTFCClasses = new String[] {\n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    for (int i = 0; i < sort.length; i++) {\n      for (int j = 0; j < tfcOptions.length; j++) {\n        TopDocsCollector tdc = TopFieldCollector.create(sort[i], 10,\n            tfcOptions[j][0], tfcOptions[j][1], tfcOptions[j][2], false);\n\n        assertTrue(tdc.getClass().getName().endsWith(\"$\"+actualTFCClasses[j]));\n        \n        full.search(bq, tdc);\n        \n        TopDocs td = tdc.topDocs();\n        ScoreDoc[] sd = td.scoreDocs;\n        assertEquals(10, sd.length);\n      }\n    }\n  }\n\n","sourceOld":"  public void testOutOfOrderDocsScoringSort() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    boolean[][] tfcOptions = new boolean[][] {\n        new boolean[] { false, false, false },\n        new boolean[] { false, false, true },\n        new boolean[] { false, true, false },\n        new boolean[] { false, true, true },\n        new boolean[] { true, false, false },\n        new boolean[] { true, false, true },\n        new boolean[] { true, true, false },\n        new boolean[] { true, true, true },\n    };\n    String[] actualTFCClasses = new String[] {\n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\" \n    };\n    \n    // Save the original value to set later.\n    boolean origVal = BooleanQuery.getAllowDocsOutOfOrder();\n    \n    BooleanQuery.setAllowDocsOutOfOrder(true);\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    try {\n      for (int i = 0; i < sort.length; i++) {\n        for (int j = 0; j < tfcOptions.length; j++) {\n          TopDocsCollector tdc = TopFieldCollector.create(sort[i], 10,\n              tfcOptions[j][0], tfcOptions[j][1], tfcOptions[j][2], false);\n\n          assertTrue(tdc.getClass().getName().endsWith(\"$\"+actualTFCClasses[j]));\n          \n          full.search(bq, tdc);\n          \n          TopDocs td = tdc.topDocs();\n          ScoreDoc[] sd = td.scoreDocs;\n          assertEquals(10, sd.length);\n        }\n      }\n    } finally {\n      // Whatever happens, reset BooleanQuery.allowDocsOutOfOrder to the\n      // original value. Don't set it to false in case the implementation in BQ\n      // will change some day.\n      BooleanQuery.setAllowDocsOutOfOrder(origVal);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testOutOfOrderDocsScoringSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testOutOfOrderDocsScoringSort().mjava","sourceNew":"  public void testOutOfOrderDocsScoringSort() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    boolean[][] tfcOptions = new boolean[][] {\n        new boolean[] { false, false, false },\n        new boolean[] { false, false, true },\n        new boolean[] { false, true, false },\n        new boolean[] { false, true, true },\n        new boolean[] { true, false, false },\n        new boolean[] { true, false, true },\n        new boolean[] { true, true, false },\n        new boolean[] { true, true, true },\n    };\n    String[] actualTFCClasses = new String[] {\n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    for (int i = 0; i < sort.length; i++) {\n      for (int j = 0; j < tfcOptions.length; j++) {\n        TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10,\n            tfcOptions[j][0], tfcOptions[j][1], tfcOptions[j][2], false);\n\n        assertTrue(tdc.getClass().getName().endsWith(\"$\"+actualTFCClasses[j]));\n        \n        full.search(bq, tdc);\n        \n        TopDocs td = tdc.topDocs();\n        ScoreDoc[] sd = td.scoreDocs;\n        assertEquals(10, sd.length);\n      }\n    }\n  }\n\n","sourceOld":"  public void testOutOfOrderDocsScoringSort() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    boolean[][] tfcOptions = new boolean[][] {\n        new boolean[] { false, false, false },\n        new boolean[] { false, false, true },\n        new boolean[] { false, true, false },\n        new boolean[] { false, true, true },\n        new boolean[] { true, false, false },\n        new boolean[] { true, false, true },\n        new boolean[] { true, true, false },\n        new boolean[] { true, true, true },\n    };\n    String[] actualTFCClasses = new String[] {\n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    for (int i = 0; i < sort.length; i++) {\n      for (int j = 0; j < tfcOptions.length; j++) {\n        TopDocsCollector tdc = TopFieldCollector.create(sort[i], 10,\n            tfcOptions[j][0], tfcOptions[j][1], tfcOptions[j][2], false);\n\n        assertTrue(tdc.getClass().getName().endsWith(\"$\"+actualTFCClasses[j]));\n        \n        full.search(bq, tdc);\n        \n        TopDocs td = tdc.topDocs();\n        ScoreDoc[] sd = td.scoreDocs;\n        assertEquals(10, sd.length);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testOutOfOrderDocsScoringSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testOutOfOrderDocsScoringSort().mjava","sourceNew":"  public void testOutOfOrderDocsScoringSort() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    boolean[][] tfcOptions = new boolean[][] {\n        new boolean[] { false, false, false },\n        new boolean[] { false, false, true },\n        new boolean[] { false, true, false },\n        new boolean[] { false, true, true },\n        new boolean[] { true, false, false },\n        new boolean[] { true, false, true },\n        new boolean[] { true, true, false },\n        new boolean[] { true, true, true },\n    };\n    String[] actualTFCClasses = new String[] {\n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    for (int i = 0; i < sort.length; i++) {\n      for (int j = 0; j < tfcOptions.length; j++) {\n        TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10,\n            tfcOptions[j][0], tfcOptions[j][1], tfcOptions[j][2], false);\n\n        assertTrue(tdc.getClass().getName().endsWith(\"$\"+actualTFCClasses[j]));\n        \n        full.search(bq, tdc);\n        \n        TopDocs td = tdc.topDocs();\n        ScoreDoc[] sd = td.scoreDocs;\n        assertEquals(10, sd.length);\n      }\n    }\n  }\n\n","sourceOld":"  public void testOutOfOrderDocsScoringSort() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    boolean[][] tfcOptions = new boolean[][] {\n        new boolean[] { false, false, false },\n        new boolean[] { false, false, true },\n        new boolean[] { false, true, false },\n        new boolean[] { false, true, true },\n        new boolean[] { true, false, false },\n        new boolean[] { true, false, true },\n        new boolean[] { true, true, false },\n        new boolean[] { true, true, true },\n    };\n    String[] actualTFCClasses = new String[] {\n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    for (int i = 0; i < sort.length; i++) {\n      for (int j = 0; j < tfcOptions.length; j++) {\n        TopDocsCollector<Entry> tdc = TopFieldCollector.create(sort[i], 10,\n            tfcOptions[j][0], tfcOptions[j][1], tfcOptions[j][2], false);\n\n        assertTrue(tdc.getClass().getName().endsWith(\"$\"+actualTFCClasses[j]));\n        \n        full.search(bq, tdc);\n        \n        TopDocs td = tdc.topDocs();\n        ScoreDoc[] sd = td.scoreDocs;\n        assertEquals(10, sd.length);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8ee2f99356e7a59e7ef4b32ca9bed77caed7779d":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"131a9e895609b4da33662dc087e0bc6303e1e29c":["8ee2f99356e7a59e7ef4b32ca9bed77caed7779d"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["131a9e895609b4da33662dc087e0bc6303e1e29c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["8ee2f99356e7a59e7ef4b32ca9bed77caed7779d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"8ee2f99356e7a59e7ef4b32ca9bed77caed7779d":["131a9e895609b4da33662dc087e0bc6303e1e29c"],"131a9e895609b4da33662dc087e0bc6303e1e29c":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}