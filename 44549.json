{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetsStatsParsing#testVerboseSyntaxWithLocalParams().mjava","commits":[{"id":"d3baf591292785743bfb1fdd65256a3fe5feab71","date":1532454229,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetsStatsParsing#testVerboseSyntaxWithLocalParams().mjava","pathOld":"/dev/null","sourceNew":"  public void testVerboseSyntaxWithLocalParams() throws IOException {\n    // some parsers may choose to use \"global\" req params as defaults/shadows for\n    // local params, but DebugAgg does not -- so use these to test that the\n    // JSON Parsing doesn't pollute the local params the ValueSourceParser gets...\n    try (SolrQueryRequest req = req(\"foo\", \"zzzz\", \"yaz\", \"zzzzz\")) { \n      final FacetRequest fr = FacetRequest.parse\n        (req, (Map<String,Object>) ObjectBuilder.fromJSON\n         (\"{ x:{type:func, func:'debug()', foo:['abc','xyz'], bar:4.2 } }\"));\n\n      final Map<String, AggValueSource> stats = fr.getFacetStats();\n      assertEquals(1, stats.size());\n      AggValueSource agg = stats.get(\"x\");\n      assertNotNull(agg);\n      assertThat(agg, instanceOf(DebugAgg.class));\n      \n      DebugAgg x = (DebugAgg)agg;\n      assertEquals(new String[] {\"abc\", \"xyz\"}, x.localParams.getParams(\"foo\"));\n      assertEquals((Float)4.2F, x.localParams.getFloat(\"bar\"));\n      assertNull(x.localParams.get(\"yaz\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetsStatsParsing#testVerboseSyntaxWithLocalParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetsStatsParsing#testVerboseSyntaxWithLocalParams().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testVerboseSyntaxWithLocalParams() throws IOException {\n    // some parsers may choose to use \"global\" req params as defaults/shadows for\n    // local params, but DebugAgg does not -- so use these to test that the\n    // JSON Parsing doesn't pollute the local params the ValueSourceParser gets...\n    try (SolrQueryRequest req = req(\"foo\", \"zzzz\", \"yaz\", \"zzzzz\")) { \n      final FacetRequest fr = FacetRequest.parse\n        (req, (Map<String,Object>) ObjectBuilder.fromJSON\n         (\"{ x:{type:func, func:'debug()', foo:['abc','xyz'], bar:4.2 } }\"));\n\n      final Map<String, AggValueSource> stats = fr.getFacetStats();\n      assertEquals(1, stats.size());\n      AggValueSource agg = stats.get(\"x\");\n      assertNotNull(agg);\n      assertThat(agg, instanceOf(DebugAgg.class));\n      \n      DebugAgg x = (DebugAgg)agg;\n      assertEquals(new String[] {\"abc\", \"xyz\"}, x.localParams.getParams(\"foo\"));\n      assertEquals((Float)4.2F, x.localParams.getFloat(\"bar\"));\n      assertNull(x.localParams.get(\"yaz\"));\n    }\n  }\n\n","sourceOld":"  public void testVerboseSyntaxWithLocalParams() throws IOException {\n    // some parsers may choose to use \"global\" req params as defaults/shadows for\n    // local params, but DebugAgg does not -- so use these to test that the\n    // JSON Parsing doesn't pollute the local params the ValueSourceParser gets...\n    try (SolrQueryRequest req = req(\"foo\", \"zzzz\", \"yaz\", \"zzzzz\")) { \n      final FacetRequest fr = FacetRequest.parse\n        (req, (Map<String,Object>) ObjectBuilder.fromJSON\n         (\"{ x:{type:func, func:'debug()', foo:['abc','xyz'], bar:4.2 } }\"));\n\n      final Map<String, AggValueSource> stats = fr.getFacetStats();\n      assertEquals(1, stats.size());\n      AggValueSource agg = stats.get(\"x\");\n      assertNotNull(agg);\n      assertThat(agg, instanceOf(DebugAgg.class));\n      \n      DebugAgg x = (DebugAgg)agg;\n      assertEquals(new String[] {\"abc\", \"xyz\"}, x.localParams.getParams(\"foo\"));\n      assertEquals((Float)4.2F, x.localParams.getFloat(\"bar\"));\n      assertNull(x.localParams.get(\"yaz\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d3baf591292785743bfb1fdd65256a3fe5feab71":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["d3baf591292785743bfb1fdd65256a3fe5feab71"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3baf591292785743bfb1fdd65256a3fe5feab71"],"d3baf591292785743bfb1fdd65256a3fe5feab71":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}