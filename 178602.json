{"path":"solr/core/src/test/org/apache/solr/request/macro/TestMacroExpander#testMapExprExpandOn().mjava","commits":[{"id":"a0370d6fb5289875090a50a9d0887ee584fed440","date":1552401990,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/macro/TestMacroExpander#testMapExprExpandOn().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMapExprExpandOn() {\n    final Map<String,String[]> request = new HashMap<>();\n    request.put(\"fq\", new String[] {\"zero\", \"${one_ref}\", \"two\", \"${three_ref}\"});\n    request.put(\"expr\", new String[] {\"${one_ref}\"}); // expr is for streaming expressions, no replacement by default\n    request.put(\"one_ref\",new String[] {\"one\"});\n    request.put(\"three_ref\",new String[] {\"three\"});\n    // I believe that so long as this is sure to be reset before the end of the test we should\n    // be fine with respect to other tests.\n    String oldVal = System.getProperty(\"StreamingExpressionMacros\",\"false\");\n    System.setProperty(\"StreamingExpressionMacros\", \"true\");\n    try {\n      Map expanded = MacroExpander.expand(request);\n      assertEquals(\"zero\", ((String[])expanded.get(\"fq\"))[0]);\n      assertEquals(\"one\", ((String[])expanded.get(\"fq\"))[1]);\n      assertEquals(\"two\", ((String[]) expanded.get(\"fq\"))[2]);\n      assertEquals(\"three\", ((String[]) expanded.get(\"fq\"))[3]);\n      assertEquals(\"one\", ((String[])expanded.get(\"expr\"))[0]);\n    } finally {\n      System.setProperty(\"StreamingExpressionMacros\", oldVal);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b603d25269568087504c2caeb6f72834699ffdbd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/macro/TestMacroExpander#testMapExprExpandOn().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/macro/TestMacroExpander#testMapExprExpandOn().mjava","sourceNew":"  @Test\n  public void testMapExprExpandOn() {\n    final Map<String,String[]> request = new HashMap<>();\n    request.put(\"fq\", new String[] {\"zero\", \"${one_ref}\", \"two\", \"${three_ref}\"});\n    request.put(\"expr\", new String[] {\"${one_ref}\"}); // expr is for streaming expressions, no replacement by default\n    request.put(\"one_ref\",new String[] {\"one\"});\n    request.put(\"three_ref\",new String[] {\"three\"});\n    // I believe that so long as this is sure to be reset before the end of the test we should\n    // be fine with respect to other tests.\n    String oldVal = System.getProperty(\"StreamingExpressionMacros\",\"false\");\n    System.setProperty(\"StreamingExpressionMacros\", \"true\");\n    try {\n      @SuppressWarnings({\"rawtypes\"})\n      Map expanded = MacroExpander.expand(request);\n      assertEquals(\"zero\", ((String[])expanded.get(\"fq\"))[0]);\n      assertEquals(\"one\", ((String[])expanded.get(\"fq\"))[1]);\n      assertEquals(\"two\", ((String[]) expanded.get(\"fq\"))[2]);\n      assertEquals(\"three\", ((String[]) expanded.get(\"fq\"))[3]);\n      assertEquals(\"one\", ((String[])expanded.get(\"expr\"))[0]);\n    } finally {\n      System.setProperty(\"StreamingExpressionMacros\", oldVal);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMapExprExpandOn() {\n    final Map<String,String[]> request = new HashMap<>();\n    request.put(\"fq\", new String[] {\"zero\", \"${one_ref}\", \"two\", \"${three_ref}\"});\n    request.put(\"expr\", new String[] {\"${one_ref}\"}); // expr is for streaming expressions, no replacement by default\n    request.put(\"one_ref\",new String[] {\"one\"});\n    request.put(\"three_ref\",new String[] {\"three\"});\n    // I believe that so long as this is sure to be reset before the end of the test we should\n    // be fine with respect to other tests.\n    String oldVal = System.getProperty(\"StreamingExpressionMacros\",\"false\");\n    System.setProperty(\"StreamingExpressionMacros\", \"true\");\n    try {\n      Map expanded = MacroExpander.expand(request);\n      assertEquals(\"zero\", ((String[])expanded.get(\"fq\"))[0]);\n      assertEquals(\"one\", ((String[])expanded.get(\"fq\"))[1]);\n      assertEquals(\"two\", ((String[]) expanded.get(\"fq\"))[2]);\n      assertEquals(\"three\", ((String[]) expanded.get(\"fq\"))[3]);\n      assertEquals(\"one\", ((String[])expanded.get(\"expr\"))[0]);\n    } finally {\n      System.setProperty(\"StreamingExpressionMacros\", oldVal);\n    }\n  }\n\n","bugFix":null,"bugIntro":["b603d25269568087504c2caeb6f72834699ffdbd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b603d25269568087504c2caeb6f72834699ffdbd","date":1600804019,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/macro/TestMacroExpander#testMapExprExpandOn().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/macro/TestMacroExpander#testMapExprExpandOn().mjava","sourceNew":"  @Test\n  public void testMapExprExpandOn() {\n    final Map<String,String[]> request = new HashMap<>();\n    request.put(\"fq\", new String[] {\"zero\", \"${one_ref}\", \"two\", \"${three_ref}\"});\n    request.put(\"expr\", new String[] {\"${one_ref}\"}); // expr is for streaming expressions, no replacement by default\n    request.put(\"one_ref\",new String[] {\"one\"});\n    request.put(\"three_ref\",new String[] {\"three\"});\n    // I believe that so long as this is sure to be reset before the end of the test we should\n    // be fine with respect to other tests.\n    String oldVal = System.getProperty(\"StreamingExpressionMacros\",\"false\");\n    System.setProperty(\"StreamingExpressionMacros\", \"true\");\n    try {\n      Map<String, String[]> expanded = MacroExpander.expand(request);\n      assertEquals(\"zero\", expanded.get(\"fq\")[0]);\n      assertEquals(\"one\", expanded.get(\"fq\")[1]);\n      assertEquals(\"two\", expanded.get(\"fq\")[2]);\n      assertEquals(\"three\", expanded.get(\"fq\")[3]);\n      assertEquals(\"one\", expanded.get(\"expr\")[0]);\n    } finally {\n      System.setProperty(\"StreamingExpressionMacros\", oldVal);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMapExprExpandOn() {\n    final Map<String,String[]> request = new HashMap<>();\n    request.put(\"fq\", new String[] {\"zero\", \"${one_ref}\", \"two\", \"${three_ref}\"});\n    request.put(\"expr\", new String[] {\"${one_ref}\"}); // expr is for streaming expressions, no replacement by default\n    request.put(\"one_ref\",new String[] {\"one\"});\n    request.put(\"three_ref\",new String[] {\"three\"});\n    // I believe that so long as this is sure to be reset before the end of the test we should\n    // be fine with respect to other tests.\n    String oldVal = System.getProperty(\"StreamingExpressionMacros\",\"false\");\n    System.setProperty(\"StreamingExpressionMacros\", \"true\");\n    try {\n      @SuppressWarnings({\"rawtypes\"})\n      Map expanded = MacroExpander.expand(request);\n      assertEquals(\"zero\", ((String[])expanded.get(\"fq\"))[0]);\n      assertEquals(\"one\", ((String[])expanded.get(\"fq\"))[1]);\n      assertEquals(\"two\", ((String[]) expanded.get(\"fq\"))[2]);\n      assertEquals(\"three\", ((String[]) expanded.get(\"fq\"))[3]);\n      assertEquals(\"one\", ((String[])expanded.get(\"expr\"))[0]);\n    } finally {\n      System.setProperty(\"StreamingExpressionMacros\", oldVal);\n    }\n  }\n\n","bugFix":["aa2585c33d5d66a1c837c312221eb55ddb3c4300","a0370d6fb5289875090a50a9d0887ee584fed440"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["a0370d6fb5289875090a50a9d0887ee584fed440"],"b603d25269568087504c2caeb6f72834699ffdbd":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0370d6fb5289875090a50a9d0887ee584fed440":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b603d25269568087504c2caeb6f72834699ffdbd"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["b603d25269568087504c2caeb6f72834699ffdbd"],"b603d25269568087504c2caeb6f72834699ffdbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0370d6fb5289875090a50a9d0887ee584fed440":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0370d6fb5289875090a50a9d0887ee584fed440"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}