{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestWrapperModel#testDelegateMethods().mjava","commits":[{"id":"a03034a121f635bebacef74693404e3273b614a6","date":1511880957,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestWrapperModel#testDelegateMethods().mjava","pathOld":"/dev/null","sourceNew":"  private int testDelegateMethods() throws Exception {\n    int methodCount = 0;\n    WrapperModel wrapperModel = Mockito.spy(new StubWrapperModel(\"testModel\"));\n\n    // ignore validate in this test case\n    Mockito.doNothing().when(wrapperModel).validate();\n    ++methodCount;\n\n    LTRScoringModel wrappedModel = Mockito.mock(LTRScoringModel.class);\n    wrapperModel.updateModel(wrappedModel);\n\n    // cannot be stubbed or verified\n    ++methodCount; // toString\n    ++methodCount; // hashCode\n    ++methodCount; // equals\n\n    // getFeatureStoreName : not delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getFeatureStoreName();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(0)).getFeatureStoreName();\n\n    // getName : not delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getName();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(0)).getName();\n\n    // getParams : not delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getParams();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(0)).getParams();\n\n    // getNorms : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getNorms();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).getNorms();\n\n    // getFeatures : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getFeatures();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).getFeatures();\n\n    // getAllFeatures : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getAllFeatures();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).getAllFeatures();\n\n    // score : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.score(null);\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).score(null);\n\n    // normalizeFeaturesInPlace : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.normalizeFeaturesInPlace(null);\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).normalizeFeaturesInPlace(null);\n\n    // getNormalizerExplanation : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getNormalizerExplanation(null, 0);\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).getNormalizerExplanation(null, 0);\n\n    // explain : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.explain(null, 0, 0.0f, null);\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).explain(null, 0, 0.0f, null);\n\n    return methodCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestWrapperModel#testDelegateMethods().mjava","pathOld":"/dev/null","sourceNew":"  private int testDelegateMethods() throws Exception {\n    int methodCount = 0;\n    WrapperModel wrapperModel = Mockito.spy(new StubWrapperModel(\"testModel\"));\n\n    // ignore validate in this test case\n    Mockito.doNothing().when(wrapperModel).validate();\n    ++methodCount;\n\n    LTRScoringModel wrappedModel = Mockito.mock(LTRScoringModel.class);\n    wrapperModel.updateModel(wrappedModel);\n\n    // cannot be stubbed or verified\n    ++methodCount; // toString\n    ++methodCount; // hashCode\n    ++methodCount; // equals\n\n    // getFeatureStoreName : not delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getFeatureStoreName();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(0)).getFeatureStoreName();\n\n    // getName : not delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getName();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(0)).getName();\n\n    // getParams : not delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getParams();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(0)).getParams();\n\n    // getNorms : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getNorms();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).getNorms();\n\n    // getFeatures : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getFeatures();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).getFeatures();\n\n    // getAllFeatures : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getAllFeatures();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).getAllFeatures();\n\n    // score : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.score(null);\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).score(null);\n\n    // normalizeFeaturesInPlace : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.normalizeFeaturesInPlace(null);\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).normalizeFeaturesInPlace(null);\n\n    // getNormalizerExplanation : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getNormalizerExplanation(null, 0);\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).getNormalizerExplanation(null, 0);\n\n    // explain : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.explain(null, 0, 0.0f, null);\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).explain(null, 0, 0.0f, null);\n\n    return methodCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"863844147db48c47a7419ce313d7b83bd575ccc8","date":1562177866,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestWrapperModel#testDelegateMethods().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestWrapperModel#testDelegateMethods().mjava","sourceNew":"  private int testDelegateMethods() throws Exception {\n    int methodCount = 0;\n    WrapperModel wrapperModel = Mockito.spy(new StubWrapperModel(\"testModel\"));\n\n    // ignore validate in this test case\n    Mockito.doNothing().when(wrapperModel).validate();\n    ++methodCount;\n\n    LTRScoringModel wrappedModel = Mockito.mock(LTRScoringModel.class);\n    wrapperModel.updateModel(wrappedModel);\n\n    // cannot be stubbed or verified\n    ++methodCount; // toString\n    ++methodCount; // hashCode\n    ++methodCount; // equals\n\n    // getFeatureStoreName : not delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getFeatureStoreName();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(0)).getFeatureStoreName();\n\n    // getName : not delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getName();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(0)).getName();\n\n    // getParams : not delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getParams();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(0)).getParams();\n\n    // getNorms : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getNorms();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).getNorms();\n\n    // ramBytesUseD() : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.ramBytesUsed();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).ramBytesUsed();\n\n    // getFeatures : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getFeatures();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).getFeatures();\n\n    // getAllFeatures : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getAllFeatures();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).getAllFeatures();\n\n    // score : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.score(null);\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).score(null);\n\n    // normalizeFeaturesInPlace : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.normalizeFeaturesInPlace(null);\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).normalizeFeaturesInPlace(null);\n\n    // getNormalizerExplanation : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getNormalizerExplanation(null, 0);\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).getNormalizerExplanation(null, 0);\n\n    // explain : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.explain(null, 0, 0.0f, null);\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).explain(null, 0, 0.0f, null);\n\n    return methodCount;\n  }\n\n","sourceOld":"  private int testDelegateMethods() throws Exception {\n    int methodCount = 0;\n    WrapperModel wrapperModel = Mockito.spy(new StubWrapperModel(\"testModel\"));\n\n    // ignore validate in this test case\n    Mockito.doNothing().when(wrapperModel).validate();\n    ++methodCount;\n\n    LTRScoringModel wrappedModel = Mockito.mock(LTRScoringModel.class);\n    wrapperModel.updateModel(wrappedModel);\n\n    // cannot be stubbed or verified\n    ++methodCount; // toString\n    ++methodCount; // hashCode\n    ++methodCount; // equals\n\n    // getFeatureStoreName : not delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getFeatureStoreName();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(0)).getFeatureStoreName();\n\n    // getName : not delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getName();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(0)).getName();\n\n    // getParams : not delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getParams();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(0)).getParams();\n\n    // getNorms : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getNorms();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).getNorms();\n\n    // getFeatures : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getFeatures();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).getFeatures();\n\n    // getAllFeatures : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getAllFeatures();\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).getAllFeatures();\n\n    // score : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.score(null);\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).score(null);\n\n    // normalizeFeaturesInPlace : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.normalizeFeaturesInPlace(null);\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).normalizeFeaturesInPlace(null);\n\n    // getNormalizerExplanation : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.getNormalizerExplanation(null, 0);\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).getNormalizerExplanation(null, 0);\n\n    // explain : delegate\n    Mockito.reset(wrappedModel);\n    wrapperModel.explain(null, 0, 0.0f, null);\n    ++methodCount;\n    Mockito.verify(wrappedModel, Mockito.times(1)).explain(null, 0, 0.0f, null);\n\n    return methodCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a03034a121f635bebacef74693404e3273b614a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"863844147db48c47a7419ce313d7b83bd575ccc8":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"a03034a121f635bebacef74693404e3273b614a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["863844147db48c47a7419ce313d7b83bd575ccc8"]},"commit2Childs":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["863844147db48c47a7419ce313d7b83bd575ccc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1aad05eeff7818b0833c02ac6b743aa72054963b","a03034a121f635bebacef74693404e3273b614a6"],"863844147db48c47a7419ce313d7b83bd575ccc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a03034a121f635bebacef74693404e3273b614a6":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}