{"path":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#assertBeforeAfterBetween(EnumSet[FacetRangeOther],ModelRange,ModelRange,ModelRange,Integer,NamedList[Object]).mjava","commits":[{"id":"c05b634713ca09b2267477408773904d4c69dd9d","date":1530894845,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#assertBeforeAfterBetween(EnumSet[FacetRangeOther],ModelRange,ModelRange,ModelRange,Integer,NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A convinience method for calling {@link #assertBucket} on the before/after/between buckets \n   * of a facet result, based on the {@link FacetRangeOther} specified for this facet.\n   * \n   * @see #assertBucket\n   * @see #buildListOfFacetRangeOtherOptions \n   */\n  private static void assertBeforeAfterBetween(final EnumSet<FacetRangeOther> other,\n                                               final ModelRange before,\n                                               final ModelRange after,\n                                               final ModelRange between,\n                                               final Integer subFacetLimitUsed,\n                                               final NamedList<Object> facet) {\n    //final String[] names = new String[] { \"before\", \"after\", \"between\" };\n    assertEquals(3, BEFORE_AFTER_BETWEEN.size());\n    final ModelRange[] expected = new ModelRange[] { before, after, between };\n    for (int i = 0; i < 3; i++) {\n      FacetRangeOther key = BEFORE_AFTER_BETWEEN.get(i);\n      String name = key.toString();\n      if (other.contains(key) || other.contains(FacetRangeOther.ALL)) {\n        assertBucket(name, null, expected[i], subFacetLimitUsed, facet.get(name));\n      } else {\n        assertNull(\"unexpected other=\" + name, facet.get(name));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#assertBeforeAfterBetween(EnumSet[FacetRangeOther],ModelRange,ModelRange,ModelRange,Integer,NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A convinience method for calling {@link #assertBucket} on the before/after/between buckets \n   * of a facet result, based on the {@link FacetRangeOther} specified for this facet.\n   * \n   * @see #assertBucket\n   * @see #buildListOfFacetRangeOtherOptions \n   */\n  private static void assertBeforeAfterBetween(final EnumSet<FacetRangeOther> other,\n                                               final ModelRange before,\n                                               final ModelRange after,\n                                               final ModelRange between,\n                                               final Integer subFacetLimitUsed,\n                                               final NamedList<Object> facet) {\n    //final String[] names = new String[] { \"before\", \"after\", \"between\" };\n    assertEquals(3, BEFORE_AFTER_BETWEEN.size());\n    final ModelRange[] expected = new ModelRange[] { before, after, between };\n    for (int i = 0; i < 3; i++) {\n      FacetRangeOther key = BEFORE_AFTER_BETWEEN.get(i);\n      String name = key.toString();\n      if (other.contains(key) || other.contains(FacetRangeOther.ALL)) {\n        assertBucket(name, null, expected[i], subFacetLimitUsed, facet.get(name));\n      } else {\n        assertNull(\"unexpected other=\" + name, facet.get(name));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#assertBeforeAfterBetween(EnumSet[FacetRangeOther],ModelRange,ModelRange,ModelRange,Integer,NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A convinience method for calling {@link #assertBucket} on the before/after/between buckets \n   * of a facet result, based on the {@link FacetRangeOther} specified for this facet.\n   * \n   * @see #assertBucket\n   * @see #buildListOfFacetRangeOtherOptions \n   */\n  private static void assertBeforeAfterBetween(final EnumSet<FacetRangeOther> other,\n                                               final ModelRange before,\n                                               final ModelRange after,\n                                               final ModelRange between,\n                                               final Integer subFacetLimitUsed,\n                                               final NamedList<Object> facet) {\n    //final String[] names = new String[] { \"before\", \"after\", \"between\" };\n    assertEquals(3, BEFORE_AFTER_BETWEEN.size());\n    final ModelRange[] expected = new ModelRange[] { before, after, between };\n    for (int i = 0; i < 3; i++) {\n      FacetRangeOther key = BEFORE_AFTER_BETWEEN.get(i);\n      String name = key.toString();\n      if (other.contains(key) || other.contains(FacetRangeOther.ALL)) {\n        assertBucket(name, null, expected[i], subFacetLimitUsed, facet.get(name));\n      } else {\n        assertNull(\"unexpected other=\" + name, facet.get(name));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45","date":1569046571,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#assertBeforeAfterBetween(EnumSet[FacetRangeOther],ModelRange,ModelRange,ModelRange,Integer,NamedList[Object]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#assertBeforeAfterBetween(EnumSet[FacetRangeOther],ModelRange,ModelRange,ModelRange,Integer,NamedList[Object]).mjava","sourceNew":"  /**\n   * A convenience method for calling {@link #assertBucket} on the before/after/between buckets\n   * of a facet result, based on the {@link FacetRangeOther} specified for this facet.\n   * \n   * @see #assertBucket\n   * @see #buildListOfFacetRangeOtherOptions \n   */\n  private static void assertBeforeAfterBetween(final EnumSet<FacetRangeOther> other,\n                                               final ModelRange before,\n                                               final ModelRange after,\n                                               final ModelRange between,\n                                               final Integer subFacetLimitUsed,\n                                               final NamedList<Object> facet) {\n    //final String[] names = new String[] { \"before\", \"after\", \"between\" };\n    assertEquals(3, BEFORE_AFTER_BETWEEN.size());\n    final ModelRange[] expected = new ModelRange[] { before, after, between };\n    for (int i = 0; i < 3; i++) {\n      FacetRangeOther key = BEFORE_AFTER_BETWEEN.get(i);\n      String name = key.toString();\n      if (other.contains(key) || other.contains(FacetRangeOther.ALL)) {\n        assertBucket(name, null, expected[i], subFacetLimitUsed, facet.get(name));\n      } else {\n        assertNull(\"unexpected other=\" + name, facet.get(name));\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * A convinience method for calling {@link #assertBucket} on the before/after/between buckets \n   * of a facet result, based on the {@link FacetRangeOther} specified for this facet.\n   * \n   * @see #assertBucket\n   * @see #buildListOfFacetRangeOtherOptions \n   */\n  private static void assertBeforeAfterBetween(final EnumSet<FacetRangeOther> other,\n                                               final ModelRange before,\n                                               final ModelRange after,\n                                               final ModelRange between,\n                                               final Integer subFacetLimitUsed,\n                                               final NamedList<Object> facet) {\n    //final String[] names = new String[] { \"before\", \"after\", \"between\" };\n    assertEquals(3, BEFORE_AFTER_BETWEEN.size());\n    final ModelRange[] expected = new ModelRange[] { before, after, between };\n    for (int i = 0; i < 3; i++) {\n      FacetRangeOther key = BEFORE_AFTER_BETWEEN.get(i);\n      String name = key.toString();\n      if (other.contains(key) || other.contains(FacetRangeOther.ALL)) {\n        assertBucket(name, null, expected[i], subFacetLimitUsed, facet.get(name));\n      } else {\n        assertNull(\"unexpected other=\" + name, facet.get(name));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c05b634713ca09b2267477408773904d4c69dd9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["c05b634713ca09b2267477408773904d4c69dd9d"],"c05b634713ca09b2267477408773904d4c69dd9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c05b634713ca09b2267477408773904d4c69dd9d"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c05b634713ca09b2267477408773904d4c69dd9d","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c05b634713ca09b2267477408773904d4c69dd9d":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}