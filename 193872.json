{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkStateReader reader = new ZkStateReader(zkClient);\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"3\");\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.publishAsDown(zkController.getBaseUrl(), desc1,\n            zkController.getNodeName() + \"_\" + \"core\" + (i + 1), \"core\"\n                + (i + 1));\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForSliceCount(reader, \"collection1\", 3);\n\n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n    \n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkStateReader reader = new ZkStateReader(zkClient);\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"3\");\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.publishAsDown(zkController.getBaseUrl(), desc1,\n            zkController.getNodeName() + \"_\" + \"core\" + (i + 1), \"core\"\n                + (i + 1));\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForSliceCount(reader, \"collection1\", 3);\n\n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n    \n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkStateReader reader = new ZkStateReader(zkClient);\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"3\");\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.publishAsDown(zkController.getBaseUrl(), desc1,\n            zkController.getNodeName() + \"_\" + \"core\" + (i + 1), \"core\"\n                + (i + 1));\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForSliceCount(reader, \"collection1\", 3);\n\n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n    \n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84250b785753dee996ec3f88a1ea2e941ebe7cfb","date":1328840665,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkStateReader reader = new ZkStateReader(zkClient);\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"3\");\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.publishAsDown(zkController.getBaseUrl(), desc1,\n            zkController.getNodeName() + \"_\" + \"core\" + (i + 1), \"core\"\n                + (i + 1));\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForCollections(reader, \"collection1\");\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n    \n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkStateReader reader = new ZkStateReader(zkClient);\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"3\");\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.publishAsDown(zkController.getBaseUrl(), desc1,\n            zkController.getNodeName() + \"_\" + \"core\" + (i + 1), \"core\"\n                + (i + 1));\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForSliceCount(reader, \"collection1\", 3);\n\n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n    \n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a80994db3380cd78c6f65b84515e2e931b6b3da","date":1329530403,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkStateReader reader = new ZkStateReader(zkClient);\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"3\");\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegisterSetup(null, desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForCollections(reader, \"collection1\");\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n    \n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkStateReader reader = new ZkStateReader(zkClient);\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"3\");\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.publishAsDown(zkController.getBaseUrl(), desc1,\n            zkController.getNodeName() + \"_\" + \"core\" + (i + 1), \"core\"\n                + (i + 1));\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForCollections(reader, \"collection1\");\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n    \n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b834dd353486678973f4157b3ba402ac3a7ca88","date":1329782329,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkStateReader reader = new ZkStateReader(zkClient);\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"3\");\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegisterSetup(null, desc1, false);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForCollections(reader, \"collection1\");\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n    \n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkStateReader reader = new ZkStateReader(zkClient);\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"3\");\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegisterSetup(null, desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForCollections(reader, \"collection1\");\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n    \n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c51a2dcb8b4e1820a44f35f11961110201e06cdb","date":1329994529,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"3\");\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegisterSetup(null, desc1, false);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForCollections(reader, \"collection1\");\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n    \n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkStateReader reader = new ZkStateReader(zkClient);\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"3\");\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegisterSetup(null, desc1, false);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForCollections(reader, \"collection1\");\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n    \n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n  }\n\n","bugFix":null,"bugIntro":["7875fce026a0a335830cfc75abc3eb009eff9a73"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9813dd0748537c429b7c0a9b4723ea1ba496c047","date":1330304954,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"3\");\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForCollections(reader, \"collection1\");\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n    \n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"3\");\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegisterSetup(null, desc1, false);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForCollections(reader, \"collection1\");\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n    \n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d05854aa6fb36cfe1a6e745776aec397719f6612","date":1330887140,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"3\");\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForCollections(reader, \"collection1\");\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"3\");\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForCollections(reader, \"collection1\");\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n    \n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"3\");\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForCollections(reader, \"collection1\");\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkStateReader reader = new ZkStateReader(zkClient);\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"3\");\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegisterSetup(null, desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForCollections(reader, \"collection1\");\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n    \n    System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setNumShards(3);\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForCollections(reader, \"collection1\");\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"3\");\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForCollections(reader, \"collection1\");\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"21591922fb4db3e2a6ffb2cb342b3d61c053a973","date":1340761680,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/collection1/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setNumShards(3);\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForCollections(reader, \"collection1\");\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setNumShards(3);\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForCollections(reader, \"collection1\");\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/collection1/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setNumShards(3);\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForCollections(reader, \"collection1\");\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setNumShards(3);\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForCollections(reader, \"collection1\");\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"adc2388a5005de25370273411bc713d0ff722805","date":1345719157,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"localhost\", \"collection1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"core\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getShards().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getShards().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/collection1/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setNumShards(3);\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForCollections(reader, \"collection1\");\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"localhost\", \"collection1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"core\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getShards().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getShards().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    ZkController zkController = null;\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkController = new ZkController(null, server.getZkAddress(), TIMEOUT, 10000,\n          \"localhost\", \"8983\", \"solr\", new CurrentCoreDescriptorProvider() {\n\n            @Override\n            public List<CoreDescriptor> getCurrentDescriptors() {\n              // do nothing\n              return null;\n            }\n          });\n\n      System.setProperty(\"bootstrap_confdir\", getFile(\"solr/collection1/conf\")\n          .getAbsolutePath());\n\n      final int numShards=6;\n      final String[] ids = new String[numShards];\n      \n      for (int i = 0; i < numShards; i++) {\n        CloudDescriptor collection1Desc = new CloudDescriptor();\n        collection1Desc.setNumShards(3);\n        collection1Desc.setCollectionName(\"collection1\");\n        CoreDescriptor desc1 = new CoreDescriptor(null, \"core\" + (i + 1), \"\");\n        desc1.setCloudDescriptor(collection1Desc);\n        zkController.preRegister(desc1);\n        ids[i] = zkController.register(\"core\" + (i + 1), desc1);\n      }\n      \n      assertEquals(\"shard1\", ids[0]);\n      assertEquals(\"shard2\", ids[1]);\n      assertEquals(\"shard3\", ids[2]);\n      assertEquals(\"shard1\", ids[3]);\n      assertEquals(\"shard2\", ids[4]);\n      assertEquals(\"shard3\", ids[5]);\n\n      waitForCollections(reader, \"collection1\");\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      System.clearProperty(\"bootstrap_confdir\");\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"localhost\", \"collection1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"core\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"localhost\", \"collection1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"core\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard1\").getShards().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getShards().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getShards().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f8b5ba78b252ff57082799d1b662ad3d677ecfc","date":1347893162,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\", \"collection1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"core\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"localhost\", \"collection1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"core\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\", \"collection1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\", \"collection1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"core\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\", \"collection1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\", \"collection1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"core\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f5eaf296600e1665151e7929d42a3cbe22e481","date":1393983215,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n      Map<String,Replica> rmap = reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\", \"collection1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n      Map<String,Replica> rmap = reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\", \"collection1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(\"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n      Map<String,Replica> rmap = reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n      Map<String,Replica> rmap = reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e9ce820cd3ed9efb959c181daaafd22f0c70143","date":1396201051,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n      Map<String,Replica> rmap = reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n      Map<String,Replica> rmap = reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n      Map<String,Replica> rmap = reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n      Map<String,Replica> rmap = reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n      Map<String,Replica> rmap = reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n      Map<String,Replica> rmap = reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7875fce026a0a335830cfc75abc3eb009eff9a73","date":1425897108,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n      Map<String,Replica> rmap = reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n      Map<String,Replica> rmap = reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n      Map<String,Replica> rmap = reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n      Map<String,Replica> rmap = reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n      Map<String,Replica> rmap = reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), ZkStateReader.ACTIVE, 3));\n      }\n      Map<String,Replica> rmap = reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d48cfd089cba66f9745d8043e8e971b60514418d","date":1449003177,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n      Map<String,Replica> rmap = reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(\"collection1\", \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(\"collection1\", \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"82fbc9a4af34a68002cd5cf8bbac6b604aeef413","date":1474634253,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n    } finally {\n      if (DEBUG) {\n        if (zkController != null) {\n          zkClient.printLayoutToStdOut();\n        }\n      }\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(COLLECTION, \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(COLLECTION, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(COLLECTION, \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(COLLECTION, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(collection, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getSlice(collection, \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(collection, \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(collection, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(collection, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(collection, \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"3\",\n          \"createNodeSet\", \"\");\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1), \"node\" + (i+1), \"shard\"+((i%3)+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(COLLECTION, \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(COLLECTION, \"shard3\").getReplicasMap().size());\n\n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n\n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(COLLECTION, \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(COLLECTION, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"3\",\n          \"createNodeSet\", \"\");\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1), \"node\" + (i+1), \"shard\"+((i%3)+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(COLLECTION, \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(COLLECTION, \"shard3\").getReplicasMap().size());\n\n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n\n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(COLLECTION, \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(COLLECTION, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"3\",\n          \"createNodeSet\", \"\");\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1), \"node\" + (i+1), \"shard\"+((i%3)+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(COLLECTION, \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(COLLECTION, \"shard3\").getReplicasMap().size());\n\n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n\n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n      \n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1), \"node\" + (i+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(COLLECTION, \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(COLLECTION, \"shard3\").getReplicasMap().size());\n      \n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      \n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"3\",\n          \"createNodeSet\", \"\");\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1), \"node\" + (i+1), \"shard\"+((i%3)+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard3\").getReplicasMap().size());\n\n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n\n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"3\",\n          \"createNodeSet\", \"\");\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1), \"node\" + (i+1), \"shard\"+((i%3)+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(COLLECTION, \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(COLLECTION, \"shard3\").getReplicasMap().size());\n\n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n\n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["5de502b5478255493125e7e801411ba17a6682ec"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"3\",\n          \"createNodeSet\", \"\");\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1), \"node\" + (i+1), \"shard\"+((i%3)+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard3\").getReplicasMap().size());\n\n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n\n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"3\",\n          \"createNodeSet\", \"\");\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1), \"node\" + (i+1), \"shard\"+((i%3)+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(COLLECTION, \"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getSlice(COLLECTION, \"shard3\").getReplicasMap().size());\n\n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n\n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"3\",\n          \"createNodeSet\", \"\");\n      ZkDistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1), \"node\" + (i+1), \"shard\"+((i%3)+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard3\").getReplicasMap().size());\n\n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n\n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"3\",\n          \"createNodeSet\", \"\");\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1), \"node\" + (i+1), \"shard\"+((i%3)+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard3\").getReplicasMap().size());\n\n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n\n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"3\",\n          \"createNodeSet\", \"\");\n      ZkDistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1), \"node\" + (i+1), \"shard\"+((i%3)+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard3\").getReplicasMap().size());\n\n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n\n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"3\",\n          \"createNodeSet\", \"\");\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1), \"node\" + (i+1), \"shard\"+((i%3)+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard3\").getReplicasMap().size());\n\n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n\n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n        final int numShards = 6;\n\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n            \"name\", COLLECTION,\n            ZkStateReader.REPLICATION_FACTOR, \"1\",\n            ZkStateReader.NUM_SHARDS_PROP, \"3\",\n            \"createNodeSet\", \"\");\n        ZkDistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n        q.offer(Utils.toJSON(m));\n\n        for (int i = 0; i < numShards; i++) {\n          assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i + 1), \"node\" + (i + 1), \"shard\" + ((i % 3) + 1), Replica.State.ACTIVE, 3));\n        }\n        final Map<String, Replica> rmap = reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap();\n        assertEquals(rmap.toString(), 2, rmap.size());\n        assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard2\").getReplicasMap().size());\n        assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard3\").getReplicasMap().size());\n\n        //make sure leaders are in cloud state\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      }\n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n      final int numShards=6;\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"3\",\n          \"createNodeSet\", \"\");\n      ZkDistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      q.offer(Utils.toJSON(m));\n\n      for (int i = 0; i < numShards; i++) {\n        assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i+1), \"node\" + (i+1), \"shard\"+((i%3)+1), Replica.State.ACTIVE, 3));\n      }\n      final Map<String,Replica> rmap = reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap();\n      assertEquals(rmap.toString(), 2, rmap.size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard2\").getReplicasMap().size());\n      assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard3\").getReplicasMap().size());\n\n      //make sure leaders are in cloud state\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n      assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n\n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n\n    MockZKController mockController = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n\n \n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        mockController = new MockZKController(server.getZkAddress(), \"127.0.0.1\", overseers);\n\n        final int numShards = 6;\n\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n            \"name\", COLLECTION,\n            ZkStateReader.REPLICATION_FACTOR, \"1\",\n            ZkStateReader.NUM_SHARDS_PROP, \"3\",\n            \"createNodeSet\", \"\");\n        ZkDistributedQueue q = overseers.get(0).getStateUpdateQueue();\n        q.offer(Utils.toJSON(m));\n        \n        for (int i = 0; i < numShards; i++) {\n          assertNotNull(\"shard got no id?\", mockController.publishState(COLLECTION, \"core\" + (i + 1), \"node\" + (i + 1), \"shard\" + ((i % 3) + 1), Replica.State.ACTIVE, 3, true, overseers.get(0)));\n        }\n        \n        reader.waitForState(COLLECTION, 30, TimeUnit.SECONDS, MiniSolrCloudCluster.expectedShardsAndActiveReplicas(3, 6));\n        \n        final Map<String, Replica> rmap = reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap();\n        assertEquals(rmap.toString(), 2, rmap.size());\n        assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard2\").getReplicasMap().size());\n        assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard3\").getReplicasMap().size());\n\n        //make sure leaders are in cloud state\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      }\n    } finally {\n      if (mockController != null) {\n        mockController.close();\n      }\n      close(overseerClient);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    MockZKController zkController = null;\n    SolrZkClient zkClient = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        zkController = new MockZKController(server.getZkAddress(), \"127.0.0.1\");\n\n        final int numShards = 6;\n\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n            \"name\", COLLECTION,\n            ZkStateReader.REPLICATION_FACTOR, \"1\",\n            ZkStateReader.NUM_SHARDS_PROP, \"3\",\n            \"createNodeSet\", \"\");\n        ZkDistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n        q.offer(Utils.toJSON(m));\n\n        for (int i = 0; i < numShards; i++) {\n          assertNotNull(\"shard got no id?\", zkController.publishState(COLLECTION, \"core\" + (i + 1), \"node\" + (i + 1), \"shard\" + ((i % 3) + 1), Replica.State.ACTIVE, 3));\n        }\n        final Map<String, Replica> rmap = reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap();\n        assertEquals(rmap.toString(), 2, rmap.size());\n        assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard2\").getReplicasMap().size());\n        assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard3\").getReplicasMap().size());\n\n        //make sure leaders are in cloud state\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      }\n    } finally {\n      close(zkClient);\n      if (zkController != null) {\n        zkController.close();\n      }\n      close(overseerClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["adc2388a5005de25370273411bc713d0ff722805","2c007e7c4cf8c55bc2a5884e315123afaaeec87f","f15af35d55d70c34451f9df5edeaeff6b31f8cbe","a9b4296bd51ca61b482138791478afdd0f7d3a3d","a5093a9e893633cc091cf2f729d7863671c2b715","f4abec28b874149a7223e32cc7a01704c27790de"],"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n\n    MockZKController mockController = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        mockController = new MockZKController(server.getZkAddress(), \"127.0.0.1\", overseers);\n\n        final int numShards = 6;\n\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n            \"name\", COLLECTION,\n            ZkStateReader.REPLICATION_FACTOR, \"1\",\n            ZkStateReader.NUM_SHARDS_PROP, \"3\",\n            \"createNodeSet\", \"\");\n        ZkDistributedQueue q = overseers.get(0).getStateUpdateQueue();\n        q.offer(Utils.toJSON(m));\n\n        for (int i = 0; i < numShards; i++) {\n          assertNotNull(\"shard got no id?\", mockController.publishState(COLLECTION, \"core\" + (i + 1), \"node\" + (i + 1), \"shard\" + ((i % 3) + 1), Replica.State.ACTIVE, 3, true, overseers.get(0)));\n        }\n\n        reader.waitForState(COLLECTION, 30, TimeUnit.SECONDS, MiniSolrCloudCluster.expectedShardsAndActiveReplicas(3, 6));\n\n        final Map<String, Replica> rmap = reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap();\n        assertEquals(rmap.toString(), 2, rmap.size());\n        assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard2\").getReplicasMap().size());\n        assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard3\").getReplicasMap().size());\n\n        //make sure leaders are in cloud state\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      }\n    } finally {\n      if (mockController != null) {\n        mockController.close();\n      }\n      close(overseerClient);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n\n    MockZKController mockController = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n\n \n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        mockController = new MockZKController(server.getZkAddress(), \"127.0.0.1\", overseers);\n\n        final int numShards = 6;\n\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n            \"name\", COLLECTION,\n            ZkStateReader.REPLICATION_FACTOR, \"1\",\n            ZkStateReader.NUM_SHARDS_PROP, \"3\",\n            \"createNodeSet\", \"\");\n        ZkDistributedQueue q = overseers.get(0).getStateUpdateQueue();\n        q.offer(Utils.toJSON(m));\n        \n        for (int i = 0; i < numShards; i++) {\n          assertNotNull(\"shard got no id?\", mockController.publishState(COLLECTION, \"core\" + (i + 1), \"node\" + (i + 1), \"shard\" + ((i % 3) + 1), Replica.State.ACTIVE, 3, true, overseers.get(0)));\n        }\n        \n        reader.waitForState(COLLECTION, 30, TimeUnit.SECONDS, MiniSolrCloudCluster.expectedShardsAndActiveReplicas(3, 6));\n        \n        final Map<String, Replica> rmap = reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap();\n        assertEquals(rmap.toString(), 2, rmap.size());\n        assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard2\").getReplicasMap().size());\n        assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard3\").getReplicasMap().size());\n\n        //make sure leaders are in cloud state\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      }\n    } finally {\n      if (mockController != null) {\n        mockController.close();\n      }\n      close(overseerClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testShardAssignment().mjava","sourceNew":"  @Test\n  public void testShardAssignment() throws Exception {\n\n    MockZKController mockController = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        mockController = new MockZKController(server.getZkAddress(), \"127.0.0.1\", overseers);\n\n        final int numShards = 6; // this is not the number of shards in the collection\n\n        createCollection(COLLECTION, 3);\n\n        for (int i = 0; i < numShards; i++) {\n          assertNotNull(\"shard got no id?\", mockController.publishState(COLLECTION, \"core\" + (i + 1), \"node\" + (i + 1), \"shard\" + ((i % 3) + 1), Replica.State.ACTIVE, 3, true, overseers.get(0)));\n        }\n\n        reader.waitForState(COLLECTION, 30, TimeUnit.SECONDS, MiniSolrCloudCluster.expectedShardsAndActiveReplicas(3, 6));\n\n        final Map<String, Replica> rmap = reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap();\n        assertEquals(rmap.toString(), 2, rmap.size());\n        assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard2\").getReplicasMap().size());\n        assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard3\").getReplicasMap().size());\n\n        //make sure leaders are in cloud state\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      }\n    } finally {\n      if (mockController != null) {\n        mockController.close();\n      }\n      close(overseerClient);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testShardAssignment() throws Exception {\n\n    MockZKController mockController = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        mockController = new MockZKController(server.getZkAddress(), \"127.0.0.1\", overseers);\n\n        final int numShards = 6;\n\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n            \"name\", COLLECTION,\n            ZkStateReader.REPLICATION_FACTOR, \"1\",\n            ZkStateReader.NUM_SHARDS_PROP, \"3\",\n            \"createNodeSet\", \"\");\n        ZkDistributedQueue q = overseers.get(0).getStateUpdateQueue();\n        q.offer(Utils.toJSON(m));\n\n        for (int i = 0; i < numShards; i++) {\n          assertNotNull(\"shard got no id?\", mockController.publishState(COLLECTION, \"core\" + (i + 1), \"node\" + (i + 1), \"shard\" + ((i % 3) + 1), Replica.State.ACTIVE, 3, true, overseers.get(0)));\n        }\n\n        reader.waitForState(COLLECTION, 30, TimeUnit.SECONDS, MiniSolrCloudCluster.expectedShardsAndActiveReplicas(3, 6));\n\n        final Map<String, Replica> rmap = reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard1\").getReplicasMap();\n        assertEquals(rmap.toString(), 2, rmap.size());\n        assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard2\").getReplicasMap().size());\n        assertEquals(rmap.toString(), 2, reader.getClusterState().getCollection(COLLECTION).getSlice(\"shard3\").getReplicasMap().size());\n\n        //make sure leaders are in cloud state\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard1\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard2\", 15000));\n        assertNotNull(reader.getLeaderUrl(COLLECTION, \"shard3\", 15000));\n      }\n    } finally {\n      if (mockController != null) {\n        mockController.close();\n      }\n      close(overseerClient);\n    }\n  }\n\n","bugFix":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","f15af35d55d70c34451f9df5edeaeff6b31f8cbe","a9b4296bd51ca61b482138791478afdd0f7d3a3d","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["21591922fb4db3e2a6ffb2cb342b3d61c053a973","adc2388a5005de25370273411bc713d0ff722805"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["849494cf2f3a96af5c8c84995108ddd8456fcd04","29f5eaf296600e1665151e7929d42a3cbe22e481"],"5de502b5478255493125e7e801411ba17a6682ec":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"adc2388a5005de25370273411bc713d0ff722805":["21591922fb4db3e2a6ffb2cb342b3d61c053a973"],"82fbc9a4af34a68002cd5cf8bbac6b604aeef413":["d48cfd089cba66f9745d8043e8e971b60514418d"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["29f5eaf296600e1665151e7929d42a3cbe22e481","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["8f8b5ba78b252ff57082799d1b662ad3d677ecfc","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a80994db3380cd78c6f65b84515e2e931b6b3da","d05854aa6fb36cfe1a6e745776aec397719f6612"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"6b834dd353486678973f4157b3ba402ac3a7ca88":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"344b0840364d990b29b97467bfcc766ff8325d11":["28288370235ed02234a64753cdbf0c6ec096304a"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d48cfd089cba66f9745d8043e8e971b60514418d":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["7875fce026a0a335830cfc75abc3eb009eff9a73"],"29f5eaf296600e1665151e7929d42a3cbe22e481":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f4abec28b874149a7223e32cc7a01704c27790de","7875fce026a0a335830cfc75abc3eb009eff9a73"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"84250b785753dee996ec3f88a1ea2e941ebe7cfb":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d48cfd089cba66f9745d8043e8e971b60514418d","82fbc9a4af34a68002cd5cf8bbac6b604aeef413"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"d05854aa6fb36cfe1a6e745776aec397719f6612":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"9813dd0748537c429b7c0a9b4723ea1ba496c047":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"21591922fb4db3e2a6ffb2cb342b3d61c053a973":["a5093a9e893633cc091cf2f729d7863671c2b715"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["29f5eaf296600e1665151e7929d42a3cbe22e481"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["5de502b5478255493125e7e801411ba17a6682ec"],"fa64435b5902ce266c23755a4a00691a3285dab8":["adc2388a5005de25370273411bc713d0ff722805"],"8f8b5ba78b252ff57082799d1b662ad3d677ecfc":["fa64435b5902ce266c23755a4a00691a3285dab8"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["6f20fd35e3055a0c5b387df0b986a68d65d86441","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["5de502b5478255493125e7e801411ba17a6682ec","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d48cfd089cba66f9745d8043e8e971b60514418d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["6b834dd353486678973f4157b3ba402ac3a7ca88"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["8f8b5ba78b252ff57082799d1b662ad3d677ecfc"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","344b0840364d990b29b97467bfcc766ff8325d11"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a5093a9e893633cc091cf2f729d7863671c2b715","21591922fb4db3e2a6ffb2cb342b3d61c053a973"],"a5093a9e893633cc091cf2f729d7863671c2b715":["d05854aa6fb36cfe1a6e745776aec397719f6612"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["344b0840364d990b29b97467bfcc766ff8325d11"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["f4abec28b874149a7223e32cc7a01704c27790de"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["84250b785753dee996ec3f88a1ea2e941ebe7cfb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"adc2388a5005de25370273411bc713d0ff722805":["001b25b42373b22a52f399dbf072f1224632e8e6","fa64435b5902ce266c23755a4a00691a3285dab8"],"5de502b5478255493125e7e801411ba17a6682ec":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","28288370235ed02234a64753cdbf0c6ec096304a"],"82fbc9a4af34a68002cd5cf8bbac6b604aeef413":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"6b834dd353486678973f4157b3ba402ac3a7ca88":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"344b0840364d990b29b97467bfcc766ff8325d11":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"d48cfd089cba66f9745d8043e8e971b60514418d":["82fbc9a4af34a68002cd5cf8bbac6b604aeef413","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"29f5eaf296600e1665151e7929d42a3cbe22e481":["96ea64d994d340044e0d57aeb6a5871539d10ca5","2a0f5bb79c600763ffe7b8141df59a3169d31e48","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["d48cfd089cba66f9745d8043e8e971b60514418d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"84250b785753dee996ec3f88a1ea2e941ebe7cfb":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d05854aa6fb36cfe1a6e745776aec397719f6612":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a5093a9e893633cc091cf2f729d7863671c2b715"],"9813dd0748537c429b7c0a9b4723ea1ba496c047":["d05854aa6fb36cfe1a6e745776aec397719f6612"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21591922fb4db3e2a6ffb2cb342b3d61c053a973":["001b25b42373b22a52f399dbf072f1224632e8e6","adc2388a5005de25370273411bc713d0ff722805","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"fa64435b5902ce266c23755a4a00691a3285dab8":["8f8b5ba78b252ff57082799d1b662ad3d677ecfc"],"8f8b5ba78b252ff57082799d1b662ad3d677ecfc":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"f4abec28b874149a7223e32cc7a01704c27790de":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7875fce026a0a335830cfc75abc3eb009eff9a73"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"28288370235ed02234a64753cdbf0c6ec096304a":["344b0840364d990b29b97467bfcc766ff8325d11"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["96ea64d994d340044e0d57aeb6a5871539d10ca5","37a0f60745e53927c4c876cfe5b5a58170f0646c","29f5eaf296600e1665151e7929d42a3cbe22e481"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["21591922fb4db3e2a6ffb2cb342b3d61c053a973","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","84250b785753dee996ec3f88a1ea2e941ebe7cfb","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe","6240b74b884c5587f2a4062dd27d6c32bf228889"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["a219f1dcad1700e84807666bdbd2b573e8de7021","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6b834dd353486678973f4157b3ba402ac3a7ca88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","96ea64d994d340044e0d57aeb6a5871539d10ca5","37a0f60745e53927c4c876cfe5b5a58170f0646c","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6240b74b884c5587f2a4062dd27d6c32bf228889","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}