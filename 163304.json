{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#uniqueStems(char[],int).mjava","commits":[{"id":"c214bc712d04c78c4d434119d560d0a4dd2fce4f","date":1393216863,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#uniqueStems(char[],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Find the unique stem(s) of the provided word\n   * \n   * @param word Word to find the stems for\n   * @return List of stems for the word\n   */\n  public List<Stem> uniqueStems(char word[], int length) {\n    List<Stem> stems = new ArrayList<Stem>();\n    CharArraySet terms = new CharArraySet(Version.LUCENE_CURRENT, 8, false);\n    if (dictionary.lookupWord(word, 0, length, scratch) != null) {\n      stems.add(new Stem(word, length));\n      terms.add(word);\n    }\n    List<Stem> otherStems = stem(word, length, null, 0);\n    for (Stem s : otherStems) {\n      if (!terms.contains(s.stem)) {\n        stems.add(s);\n        terms.add(s.stem);\n      }\n    }\n    return stems;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"378fdc1eb541e8a672a95d6c660c81d606145d1d","date":1393358825,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#uniqueStems(char[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#uniqueStems(char[],int).mjava","sourceNew":"  /**\n   * Find the unique stem(s) of the provided word\n   * \n   * @param word Word to find the stems for\n   * @return List of stems for the word\n   */\n  public List<CharsRef> uniqueStems(char word[], int length) {\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n    CharArraySet terms = new CharArraySet(Version.LUCENE_CURRENT, 8, false);\n    if (dictionary.lookupWord(word, 0, length, scratch) != null) {\n      stems.add(new CharsRef(word, 0, length));\n      terms.add(word);\n    }\n    List<CharsRef> otherStems = stem(word, length, null, 0);\n    for (CharsRef s : otherStems) {\n      if (!terms.contains(s)) {\n        stems.add(s);\n        terms.add(s);\n      }\n    }\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Find the unique stem(s) of the provided word\n   * \n   * @param word Word to find the stems for\n   * @return List of stems for the word\n   */\n  public List<Stem> uniqueStems(char word[], int length) {\n    List<Stem> stems = new ArrayList<Stem>();\n    CharArraySet terms = new CharArraySet(Version.LUCENE_CURRENT, 8, false);\n    if (dictionary.lookupWord(word, 0, length, scratch) != null) {\n      stems.add(new Stem(word, length));\n      terms.add(word);\n    }\n    List<Stem> otherStems = stem(word, length, null, 0);\n    for (Stem s : otherStems) {\n      if (!terms.contains(s.stem)) {\n        stems.add(s);\n        terms.add(s.stem);\n      }\n    }\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f01af929441dec992bb546ac539c0bf40ae90965","date":1393367367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#uniqueStems(char[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#uniqueStems(char[],int).mjava","sourceNew":"  /**\n   * Find the unique stem(s) of the provided word\n   * \n   * @param word Word to find the stems for\n   * @return List of stems for the word\n   */\n  public List<CharsRef> uniqueStems(char word[], int length) {\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n    CharArraySet terms = new CharArraySet(Version.LUCENE_CURRENT, 8, false);\n    if (dictionary.lookupWord(word, 0, length, scratch) != null) {\n      stems.add(new CharsRef(word, 0, length));\n      terms.add(word);\n    }\n    List<CharsRef> otherStems = stem(word, length, Dictionary.NOFLAGS, 0);\n    for (CharsRef s : otherStems) {\n      if (!terms.contains(s)) {\n        stems.add(s);\n        terms.add(s);\n      }\n    }\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Find the unique stem(s) of the provided word\n   * \n   * @param word Word to find the stems for\n   * @return List of stems for the word\n   */\n  public List<CharsRef> uniqueStems(char word[], int length) {\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n    CharArraySet terms = new CharArraySet(Version.LUCENE_CURRENT, 8, false);\n    if (dictionary.lookupWord(word, 0, length, scratch) != null) {\n      stems.add(new CharsRef(word, 0, length));\n      terms.add(word);\n    }\n    List<CharsRef> otherStems = stem(word, length, null, 0);\n    for (CharsRef s : otherStems) {\n      if (!terms.contains(s)) {\n        stems.add(s);\n        terms.add(s);\n      }\n    }\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer#uniqueStems(char[],int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Stemmer#uniqueStems(char[],int).mjava","sourceNew":"  /**\n   * Find the unique stem(s) of the provided word\n   * \n   * @param word Word to find the stems for\n   * @return List of stems for the word\n   */\n  public List<CharsRef> uniqueStems(char word[], int length) {\n    List<CharsRef> stems = stem(word, length);\n    if (stems.size() < 2) {\n      return stems;\n    }\n    CharArraySet terms = new CharArraySet(Version.LUCENE_CURRENT, 8, dictionary.ignoreCase);\n    List<CharsRef> deduped = new ArrayList<>();\n    for (CharsRef s : stems) {\n      if (!terms.contains(s)) {\n        deduped.add(s);\n        terms.add(s);\n      }\n    }\n    return deduped;\n  }\n\n","sourceOld":"  /**\n   * Find the unique stem(s) of the provided word\n   * \n   * @param word Word to find the stems for\n   * @return List of stems for the word\n   */\n  public List<CharsRef> uniqueStems(char word[], int length) {\n    List<CharsRef> stems = new ArrayList<CharsRef>();\n    CharArraySet terms = new CharArraySet(Version.LUCENE_CURRENT, 8, false);\n    if (dictionary.lookupWord(word, 0, length, scratch) != null) {\n      stems.add(new CharsRef(word, 0, length));\n      terms.add(word);\n    }\n    List<CharsRef> otherStems = stem(word, length, Dictionary.NOFLAGS, 0);\n    for (CharsRef s : otherStems) {\n      if (!terms.contains(s)) {\n        stems.add(s);\n        terms.add(s);\n      }\n    }\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f01af929441dec992bb546ac539c0bf40ae90965":["378fdc1eb541e8a672a95d6c660c81d606145d1d"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["f01af929441dec992bb546ac539c0bf40ae90965"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"378fdc1eb541e8a672a95d6c660c81d606145d1d":["c214bc712d04c78c4d434119d560d0a4dd2fce4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f01af929441dec992bb546ac539c0bf40ae90965":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c214bc712d04c78c4d434119d560d0a4dd2fce4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["378fdc1eb541e8a672a95d6c660c81d606145d1d"],"378fdc1eb541e8a672a95d6c660c81d606145d1d":["f01af929441dec992bb546ac539c0bf40ae90965"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}