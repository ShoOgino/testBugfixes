{"path":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"/dev/null","sourceNew":"  public void testSomeStuff() throws Exception {\n\t// test merge factor picked up\n\tSolrCore core = h.getCore();\n\tSolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n\tassertEquals(\"Mergefactor was not picked up\", writer.getMergeFactor(), 8);\n\t  \n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":null,"sourceOld":"  public void testSomeStuff() throws Exception {\n\t// test merge factor picked up\n\tSolrCore core = h.getCore();\n\tSolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n\tassertEquals(\"Mergefactor was not picked up\", writer.getMergeFactor(), 8);\n\t  \n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  public void testSomeStuff() throws Exception {\n\t// test merge factor picked up\n\tSolrCore core = h.getCore();\n\tSolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n\tassertEquals(\"Mergefactor was not picked up\", writer.getMergeFactor(), 8);\n\t  \n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  public void testSomeStuff() throws Exception {\n\t// test merge factor picked up\n\tSolrCore core = h.getCore();\n\tSolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n\tassertEquals(\"Mergefactor was not picked up\", writer.getMergeFactor(), 8);\n\t  \n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"/dev/null","sourceNew":"  public void testSomeStuff() throws Exception {\n\t// test merge factor picked up\n\tSolrCore core = h.getCore();\n\tSolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n\tassertEquals(\"Mergefactor was not picked up\", writer.getMergeFactor(), 8);\n\t  \n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dec1a152fd2b63b9246fcbdc535c25376765188e","date":1268891794,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", writer.getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  public void testSomeStuff() throws Exception {\n\t// test merge factor picked up\n\tSolrCore core = h.getCore();\n\tSolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n\tassertEquals(\"Mergefactor was not picked up\", writer.getMergeFactor(), 8);\n\t  \n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"398bfcb539107b92d9af0013294b442326b314a6","date":1269035614,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", writer.getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", writer.getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", writer.getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", writer.getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", writer.getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5653af107efef582afd0bc6aff175972359fdd6","date":1293390698,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test allowDups default of false\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"105\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"102\"), \"allowDups\", \"false\" ),\n      add( doc(\"id\",\"103\"), \"allowDups\", \"true\"  ),\n      add( doc(\"id\",\"101\"), \"allowDups\", \"false\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ce6aae13e6441cf187f083d13afaf8e9a2884e3","date":1299700113,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(\"version\",\"2.0\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55688cada84e99928d155229fc2768df65a45bdb","date":1306274128,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy(), core.getCodecProvider());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy(), core.getCodecProvider());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy(), core.getCodecProvider());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a71a0b2d4be2299a163f60626729852d81a8e02","date":1309442399,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy(), core.getCodecProvider());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy(), core.getCodecProvider());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    SolrIndexWriter writer = new SolrIndexWriter(\"testWriter\",core.getNewIndexDir(), core.getDirectoryFactory(), false, core.getSchema(), core.getSolrConfig().mainIndexConfig, core.getDeletionPolicy(), core.getCodecProvider());\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    writer.close();\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSomeStuff().mjava","sourceNew":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testSomeStuff() throws Exception {\n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n\n    lrf.args.put(CommonParams.VERSION,\"2.2\");\n    assertQ(\"test query on empty index\",\n            req(\"qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='0']\"\n            );\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\",\n            delI(\"42\"));\n    assertU(\"adding doc#42\",\n            adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\",\n            commit());\n\n    assertQ(\"backslash escaping semicolon\",\n            req(\"id:42 AND val_s:aa\\\\;bb\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"quote escaping semicolon\",\n            req(\"id:42 AND val_s:\\\"aa;bb\\\"\")\n            ,\"//*[@numFound='1']\"\n            ,\"//int[@name='id'][.='42']\"\n            );\n\n    assertQ(\"no escaping semicolon\",\n            req(\"id:42 AND val_s:aa\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='0']\"\n            );\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='BBB']\"\n            );\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\")\n            ,\"//*[@numFound='1']\"\n            ,\"//str[.='DDD']\"\n            );\n\n    // test deletes\n    String [] adds = new String[] {\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"105\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"102\"), \"overwrite\", \"true\" ),\n      add( doc(\"id\",\"103\"), \"overwrite\", \"false\"  ),\n      add( doc(\"id\",\"101\"), \"overwrite\", \"true\" ),\n    };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n\n    // test maxint\n    assertQ(req(\"q\",\"id:[100 TO 110]\", \"rows\",\"2147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    // test big limit\n    assertQ(req(\"q\",\"id:[100 TO 111]\", \"rows\",\"1147483647\")\n            ,\"//*[@numFound='4']\"\n            );\n\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='4']\"\n            );\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='3']\"\n            );\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='2']\"\n            );\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\")\n            ,\"//*[@numFound='0']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dec1a152fd2b63b9246fcbdc535c25376765188e":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["7a71a0b2d4be2299a163f60626729852d81a8e02","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["398bfcb539107b92d9af0013294b442326b314a6","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["55688cada84e99928d155229fc2768df65a45bdb"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","2ce6aae13e6441cf187f083d13afaf8e9a2884e3"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["2ce6aae13e6441cf187f083d13afaf8e9a2884e3","55688cada84e99928d155229fc2768df65a45bdb"],"b5653af107efef582afd0bc6aff175972359fdd6":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"55688cada84e99928d155229fc2768df65a45bdb":["2ce6aae13e6441cf187f083d13afaf8e9a2884e3"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["d619839baa8ce5503e496b94a9e42ad6f079293f","55688cada84e99928d155229fc2768df65a45bdb"],"70ad682703b8585f5d0a637efec044d57ec05efb":["3bb13258feba31ab676502787ab2e1779f129b7a","b5653af107efef582afd0bc6aff175972359fdd6"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"2ce6aae13e6441cf187f083d13afaf8e9a2884e3":["b5653af107efef582afd0bc6aff175972359fdd6"],"398bfcb539107b92d9af0013294b442326b314a6":["dec1a152fd2b63b9246fcbdc535c25376765188e"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["55688cada84e99928d155229fc2768df65a45bdb","7a71a0b2d4be2299a163f60626729852d81a8e02"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7a71a0b2d4be2299a163f60626729852d81a8e02"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b5653af107efef582afd0bc6aff175972359fdd6"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","2ce6aae13e6441cf187f083d13afaf8e9a2884e3"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7a71a0b2d4be2299a163f60626729852d81a8e02"],"3bb13258feba31ab676502787ab2e1779f129b7a":["398bfcb539107b92d9af0013294b442326b314a6","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["398bfcb539107b92d9af0013294b442326b314a6"]},"commit2Childs":{"dec1a152fd2b63b9246fcbdc535c25376765188e":["398bfcb539107b92d9af0013294b442326b314a6"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["c26f00b574427b55127e869b935845554afde1fa","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","a258fbb26824fd104ed795e5d9033d2d040049ee"],"1da8d55113b689b06716246649de6f62430f15c0":["dec1a152fd2b63b9246fcbdc535c25376765188e"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"b5653af107efef582afd0bc6aff175972359fdd6":["70ad682703b8585f5d0a637efec044d57ec05efb","2ce6aae13e6441cf187f083d13afaf8e9a2884e3","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"55688cada84e99928d155229fc2768df65a45bdb":["7a71a0b2d4be2299a163f60626729852d81a8e02","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[],"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"2ce6aae13e6441cf187f083d13afaf8e9a2884e3":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","55688cada84e99928d155229fc2768df65a45bdb","d619839baa8ce5503e496b94a9e42ad6f079293f"],"398bfcb539107b92d9af0013294b442326b314a6":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["70ad682703b8585f5d0a637efec044d57ec05efb"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b5653af107efef582afd0bc6aff175972359fdd6","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","2e10cb22a8bdb44339e282925a29182bb2f3174d","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}