{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","commits":[{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,Entry,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, 0);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = entryKey.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, 0);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, 0);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d68b012e2c254aa7a4e9c125b76daf501111c8ae","date":1358889889,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      final int maxDoc = reader.maxDoc();\n\n      if (fieldInfo == null) {\n        // field does not exist or has no value\n        return new Bits.MatchNoBits(maxDoc);\n      } else if (fieldInfo.hasDocValues()) {\n        // doc values are dense\n        return new Bits.MatchAllBits(maxDoc);\n      }\n\n      // Visit all docs that have terms for this field\n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;      \n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      final int maxDoc = reader.maxDoc();\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":["b4e0d3f6116e64a8ab4c338fed19498407856738"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      final int maxDoc = reader.maxDoc();\n\n      if (fieldInfo == null) {\n        // field does not exist or has no value\n        return new Bits.MatchNoBits(maxDoc);\n      } else if (fieldInfo.hasDocValues()) {\n        // doc values are dense\n        return new Bits.MatchAllBits(maxDoc);\n      }\n\n      // Visit all docs that have terms for this field\n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b4e0d3f6116e64a8ab4c338fed19498407856738","date":1360786773,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;\n      final int maxDoc = reader.maxDoc();\n\n      // Visit all docs that have terms for this field\n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      final int maxDoc = reader.maxDoc();\n\n      if (fieldInfo == null) {\n        // field does not exist or has no value\n        return new Bits.MatchNoBits(maxDoc);\n      } else if (fieldInfo.hasDocValues()) {\n        // doc values are dense\n        return new Bits.MatchAllBits(maxDoc);\n      }\n\n      // Visit all docs that have terms for this field\n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":["d68b012e2c254aa7a4e9c125b76daf501111c8ae"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f9453e226f2896430e77ec8e7837c1441a9aeb0","date":1360788152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;\n      final int maxDoc = reader.maxDoc();\n\n      // Visit all docs that have terms for this field\n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      final int maxDoc = reader.maxDoc();\n\n      if (fieldInfo == null) {\n        // field does not exist or has no value\n        return new Bits.MatchNoBits(maxDoc);\n      } else if (fieldInfo.hasDocValues()) {\n        // doc values are dense\n        return new Bits.MatchAllBits(maxDoc);\n      }\n\n      // Visit all docs that have terms for this field\n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;\n      final int maxDoc = reader.maxDoc();\n\n      // Visit all docs that have terms for this field\n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;\n      final int maxDoc = reader.maxDoc();\n\n      // Visit all docs that have terms for this field\n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;\n      final int maxDoc = reader.maxDoc();\n\n      // Visit all docs that have terms for this field\n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;\n      final int maxDoc = reader.maxDoc();\n\n      // Visit all docs that have terms for this field\n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.DocsWithFieldCache#createValue(AtomicReader,CacheKey,boolean).mjava","sourceNew":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;\n      final int maxDoc = reader.maxDoc();\n\n      // Visit all docs that have terms for this field\n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","sourceOld":"    @Override\n    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField /* ignored */)\n    throws IOException {\n      final String field = key.field;\n      final int maxDoc = reader.maxDoc();\n\n      // Visit all docs that have terms for this field\n      FixedBitSet res = null;\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        final int termsDocCount = terms.getDocCount();\n        assert termsDocCount <= maxDoc;\n        if (termsDocCount == maxDoc) {\n          // Fast case: all docs have this field:\n          return new Bits.MatchAllBits(maxDoc);\n        }\n        final TermsEnum termsEnum = terms.iterator(null);\n        DocsEnum docs = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (res == null) {\n            // lazy init\n            res = new FixedBitSet(maxDoc);\n          }\n\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          // TODO: use bulk API\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            res.set(docID);\n          }\n        }\n      }\n      if (res == null) {\n        return new Bits.MatchNoBits(maxDoc);\n      }\n      final int numSet = res.cardinality();\n      if (numSet >= maxDoc) {\n        // The cardinality of the BitSet is maxDoc if all documents have a value.\n        assert numSet == maxDoc;\n        return new Bits.MatchAllBits(maxDoc);\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a4d374b2bebd0d52acaa61038fbf23068620fba7","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d68b012e2c254aa7a4e9c125b76daf501111c8ae"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["b4e0d3f6116e64a8ab4c338fed19498407856738","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f9453e226f2896430e77ec8e7837c1441a9aeb0":["d4d69c535930b5cce125cff868d40f6373dc27d4","b4e0d3f6116e64a8ab4c338fed19498407856738"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["b4e0d3f6116e64a8ab4c338fed19498407856738"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56572ec06f1407c066d6b7399413178b33176cd8":["b4e0d3f6116e64a8ab4c338fed19498407856738","93dd449115a9247533e44bab47e8429e5dccbc6d"],"d68b012e2c254aa7a4e9c125b76daf501111c8ae":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"b4e0d3f6116e64a8ab4c338fed19498407856738":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["d68b012e2c254aa7a4e9c125b76daf501111c8ae"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["0f9453e226f2896430e77ec8e7837c1441a9aeb0","b4e0d3f6116e64a8ab4c338fed19498407856738"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4d69c535930b5cce125cff868d40f6373dc27d4","a4d374b2bebd0d52acaa61038fbf23068620fba7"],"0f9453e226f2896430e77ec8e7837c1441a9aeb0":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"d68b012e2c254aa7a4e9c125b76daf501111c8ae":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"b4e0d3f6116e64a8ab4c338fed19498407856738":["93dd449115a9247533e44bab47e8429e5dccbc6d","0f9453e226f2896430e77ec8e7837c1441a9aeb0","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0f9453e226f2896430e77ec8e7837c1441a9aeb0","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}