{"path":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testQuerySubsetMatching().mjava","commits":[{"id":"e6046c615b67e878b7c0ab9257d01dd759493f06","date":1564997027,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testQuerySubsetMatching().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testQuerySubsetMatching() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"1\", \"title\", \"XXXX\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\"));\n      assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\"));\n\n      assertU(adoc(\"id\", \"10\", \"title\", \"RR\", \"str_s1\", \"r\"));\n      assertU(adoc(\"id\", \"11\", \"title\", \"SS\", \"str_s1\", \"r\"));\n      assertU(adoc(\"id\", \"12\", \"title\", \"TT\", \"str_s1\", \"r\"));\n      assertU(adoc(\"id\", \"13\", \"title\", \"UU\", \"str_s1\", \"r\"));\n      assertU(adoc(\"id\", \"14\", \"title\", \"VV\", \"str_s1\", \"r\"));\n      assertU(commit());\n\n      // Exact matching.\n      assertQ(\"\", req(CommonParams.Q, \"XXXX\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/str[@name='id'][.='1']\",\n          \"//result/doc[2]/str[@name='id'][.='4']\",\n          \"//result/doc[3]/str[@name='id'][.='6']\",\n          \"//result/doc[1]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[2]/bool[@name='[elevated]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[elevated]'][.='false']\"\n      );\n\n      // Exact matching.\n      assertQ(\"\", req(CommonParams.Q, \"QQQQ EE\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\"),\n          \"//*[@numFound='0']\"\n      );\n\n      // Subset matching.\n      assertQ(\"\", req(CommonParams.Q, \"BB DD CC VV\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\"),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/str[@name='id'][.='10']\",\n          \"//result/doc[2]/str[@name='id'][.='12']\",\n          \"//result/doc[3]/str[@name='id'][.='11']\",\n          \"//result/doc[4]/str[@name='id'][.='14']\",\n          \"//result/doc[1]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[2]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[3]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[4]/bool[@name='[elevated]'][.='false']\"\n      );\n\n      // Subset + exact matching.\n      assertQ(\"\", req(CommonParams.Q, \"BB CC\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\"),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/str[@name='id'][.='13']\",\n          \"//result/doc[2]/str[@name='id'][.='10']\",\n          \"//result/doc[3]/str[@name='id'][.='12']\",\n          \"//result/doc[4]/str[@name='id'][.='11']\",\n          \"//result/doc[1]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[2]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[3]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[4]/bool[@name='[elevated]'][.='true']\"\n      );\n\n      // Subset matching.\n      assertQ(\"\", req(CommonParams.Q, \"AA BB DD CC AA\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\"),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/str[@name='id'][.='10']\",\n          \"//result/doc[2]/str[@name='id'][.='12']\",\n          \"//result/doc[3]/str[@name='id'][.='11']\",\n          \"//result/doc[4]/str[@name='id'][.='14']\",\n          \"//result/doc[1]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[2]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[3]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[4]/bool[@name='[elevated]'][.='true']\"\n      );\n\n      // Subset matching.\n      assertQ(\"\", req(CommonParams.Q, \"AA RR BB DD AA\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/str[@name='id'][.='12']\",\n          \"//result/doc[2]/str[@name='id'][.='14']\",\n          \"//result/doc[3]/str[@name='id'][.='10']\",\n          \"//result/doc[1]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[2]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[3]/bool[@name='[elevated]'][.='false']\"\n      );\n\n      // Subset matching.\n      assertQ(\"\", req(CommonParams.Q, \"AA BB EE\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\")\n          , \"//*[@numFound='0']\"\n          );\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":0,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testQuerySubsetMatching().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testQuerySubsetMatching() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      assertU(adoc(\"id\", \"1\", \"title\", \"XXXX\", \"str_s1\", \"a\"));\n      assertU(adoc(\"id\", \"2\", \"title\", \"YYYY\", \"str_s1\", \"b\"));\n      assertU(adoc(\"id\", \"3\", \"title\", \"ZZZZ\", \"str_s1\", \"c\"));\n\n      assertU(adoc(\"id\", \"4\", \"title\", \"XXXX XXXX\", \"str_s1\", \"x\"));\n      assertU(adoc(\"id\", \"5\", \"title\", \"YYYY YYYY\", \"str_s1\", \"y\"));\n      assertU(adoc(\"id\", \"6\", \"title\", \"XXXX XXXX\", \"str_s1\", \"z\"));\n      assertU(adoc(\"id\", \"7\", \"title\", \"AAAA\", \"str_s1\", \"a\"));\n\n      assertU(adoc(\"id\", \"10\", \"title\", \"RR\", \"str_s1\", \"r\"));\n      assertU(adoc(\"id\", \"11\", \"title\", \"SS\", \"str_s1\", \"r\"));\n      assertU(adoc(\"id\", \"12\", \"title\", \"TT\", \"str_s1\", \"r\"));\n      assertU(adoc(\"id\", \"13\", \"title\", \"UU\", \"str_s1\", \"r\"));\n      assertU(adoc(\"id\", \"14\", \"title\", \"VV\", \"str_s1\", \"r\"));\n      assertU(commit());\n\n      // Exact matching.\n      assertQ(\"\", req(CommonParams.Q, \"XXXX\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/str[@name='id'][.='1']\",\n          \"//result/doc[2]/str[@name='id'][.='4']\",\n          \"//result/doc[3]/str[@name='id'][.='6']\",\n          \"//result/doc[1]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[2]/bool[@name='[elevated]'][.='false']\",\n          \"//result/doc[3]/bool[@name='[elevated]'][.='false']\"\n      );\n\n      // Exact matching.\n      assertQ(\"\", req(CommonParams.Q, \"QQQQ EE\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\"),\n          \"//*[@numFound='0']\"\n      );\n\n      // Subset matching.\n      assertQ(\"\", req(CommonParams.Q, \"BB DD CC VV\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\"),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/str[@name='id'][.='10']\",\n          \"//result/doc[2]/str[@name='id'][.='12']\",\n          \"//result/doc[3]/str[@name='id'][.='11']\",\n          \"//result/doc[4]/str[@name='id'][.='14']\",\n          \"//result/doc[1]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[2]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[3]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[4]/bool[@name='[elevated]'][.='false']\"\n      );\n\n      // Subset + exact matching.\n      assertQ(\"\", req(CommonParams.Q, \"BB CC\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\"),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/str[@name='id'][.='13']\",\n          \"//result/doc[2]/str[@name='id'][.='10']\",\n          \"//result/doc[3]/str[@name='id'][.='12']\",\n          \"//result/doc[4]/str[@name='id'][.='11']\",\n          \"//result/doc[1]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[2]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[3]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[4]/bool[@name='[elevated]'][.='true']\"\n      );\n\n      // Subset matching.\n      assertQ(\"\", req(CommonParams.Q, \"AA BB DD CC AA\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\"),\n          \"//*[@numFound='4']\",\n          \"//result/doc[1]/str[@name='id'][.='10']\",\n          \"//result/doc[2]/str[@name='id'][.='12']\",\n          \"//result/doc[3]/str[@name='id'][.='11']\",\n          \"//result/doc[4]/str[@name='id'][.='14']\",\n          \"//result/doc[1]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[2]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[3]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[4]/bool[@name='[elevated]'][.='true']\"\n      );\n\n      // Subset matching.\n      assertQ(\"\", req(CommonParams.Q, \"AA RR BB DD AA\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\"),\n          \"//*[@numFound='3']\",\n          \"//result/doc[1]/str[@name='id'][.='12']\",\n          \"//result/doc[2]/str[@name='id'][.='14']\",\n          \"//result/doc[3]/str[@name='id'][.='10']\",\n          \"//result/doc[1]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[2]/bool[@name='[elevated]'][.='true']\",\n          \"//result/doc[3]/bool[@name='[elevated]'][.='false']\"\n      );\n\n      // Subset matching.\n      assertQ(\"\", req(CommonParams.Q, \"AA BB EE\", CommonParams.QT, \"/elevate\",\n          CommonParams.FL, \"id, score, [elevated]\")\n          , \"//*[@numFound='0']\"\n          );\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6046c615b67e878b7c0ab9257d01dd759493f06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e6046c615b67e878b7c0ab9257d01dd759493f06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e6046c615b67e878b7c0ab9257d01dd759493f06"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6046c615b67e878b7c0ab9257d01dd759493f06","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"e6046c615b67e878b7c0ab9257d01dd759493f06":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}