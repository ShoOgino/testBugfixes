{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#run(Automaton,String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#run(Automaton,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#run(Automaton,String).mjava","sourceNew":"  /**\n   * Returns true if the given string is accepted by the automaton.\n   * <p>\n   * Complexity: linear in the length of the string.\n   * <p>\n   * <b>Note:</b> for full performance, use the {@link RunAutomaton} class.\n   */\n  public static boolean run(Automaton a, String s) {\n    if (a.isSingleton()) return s.equals(a.singleton);\n    if (a.deterministic) {\n      State p = a.initial;\n      for (int i = 0, cp = 0; i < s.length(); i += Character.charCount(cp)) {\n        State q = p.step(cp = s.codePointAt(i));\n        if (q == null) return false;\n        p = q;\n      }\n      return p.accept;\n    } else {\n      State[] states = a.getNumberedStates();\n      LinkedList<State> pp = new LinkedList<State>();\n      LinkedList<State> pp_other = new LinkedList<State>();\n      BitSet bb = new BitSet(states.length);\n      BitSet bb_other = new BitSet(states.length);\n      pp.add(a.initial);\n      ArrayList<State> dest = new ArrayList<State>();\n      boolean accept = a.initial.accept;\n      for (int i = 0, c = 0; i < s.length(); i += Character.charCount(c)) {\n        c = s.codePointAt(i);\n        accept = false;\n        pp_other.clear();\n        bb_other.clear();\n        for (State p : pp) {\n          dest.clear();\n          p.step(c, dest);\n          for (State q : dest) {\n            if (q.accept) accept = true;\n            if (!bb_other.get(q.number)) {\n              bb_other.set(q.number);\n              pp_other.add(q);\n            }\n          }\n        }\n        LinkedList<State> tp = pp;\n        pp = pp_other;\n        pp_other = tp;\n        BitSet tb = bb;\n        bb = bb_other;\n        bb_other = tb;\n      }\n      return accept;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given string is accepted by the automaton.\n   * <p>\n   * Complexity: linear in the length of the string.\n   * <p>\n   * <b>Note:</b> for full performance, use the {@link RunAutomaton} class.\n   */\n  public static boolean run(Automaton a, String s) {\n    if (a.isSingleton()) return s.equals(a.singleton);\n    if (a.deterministic) {\n      State p = a.initial;\n      for (int i = 0, cp = 0; i < s.length(); i += Character.charCount(cp)) {\n        State q = p.step(cp = s.codePointAt(i));\n        if (q == null) return false;\n        p = q;\n      }\n      return p.accept;\n    } else {\n      State[] states = a.getNumberedStates();\n      LinkedList<State> pp = new LinkedList<State>();\n      LinkedList<State> pp_other = new LinkedList<State>();\n      BitSet bb = new BitSet(states.length);\n      BitSet bb_other = new BitSet(states.length);\n      pp.add(a.initial);\n      ArrayList<State> dest = new ArrayList<State>();\n      boolean accept = a.initial.accept;\n      for (int i = 0, c = 0; i < s.length(); i += Character.charCount(c)) {\n        c = s.codePointAt(i);\n        accept = false;\n        pp_other.clear();\n        bb_other.clear();\n        for (State p : pp) {\n          dest.clear();\n          p.step(c, dest);\n          for (State q : dest) {\n            if (q.accept) accept = true;\n            if (!bb_other.get(q.number)) {\n              bb_other.set(q.number);\n              pp_other.add(q);\n            }\n          }\n        }\n        LinkedList<State> tp = pp;\n        pp = pp_other;\n        pp_other = tp;\n        BitSet tb = bb;\n        bb = bb_other;\n        bb_other = tb;\n      }\n      return accept;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#run(Automaton,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#run(Automaton,String).mjava","sourceNew":"  /**\n   * Returns true if the given string is accepted by the automaton.\n   * <p>\n   * Complexity: linear in the length of the string.\n   * <p>\n   * <b>Note:</b> for full performance, use the {@link RunAutomaton} class.\n   */\n  public static boolean run(Automaton a, String s) {\n    if (a.isSingleton()) return s.equals(a.singleton);\n    if (a.deterministic) {\n      State p = a.initial;\n      for (int i = 0, cp = 0; i < s.length(); i += Character.charCount(cp)) {\n        State q = p.step(cp = s.codePointAt(i));\n        if (q == null) return false;\n        p = q;\n      }\n      return p.accept;\n    } else {\n      State[] states = a.getNumberedStates();\n      LinkedList<State> pp = new LinkedList<>();\n      LinkedList<State> pp_other = new LinkedList<>();\n      BitSet bb = new BitSet(states.length);\n      BitSet bb_other = new BitSet(states.length);\n      pp.add(a.initial);\n      ArrayList<State> dest = new ArrayList<>();\n      boolean accept = a.initial.accept;\n      for (int i = 0, c = 0; i < s.length(); i += Character.charCount(c)) {\n        c = s.codePointAt(i);\n        accept = false;\n        pp_other.clear();\n        bb_other.clear();\n        for (State p : pp) {\n          dest.clear();\n          p.step(c, dest);\n          for (State q : dest) {\n            if (q.accept) accept = true;\n            if (!bb_other.get(q.number)) {\n              bb_other.set(q.number);\n              pp_other.add(q);\n            }\n          }\n        }\n        LinkedList<State> tp = pp;\n        pp = pp_other;\n        pp_other = tp;\n        BitSet tb = bb;\n        bb = bb_other;\n        bb_other = tb;\n      }\n      return accept;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns true if the given string is accepted by the automaton.\n   * <p>\n   * Complexity: linear in the length of the string.\n   * <p>\n   * <b>Note:</b> for full performance, use the {@link RunAutomaton} class.\n   */\n  public static boolean run(Automaton a, String s) {\n    if (a.isSingleton()) return s.equals(a.singleton);\n    if (a.deterministic) {\n      State p = a.initial;\n      for (int i = 0, cp = 0; i < s.length(); i += Character.charCount(cp)) {\n        State q = p.step(cp = s.codePointAt(i));\n        if (q == null) return false;\n        p = q;\n      }\n      return p.accept;\n    } else {\n      State[] states = a.getNumberedStates();\n      LinkedList<State> pp = new LinkedList<State>();\n      LinkedList<State> pp_other = new LinkedList<State>();\n      BitSet bb = new BitSet(states.length);\n      BitSet bb_other = new BitSet(states.length);\n      pp.add(a.initial);\n      ArrayList<State> dest = new ArrayList<State>();\n      boolean accept = a.initial.accept;\n      for (int i = 0, c = 0; i < s.length(); i += Character.charCount(c)) {\n        c = s.codePointAt(i);\n        accept = false;\n        pp_other.clear();\n        bb_other.clear();\n        for (State p : pp) {\n          dest.clear();\n          p.step(c, dest);\n          for (State q : dest) {\n            if (q.accept) accept = true;\n            if (!bb_other.get(q.number)) {\n              bb_other.set(q.number);\n              pp_other.add(q);\n            }\n          }\n        }\n        LinkedList<State> tp = pp;\n        pp = pp_other;\n        pp_other = tp;\n        BitSet tb = bb;\n        bb = bb_other;\n        bb_other = tb;\n      }\n      return accept;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#run(Automaton,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns true if the given string is accepted by the automaton.\n   * <p>\n   * Complexity: linear in the length of the string.\n   * <p>\n   * <b>Note:</b> for full performance, use the {@link RunAutomaton} class.\n   */\n  public static boolean run(Automaton a, String s) {\n    if (a.isSingleton()) return s.equals(a.singleton);\n    if (a.deterministic) {\n      State p = a.initial;\n      for (int i = 0, cp = 0; i < s.length(); i += Character.charCount(cp)) {\n        State q = p.step(cp = s.codePointAt(i));\n        if (q == null) return false;\n        p = q;\n      }\n      return p.accept;\n    } else {\n      State[] states = a.getNumberedStates();\n      LinkedList<State> pp = new LinkedList<>();\n      LinkedList<State> pp_other = new LinkedList<>();\n      BitSet bb = new BitSet(states.length);\n      BitSet bb_other = new BitSet(states.length);\n      pp.add(a.initial);\n      ArrayList<State> dest = new ArrayList<>();\n      boolean accept = a.initial.accept;\n      for (int i = 0, c = 0; i < s.length(); i += Character.charCount(c)) {\n        c = s.codePointAt(i);\n        accept = false;\n        pp_other.clear();\n        bb_other.clear();\n        for (State p : pp) {\n          dest.clear();\n          p.step(c, dest);\n          for (State q : dest) {\n            if (q.accept) accept = true;\n            if (!bb_other.get(q.number)) {\n              bb_other.set(q.number);\n              pp_other.add(q);\n            }\n          }\n        }\n        LinkedList<State> tp = pp;\n        pp = pp_other;\n        pp_other = tp;\n        BitSet tb = bb;\n        bb = bb_other;\n        bb_other = tb;\n      }\n      return accept;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#run(Automaton,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns true if the given string is accepted by the automaton.\n   * <p>\n   * Complexity: linear in the length of the string.\n   * <p>\n   * <b>Note:</b> for full performance, use the {@link RunAutomaton} class.\n   */\n  public static boolean run(Automaton a, String s) {\n    if (a.isSingleton()) return s.equals(a.singleton);\n    if (a.deterministic) {\n      State p = a.initial;\n      for (int i = 0, cp = 0; i < s.length(); i += Character.charCount(cp)) {\n        State q = p.step(cp = s.codePointAt(i));\n        if (q == null) return false;\n        p = q;\n      }\n      return p.accept;\n    } else {\n      State[] states = a.getNumberedStates();\n      LinkedList<State> pp = new LinkedList<>();\n      LinkedList<State> pp_other = new LinkedList<>();\n      BitSet bb = new BitSet(states.length);\n      BitSet bb_other = new BitSet(states.length);\n      pp.add(a.initial);\n      ArrayList<State> dest = new ArrayList<>();\n      boolean accept = a.initial.accept;\n      for (int i = 0, c = 0; i < s.length(); i += Character.charCount(c)) {\n        c = s.codePointAt(i);\n        accept = false;\n        pp_other.clear();\n        bb_other.clear();\n        for (State p : pp) {\n          dest.clear();\n          p.step(c, dest);\n          for (State q : dest) {\n            if (q.accept) accept = true;\n            if (!bb_other.get(q.number)) {\n              bb_other.set(q.number);\n              pp_other.add(q);\n            }\n          }\n        }\n        LinkedList<State> tp = pp;\n        pp = pp_other;\n        pp_other = tp;\n        BitSet tb = bb;\n        bb = bb_other;\n        bb_other = tb;\n      }\n      return accept;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5c84485629d80d203608e8975a1139de9933cc38":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}