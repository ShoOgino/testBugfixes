{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#verifyDebugSections(SolrQuery,SolrClient).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#verifyDebugSections(SolrQuery,SolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#verifyDebugSections(SolrQuery,SolrServer).mjava","sourceNew":"  private void verifyDebugSections(SolrQuery query, SolrClient client) throws SolrServerException {\n    query.set(\"debugQuery\", \"true\");\n    query.remove(\"debug\");\n    QueryResponse response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"true\");\n    query.remove(\"debugQuery\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"track\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"query\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"results\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"timing\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"false\");\n    response = client.query(query);\n    assertNull(response.getDebugMap());\n  }\n\n","sourceOld":"  private void verifyDebugSections(SolrQuery query, SolrServer server) throws SolrServerException {\n    query.set(\"debugQuery\", \"true\");\n    query.remove(\"debug\");\n    QueryResponse response = server.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"true\");\n    query.remove(\"debugQuery\");\n    response = server.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\",  \"track\");\n    response = server.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\",  \"query\");\n    response = server.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\",  \"results\");\n    response = server.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\",  \"timing\");\n    response = server.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\",  \"false\");\n    response = server.query(query);\n    assertNull(response.getDebugMap());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa","date":1425039471,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#verifyDebugSections(SolrQuery,SolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#verifyDebugSections(SolrQuery,SolrClient).mjava","sourceNew":"  private void verifyDebugSections(SolrQuery query, SolrClient client) throws SolrServerException, IOException {\n    query.set(\"debugQuery\", \"true\");\n    query.remove(\"debug\");\n    QueryResponse response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"true\");\n    query.remove(\"debugQuery\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"track\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"query\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"results\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"timing\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"false\");\n    response = client.query(query);\n    assertNull(response.getDebugMap());\n  }\n\n","sourceOld":"  private void verifyDebugSections(SolrQuery query, SolrClient client) throws SolrServerException {\n    query.set(\"debugQuery\", \"true\");\n    query.remove(\"debug\");\n    QueryResponse response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"true\");\n    query.remove(\"debugQuery\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"track\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"query\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"results\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"timing\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"false\");\n    response = client.query(query);\n    assertNull(response.getDebugMap());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#verifyDebugSections(SolrQuery,SolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#verifyDebugSections(SolrQuery,SolrClient).mjava","sourceNew":"  private void verifyDebugSections(SolrQuery query, SolrClient client) throws SolrServerException, IOException {\n    query.set(\"debugQuery\", \"true\");\n    query.remove(\"debug\");\n    QueryResponse response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"true\");\n    query.remove(\"debugQuery\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"track\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"query\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"results\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"timing\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"false\");\n    response = client.query(query);\n    assertNull(response.getDebugMap());\n  }\n\n","sourceOld":"  private void verifyDebugSections(SolrQuery query, SolrClient client) throws SolrServerException {\n    query.set(\"debugQuery\", \"true\");\n    query.remove(\"debug\");\n    QueryResponse response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"true\");\n    query.remove(\"debugQuery\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"track\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"query\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertInDebug(response, \"rawquerystring\");\n    assertInDebug(response, \"querystring\");\n    assertInDebug(response, \"parsedquery\");\n    assertInDebug(response, \"parsedquery_toString\");\n    assertInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"results\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertInDebug(response, \"explain\");\n    assertNotInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"timing\");\n    response = client.query(query);\n    assertFalse(response.getDebugMap().isEmpty());\n    assertNotInDebug(response, \"track\");\n    assertNotInDebug(response, \"rawquerystring\");\n    assertNotInDebug(response, \"querystring\");\n    assertNotInDebug(response, \"parsedquery\");\n    assertNotInDebug(response, \"parsedquery_toString\");\n    assertNotInDebug(response, \"QParser\");\n    assertNotInDebug(response, \"explain\");\n    assertInDebug(response, \"timing\");\n    \n    query.set(\"debug\", \"false\");\n    response = client.query(query);\n    assertNull(response.getDebugMap());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["bafca15d8e408346a67f4282ad1143b88023893b","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}