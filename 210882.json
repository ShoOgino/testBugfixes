{"path":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","commits":[{"id":"8493985e6883b3fa8231d172694d2aa3a85cb182","date":1327920390,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,ExecutorService).mjava","sourceNew":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","sourceOld":"  /**\n   * Creates a searcher searching the provided top-level {@link ReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see ReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(ReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(ReaderContext,ExecutorService).mjava","sourceNew":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","sourceOld":"  /**\n   * Creates a searcher searching the provided top-level {@link ReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see ReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(ReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader;\n    reader = context.reader;\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#IndexSearcher(IndexReaderContext,ExecutorService).mjava","sourceNew":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","sourceOld":"  /**\n   * Creates a searcher searching the provided top-level {@link IndexReaderContext}.\n   * <p>\n   * Given a non-<code>null</code> {@link ExecutorService} this method runs\n   * searches for each segment separately, using the provided ExecutorService.\n   * IndexSearcher will not shutdown/awaitTermination this ExecutorService on\n   * close; you must do so, eventually, on your own. NOTE: if you are using\n   * {@link NIOFSDirectory}, do not use the shutdownNow method of\n   * ExecutorService as this uses Thread.interrupt under-the-hood which can\n   * silently close file descriptors (see <a\n   * href=\"https://issues.apache.org/jira/browse/LUCENE-2239\">LUCENE-2239</a>).\n   * \n   * @see IndexReaderContext\n   * @see IndexReader#getTopReaderContext()\n   * @lucene.experimental\n   */\n  public IndexSearcher(IndexReaderContext context, ExecutorService executor) {\n    assert context.isTopLevel: \"IndexSearcher's ReaderContext must be topLevel for reader\" + context.reader();\n    reader = context.reader();\n    this.executor = executor;\n    this.readerContext = context;\n    leafContexts = ReaderUtil.leaves(context);\n    this.leafSlices = executor == null ? null : slices(leafContexts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8493985e6883b3fa8231d172694d2aa3a85cb182"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8493985e6883b3fa8231d172694d2aa3a85cb182","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}