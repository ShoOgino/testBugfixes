{"path":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean).mjava","commits":[{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean).mjava","sourceNew":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, IndexDeletionPolicy deletionPolicy, boolean autoCommit)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n    this.infoStream = defaultInfoStream;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.write(directory);\n      } else {\n        segmentInfos.read(directory);\n      }\n\n      this.autoCommit = autoCommit;\n      if (!autoCommit) {\n        rollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n      }\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream);\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.write(directory);\n      } else {\n        segmentInfos.read(directory);\n      }\n\n      // Create a deleter to keep track of which files can\n      // be deleted:\n      deleter = new IndexFileDeleter(segmentInfos, directory);\n      deleter.setInfoStream(infoStream);\n      deleter.findDeletableFiles();\n      deleter.deleteFiles();\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean).mjava","sourceNew":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, IndexDeletionPolicy deletionPolicy, boolean autoCommit)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n    this.infoStream = defaultInfoStream;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.write(directory);\n      } else {\n        segmentInfos.read(directory);\n      }\n\n      this.autoCommit = autoCommit;\n      if (!autoCommit) {\n        rollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n      }\n\n      docWriter = new DocumentsWriter(directory, this);\n      docWriter.setInfoStream(infoStream);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, IndexDeletionPolicy deletionPolicy, boolean autoCommit)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n    this.infoStream = defaultInfoStream;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.write(directory);\n      } else {\n        segmentInfos.read(directory);\n      }\n\n      this.autoCommit = autoCommit;\n      if (!autoCommit) {\n        rollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n      }\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream);\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean).mjava","sourceNew":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, IndexDeletionPolicy deletionPolicy, boolean autoCommit)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n    this.infoStream = defaultInfoStream;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.write(directory);\n      } else {\n        segmentInfos.read(directory);\n      }\n\n      this.autoCommit = autoCommit;\n      if (!autoCommit) {\n        rollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n      }\n\n      docWriter = new DocumentsWriter(directory, this);\n      docWriter.setInfoStream(infoStream);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      pushMaxBufferedDocs();\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, IndexDeletionPolicy deletionPolicy, boolean autoCommit)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n    this.infoStream = defaultInfoStream;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.write(directory);\n      } else {\n        segmentInfos.read(directory);\n      }\n\n      this.autoCommit = autoCommit;\n      if (!autoCommit) {\n        rollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n      }\n\n      docWriter = new DocumentsWriter(directory, this);\n      docWriter.setInfoStream(infoStream);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67006a60923e2124212d3baa0d29b444bcbd8373","date":1191425052,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean).mjava","sourceNew":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, IndexDeletionPolicy deletionPolicy, boolean autoCommit)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n    this.infoStream = defaultInfoStream;\n    setMessageID();\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.write(directory);\n      } else {\n        segmentInfos.read(directory);\n      }\n\n      this.autoCommit = autoCommit;\n      if (!autoCommit) {\n        rollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n      }\n\n      docWriter = new DocumentsWriter(directory, this);\n      docWriter.setInfoStream(infoStream);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, IndexDeletionPolicy deletionPolicy, boolean autoCommit)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n    this.infoStream = defaultInfoStream;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.write(directory);\n      } else {\n        segmentInfos.read(directory);\n      }\n\n      this.autoCommit = autoCommit;\n      if (!autoCommit) {\n        rollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n      }\n\n      docWriter = new DocumentsWriter(directory, this);\n      docWriter.setInfoStream(infoStream);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      pushMaxBufferedDocs();\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,boolean,IndexDeletionPolicy,boolean).mjava","sourceNew":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, IndexDeletionPolicy deletionPolicy, boolean autoCommit, int maxFieldLength)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n    this.infoStream = defaultInfoStream;\n    this.maxFieldLength = maxFieldLength;\n    setMessageID();\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.write(directory);\n      } else {\n        segmentInfos.read(directory);\n      }\n\n      this.autoCommit = autoCommit;\n      if (!autoCommit) {\n        rollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n      }\n\n      docWriter = new DocumentsWriter(directory, this);\n      docWriter.setInfoStream(infoStream);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":"  private void init(Directory d, Analyzer a, final boolean create, boolean closeDir, IndexDeletionPolicy deletionPolicy, boolean autoCommit)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    this.closeDir = closeDir;\n    directory = d;\n    analyzer = a;\n    this.infoStream = defaultInfoStream;\n    setMessageID();\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(IndexWriter.WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n        }\n        segmentInfos.write(directory);\n      } else {\n        segmentInfos.read(directory);\n      }\n\n      this.autoCommit = autoCommit;\n      if (!autoCommit) {\n        rollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();\n      }\n\n      docWriter = new DocumentsWriter(directory, this);\n      docWriter.setInfoStream(infoStream);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["67006a60923e2124212d3baa0d29b444bcbd8373"],"67006a60923e2124212d3baa0d29b444bcbd8373":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b6187898fc4413ccd18229711786550a280383c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["8b6187898fc4413ccd18229711786550a280383c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["235efcba838a273934c5dd0ef66bb07c7fb0d718"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["67006a60923e2124212d3baa0d29b444bcbd8373"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"67006a60923e2124212d3baa0d29b444bcbd8373":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b6187898fc4413ccd18229711786550a280383c"],"8b6187898fc4413ccd18229711786550a280383c":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}