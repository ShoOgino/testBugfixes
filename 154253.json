{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter#close().mjava","commits":[{"id":"c6d238816bcdf9bbe4ec886226d89bd93834eb7e","date":1413925889,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter#close().mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter#close().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter#close().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c6d238816bcdf9bbe4ec886226d89bd93834eb7e"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6d238816bcdf9bbe4ec886226d89bd93834eb7e","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}