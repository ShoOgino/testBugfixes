{"path":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","date":1280297653,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(r,\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new MockRAMDirectory();\n    try {\n      Random r = newRandom();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(r,\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(r,\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws Exception { \n    Random r = newRandom();\n    Directory dir = newDirectory(r);\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(r,\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new MockRAMDirectory();\n    try {\n      Random r = newRandom();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(r,\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws Exception { \n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[random.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws Exception { \n    Random r = newRandom();\n    Directory dir = newDirectory(r);\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(r,\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws Exception { \n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[random.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws Exception { \n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[random.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws Exception { \n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[random.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws Exception { \n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[random.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws Exception { \n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[random.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws Exception { \n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[random.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws Exception {\n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f,\n                            data[f % data.length]\n                            + '#' + data[random.nextInt(data.length)],\n                            Field.Store.YES,\n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws RuntimeException { \n    Directory dir = new RAMDirectory();\n    try {\n      Random r = newRandom();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      \n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(new Field(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[r.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws Exception { \n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                     TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[random.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws Exception { \n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[random.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws Exception { \n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                     TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[random.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws Exception { \n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[random.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws Exception {\n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                     TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f,\n                            data[f % data.length]\n                            + '#' + data[random.nextInt(data.length)],\n                            Field.Store.YES,\n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws Exception {\n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f,\n                            data[f % data.length]\n                            + '#' + data[random.nextInt(data.length)],\n                            Field.Store.YES,\n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws Exception { \n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                     TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[random.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws Exception { \n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                     TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[random.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws Exception {\n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                     TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f,\n                            data[f % data.length]\n                            + '#' + data[random.nextInt(data.length)],\n                            Field.Store.YES,\n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws Exception {\n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                     TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f,\n                            data[f % data.length]\n                            + '#' + data[random.nextInt(data.length)],\n                            Field.Store.YES,\n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws Exception {\n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                     TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f,\n                            data[f % data.length]\n                            + '#' + data[random.nextInt(data.length)],\n                            Field.Store.YES,\n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws Exception { \n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                     TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[random.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws Exception {\n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                     TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f,\n                            data[f % data.length]\n                            + '#' + data[random.nextInt(data.length)],\n                            Field.Store.YES,\n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws Exception { \n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                     TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[random.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private Directory makeIndex() throws Exception {\n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                     TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f,\n                            data[f % data.length]\n                            + '#' + data[random.nextInt(data.length)],\n                            Field.Store.YES,\n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws Exception { \n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                     TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f, \n                            data[f % data.length] \n                            + '#' + data[random.nextInt(data.length)], \n                            Field.Store.YES, \n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private static Directory makeIndex() throws Exception {\n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                     TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f,\n                            data[f % data.length]\n                            + '#' + data[random.nextInt(data.length)],\n                            Field.Store.NO,\n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws Exception {\n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                     TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f,\n                            data[f % data.length]\n                            + '#' + data[random.nextInt(data.length)],\n                            Field.Store.YES,\n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private static Directory makeIndex() throws Exception {\n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                     TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f,\n                            data[f % data.length]\n                            + '#' + data[random.nextInt(data.length)],\n                            Field.Store.NO,\n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws Exception {\n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                     TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f,\n                            data[f % data.length]\n                            + '#' + data[random.nextInt(data.length)],\n                            Field.Store.YES,\n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private static Directory makeIndex() throws Exception {\n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                     TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f,\n                            data[f % data.length]\n                            + '#' + data[random.nextInt(data.length)],\n                            Field.Store.NO,\n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private Directory makeIndex() throws Exception {\n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                     TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f,\n                            data[f % data.length]\n                            + '#' + data[random.nextInt(data.length)],\n                            Field.Store.YES,\n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyBug#makeIndex().mjava","sourceNew":"  private static Directory makeIndex() throws Exception {\n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                     TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f,\n                            data[f % data.length]\n                            + '#' + data[random.nextInt(data.length)],\n                            TextField.TYPE_UNSTORED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","sourceOld":"  private static Directory makeIndex() throws Exception {\n    Directory dir = newDirectory();\n    try {\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n                                                                     TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      for (int d = 1; d <= NUM_DOCS; d++) {\n        Document doc = new Document();\n        for (int f = 1; f <= NUM_FIELDS; f++ ) {\n          doc.add(newField(\"f\"+f,\n                            data[f % data.length]\n                            + '#' + data[random.nextInt(data.length)],\n                            Field.Store.NO,\n                            Field.Index.ANALYZED));\n        }\n        writer.addDocument(doc);\n      }\n      writer.close();\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"c19f985e36a65cc969e8e564fe337a0d41512075":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c19f985e36a65cc969e8e564fe337a0d41512075"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","c19f985e36a65cc969e8e564fe337a0d41512075"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["f2c5f0cb44df114db4228c8f77861714b5cabaea","962d04139994fce5193143ef35615499a9a96d78"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["132903c28af3aa6f67284b78de91c0f0a99488c2","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1509f151d7692d84fae414b2b799ac06ba60fcb4"]},"commit2Childs":{"132903c28af3aa6f67284b78de91c0f0a99488c2":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","962d04139994fce5193143ef35615499a9a96d78"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","1509f151d7692d84fae414b2b799ac06ba60fcb4","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"d572389229127c297dd1fa5ce4758e1cec41e799":["b21422ff1d1d56499dec481f193b402e5e8def5b","8dc26bfa5ebbc55b5a04fbec545dfcec647b046b"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"962d04139994fce5193143ef35615499a9a96d78":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}