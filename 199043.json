{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.SegmentTermsEnum#next().mjava","commits":[{"id":"6d01ed6d1df51191983f4dd157aedf5f4650e2b3","date":1376572546,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.SegmentTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.SegmentTermsEnum#next().mjava","sourceNew":"      /* Decodes only the term bytes of the next term.  If caller then asks for\n         metadata, ie docFreq, totalTermFreq or pulls a D/&PEnum, we then (lazily)\n         decode all metadata up to the current term. */\n      @Override\n      public BytesRef next() throws IOException {\n\n        if (in == null) {\n          // Fresh TermsEnum; seek to first term:\n          final FST.Arc<BytesRef> arc;\n          if (index != null) {\n            arc = index.getFirstArc(arcs[0]);\n            // Empty string prefix must have an output in the index!\n            assert arc.isFinal();\n          } else {\n            arc = null;\n          }\n          currentFrame = pushFrame(arc, rootCode, 0);\n          currentFrame.loadBlock();\n        }\n\n        targetBeforeCurrentLength = currentFrame.ord;\n\n        assert !eof;\n        //if (DEBUG) {\n        //System.out.println(\"\\nBTTR.next seg=\" + segment + \" term=\" + brToString(term) + \" termExists?=\" + termExists + \" field=\" + fieldInfo.name + \" termBlockOrd=\" + currentFrame.state.termBlockOrd + \" validIndexPrefix=\" + validIndexPrefix);\n        //printSeekState();\n        //}\n\n        if (currentFrame == staticFrame) {\n          // If seek was previously called and the term was\n          // cached, or seek(TermState) was called, usually\n          // caller is just going to pull a D/&PEnum or get\n          // docFreq, etc.  But, if they then call next(),\n          // this method catches up all internal state so next()\n          // works properly:\n          //if (DEBUG) System.out.println(\"  re-seek to pending term=\" + term.utf8ToString() + \" \" + term);\n          final boolean result = seekExact(term);\n          assert result;\n        }\n\n        // Pop finished blocks\n        while (currentFrame.nextEnt == currentFrame.entCount) {\n          if (!currentFrame.isLastInFloor) {\n            currentFrame.loadNextFloorBlock();\n          } else {\n            //if (DEBUG) System.out.println(\"  pop frame\");\n            if (currentFrame.ord == 0) {\n              //if (DEBUG) System.out.println(\"  return null\");\n              assert setEOF();\n              term.length = 0;\n              validIndexPrefix = 0;\n              currentFrame.rewind();\n              termExists = false;\n              return null;\n            }\n            final long lastFP = currentFrame.fpOrig;\n            currentFrame = stack[currentFrame.ord-1];\n\n            if (currentFrame.nextEnt == -1 || currentFrame.lastSubFP != lastFP) {\n              // We popped into a frame that's not loaded\n              // yet or not scan'd to the right entry\n              currentFrame.scanToFloorFrame(term);\n              currentFrame.loadBlock();\n              currentFrame.scanToSubBlock(lastFP);\n            }\n\n            // Note that the seek state (last seek) has been\n            // invalidated beyond this depth\n            validIndexPrefix = Math.min(validIndexPrefix, currentFrame.prefix);\n            //if (DEBUG) {\n            //System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n            //}\n          }\n        }\n\n        while(true) {\n          if (currentFrame.next()) {\n            // Push to new block:\n            //if (DEBUG) System.out.println(\"  push frame\");\n            currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length);\n            // This is a \"next\" frame -- even if it's\n            // floor'd we must pretend it isn't so we don't\n            // try to scan to the right floor frame:\n            currentFrame.isFloor = false;\n            //currentFrame.hasTerms = true;\n            currentFrame.loadBlock();\n          } else {\n            //if (DEBUG) System.out.println(\"  return term=\" + term.utf8ToString() + \" \" + term + \" currentFrame.ord=\" + currentFrame.ord);\n            return term;\n          }\n        }\n      }\n\n","sourceOld":"      /* Decodes only the term bytes of the next term.  If caller then asks for\n         metadata, ie docFreq, totalTermFreq or pulls a D/&PEnum, we then (lazily)\n         decode all metadata up to the current term. */\n      @Override\n      public BytesRef next() throws IOException {\n\n        if (in == null) {\n          // Fresh TermsEnum; seek to first term:\n          final FST.Arc<BytesRef> arc;\n          if (index != null) {\n            arc = index.getFirstArc(arcs[0]);\n            // Empty string prefix must have an output in the index!\n            assert arc.isFinal();\n          } else {\n            arc = null;\n          }\n          currentFrame = pushFrame(arc, rootCode, 0);\n          currentFrame.loadBlock();\n        }\n\n        targetBeforeCurrentLength = currentFrame.ord;\n\n        assert !eof;\n        //if (DEBUG) {\n        //System.out.println(\"\\nBTTR.next seg=\" + segment + \" term=\" + brToString(term) + \" termExists?=\" + termExists + \" field=\" + fieldInfo.name + \" termBlockOrd=\" + currentFrame.state.termBlockOrd + \" validIndexPrefix=\" + validIndexPrefix);\n        //printSeekState();\n        //}\n\n        if (currentFrame == staticFrame) {\n          // If seek was previously called and the term was\n          // cached, or seek(TermState) was called, usually\n          // caller is just going to pull a D/&PEnum or get\n          // docFreq, etc.  But, if they then call next(),\n          // this method catches up all internal state so next()\n          // works properly:\n          //if (DEBUG) System.out.println(\"  re-seek to pending term=\" + term.utf8ToString() + \" \" + term);\n          final boolean result = seekExact(term);\n          assert result;\n        }\n\n        // Pop finished blocks\n        while (currentFrame.nextEnt == currentFrame.entCount) {\n          if (!currentFrame.isLastInFloor) {\n            currentFrame.loadNextFloorBlock();\n          } else {\n            //if (DEBUG) System.out.println(\"  pop frame\");\n            if (currentFrame.ord == 0) {\n              //if (DEBUG) System.out.println(\"  return null\");\n              assert setEOF();\n              term.length = 0;\n              validIndexPrefix = 0;\n              currentFrame.rewind();\n              termExists = false;\n              return null;\n            }\n            final long lastFP = currentFrame.fpOrig;\n            currentFrame = stack[currentFrame.ord-1];\n\n            if (currentFrame.nextEnt == -1 || currentFrame.lastSubFP != lastFP) {\n              // We popped into a frame that's not loaded\n              // yet or not scan'd to the right entry\n              currentFrame.scanToFloorFrame(term);\n              currentFrame.loadBlock();\n              currentFrame.scanToSubBlock(lastFP);\n            }\n\n            // Note that the seek state (last seek) has been\n            // invalidated beyond this depth\n            validIndexPrefix = Math.min(validIndexPrefix, currentFrame.prefix);\n            //if (DEBUG) {\n            //System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n            //}\n          }\n        }\n\n        while(true) {\n          if (currentFrame.next()) {\n            // Push to new block:\n            //if (DEBUG) System.out.println(\"  push frame\");\n            currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length);\n            // This is a \"next\" frame -- even if it's\n            // floor'd we must pretend it isn't so we don't\n            // try to scan to the right floor frame:\n            currentFrame.isFloor = false;\n            //currentFrame.hasTerms = true;\n            currentFrame.loadBlock();\n          } else {\n            //if (DEBUG) System.out.println(\"  return term=\" + term.utf8ToString() + \" \" + term + \" currentFrame.ord=\" + currentFrame.ord);\n            return term;\n          }\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.SegmentTermsEnum#next().mjava","sourceNew":null,"sourceOld":"      /* Decodes only the term bytes of the next term.  If caller then asks for\n         metadata, ie docFreq, totalTermFreq or pulls a D/&PEnum, we then (lazily)\n         decode all metadata up to the current term. */\n      @Override\n      public BytesRef next() throws IOException {\n\n        if (in == null) {\n          // Fresh TermsEnum; seek to first term:\n          final FST.Arc<BytesRef> arc;\n          if (index != null) {\n            arc = index.getFirstArc(arcs[0]);\n            // Empty string prefix must have an output in the index!\n            assert arc.isFinal();\n          } else {\n            arc = null;\n          }\n          currentFrame = pushFrame(arc, rootCode, 0);\n          currentFrame.loadBlock();\n        }\n\n        targetBeforeCurrentLength = currentFrame.ord;\n\n        assert !eof;\n        //if (DEBUG) {\n        //System.out.println(\"\\nBTTR.next seg=\" + segment + \" term=\" + brToString(term) + \" termExists?=\" + termExists + \" field=\" + fieldInfo.name + \" termBlockOrd=\" + currentFrame.state.termBlockOrd + \" validIndexPrefix=\" + validIndexPrefix);\n        //printSeekState();\n        //}\n\n        if (currentFrame == staticFrame) {\n          // If seek was previously called and the term was\n          // cached, or seek(TermState) was called, usually\n          // caller is just going to pull a D/&PEnum or get\n          // docFreq, etc.  But, if they then call next(),\n          // this method catches up all internal state so next()\n          // works properly:\n          //if (DEBUG) System.out.println(\"  re-seek to pending term=\" + term.utf8ToString() + \" \" + term);\n          final boolean result = seekExact(term);\n          assert result;\n        }\n\n        // Pop finished blocks\n        while (currentFrame.nextEnt == currentFrame.entCount) {\n          if (!currentFrame.isLastInFloor) {\n            currentFrame.loadNextFloorBlock();\n          } else {\n            //if (DEBUG) System.out.println(\"  pop frame\");\n            if (currentFrame.ord == 0) {\n              //if (DEBUG) System.out.println(\"  return null\");\n              assert setEOF();\n              term.length = 0;\n              validIndexPrefix = 0;\n              currentFrame.rewind();\n              termExists = false;\n              return null;\n            }\n            final long lastFP = currentFrame.fpOrig;\n            currentFrame = stack[currentFrame.ord-1];\n\n            if (currentFrame.nextEnt == -1 || currentFrame.lastSubFP != lastFP) {\n              // We popped into a frame that's not loaded\n              // yet or not scan'd to the right entry\n              currentFrame.scanToFloorFrame(term);\n              currentFrame.loadBlock();\n              currentFrame.scanToSubBlock(lastFP);\n            }\n\n            // Note that the seek state (last seek) has been\n            // invalidated beyond this depth\n            validIndexPrefix = Math.min(validIndexPrefix, currentFrame.prefix);\n            //if (DEBUG) {\n            //System.out.println(\"  reset validIndexPrefix=\" + validIndexPrefix);\n            //}\n          }\n        }\n\n        while(true) {\n          if (currentFrame.next()) {\n            // Push to new block:\n            //if (DEBUG) System.out.println(\"  push frame\");\n            currentFrame = pushFrame(null, currentFrame.lastSubFP, term.length);\n            // This is a \"next\" frame -- even if it's\n            // floor'd we must pretend it isn't so we don't\n            // try to scan to the right floor frame:\n            currentFrame.isFloor = false;\n            //currentFrame.hasTerms = true;\n            currentFrame.loadBlock();\n          } else {\n            //if (DEBUG) System.out.println(\"  return term=\" + term.utf8ToString() + \" \" + term + \" currentFrame.ord=\" + currentFrame.ord);\n            return term;\n          }\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3"],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}