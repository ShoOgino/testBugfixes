{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#WordDelimiterFilter(Version,TokenStream,byte[],int,CharArraySet).mjava","commits":[{"id":"c85fa43e6918808743daa7847ba0264373af687f","date":1395166336,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#WordDelimiterFilter(Version,TokenStream,byte[],int,CharArraySet).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new WordDelimiterFilter\n   *\n   * @param in TokenStream to be filtered\n   * @param charTypeTable table containing character types\n   * @param configurationFlags Flags configuring the filter\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterFilter(Version matchVersion, TokenStream in, byte[] charTypeTable, int configurationFlags, CharArraySet protWords) {\n    super(in);\n    if (!matchVersion.onOrAfter(Version.LUCENE_48)) {\n      throw new IllegalArgumentException(\"This class only works with Lucene 4.8+. To emulate the old (broken) behavior of WordDelimiterFilter, use Lucene47WordDelimiterFilter\");\n    }\n    this.flags = configurationFlags;\n    this.protWords = protWords;\n    this.iterator = new WordDelimiterIterator(\n        charTypeTable, has(SPLIT_ON_CASE_CHANGE), has(SPLIT_ON_NUMERICS), has(STEM_ENGLISH_POSSESSIVE));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd330c9d05eacbd6e952fe0dea852e7ae037eb50","date":1398873035,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#WordDelimiterFilter(Version,TokenStream,byte[],int,CharArraySet).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#WordDelimiterFilter(Version,TokenStream,byte[],int,CharArraySet).mjava","sourceNew":"  /**\n   * Creates a new WordDelimiterFilter\n   *\n   * @param in TokenStream to be filtered\n   * @param charTypeTable table containing character types\n   * @param configurationFlags Flags configuring the filter\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterFilter(Version matchVersion, TokenStream in, byte[] charTypeTable, int configurationFlags, CharArraySet protWords) {\n    super(in);\n    if (!matchVersion.onOrAfter(Version.LUCENE_4_8)) {\n      throw new IllegalArgumentException(\"This class only works with Lucene 4.8+. To emulate the old (broken) behavior of WordDelimiterFilter, use Lucene47WordDelimiterFilter\");\n    }\n    this.flags = configurationFlags;\n    this.protWords = protWords;\n    this.iterator = new WordDelimiterIterator(\n        charTypeTable, has(SPLIT_ON_CASE_CHANGE), has(SPLIT_ON_NUMERICS), has(STEM_ENGLISH_POSSESSIVE));\n  }\n\n","sourceOld":"  /**\n   * Creates a new WordDelimiterFilter\n   *\n   * @param in TokenStream to be filtered\n   * @param charTypeTable table containing character types\n   * @param configurationFlags Flags configuring the filter\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterFilter(Version matchVersion, TokenStream in, byte[] charTypeTable, int configurationFlags, CharArraySet protWords) {\n    super(in);\n    if (!matchVersion.onOrAfter(Version.LUCENE_48)) {\n      throw new IllegalArgumentException(\"This class only works with Lucene 4.8+. To emulate the old (broken) behavior of WordDelimiterFilter, use Lucene47WordDelimiterFilter\");\n    }\n    this.flags = configurationFlags;\n    this.protWords = protWords;\n    this.iterator = new WordDelimiterIterator(\n        charTypeTable, has(SPLIT_ON_CASE_CHANGE), has(SPLIT_ON_NUMERICS), has(STEM_ENGLISH_POSSESSIVE));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#WordDelimiterFilter(TokenStream,byte[],int,CharArraySet).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#WordDelimiterFilter(Version,TokenStream,byte[],int,CharArraySet).mjava","sourceNew":"  /**\n   * Creates a new WordDelimiterFilter\n   *\n   * @param in TokenStream to be filtered\n   * @param charTypeTable table containing character types\n   * @param configurationFlags Flags configuring the filter\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterFilter(TokenStream in, byte[] charTypeTable, int configurationFlags, CharArraySet protWords) {\n    super(in);\n    this.flags = configurationFlags;\n    this.protWords = protWords;\n    this.iterator = new WordDelimiterIterator(\n        charTypeTable, has(SPLIT_ON_CASE_CHANGE), has(SPLIT_ON_NUMERICS), has(STEM_ENGLISH_POSSESSIVE));\n  }\n\n","sourceOld":"  /**\n   * Creates a new WordDelimiterFilter\n   *\n   * @param in TokenStream to be filtered\n   * @param charTypeTable table containing character types\n   * @param configurationFlags Flags configuring the filter\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterFilter(Version matchVersion, TokenStream in, byte[] charTypeTable, int configurationFlags, CharArraySet protWords) {\n    super(in);\n    if (!matchVersion.onOrAfter(Version.LUCENE_4_8)) {\n      throw new IllegalArgumentException(\"This class only works with Lucene 4.8+. To emulate the old (broken) behavior of WordDelimiterFilter, use Lucene47WordDelimiterFilter\");\n    }\n    this.flags = configurationFlags;\n    this.protWords = protWords;\n    this.iterator = new WordDelimiterIterator(\n        charTypeTable, has(SPLIT_ON_CASE_CHANGE), has(SPLIT_ON_NUMERICS), has(STEM_ENGLISH_POSSESSIVE));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"379db3ad24c4f0214f30a122265a6d6be003a99d":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["c85fa43e6918808743daa7847ba0264373af687f"],"c85fa43e6918808743daa7847ba0264373af687f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c85fa43e6918808743daa7847ba0264373af687f"],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"c85fa43e6918808743daa7847ba0264373af687f":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}