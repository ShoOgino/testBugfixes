{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#topoSort(Automaton).mjava","commits":[{"id":"24a98f5fdd23e04f85819dbc63b47a12f7c44311","date":1482439157,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#topoSort(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  /** Renumbers nodes according to their topo sort */\n  private Automaton topoSort(Automaton in) {\n    int[] newToOld = Operations.topoSortStates(in);\n    int[] oldToNew = new int[newToOld.length];\n\n    Automaton.Builder a = new Automaton.Builder();\n    //System.out.println(\"remap:\");\n    for(int i=0;i<newToOld.length;i++) {\n      a.createState();\n      oldToNew[newToOld[i]] = i;\n      //System.out.println(\"  \" + newToOld[i] + \" -> \" + i);\n      if (in.isAccept(newToOld[i])) {\n        a.setAccept(i, true);\n        //System.out.println(\"    **\");\n      }\n    }\n\n    Transition t = new Transition();\n    for(int i=0;i<newToOld.length;i++) {\n      int count = in.initTransition(newToOld[i], t);\n      for(int j=0;j<count;j++) {\n        in.getNextTransition(t);\n        a.addTransition(i, oldToNew[t.dest], t.min, t.max);\n      }\n    }\n\n    return a.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#topoSort(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  /** Renumbers nodes according to their topo sort */\n  private Automaton topoSort(Automaton in) {\n    int[] newToOld = Operations.topoSortStates(in);\n    int[] oldToNew = new int[newToOld.length];\n\n    Automaton.Builder a = new Automaton.Builder();\n    //System.out.println(\"remap:\");\n    for(int i=0;i<newToOld.length;i++) {\n      a.createState();\n      oldToNew[newToOld[i]] = i;\n      //System.out.println(\"  \" + newToOld[i] + \" -> \" + i);\n      if (in.isAccept(newToOld[i])) {\n        a.setAccept(i, true);\n        //System.out.println(\"    **\");\n      }\n    }\n\n    Transition t = new Transition();\n    for(int i=0;i<newToOld.length;i++) {\n      int count = in.initTransition(newToOld[i], t);\n      for(int j=0;j<count;j++) {\n        in.getNextTransition(t);\n        a.addTransition(i, oldToNew[t.dest], t.min, t.max);\n      }\n    }\n\n    return a.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24a98f5fdd23e04f85819dbc63b47a12f7c44311"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","24a98f5fdd23e04f85819dbc63b47a12f7c44311"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a98f5fdd23e04f85819dbc63b47a12f7c44311","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}