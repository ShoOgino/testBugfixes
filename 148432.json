{"path":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomFilter#getDocIdSet(LeafReaderContext,Bits).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get((int) idSource.get(docID)));\n        }\n      }\n\n      return bits;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get((int) idSource.get(docID)));\n        }\n      }\n\n      return new FixedBitDocIdSet(bits);\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get((int) idSource.get(docID)));\n        }\n      }\n\n      return bits;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get((int) idSource.get(docID)));\n        }\n      }\n\n      return new BitDocIdSet(bits);\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get((int) idSource.get(docID)));\n        }\n      }\n\n      return new FixedBitDocIdSet(bits);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8249072f13ea4354ab7635c2d7a59cc682806dab","date":1429649774,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      Random random = new Random(context.docBase ^ seed);\n      final int maxDoc = context.reader().maxDoc();\n      final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get((int) idSource.get(docID)));\n        }\n      }\n\n      return new BitDocIdSet(bits);\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get((int) idSource.get(docID)));\n        }\n      }\n\n      return new BitDocIdSet(bits);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"    @Override\n    public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n      Random random = new Random(context.docBase ^ seed);\n      final int maxDoc = context.reader().maxDoc();\n      final NumericDocValues idSource = DocValues.getNumeric(context.reader(), \"id\");\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get((int) idSource.get(docID)));\n        }\n      }\n\n      return new BitDocIdSet(bits);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d52e48927ca4ef3655a261f2230b968b6fdf3608":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8249072f13ea4354ab7635c2d7a59cc682806dab":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"80c55596a764e2d397e982828e75fcac5ce430a0":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["80c55596a764e2d397e982828e75fcac5ce430a0"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d52e48927ca4ef3655a261f2230b968b6fdf3608"]},"commit2Childs":{"d52e48927ca4ef3655a261f2230b968b6fdf3608":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"8249072f13ea4354ab7635c2d7a59cc682806dab":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"80c55596a764e2d397e982828e75fcac5ce430a0":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["8249072f13ea4354ab7635c2d7a59cc682806dab"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["80c55596a764e2d397e982828e75fcac5ce430a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}