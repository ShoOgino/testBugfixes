{"path":"lucene/core/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],MergeContext).mjava","commits":[{"id":"1d28f215464f76024caf026606f8ea51a5319c53","date":1527226629,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],MergeContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],IndexWriter).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, MergeContext mergeContext) throws IOException {\n    // first find all old segments\n    final Map<SegmentCommitInfo,Boolean> oldSegments = new HashMap<>();\n    for (final SegmentCommitInfo si : segmentInfos) {\n      final Boolean v = segmentsToMerge.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose(mergeContext)) {\n      message(\"findForcedMerges: segmentsToUpgrade=\" + oldSegments, mergeContext);\n    }\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = in.findForcedMerges(segmentInfos, maxSegmentCount, oldSegments, mergeContext);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.keySet().removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose(mergeContext)) {\n        message(\"findForcedMerges: \" +  in.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments, mergeContext);\n      }\n      final List<SegmentCommitInfo> newInfos = new ArrayList<>();\n      for (final SegmentCommitInfo si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, IndexWriter writer) throws IOException {\n    // first find all old segments\n    final Map<SegmentCommitInfo,Boolean> oldSegments = new HashMap<>();\n    for (final SegmentCommitInfo si : segmentInfos) {\n      final Boolean v = segmentsToMerge.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose(writer)) {\n      message(\"findForcedMerges: segmentsToUpgrade=\" + oldSegments, writer);\n    }\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = in.findForcedMerges(segmentInfos, maxSegmentCount, oldSegments, writer);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.keySet().removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose(writer)) {\n        message(\"findForcedMerges: \" +  in.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments, writer);\n      }\n      final List<SegmentCommitInfo> newInfos = new ArrayList<>();\n      for (final SegmentCommitInfo si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d28f215464f76024caf026606f8ea51a5319c53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d28f215464f76024caf026606f8ea51a5319c53"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d28f215464f76024caf026606f8ea51a5319c53"],"1d28f215464f76024caf026606f8ea51a5319c53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}