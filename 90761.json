{"path":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#setInvertState().mjava","commits":[{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#setInvertState().mjava","pathOld":"/dev/null","sourceNew":"    void setInvertState() {\n      invertState = new FieldInvertState(fieldInfo.name);\n      termsHashPerField = termsHash.addField(invertState, fieldInfo);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#setInvertState().mjava","pathOld":"/dev/null","sourceNew":"    void setInvertState() {\n      invertState = new FieldInvertState(fieldInfo.name);\n      termsHashPerField = termsHash.addField(invertState, fieldInfo);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#setInvertState().mjava","pathOld":"/dev/null","sourceNew":"    void setInvertState() {\n      invertState = new FieldInvertState(fieldInfo.name);\n      termsHashPerField = termsHash.addField(invertState, fieldInfo);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05da2d758a6089e737cdfc230e57a51b472b94b6","date":1413392310,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#setInvertState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#setInvertState().mjava","sourceNew":"    void setInvertState() {\n      invertState = new FieldInvertState(fieldInfo.name);\n      termsHashPerField = termsHash.addField(invertState, fieldInfo);\n      if (fieldInfo.omitsNorms() == false) {\n        assert norms == null;\n        // Even if no documents actually succeed in setting a norm, we still write norms for this segment:\n        norms = new NormValuesWriter(fieldInfo, docState.docWriter.bytesUsed);\n      }\n    }\n\n","sourceOld":"    void setInvertState() {\n      invertState = new FieldInvertState(fieldInfo.name);\n      termsHashPerField = termsHash.addField(invertState, fieldInfo);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","date":1413458798,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#setInvertState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#setInvertState().mjava","sourceNew":"    void setInvertState() {\n      invertState = new FieldInvertState(fieldInfo.name);\n      termsHashPerField = termsHash.addField(invertState, fieldInfo);\n      if (fieldInfo.omitsNorms() == false) {\n        assert norms == null;\n        // Even if no documents actually succeed in setting a norm, we still write norms for this segment:\n        norms = new NormValuesWriter(fieldInfo, docState.docWriter.bytesUsed);\n      }\n    }\n\n","sourceOld":"    void setInvertState() {\n      invertState = new FieldInvertState(fieldInfo.name);\n      termsHashPerField = termsHash.addField(invertState, fieldInfo);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#setInvertState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#setInvertState().mjava","sourceNew":"    void setInvertState() {\n      invertState = new FieldInvertState(indexCreatedVersionMajor, fieldInfo.name);\n      termsHashPerField = termsHash.addField(invertState, fieldInfo);\n      if (fieldInfo.omitsNorms() == false) {\n        assert norms == null;\n        // Even if no documents actually succeed in setting a norm, we still write norms for this segment:\n        norms = new NormValuesWriter(fieldInfo, docState.docWriter.bytesUsed);\n      }\n    }\n\n","sourceOld":"    void setInvertState() {\n      invertState = new FieldInvertState(fieldInfo.name);\n      termsHashPerField = termsHash.addField(invertState, fieldInfo);\n      if (fieldInfo.omitsNorms() == false) {\n        assert norms == null;\n        // Even if no documents actually succeed in setting a norm, we still write norms for this segment:\n        norms = new NormValuesWriter(fieldInfo, docState.docWriter.bytesUsed);\n      }\n    }\n\n","bugFix":null,"bugIntro":["5a4bb2b5569a925d9d26743041864893512a7958"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#setInvertState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#setInvertState().mjava","sourceNew":"    void setInvertState() {\n      invertState = new FieldInvertState(indexCreatedVersionMajor, fieldInfo.name);\n      termsHashPerField = termsHash.addField(invertState, fieldInfo);\n      if (fieldInfo.omitsNorms() == false) {\n        assert norms == null;\n        // Even if no documents actually succeed in setting a norm, we still write norms for this segment:\n        norms = new NormValuesWriter(fieldInfo, docState.docWriter.bytesUsed);\n      }\n    }\n\n","sourceOld":"    void setInvertState() {\n      invertState = new FieldInvertState(fieldInfo.name);\n      termsHashPerField = termsHash.addField(invertState, fieldInfo);\n      if (fieldInfo.omitsNorms() == false) {\n        assert norms == null;\n        // Even if no documents actually succeed in setting a norm, we still write norms for this segment:\n        norms = new NormValuesWriter(fieldInfo, docState.docWriter.bytesUsed);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a4bb2b5569a925d9d26743041864893512a7958","date":1519489313,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#setInvertState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#setInvertState().mjava","sourceNew":"    void setInvertState() {\n      invertState = new FieldInvertState(indexCreatedVersionMajor, fieldInfo.name, fieldInfo.getIndexOptions());\n      termsHashPerField = termsHash.addField(invertState, fieldInfo);\n      if (fieldInfo.omitsNorms() == false) {\n        assert norms == null;\n        // Even if no documents actually succeed in setting a norm, we still write norms for this segment:\n        norms = new NormValuesWriter(fieldInfo, docState.docWriter.bytesUsed);\n      }\n    }\n\n","sourceOld":"    void setInvertState() {\n      invertState = new FieldInvertState(indexCreatedVersionMajor, fieldInfo.name);\n      termsHashPerField = termsHash.addField(invertState, fieldInfo);\n      if (fieldInfo.omitsNorms() == false) {\n        assert norms == null;\n        // Even if no documents actually succeed in setting a norm, we still write norms for this segment:\n        norms = new NormValuesWriter(fieldInfo, docState.docWriter.bytesUsed);\n      }\n    }\n\n","bugFix":["615370d2b876c3435773b5174df2e2242ad7981a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f97270426d92300e08ac1bd1a4ef499ae02e88b7","date":1592503330,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#setInvertState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#setInvertState().mjava","sourceNew":"    void setInvertState() {\n      invertState = new FieldInvertState(indexCreatedVersionMajor, fieldInfo.name, fieldInfo.getIndexOptions());\n      termsHashPerField = termsHash.addField(invertState, fieldInfo);\n      if (fieldInfo.omitsNorms() == false) {\n        assert norms == null;\n        // Even if no documents actually succeed in setting a norm, we still write norms for this segment:\n        norms = new NormValuesWriter(fieldInfo, bytesUsed);\n      }\n    }\n\n","sourceOld":"    void setInvertState() {\n      invertState = new FieldInvertState(indexCreatedVersionMajor, fieldInfo.name, fieldInfo.getIndexOptions());\n      termsHashPerField = termsHash.addField(invertState, fieldInfo);\n      if (fieldInfo.omitsNorms() == false) {\n        assert norms == null;\n        // Even if no documents actually succeed in setting a norm, we still write norms for this segment:\n        norms = new NormValuesWriter(fieldInfo, docState.docWriter.bytesUsed);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a6f8af01d9b3067b143bbdc0a492720e2af97cf","date":1600157724,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexingChain.PerField#setInvertState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#setInvertState().mjava","sourceNew":"    void setInvertState() {\n      invertState = new FieldInvertState(indexCreatedVersionMajor, fieldInfo.name, fieldInfo.getIndexOptions());\n      termsHashPerField = termsHash.addField(invertState, fieldInfo);\n      if (fieldInfo.omitsNorms() == false) {\n        assert norms == null;\n        // Even if no documents actually succeed in setting a norm, we still write norms for this segment:\n        norms = new NormValuesWriter(fieldInfo, bytesUsed);\n      }\n    }\n\n","sourceOld":"    void setInvertState() {\n      invertState = new FieldInvertState(indexCreatedVersionMajor, fieldInfo.name, fieldInfo.getIndexOptions());\n      termsHashPerField = termsHash.addField(invertState, fieldInfo);\n      if (fieldInfo.omitsNorms() == false) {\n        assert norms == null;\n        // Even if no documents actually succeed in setting a norm, we still write norms for this segment:\n        norms = new NormValuesWriter(fieldInfo, bytesUsed);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":5,"author":"noblepaul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexingChain.PerField#setInvertState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain.PerField#setInvertState().mjava","sourceNew":"    void setInvertState() {\n      invertState = new FieldInvertState(indexCreatedVersionMajor, fieldInfo.name, fieldInfo.getIndexOptions());\n      termsHashPerField = termsHash.addField(invertState, fieldInfo);\n      if (fieldInfo.omitsNorms() == false) {\n        assert norms == null;\n        // Even if no documents actually succeed in setting a norm, we still write norms for this segment:\n        norms = new NormValuesWriter(fieldInfo, bytesUsed);\n      }\n    }\n\n","sourceOld":"    void setInvertState() {\n      invertState = new FieldInvertState(indexCreatedVersionMajor, fieldInfo.name, fieldInfo.getIndexOptions());\n      termsHashPerField = termsHash.addField(invertState, fieldInfo);\n      if (fieldInfo.omitsNorms() == false) {\n        assert norms == null;\n        // Even if no documents actually succeed in setting a norm, we still write norms for this segment:\n        norms = new NormValuesWriter(fieldInfo, bytesUsed);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05da2d758a6089e737cdfc230e57a51b472b94b6":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["3394716f52b34ab259ad5247e7595d9f9db6e935","05da2d758a6089e737cdfc230e57a51b472b94b6"],"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["f97270426d92300e08ac1bd1a4ef499ae02e88b7"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3394716f52b34ab259ad5247e7595d9f9db6e935"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","52c7e49be259508735752fba88085255014a6ecf"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["05da2d758a6089e737cdfc230e57a51b472b94b6","615370d2b876c3435773b5174df2e2242ad7981a"],"680b6449f09827f58fe987aff279e014c311d966":["f97270426d92300e08ac1bd1a4ef499ae02e88b7","7a6f8af01d9b3067b143bbdc0a492720e2af97cf"],"615370d2b876c3435773b5174df2e2242ad7981a":["05da2d758a6089e737cdfc230e57a51b472b94b6"],"5a4bb2b5569a925d9d26743041864893512a7958":["615370d2b876c3435773b5174df2e2242ad7981a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f97270426d92300e08ac1bd1a4ef499ae02e88b7":["5a4bb2b5569a925d9d26743041864893512a7958"],"52c7e49be259508735752fba88085255014a6ecf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"]},"commit2Childs":{"05da2d758a6089e737cdfc230e57a51b472b94b6":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":[],"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["680b6449f09827f58fe987aff279e014c311d966"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"3394716f52b34ab259ad5247e7595d9f9db6e935":["05da2d758a6089e737cdfc230e57a51b472b94b6","c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","5a4bb2b5569a925d9d26743041864893512a7958"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3394716f52b34ab259ad5247e7595d9f9db6e935","52c7e49be259508735752fba88085255014a6ecf"],"5a4bb2b5569a925d9d26743041864893512a7958":["f97270426d92300e08ac1bd1a4ef499ae02e88b7"],"f97270426d92300e08ac1bd1a4ef499ae02e88b7":["7a6f8af01d9b3067b143bbdc0a492720e2af97cf","680b6449f09827f58fe987aff279e014c311d966"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}