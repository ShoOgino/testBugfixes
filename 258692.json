{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createAlias(Aliases,ZkNodeProps).mjava","commits":[{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createAlias(Aliases,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#createAlias(Aliases,ZkNodeProps).mjava","sourceNew":"  private void createAlias(Aliases aliases, ZkNodeProps message) {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\");\n    \n    Map<String,Map<String,String>> newAliasesMap = new HashMap<>();\n    Map<String,String> newCollectionAliasesMap = new HashMap<>();\n    Map<String,String> prevColAliases = aliases.getCollectionAliasMap();\n    if (prevColAliases != null) {\n      newCollectionAliasesMap.putAll(prevColAliases);\n    }\n    newCollectionAliasesMap.put(aliasName, collections);\n    newAliasesMap.put(\"collection\", newCollectionAliasesMap);\n    Aliases newAliases = new Aliases(newAliasesMap);\n    byte[] jsonBytes = null;\n    if (newAliases.collectionAliasSize() > 0) { // only sub map right now\n      jsonBytes = Utils.toJSON(newAliases.getAliasMap());\n    }\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES, jsonBytes, true);\n      \n      checkForAlias(aliasName, collections);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  private void createAlias(Aliases aliases, ZkNodeProps message) {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\");\n    \n    Map<String,Map<String,String>> newAliasesMap = new HashMap<>();\n    Map<String,String> newCollectionAliasesMap = new HashMap<>();\n    Map<String,String> prevColAliases = aliases.getCollectionAliasMap();\n    if (prevColAliases != null) {\n      newCollectionAliasesMap.putAll(prevColAliases);\n    }\n    newCollectionAliasesMap.put(aliasName, collections);\n    newAliasesMap.put(\"collection\", newCollectionAliasesMap);\n    Aliases newAliases = new Aliases(newAliasesMap);\n    byte[] jsonBytes = null;\n    if (newAliases.collectionAliasSize() > 0) { // only sub map right now\n      jsonBytes = Utils.toJSON(newAliases.getAliasMap());\n    }\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES, jsonBytes, true);\n      \n      checkForAlias(aliasName, collections);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createAlias(Aliases,ZkNodeProps).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\");\n\n    Map<String, Map<String, String>> newAliasesMap = new HashMap<>();\n    Map<String, String> newCollectionAliasesMap = new HashMap<>();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Map<String, String> prevColAliases = zkStateReader.getAliases().getCollectionAliasMap();\n    if (prevColAliases != null) {\n      newCollectionAliasesMap.putAll(prevColAliases);\n    }\n    newCollectionAliasesMap.put(aliasName, collections);\n    newAliasesMap.put(\"collection\", newCollectionAliasesMap);\n    Aliases newAliases = new Aliases(newAliasesMap);\n    byte[] jsonBytes = null;\n    if (newAliases.collectionAliasSize() > 0) { // only sub map right now\n      jsonBytes = Utils.toJSON(newAliases.getAliasMap());\n    }\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES, jsonBytes, true);\n\n      checkForAlias(aliasName, collections);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  private void createAlias(Aliases aliases, ZkNodeProps message) {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\");\n    \n    Map<String,Map<String,String>> newAliasesMap = new HashMap<>();\n    Map<String,String> newCollectionAliasesMap = new HashMap<>();\n    Map<String,String> prevColAliases = aliases.getCollectionAliasMap();\n    if (prevColAliases != null) {\n      newCollectionAliasesMap.putAll(prevColAliases);\n    }\n    newCollectionAliasesMap.put(aliasName, collections);\n    newAliasesMap.put(\"collection\", newCollectionAliasesMap);\n    Aliases newAliases = new Aliases(newAliasesMap);\n    byte[] jsonBytes = null;\n    if (newAliases.collectionAliasSize() > 0) { // only sub map right now\n      jsonBytes = Utils.toJSON(newAliases.getAliasMap());\n    }\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES, jsonBytes, true);\n      \n      checkForAlias(aliasName, collections);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateAliasCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createAlias(Aliases,ZkNodeProps).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results)\n      throws Exception {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\");\n\n    Map<String, Map<String, String>> newAliasesMap = new HashMap<>();\n    Map<String, String> newCollectionAliasesMap = new HashMap<>();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    Map<String, String> prevColAliases = zkStateReader.getAliases().getCollectionAliasMap();\n    if (prevColAliases != null) {\n      newCollectionAliasesMap.putAll(prevColAliases);\n    }\n    newCollectionAliasesMap.put(aliasName, collections);\n    newAliasesMap.put(\"collection\", newCollectionAliasesMap);\n    Aliases newAliases = new Aliases(newAliasesMap);\n    byte[] jsonBytes = null;\n    if (newAliases.collectionAliasSize() > 0) { // only sub map right now\n      jsonBytes = Utils.toJSON(newAliases.getAliasMap());\n    }\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES, jsonBytes, true);\n\n      checkForAlias(aliasName, collections);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":"  private void createAlias(Aliases aliases, ZkNodeProps message) {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\");\n    \n    Map<String,Map<String,String>> newAliasesMap = new HashMap<>();\n    Map<String,String> newCollectionAliasesMap = new HashMap<>();\n    Map<String,String> prevColAliases = aliases.getCollectionAliasMap();\n    if (prevColAliases != null) {\n      newCollectionAliasesMap.putAll(prevColAliases);\n    }\n    newCollectionAliasesMap.put(aliasName, collections);\n    newAliasesMap.put(\"collection\", newCollectionAliasesMap);\n    Aliases newAliases = new Aliases(newAliasesMap);\n    byte[] jsonBytes = null;\n    if (newAliases.collectionAliasSize() > 0) { // only sub map right now\n      jsonBytes = Utils.toJSON(newAliases.getAliasMap());\n    }\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES, jsonBytes, true);\n      \n      checkForAlias(aliasName, collections);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#createAlias(Aliases,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"  private void createAlias(Aliases aliases, ZkNodeProps message) {\n    String aliasName = message.getStr(NAME);\n    String collections = message.getStr(\"collections\");\n    \n    Map<String,Map<String,String>> newAliasesMap = new HashMap<>();\n    Map<String,String> newCollectionAliasesMap = new HashMap<>();\n    Map<String,String> prevColAliases = aliases.getCollectionAliasMap();\n    if (prevColAliases != null) {\n      newCollectionAliasesMap.putAll(prevColAliases);\n    }\n    newCollectionAliasesMap.put(aliasName, collections);\n    newAliasesMap.put(\"collection\", newCollectionAliasesMap);\n    Aliases newAliases = new Aliases(newAliasesMap);\n    byte[] jsonBytes = null;\n    if (newAliases.collectionAliasSize() > 0) { // only sub map right now\n      jsonBytes = Utils.toJSON(newAliases.getAliasMap());\n    }\n    try {\n      zkStateReader.getZkClient().setData(ZkStateReader.ALIASES, jsonBytes, true);\n      \n      checkForAlias(aliasName, collections);\n      // some fudge for other nodes\n      Thread.sleep(100);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    } catch (InterruptedException e) {\n      log.warn(\"\", e);\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["403d05f7f8d69b65659157eff1bc1d2717f04c66","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}