{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListWithLineEntityProcessor#test().mjava","commits":[{"id":"233d157757a491ed2efb60c16b29af94d5cd8be4","date":1347635980,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListWithLineEntityProcessor#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.txt\", \"a line one\\na line two\\na line three\".getBytes(), false);\n    createFile(tmpdir, \"b.txt\", \"b line one\\nb line two\".getBytes(), false);\n    createFile(tmpdir, \"c.txt\", \"c line one\\nc line two\\nc line three\\nc line four\".getBytes(), false);\n    \n    String config = generateConfig(tmpdir);\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"dataConfig\", config,\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport\", request);\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='9']\");\n    assertQ(req(\"id:?\\\\ line\\\\ one\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:a\\\\ line*\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:b\\\\ line*\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:c\\\\ line*\"), \"//*[@numFound='4']\");    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6d85d6f9087bbc2d7d39ee8e3574182d63c54745"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d85d6f9087bbc2d7d39ee8e3574182d63c54745","date":1353440332,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListWithLineEntityProcessor#test().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListWithLineEntityProcessor#test().mjava","sourceNew":"  public void test() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.txt\", \"a line one\\na line two\\na line three\".getBytes(\"UTF-8\"), false);\n    createFile(tmpdir, \"b.txt\", \"b line one\\nb line two\".getBytes(\"UTF-8\"), false);\n    createFile(tmpdir, \"c.txt\", \"c line one\\nc line two\\nc line three\\nc line four\".getBytes(\"UTF-8\"), false);\n    \n    String config = generateConfig(tmpdir);\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"dataConfig\", config,\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport\", request);\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='9']\");\n    assertQ(req(\"id:?\\\\ line\\\\ one\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:a\\\\ line*\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:b\\\\ line*\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:c\\\\ line*\"), \"//*[@numFound='4']\");    \n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.txt\", \"a line one\\na line two\\na line three\".getBytes(), false);\n    createFile(tmpdir, \"b.txt\", \"b line one\\nb line two\".getBytes(), false);\n    createFile(tmpdir, \"c.txt\", \"c line one\\nc line two\\nc line three\\nc line four\".getBytes(), false);\n    \n    String config = generateConfig(tmpdir);\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"dataConfig\", config,\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport\", request);\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='9']\");\n    assertQ(req(\"id:?\\\\ line\\\\ one\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:a\\\\ line*\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:b\\\\ line*\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:c\\\\ line*\"), \"//*[@numFound='4']\");    \n  }\n\n","bugFix":["233d157757a491ed2efb60c16b29af94d5cd8be4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListWithLineEntityProcessor#test().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListWithLineEntityProcessor#test().mjava","sourceNew":"  public void test() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.txt\", \"a line one\\na line two\\na line three\".getBytes(\"UTF-8\"), false);\n    createFile(tmpdir, \"b.txt\", \"b line one\\nb line two\".getBytes(\"UTF-8\"), false);\n    createFile(tmpdir, \"c.txt\", \"c line one\\nc line two\\nc line three\\nc line four\".getBytes(\"UTF-8\"), false);\n    \n    String config = generateConfig(tmpdir);\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"dataConfig\", config,\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport\", request);\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='9']\");\n    assertQ(req(\"id:?\\\\ line\\\\ one\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:a\\\\ line*\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:b\\\\ line*\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:c\\\\ line*\"), \"//*[@numFound='4']\");    \n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.txt\", \"a line one\\na line two\\na line three\".getBytes(), false);\n    createFile(tmpdir, \"b.txt\", \"b line one\\nb line two\".getBytes(), false);\n    createFile(tmpdir, \"c.txt\", \"c line one\\nc line two\\nc line three\\nc line four\".getBytes(), false);\n    \n    String config = generateConfig(tmpdir);\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"dataConfig\", config,\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport\", request);\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='9']\");\n    assertQ(req(\"id:?\\\\ line\\\\ one\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:a\\\\ line*\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:b\\\\ line*\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:c\\\\ line*\"), \"//*[@numFound='4']\");    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListWithLineEntityProcessor#test().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListWithLineEntityProcessor#test().mjava","sourceNew":"  public void test() throws Exception {\n    File tmpdir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    createFile(tmpdir, \"a.txt\", \"a line one\\na line two\\na line three\".getBytes(\"UTF-8\"), false);\n    createFile(tmpdir, \"b.txt\", \"b line one\\nb line two\".getBytes(\"UTF-8\"), false);\n    createFile(tmpdir, \"c.txt\", \"c line one\\nc line two\\nc line three\\nc line four\".getBytes(\"UTF-8\"), false);\n    \n    String config = generateConfig(tmpdir);\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"dataConfig\", config,\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport\", request);\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='9']\");\n    assertQ(req(\"id:?\\\\ line\\\\ one\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:a\\\\ line*\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:b\\\\ line*\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:c\\\\ line*\"), \"//*[@numFound='4']\");    \n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.txt\", \"a line one\\na line two\\na line three\".getBytes(\"UTF-8\"), false);\n    createFile(tmpdir, \"b.txt\", \"b line one\\nb line two\".getBytes(\"UTF-8\"), false);\n    createFile(tmpdir, \"c.txt\", \"c line one\\nc line two\\nc line three\\nc line four\".getBytes(\"UTF-8\"), false);\n    \n    String config = generateConfig(tmpdir);\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"dataConfig\", config,\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport\", request);\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='9']\");\n    assertQ(req(\"id:?\\\\ line\\\\ one\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:a\\\\ line*\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:b\\\\ line*\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:c\\\\ line*\"), \"//*[@numFound='4']\");    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListWithLineEntityProcessor#test().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListWithLineEntityProcessor#test().mjava","sourceNew":"  public void test() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.txt\", \"a line one\\na line two\\na line three\".getBytes(StandardCharsets.UTF_8), false);\n    createFile(tmpdir, \"b.txt\", \"b line one\\nb line two\".getBytes(StandardCharsets.UTF_8), false);\n    createFile(tmpdir, \"c.txt\", \"c line one\\nc line two\\nc line three\\nc line four\".getBytes(StandardCharsets.UTF_8), false);\n    \n    String config = generateConfig(tmpdir);\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"dataConfig\", config,\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport\", request);\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='9']\");\n    assertQ(req(\"id:?\\\\ line\\\\ one\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:a\\\\ line*\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:b\\\\ line*\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:c\\\\ line*\"), \"//*[@numFound='4']\");    \n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.txt\", \"a line one\\na line two\\na line three\".getBytes(\"UTF-8\"), false);\n    createFile(tmpdir, \"b.txt\", \"b line one\\nb line two\".getBytes(\"UTF-8\"), false);\n    createFile(tmpdir, \"c.txt\", \"c line one\\nc line two\\nc line three\\nc line four\".getBytes(\"UTF-8\"), false);\n    \n    String config = generateConfig(tmpdir);\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"dataConfig\", config,\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport\", request);\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='9']\");\n    assertQ(req(\"id:?\\\\ line\\\\ one\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:a\\\\ line*\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:b\\\\ line*\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:c\\\\ line*\"), \"//*[@numFound='4']\");    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListWithLineEntityProcessor#test().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListWithLineEntityProcessor#test().mjava","sourceNew":"  public void test() throws Exception {\n    File tmpdir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    createFile(tmpdir, \"a.txt\", \"a line one\\na line two\\na line three\".getBytes(StandardCharsets.UTF_8), false);\n    createFile(tmpdir, \"b.txt\", \"b line one\\nb line two\".getBytes(StandardCharsets.UTF_8), false);\n    createFile(tmpdir, \"c.txt\", \"c line one\\nc line two\\nc line three\\nc line four\".getBytes(StandardCharsets.UTF_8), false);\n    \n    String config = generateConfig(tmpdir);\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"dataConfig\", config,\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport\", request);\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='9']\");\n    assertQ(req(\"id:?\\\\ line\\\\ one\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:a\\\\ line*\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:b\\\\ line*\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:c\\\\ line*\"), \"//*[@numFound='4']\");    \n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File tmpdir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    createFile(tmpdir, \"a.txt\", \"a line one\\na line two\\na line three\".getBytes(\"UTF-8\"), false);\n    createFile(tmpdir, \"b.txt\", \"b line one\\nb line two\".getBytes(\"UTF-8\"), false);\n    createFile(tmpdir, \"c.txt\", \"c line one\\nc line two\\nc line three\\nc line four\".getBytes(\"UTF-8\"), false);\n    \n    String config = generateConfig(tmpdir);\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"dataConfig\", config,\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport\", request);\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='9']\");\n    assertQ(req(\"id:?\\\\ line\\\\ one\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:a\\\\ line*\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:b\\\\ line*\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:c\\\\ line*\"), \"//*[@numFound='4']\");    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListWithLineEntityProcessor#test().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListWithLineEntityProcessor#test().mjava","sourceNew":"  public void test() throws Exception {\n    File tmpdir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    createFile(tmpdir, \"a.txt\", \"a line one\\na line two\\na line three\".getBytes(StandardCharsets.UTF_8), false);\n    createFile(tmpdir, \"b.txt\", \"b line one\\nb line two\".getBytes(StandardCharsets.UTF_8), false);\n    createFile(tmpdir, \"c.txt\", \"c line one\\nc line two\\nc line three\\nc line four\".getBytes(StandardCharsets.UTF_8), false);\n    \n    String config = generateConfig(tmpdir);\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"dataConfig\", config,\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport\", request);\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='9']\");\n    assertQ(req(\"id:?\\\\ line\\\\ one\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:a\\\\ line*\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:b\\\\ line*\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:c\\\\ line*\"), \"//*[@numFound='4']\");    \n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File tmpdir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    createFile(tmpdir, \"a.txt\", \"a line one\\na line two\\na line three\".getBytes(StandardCharsets.UTF_8), false);\n    createFile(tmpdir, \"b.txt\", \"b line one\\nb line two\".getBytes(StandardCharsets.UTF_8), false);\n    createFile(tmpdir, \"c.txt\", \"c line one\\nc line two\\nc line three\\nc line four\".getBytes(StandardCharsets.UTF_8), false);\n    \n    String config = generateConfig(tmpdir);\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"dataConfig\", config,\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport\", request);\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='9']\");\n    assertQ(req(\"id:?\\\\ line\\\\ one\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:a\\\\ line*\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:b\\\\ line*\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:c\\\\ line*\"), \"//*[@numFound='4']\");    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListWithLineEntityProcessor#test().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListWithLineEntityProcessor#test().mjava","sourceNew":"  public void test() throws Exception {\n    File tmpdir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    createFile(tmpdir, \"a.txt\", \"a line one\\na line two\\na line three\".getBytes(StandardCharsets.UTF_8), false);\n    createFile(tmpdir, \"b.txt\", \"b line one\\nb line two\".getBytes(StandardCharsets.UTF_8), false);\n    createFile(tmpdir, \"c.txt\", \"c line one\\nc line two\\nc line three\\nc line four\".getBytes(StandardCharsets.UTF_8), false);\n    \n    String config = generateConfig(tmpdir);\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"dataConfig\", config,\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport\", request);\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='9']\");\n    assertQ(req(\"id:?\\\\ line\\\\ one\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:a\\\\ line*\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:b\\\\ line*\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:c\\\\ line*\"), \"//*[@numFound='4']\");    \n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    createFile(tmpdir, \"a.txt\", \"a line one\\na line two\\na line three\".getBytes(StandardCharsets.UTF_8), false);\n    createFile(tmpdir, \"b.txt\", \"b line one\\nb line two\".getBytes(StandardCharsets.UTF_8), false);\n    createFile(tmpdir, \"c.txt\", \"c line one\\nc line two\\nc line three\\nc line four\".getBytes(StandardCharsets.UTF_8), false);\n    \n    String config = generateConfig(tmpdir);\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"dataConfig\", config,\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport\", request);\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='9']\");\n    assertQ(req(\"id:?\\\\ line\\\\ one\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:a\\\\ line*\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:b\\\\ line*\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:c\\\\ line*\"), \"//*[@numFound='4']\");    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListWithLineEntityProcessor#test().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListWithLineEntityProcessor#test().mjava","sourceNew":"  public void test() throws Exception {\n    File tmpdir = createTempDir(LuceneTestCase.getTestClass().getSimpleName()).toFile();\n    createFile(tmpdir, \"a.txt\", \"a line one\\na line two\\na line three\".getBytes(StandardCharsets.UTF_8), false);\n    createFile(tmpdir, \"b.txt\", \"b line one\\nb line two\".getBytes(StandardCharsets.UTF_8), false);\n    createFile(tmpdir, \"c.txt\", \"c line one\\nc line two\\nc line three\\nc line four\".getBytes(StandardCharsets.UTF_8), false);\n    \n    String config = generateConfig(tmpdir);\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"dataConfig\", config,\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport\", request);\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='9']\");\n    assertQ(req(\"id:?\\\\ line\\\\ one\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:a\\\\ line*\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:b\\\\ line*\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:c\\\\ line*\"), \"//*[@numFound='4']\");    \n  }\n\n","sourceOld":"  public void test() throws Exception {\n    File tmpdir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    createFile(tmpdir, \"a.txt\", \"a line one\\na line two\\na line three\".getBytes(StandardCharsets.UTF_8), false);\n    createFile(tmpdir, \"b.txt\", \"b line one\\nb line two\".getBytes(StandardCharsets.UTF_8), false);\n    createFile(tmpdir, \"c.txt\", \"c line one\\nc line two\\nc line three\\nc line four\".getBytes(StandardCharsets.UTF_8), false);\n    \n    String config = generateConfig(tmpdir);\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"dataConfig\", config,\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport\", request);\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='9']\");\n    assertQ(req(\"id:?\\\\ line\\\\ one\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:a\\\\ line*\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:b\\\\ line*\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:c\\\\ line*\"), \"//*[@numFound='4']\");    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListWithLineEntityProcessor#test().mjava","sourceNew":null,"sourceOld":"  public void test() throws Exception {\n    File tmpdir = createTempDir(LuceneTestCase.getTestClass().getSimpleName()).toFile();\n    createFile(tmpdir, \"a.txt\", \"a line one\\na line two\\na line three\".getBytes(StandardCharsets.UTF_8), false);\n    createFile(tmpdir, \"b.txt\", \"b line one\\nb line two\".getBytes(StandardCharsets.UTF_8), false);\n    createFile(tmpdir, \"c.txt\", \"c line one\\nc line two\\nc line three\\nc line four\".getBytes(StandardCharsets.UTF_8), false);\n    \n    String config = generateConfig(tmpdir);\n    LocalSolrQueryRequest request = lrf.makeRequest(\n        \"command\", \"full-import\", \"dataConfig\", config,\n        \"clean\", \"true\", \"commit\", \"true\", \"synchronous\", \"true\", \"indent\", \"true\");\n    h.query(\"/dataimport\", request);\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='9']\");\n    assertQ(req(\"id:?\\\\ line\\\\ one\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:a\\\\ line*\"), \"//*[@numFound='3']\");\n    assertQ(req(\"id:b\\\\ line*\"), \"//*[@numFound='2']\");\n    assertQ(req(\"id:c\\\\ line*\"), \"//*[@numFound='4']\");    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["d0d579490a72f2e6297eaa648940611234c57cf1","9d3d365762604952e436b51980101dfc84cc1b3e"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["f4abec28b874149a7223e32cc7a01704c27790de"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["9d3d365762604952e436b51980101dfc84cc1b3e","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["5eb2511ababf862ea11e10761c70ee560cd84510"],"9d3d365762604952e436b51980101dfc84cc1b3e":["6d85d6f9087bbc2d7d39ee8e3574182d63c54745"],"6d85d6f9087bbc2d7d39ee8e3574182d63c54745":["233d157757a491ed2efb60c16b29af94d5cd8be4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["233d157757a491ed2efb60c16b29af94d5cd8be4","6d85d6f9087bbc2d7d39ee8e3574182d63c54745"],"233d157757a491ed2efb60c16b29af94d5cd8be4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6d85d6f9087bbc2d7d39ee8e3574182d63c54745"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"6d85d6f9087bbc2d7d39ee8e3574182d63c54745":["9d3d365762604952e436b51980101dfc84cc1b3e","407687e67faf6e1f02a211ca078d8e3eed631027","d0d579490a72f2e6297eaa648940611234c57cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["233d157757a491ed2efb60c16b29af94d5cd8be4"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"233d157757a491ed2efb60c16b29af94d5cd8be4":["6d85d6f9087bbc2d7d39ee8e3574182d63c54745","407687e67faf6e1f02a211ca078d8e3eed631027"],"d0d579490a72f2e6297eaa648940611234c57cf1":["5eb2511ababf862ea11e10761c70ee560cd84510"],"f4abec28b874149a7223e32cc7a01704c27790de":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}