{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processReplicaDeletePropertyCommand(ZkNodeProps).mjava","commits":[{"id":"dc2bafa00000be70227a04c29e3f885ff41e531d","date":1412182669,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processReplicaDeletePropertyCommand(ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  private void processReplicaDeletePropertyCommand(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) ||\n        StringUtils.isBlank(message.getStr(SHARD_ID_PROP)) ||\n        StringUtils.isBlank(message.getStr(REPLICA_PROP)) ||\n        StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The '%s', '%s', '%s', and '%s' parameters are required for all replica properties add/delete' operations\",\n              COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP));\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, DELETEREPLICAPROP.toLower());\n    propMap.putAll(message.getProperties());\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processReplicaDeletePropertyCommand(ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  private void processReplicaDeletePropertyCommand(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) ||\n        StringUtils.isBlank(message.getStr(SHARD_ID_PROP)) ||\n        StringUtils.isBlank(message.getStr(REPLICA_PROP)) ||\n        StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The '%s', '%s', '%s', and '%s' parameters are required for all replica properties add/delete' operations\",\n              COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP));\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, DELETEREPLICAPROP.toLower());\n    propMap.putAll(message.getProperties());\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5455c7b3fed6c1671990a44c19071cb0488c2c25","date":1413557414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processReplicaDeletePropertyCommand(ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processReplicaDeletePropertyCommand(ZkNodeProps).mjava","sourceNew":"  private void processReplicaDeletePropertyCommand(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) ||\n        StringUtils.isBlank(message.getStr(SHARD_ID_PROP)) ||\n        StringUtils.isBlank(message.getStr(REPLICA_PROP)) ||\n        StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The '%s', '%s', '%s', and '%s' parameters are required for all replica properties add/delete operations\",\n              COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP));\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, DELETEREPLICAPROP.toLower());\n    propMap.putAll(message.getProperties());\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  private void processReplicaDeletePropertyCommand(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) ||\n        StringUtils.isBlank(message.getStr(SHARD_ID_PROP)) ||\n        StringUtils.isBlank(message.getStr(REPLICA_PROP)) ||\n        StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The '%s', '%s', '%s', and '%s' parameters are required for all replica properties add/delete' operations\",\n              COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP));\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, DELETEREPLICAPROP.toLower());\n    propMap.putAll(message.getProperties());\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processReplicaDeletePropertyCommand(ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processReplicaDeletePropertyCommand(ZkNodeProps).mjava","sourceNew":"  private void processReplicaDeletePropertyCommand(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) ||\n        StringUtils.isBlank(message.getStr(SHARD_ID_PROP)) ||\n        StringUtils.isBlank(message.getStr(REPLICA_PROP)) ||\n        StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The '%s', '%s', '%s', and '%s' parameters are required for all replica properties add/delete operations\",\n              COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP));\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, DELETEREPLICAPROP.toLower());\n    propMap.putAll(message.getProperties());\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  private void processReplicaDeletePropertyCommand(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) ||\n        StringUtils.isBlank(message.getStr(SHARD_ID_PROP)) ||\n        StringUtils.isBlank(message.getStr(REPLICA_PROP)) ||\n        StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The '%s', '%s', '%s', and '%s' parameters are required for all replica properties add/delete' operations\",\n              COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP));\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, DELETEREPLICAPROP.toLower());\n    propMap.putAll(message.getProperties());\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6b620c271c84c0f14919eec7b90083b292ee51","date":1419461736,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processReplicaDeletePropertyCommand(ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processReplicaDeletePropertyCommand(ZkNodeProps).mjava","sourceNew":"  private void processReplicaDeletePropertyCommand(ZkNodeProps message) throws KeeperException, InterruptedException {\n    checkRequired(message, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP);\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, DELETEREPLICAPROP.toLower());\n    propMap.putAll(message.getProperties());\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  private void processReplicaDeletePropertyCommand(ZkNodeProps message) throws KeeperException, InterruptedException {\n    if (StringUtils.isBlank(message.getStr(COLLECTION_PROP)) ||\n        StringUtils.isBlank(message.getStr(SHARD_ID_PROP)) ||\n        StringUtils.isBlank(message.getStr(REPLICA_PROP)) ||\n        StringUtils.isBlank(message.getStr(PROPERTY_PROP))) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          String.format(Locale.ROOT, \"The '%s', '%s', '%s', and '%s' parameters are required for all replica properties add/delete operations\",\n              COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP));\n    }\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, DELETEREPLICAPROP.toLower());\n    propMap.putAll(message.getProperties());\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processReplicaDeletePropertyCommand(ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processReplicaDeletePropertyCommand(ZkNodeProps).mjava","sourceNew":"  private void processReplicaDeletePropertyCommand(ZkNodeProps message) throws KeeperException, InterruptedException {\n    checkRequired(message, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP);\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, DELETEREPLICAPROP.toLower());\n    propMap.putAll(message.getProperties());\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  private void processReplicaDeletePropertyCommand(ZkNodeProps message) throws KeeperException, InterruptedException {\n    checkRequired(message, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP);\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, DELETEREPLICAPROP.toLower());\n    propMap.putAll(message.getProperties());\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processReplicaDeletePropertyCommand(ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processReplicaDeletePropertyCommand(ZkNodeProps).mjava","sourceNew":"  private void processReplicaDeletePropertyCommand(ZkNodeProps message) throws KeeperException, InterruptedException {\n    checkRequired(message, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP);\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, DELETEREPLICAPROP.toLower());\n    propMap.putAll(message.getProperties());\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  private void processReplicaDeletePropertyCommand(ZkNodeProps message) throws KeeperException, InterruptedException {\n    checkRequired(message, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP);\n    SolrZkClient zkClient = zkStateReader.getZkClient();\n    DistributedQueue inQueue = Overseer.getInQueue(zkClient);\n    Map<String, Object> propMap = new HashMap<>();\n    propMap.put(Overseer.QUEUE_OPERATION, DELETEREPLICAPROP.toLower());\n    propMap.putAll(message.getProperties());\n    ZkNodeProps m = new ZkNodeProps(propMap);\n    inQueue.offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["d9a47902d6207303f5ed3e7aaca62ca33433af66","5455c7b3fed6c1671990a44c19071cb0488c2c25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc2bafa00000be70227a04c29e3f885ff41e531d"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["dc2bafa00000be70227a04c29e3f885ff41e531d"],"dc2bafa00000be70227a04c29e3f885ff41e531d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["5455c7b3fed6c1671990a44c19071cb0488c2c25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","dc2bafa00000be70227a04c29e3f885ff41e531d"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","4e6b620c271c84c0f14919eec7b90083b292ee51"],"dc2bafa00000be70227a04c29e3f885ff41e531d":["d9a47902d6207303f5ed3e7aaca62ca33433af66","5455c7b3fed6c1671990a44c19071cb0488c2c25"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}