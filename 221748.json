{"path":"solr/core/src/test/org/apache/solr/schema/TestTextField#testAnalyzeMultiTerm().mjava","commits":[{"id":"b6d39099fdb84d195208fae92dd8feca29d77366","date":1578667620,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestTextField#testAnalyzeMultiTerm().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAnalyzeMultiTerm() {\n    // No terms provided by the StopFilter (stop word) for the multi-term part.\n    // This is supported. Check TextField.analyzeMultiTerm returns null (and does not throw an exception).\n    BytesRef termBytes = TextField.analyzeMultiTerm(\"field\", \"the\", new StopAnalyzer(EnglishAnalyzer.ENGLISH_STOP_WORDS_SET));\n    assertNull(termBytes);\n\n    // One term provided by the WhitespaceTokenizer for the multi-term part.\n    // This is the regular case. Check TextField.analyzeMultiTerm returns it (and does not throw an exception).\n    termBytes = TextField.analyzeMultiTerm(\"field\", \"Sol\", new WhitespaceAnalyzer());\n    assertEquals(\"Sol\", termBytes.utf8ToString());\n\n    // Two terms provided by the WhitespaceTokenizer for the multi-term part.\n    // This is not allowed. Expect an exception.\n    SolrException exception = expectThrows(SolrException.class, () -> TextField.analyzeMultiTerm(\"field\", \"term1 term2\", new WhitespaceAnalyzer()));\n    assertEquals(\"Unexpected error code\", SolrException.ErrorCode.BAD_REQUEST.code, exception.code());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac","date":1578901035,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestTextField#testAnalyzeMultiTerm().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAnalyzeMultiTerm() {\n    // No terms provided by the StopFilter (stop word) for the multi-term part.\n    // This is supported. Check TextField.analyzeMultiTerm returns null (and does not throw an exception).\n    BytesRef termBytes = TextField.analyzeMultiTerm(\"field\", \"the\", new StopAnalyzer(EnglishAnalyzer.ENGLISH_STOP_WORDS_SET));\n    assertNull(termBytes);\n\n    // One term provided by the WhitespaceTokenizer for the multi-term part.\n    // This is the regular case. Check TextField.analyzeMultiTerm returns it (and does not throw an exception).\n    termBytes = TextField.analyzeMultiTerm(\"field\", \"Sol\", new WhitespaceAnalyzer());\n    assertEquals(\"Sol\", termBytes.utf8ToString());\n\n    // Two terms provided by the WhitespaceTokenizer for the multi-term part.\n    // This is not allowed. Expect an exception.\n    SolrException exception = expectThrows(SolrException.class, () -> TextField.analyzeMultiTerm(\"field\", \"term1 term2\", new WhitespaceAnalyzer()));\n    assertEquals(\"Unexpected error code\", SolrException.ErrorCode.BAD_REQUEST.code, exception.code());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b6d39099fdb84d195208fae92dd8feca29d77366"],"b6d39099fdb84d195208fae92dd8feca29d77366":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6d39099fdb84d195208fae92dd8feca29d77366"]},"commit2Childs":{"94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac":[],"b6d39099fdb84d195208fae92dd8feca29d77366":["94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac","b6d39099fdb84d195208fae92dd8feca29d77366"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}