{"path":"lucene/core/src/java/org/apache/lucene/util/RankBitSet#buildRankCache().mjava","commits":[{"id":"91afec3d1be3c4538a6f92102a22573087f69d68","date":1543843480,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RankBitSet#buildRankCache().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Must be called after bits has changed and before {@link #rank} is called.\n   */\n  public void buildRankCache() {\n    rankCache = new long[(length() >>> LOWER_OVER_BITS)+1];\n    long total = 0;\n    int lower = 0 ;\n    while (lower * LOWER_OVER_SIZE < length()) { // Full lower block processing\n      final int origoWordIndex = (lower * LOWER_OVER_SIZE) >>> 6;\n    // TODO: Some conditionals could be spared by checking once if all basic blocks are within size\n      final long basic1 = origoWordIndex + BASIC_WORDS <= wlen ?\n          BitUtil.pop_array(inner.getBits(), origoWordIndex, BASIC_WORDS) : 0;\n      final long basic2 =  origoWordIndex + BASIC_WORDS*2 <= wlen ?\n          BitUtil.pop_array(inner.getBits(), origoWordIndex + BASIC_WORDS, BASIC_WORDS) : 0;\n      final long basic3 =  origoWordIndex + BASIC_WORDS*3 <= wlen ?\n          BitUtil.pop_array(inner.getBits(), origoWordIndex + BASIC_WORDS *2, BASIC_WORDS) : 0;\n      final long basic4 =  origoWordIndex + BASIC_WORDS*4 <= wlen ?\n          BitUtil.pop_array(inner.getBits(), origoWordIndex + BASIC_WORDS *3, BASIC_WORDS) : 0;\n      rankCache[lower] = total << (Long.SIZE-LOWER_BITS) |\n           basic1 << (BASIC_BITS *2) |\n           basic2 << BASIC_BITS |\n           basic3;\n      total += basic1 + basic2 + basic3 + basic4;\n      lower++;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90c33633162a86e6323f4cf2b93e2bb168b1dc22","date":1544534062,"type":4,"author":"Toke Eskildsen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/RankBitSet#buildRankCache().mjava","sourceNew":null,"sourceOld":"  /**\n   * Must be called after bits has changed and before {@link #rank} is called.\n   */\n  public void buildRankCache() {\n    rankCache = new long[(length() >>> LOWER_OVER_BITS)+1];\n    long total = 0;\n    int lower = 0 ;\n    while (lower * LOWER_OVER_SIZE < length()) { // Full lower block processing\n      final int origoWordIndex = (lower * LOWER_OVER_SIZE) >>> 6;\n    // TODO: Some conditionals could be spared by checking once if all basic blocks are within size\n      final long basic1 = origoWordIndex + BASIC_WORDS <= wlen ?\n          BitUtil.pop_array(inner.getBits(), origoWordIndex, BASIC_WORDS) : 0;\n      final long basic2 =  origoWordIndex + BASIC_WORDS*2 <= wlen ?\n          BitUtil.pop_array(inner.getBits(), origoWordIndex + BASIC_WORDS, BASIC_WORDS) : 0;\n      final long basic3 =  origoWordIndex + BASIC_WORDS*3 <= wlen ?\n          BitUtil.pop_array(inner.getBits(), origoWordIndex + BASIC_WORDS *2, BASIC_WORDS) : 0;\n      final long basic4 =  origoWordIndex + BASIC_WORDS*4 <= wlen ?\n          BitUtil.pop_array(inner.getBits(), origoWordIndex + BASIC_WORDS *3, BASIC_WORDS) : 0;\n      rankCache[lower] = total << (Long.SIZE-LOWER_BITS) |\n           basic1 << (BASIC_BITS *2) |\n           basic2 << BASIC_BITS |\n           basic3;\n      total += basic1 + basic2 + basic3 + basic4;\n      lower++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd70c9571310639a77f0123aea0db41077d9bb6","date":1544538617,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/RankBitSet#buildRankCache().mjava","sourceNew":null,"sourceOld":"  /**\n   * Must be called after bits has changed and before {@link #rank} is called.\n   */\n  public void buildRankCache() {\n    rankCache = new long[(length() >>> LOWER_OVER_BITS)+1];\n    long total = 0;\n    int lower = 0 ;\n    while (lower * LOWER_OVER_SIZE < length()) { // Full lower block processing\n      final int origoWordIndex = (lower * LOWER_OVER_SIZE) >>> 6;\n    // TODO: Some conditionals could be spared by checking once if all basic blocks are within size\n      final long basic1 = origoWordIndex + BASIC_WORDS <= wlen ?\n          BitUtil.pop_array(inner.getBits(), origoWordIndex, BASIC_WORDS) : 0;\n      final long basic2 =  origoWordIndex + BASIC_WORDS*2 <= wlen ?\n          BitUtil.pop_array(inner.getBits(), origoWordIndex + BASIC_WORDS, BASIC_WORDS) : 0;\n      final long basic3 =  origoWordIndex + BASIC_WORDS*3 <= wlen ?\n          BitUtil.pop_array(inner.getBits(), origoWordIndex + BASIC_WORDS *2, BASIC_WORDS) : 0;\n      final long basic4 =  origoWordIndex + BASIC_WORDS*4 <= wlen ?\n          BitUtil.pop_array(inner.getBits(), origoWordIndex + BASIC_WORDS *3, BASIC_WORDS) : 0;\n      rankCache[lower] = total << (Long.SIZE-LOWER_BITS) |\n           basic1 << (BASIC_BITS *2) |\n           basic2 << BASIC_BITS |\n           basic3;\n      total += basic1 + basic2 + basic3 + basic4;\n      lower++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91afec3d1be3c4538a6f92102a22573087f69d68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["91afec3d1be3c4538a6f92102a22573087f69d68","90c33633162a86e6323f4cf2b93e2bb168b1dc22"],"90c33633162a86e6323f4cf2b93e2bb168b1dc22":["91afec3d1be3c4538a6f92102a22573087f69d68"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd70c9571310639a77f0123aea0db41077d9bb6"]},"commit2Childs":{"91afec3d1be3c4538a6f92102a22573087f69d68":["cfd70c9571310639a77f0123aea0db41077d9bb6","90c33633162a86e6323f4cf2b93e2bb168b1dc22"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90c33633162a86e6323f4cf2b93e2bb168b1dc22":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91afec3d1be3c4538a6f92102a22573087f69d68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}