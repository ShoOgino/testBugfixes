{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","commits":[{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging#testNoWaitClose().mjava","sourceNew":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoWaitClose() throws Throwable {\n    Directory directory = newDirectory();\n\n    final Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n\n    Field idField = newField(\"id\", \"\", customType);\n    doc.add(idField);\n\n    for(int pass=0;pass<2;pass++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: pass=\" + pass);\n      }\n\n      IndexWriterConfig conf =  newIndexWriterConfig(\n              TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setOpenMode(OpenMode.CREATE).\n              setMaxBufferedDocs(2).\n              setMergePolicy(newLogMergePolicy());\n      if (pass == 2) {\n        conf.setMergeScheduler(new SerialMergeScheduler());\n      }\n\n      IndexWriter writer = new IndexWriter(directory, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(100);          \n\n      for(int iter=0;iter<10;iter++) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter=\" + iter);\n        }\n        for(int j=0;j<199;j++) {\n          idField.setValue(Integer.toString(iter*201+j));\n          writer.addDocument(doc);\n        }\n\n        int delID = iter*199;\n        for(int j=0;j<20;j++) {\n          writer.deleteDocuments(new Term(\"id\", Integer.toString(delID)));\n          delID += 5;\n        }\n\n        // Force a bunch of merge threads to kick off so we\n        // stress out aborting them on close:\n        ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n\n        final IndexWriter finalWriter = writer;\n        final ArrayList<Throwable> failure = new ArrayList<Throwable>();\n        Thread t1 = new Thread() {\n            @Override\n            public void run() {\n              boolean done = false;\n              while(!done) {\n                for(int i=0;i<100;i++) {\n                  try {\n                    finalWriter.addDocument(doc);\n                  } catch (AlreadyClosedException e) {\n                    done = true;\n                    break;\n                  } catch (NullPointerException e) {\n                    done = true;\n                    break;\n                  } catch (Throwable e) {\n                    e.printStackTrace(System.out);\n                    failure.add(e);\n                    done = true;\n                    break;\n                  }\n                }\n                Thread.yield();\n              }\n\n            }\n          };\n\n        if (failure.size() > 0) {\n          throw failure.get(0);\n        }\n\n        t1.start();\n\n        writer.close(false);\n        t1.join();\n\n        // Make sure reader can read\n        IndexReader reader = IndexReader.open(directory);\n        reader.close();\n\n        // Reopen\n        writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));\n      }\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8be580b58bcc650d428f3f22de81cadcf51d650a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}