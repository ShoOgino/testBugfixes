{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","pathOld":"/dev/null","sourceNew":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    // flush (and commit if ac)\n\n    modifier.optimize();\n    modifier.commit();\n\n    // one of the two files hits\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n\n    // open the writer again (closed above)\n\n    // delete the doc\n    // max buf del terms is two, so this is buffered\n\n    modifier.deleteDocuments(term);\n\n    // add a doc (needed for the !ac case; see below)\n    // doc remains buffered\n\n    Document doc = new Document();\n    modifier.addDocument(doc);\n\n    // commit the changes, the buffered deletes, and the new doc\n\n    // The failure object will fail on the first write after the del\n    // file gets created when processing the buffered delete\n\n    // in the ac case, this will be when writing the new segments\n    // files so we really don't need the new doc, but it's harmless\n\n    // in the !ac case, a new segments file won't be created but in\n    // this case, creation of the cfs file happens next so we need\n    // the doc (to test that it's okay that we don't lose deletes if\n    // failing while creating the cfs file)\n\n    boolean failed = false;\n    try {\n      modifier.commit();\n    } catch (IOException ioe) {\n      failed = true;\n    }\n\n    assertTrue(failed);\n\n    // The commit above failed, so we need to retry it (which will\n    // succeed, because the failure is a one-shot)\n\n    modifier.commit();\n\n    hitCount = getHitCount(dir, term);\n\n    // Make sure the delete was successfully flushed:\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriterDelete#testErrorAfterApplyDeletes().mjava","sourceNew":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    // flush (and commit if ac)\n\n    modifier.optimize();\n    modifier.commit();\n\n    // one of the two files hits\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n\n    // open the writer again (closed above)\n\n    // delete the doc\n    // max buf del terms is two, so this is buffered\n\n    modifier.deleteDocuments(term);\n\n    // add a doc (needed for the !ac case; see below)\n    // doc remains buffered\n\n    Document doc = new Document();\n    modifier.addDocument(doc);\n\n    // commit the changes, the buffered deletes, and the new doc\n\n    // The failure object will fail on the first write after the del\n    // file gets created when processing the buffered delete\n\n    // in the ac case, this will be when writing the new segments\n    // files so we really don't need the new doc, but it's harmless\n\n    // in the !ac case, a new segments file won't be created but in\n    // this case, creation of the cfs file happens next so we need\n    // the doc (to test that it's okay that we don't lose deletes if\n    // failing while creating the cfs file)\n\n    boolean failed = false;\n    try {\n      modifier.commit();\n    } catch (IOException ioe) {\n      failed = true;\n    }\n\n    assertTrue(failed);\n\n    // The commit above failed, so we need to retry it (which will\n    // succeed, because the failure is a one-shot)\n\n    modifier.commit();\n\n    hitCount = getHitCount(dir, term);\n\n    // Make sure the delete was successfully flushed:\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // This test tests that buffered deletes are cleared when\n  // an Exception is hit during flush.\n  public void testErrorAfterApplyDeletes() throws IOException {\n    \n    MockRAMDirectory.Failure failure = new MockRAMDirectory.Failure() {\n        boolean sawMaybe = false;\n        boolean failed = false;\n        @Override\n        public MockRAMDirectory.Failure reset() {\n          sawMaybe = false;\n          failed = false;\n          return this;\n        }\n        @Override\n        public void eval(MockRAMDirectory dir)  throws IOException {\n          if (sawMaybe && !failed) {\n            boolean seen = false;\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                seen = true;\n                break;\n              }\n            }\n            if (!seen) {\n              // Only fail once we are no longer in applyDeletes\n              failed = true;\n              throw new IOException(\"fail after applyDeletes\");\n            }\n          }\n          if (!failed) {\n            StackTraceElement[] trace = new Exception().getStackTrace();\n            for (int i = 0; i < trace.length; i++) {\n              if (\"applyDeletes\".equals(trace[i].getMethodName())) {\n                sawMaybe = true;\n                break;\n              }\n            }\n          }\n        }\n      };\n\n    // create a couple of files\n\n    String[] keywords = { \"1\", \"2\" };\n    String[] unindexed = { \"Netherlands\", \"Italy\" };\n    String[] unstored = { \"Amsterdam has lots of bridges\",\n        \"Venice has lots of canals\" };\n    String[] text = { \"Amsterdam\", \"Venice\" };\n\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir,\n                                           new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    modifier.setUseCompoundFile(true);\n    modifier.setMaxBufferedDeleteTerms(2);\n\n    dir.failOn(failure.reset());\n\n    for (int i = 0; i < keywords.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", keywords[i], Field.Store.YES,\n                        Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"country\", unindexed[i], Field.Store.YES,\n                        Field.Index.NO));\n      doc.add(new Field(\"contents\", unstored[i], Field.Store.NO,\n                        Field.Index.ANALYZED));\n      doc.add(new Field(\"city\", text[i], Field.Store.YES,\n                        Field.Index.ANALYZED));\n      modifier.addDocument(doc);\n    }\n    // flush (and commit if ac)\n\n    modifier.optimize();\n    modifier.commit();\n\n    // one of the two files hits\n\n    Term term = new Term(\"city\", \"Amsterdam\");\n    int hitCount = getHitCount(dir, term);\n    assertEquals(1, hitCount);\n\n    // open the writer again (closed above)\n\n    // delete the doc\n    // max buf del terms is two, so this is buffered\n\n    modifier.deleteDocuments(term);\n\n    // add a doc (needed for the !ac case; see below)\n    // doc remains buffered\n\n    Document doc = new Document();\n    modifier.addDocument(doc);\n\n    // commit the changes, the buffered deletes, and the new doc\n\n    // The failure object will fail on the first write after the del\n    // file gets created when processing the buffered delete\n\n    // in the ac case, this will be when writing the new segments\n    // files so we really don't need the new doc, but it's harmless\n\n    // in the !ac case, a new segments file won't be created but in\n    // this case, creation of the cfs file happens next so we need\n    // the doc (to test that it's okay that we don't lose deletes if\n    // failing while creating the cfs file)\n\n    boolean failed = false;\n    try {\n      modifier.commit();\n    } catch (IOException ioe) {\n      failed = true;\n    }\n\n    assertTrue(failed);\n\n    // The commit above failed, so we need to retry it (which will\n    // succeed, because the failure is a one-shot)\n\n    modifier.commit();\n\n    hitCount = getHitCount(dir, term);\n\n    // Make sure the delete was successfully flushed:\n    assertEquals(0, hitCount);\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}