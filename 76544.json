{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#initSearcher(SolrCore).mjava","commits":[{"id":"54bb8da55080e4569804e0661b83a3c72cbd8d4d","date":1429691126,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initSearcher(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  private void initSearcher(SolrCore prev) throws IOException {\n    // use the (old) writer to open the first searcher\n    RefCounted<IndexWriter> iwRef = null;\n    if (prev != null) {\n      iwRef = prev.getUpdateHandler().getSolrCoreState().getIndexWriter(null);\n      if (iwRef != null) {\n        final IndexWriter iw = iwRef.get();\n        final SolrCore core = this;\n        newReaderCreator = new Callable<DirectoryReader>() {\n          // this is used during a core reload\n\n          @Override\n          public DirectoryReader call() throws Exception {\n            return indexReaderFactory.newReader(iw, core);\n          }\n        };\n      }\n    }\n\n    try {\n      getSearcher(false, false, null, true);\n    } finally {\n      newReaderCreator = null;\n      if (iwRef != null) {\n        iwRef.decref();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043df2e9a841864922c32756a44c939ed768cb89","date":1459876536,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initSearcher(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initSearcher(SolrCore).mjava","sourceNew":"  private void initSearcher(SolrCore prev) throws IOException {\n    // use the (old) writer to open the first searcher\n    RefCounted<IndexWriter> iwRef = null;\n    if (prev != null) {\n      iwRef = prev.getUpdateHandler().getSolrCoreState().getIndexWriter(null);\n      if (iwRef != null) {\n        final IndexWriter iw = iwRef.get();\n        final SolrCore core = this;\n        newReaderCreator = () -> indexReaderFactory.newReader(iw, core);\n      }\n    }\n\n    try {\n      getSearcher(false, false, null, true);\n    } finally {\n      newReaderCreator = null;\n      if (iwRef != null) {\n        iwRef.decref();\n      }\n    }\n  }\n\n","sourceOld":"  private void initSearcher(SolrCore prev) throws IOException {\n    // use the (old) writer to open the first searcher\n    RefCounted<IndexWriter> iwRef = null;\n    if (prev != null) {\n      iwRef = prev.getUpdateHandler().getSolrCoreState().getIndexWriter(null);\n      if (iwRef != null) {\n        final IndexWriter iw = iwRef.get();\n        final SolrCore core = this;\n        newReaderCreator = new Callable<DirectoryReader>() {\n          // this is used during a core reload\n\n          @Override\n          public DirectoryReader call() throws Exception {\n            return indexReaderFactory.newReader(iw, core);\n          }\n        };\n      }\n    }\n\n    try {\n      getSearcher(false, false, null, true);\n    } finally {\n      newReaderCreator = null;\n      if (iwRef != null) {\n        iwRef.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6284684320a9808c41a5e43de958b2da22f89bd","date":1459977490,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initSearcher(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initSearcher(SolrCore).mjava","sourceNew":"  private void initSearcher(SolrCore prev) throws IOException {\n    // use the (old) writer to open the first searcher\n    RefCounted<IndexWriter> iwRef = null;\n    if (prev != null) {\n      iwRef = prev.getUpdateHandler().getSolrCoreState().getIndexWriter(null);\n      if (iwRef != null) {\n        final IndexWriter iw = iwRef.get();\n        final SolrCore core = this;\n        newReaderCreator = () -> indexReaderFactory.newReader(iw, core);\n      }\n    }\n\n    try {\n      getSearcher(false, false, null, true);\n    } finally {\n      newReaderCreator = null;\n      if (iwRef != null) {\n        iwRef.decref();\n      }\n    }\n  }\n\n","sourceOld":"  private void initSearcher(SolrCore prev) throws IOException {\n    // use the (old) writer to open the first searcher\n    RefCounted<IndexWriter> iwRef = null;\n    if (prev != null) {\n      iwRef = prev.getUpdateHandler().getSolrCoreState().getIndexWriter(null);\n      if (iwRef != null) {\n        final IndexWriter iw = iwRef.get();\n        final SolrCore core = this;\n        newReaderCreator = new Callable<DirectoryReader>() {\n          // this is used during a core reload\n\n          @Override\n          public DirectoryReader call() throws Exception {\n            return indexReaderFactory.newReader(iw, core);\n          }\n        };\n      }\n    }\n\n    try {\n      getSearcher(false, false, null, true);\n    } finally {\n      newReaderCreator = null;\n      if (iwRef != null) {\n        iwRef.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043df2e9a841864922c32756a44c939ed768cb89":["54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6284684320a9808c41a5e43de958b2da22f89bd":["54bb8da55080e4569804e0661b83a3c72cbd8d4d","043df2e9a841864922c32756a44c939ed768cb89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6284684320a9808c41a5e43de958b2da22f89bd"]},"commit2Childs":{"043df2e9a841864922c32756a44c939ed768cb89":["b6284684320a9808c41a5e43de958b2da22f89bd"],"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["043df2e9a841864922c32756a44c939ed768cb89","b6284684320a9808c41a5e43de958b2da22f89bd"],"b6284684320a9808c41a5e43de958b2da22f89bd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}