{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if (infos.fieldInfo(fieldNumber) == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if (infos.fieldInfo(fieldNumber) == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if (infos.fieldInfo(fieldNumber) == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if (infos.fieldInfo(fieldNumber) == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private int readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int numEntries = 0;\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      numEntries++;\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(info.name, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(info.name, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(info.name, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n    return numEntries;\n  }\n\n","sourceOld":"  private void readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      if (infos.fieldInfo(fieldNumber) == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(fieldNumber, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(fieldNumber, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(fieldNumber, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":"  private int readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int numEntries = 0;\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      numEntries++;\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(info.name, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(info.name, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(info.name, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType, meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n    return numEntries;\n  }\n\n","sourceOld":"  private int readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int numEntries = 0;\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      numEntries++;\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber + \" (resource=\" + meta + \")\");\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\" + meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(info.name, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(info.name, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(info.name, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType + \", input=\" + meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n    return numEntries;\n  }\n\n","bugFix":["0567bdc5c86c94ced64201187cfcef2417d76dda","bf317f41f8247db62a955791ebb8a5ab3e7c8d47","f93c27491251c14ea21df71ebbf6feb9f891e6cb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesProducer#readFields(IndexInput,FieldInfos).mjava","sourceNew":null,"sourceOld":"  private int readFields(IndexInput meta, FieldInfos infos) throws IOException {\n    int numEntries = 0;\n    int fieldNumber = meta.readVInt();\n    while (fieldNumber != -1) {\n      numEntries++;\n      FieldInfo info = infos.fieldInfo(fieldNumber);\n      if (info == null) {\n        // trickier to validate more: because we re-use for norms, because we use multiple entries\n        // for \"composite\" types like sortedset, etc.\n        throw new CorruptIndexException(\"Invalid field number: \" + fieldNumber, meta);\n      }\n      int fieldType = meta.readByte();\n      if (fieldType == NUMBER) {\n        NumericEntry entry = new NumericEntry();\n        entry.offset = meta.readLong();\n        entry.format = meta.readByte();\n        switch(entry.format) {\n          case DELTA_COMPRESSED:\n          case TABLE_COMPRESSED:\n          case GCD_COMPRESSED:\n          case UNCOMPRESSED:\n               break;\n          default:\n               throw new CorruptIndexException(\"Unknown format: \" + entry.format, meta);\n        }\n        if (entry.format != UNCOMPRESSED) {\n          entry.packedIntsVersion = meta.readVInt();\n        }\n        numerics.put(info.name, entry);\n      } else if (fieldType == BYTES) {\n        BinaryEntry entry = new BinaryEntry();\n        entry.offset = meta.readLong();\n        entry.numBytes = meta.readLong();\n        entry.minLength = meta.readVInt();\n        entry.maxLength = meta.readVInt();\n        if (entry.minLength != entry.maxLength) {\n          entry.packedIntsVersion = meta.readVInt();\n          entry.blockSize = meta.readVInt();\n        }\n        binaries.put(info.name, entry);\n      } else if (fieldType == FST) {\n        FSTEntry entry = new FSTEntry();\n        entry.offset = meta.readLong();\n        entry.numOrds = meta.readVLong();\n        fsts.put(info.name, entry);\n      } else {\n        throw new CorruptIndexException(\"invalid entry type: \" + fieldType, meta);\n      }\n      fieldNumber = meta.readVInt();\n    }\n    return numEntries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}