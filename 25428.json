{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testVersion().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testVersion().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testVersion().mjava","sourceNew":"    public void testVersion() throws IOException {\n      Directory dir = new MockRAMDirectory();\n      assertFalse(IndexReader.indexExists(dir));\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n      writer.close();\n      assertTrue(IndexReader.indexExists(dir));\n      IndexReader reader = IndexReader.open(dir, false);\n      assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n      long version = IndexReader.getCurrentVersion(dir);\n      reader.close();\n      // modify index and check version has been\n      // incremented:\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.close();\n      reader = IndexReader.open(dir, false);\n      assertTrue(\"old version is \" + version + \"; new version is \" + IndexReader.getCurrentVersion(dir), version < IndexReader.getCurrentVersion(dir));\n      reader.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testVersion() throws IOException {\n      Directory dir = new MockRAMDirectory();\n      assertFalse(IndexReader.indexExists(dir));\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n      writer.close();\n      assertTrue(IndexReader.indexExists(dir));\n      IndexReader reader = IndexReader.open(dir, false);\n      assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n      long version = IndexReader.getCurrentVersion(dir);\n      reader.close();\n      // modify index and check version has been\n      // incremented:\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.close();\n      reader = IndexReader.open(dir, false);\n      assertTrue(\"old version is \" + version + \"; new version is \" + IndexReader.getCurrentVersion(dir), version < IndexReader.getCurrentVersion(dir));\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testVersion().mjava","sourceNew":null,"sourceOld":"    public void testVersion() throws IOException {\n      Directory dir = new MockRAMDirectory();\n      assertFalse(IndexReader.indexExists(dir));\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      assertTrue(IndexWriter.isLocked(dir));\t\t// writer open, so dir is locked\n      writer.close();\n      assertTrue(IndexReader.indexExists(dir));\n      IndexReader reader = IndexReader.open(dir, false);\n      assertFalse(IndexWriter.isLocked(dir));\t\t// reader only, no lock\n      long version = IndexReader.getCurrentVersion(dir);\n      reader.close();\n      // modify index and check version has been\n      // incremented:\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.close();\n      reader = IndexReader.open(dir, false);\n      assertTrue(\"old version is \" + version + \"; new version is \" + IndexReader.getCurrentVersion(dir), version < IndexReader.getCurrentVersion(dir));\n      reader.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}