{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[]).mjava","commits":[{"id":"e3ce1ef883d26aa73919aa2d53991726e96caa13","date":1445421402,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: make this protected when we want to subclass to play with different splitting criteria\n  private int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      BKDUtil.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || BKDUtil.compare(bytesPerDim, scratchDiff, 0, scratch1, 0) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    return splitDim;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[]).mjava","sourceNew":"  // TODO: make this protected when we want to subclass to play with different splitting criteria\n  private int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      BKDUtil.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || BKDUtil.compare(bytesPerDim, scratchDiff, 0, scratch1, 0) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","sourceOld":"  // TODO: make this protected when we want to subclass to play with different splitting criteria\n  private int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      BKDUtil.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || BKDUtil.compare(bytesPerDim, scratchDiff, 0, scratch1, 0) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    return splitDim;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[]).mjava","sourceNew":"  // TODO: make this protected when we want to subclass to play with different splitting criteria\n  private int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || NumericUtils.compare(bytesPerDim, scratchDiff, 0, scratch1, 0) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","sourceOld":"  // TODO: make this protected when we want to subclass to play with different splitting criteria\n  private int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      BKDUtil.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || BKDUtil.compare(bytesPerDim, scratchDiff, 0, scratch1, 0) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12bfdc932307442b651432f92845942f9041ace8","date":1456860728,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[]).mjava","sourceNew":"  // TODO: make this protected when we want to subclass to play with different splitting criteria\n  private int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || StringHelper.compare(bytesPerDim, scratchDiff, 0, scratch1, 0) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","sourceOld":"  // TODO: make this protected when we want to subclass to play with different splitting criteria\n  private int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || NumericUtils.compare(bytesPerDim, scratchDiff, 0, scratch1, 0) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[]).mjava","sourceNew":"  // TODO: make this protected when we want to subclass to play with different splitting criteria\n  private int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || StringHelper.compare(bytesPerDim, scratchDiff, 0, scratch1, 0) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","sourceOld":"  // TODO: make this protected when we want to subclass to play with different splitting criteria\n  private int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || NumericUtils.compare(bytesPerDim, scratchDiff, 0, scratch1, 0) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24df944aceb57e67b2594b585cf004783054b5b2","date":1458934816,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[]).mjava","sourceNew":"  protected int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || StringHelper.compare(bytesPerDim, scratchDiff, 0, scratch1, 0) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","sourceOld":"  // TODO: make this protected when we want to subclass to play with different splitting criteria\n  private int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || StringHelper.compare(bytesPerDim, scratchDiff, 0, scratch1, 0) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7","date":1482745036,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[]).mjava","sourceNew":"  /**\n   * Pick the next dimension to split.\n   * @param minPackedValue the min values for all dimensions\n   * @param maxPackedValue the max values for all dimensions\n   * @param parentSplits how many times each dim has been split on the parent levels\n   * @return the dimension to split\n   */\n  protected int split(byte[] minPackedValue, byte[] maxPackedValue, int[] parentSplits) {\n    // First look at whether there is a dimension that has split less than 2x less than\n    // the dim that has most splits, and return it if there is such a dimension and it\n    // does not only have equals values. This helps ensure all dimensions are indexed.\n    int maxNumSplits = 0;\n    for (int numSplits : parentSplits) {\n      maxNumSplits = Math.max(maxNumSplits, numSplits);\n    }\n    for (int dim = 0; dim < numDims; ++dim) {\n      final int offset = dim * bytesPerDim;\n      if (parentSplits[dim] < maxNumSplits / 2 &&\n          StringHelper.compare(bytesPerDim, minPackedValue, offset, maxPackedValue, offset) != 0) {\n        return dim;\n      }\n    }\n\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || StringHelper.compare(bytesPerDim, scratchDiff, 0, scratch1, 0) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","sourceOld":"  protected int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || StringHelper.compare(bytesPerDim, scratchDiff, 0, scratch1, 0) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#split(byte[],byte[]).mjava","sourceNew":null,"sourceOld":"  protected int split(byte[] minPackedValue, byte[] maxPackedValue) {\n    // Find which dim has the largest span so we can split on it:\n    int splitDim = -1;\n    for(int dim=0;dim<numDims;dim++) {\n      NumericUtils.subtract(bytesPerDim, dim, maxPackedValue, minPackedValue, scratchDiff);\n      if (splitDim == -1 || StringHelper.compare(bytesPerDim, scratchDiff, 0, scratch1, 0) > 0) {\n        System.arraycopy(scratchDiff, 0, scratch1, 0, bytesPerDim);\n        splitDim = dim;\n      }\n    }\n\n    //System.out.println(\"SPLIT: \" + splitDim);\n    return splitDim;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12bfdc932307442b651432f92845942f9041ace8":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"24df944aceb57e67b2594b585cf004783054b5b2":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["770342641f7b505eaa8dccdc666158bff2419109","12bfdc932307442b651432f92845942f9041ace8"],"b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7":["24df944aceb57e67b2594b585cf004783054b5b2"],"770342641f7b505eaa8dccdc666158bff2419109":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["24df944aceb57e67b2594b585cf004783054b5b2","b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7"]},"commit2Childs":{"12bfdc932307442b651432f92845942f9041ace8":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"24df944aceb57e67b2594b585cf004783054b5b2":["b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["770342641f7b505eaa8dccdc666158bff2419109"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["24df944aceb57e67b2594b585cf004783054b5b2"],"770342641f7b505eaa8dccdc666158bff2419109":["12bfdc932307442b651432f92845942f9041ace8","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"b35cfd3fa0a5c9e066b0256c4818af1d2a9f22d7":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}