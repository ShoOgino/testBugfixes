{"path":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#newField(String,String,Map[String,#]).mjava","commits":[{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#newField(String,String,Map[String,#]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SchemaField newField(String fieldName, String fieldType, Map<String,?> options) {\n    SchemaField sf; \n    if (isMutable) {\n      try {\n        if (-1 != fieldName.indexOf('*')) {\n          String msg = \"Can't add dynamic field '\" + fieldName + \"'.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }\n        SchemaField existingFieldWithTheSameName = getFieldOrNull(fieldName);\n        if (null != existingFieldWithTheSameName) {\n          String msg = \"Field '\" + fieldName + \"' already exists.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }\n        FieldType type = getFieldTypeByName(fieldType);\n        if (null == type) {\n          String msg = \"Field '\" + fieldName + \"': Field type '\" + fieldType + \"' not found.\";\n          log.error(msg);\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }\n        sf = SchemaField.create(fieldName, type, options);\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, e);\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return sf;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3642a1e71318f071e91df80740f6a5a853db1935"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3642a1e71318f071e91df80740f6a5a853db1935","date":1454336117,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#newField(String,String,Map[String,#]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#newField(String,String,Map[String,#]).mjava","sourceNew":"  @Override\n  public SchemaField newField(String fieldName, String fieldType, Map<String,?> options) {\n    SchemaField sf; \n    if (isMutable) {\n      try {\n        if (-1 != fieldName.indexOf('*')) {\n          String msg = \"Can't add dynamic field '\" + fieldName + \"'.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }\n        SchemaField existingFieldWithTheSameName = fields.get(fieldName);\n        if (null != existingFieldWithTheSameName) {\n          String msg = \"Field '\" + fieldName + \"' already exists.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }\n        FieldType type = getFieldTypeByName(fieldType);\n        if (null == type) {\n          String msg = \"Field '\" + fieldName + \"': Field type '\" + fieldType + \"' not found.\";\n          log.error(msg);\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }\n        sf = SchemaField.create(fieldName, type, options);\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, e);\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return sf;\n  }\n\n","sourceOld":"  @Override\n  public SchemaField newField(String fieldName, String fieldType, Map<String,?> options) {\n    SchemaField sf; \n    if (isMutable) {\n      try {\n        if (-1 != fieldName.indexOf('*')) {\n          String msg = \"Can't add dynamic field '\" + fieldName + \"'.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }\n        SchemaField existingFieldWithTheSameName = getFieldOrNull(fieldName);\n        if (null != existingFieldWithTheSameName) {\n          String msg = \"Field '\" + fieldName + \"' already exists.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }\n        FieldType type = getFieldTypeByName(fieldType);\n        if (null == type) {\n          String msg = \"Field '\" + fieldName + \"': Field type '\" + fieldType + \"' not found.\";\n          log.error(msg);\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }\n        sf = SchemaField.create(fieldName, type, options);\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, e);\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return sf;\n  }\n\n","bugFix":["08970e5b8411182a29412c177eff67ec1110095b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#newField(String,String,Map[String,#]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#newField(String,String,Map[String,#]).mjava","sourceNew":"  @Override\n  public SchemaField newField(String fieldName, String fieldType, Map<String,?> options) {\n    SchemaField sf; \n    if (isMutable) {\n      try {\n        if (-1 != fieldName.indexOf('*')) {\n          String msg = \"Can't add dynamic field '\" + fieldName + \"'.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }\n        SchemaField existingFieldWithTheSameName = fields.get(fieldName);\n        if (null != existingFieldWithTheSameName) {\n          String msg = \"Field '\" + fieldName + \"' already exists.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }\n        FieldType type = getFieldTypeByName(fieldType);\n        if (null == type) {\n          String msg = \"Field '\" + fieldName + \"': Field type '\" + fieldType + \"' not found.\";\n          log.error(msg);\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }\n        sf = SchemaField.create(fieldName, type, options);\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, e);\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return sf;\n  }\n\n","sourceOld":"  @Override\n  public SchemaField newField(String fieldName, String fieldType, Map<String,?> options) {\n    SchemaField sf; \n    if (isMutable) {\n      try {\n        if (-1 != fieldName.indexOf('*')) {\n          String msg = \"Can't add dynamic field '\" + fieldName + \"'.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }\n        SchemaField existingFieldWithTheSameName = getFieldOrNull(fieldName);\n        if (null != existingFieldWithTheSameName) {\n          String msg = \"Field '\" + fieldName + \"' already exists.\";\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }\n        FieldType type = getFieldTypeByName(fieldType);\n        if (null == type) {\n          String msg = \"Field '\" + fieldName + \"': Field type '\" + fieldType + \"' not found.\";\n          log.error(msg);\n          throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n        }\n        sf = SchemaField.create(fieldName, type, options);\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, e);\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return sf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3642a1e71318f071e91df80740f6a5a853db1935":["08970e5b8411182a29412c177eff67ec1110095b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["08970e5b8411182a29412c177eff67ec1110095b","3642a1e71318f071e91df80740f6a5a853db1935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3642a1e71318f071e91df80740f6a5a853db1935"],"08970e5b8411182a29412c177eff67ec1110095b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3642a1e71318f071e91df80740f6a5a853db1935":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08970e5b8411182a29412c177eff67ec1110095b"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"08970e5b8411182a29412c177eff67ec1110095b":["3642a1e71318f071e91df80740f6a5a853db1935","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}