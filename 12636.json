{"path":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean).mjava","commits":[{"id":"343d2d9477b299075fa3a19a46e654b6c3bf552b","date":1407872410,"type":1,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean,boolean,boolean).mjava","sourceNew":"  protected NamedList toNamedList(boolean shardRequest,\n      SpellingResult spellingResult, String origQuery, boolean extendedResults) {\n    NamedList result = new NamedList();\n    Map<Token,LinkedHashMap<String,Integer>> suggestions = spellingResult\n        .getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean hasSuggestions = false;\n    boolean hasZeroFrequencyToken = false;\n    for (Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions\n        .entrySet()) {\n      Token inputToken = entry.getKey();\n      String tokenString = new String(inputToken.buffer(), 0, inputToken\n          .length());\n      Map<String,Integer> theSuggestions = new LinkedHashMap<>(\n          entry.getValue());\n      Iterator<String> sugIter = theSuggestions.keySet().iterator();\n      while (sugIter.hasNext()) {\n        String sug = sugIter.next();\n        if (sug.equals(tokenString)) {\n          sugIter.remove();\n        }\n      }\n      if (theSuggestions.size() > 0) {\n        hasSuggestions = true;\n      }\n      if (theSuggestions != null && (theSuggestions.size() > 0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n        \n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        // {\"word\":\"alt1\",\"freq\":7},\n        // {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult\n              .getTokenFrequency(inputToken));\n          \n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String,Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\", suggEntry.getKey());\n            sugEntry.add(\"freq\", suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n        \n        if (hasFreqInfo) {\n          int tokenFrequency = spellingResult.getTokenFrequency(inputToken);\n          if (tokenFrequency == 0) {\n            hasZeroFrequencyToken = true;\n          }\n        }\n        result.add(tokenString, suggestionList);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  protected NamedList toNamedList(boolean shardRequest,\n      SpellingResult spellingResult, String origQuery, boolean extendedResults,\n      boolean collate, boolean correctlySpelled) {\n    NamedList result = new NamedList();\n    Map<Token,LinkedHashMap<String,Integer>> suggestions = spellingResult\n        .getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean hasSuggestions = false;\n    boolean hasZeroFrequencyToken = false;\n    for (Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions\n        .entrySet()) {\n      Token inputToken = entry.getKey();\n      String tokenString = new String(inputToken.buffer(), 0, inputToken\n          .length());\n      Map<String,Integer> theSuggestions = new LinkedHashMap<>(\n          entry.getValue());\n      Iterator<String> sugIter = theSuggestions.keySet().iterator();\n      while (sugIter.hasNext()) {\n        String sug = sugIter.next();\n        if (sug.equals(tokenString)) {\n          sugIter.remove();\n        }\n      }\n      if (theSuggestions.size() > 0) {\n        hasSuggestions = true;\n      }\n      if (theSuggestions != null && (theSuggestions.size() > 0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n        \n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        // {\"word\":\"alt1\",\"freq\":7},\n        // {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult\n              .getTokenFrequency(inputToken));\n          \n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String,Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\", suggEntry.getKey());\n            sugEntry.add(\"freq\", suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n        \n        if (hasFreqInfo) {\n          int tokenFrequency = spellingResult.getTokenFrequency(inputToken);\n          if (tokenFrequency == 0) {\n            hasZeroFrequencyToken = true;\n          }\n        }\n        result.add(tokenString, suggestionList);\n      }\n    }\n    \n    if (extendedResults) {\n      result.add(\"correctlySpelled\", correctlySpelled);     \n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e65acce892eede973379cb2fb3b90ea49a4a5ed","date":1409839025,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean).mjava","sourceNew":"  protected NamedList toNamedList(boolean shardRequest,\n      SpellingResult spellingResult, String origQuery, boolean extendedResults) {\n    NamedList result = new NamedList();\n    Map<Token,LinkedHashMap<String,Integer>> suggestions = spellingResult\n        .getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean hasSuggestions = false;\n    boolean hasZeroFrequencyToken = false;\n    for (Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions\n        .entrySet()) {\n      Token inputToken = entry.getKey();\n      String tokenString = new String(inputToken.buffer(), 0, inputToken\n          .length());\n      Map<String,Integer> theSuggestions = new LinkedHashMap<>(\n          entry.getValue());\n      Iterator<String> sugIter = theSuggestions.keySet().iterator();\n      while (sugIter.hasNext()) {\n        String sug = sugIter.next();\n        if (sug.equals(tokenString)) {\n          sugIter.remove();\n        }\n      }\n      if (theSuggestions.size() > 0) {\n        hasSuggestions = true;\n      }\n      if (theSuggestions != null && (theSuggestions.size() > 0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n        \n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        // {\"word\":\"alt1\",\"freq\":7},\n        // {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult\n              .getTokenFrequency(inputToken));\n          \n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String,Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\", suggEntry.getKey());\n            sugEntry.add(\"freq\", suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n        \n        if (hasFreqInfo) {\n          Integer tokenFrequency = spellingResult.getTokenFrequency(inputToken);\n          if (tokenFrequency==null || tokenFrequency == 0) {\n            hasZeroFrequencyToken = true;\n          }\n        }\n        result.add(tokenString, suggestionList);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  protected NamedList toNamedList(boolean shardRequest,\n      SpellingResult spellingResult, String origQuery, boolean extendedResults) {\n    NamedList result = new NamedList();\n    Map<Token,LinkedHashMap<String,Integer>> suggestions = spellingResult\n        .getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean hasSuggestions = false;\n    boolean hasZeroFrequencyToken = false;\n    for (Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions\n        .entrySet()) {\n      Token inputToken = entry.getKey();\n      String tokenString = new String(inputToken.buffer(), 0, inputToken\n          .length());\n      Map<String,Integer> theSuggestions = new LinkedHashMap<>(\n          entry.getValue());\n      Iterator<String> sugIter = theSuggestions.keySet().iterator();\n      while (sugIter.hasNext()) {\n        String sug = sugIter.next();\n        if (sug.equals(tokenString)) {\n          sugIter.remove();\n        }\n      }\n      if (theSuggestions.size() > 0) {\n        hasSuggestions = true;\n      }\n      if (theSuggestions != null && (theSuggestions.size() > 0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n        \n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        // {\"word\":\"alt1\",\"freq\":7},\n        // {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult\n              .getTokenFrequency(inputToken));\n          \n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String,Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\", suggEntry.getKey());\n            sugEntry.add(\"freq\", suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n        \n        if (hasFreqInfo) {\n          int tokenFrequency = spellingResult.getTokenFrequency(inputToken);\n          if (tokenFrequency == 0) {\n            hasZeroFrequencyToken = true;\n          }\n        }\n        result.add(tokenString, suggestionList);\n      }\n    }\n    return result;\n  }\n\n","bugFix":["541f6605a29362fa8a42f33b69069e7da5178034"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90","date":1443533495,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean).mjava","sourceNew":"  protected NamedList toNamedList(boolean shardRequest,\n      SpellingResult spellingResult, String origQuery, boolean extendedResults) {\n    NamedList result = new NamedList();\n    Map<Token,LinkedHashMap<String,Integer>> suggestions = spellingResult\n        .getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean hasSuggestions = false;\n    boolean hasZeroFrequencyToken = false;\n    for (Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions\n        .entrySet()) {\n      Token inputToken = entry.getKey();\n      String tokenString = new String(inputToken.buffer(), 0, inputToken\n          .length());\n      Map<String,Integer> theSuggestions = new LinkedHashMap<>(\n          entry.getValue());\n      Iterator<String> sugIter = theSuggestions.keySet().iterator();\n      while (sugIter.hasNext()) {\n        String sug = sugIter.next();\n        if (sug.equals(tokenString)) {\n          sugIter.remove();\n        }\n      }\n      if (theSuggestions.size() > 0) {\n        hasSuggestions = true;\n      }\n      if (theSuggestions != null && (theSuggestions.size() > 0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n\n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        // {\"word\":\"alt1\",\"freq\":7},\n        // {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult\n              .getTokenFrequency(inputToken));\n\n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String,Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\", suggEntry.getKey());\n            sugEntry.add(\"freq\", suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n\n        if (hasFreqInfo) {\n          Integer tokenFrequency = spellingResult.getTokenFrequency(inputToken);\n          if (tokenFrequency==null || tokenFrequency == 0) {\n            hasZeroFrequencyToken = true;\n          }\n        }\n        result.add(tokenString, suggestionList);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  protected NamedList toNamedList(boolean shardRequest,\n      SpellingResult spellingResult, String origQuery, boolean extendedResults) {\n    NamedList result = new NamedList();\n    Map<Token,LinkedHashMap<String,Integer>> suggestions = spellingResult\n        .getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean hasSuggestions = false;\n    boolean hasZeroFrequencyToken = false;\n    for (Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions\n        .entrySet()) {\n      Token inputToken = entry.getKey();\n      String tokenString = new String(inputToken.buffer(), 0, inputToken\n          .length());\n      Map<String,Integer> theSuggestions = new LinkedHashMap<>(\n          entry.getValue());\n      Iterator<String> sugIter = theSuggestions.keySet().iterator();\n      while (sugIter.hasNext()) {\n        String sug = sugIter.next();\n        if (sug.equals(tokenString)) {\n          sugIter.remove();\n        }\n      }\n      if (theSuggestions.size() > 0) {\n        hasSuggestions = true;\n      }\n      if (theSuggestions != null && (theSuggestions.size() > 0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n        \n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        // {\"word\":\"alt1\",\"freq\":7},\n        // {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult\n              .getTokenFrequency(inputToken));\n          \n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String,Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\", suggEntry.getKey());\n            sugEntry.add(\"freq\", suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n        \n        if (hasFreqInfo) {\n          Integer tokenFrequency = spellingResult.getTokenFrequency(inputToken);\n          if (tokenFrequency==null || tokenFrequency == 0) {\n            hasZeroFrequencyToken = true;\n          }\n        }\n        result.add(tokenString, suggestionList);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"862753d1e2f4853f389dcb115747661e7bc0e384","date":1485438193,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean).mjava","sourceNew":"  protected NamedList toNamedList(boolean shardRequest,\n      SpellingResult spellingResult, String origQuery, boolean extendedResults) {\n    NamedList result = new SimpleOrderedMap();\n    Map<Token,LinkedHashMap<String,Integer>> suggestions = spellingResult\n        .getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean hasSuggestions = false;\n    boolean hasZeroFrequencyToken = false;\n    for (Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions\n        .entrySet()) {\n      Token inputToken = entry.getKey();\n      String tokenString = new String(inputToken.buffer(), 0, inputToken\n          .length());\n      Map<String,Integer> theSuggestions = new LinkedHashMap<>(\n          entry.getValue());\n      Iterator<String> sugIter = theSuggestions.keySet().iterator();\n      while (sugIter.hasNext()) {\n        String sug = sugIter.next();\n        if (sug.equals(tokenString)) {\n          sugIter.remove();\n        }\n      }\n      if (theSuggestions.size() > 0) {\n        hasSuggestions = true;\n      }\n      if (theSuggestions != null && (theSuggestions.size() > 0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n\n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        // {\"word\":\"alt1\",\"freq\":7},\n        // {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult\n              .getTokenFrequency(inputToken));\n\n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String,Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\", suggEntry.getKey());\n            sugEntry.add(\"freq\", suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n\n        if (hasFreqInfo) {\n          Integer tokenFrequency = spellingResult.getTokenFrequency(inputToken);\n          if (tokenFrequency==null || tokenFrequency == 0) {\n            hasZeroFrequencyToken = true;\n          }\n        }\n        result.add(tokenString, suggestionList);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  protected NamedList toNamedList(boolean shardRequest,\n      SpellingResult spellingResult, String origQuery, boolean extendedResults) {\n    NamedList result = new NamedList();\n    Map<Token,LinkedHashMap<String,Integer>> suggestions = spellingResult\n        .getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean hasSuggestions = false;\n    boolean hasZeroFrequencyToken = false;\n    for (Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions\n        .entrySet()) {\n      Token inputToken = entry.getKey();\n      String tokenString = new String(inputToken.buffer(), 0, inputToken\n          .length());\n      Map<String,Integer> theSuggestions = new LinkedHashMap<>(\n          entry.getValue());\n      Iterator<String> sugIter = theSuggestions.keySet().iterator();\n      while (sugIter.hasNext()) {\n        String sug = sugIter.next();\n        if (sug.equals(tokenString)) {\n          sugIter.remove();\n        }\n      }\n      if (theSuggestions.size() > 0) {\n        hasSuggestions = true;\n      }\n      if (theSuggestions != null && (theSuggestions.size() > 0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n\n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        // {\"word\":\"alt1\",\"freq\":7},\n        // {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult\n              .getTokenFrequency(inputToken));\n\n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String,Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\", suggEntry.getKey());\n            sugEntry.add(\"freq\", suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n\n        if (hasFreqInfo) {\n          Integer tokenFrequency = spellingResult.getTokenFrequency(inputToken);\n          if (tokenFrequency==null || tokenFrequency == 0) {\n            hasZeroFrequencyToken = true;\n          }\n        }\n        result.add(tokenString, suggestionList);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean).mjava","sourceNew":"  protected NamedList toNamedList(boolean shardRequest,\n      SpellingResult spellingResult, String origQuery, boolean extendedResults) {\n    NamedList result = new SimpleOrderedMap();\n    Map<Token,LinkedHashMap<String,Integer>> suggestions = spellingResult\n        .getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean hasSuggestions = false;\n    boolean hasZeroFrequencyToken = false;\n    for (Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions\n        .entrySet()) {\n      Token inputToken = entry.getKey();\n      String tokenString = new String(inputToken.buffer(), 0, inputToken\n          .length());\n      Map<String,Integer> theSuggestions = new LinkedHashMap<>(\n          entry.getValue());\n      Iterator<String> sugIter = theSuggestions.keySet().iterator();\n      while (sugIter.hasNext()) {\n        String sug = sugIter.next();\n        if (sug.equals(tokenString)) {\n          sugIter.remove();\n        }\n      }\n      if (theSuggestions.size() > 0) {\n        hasSuggestions = true;\n      }\n      if (theSuggestions != null && (theSuggestions.size() > 0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n\n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        // {\"word\":\"alt1\",\"freq\":7},\n        // {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult\n              .getTokenFrequency(inputToken));\n\n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String,Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\", suggEntry.getKey());\n            sugEntry.add(\"freq\", suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n\n        if (hasFreqInfo) {\n          Integer tokenFrequency = spellingResult.getTokenFrequency(inputToken);\n          if (tokenFrequency==null || tokenFrequency == 0) {\n            hasZeroFrequencyToken = true;\n          }\n        }\n        result.add(tokenString, suggestionList);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  protected NamedList toNamedList(boolean shardRequest,\n      SpellingResult spellingResult, String origQuery, boolean extendedResults) {\n    NamedList result = new NamedList();\n    Map<Token,LinkedHashMap<String,Integer>> suggestions = spellingResult\n        .getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean hasSuggestions = false;\n    boolean hasZeroFrequencyToken = false;\n    for (Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions\n        .entrySet()) {\n      Token inputToken = entry.getKey();\n      String tokenString = new String(inputToken.buffer(), 0, inputToken\n          .length());\n      Map<String,Integer> theSuggestions = new LinkedHashMap<>(\n          entry.getValue());\n      Iterator<String> sugIter = theSuggestions.keySet().iterator();\n      while (sugIter.hasNext()) {\n        String sug = sugIter.next();\n        if (sug.equals(tokenString)) {\n          sugIter.remove();\n        }\n      }\n      if (theSuggestions.size() > 0) {\n        hasSuggestions = true;\n      }\n      if (theSuggestions != null && (theSuggestions.size() > 0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n\n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        // {\"word\":\"alt1\",\"freq\":7},\n        // {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult\n              .getTokenFrequency(inputToken));\n\n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String,Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\", suggEntry.getKey());\n            sugEntry.add(\"freq\", suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n\n        if (hasFreqInfo) {\n          Integer tokenFrequency = spellingResult.getTokenFrequency(inputToken);\n          if (tokenFrequency==null || tokenFrequency == 0) {\n            hasZeroFrequencyToken = true;\n          }\n        }\n        result.add(tokenString, suggestionList);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"374570062523b2011ca513a2276525ff3ddf222d","date":1494268002,"type":3,"author":"jdyer1","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean).mjava","sourceNew":"  protected NamedList toNamedList(boolean shardRequest,\n      SpellingResult spellingResult, String origQuery, boolean extendedResults) {\n    NamedList result = new NamedList();\n    Map<Token,LinkedHashMap<String,Integer>> suggestions = spellingResult\n        .getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean hasSuggestions = false;\n    boolean hasZeroFrequencyToken = false;\n    for (Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions\n        .entrySet()) {\n      Token inputToken = entry.getKey();\n      String tokenString = new String(inputToken.buffer(), 0, inputToken\n          .length());\n      Map<String,Integer> theSuggestions = new LinkedHashMap<>(\n          entry.getValue());\n      Iterator<String> sugIter = theSuggestions.keySet().iterator();\n      while (sugIter.hasNext()) {\n        String sug = sugIter.next();\n        if (sug.equals(tokenString)) {\n          sugIter.remove();\n        }\n      }\n      if (theSuggestions.size() > 0) {\n        hasSuggestions = true;\n      }\n      if (theSuggestions != null && (theSuggestions.size() > 0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n\n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        // {\"word\":\"alt1\",\"freq\":7},\n        // {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult\n              .getTokenFrequency(inputToken));\n\n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String,Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\", suggEntry.getKey());\n            sugEntry.add(\"freq\", suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n\n        if (hasFreqInfo) {\n          Integer tokenFrequency = spellingResult.getTokenFrequency(inputToken);\n          if (tokenFrequency==null || tokenFrequency == 0) {\n            hasZeroFrequencyToken = true;\n          }\n        }\n        result.add(tokenString, suggestionList);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  protected NamedList toNamedList(boolean shardRequest,\n      SpellingResult spellingResult, String origQuery, boolean extendedResults) {\n    NamedList result = new SimpleOrderedMap();\n    Map<Token,LinkedHashMap<String,Integer>> suggestions = spellingResult\n        .getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean hasSuggestions = false;\n    boolean hasZeroFrequencyToken = false;\n    for (Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions\n        .entrySet()) {\n      Token inputToken = entry.getKey();\n      String tokenString = new String(inputToken.buffer(), 0, inputToken\n          .length());\n      Map<String,Integer> theSuggestions = new LinkedHashMap<>(\n          entry.getValue());\n      Iterator<String> sugIter = theSuggestions.keySet().iterator();\n      while (sugIter.hasNext()) {\n        String sug = sugIter.next();\n        if (sug.equals(tokenString)) {\n          sugIter.remove();\n        }\n      }\n      if (theSuggestions.size() > 0) {\n        hasSuggestions = true;\n      }\n      if (theSuggestions != null && (theSuggestions.size() > 0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n\n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        // {\"word\":\"alt1\",\"freq\":7},\n        // {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult\n              .getTokenFrequency(inputToken));\n\n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String,Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\", suggEntry.getKey());\n            sugEntry.add(\"freq\", suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n\n        if (hasFreqInfo) {\n          Integer tokenFrequency = spellingResult.getTokenFrequency(inputToken);\n          if (tokenFrequency==null || tokenFrequency == 0) {\n            hasZeroFrequencyToken = true;\n          }\n        }\n        result.add(tokenString, suggestionList);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean).mjava","sourceNew":"  protected NamedList toNamedList(boolean shardRequest,\n      SpellingResult spellingResult, String origQuery, boolean extendedResults) {\n    NamedList result = new NamedList();\n    Map<Token,LinkedHashMap<String,Integer>> suggestions = spellingResult\n        .getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean hasSuggestions = false;\n    boolean hasZeroFrequencyToken = false;\n    for (Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions\n        .entrySet()) {\n      Token inputToken = entry.getKey();\n      String tokenString = new String(inputToken.buffer(), 0, inputToken\n          .length());\n      Map<String,Integer> theSuggestions = new LinkedHashMap<>(\n          entry.getValue());\n      Iterator<String> sugIter = theSuggestions.keySet().iterator();\n      while (sugIter.hasNext()) {\n        String sug = sugIter.next();\n        if (sug.equals(tokenString)) {\n          sugIter.remove();\n        }\n      }\n      if (theSuggestions.size() > 0) {\n        hasSuggestions = true;\n      }\n      if (theSuggestions != null && (theSuggestions.size() > 0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n\n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        // {\"word\":\"alt1\",\"freq\":7},\n        // {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult\n              .getTokenFrequency(inputToken));\n\n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String,Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\", suggEntry.getKey());\n            sugEntry.add(\"freq\", suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n\n        if (hasFreqInfo) {\n          Integer tokenFrequency = spellingResult.getTokenFrequency(inputToken);\n          if (tokenFrequency==null || tokenFrequency == 0) {\n            hasZeroFrequencyToken = true;\n          }\n        }\n        result.add(tokenString, suggestionList);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  protected NamedList toNamedList(boolean shardRequest,\n      SpellingResult spellingResult, String origQuery, boolean extendedResults) {\n    NamedList result = new SimpleOrderedMap();\n    Map<Token,LinkedHashMap<String,Integer>> suggestions = spellingResult\n        .getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean hasSuggestions = false;\n    boolean hasZeroFrequencyToken = false;\n    for (Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions\n        .entrySet()) {\n      Token inputToken = entry.getKey();\n      String tokenString = new String(inputToken.buffer(), 0, inputToken\n          .length());\n      Map<String,Integer> theSuggestions = new LinkedHashMap<>(\n          entry.getValue());\n      Iterator<String> sugIter = theSuggestions.keySet().iterator();\n      while (sugIter.hasNext()) {\n        String sug = sugIter.next();\n        if (sug.equals(tokenString)) {\n          sugIter.remove();\n        }\n      }\n      if (theSuggestions.size() > 0) {\n        hasSuggestions = true;\n      }\n      if (theSuggestions != null && (theSuggestions.size() > 0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n\n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        // {\"word\":\"alt1\",\"freq\":7},\n        // {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult\n              .getTokenFrequency(inputToken));\n\n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String,Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\", suggEntry.getKey());\n            sugEntry.add(\"freq\", suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n\n        if (hasFreqInfo) {\n          Integer tokenFrequency = spellingResult.getTokenFrequency(inputToken);\n          if (tokenFrequency==null || tokenFrequency == 0) {\n            hasZeroFrequencyToken = true;\n          }\n        }\n        result.add(tokenString, suggestionList);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#toNamedList(boolean,SpellingResult,String,boolean).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  protected NamedList toNamedList(boolean shardRequest,\n      SpellingResult spellingResult, String origQuery, boolean extendedResults) {\n    NamedList result = new NamedList();\n    Map<Token,LinkedHashMap<String,Integer>> suggestions = spellingResult\n        .getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean hasSuggestions = false;\n    boolean hasZeroFrequencyToken = false;\n    for (Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions\n        .entrySet()) {\n      Token inputToken = entry.getKey();\n      String tokenString = new String(inputToken.buffer(), 0, inputToken\n          .length());\n      Map<String,Integer> theSuggestions = new LinkedHashMap<>(\n          entry.getValue());\n      Iterator<String> sugIter = theSuggestions.keySet().iterator();\n      while (sugIter.hasNext()) {\n        String sug = sugIter.next();\n        if (sug.equals(tokenString)) {\n          sugIter.remove();\n        }\n      }\n      if (theSuggestions.size() > 0) {\n        hasSuggestions = true;\n      }\n      if (theSuggestions != null && (theSuggestions.size() > 0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n\n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        // {\"word\":\"alt1\",\"freq\":7},\n        // {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult\n              .getTokenFrequency(inputToken));\n\n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String,Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\", suggEntry.getKey());\n            sugEntry.add(\"freq\", suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n\n        if (hasFreqInfo) {\n          Integer tokenFrequency = spellingResult.getTokenFrequency(inputToken);\n          if (tokenFrequency==null || tokenFrequency == 0) {\n            hasZeroFrequencyToken = true;\n          }\n        }\n        result.add(tokenString, suggestionList);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  protected NamedList toNamedList(boolean shardRequest,\n      SpellingResult spellingResult, String origQuery, boolean extendedResults) {\n    NamedList result = new NamedList();\n    Map<Token,LinkedHashMap<String,Integer>> suggestions = spellingResult\n        .getSuggestions();\n    boolean hasFreqInfo = spellingResult.hasTokenFrequencyInfo();\n    boolean hasSuggestions = false;\n    boolean hasZeroFrequencyToken = false;\n    for (Map.Entry<Token,LinkedHashMap<String,Integer>> entry : suggestions\n        .entrySet()) {\n      Token inputToken = entry.getKey();\n      String tokenString = new String(inputToken.buffer(), 0, inputToken\n          .length());\n      Map<String,Integer> theSuggestions = new LinkedHashMap<>(\n          entry.getValue());\n      Iterator<String> sugIter = theSuggestions.keySet().iterator();\n      while (sugIter.hasNext()) {\n        String sug = sugIter.next();\n        if (sug.equals(tokenString)) {\n          sugIter.remove();\n        }\n      }\n      if (theSuggestions.size() > 0) {\n        hasSuggestions = true;\n      }\n      if (theSuggestions != null && (theSuggestions.size() > 0 || shardRequest)) {\n        SimpleOrderedMap suggestionList = new SimpleOrderedMap();\n        suggestionList.add(\"numFound\", theSuggestions.size());\n        suggestionList.add(\"startOffset\", inputToken.startOffset());\n        suggestionList.add(\"endOffset\", inputToken.endOffset());\n\n        // Logical structure of normal (non-extended) results:\n        // \"suggestion\":[\"alt1\",\"alt2\"]\n        //\n        // Logical structure of the extended results:\n        // \"suggestion\":[\n        // {\"word\":\"alt1\",\"freq\":7},\n        // {\"word\":\"alt2\",\"freq\":4}\n        // ]\n        if (extendedResults && hasFreqInfo) {\n          suggestionList.add(\"origFreq\", spellingResult\n              .getTokenFrequency(inputToken));\n\n          ArrayList<SimpleOrderedMap> sugs = new ArrayList<>();\n          suggestionList.add(\"suggestion\", sugs);\n          for (Map.Entry<String,Integer> suggEntry : theSuggestions.entrySet()) {\n            SimpleOrderedMap sugEntry = new SimpleOrderedMap();\n            sugEntry.add(\"word\", suggEntry.getKey());\n            sugEntry.add(\"freq\", suggEntry.getValue());\n            sugs.add(sugEntry);\n          }\n        } else {\n          suggestionList.add(\"suggestion\", theSuggestions.keySet());\n        }\n\n        if (hasFreqInfo) {\n          Integer tokenFrequency = spellingResult.getTokenFrequency(inputToken);\n          if (tokenFrequency==null || tokenFrequency == 0) {\n            hasZeroFrequencyToken = true;\n          }\n        }\n        result.add(tokenString, suggestionList);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"374570062523b2011ca513a2276525ff3ddf222d":["862753d1e2f4853f389dcb115747661e7bc0e384"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["862753d1e2f4853f389dcb115747661e7bc0e384","374570062523b2011ca513a2276525ff3ddf222d"],"862753d1e2f4853f389dcb115747661e7bc0e384":["5ba46b57f67b4eb7246bdc86cfdeb15b78306b90"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["5ba46b57f67b4eb7246bdc86cfdeb15b78306b90","862753d1e2f4853f389dcb115747661e7bc0e384"],"8e65acce892eede973379cb2fb3b90ea49a4a5ed":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90":["8e65acce892eede973379cb2fb3b90ea49a4a5ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["374570062523b2011ca513a2276525ff3ddf222d"]},"commit2Childs":{"374570062523b2011ca513a2276525ff3ddf222d":["e9017cf144952056066919f1ebc7897ff9bd71b1","8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"862753d1e2f4853f389dcb115747661e7bc0e384":["374570062523b2011ca513a2276525ff3ddf222d","e9017cf144952056066919f1ebc7897ff9bd71b1","598b5d23aa7c9732bf473c21a9cd309c44599394"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"8e65acce892eede973379cb2fb3b90ea49a4a5ed":["5ba46b57f67b4eb7246bdc86cfdeb15b78306b90"],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["8e65acce892eede973379cb2fb3b90ea49a4a5ed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90":["862753d1e2f4853f389dcb115747661e7bc0e384","598b5d23aa7c9732bf473c21a9cd309c44599394"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}