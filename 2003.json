{"path":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","commits":[{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            int commit;\n            synchronized (random) {\n              commit = random.nextInt(20);\n            }\n            if (commit == 0) {\n              writer.commit();\n            }\n          }\n        }\n      } catch (Throwable ex) {\n        throw new RuntimeException(ex);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4f6945f5eb72bd7d9722ab064a98eb1d8543afc","date":1303831082,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            int commit;\n            synchronized (random) {\n              commit = random.nextInt(20);\n            }\n            if (commit == 0) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        throw new RuntimeException(ex);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            int commit;\n            synchronized (random) {\n              commit = random.nextInt(20);\n            }\n            if (commit == 0) {\n              writer.commit();\n            }\n          }\n        }\n      } catch (Throwable ex) {\n        throw new RuntimeException(ex);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            int commit;\n            synchronized (random) {\n              commit = random.nextInt(20);\n            }\n            if (commit == 0) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        throw new RuntimeException(ex);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            int commit;\n            synchronized (random) {\n              commit = random.nextInt(20);\n            }\n            if (commit == 0) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        throw new RuntimeException(ex);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            int commit;\n            synchronized (random) {\n              commit = random.nextInt(20);\n            }\n            if (commit == 0) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        throw new RuntimeException(ex);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24799f7a3ae4a9e034b683aaa4d6b657d8a3ecdd","date":1309269564,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            if (rarely()) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        throw new RuntimeException(ex);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            int commit;\n            synchronized (random) {\n              commit = random.nextInt(20);\n            }\n            if (commit == 0) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        throw new RuntimeException(ex);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            if (rarely()) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        throw new RuntimeException(ex);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            int commit;\n            synchronized (random) {\n              commit = random.nextInt(20);\n            }\n            if (commit == 0) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        throw new RuntimeException(ex);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            if (rarely()) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        throw new RuntimeException(ex);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            int commit;\n            synchronized (random) {\n              commit = random.nextInt(20);\n            }\n            if (commit == 0) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        throw new RuntimeException(ex);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy.IndexThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            if (rarely()) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        throw new RuntimeException(ex);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        long ramSize = 0;\n        while (pendingDocs.decrementAndGet() > -1) {\n          Document doc = docs.nextDoc();\n          writer.addDocument(doc);\n          long newRamSize = writer.ramSizeInBytes();\n          if (newRamSize != ramSize) {\n            ramSize = newRamSize;\n          }\n          if (doRandomCommit) {\n            if (rarely()) {\n              writer.commit();\n            }\n          }\n        }\n        writer.commit();\n      } catch (Throwable ex) {\n        throw new RuntimeException(ex);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f4f6945f5eb72bd7d9722ab064a98eb1d8543afc":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["24799f7a3ae4a9e034b683aaa4d6b657d8a3ecdd"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4f6945f5eb72bd7d9722ab064a98eb1d8543afc"],"24799f7a3ae4a9e034b683aaa4d6b657d8a3ecdd":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","24799f7a3ae4a9e034b683aaa4d6b657d8a3ecdd"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","24799f7a3ae4a9e034b683aaa4d6b657d8a3ecdd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"f4f6945f5eb72bd7d9722ab064a98eb1d8543afc":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["f4f6945f5eb72bd7d9722ab064a98eb1d8543afc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","24799f7a3ae4a9e034b683aaa4d6b657d8a3ecdd","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"24799f7a3ae4a9e034b683aaa4d6b657d8a3ecdd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}