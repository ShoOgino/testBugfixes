{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#equals(Object).mjava","commits":[{"id":"29191e6ce86bfcd231cd069834a87833fa4079c1","date":1228333111,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"\t//@Override\n\tpublic final boolean equals(final Object o) {\n\t\tif (o instanceof TrieRangeFilter) {\n\t\t\tTrieRangeFilter q=(TrieRangeFilter)o;\n\t\t\t// trieVariants are singleton per type, so no equals needed\n\t\t\treturn (field==q.field && min.equals(q.min) && max.equals(q.max) && trieVariant==q.trieVariant);\n\t\t} else return false;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ef14ec05032a847f9ce1820055c6c29f72d771a","date":1231669514,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#equals(Object).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#equals(Object).mjava","sourceNew":"  //@Override\n  public final boolean equals(final Object o) {\n    if (o instanceof TrieRangeFilter) {\n      TrieRangeFilter q=(TrieRangeFilter)o;\n      // trieVariants are singleton per type, so no equals needed\n      return (field==q.field && min.equals(q.min) && max.equals(q.max) && trieVariant==q.trieVariant);\n    } else return false;\n  }\n\n","sourceOld":"\t//@Override\n\tpublic final boolean equals(final Object o) {\n\t\tif (o instanceof TrieRangeFilter) {\n\t\t\tTrieRangeFilter q=(TrieRangeFilter)o;\n\t\t\t// trieVariants are singleton per type, so no equals needed\n\t\t\treturn (field==q.field && min.equals(q.min) && max.equals(q.max) && trieVariant==q.trieVariant);\n\t\t} else return false;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e91724d755098f0c856c612bf56d1edc31044a82","date":1233069324,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#equals(Object).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#equals(Object).mjava","sourceNew":"  /**\n   * Two instances are equal if they have the same trie-encoded range bounds, same field, and same variant.\n   * If one of the instances uses an exclusive lower bound, it is equal to a range with inclusive bound,\n   * when the inclusive lower bound is equal to the incremented exclusive lower bound of the other one.\n   * The same applys for the upper bound in other direction.\n   */\n  //@Override\n  public final boolean equals(final Object o) {\n    if (o instanceof TrieRangeFilter) {\n      TrieRangeFilter q=(TrieRangeFilter)o;\n      // trieVariants are singleton per type, so no equals needed.\n      return (field==q.field && min.equals(q.min) && max.equals(q.max) && trieVariant==q.trieVariant);\n    } else return false;\n  }\n\n","sourceOld":"  //@Override\n  public final boolean equals(final Object o) {\n    if (o instanceof TrieRangeFilter) {\n      TrieRangeFilter q=(TrieRangeFilter)o;\n      // trieVariants are singleton per type, so no equals needed\n      return (field==q.field && min.equals(q.min) && max.equals(q.max) && trieVariant==q.trieVariant);\n    } else return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeFilter#equals(Object).mjava","sourceNew":null,"sourceOld":"  /**\n   * Two instances are equal if they have the same trie-encoded range bounds, same field, and same variant.\n   * If one of the instances uses an exclusive lower bound, it is equal to a range with inclusive bound,\n   * when the inclusive lower bound is equal to the incremented exclusive lower bound of the other one.\n   * The same applys for the upper bound in other direction.\n   */\n  //@Override\n  public final boolean equals(final Object o) {\n    if (o instanceof TrieRangeFilter) {\n      TrieRangeFilter q=(TrieRangeFilter)o;\n      // trieVariants are singleton per type, so no equals needed.\n      return (field==q.field && min.equals(q.min) && max.equals(q.max) && trieVariant==q.trieVariant);\n    } else return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["e91724d755098f0c856c612bf56d1edc31044a82"],"e91724d755098f0c856c612bf56d1edc31044a82":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29191e6ce86bfcd231cd069834a87833fa4079c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["29191e6ce86bfcd231cd069834a87833fa4079c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"]},"commit2Childs":{"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e91724d755098f0c856c612bf56d1edc31044a82":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29191e6ce86bfcd231cd069834a87833fa4079c1"],"29191e6ce86bfcd231cd069834a87833fa4079c1":["8ef14ec05032a847f9ce1820055c6c29f72d771a"],"8ef14ec05032a847f9ce1820055c6c29f72d771a":["e91724d755098f0c856c612bf56d1edc31044a82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}