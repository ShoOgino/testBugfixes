{"path":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","commits":[{"id":"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9","date":1434467834,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","pathOld":"/dev/null","sourceNew":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    if (onlyPseudoFields) {\n      // no need to get stored fields of the document, see SOLR-5968\n      sdoc = new SolrDocument();\n    } else {\n      try {\n        StoredDocument doc = searcher.doc(id, fnames);\n        sdoc = getDoc(doc, schema);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n      }\n    }\n\n    if (transformer != null) {\n      try {\n        transformer.transform(sdoc, id);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","date":1440797084,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","sourceNew":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    if (onlyPseudoFields) {\n      // no need to get stored fields of the document, see SOLR-5968\n      sdoc = new SolrDocument();\n    } else {\n      try {\n        StoredDocument doc = rctx.getSearcher().doc(id, fnames);\n        sdoc = getDoc(doc, rctx.getSearcher().getSchema()); // make sure to use the schema from the searcher and not the request (cross-core)\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n      }\n    }\n\n    if (transformer != null) {\n      boolean doScore = rctx.wantsScores();\n      try {\n        transformer.transform(sdoc, id, doScore ? docIterator.score() : 0);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","sourceOld":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    if (onlyPseudoFields) {\n      // no need to get stored fields of the document, see SOLR-5968\n      sdoc = new SolrDocument();\n    } else {\n      try {\n        StoredDocument doc = searcher.doc(id, fnames);\n        sdoc = getDoc(doc, schema);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n      }\n    }\n\n    if (transformer != null) {\n      try {\n        transformer.transform(sdoc, id);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdac0dff04219451c7511d62225080a93a0181ea","date":1451212020,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","sourceNew":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    if (onlyPseudoFields) {\n      // no need to get stored fields of the document, see SOLR-5968\n      sdoc = new SolrDocument();\n    } else {\n      try {\n        StoredDocument doc = rctx.getSearcher().doc(id, fnames);\n        sdoc = getDoc(doc, rctx.getSearcher().getSchema()); // make sure to use the schema from the searcher and not the request (cross-core)\n\n        // decorate the document with non-stored docValues fields\n        if (dvFieldsToReturn != null) {\n          rctx.getSearcher().decorateDocValueFields(sdoc, id, dvFieldsToReturn);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n      }\n    }\n\n    if (transformer != null) {\n      boolean doScore = rctx.wantsScores();\n      try {\n        transformer.transform(sdoc, id, doScore ? docIterator.score() : 0);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","sourceOld":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    if (onlyPseudoFields) {\n      // no need to get stored fields of the document, see SOLR-5968\n      sdoc = new SolrDocument();\n    } else {\n      try {\n        StoredDocument doc = rctx.getSearcher().doc(id, fnames);\n        sdoc = getDoc(doc, rctx.getSearcher().getSchema()); // make sure to use the schema from the searcher and not the request (cross-core)\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n      }\n    }\n\n    if (transformer != null) {\n      boolean doScore = rctx.wantsScores();\n      try {\n        transformer.transform(sdoc, id, doScore ? docIterator.score() : 0);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","sourceNew":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    if (onlyPseudoFields) {\n      // no need to get stored fields of the document, see SOLR-5968\n      sdoc = new SolrDocument();\n    } else {\n      try {\n        Document doc = rctx.getSearcher().doc(id, fnames);\n        sdoc = getDoc(doc, rctx.getSearcher().getSchema()); // make sure to use the schema from the searcher and not the request (cross-core)\n\n        // decorate the document with non-stored docValues fields\n        if (dvFieldsToReturn != null) {\n          rctx.getSearcher().decorateDocValueFields(sdoc, id, dvFieldsToReturn);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n      }\n    }\n\n    if (transformer != null) {\n      boolean doScore = rctx.wantsScores();\n      try {\n        transformer.transform(sdoc, id, doScore ? docIterator.score() : 0);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","sourceOld":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    if (onlyPseudoFields) {\n      // no need to get stored fields of the document, see SOLR-5968\n      sdoc = new SolrDocument();\n    } else {\n      try {\n        StoredDocument doc = rctx.getSearcher().doc(id, fnames);\n        sdoc = getDoc(doc, rctx.getSearcher().getSchema()); // make sure to use the schema from the searcher and not the request (cross-core)\n\n        // decorate the document with non-stored docValues fields\n        if (dvFieldsToReturn != null) {\n          rctx.getSearcher().decorateDocValueFields(sdoc, id, dvFieldsToReturn);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n      }\n    }\n\n    if (transformer != null) {\n      boolean doScore = rctx.wantsScores();\n      try {\n        transformer.transform(sdoc, id, doScore ? docIterator.score() : 0);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a9344cff6a72bc4c1ef080c69e10ad0635b811","date":1490410892,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","sourceNew":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    if (onlyPseudoFields) {\n      // no need to get stored fields of the document, see SOLR-5968\n      sdoc = new SolrDocument();\n    } else {\n      try {\n        Document doc = docFetcher.doc(id, fnames);\n        sdoc = convertLuceneDocToSolrDoc(doc, rctx.getSearcher().getSchema()); // make sure to use the schema from the searcher and not the request (cross-core)\n\n        // decorate the document with non-stored docValues fields\n        if (dvFieldsToReturn != null) {\n          docFetcher.decorateDocValueFields(sdoc, id, dvFieldsToReturn);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n      }\n    }\n\n    if (transformer != null) {\n      boolean doScore = rctx.wantsScores();\n      try {\n        transformer.transform(sdoc, id, doScore ? docIterator.score() : 0);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","sourceOld":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    if (onlyPseudoFields) {\n      // no need to get stored fields of the document, see SOLR-5968\n      sdoc = new SolrDocument();\n    } else {\n      try {\n        Document doc = rctx.getSearcher().doc(id, fnames);\n        sdoc = getDoc(doc, rctx.getSearcher().getSchema()); // make sure to use the schema from the searcher and not the request (cross-core)\n\n        // decorate the document with non-stored docValues fields\n        if (dvFieldsToReturn != null) {\n          rctx.getSearcher().decorateDocValueFields(sdoc, id, dvFieldsToReturn);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n      }\n    }\n\n    if (transformer != null) {\n      boolean doScore = rctx.wantsScores();\n      try {\n        transformer.transform(sdoc, id, doScore ? docIterator.score() : 0);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de548de3ce5405595899f548152d4b93ac9eb9cc","date":1490594650,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","sourceNew":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    if (onlyPseudoFields) {\n      // no need to get stored fields of the document, see SOLR-5968\n      sdoc = new SolrDocument();\n    } else {\n      try {\n        Document doc = docFetcher.doc(id, fnames);\n        sdoc = convertLuceneDocToSolrDoc(doc, rctx.getSearcher().getSchema()); // make sure to use the schema from the searcher and not the request (cross-core)\n\n        // decorate the document with non-stored docValues fields\n        if (dvFieldsToReturn != null) {\n          docFetcher.decorateDocValueFields(sdoc, id, dvFieldsToReturn);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n      }\n    }\n\n    if (transformer != null) {\n      boolean doScore = rctx.wantsScores();\n      try {\n        transformer.transform(sdoc, id, doScore ? docIterator.score() : 0);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","sourceOld":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    if (onlyPseudoFields) {\n      // no need to get stored fields of the document, see SOLR-5968\n      sdoc = new SolrDocument();\n    } else {\n      try {\n        Document doc = rctx.getSearcher().doc(id, fnames);\n        sdoc = getDoc(doc, rctx.getSearcher().getSchema()); // make sure to use the schema from the searcher and not the request (cross-core)\n\n        // decorate the document with non-stored docValues fields\n        if (dvFieldsToReturn != null) {\n          rctx.getSearcher().decorateDocValueFields(sdoc, id, dvFieldsToReturn);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n      }\n    }\n\n    if (transformer != null) {\n      boolean doScore = rctx.wantsScores();\n      try {\n        transformer.transform(sdoc, id, doScore ? docIterator.score() : 0);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320eec6599df6f97f2461a5d1ad49cd93b324a14","date":1503502574,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","sourceNew":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    if (onlyPseudoFields) {\n      // no need to get stored fields of the document, see SOLR-5968\n      sdoc = new SolrDocument();\n    } else {\n      try {\n        Document doc = docFetcher.doc(id, fnames);\n        sdoc = convertLuceneDocToSolrDoc(doc, rctx.getSearcher().getSchema()); // make sure to use the schema from the searcher and not the request (cross-core)\n\n        // decorate the document with non-stored docValues fields\n        if (dvFieldsToReturn != null) {\n          docFetcher.decorateDocValueFields(sdoc, id, dvFieldsToReturn);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n      }\n    }\n\n    if (transformer != null) {\n      boolean doScore = rctx.wantsScores();\n      try {\n        if (doScore) {\n          transformer.transform(sdoc, id, docIterator.score());\n        } else {\n          transformer.transform(sdoc, id);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","sourceOld":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    if (onlyPseudoFields) {\n      // no need to get stored fields of the document, see SOLR-5968\n      sdoc = new SolrDocument();\n    } else {\n      try {\n        Document doc = docFetcher.doc(id, fnames);\n        sdoc = convertLuceneDocToSolrDoc(doc, rctx.getSearcher().getSchema()); // make sure to use the schema from the searcher and not the request (cross-core)\n\n        // decorate the document with non-stored docValues fields\n        if (dvFieldsToReturn != null) {\n          docFetcher.decorateDocValueFields(sdoc, id, dvFieldsToReturn);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n      }\n    }\n\n    if (transformer != null) {\n      boolean doScore = rctx.wantsScores();\n      try {\n        transformer.transform(sdoc, id, doScore ? docIterator.score() : 0);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182384b20c064aa16998ddebe9f36e649279c5a6","date":1503596494,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","sourceNew":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    if (onlyPseudoFields) {\n      // no need to get stored fields of the document, see SOLR-5968\n      sdoc = new SolrDocument();\n    } else {\n      try {\n        Document doc = docFetcher.doc(id, fnames);\n        sdoc = convertLuceneDocToSolrDoc(doc, rctx.getSearcher().getSchema()); // make sure to use the schema from the searcher and not the request (cross-core)\n\n        // decorate the document with non-stored docValues fields\n        if (dvFieldsToReturn != null) {\n          docFetcher.decorateDocValueFields(sdoc, id, dvFieldsToReturn);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n      }\n    }\n\n    if (transformer != null) {\n      boolean doScore = rctx.wantsScores();\n      try {\n        if (doScore) {\n          transformer.transform(sdoc, id, docIterator.score());\n        } else {\n          transformer.transform(sdoc, id);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","sourceOld":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    if (onlyPseudoFields) {\n      // no need to get stored fields of the document, see SOLR-5968\n      sdoc = new SolrDocument();\n    } else {\n      try {\n        Document doc = docFetcher.doc(id, fnames);\n        sdoc = convertLuceneDocToSolrDoc(doc, rctx.getSearcher().getSchema()); // make sure to use the schema from the searcher and not the request (cross-core)\n\n        // decorate the document with non-stored docValues fields\n        if (dvFieldsToReturn != null) {\n          docFetcher.decorateDocValueFields(sdoc, id, dvFieldsToReturn);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n      }\n    }\n\n    if (transformer != null) {\n      boolean doScore = rctx.wantsScores();\n      try {\n        transformer.transform(sdoc, id, doScore ? docIterator.score() : 0);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","sourceNew":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    if (onlyPseudoFields) {\n      // no need to get stored fields of the document, see SOLR-5968\n      sdoc = new SolrDocument();\n    } else {\n      try {\n        Document doc = docFetcher.doc(id, fnames);\n        sdoc = convertLuceneDocToSolrDoc(doc, rctx.getSearcher().getSchema()); // make sure to use the schema from the searcher and not the request (cross-core)\n\n        // decorate the document with non-stored docValues fields\n        if (dvFieldsToReturn != null) {\n          docFetcher.decorateDocValueFields(sdoc, id, dvFieldsToReturn);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n      }\n    }\n\n    if (transformer != null) {\n      boolean doScore = rctx.wantsScores();\n      try {\n        if (doScore) {\n          transformer.transform(sdoc, id, docIterator.score());\n        } else {\n          transformer.transform(sdoc, id);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","sourceOld":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    if (onlyPseudoFields) {\n      // no need to get stored fields of the document, see SOLR-5968\n      sdoc = new SolrDocument();\n    } else {\n      try {\n        Document doc = docFetcher.doc(id, fnames);\n        sdoc = convertLuceneDocToSolrDoc(doc, rctx.getSearcher().getSchema()); // make sure to use the schema from the searcher and not the request (cross-core)\n\n        // decorate the document with non-stored docValues fields\n        if (dvFieldsToReturn != null) {\n          docFetcher.decorateDocValueFields(sdoc, id, dvFieldsToReturn);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n      }\n    }\n\n    if (transformer != null) {\n      boolean doScore = rctx.wantsScores();\n      try {\n        transformer.transform(sdoc, id, doScore ? docIterator.score() : 0);\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf0aa6856a12eff25ab6d79dec11bea9e4031ca2","date":1505775734,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","sourceNew":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    try {\n      if (retrieveFieldsOptimizer.returnStoredFields()) {\n        Document doc = docFetcher.doc(id, retrieveFieldsOptimizer.getStoredFields());\n        // make sure to use the schema from the searcher and not the request (cross-core)\n        sdoc = convertLuceneDocToSolrDoc(doc, rctx.getSearcher().getSchema());\n      } else {\n        // no need to get stored fields of the document, see SOLR-5968\n        sdoc = new SolrDocument();\n      }\n\n      // decorate the document with non-stored docValues fields\n      if (retrieveFieldsOptimizer.returnDVFields()) {\n        docFetcher.decorateDocValueFields(sdoc, id, retrieveFieldsOptimizer.getDvFields());\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n    }\n\n    if (transformer != null) {\n      boolean doScore = rctx.wantsScores();\n      try {\n        if (doScore) {\n          transformer.transform(sdoc, id, docIterator.score());\n        } else {\n          transformer.transform(sdoc, id);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","sourceOld":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    if (onlyPseudoFields) {\n      // no need to get stored fields of the document, see SOLR-5968\n      sdoc = new SolrDocument();\n    } else {\n      try {\n        Document doc = docFetcher.doc(id, fnames);\n        sdoc = convertLuceneDocToSolrDoc(doc, rctx.getSearcher().getSchema()); // make sure to use the schema from the searcher and not the request (cross-core)\n\n        // decorate the document with non-stored docValues fields\n        if (dvFieldsToReturn != null) {\n          docFetcher.decorateDocValueFields(sdoc, id, dvFieldsToReturn);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n      }\n    }\n\n    if (transformer != null) {\n      boolean doScore = rctx.wantsScores();\n      try {\n        if (doScore) {\n          transformer.transform(sdoc, id, docIterator.score());\n        } else {\n          transformer.transform(sdoc, id);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","bugFix":null,"bugIntro":["b5d3613911d665344055ef7970e1783b3348b5c0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04af4a840c8f501ba34e09e382b8f8ace82aa51e","date":1505847466,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","sourceNew":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    try {\n      if (retrieveFieldsOptimizer.returnStoredFields()) {\n        Document doc = docFetcher.doc(id, retrieveFieldsOptimizer.getStoredFields());\n        // make sure to use the schema from the searcher and not the request (cross-core)\n        sdoc = convertLuceneDocToSolrDoc(doc, rctx.getSearcher().getSchema());\n      } else {\n        // no need to get stored fields of the document, see SOLR-5968\n        sdoc = new SolrDocument();\n      }\n\n      // decorate the document with non-stored docValues fields\n      if (retrieveFieldsOptimizer.returnDVFields()) {\n        docFetcher.decorateDocValueFields(sdoc, id, retrieveFieldsOptimizer.getDvFields());\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n    }\n\n    if (transformer != null) {\n      boolean doScore = rctx.wantsScores();\n      try {\n        if (doScore) {\n          transformer.transform(sdoc, id, docIterator.score());\n        } else {\n          transformer.transform(sdoc, id);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","sourceOld":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    if (onlyPseudoFields) {\n      // no need to get stored fields of the document, see SOLR-5968\n      sdoc = new SolrDocument();\n    } else {\n      try {\n        Document doc = docFetcher.doc(id, fnames);\n        sdoc = convertLuceneDocToSolrDoc(doc, rctx.getSearcher().getSchema()); // make sure to use the schema from the searcher and not the request (cross-core)\n\n        // decorate the document with non-stored docValues fields\n        if (dvFieldsToReturn != null) {\n          docFetcher.decorateDocValueFields(sdoc, id, dvFieldsToReturn);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n      }\n    }\n\n    if (transformer != null) {\n      boolean doScore = rctx.wantsScores();\n      try {\n        if (doScore) {\n          transformer.transform(sdoc, id, docIterator.score());\n        } else {\n          transformer.transform(sdoc, id);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5d3613911d665344055ef7970e1783b3348b5c0","date":1521487734,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","sourceNew":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    try {\n      if (retrieveFieldsOptimizer.returnStoredFields()) {\n        Document doc = docFetcher.doc(id, retrieveFieldsOptimizer.getStoredFields());\n        // make sure to use the schema from the searcher and not the request (cross-core)\n        sdoc = convertLuceneDocToSolrDoc(doc, rctx.getSearcher().getSchema(),\n                                         rctx.getReturnFields());\n      } else {\n        // no need to get stored fields of the document, see SOLR-5968\n        sdoc = new SolrDocument();\n      }\n\n      // decorate the document with non-stored docValues fields\n      if (retrieveFieldsOptimizer.returnDVFields()) {\n        docFetcher.decorateDocValueFields(sdoc, id, retrieveFieldsOptimizer.getDvFields());\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n    }\n\n    if (transformer != null) {\n      boolean doScore = rctx.wantsScores();\n      try {\n        if (doScore) {\n          transformer.transform(sdoc, id, docIterator.score());\n        } else {\n          transformer.transform(sdoc, id);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","sourceOld":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    try {\n      if (retrieveFieldsOptimizer.returnStoredFields()) {\n        Document doc = docFetcher.doc(id, retrieveFieldsOptimizer.getStoredFields());\n        // make sure to use the schema from the searcher and not the request (cross-core)\n        sdoc = convertLuceneDocToSolrDoc(doc, rctx.getSearcher().getSchema());\n      } else {\n        // no need to get stored fields of the document, see SOLR-5968\n        sdoc = new SolrDocument();\n      }\n\n      // decorate the document with non-stored docValues fields\n      if (retrieveFieldsOptimizer.returnDVFields()) {\n        docFetcher.decorateDocValueFields(sdoc, id, retrieveFieldsOptimizer.getDvFields());\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n    }\n\n    if (transformer != null) {\n      boolean doScore = rctx.wantsScores();\n      try {\n        if (doScore) {\n          transformer.transform(sdoc, id, docIterator.score());\n        } else {\n          transformer.transform(sdoc, id);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","bugFix":["bf0aa6856a12eff25ab6d79dec11bea9e4031ca2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ecd141e96e7a7a65822d7fada5ddc585b21149","date":1534786652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#next().mjava","sourceNew":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = docFetcher.solrDoc(id, solrReturnFields);\n\n    if (transformer != null) {\n      boolean doScore = rctx.wantsScores();\n      try {\n        if (doScore) {\n          transformer.transform(sdoc, id, docIterator.score());\n        } else {\n          transformer.transform(sdoc, id);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","sourceOld":"  public SolrDocument next() {\n    int id = docIterator.nextDoc();\n    idx++;\n    SolrDocument sdoc = null;\n\n    try {\n      if (retrieveFieldsOptimizer.returnStoredFields()) {\n        Document doc = docFetcher.doc(id, retrieveFieldsOptimizer.getStoredFields());\n        // make sure to use the schema from the searcher and not the request (cross-core)\n        sdoc = convertLuceneDocToSolrDoc(doc, rctx.getSearcher().getSchema(),\n                                         rctx.getReturnFields());\n      } else {\n        // no need to get stored fields of the document, see SOLR-5968\n        sdoc = new SolrDocument();\n      }\n\n      // decorate the document with non-stored docValues fields\n      if (retrieveFieldsOptimizer.returnDVFields()) {\n        docFetcher.decorateDocValueFields(sdoc, id, retrieveFieldsOptimizer.getDvFields());\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reading document with docId \" + id, e);\n    }\n\n    if (transformer != null) {\n      boolean doScore = rctx.wantsScores();\n      try {\n        if (doScore) {\n          transformer.transform(sdoc, id, docIterator.score());\n        } else {\n          transformer.transform(sdoc, id);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error applying transformer\", e);\n      }\n    }\n    return sdoc;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ecd141e96e7a7a65822d7fada5ddc585b21149":["b5d3613911d665344055ef7970e1783b3348b5c0"],"b5d3613911d665344055ef7970e1783b3348b5c0":["bf0aa6856a12eff25ab6d79dec11bea9e4031ca2"],"de548de3ce5405595899f548152d4b93ac9eb9cc":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"bf0aa6856a12eff25ab6d79dec11bea9e4031ca2":["182384b20c064aa16998ddebe9f36e649279c5a6"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"320eec6599df6f97f2461a5d1ad49cd93b324a14":["63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"bdac0dff04219451c7511d62225080a93a0181ea":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"04af4a840c8f501ba34e09e382b8f8ace82aa51e":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","bf0aa6856a12eff25ab6d79dec11bea9e4031ca2"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["de548de3ce5405595899f548152d4b93ac9eb9cc","182384b20c064aa16998ddebe9f36e649279c5a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"182384b20c064aa16998ddebe9f36e649279c5a6":["63a9344cff6a72bc4c1ef080c69e10ad0635b811","320eec6599df6f97f2461a5d1ad49cd93b324a14"],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["96ecd141e96e7a7a65822d7fada5ddc585b21149"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["bdac0dff04219451c7511d62225080a93a0181ea"]},"commit2Childs":{"96ecd141e96e7a7a65822d7fada5ddc585b21149":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b5d3613911d665344055ef7970e1783b3348b5c0":["96ecd141e96e7a7a65822d7fada5ddc585b21149"],"de548de3ce5405595899f548152d4b93ac9eb9cc":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"bf0aa6856a12eff25ab6d79dec11bea9e4031ca2":["b5d3613911d665344055ef7970e1783b3348b5c0","04af4a840c8f501ba34e09e382b8f8ace82aa51e"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["320eec6599df6f97f2461a5d1ad49cd93b324a14","182384b20c064aa16998ddebe9f36e649279c5a6"],"320eec6599df6f97f2461a5d1ad49cd93b324a14":["182384b20c064aa16998ddebe9f36e649279c5a6"],"bdac0dff04219451c7511d62225080a93a0181ea":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["bdac0dff04219451c7511d62225080a93a0181ea"],"04af4a840c8f501ba34e09e382b8f8ace82aa51e":[],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["04af4a840c8f501ba34e09e382b8f8ace82aa51e"],"182384b20c064aa16998ddebe9f36e649279c5a6":["bf0aa6856a12eff25ab6d79dec11bea9e4031ca2","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["de548de3ce5405595899f548152d4b93ac9eb9cc","63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["04af4a840c8f501ba34e09e382b8f8ace82aa51e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}