{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextCompoundFormat#write(Directory,SegmentInfo,IOContext).mjava","commits":[{"id":"75d243fa001c0783996918dbbe60b55cbaeeff46","date":1422502815,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextCompoundFormat#write(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextCompoundFormat#write(Directory,SegmentInfo,Collection[String],IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext context) throws IOException {\n    String dataFile = IndexFileNames.segmentFileName(si.name, \"\", DATA_EXTENSION);\n    \n    int numFiles = si.files().size();\n    String names[] = si.files().toArray(new String[numFiles]);\n    Arrays.sort(names);\n    long startOffsets[] = new long[numFiles];\n    long endOffsets[] = new long[numFiles];\n    \n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    try (IndexOutput out = dir.createOutput(dataFile, context)) { \n      for (int i = 0; i < names.length; i++) {\n        // write header for file\n        SimpleTextUtil.write(out, HEADER);\n        SimpleTextUtil.write(out, names[i], scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        // write bytes for file\n        startOffsets[i] = out.getFilePointer();\n        try (IndexInput in = dir.openInput(names[i], IOContext.READONCE)) {\n          out.copyBytes(in, in.length());\n        }\n        endOffsets[i] = out.getFilePointer();\n      }\n      \n      long tocPos = out.getFilePointer();\n      \n      // write CFS table\n      SimpleTextUtil.write(out, TABLE);\n      SimpleTextUtil.write(out, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(out);\n     \n      for (int i = 0; i < names.length; i++) {\n        SimpleTextUtil.write(out, TABLENAME);\n        SimpleTextUtil.write(out, names[i], scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, TABLESTART);\n        SimpleTextUtil.write(out, Long.toString(startOffsets[i]), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, TABLEEND);\n        SimpleTextUtil.write(out, Long.toString(endOffsets[i]), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      \n      DecimalFormat df = new DecimalFormat(OFFSETPATTERN, DecimalFormatSymbols.getInstance(Locale.ROOT));\n      SimpleTextUtil.write(out, TABLEPOS);\n      SimpleTextUtil.write(out, df.format(tocPos), scratch);\n      SimpleTextUtil.writeNewline(out);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, Collection<String> files, IOContext context) throws IOException {\n    String dataFile = IndexFileNames.segmentFileName(si.name, \"\", DATA_EXTENSION);\n    \n    int numFiles = files.size();\n    String names[] = files.toArray(new String[numFiles]);\n    Arrays.sort(names);\n    long startOffsets[] = new long[numFiles];\n    long endOffsets[] = new long[numFiles];\n    \n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    try (IndexOutput out = dir.createOutput(dataFile, context)) { \n      for (int i = 0; i < names.length; i++) {\n        // write header for file\n        SimpleTextUtil.write(out, HEADER);\n        SimpleTextUtil.write(out, names[i], scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        // write bytes for file\n        startOffsets[i] = out.getFilePointer();\n        try (IndexInput in = dir.openInput(names[i], IOContext.READONCE)) {\n          out.copyBytes(in, in.length());\n        }\n        endOffsets[i] = out.getFilePointer();\n      }\n      \n      long tocPos = out.getFilePointer();\n      \n      // write CFS table\n      SimpleTextUtil.write(out, TABLE);\n      SimpleTextUtil.write(out, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(out);\n     \n      for (int i = 0; i < names.length; i++) {\n        SimpleTextUtil.write(out, TABLENAME);\n        SimpleTextUtil.write(out, names[i], scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, TABLESTART);\n        SimpleTextUtil.write(out, Long.toString(startOffsets[i]), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, TABLEEND);\n        SimpleTextUtil.write(out, Long.toString(endOffsets[i]), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      \n      DecimalFormat df = new DecimalFormat(OFFSETPATTERN, DecimalFormatSymbols.getInstance(Locale.ROOT));\n      SimpleTextUtil.write(out, TABLEPOS);\n      SimpleTextUtil.write(out, df.format(tocPos), scratch);\n      SimpleTextUtil.writeNewline(out);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"75d243fa001c0783996918dbbe60b55cbaeeff46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75d243fa001c0783996918dbbe60b55cbaeeff46"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["75d243fa001c0783996918dbbe60b55cbaeeff46"],"75d243fa001c0783996918dbbe60b55cbaeeff46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}