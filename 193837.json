{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.MyMergeScheduler#merge(IndexWriter).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.MyMergeScheduler#merge(IndexWriter).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.MyMergeScheduler#merge(IndexWriter).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null)\n          break;\n        for(int i=0;i<merge.segments.size();i++)\n          assert merge.segments.info(i).docCount < 20;\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null)\n          break;\n        for(int i=0;i<merge.segments.size();i++)\n          assert merge.segments.info(i).docCount < 20;\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d98a6b014b664e716eb3af578734f1ba04405bc","date":1305050526,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.MyMergeScheduler#merge(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.MyMergeScheduler#merge(IndexWriter).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).docCount < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null)\n          break;\n        for(int i=0;i<merge.segments.size();i++)\n          assert merge.segments.info(i).docCount < 20;\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.MyMergeScheduler#merge(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.MyMergeScheduler#merge(IndexWriter).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).docCount < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null)\n          break;\n        for(int i=0;i<merge.segments.size();i++)\n          assert merge.segments.info(i).docCount < 20;\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.MyMergeScheduler#merge(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.MyMergeScheduler#merge(IndexWriter).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).docCount < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null)\n          break;\n        for(int i=0;i<merge.segments.size();i++)\n          assert merge.segments.info(i).docCount < 20;\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.MyMergeScheduler#merge(IndexWriter).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).docCount < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).docCount < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.MyMergeScheduler#merge(IndexWriter).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).docCount < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).docCount < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMerging.MyMergeScheduler#merge(IndexWriter).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.MyMergeScheduler#merge(IndexWriter).mjava","sourceNew":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).docCount < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void merge(IndexWriter writer)\n      throws CorruptIndexException, IOException {\n\n      while(true) {\n        MergePolicy.OneMerge merge = writer.getNextMerge();\n        if (merge == null) {\n          break;\n        }\n        for(int i=0;i<merge.segments.size();i++) {\n          assert merge.segments.get(i).docCount < 20;\n        }\n        writer.merge(merge);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["5d98a6b014b664e716eb3af578734f1ba04405bc"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a3776dccca01c11e7046323cfad46a3b4a471233":["9454a6510e2db155fb01faa5c049b06ece95fab9","5d98a6b014b664e716eb3af578734f1ba04405bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["9454a6510e2db155fb01faa5c049b06ece95fab9","5d98a6b014b664e716eb3af578734f1ba04405bc"],"5d98a6b014b664e716eb3af578734f1ba04405bc":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"5d98a6b014b664e716eb3af578734f1ba04405bc":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","5d98a6b014b664e716eb3af578734f1ba04405bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}