{"path":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","sourceNew":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          BasicOperations.complement(\n              Automaton.union(\n                  Arrays.asList(BasicAutomata.makeString(\"foo\"), BasicAutomata.makeString(\"bar\")))));\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, keepWords, true);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          BasicOperations.complement(\n              Automaton.union(\n                  Arrays.asList(BasicAutomata.makeString(\"foo\"), BasicAutomata.makeString(\"bar\")))));\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, keepWords, true);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","sourceNew":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          BasicOperations.complement(\n              Automaton.union(\n                  Arrays.asList(BasicAutomata.makeString(\"foo\"), BasicAutomata.makeString(\"bar\")))));\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, keepWords, true);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          BasicOperations.complement(\n              Automaton.union(\n                  Arrays.asList(BasicAutomata.makeString(\"foo\"), BasicAutomata.makeString(\"bar\")))));\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true, keepWords, true);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","sourceNew":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          BasicOperations.complement(\n              Automaton.union(\n                  Arrays.asList(BasicAutomata.makeString(\"foo\"), BasicAutomata.makeString(\"bar\")))));\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, keepWords);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          BasicOperations.complement(\n              Automaton.union(\n                  Arrays.asList(BasicAutomata.makeString(\"foo\"), BasicAutomata.makeString(\"bar\")))));\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, keepWords, true);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","sourceNew":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          BasicOperations.complementLight(\n              BasicOperations.unionLight(\n                  Arrays.asList(BasicAutomata.makeStringLight(\"foo\"), BasicAutomata.makeStringLight(\"bar\")))));\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, keepWords);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          BasicOperations.complement(\n              Automaton.union(\n                  Arrays.asList(BasicAutomata.makeString(\"foo\"), BasicAutomata.makeString(\"bar\")))));\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, keepWords);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","sourceNew":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          Operations.complement(\n              Operations.union(\n                  Arrays.asList(Automata.makeString(\"foo\"), Automata.makeString(\"bar\")))));\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, keepWords);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          BasicOperations.complementLight(\n              BasicOperations.unionLight(\n                  Arrays.asList(BasicAutomata.makeStringLight(\"foo\"), BasicAutomata.makeStringLight(\"bar\")))));\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, keepWords);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","sourceNew":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          Operations.complement(\n              Operations.union(\n                  Arrays.asList(Automata.makeString(\"foo\"), Automata.makeString(\"bar\")))));\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, keepWords);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          BasicOperations.complement(\n              Automaton.union(\n                  Arrays.asList(BasicAutomata.makeString(\"foo\"), BasicAutomata.makeString(\"bar\")))));\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, keepWords);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","sourceNew":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          Operations.complement(\n              Operations.union(\n                  Arrays.asList(Automata.makeString(\"foo\"), Automata.makeString(\"bar\"))),\n              DEFAULT_MAX_DETERMINIZED_STATES));\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, keepWords);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          Operations.complement(\n              Operations.union(\n                  Arrays.asList(Automata.makeString(\"foo\"), Automata.makeString(\"bar\")))));\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, keepWords);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testKeep().mjava","sourceNew":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          Operations.complement(\n              Operations.union(\n                  Arrays.asList(Automata.makeString(\"foo\"), Automata.makeString(\"bar\"))),\n              DEFAULT_MAX_DETERMINIZED_STATES));\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, keepWords);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","sourceOld":"  /** Test a configuration that behaves a lot like KeepWordFilter */\n  public void testKeep() throws Exception {\n    CharacterRunAutomaton keepWords = \n      new CharacterRunAutomaton(\n          Operations.complement(\n              Operations.union(\n                  Arrays.asList(Automata.makeString(\"foo\"), Automata.makeString(\"bar\"))),\n              DEFAULT_MAX_DETERMINIZED_STATES));\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, keepWords);\n    assertAnalyzesTo(a, \"quick foo brown bar bar fox foo\",\n        new String[] { \"foo\", \"bar\", \"bar\", \"foo\" },\n        new int[] { 2, 2, 1, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["eafa8c5eabc3dacd34680054e6a33bda024080ac","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}