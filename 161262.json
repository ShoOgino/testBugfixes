{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSort().mjava","commits":[{"id":"61fdf4102fdaf9d9a4be5a7691913c78095e3931","date":1359238816,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSort().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Verifies the symbolic sort operations\n   */\n  public void testSort() throws IOException {\n\n    SolrQuery q = new SolrQuery(\"dog\");\n\n    // Simple adds\n    q.addSort(\"price\", SolrQuery.ORDER.asc);\n    q.addSort(\"date\", SolrQuery.ORDER.desc);\n    q.addSort(\"qty\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(3, q.getSorts().size());\n    Assert.assertEquals(\"price asc,date desc,qty desc\", q.get(CommonParams.SORT));\n\n    // Remove one (middle)\n    q.removeSort(\"date\");\n    Assert.assertEquals(2, q.getSorts().size());\n    Assert.assertEquals(\"price asc,qty desc\", q.get(CommonParams.SORT));\n\n    // Remove remaining (last, first)\n    q.removeSort(\"price\");\n    q.removeSort(\"qty\");\n    Assert.assertTrue(q.getSorts().isEmpty());\n    Assert.assertNull(q.get(CommonParams.SORT));\n\n    // Clear sort\n    q.addSort(\"price\", SolrQuery.ORDER.asc);\n    q.clearSorts();\n    Assert.assertTrue(q.getSorts().isEmpty());\n    Assert.assertNull(q.get(CommonParams.SORT));\n\n    // Add vs update\n    q.clearSorts();\n    q.addSort(\"1\", SolrQuery.ORDER.asc);\n    q.addSort(\"2\", SolrQuery.ORDER.asc);\n    q.addSort(\"3\", SolrQuery.ORDER.asc);\n    q.addOrUpdateSort(\"2\", SolrQuery.ORDER.desc);\n    q.addOrUpdateSort(\"4\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(\"1 asc,2 desc,3 asc,4 desc\", q.get(CommonParams.SORT));\n\n    // Using SortClause\n    q.clearSorts();\n    q.addSort(new SortClause(\"1\", SolrQuery.ORDER.asc));\n    q.addSort(new SortClause(\"2\", SolrQuery.ORDER.asc));\n    q.addSort(new SortClause(\"3\", SolrQuery.ORDER.asc));\n    q.addOrUpdateSort(SortClause.desc(\"2\"));\n    q.addOrUpdateSort(SortClause.asc(\"4\"));\n    Assert.assertEquals(\"1 asc,2 desc,3 asc,4 asc\", q.get(CommonParams.SORT));\n    q.setSort(SortClause.asc(\"A\"));\n    q.addSort(SortClause.asc(\"B\"));\n    q.addSort(SortClause.asc(\"C\"));\n    q.addSort(SortClause.asc(\"D\"));\n    Assert.assertEquals(\"A asc,B asc,C asc,D asc\", q.get(CommonParams.SORT));\n\n    // removeSort should ignore the ORDER\n    q.setSort(SortClause.asc(\"A\"));\n    q.addSort(SortClause.asc(\"B\"));\n    q.addSort(SortClause.asc(\"C\"));\n    q.addSort(SortClause.asc(\"D\"));\n    q.removeSort(\"A\");\n    q.removeSort(SortClause.asc(\"C\"));\n    q.removeSort(SortClause.desc(\"B\"));\n    Assert.assertEquals(\"D asc\", q.get(CommonParams.SORT));\n\n    // Verify that a query containing a SortClause is serializable\n    q.clearSorts();\n    q.addSort(\"1\", SolrQuery.ORDER.asc);\n    ObjectOutputStream out = new ObjectOutputStream(new ByteArrayOutputStream());\n    out.writeObject(q);\n    out.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSort().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Verifies the symbolic sort operations\n   */\n  public void testSort() throws IOException {\n\n    SolrQuery q = new SolrQuery(\"dog\");\n\n    // Simple adds\n    q.addSort(\"price\", SolrQuery.ORDER.asc);\n    q.addSort(\"date\", SolrQuery.ORDER.desc);\n    q.addSort(\"qty\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(3, q.getSorts().size());\n    Assert.assertEquals(\"price asc,date desc,qty desc\", q.get(CommonParams.SORT));\n\n    // Remove one (middle)\n    q.removeSort(\"date\");\n    Assert.assertEquals(2, q.getSorts().size());\n    Assert.assertEquals(\"price asc,qty desc\", q.get(CommonParams.SORT));\n\n    // Remove remaining (last, first)\n    q.removeSort(\"price\");\n    q.removeSort(\"qty\");\n    Assert.assertTrue(q.getSorts().isEmpty());\n    Assert.assertNull(q.get(CommonParams.SORT));\n\n    // Clear sort\n    q.addSort(\"price\", SolrQuery.ORDER.asc);\n    q.clearSorts();\n    Assert.assertTrue(q.getSorts().isEmpty());\n    Assert.assertNull(q.get(CommonParams.SORT));\n\n    // Add vs update\n    q.clearSorts();\n    q.addSort(\"1\", SolrQuery.ORDER.asc);\n    q.addSort(\"2\", SolrQuery.ORDER.asc);\n    q.addSort(\"3\", SolrQuery.ORDER.asc);\n    q.addOrUpdateSort(\"2\", SolrQuery.ORDER.desc);\n    q.addOrUpdateSort(\"4\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(\"1 asc,2 desc,3 asc,4 desc\", q.get(CommonParams.SORT));\n\n    // Using SortClause\n    q.clearSorts();\n    q.addSort(new SortClause(\"1\", SolrQuery.ORDER.asc));\n    q.addSort(new SortClause(\"2\", SolrQuery.ORDER.asc));\n    q.addSort(new SortClause(\"3\", SolrQuery.ORDER.asc));\n    q.addOrUpdateSort(SortClause.desc(\"2\"));\n    q.addOrUpdateSort(SortClause.asc(\"4\"));\n    Assert.assertEquals(\"1 asc,2 desc,3 asc,4 asc\", q.get(CommonParams.SORT));\n    q.setSort(SortClause.asc(\"A\"));\n    q.addSort(SortClause.asc(\"B\"));\n    q.addSort(SortClause.asc(\"C\"));\n    q.addSort(SortClause.asc(\"D\"));\n    Assert.assertEquals(\"A asc,B asc,C asc,D asc\", q.get(CommonParams.SORT));\n\n    // removeSort should ignore the ORDER\n    q.setSort(SortClause.asc(\"A\"));\n    q.addSort(SortClause.asc(\"B\"));\n    q.addSort(SortClause.asc(\"C\"));\n    q.addSort(SortClause.asc(\"D\"));\n    q.removeSort(\"A\");\n    q.removeSort(SortClause.asc(\"C\"));\n    q.removeSort(SortClause.desc(\"B\"));\n    Assert.assertEquals(\"D asc\", q.get(CommonParams.SORT));\n\n    // Verify that a query containing a SortClause is serializable\n    q.clearSorts();\n    q.addSort(\"1\", SolrQuery.ORDER.asc);\n    ObjectOutputStream out = new ObjectOutputStream(new ByteArrayOutputStream());\n    out.writeObject(q);\n    out.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cb5c25025721b90f1f80bf3df99ae2b9a945e6c","date":1576521071,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSort().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSort().mjava","sourceNew":"  /*\n   * Verifies the symbolic sort operations\n   */\n  @SuppressForbidden(reason = \"XXX: security hole\")\n  public void testSort() throws IOException {\n\n    SolrQuery q = new SolrQuery(\"dog\");\n\n    // Simple adds\n    q.addSort(\"price\", SolrQuery.ORDER.asc);\n    q.addSort(\"date\", SolrQuery.ORDER.desc);\n    q.addSort(\"qty\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(3, q.getSorts().size());\n    Assert.assertEquals(\"price asc,date desc,qty desc\", q.get(CommonParams.SORT));\n\n    // Remove one (middle)\n    q.removeSort(\"date\");\n    Assert.assertEquals(2, q.getSorts().size());\n    Assert.assertEquals(\"price asc,qty desc\", q.get(CommonParams.SORT));\n\n    // Remove remaining (last, first)\n    q.removeSort(\"price\");\n    q.removeSort(\"qty\");\n    Assert.assertTrue(q.getSorts().isEmpty());\n    Assert.assertNull(q.get(CommonParams.SORT));\n\n    // Clear sort\n    q.addSort(\"price\", SolrQuery.ORDER.asc);\n    q.clearSorts();\n    Assert.assertTrue(q.getSorts().isEmpty());\n    Assert.assertNull(q.get(CommonParams.SORT));\n\n    // Add vs update\n    q.clearSorts();\n    q.addSort(\"1\", SolrQuery.ORDER.asc);\n    q.addSort(\"2\", SolrQuery.ORDER.asc);\n    q.addSort(\"3\", SolrQuery.ORDER.asc);\n    q.addOrUpdateSort(\"2\", SolrQuery.ORDER.desc);\n    q.addOrUpdateSort(\"4\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(\"1 asc,2 desc,3 asc,4 desc\", q.get(CommonParams.SORT));\n\n    // Using SortClause\n    q.clearSorts();\n    q.addSort(new SortClause(\"1\", SolrQuery.ORDER.asc));\n    q.addSort(new SortClause(\"2\", SolrQuery.ORDER.asc));\n    q.addSort(new SortClause(\"3\", SolrQuery.ORDER.asc));\n    q.addOrUpdateSort(SortClause.desc(\"2\"));\n    q.addOrUpdateSort(SortClause.asc(\"4\"));\n    Assert.assertEquals(\"1 asc,2 desc,3 asc,4 asc\", q.get(CommonParams.SORT));\n    q.setSort(SortClause.asc(\"A\"));\n    q.addSort(SortClause.asc(\"B\"));\n    q.addSort(SortClause.asc(\"C\"));\n    q.addSort(SortClause.asc(\"D\"));\n    Assert.assertEquals(\"A asc,B asc,C asc,D asc\", q.get(CommonParams.SORT));\n\n    // removeSort should ignore the ORDER\n    q.setSort(SortClause.asc(\"A\"));\n    q.addSort(SortClause.asc(\"B\"));\n    q.addSort(SortClause.asc(\"C\"));\n    q.addSort(SortClause.asc(\"D\"));\n    q.removeSort(\"A\");\n    q.removeSort(SortClause.asc(\"C\"));\n    q.removeSort(SortClause.desc(\"B\"));\n    Assert.assertEquals(\"D asc\", q.get(CommonParams.SORT));\n\n    // Verify that a query containing a SortClause is serializable\n    q.clearSorts();\n    q.addSort(\"1\", SolrQuery.ORDER.asc);\n    ObjectOutputStream out = new ObjectOutputStream(new ByteArrayOutputStream());\n    out.writeObject(q);\n    out.close();\n  }\n\n","sourceOld":"  /*\n   * Verifies the symbolic sort operations\n   */\n  public void testSort() throws IOException {\n\n    SolrQuery q = new SolrQuery(\"dog\");\n\n    // Simple adds\n    q.addSort(\"price\", SolrQuery.ORDER.asc);\n    q.addSort(\"date\", SolrQuery.ORDER.desc);\n    q.addSort(\"qty\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(3, q.getSorts().size());\n    Assert.assertEquals(\"price asc,date desc,qty desc\", q.get(CommonParams.SORT));\n\n    // Remove one (middle)\n    q.removeSort(\"date\");\n    Assert.assertEquals(2, q.getSorts().size());\n    Assert.assertEquals(\"price asc,qty desc\", q.get(CommonParams.SORT));\n\n    // Remove remaining (last, first)\n    q.removeSort(\"price\");\n    q.removeSort(\"qty\");\n    Assert.assertTrue(q.getSorts().isEmpty());\n    Assert.assertNull(q.get(CommonParams.SORT));\n\n    // Clear sort\n    q.addSort(\"price\", SolrQuery.ORDER.asc);\n    q.clearSorts();\n    Assert.assertTrue(q.getSorts().isEmpty());\n    Assert.assertNull(q.get(CommonParams.SORT));\n\n    // Add vs update\n    q.clearSorts();\n    q.addSort(\"1\", SolrQuery.ORDER.asc);\n    q.addSort(\"2\", SolrQuery.ORDER.asc);\n    q.addSort(\"3\", SolrQuery.ORDER.asc);\n    q.addOrUpdateSort(\"2\", SolrQuery.ORDER.desc);\n    q.addOrUpdateSort(\"4\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(\"1 asc,2 desc,3 asc,4 desc\", q.get(CommonParams.SORT));\n\n    // Using SortClause\n    q.clearSorts();\n    q.addSort(new SortClause(\"1\", SolrQuery.ORDER.asc));\n    q.addSort(new SortClause(\"2\", SolrQuery.ORDER.asc));\n    q.addSort(new SortClause(\"3\", SolrQuery.ORDER.asc));\n    q.addOrUpdateSort(SortClause.desc(\"2\"));\n    q.addOrUpdateSort(SortClause.asc(\"4\"));\n    Assert.assertEquals(\"1 asc,2 desc,3 asc,4 asc\", q.get(CommonParams.SORT));\n    q.setSort(SortClause.asc(\"A\"));\n    q.addSort(SortClause.asc(\"B\"));\n    q.addSort(SortClause.asc(\"C\"));\n    q.addSort(SortClause.asc(\"D\"));\n    Assert.assertEquals(\"A asc,B asc,C asc,D asc\", q.get(CommonParams.SORT));\n\n    // removeSort should ignore the ORDER\n    q.setSort(SortClause.asc(\"A\"));\n    q.addSort(SortClause.asc(\"B\"));\n    q.addSort(SortClause.asc(\"C\"));\n    q.addSort(SortClause.asc(\"D\"));\n    q.removeSort(\"A\");\n    q.removeSort(SortClause.asc(\"C\"));\n    q.removeSort(SortClause.desc(\"B\"));\n    Assert.assertEquals(\"D asc\", q.get(CommonParams.SORT));\n\n    // Verify that a query containing a SortClause is serializable\n    q.clearSorts();\n    q.addSort(\"1\", SolrQuery.ORDER.asc);\n    ObjectOutputStream out = new ObjectOutputStream(new ByteArrayOutputStream());\n    out.writeObject(q);\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b945b8f5bba0303382bc69d60c0c287714f23328","date":1576586294,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSort().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrQueryTest#testSort().mjava","sourceNew":"  /*\n   * Verifies the symbolic sort operations\n   */\n  @SuppressForbidden(reason = \"XXX: security hole\")\n  public void testSort() throws IOException {\n\n    SolrQuery q = new SolrQuery(\"dog\");\n\n    // Simple adds\n    q.addSort(\"price\", SolrQuery.ORDER.asc);\n    q.addSort(\"date\", SolrQuery.ORDER.desc);\n    q.addSort(\"qty\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(3, q.getSorts().size());\n    Assert.assertEquals(\"price asc,date desc,qty desc\", q.get(CommonParams.SORT));\n\n    // Remove one (middle)\n    q.removeSort(\"date\");\n    Assert.assertEquals(2, q.getSorts().size());\n    Assert.assertEquals(\"price asc,qty desc\", q.get(CommonParams.SORT));\n\n    // Remove remaining (last, first)\n    q.removeSort(\"price\");\n    q.removeSort(\"qty\");\n    Assert.assertTrue(q.getSorts().isEmpty());\n    Assert.assertNull(q.get(CommonParams.SORT));\n\n    // Clear sort\n    q.addSort(\"price\", SolrQuery.ORDER.asc);\n    q.clearSorts();\n    Assert.assertTrue(q.getSorts().isEmpty());\n    Assert.assertNull(q.get(CommonParams.SORT));\n\n    // Add vs update\n    q.clearSorts();\n    q.addSort(\"1\", SolrQuery.ORDER.asc);\n    q.addSort(\"2\", SolrQuery.ORDER.asc);\n    q.addSort(\"3\", SolrQuery.ORDER.asc);\n    q.addOrUpdateSort(\"2\", SolrQuery.ORDER.desc);\n    q.addOrUpdateSort(\"4\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(\"1 asc,2 desc,3 asc,4 desc\", q.get(CommonParams.SORT));\n\n    // Using SortClause\n    q.clearSorts();\n    q.addSort(new SortClause(\"1\", SolrQuery.ORDER.asc));\n    q.addSort(new SortClause(\"2\", SolrQuery.ORDER.asc));\n    q.addSort(new SortClause(\"3\", SolrQuery.ORDER.asc));\n    q.addOrUpdateSort(SortClause.desc(\"2\"));\n    q.addOrUpdateSort(SortClause.asc(\"4\"));\n    Assert.assertEquals(\"1 asc,2 desc,3 asc,4 asc\", q.get(CommonParams.SORT));\n    q.setSort(SortClause.asc(\"A\"));\n    q.addSort(SortClause.asc(\"B\"));\n    q.addSort(SortClause.asc(\"C\"));\n    q.addSort(SortClause.asc(\"D\"));\n    Assert.assertEquals(\"A asc,B asc,C asc,D asc\", q.get(CommonParams.SORT));\n\n    // removeSort should ignore the ORDER\n    q.setSort(SortClause.asc(\"A\"));\n    q.addSort(SortClause.asc(\"B\"));\n    q.addSort(SortClause.asc(\"C\"));\n    q.addSort(SortClause.asc(\"D\"));\n    q.removeSort(\"A\");\n    q.removeSort(SortClause.asc(\"C\"));\n    q.removeSort(SortClause.desc(\"B\"));\n    Assert.assertEquals(\"D asc\", q.get(CommonParams.SORT));\n\n    // Verify that a query containing a SortClause is serializable\n    q.clearSorts();\n    q.addSort(\"1\", SolrQuery.ORDER.asc);\n    ObjectOutputStream out = new ObjectOutputStream(new ByteArrayOutputStream());\n    out.writeObject(q);\n    out.close();\n  }\n\n","sourceOld":"  /*\n   * Verifies the symbolic sort operations\n   */\n  public void testSort() throws IOException {\n\n    SolrQuery q = new SolrQuery(\"dog\");\n\n    // Simple adds\n    q.addSort(\"price\", SolrQuery.ORDER.asc);\n    q.addSort(\"date\", SolrQuery.ORDER.desc);\n    q.addSort(\"qty\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(3, q.getSorts().size());\n    Assert.assertEquals(\"price asc,date desc,qty desc\", q.get(CommonParams.SORT));\n\n    // Remove one (middle)\n    q.removeSort(\"date\");\n    Assert.assertEquals(2, q.getSorts().size());\n    Assert.assertEquals(\"price asc,qty desc\", q.get(CommonParams.SORT));\n\n    // Remove remaining (last, first)\n    q.removeSort(\"price\");\n    q.removeSort(\"qty\");\n    Assert.assertTrue(q.getSorts().isEmpty());\n    Assert.assertNull(q.get(CommonParams.SORT));\n\n    // Clear sort\n    q.addSort(\"price\", SolrQuery.ORDER.asc);\n    q.clearSorts();\n    Assert.assertTrue(q.getSorts().isEmpty());\n    Assert.assertNull(q.get(CommonParams.SORT));\n\n    // Add vs update\n    q.clearSorts();\n    q.addSort(\"1\", SolrQuery.ORDER.asc);\n    q.addSort(\"2\", SolrQuery.ORDER.asc);\n    q.addSort(\"3\", SolrQuery.ORDER.asc);\n    q.addOrUpdateSort(\"2\", SolrQuery.ORDER.desc);\n    q.addOrUpdateSort(\"4\", SolrQuery.ORDER.desc);\n    Assert.assertEquals(\"1 asc,2 desc,3 asc,4 desc\", q.get(CommonParams.SORT));\n\n    // Using SortClause\n    q.clearSorts();\n    q.addSort(new SortClause(\"1\", SolrQuery.ORDER.asc));\n    q.addSort(new SortClause(\"2\", SolrQuery.ORDER.asc));\n    q.addSort(new SortClause(\"3\", SolrQuery.ORDER.asc));\n    q.addOrUpdateSort(SortClause.desc(\"2\"));\n    q.addOrUpdateSort(SortClause.asc(\"4\"));\n    Assert.assertEquals(\"1 asc,2 desc,3 asc,4 asc\", q.get(CommonParams.SORT));\n    q.setSort(SortClause.asc(\"A\"));\n    q.addSort(SortClause.asc(\"B\"));\n    q.addSort(SortClause.asc(\"C\"));\n    q.addSort(SortClause.asc(\"D\"));\n    Assert.assertEquals(\"A asc,B asc,C asc,D asc\", q.get(CommonParams.SORT));\n\n    // removeSort should ignore the ORDER\n    q.setSort(SortClause.asc(\"A\"));\n    q.addSort(SortClause.asc(\"B\"));\n    q.addSort(SortClause.asc(\"C\"));\n    q.addSort(SortClause.asc(\"D\"));\n    q.removeSort(\"A\");\n    q.removeSort(SortClause.asc(\"C\"));\n    q.removeSort(SortClause.desc(\"B\"));\n    Assert.assertEquals(\"D asc\", q.get(CommonParams.SORT));\n\n    // Verify that a query containing a SortClause is serializable\n    q.clearSorts();\n    q.addSort(\"1\", SolrQuery.ORDER.asc);\n    ObjectOutputStream out = new ObjectOutputStream(new ByteArrayOutputStream());\n    out.writeObject(q);\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61fdf4102fdaf9d9a4be5a7691913c78095e3931"],"61fdf4102fdaf9d9a4be5a7691913c78095e3931":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cb5c25025721b90f1f80bf3df99ae2b9a945e6c":["61fdf4102fdaf9d9a4be5a7691913c78095e3931"],"b945b8f5bba0303382bc69d60c0c287714f23328":["61fdf4102fdaf9d9a4be5a7691913c78095e3931","4cb5c25025721b90f1f80bf3df99ae2b9a945e6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cb5c25025721b90f1f80bf3df99ae2b9a945e6c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd45d4a2ee01a1932d33eec42f5272c2402da679","61fdf4102fdaf9d9a4be5a7691913c78095e3931"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"61fdf4102fdaf9d9a4be5a7691913c78095e3931":["dd45d4a2ee01a1932d33eec42f5272c2402da679","4cb5c25025721b90f1f80bf3df99ae2b9a945e6c","b945b8f5bba0303382bc69d60c0c287714f23328"],"4cb5c25025721b90f1f80bf3df99ae2b9a945e6c":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b945b8f5bba0303382bc69d60c0c287714f23328":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}