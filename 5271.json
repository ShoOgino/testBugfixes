{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseConversions(LineNumberReader,int).mjava","commits":[{"id":"5ae9942cbee38a49d234c2f022e3a265133d1914","date":1393952688,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseConversions(LineNumberReader,int).mjava","pathOld":"/dev/null","sourceNew":"  private FST<CharsRef> parseConversions(LineNumberReader reader, int num) throws IOException, ParseException {\n    Map<String,String> mappings = new TreeMap<>();\n    \n    for (int i = 0; i < num; i++) {\n      String line = reader.readLine();\n      String parts[] = line.split(\"\\\\s+\");\n      if (parts.length != 3) {\n        throw new ParseException(\"invalid syntax: \" + line, reader.getLineNumber());\n      }\n      if (mappings.put(parts[1], parts[2]) != null) {\n        throw new IllegalStateException(\"duplicate mapping specified for: \" + parts[1]);\n      }\n    }\n    \n    Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n    Builder<CharsRef> builder = new Builder<>(FST.INPUT_TYPE.BYTE2, outputs);\n    IntsRef scratchInts = new IntsRef();\n    for (Map.Entry<String,String> entry : mappings.entrySet()) {\n      Util.toUTF16(entry.getKey(), scratchInts);\n      builder.add(scratchInts, new CharsRef(entry.getValue()));\n    }\n    \n    return builder.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseConversions(LineNumberReader,int).mjava","pathOld":"/dev/null","sourceNew":"  private FST<CharsRef> parseConversions(LineNumberReader reader, int num) throws IOException, ParseException {\n    Map<String,String> mappings = new TreeMap<>();\n    \n    for (int i = 0; i < num; i++) {\n      String line = reader.readLine();\n      String parts[] = line.split(\"\\\\s+\");\n      if (parts.length != 3) {\n        throw new ParseException(\"invalid syntax: \" + line, reader.getLineNumber());\n      }\n      if (mappings.put(parts[1], parts[2]) != null) {\n        throw new IllegalStateException(\"duplicate mapping specified for: \" + parts[1]);\n      }\n    }\n    \n    Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n    Builder<CharsRef> builder = new Builder<>(FST.INPUT_TYPE.BYTE2, outputs);\n    IntsRef scratchInts = new IntsRef();\n    for (Map.Entry<String,String> entry : mappings.entrySet()) {\n      Util.toUTF16(entry.getKey(), scratchInts);\n      builder.add(scratchInts, new CharsRef(entry.getValue()));\n    }\n    \n    return builder.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseConversions(LineNumberReader,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseConversions(LineNumberReader,int).mjava","sourceNew":"  private FST<CharsRef> parseConversions(LineNumberReader reader, int num) throws IOException, ParseException {\n    Map<String,String> mappings = new TreeMap<>();\n    \n    for (int i = 0; i < num; i++) {\n      String line = reader.readLine();\n      String parts[] = line.split(\"\\\\s+\");\n      if (parts.length != 3) {\n        throw new ParseException(\"invalid syntax: \" + line, reader.getLineNumber());\n      }\n      if (mappings.put(parts[1], parts[2]) != null) {\n        throw new IllegalStateException(\"duplicate mapping specified for: \" + parts[1]);\n      }\n    }\n    \n    Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n    Builder<CharsRef> builder = new Builder<>(FST.INPUT_TYPE.BYTE2, outputs);\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    for (Map.Entry<String,String> entry : mappings.entrySet()) {\n      Util.toUTF16(entry.getKey(), scratchInts);\n      builder.add(scratchInts.get(), new CharsRef(entry.getValue()));\n    }\n    \n    return builder.finish();\n  }\n\n","sourceOld":"  private FST<CharsRef> parseConversions(LineNumberReader reader, int num) throws IOException, ParseException {\n    Map<String,String> mappings = new TreeMap<>();\n    \n    for (int i = 0; i < num; i++) {\n      String line = reader.readLine();\n      String parts[] = line.split(\"\\\\s+\");\n      if (parts.length != 3) {\n        throw new ParseException(\"invalid syntax: \" + line, reader.getLineNumber());\n      }\n      if (mappings.put(parts[1], parts[2]) != null) {\n        throw new IllegalStateException(\"duplicate mapping specified for: \" + parts[1]);\n      }\n    }\n    \n    Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n    Builder<CharsRef> builder = new Builder<>(FST.INPUT_TYPE.BYTE2, outputs);\n    IntsRef scratchInts = new IntsRef();\n    for (Map.Entry<String,String> entry : mappings.entrySet()) {\n      Util.toUTF16(entry.getKey(), scratchInts);\n      builder.add(scratchInts, new CharsRef(entry.getValue()));\n    }\n    \n    return builder.finish();\n  }\n\n","bugFix":["5ae9942cbee38a49d234c2f022e3a265133d1914"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseConversions(LineNumberReader,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseConversions(LineNumberReader,int).mjava","sourceNew":"  private FST<CharsRef> parseConversions(LineNumberReader reader, int num) throws IOException, ParseException {\n    Map<String,String> mappings = new TreeMap<>();\n    \n    for (int i = 0; i < num; i++) {\n      String line = reader.readLine();\n      String parts[] = line.split(\"\\\\s+\");\n      if (parts.length != 3) {\n        throw new ParseException(\"invalid syntax: \" + line, reader.getLineNumber());\n      }\n      if (mappings.put(parts[1], parts[2]) != null) {\n        throw new IllegalStateException(\"duplicate mapping specified for: \" + parts[1]);\n      }\n    }\n    \n    Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n    FSTCompiler<CharsRef> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE2, outputs);\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    for (Map.Entry<String,String> entry : mappings.entrySet()) {\n      Util.toUTF16(entry.getKey(), scratchInts);\n      fstCompiler.add(scratchInts.get(), new CharsRef(entry.getValue()));\n    }\n    \n    return fstCompiler.compile();\n  }\n\n","sourceOld":"  private FST<CharsRef> parseConversions(LineNumberReader reader, int num) throws IOException, ParseException {\n    Map<String,String> mappings = new TreeMap<>();\n    \n    for (int i = 0; i < num; i++) {\n      String line = reader.readLine();\n      String parts[] = line.split(\"\\\\s+\");\n      if (parts.length != 3) {\n        throw new ParseException(\"invalid syntax: \" + line, reader.getLineNumber());\n      }\n      if (mappings.put(parts[1], parts[2]) != null) {\n        throw new IllegalStateException(\"duplicate mapping specified for: \" + parts[1]);\n      }\n    }\n    \n    Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n    Builder<CharsRef> builder = new Builder<>(FST.INPUT_TYPE.BYTE2, outputs);\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    for (Map.Entry<String,String> entry : mappings.entrySet()) {\n      Util.toUTF16(entry.getKey(), scratchInts);\n      builder.add(scratchInts.get(), new CharsRef(entry.getValue()));\n    }\n    \n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseConversions(LineNumberReader,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseConversions(LineNumberReader,int).mjava","sourceNew":"  private FST<CharsRef> parseConversions(LineNumberReader reader, int num) throws IOException, ParseException {\n    Map<String,String> mappings = new TreeMap<>();\n    \n    for (int i = 0; i < num; i++) {\n      String line = reader.readLine();\n      String parts[] = line.split(\"\\\\s+\");\n      if (parts.length != 3) {\n        throw new ParseException(\"invalid syntax: \" + line, reader.getLineNumber());\n      }\n      if (mappings.put(parts[1], parts[2]) != null) {\n        throw new IllegalStateException(\"duplicate mapping specified for: \" + parts[1]);\n      }\n    }\n    \n    Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n    FSTCompiler<CharsRef> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE2, outputs);\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    for (Map.Entry<String,String> entry : mappings.entrySet()) {\n      Util.toUTF16(entry.getKey(), scratchInts);\n      fstCompiler.add(scratchInts.get(), new CharsRef(entry.getValue()));\n    }\n    \n    return fstCompiler.compile();\n  }\n\n","sourceOld":"  private FST<CharsRef> parseConversions(LineNumberReader reader, int num) throws IOException, ParseException {\n    Map<String,String> mappings = new TreeMap<>();\n    \n    for (int i = 0; i < num; i++) {\n      String line = reader.readLine();\n      String parts[] = line.split(\"\\\\s+\");\n      if (parts.length != 3) {\n        throw new ParseException(\"invalid syntax: \" + line, reader.getLineNumber());\n      }\n      if (mappings.put(parts[1], parts[2]) != null) {\n        throw new IllegalStateException(\"duplicate mapping specified for: \" + parts[1]);\n      }\n    }\n    \n    Outputs<CharsRef> outputs = CharSequenceOutputs.getSingleton();\n    Builder<CharsRef> builder = new Builder<>(FST.INPUT_TYPE.BYTE2, outputs);\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    for (Map.Entry<String,String> entry : mappings.entrySet()) {\n      Util.toUTF16(entry.getKey(), scratchInts);\n      builder.add(scratchInts.get(), new CharsRef(entry.getValue()));\n    }\n    \n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ae9942cbee38a49d234c2f022e3a265133d1914"],"5ae9942cbee38a49d234c2f022e3a265133d1914":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["5ae9942cbee38a49d234c2f022e3a265133d1914"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"5ae9942cbee38a49d234c2f022e3a265133d1914":["96ea64d994d340044e0d57aeb6a5871539d10ca5","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96ea64d994d340044e0d57aeb6a5871539d10ca5","5ae9942cbee38a49d234c2f022e3a265133d1914"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}