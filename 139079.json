{"path":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#assertQuery(Term,Directory,int).mjava","commits":[{"id":"339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67","date":1348934182,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#assertQuery(Term,Directory,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","sourceNew":"  public void assertQuery(Term t, Directory dir, int num)\n      throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = DirectoryReader.open(dir, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    reader.close();\n\n  }\n\n","sourceOld":"  public void assertQuery(Term t, Directory dir, int num)\n      throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = DirectoryReader.open(dir, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#assertQuery(Term,Directory,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#assertQuery(Term,Directory,int).mjava","sourceNew":"  public void assertQuery(Term t, Directory dir, int num)\n      throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    reader.close();\n\n  }\n\n","sourceOld":"  public void assertQuery(Term t, Directory dir, int num)\n      throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = DirectoryReader.open(dir, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#assertQuery(Term,Directory,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#assertQuery(Term,Directory,int).mjava","sourceNew":"  public void assertQuery(Term t, Directory dir, int num)\n      throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    reader.close();\n\n  }\n\n","sourceOld":"  public void assertQuery(Term t, Directory dir, int num)\n      throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = DirectoryReader.open(dir, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#assertQuery(Term,Directory,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat2#assertQuery(Term,Directory,int).mjava","sourceNew":"  public void assertQuery(Term t, Directory dir, int num)\n      throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits.value);\n    reader.close();\n\n  }\n\n","sourceOld":"  public void assertQuery(Term t, Directory dir, int num)\n      throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a45bec74b98f6fc05f52770cfb425739e6563960":["339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67"],"339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["a45bec74b98f6fc05f52770cfb425739e6563960"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"a45bec74b98f6fc05f52770cfb425739e6563960":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["339cf89fb32d53dacb17aa56f2b6bf87eb4a3a67"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}