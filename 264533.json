{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSessionCaching().mjava","commits":[{"id":"bccf7971a36bd151490117582a0a1a695081ead3","date":1502778995,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSessionCaching().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSessionCaching() {\n    PolicyHelper.SessionRef ref1 = new PolicyHelper.SessionRef();\n    String autoScalingjson = \"  '{cluster-policy':[\" +\n        \"    {      'cores':'<10',      'node':'#ANY'},\" +\n        \"    {      'replica':'<2',      'shard':'#EACH',      'node':'#ANY'},\" +\n        \"    {      'nodeRole':'overseer','replica':0}],\" +\n        \"  'cluster-preferences':[{'minimize':'cores'}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    PolicyHelper.SESSION_REF.set(ref1);\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    ClusterDataProvider provider = getClusterDataProvider((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\"c\", config, provider, null,\n        Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n\n    long sessionRefVersion =  PolicyHelper.REF_VERSION.get();\n    PolicyHelper.SessionRef ref1Copy = PolicyHelper.SESSION_REF.get();\n    PolicyHelper.SESSION_REF.remove();\n    Policy.Session session = ref1Copy.get();\n    assertNotNull(session);\n    assertEquals(ref1, ref1Copy);\n    assertTrue(session.getPolicy() == config.getPolicy());\n    ref1Copy.decref(sessionRefVersion);\n    PolicyHelper.SESSION_REF.set(ref1);\n    AutoScalingConfig config2 = new AutoScalingConfig(policies);\n    locations = PolicyHelper.getReplicaLocations(\"c2\", config2, provider, null, Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n    sessionRefVersion =  PolicyHelper.REF_VERSION.get();\n    ref1Copy = PolicyHelper.SESSION_REF.get();\n    PolicyHelper.SESSION_REF.remove();\n    session = ref1Copy.get();\n    ref1Copy.decref(sessionRefVersion);\n    assertEquals(ref1, ref1Copy);\n    assertFalse(session.getPolicy() == config2.getPolicy());\n    assertTrue(session.getPolicy() == config.getPolicy());\n    assertEquals(2, ref1Copy.getRefCount());\n    ref1.decref(sessionRefVersion);//decref 1\n    ref1.decref(sessionRefVersion);//decref 2\n    PolicyHelper.SESSION_REF.set(ref1);\n    locations = PolicyHelper.getReplicaLocations(\"c3\", config2, provider, null, Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n    sessionRefVersion =  PolicyHelper.REF_VERSION.get();\n    ref1Copy = PolicyHelper.SESSION_REF.get();\n    PolicyHelper.SESSION_REF.remove();\n    session = ref1Copy.get();\n    ref1Copy.decref(sessionRefVersion);\n    assertTrue(session.getPolicy() == config2.getPolicy());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSessionCaching().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSessionCaching() {\n    PolicyHelper.SessionRef ref1 = new PolicyHelper.SessionRef();\n    String autoScalingjson = \"  '{cluster-policy':[\" +\n        \"    {      'cores':'<10',      'node':'#ANY'},\" +\n        \"    {      'replica':'<2',      'shard':'#EACH',      'node':'#ANY'},\" +\n        \"    {      'nodeRole':'overseer','replica':0}],\" +\n        \"  'cluster-preferences':[{'minimize':'cores'}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    PolicyHelper.SESSION_REF.set(ref1);\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    ClusterDataProvider provider = getClusterDataProvider((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\"c\", config, provider, null,\n        Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n\n    long sessionRefVersion =  PolicyHelper.REF_VERSION.get();\n    PolicyHelper.SessionRef ref1Copy = PolicyHelper.SESSION_REF.get();\n    PolicyHelper.SESSION_REF.remove();\n    Policy.Session session = ref1Copy.get();\n    assertNotNull(session);\n    assertEquals(ref1, ref1Copy);\n    assertTrue(session.getPolicy() == config.getPolicy());\n    ref1Copy.decref(sessionRefVersion);\n    PolicyHelper.SESSION_REF.set(ref1);\n    AutoScalingConfig config2 = new AutoScalingConfig(policies);\n    locations = PolicyHelper.getReplicaLocations(\"c2\", config2, provider, null, Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n    sessionRefVersion =  PolicyHelper.REF_VERSION.get();\n    ref1Copy = PolicyHelper.SESSION_REF.get();\n    PolicyHelper.SESSION_REF.remove();\n    session = ref1Copy.get();\n    ref1Copy.decref(sessionRefVersion);\n    assertEquals(ref1, ref1Copy);\n    assertFalse(session.getPolicy() == config2.getPolicy());\n    assertTrue(session.getPolicy() == config.getPolicy());\n    assertEquals(2, ref1Copy.getRefCount());\n    ref1.decref(sessionRefVersion);//decref 1\n    ref1.decref(sessionRefVersion);//decref 2\n    PolicyHelper.SESSION_REF.set(ref1);\n    locations = PolicyHelper.getReplicaLocations(\"c3\", config2, provider, null, Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n    sessionRefVersion =  PolicyHelper.REF_VERSION.get();\n    ref1Copy = PolicyHelper.SESSION_REF.get();\n    PolicyHelper.SESSION_REF.remove();\n    session = ref1Copy.get();\n    ref1Copy.decref(sessionRefVersion);\n    assertTrue(session.getPolicy() == config2.getPolicy());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSessionCaching().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSessionCaching() {\n    PolicyHelper.SessionRef ref1 = new PolicyHelper.SessionRef();\n    String autoScalingjson = \"  '{cluster-policy':[\" +\n        \"    {      'cores':'<10',      'node':'#ANY'},\" +\n        \"    {      'replica':'<2',      'shard':'#EACH',      'node':'#ANY'},\" +\n        \"    {      'nodeRole':'overseer','replica':0}],\" +\n        \"  'cluster-preferences':[{'minimize':'cores'}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    PolicyHelper.SESSION_REF.set(ref1);\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    ClusterDataProvider provider = getClusterDataProvider((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\"c\", config, provider, null,\n        Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n\n    long sessionRefVersion =  PolicyHelper.REF_VERSION.get();\n    PolicyHelper.SessionRef ref1Copy = PolicyHelper.SESSION_REF.get();\n    PolicyHelper.SESSION_REF.remove();\n    Policy.Session session = ref1Copy.get();\n    assertNotNull(session);\n    assertEquals(ref1, ref1Copy);\n    assertTrue(session.getPolicy() == config.getPolicy());\n    ref1Copy.decref(sessionRefVersion);\n    PolicyHelper.SESSION_REF.set(ref1);\n    AutoScalingConfig config2 = new AutoScalingConfig(policies);\n    locations = PolicyHelper.getReplicaLocations(\"c2\", config2, provider, null, Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n    sessionRefVersion =  PolicyHelper.REF_VERSION.get();\n    ref1Copy = PolicyHelper.SESSION_REF.get();\n    PolicyHelper.SESSION_REF.remove();\n    session = ref1Copy.get();\n    ref1Copy.decref(sessionRefVersion);\n    assertEquals(ref1, ref1Copy);\n    assertFalse(session.getPolicy() == config2.getPolicy());\n    assertTrue(session.getPolicy() == config.getPolicy());\n    assertEquals(2, ref1Copy.getRefCount());\n    ref1.decref(sessionRefVersion);//decref 1\n    ref1.decref(sessionRefVersion);//decref 2\n    PolicyHelper.SESSION_REF.set(ref1);\n    locations = PolicyHelper.getReplicaLocations(\"c3\", config2, provider, null, Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n    sessionRefVersion =  PolicyHelper.REF_VERSION.get();\n    ref1Copy = PolicyHelper.SESSION_REF.get();\n    PolicyHelper.SESSION_REF.remove();\n    session = ref1Copy.get();\n    ref1Copy.decref(sessionRefVersion);\n    assertTrue(session.getPolicy() == config2.getPolicy());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSessionCaching().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSessionCaching().mjava","sourceNew":"  @Test\n  public void testSessionCaching() {\n    PolicyHelper.SessionRef ref1 = new PolicyHelper.SessionRef();\n    String autoScalingjson = \"  '{cluster-policy':[\" +\n        \"    {      'cores':'<10',      'node':'#ANY'},\" +\n        \"    {      'replica':'<2',      'shard':'#EACH',      'node':'#ANY'},\" +\n        \"    {      'nodeRole':'overseer','replica':0}],\" +\n        \"  'cluster-preferences':[{'minimize':'cores'}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    PolicyHelper.SESSION_REF.set(ref1);\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    SolrCloudManager provider = getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\"c\", config, provider, null,\n        Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n\n    long sessionRefVersion =  PolicyHelper.REF_VERSION.get();\n    PolicyHelper.SessionRef ref1Copy = PolicyHelper.SESSION_REF.get();\n    PolicyHelper.SESSION_REF.remove();\n    Policy.Session session = ref1Copy.get();\n    assertNotNull(session);\n    assertEquals(ref1, ref1Copy);\n    assertTrue(session.getPolicy() == config.getPolicy());\n    ref1Copy.decref(sessionRefVersion);\n    PolicyHelper.SESSION_REF.set(ref1);\n    AutoScalingConfig config2 = new AutoScalingConfig(policies);\n    locations = PolicyHelper.getReplicaLocations(\"c2\", config2, provider, null, Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n    sessionRefVersion =  PolicyHelper.REF_VERSION.get();\n    ref1Copy = PolicyHelper.SESSION_REF.get();\n    PolicyHelper.SESSION_REF.remove();\n    session = ref1Copy.get();\n    ref1Copy.decref(sessionRefVersion);\n    assertEquals(ref1, ref1Copy);\n    assertFalse(session.getPolicy() == config2.getPolicy());\n    assertTrue(session.getPolicy() == config.getPolicy());\n    assertEquals(2, ref1Copy.getRefCount());\n    ref1.decref(sessionRefVersion);//decref 1\n    ref1.decref(sessionRefVersion);//decref 2\n    PolicyHelper.SESSION_REF.set(ref1);\n    locations = PolicyHelper.getReplicaLocations(\"c3\", config2, provider, null, Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n    sessionRefVersion =  PolicyHelper.REF_VERSION.get();\n    ref1Copy = PolicyHelper.SESSION_REF.get();\n    PolicyHelper.SESSION_REF.remove();\n    session = ref1Copy.get();\n    ref1Copy.decref(sessionRefVersion);\n    assertTrue(session.getPolicy() == config2.getPolicy());\n\n  }\n\n","sourceOld":"  @Test\n  public void testSessionCaching() {\n    PolicyHelper.SessionRef ref1 = new PolicyHelper.SessionRef();\n    String autoScalingjson = \"  '{cluster-policy':[\" +\n        \"    {      'cores':'<10',      'node':'#ANY'},\" +\n        \"    {      'replica':'<2',      'shard':'#EACH',      'node':'#ANY'},\" +\n        \"    {      'nodeRole':'overseer','replica':0}],\" +\n        \"  'cluster-preferences':[{'minimize':'cores'}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    PolicyHelper.SESSION_REF.set(ref1);\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    ClusterDataProvider provider = getClusterDataProvider((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\"c\", config, provider, null,\n        Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n\n    long sessionRefVersion =  PolicyHelper.REF_VERSION.get();\n    PolicyHelper.SessionRef ref1Copy = PolicyHelper.SESSION_REF.get();\n    PolicyHelper.SESSION_REF.remove();\n    Policy.Session session = ref1Copy.get();\n    assertNotNull(session);\n    assertEquals(ref1, ref1Copy);\n    assertTrue(session.getPolicy() == config.getPolicy());\n    ref1Copy.decref(sessionRefVersion);\n    PolicyHelper.SESSION_REF.set(ref1);\n    AutoScalingConfig config2 = new AutoScalingConfig(policies);\n    locations = PolicyHelper.getReplicaLocations(\"c2\", config2, provider, null, Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n    sessionRefVersion =  PolicyHelper.REF_VERSION.get();\n    ref1Copy = PolicyHelper.SESSION_REF.get();\n    PolicyHelper.SESSION_REF.remove();\n    session = ref1Copy.get();\n    ref1Copy.decref(sessionRefVersion);\n    assertEquals(ref1, ref1Copy);\n    assertFalse(session.getPolicy() == config2.getPolicy());\n    assertTrue(session.getPolicy() == config.getPolicy());\n    assertEquals(2, ref1Copy.getRefCount());\n    ref1.decref(sessionRefVersion);//decref 1\n    ref1.decref(sessionRefVersion);//decref 2\n    PolicyHelper.SESSION_REF.set(ref1);\n    locations = PolicyHelper.getReplicaLocations(\"c3\", config2, provider, null, Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n    sessionRefVersion =  PolicyHelper.REF_VERSION.get();\n    ref1Copy = PolicyHelper.SESSION_REF.get();\n    PolicyHelper.SESSION_REF.remove();\n    session = ref1Copy.get();\n    ref1Copy.decref(sessionRefVersion);\n    assertTrue(session.getPolicy() == config2.getPolicy());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d907c28c7fe6305eaec1756d51365f5149e1e41d","date":1512533044,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSessionCaching().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSessionCaching().mjava","sourceNew":"  @Test\n  public void testSessionCaching() throws IOException, InterruptedException {\n//    PolicyHelper.SessionRef ref1 = new PolicyHelper.SessionRef();\n    String autoScalingjson = \"  '{cluster-policy':[\" +\n        \"    {      'cores':'<10',      'node':'#ANY'},\" +\n        \"    {      'replica':'<2',      'shard':'#EACH',      'node':'#ANY'},\" +\n        \"    {      'nodeRole':'overseer','replica':0}],\" +\n        \"  'cluster-preferences':[{'minimize':'cores'}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n//    PolicyHelper.SESSION_REF.set(ref1);\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    final SolrCloudManager solrCloudManager = new DelegatingCloudManager(getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues),\n        clusterState)) {\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return delegatingDistribStateManager(config);\n      }\n    };\n\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\"c\", config, solrCloudManager, null,\n        Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n\n    PolicyHelper.SessionRef sessionRef = (PolicyHelper.SessionRef) solrCloudManager.getObjectCache().get(PolicyHelper.SessionRef.class.getName());\n    assertNotNull(sessionRef);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n\n\n    Policy.Session session = sessionWrapper.get();\n    assertNotNull(session);\n    assertTrue(session.getPolicy() == config.getPolicy());\n    assertEquals(sessionWrapper.status, PolicyHelper.Status.EXECUTING);\n    sessionWrapper.release();\n    assertTrue(sessionRef.getSessionWrapper() == PolicyHelper.SessionWrapper.DEF_INST);\n    PolicyHelper.SessionWrapper s1 = PolicyHelper.getSession(solrCloudManager);\n    assertEquals(sessionRef.getSessionWrapper().getCreateTime(), s1.getCreateTime());\n    PolicyHelper.SessionWrapper[] s2 = new PolicyHelper.SessionWrapper[1];\n    AtomicLong secondTime = new AtomicLong();\n    Thread thread = new Thread(() -> {\n      try {\n        s2[0] = PolicyHelper.getSession(solrCloudManager);\n        secondTime.set(System.nanoTime());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n    thread.start();\n    Thread.sleep(50);\n    long beforeReturn = System.nanoTime();\n    assertEquals(s1.getCreateTime(), sessionRef.getSessionWrapper().getCreateTime());\n    s1.returnSession(s1.get());\n    assertEquals(1, s1.getRefCount());\n    thread.join();\n    assertNotNull(s2[0]);\n    assertTrue(secondTime.get() > beforeReturn);\n    assertTrue(s1.getCreateTime() == s2[0].getCreateTime());\n\n    s2[0].returnSession(s2[0].get());\n    assertEquals(2, s1.getRefCount());\n\n    s2[0].release();\n    assertFalse(sessionRef.getSessionWrapper() == PolicyHelper.SessionWrapper.DEF_INST);\n    s1.release();\n    assertTrue(sessionRef.getSessionWrapper() == PolicyHelper.SessionWrapper.DEF_INST);\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSessionCaching() {\n    PolicyHelper.SessionRef ref1 = new PolicyHelper.SessionRef();\n    String autoScalingjson = \"  '{cluster-policy':[\" +\n        \"    {      'cores':'<10',      'node':'#ANY'},\" +\n        \"    {      'replica':'<2',      'shard':'#EACH',      'node':'#ANY'},\" +\n        \"    {      'nodeRole':'overseer','replica':0}],\" +\n        \"  'cluster-preferences':[{'minimize':'cores'}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    PolicyHelper.SESSION_REF.set(ref1);\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    SolrCloudManager provider = getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\"c\", config, provider, null,\n        Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n\n    long sessionRefVersion =  PolicyHelper.REF_VERSION.get();\n    PolicyHelper.SessionRef ref1Copy = PolicyHelper.SESSION_REF.get();\n    PolicyHelper.SESSION_REF.remove();\n    Policy.Session session = ref1Copy.get();\n    assertNotNull(session);\n    assertEquals(ref1, ref1Copy);\n    assertTrue(session.getPolicy() == config.getPolicy());\n    ref1Copy.decref(sessionRefVersion);\n    PolicyHelper.SESSION_REF.set(ref1);\n    AutoScalingConfig config2 = new AutoScalingConfig(policies);\n    locations = PolicyHelper.getReplicaLocations(\"c2\", config2, provider, null, Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n    sessionRefVersion =  PolicyHelper.REF_VERSION.get();\n    ref1Copy = PolicyHelper.SESSION_REF.get();\n    PolicyHelper.SESSION_REF.remove();\n    session = ref1Copy.get();\n    ref1Copy.decref(sessionRefVersion);\n    assertEquals(ref1, ref1Copy);\n    assertFalse(session.getPolicy() == config2.getPolicy());\n    assertTrue(session.getPolicy() == config.getPolicy());\n    assertEquals(2, ref1Copy.getRefCount());\n    ref1.decref(sessionRefVersion);//decref 1\n    ref1.decref(sessionRefVersion);//decref 2\n    PolicyHelper.SESSION_REF.set(ref1);\n    locations = PolicyHelper.getReplicaLocations(\"c3\", config2, provider, null, Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n    sessionRefVersion =  PolicyHelper.REF_VERSION.get();\n    ref1Copy = PolicyHelper.SESSION_REF.get();\n    PolicyHelper.SESSION_REF.remove();\n    session = ref1Copy.get();\n    ref1Copy.decref(sessionRefVersion);\n    assertTrue(session.getPolicy() == config2.getPolicy());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSessionCaching().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSessionCaching().mjava","sourceNew":"  @Test\n  public void testSessionCaching() throws IOException, InterruptedException {\n//    PolicyHelper.SessionRef ref1 = new PolicyHelper.SessionRef();\n    String autoScalingjson = \"  '{cluster-policy':[\" +\n        \"    {      'cores':'<10',      'node':'#ANY'},\" +\n        \"    {      'replica':'<2',      'shard':'#EACH',      'node':'#ANY'},\" +\n        \"    {      'nodeRole':'overseer','replica':0}],\" +\n        \"  'cluster-preferences':[{'minimize':'cores'}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n//    PolicyHelper.SESSION_REF.set(ref1);\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    final SolrCloudManager solrCloudManager = new DelegatingCloudManager(getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues),\n        clusterState)) {\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return delegatingDistribStateManager(config);\n      }\n    };\n\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\"c\", config, solrCloudManager, null,\n        Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n\n    PolicyHelper.SessionRef sessionRef = (PolicyHelper.SessionRef) solrCloudManager.getObjectCache().get(PolicyHelper.SessionRef.class.getName());\n    assertNotNull(sessionRef);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n\n\n    Policy.Session session = sessionWrapper.get();\n    assertNotNull(session);\n    assertTrue(session.getPolicy() == config.getPolicy());\n    assertEquals(sessionWrapper.status, PolicyHelper.Status.EXECUTING);\n    sessionWrapper.release();\n    assertTrue(sessionRef.getSessionWrapper() == PolicyHelper.SessionWrapper.DEFAULT_INSTANCE);\n    PolicyHelper.SessionWrapper s1 = PolicyHelper.getSession(solrCloudManager);\n    assertEquals(sessionRef.getSessionWrapper().getCreateTime(), s1.getCreateTime());\n    PolicyHelper.SessionWrapper[] s2 = new PolicyHelper.SessionWrapper[1];\n    AtomicLong secondTime = new AtomicLong();\n    Thread thread = new Thread(() -> {\n      try {\n        s2[0] = PolicyHelper.getSession(solrCloudManager);\n        secondTime.set(System.nanoTime());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n    thread.start();\n    Thread.sleep(50);\n    long beforeReturn = System.nanoTime();\n    assertEquals(s1.getCreateTime(), sessionRef.getSessionWrapper().getCreateTime());\n    s1.returnSession(s1.get());\n    assertEquals(1, s1.getRefCount());\n    thread.join();\n    assertNotNull(s2[0]);\n    assertTrue(secondTime.get() > beforeReturn);\n    assertTrue(s1.getCreateTime() == s2[0].getCreateTime());\n\n    s2[0].returnSession(s2[0].get());\n    assertEquals(2, s1.getRefCount());\n\n    s2[0].release();\n    assertFalse(sessionRef.getSessionWrapper() == PolicyHelper.SessionWrapper.DEFAULT_INSTANCE);\n    s1.release();\n    assertTrue(sessionRef.getSessionWrapper() == PolicyHelper.SessionWrapper.DEFAULT_INSTANCE);\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSessionCaching() throws IOException, InterruptedException {\n//    PolicyHelper.SessionRef ref1 = new PolicyHelper.SessionRef();\n    String autoScalingjson = \"  '{cluster-policy':[\" +\n        \"    {      'cores':'<10',      'node':'#ANY'},\" +\n        \"    {      'replica':'<2',      'shard':'#EACH',      'node':'#ANY'},\" +\n        \"    {      'nodeRole':'overseer','replica':0}],\" +\n        \"  'cluster-preferences':[{'minimize':'cores'}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n//    PolicyHelper.SESSION_REF.set(ref1);\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    final SolrCloudManager solrCloudManager = new DelegatingCloudManager(getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues),\n        clusterState)) {\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return delegatingDistribStateManager(config);\n      }\n    };\n\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\"c\", config, solrCloudManager, null,\n        Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n\n    PolicyHelper.SessionRef sessionRef = (PolicyHelper.SessionRef) solrCloudManager.getObjectCache().get(PolicyHelper.SessionRef.class.getName());\n    assertNotNull(sessionRef);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n\n\n    Policy.Session session = sessionWrapper.get();\n    assertNotNull(session);\n    assertTrue(session.getPolicy() == config.getPolicy());\n    assertEquals(sessionWrapper.status, PolicyHelper.Status.EXECUTING);\n    sessionWrapper.release();\n    assertTrue(sessionRef.getSessionWrapper() == PolicyHelper.SessionWrapper.DEF_INST);\n    PolicyHelper.SessionWrapper s1 = PolicyHelper.getSession(solrCloudManager);\n    assertEquals(sessionRef.getSessionWrapper().getCreateTime(), s1.getCreateTime());\n    PolicyHelper.SessionWrapper[] s2 = new PolicyHelper.SessionWrapper[1];\n    AtomicLong secondTime = new AtomicLong();\n    Thread thread = new Thread(() -> {\n      try {\n        s2[0] = PolicyHelper.getSession(solrCloudManager);\n        secondTime.set(System.nanoTime());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n    thread.start();\n    Thread.sleep(50);\n    long beforeReturn = System.nanoTime();\n    assertEquals(s1.getCreateTime(), sessionRef.getSessionWrapper().getCreateTime());\n    s1.returnSession(s1.get());\n    assertEquals(1, s1.getRefCount());\n    thread.join();\n    assertNotNull(s2[0]);\n    assertTrue(secondTime.get() > beforeReturn);\n    assertTrue(s1.getCreateTime() == s2[0].getCreateTime());\n\n    s2[0].returnSession(s2[0].get());\n    assertEquals(2, s1.getRefCount());\n\n    s2[0].release();\n    assertFalse(sessionRef.getSessionWrapper() == PolicyHelper.SessionWrapper.DEF_INST);\n    s1.release();\n    assertTrue(sessionRef.getSessionWrapper() == PolicyHelper.SessionWrapper.DEF_INST);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSessionCaching().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSessionCaching().mjava","sourceNew":"  @Test\n  public void testSessionCaching() throws IOException, InterruptedException {\n//    PolicyHelper.SessionRef ref1 = new PolicyHelper.SessionRef();\n    String autoScalingjson = \"  '{cluster-policy':[\" +\n        \"    {      'cores':'<10',      'node':'#ANY'},\" +\n        \"    {      'replica':'<2',      'shard':'#EACH',      'node':'#ANY'},\" +\n        \"    {      'nodeRole':'overseer','replica':0}],\" +\n        \"  'cluster-preferences':[{'minimize':'cores'}]}\";\n    @SuppressWarnings({\"unchecked\"})\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n//    PolicyHelper.SESSION_REF.set(ref1);\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    final SolrCloudManager solrCloudManager = new DelegatingCloudManager(getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues),\n        clusterState)) {\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return delegatingDistribStateManager(config);\n      }\n    };\n\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\"c\", config, solrCloudManager, null,\n        Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n\n    PolicyHelper.SessionRef sessionRef = (PolicyHelper.SessionRef) solrCloudManager.getObjectCache().get(PolicyHelper.SessionRef.class.getName());\n    assertNotNull(sessionRef);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n\n\n    Policy.Session session = sessionWrapper.get();\n    assertNotNull(session);\n    assertTrue(session.getPolicy() == config.getPolicy());\n    assertEquals(sessionWrapper.status, PolicyHelper.Status.EXECUTING);\n    sessionWrapper.release();\n    assertTrue(sessionRef.getSessionWrapper() == PolicyHelper.SessionWrapper.DEFAULT_INSTANCE);\n    PolicyHelper.SessionWrapper s1 = PolicyHelper.getSession(solrCloudManager);\n    assertEquals(sessionRef.getSessionWrapper().getCreateTime(), s1.getCreateTime());\n    PolicyHelper.SessionWrapper[] s2 = new PolicyHelper.SessionWrapper[1];\n    AtomicLong secondTime = new AtomicLong();\n    Thread thread = new Thread(() -> {\n      try {\n        s2[0] = PolicyHelper.getSession(solrCloudManager);\n        secondTime.set(System.nanoTime());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n    thread.start();\n    Thread.sleep(50);\n    long beforeReturn = System.nanoTime();\n    assertEquals(s1.getCreateTime(), sessionRef.getSessionWrapper().getCreateTime());\n    s1.returnSession(s1.get());\n    assertEquals(1, s1.getRefCount());\n    thread.join();\n    assertNotNull(s2[0]);\n    assertTrue(secondTime.get() > beforeReturn);\n    assertTrue(s1.getCreateTime() == s2[0].getCreateTime());\n\n    s2[0].returnSession(s2[0].get());\n    assertEquals(2, s1.getRefCount());\n\n    s2[0].release();\n    assertFalse(sessionRef.getSessionWrapper() == PolicyHelper.SessionWrapper.DEFAULT_INSTANCE);\n    s1.release();\n    assertTrue(sessionRef.getSessionWrapper() == PolicyHelper.SessionWrapper.DEFAULT_INSTANCE);\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSessionCaching() throws IOException, InterruptedException {\n//    PolicyHelper.SessionRef ref1 = new PolicyHelper.SessionRef();\n    String autoScalingjson = \"  '{cluster-policy':[\" +\n        \"    {      'cores':'<10',      'node':'#ANY'},\" +\n        \"    {      'replica':'<2',      'shard':'#EACH',      'node':'#ANY'},\" +\n        \"    {      'nodeRole':'overseer','replica':0}],\" +\n        \"  'cluster-preferences':[{'minimize':'cores'}]}\";\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n//    PolicyHelper.SESSION_REF.set(ref1);\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    final SolrCloudManager solrCloudManager = new DelegatingCloudManager(getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues),\n        clusterState)) {\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return delegatingDistribStateManager(config);\n      }\n    };\n\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\"c\", config, solrCloudManager, null,\n        Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n\n    PolicyHelper.SessionRef sessionRef = (PolicyHelper.SessionRef) solrCloudManager.getObjectCache().get(PolicyHelper.SessionRef.class.getName());\n    assertNotNull(sessionRef);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n\n\n    Policy.Session session = sessionWrapper.get();\n    assertNotNull(session);\n    assertTrue(session.getPolicy() == config.getPolicy());\n    assertEquals(sessionWrapper.status, PolicyHelper.Status.EXECUTING);\n    sessionWrapper.release();\n    assertTrue(sessionRef.getSessionWrapper() == PolicyHelper.SessionWrapper.DEFAULT_INSTANCE);\n    PolicyHelper.SessionWrapper s1 = PolicyHelper.getSession(solrCloudManager);\n    assertEquals(sessionRef.getSessionWrapper().getCreateTime(), s1.getCreateTime());\n    PolicyHelper.SessionWrapper[] s2 = new PolicyHelper.SessionWrapper[1];\n    AtomicLong secondTime = new AtomicLong();\n    Thread thread = new Thread(() -> {\n      try {\n        s2[0] = PolicyHelper.getSession(solrCloudManager);\n        secondTime.set(System.nanoTime());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n    thread.start();\n    Thread.sleep(50);\n    long beforeReturn = System.nanoTime();\n    assertEquals(s1.getCreateTime(), sessionRef.getSessionWrapper().getCreateTime());\n    s1.returnSession(s1.get());\n    assertEquals(1, s1.getRefCount());\n    thread.join();\n    assertNotNull(s2[0]);\n    assertTrue(secondTime.get() > beforeReturn);\n    assertTrue(s1.getCreateTime() == s2[0].getCreateTime());\n\n    s2[0].returnSession(s2[0].get());\n    assertEquals(2, s1.getRefCount());\n\n    s2[0].release();\n    assertFalse(sessionRef.getSessionWrapper() == PolicyHelper.SessionWrapper.DEFAULT_INSTANCE);\n    s1.release();\n    assertTrue(sessionRef.getSessionWrapper() == PolicyHelper.SessionWrapper.DEFAULT_INSTANCE);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e17627eb9673daf01d17fdfb583c621c55c34208","date":1593028963,"type":3,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSessionCaching().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSessionCaching().mjava","sourceNew":"  @Test\n  public void testSessionCaching() throws IOException, InterruptedException {\n//    PolicyHelper.SessionRef ref1 = new PolicyHelper.SessionRef();\n    String autoScalingjson = \"  '{cluster-policy':[\" +\n        \"    {      'cores':'<10',      'node':'#ANY'},\" +\n        \"    {      'replica':'<2',      'shard':'#EACH',      'node':'#ANY'},\" +\n        \"    {      'nodeRole':'overseer','replica':0}],\" +\n        \"  'cluster-preferences':[{'minimize':'cores'}]}\";\n    @SuppressWarnings({\"unchecked\"})\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n//    PolicyHelper.SESSION_REF.set(ref1);\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    final SolrCloudManager solrCloudManager = new DelegatingCloudManager(getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues),\n        clusterState)) {\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return delegatingDistribStateManager(config);\n      }\n    };\n\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\"c\", config, solrCloudManager, null,\n        Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n\n    PolicyHelper.SessionRef sessionRef = (PolicyHelper.SessionRef) solrCloudManager.getObjectCache().get(PolicyHelper.SessionRef.class.getName());\n    assertNotNull(sessionRef);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n\n\n    Policy.Session session = sessionWrapper.get();\n    assertNotNull(session);\n    assertTrue(session.getPolicy() == config.getPolicy());\n    assertEquals(sessionWrapper.status, PolicyHelper.Status.EXECUTING);\n    sessionWrapper.release();\n    assertTrue(sessionRef.isEmpty());\n    PolicyHelper.SessionWrapper s1 = PolicyHelper.getSession(solrCloudManager);\n    PolicyHelper.SessionWrapper[] s2 = new PolicyHelper.SessionWrapper[1];\n    AtomicLong secondTime = new AtomicLong();\n    Thread thread = new Thread(() -> {\n      try {\n        s2[0] = PolicyHelper.getSession(solrCloudManager);\n        secondTime.set(System.nanoTime());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n    thread.start();\n    Thread.sleep(50);\n    long beforeReturn = System.nanoTime();\n    s1.returnSession(s1.get());\n    assertEquals(1, s1.getRefCount());\n    thread.join();\n    assertNotNull(s2[0]);\n    assertTrue(secondTime.get() > beforeReturn);\n    assertTrue(s1.getCreateTime() == s2[0].getCreateTime());\n\n    s2[0].returnSession(s2[0].get());\n    assertEquals(2, s1.getRefCount());\n\n    s2[0].release();\n    assertFalse(sessionRef.isEmpty());\n    s1.release();\n    assertTrue(sessionRef.isEmpty());\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSessionCaching() throws IOException, InterruptedException {\n//    PolicyHelper.SessionRef ref1 = new PolicyHelper.SessionRef();\n    String autoScalingjson = \"  '{cluster-policy':[\" +\n        \"    {      'cores':'<10',      'node':'#ANY'},\" +\n        \"    {      'replica':'<2',      'shard':'#EACH',      'node':'#ANY'},\" +\n        \"    {      'nodeRole':'overseer','replica':0}],\" +\n        \"  'cluster-preferences':[{'minimize':'cores'}]}\";\n    @SuppressWarnings({\"unchecked\"})\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n//    PolicyHelper.SESSION_REF.set(ref1);\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    final SolrCloudManager solrCloudManager = new DelegatingCloudManager(getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues),\n        clusterState)) {\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return delegatingDistribStateManager(config);\n      }\n    };\n\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\"c\", config, solrCloudManager, null,\n        Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n\n    PolicyHelper.SessionRef sessionRef = (PolicyHelper.SessionRef) solrCloudManager.getObjectCache().get(PolicyHelper.SessionRef.class.getName());\n    assertNotNull(sessionRef);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n\n\n    Policy.Session session = sessionWrapper.get();\n    assertNotNull(session);\n    assertTrue(session.getPolicy() == config.getPolicy());\n    assertEquals(sessionWrapper.status, PolicyHelper.Status.EXECUTING);\n    sessionWrapper.release();\n    assertTrue(sessionRef.getSessionWrapper() == PolicyHelper.SessionWrapper.DEFAULT_INSTANCE);\n    PolicyHelper.SessionWrapper s1 = PolicyHelper.getSession(solrCloudManager);\n    assertEquals(sessionRef.getSessionWrapper().getCreateTime(), s1.getCreateTime());\n    PolicyHelper.SessionWrapper[] s2 = new PolicyHelper.SessionWrapper[1];\n    AtomicLong secondTime = new AtomicLong();\n    Thread thread = new Thread(() -> {\n      try {\n        s2[0] = PolicyHelper.getSession(solrCloudManager);\n        secondTime.set(System.nanoTime());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n    thread.start();\n    Thread.sleep(50);\n    long beforeReturn = System.nanoTime();\n    assertEquals(s1.getCreateTime(), sessionRef.getSessionWrapper().getCreateTime());\n    s1.returnSession(s1.get());\n    assertEquals(1, s1.getRefCount());\n    thread.join();\n    assertNotNull(s2[0]);\n    assertTrue(secondTime.get() > beforeReturn);\n    assertTrue(s1.getCreateTime() == s2[0].getCreateTime());\n\n    s2[0].returnSession(s2[0].get());\n    assertEquals(2, s1.getRefCount());\n\n    s2[0].release();\n    assertFalse(sessionRef.getSessionWrapper() == PolicyHelper.SessionWrapper.DEFAULT_INSTANCE);\n    s1.release();\n    assertTrue(sessionRef.getSessionWrapper() == PolicyHelper.SessionWrapper.DEFAULT_INSTANCE);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testSessionCaching().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testSessionCaching() throws IOException, InterruptedException {\n//    PolicyHelper.SessionRef ref1 = new PolicyHelper.SessionRef();\n    String autoScalingjson = \"  '{cluster-policy':[\" +\n        \"    {      'cores':'<10',      'node':'#ANY'},\" +\n        \"    {      'replica':'<2',      'shard':'#EACH',      'node':'#ANY'},\" +\n        \"    {      'nodeRole':'overseer','replica':0}],\" +\n        \"  'cluster-preferences':[{'minimize':'cores'}]}\";\n    @SuppressWarnings({\"unchecked\"})\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n//    PolicyHelper.SESSION_REF.set(ref1);\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    final SolrCloudManager solrCloudManager = new DelegatingCloudManager(getSolrCloudManager((Map<String, Map>) Utils.fromJSONString(nodeValues),\n        clusterState)) {\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return delegatingDistribStateManager(config);\n      }\n    };\n\n    List<ReplicaPosition> locations = PolicyHelper.getReplicaLocations(\"c\", config, solrCloudManager, null,\n        Arrays.asList(\"s1\", \"s2\"), 1, 0, 0,\n        null);\n\n    PolicyHelper.SessionRef sessionRef = (PolicyHelper.SessionRef) solrCloudManager.getObjectCache().get(PolicyHelper.SessionRef.class.getName());\n    assertNotNull(sessionRef);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getLastSessionWrapper(true);\n\n\n    Policy.Session session = sessionWrapper.get();\n    assertNotNull(session);\n    assertTrue(session.getPolicy() == config.getPolicy());\n    assertEquals(sessionWrapper.status, PolicyHelper.Status.EXECUTING);\n    sessionWrapper.release();\n    assertTrue(sessionRef.isEmpty());\n    PolicyHelper.SessionWrapper s1 = PolicyHelper.getSession(solrCloudManager);\n    PolicyHelper.SessionWrapper[] s2 = new PolicyHelper.SessionWrapper[1];\n    AtomicLong secondTime = new AtomicLong();\n    Thread thread = new Thread(() -> {\n      try {\n        s2[0] = PolicyHelper.getSession(solrCloudManager);\n        secondTime.set(System.nanoTime());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    });\n    thread.start();\n    Thread.sleep(50);\n    long beforeReturn = System.nanoTime();\n    s1.returnSession(s1.get());\n    assertEquals(1, s1.getRefCount());\n    thread.join();\n    assertNotNull(s2[0]);\n    assertTrue(secondTime.get() > beforeReturn);\n    assertTrue(s1.getCreateTime() == s2[0].getCreateTime());\n\n    s2[0].returnSession(s2[0].get());\n    assertEquals(2, s1.getRefCount());\n\n    s2[0].release();\n    assertFalse(sessionRef.isEmpty());\n    s1.release();\n    assertTrue(sessionRef.isEmpty());\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["27639bb5e041490ce599065875dd2f6d8beef62a"],"e17627eb9673daf01d17fdfb583c621c55c34208":["9ba1b632c041956c93c41aa1143d16a567014891"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bccf7971a36bd151490117582a0a1a695081ead3"],"3f504512a03d978990cbff30db0522b354e846db":["e17627eb9673daf01d17fdfb583c621c55c34208"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bccf7971a36bd151490117582a0a1a695081ead3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"27639bb5e041490ce599065875dd2f6d8beef62a":["d907c28c7fe6305eaec1756d51365f5149e1e41d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"d907c28c7fe6305eaec1756d51365f5149e1e41d":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["e17627eb9673daf01d17fdfb583c621c55c34208"],"e17627eb9673daf01d17fdfb583c621c55c34208":["3f504512a03d978990cbff30db0522b354e846db"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","bccf7971a36bd151490117582a0a1a695081ead3","560c18d71dad43d675158783c3840f8c80d6d39c"],"bccf7971a36bd151490117582a0a1a695081ead3":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["d907c28c7fe6305eaec1756d51365f5149e1e41d"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"27639bb5e041490ce599065875dd2f6d8beef62a":["9ba1b632c041956c93c41aa1143d16a567014891"],"d907c28c7fe6305eaec1756d51365f5149e1e41d":["27639bb5e041490ce599065875dd2f6d8beef62a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}