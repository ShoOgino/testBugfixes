{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testMonotonicBlockPackedReaderWriter().mjava","commits":[{"id":"e76d3450662dab47d54e3f462c7b3eba4e38b9ac","date":1358866496,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testMonotonicBlockPackedReaderWriter().mjava","pathOld":"/dev/null","sourceNew":"  public void testMonotonicBlockPackedReaderWriter() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int blockSize = 1 << _TestUtil.nextInt(random(), 6, 18);\n      final int valueCount = random().nextInt(1 << 18);\n      final long[] values = new long[valueCount];\n      if (valueCount > 0) {\n        values[0] = random().nextBoolean() ? random().nextInt(10) : random().nextInt(Integer.MAX_VALUE);\n        int maxDelta = random().nextInt(64);\n        for (int i = 1; i < valueCount; ++i) {\n          if (random().nextDouble() < 0.1d) {\n            maxDelta = random().nextInt(64);\n          }\n          values[i] = Math.max(0, values[i-1] + _TestUtil.nextInt(random(), -16, maxDelta));\n        }\n      }\n\n      final Directory dir = newDirectory();\n      final IndexOutput out = dir.createOutput(\"out.bin\", IOContext.DEFAULT);\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(out, blockSize);\n      for (int i = 0; i < valueCount; ++i) {\n        assertEquals(i, writer.ord());\n        writer.add(values[i]);\n      }\n      assertEquals(valueCount, writer.ord());\n      writer.finish();\n      assertEquals(valueCount, writer.ord());\n      final long fp = out.getFilePointer();\n      out.close();\n\n      final IndexInput in = dir.openInput(\"out.bin\", IOContext.DEFAULT);\n      final MonotonicBlockPackedReader reader = new MonotonicBlockPackedReader(in, PackedInts.VERSION_CURRENT, blockSize, valueCount, random().nextBoolean());\n      assertEquals(fp, in.getFilePointer());\n      for (int i = 0; i < valueCount; ++i) {\n        assertEquals(\"i=\" +i, values[i], reader.get(i));\n      }\n      in.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testMonotonicBlockPackedReaderWriter().mjava","pathOld":"/dev/null","sourceNew":"  public void testMonotonicBlockPackedReaderWriter() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int blockSize = 1 << _TestUtil.nextInt(random(), 6, 18);\n      final int valueCount = random().nextInt(1 << 18);\n      final long[] values = new long[valueCount];\n      if (valueCount > 0) {\n        values[0] = random().nextBoolean() ? random().nextInt(10) : random().nextInt(Integer.MAX_VALUE);\n        int maxDelta = random().nextInt(64);\n        for (int i = 1; i < valueCount; ++i) {\n          if (random().nextDouble() < 0.1d) {\n            maxDelta = random().nextInt(64);\n          }\n          values[i] = Math.max(0, values[i-1] + _TestUtil.nextInt(random(), -16, maxDelta));\n        }\n      }\n\n      final Directory dir = newDirectory();\n      final IndexOutput out = dir.createOutput(\"out.bin\", IOContext.DEFAULT);\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(out, blockSize);\n      for (int i = 0; i < valueCount; ++i) {\n        assertEquals(i, writer.ord());\n        writer.add(values[i]);\n      }\n      assertEquals(valueCount, writer.ord());\n      writer.finish();\n      assertEquals(valueCount, writer.ord());\n      final long fp = out.getFilePointer();\n      out.close();\n\n      final IndexInput in = dir.openInput(\"out.bin\", IOContext.DEFAULT);\n      final MonotonicBlockPackedReader reader = new MonotonicBlockPackedReader(in, PackedInts.VERSION_CURRENT, blockSize, valueCount, random().nextBoolean());\n      assertEquals(fp, in.getFilePointer());\n      for (int i = 0; i < valueCount; ++i) {\n        assertEquals(\"i=\" +i, values[i], reader.get(i));\n      }\n      in.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testMonotonicBlockPackedReaderWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testMonotonicBlockPackedReaderWriter().mjava","sourceNew":"  public void testMonotonicBlockPackedReaderWriter() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int blockSize = 1 << TestUtil.nextInt(random(), 6, 18);\n      final int valueCount = random().nextInt(1 << 18);\n      final long[] values = new long[valueCount];\n      if (valueCount > 0) {\n        values[0] = random().nextBoolean() ? random().nextInt(10) : random().nextInt(Integer.MAX_VALUE);\n        int maxDelta = random().nextInt(64);\n        for (int i = 1; i < valueCount; ++i) {\n          if (random().nextDouble() < 0.1d) {\n            maxDelta = random().nextInt(64);\n          }\n          values[i] = Math.max(0, values[i-1] + TestUtil.nextInt(random(), -16, maxDelta));\n        }\n      }\n\n      final Directory dir = newDirectory();\n      final IndexOutput out = dir.createOutput(\"out.bin\", IOContext.DEFAULT);\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(out, blockSize);\n      for (int i = 0; i < valueCount; ++i) {\n        assertEquals(i, writer.ord());\n        writer.add(values[i]);\n      }\n      assertEquals(valueCount, writer.ord());\n      writer.finish();\n      assertEquals(valueCount, writer.ord());\n      final long fp = out.getFilePointer();\n      out.close();\n\n      final IndexInput in = dir.openInput(\"out.bin\", IOContext.DEFAULT);\n      final MonotonicBlockPackedReader reader = new MonotonicBlockPackedReader(in, PackedInts.VERSION_CURRENT, blockSize, valueCount, random().nextBoolean());\n      assertEquals(fp, in.getFilePointer());\n      for (int i = 0; i < valueCount; ++i) {\n        assertEquals(\"i=\" +i, values[i], reader.get(i));\n      }\n      in.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testMonotonicBlockPackedReaderWriter() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int blockSize = 1 << _TestUtil.nextInt(random(), 6, 18);\n      final int valueCount = random().nextInt(1 << 18);\n      final long[] values = new long[valueCount];\n      if (valueCount > 0) {\n        values[0] = random().nextBoolean() ? random().nextInt(10) : random().nextInt(Integer.MAX_VALUE);\n        int maxDelta = random().nextInt(64);\n        for (int i = 1; i < valueCount; ++i) {\n          if (random().nextDouble() < 0.1d) {\n            maxDelta = random().nextInt(64);\n          }\n          values[i] = Math.max(0, values[i-1] + _TestUtil.nextInt(random(), -16, maxDelta));\n        }\n      }\n\n      final Directory dir = newDirectory();\n      final IndexOutput out = dir.createOutput(\"out.bin\", IOContext.DEFAULT);\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(out, blockSize);\n      for (int i = 0; i < valueCount; ++i) {\n        assertEquals(i, writer.ord());\n        writer.add(values[i]);\n      }\n      assertEquals(valueCount, writer.ord());\n      writer.finish();\n      assertEquals(valueCount, writer.ord());\n      final long fp = out.getFilePointer();\n      out.close();\n\n      final IndexInput in = dir.openInput(\"out.bin\", IOContext.DEFAULT);\n      final MonotonicBlockPackedReader reader = new MonotonicBlockPackedReader(in, PackedInts.VERSION_CURRENT, blockSize, valueCount, random().nextBoolean());\n      assertEquals(fp, in.getFilePointer());\n      for (int i = 0; i < valueCount; ++i) {\n        assertEquals(\"i=\" +i, values[i], reader.get(i));\n      }\n      in.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db1893644d5f20456c9524b28e826293d767db65","date":1401985804,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testMonotonicBlockPackedReaderWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testMonotonicBlockPackedReaderWriter().mjava","sourceNew":"  public void testMonotonicBlockPackedReaderWriter() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int blockSize = 1 << TestUtil.nextInt(random(), 6, 18);\n      final int valueCount = random().nextInt(1 << 18);\n      final long[] values = new long[valueCount];\n      if (valueCount > 0) {\n        values[0] = random().nextBoolean() ? random().nextInt(10) : random().nextInt(Integer.MAX_VALUE);\n        int maxDelta = random().nextInt(64);\n        for (int i = 1; i < valueCount; ++i) {\n          if (random().nextDouble() < 0.1d) {\n            maxDelta = random().nextInt(64);\n          }\n          values[i] = Math.max(0, values[i-1] + TestUtil.nextInt(random(), -16, maxDelta));\n        }\n      }\n\n      final Directory dir = newDirectory();\n      final IndexOutput out = dir.createOutput(\"out.bin\", IOContext.DEFAULT);\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(out, blockSize);\n      for (int i = 0; i < valueCount; ++i) {\n        assertEquals(i, writer.ord());\n        writer.add(values[i]);\n      }\n      assertEquals(valueCount, writer.ord());\n      writer.finish();\n      assertEquals(valueCount, writer.ord());\n      final long fp = out.getFilePointer();\n      out.close();\n\n      final IndexInput in = dir.openInput(\"out.bin\", IOContext.DEFAULT);\n      final MonotonicBlockPackedReader reader = MonotonicBlockPackedReader.of(in, PackedInts.VERSION_CURRENT, blockSize, valueCount, random().nextBoolean());\n      assertEquals(fp, in.getFilePointer());\n      for (int i = 0; i < valueCount; ++i) {\n        assertEquals(\"i=\" +i, values[i], reader.get(i));\n      }\n      in.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testMonotonicBlockPackedReaderWriter() throws IOException {\n    final int iters = atLeast(2);\n    for (int iter = 0; iter < iters; ++iter) {\n      final int blockSize = 1 << TestUtil.nextInt(random(), 6, 18);\n      final int valueCount = random().nextInt(1 << 18);\n      final long[] values = new long[valueCount];\n      if (valueCount > 0) {\n        values[0] = random().nextBoolean() ? random().nextInt(10) : random().nextInt(Integer.MAX_VALUE);\n        int maxDelta = random().nextInt(64);\n        for (int i = 1; i < valueCount; ++i) {\n          if (random().nextDouble() < 0.1d) {\n            maxDelta = random().nextInt(64);\n          }\n          values[i] = Math.max(0, values[i-1] + TestUtil.nextInt(random(), -16, maxDelta));\n        }\n      }\n\n      final Directory dir = newDirectory();\n      final IndexOutput out = dir.createOutput(\"out.bin\", IOContext.DEFAULT);\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(out, blockSize);\n      for (int i = 0; i < valueCount; ++i) {\n        assertEquals(i, writer.ord());\n        writer.add(values[i]);\n      }\n      assertEquals(valueCount, writer.ord());\n      writer.finish();\n      assertEquals(valueCount, writer.ord());\n      final long fp = out.getFilePointer();\n      out.close();\n\n      final IndexInput in = dir.openInput(\"out.bin\", IOContext.DEFAULT);\n      final MonotonicBlockPackedReader reader = new MonotonicBlockPackedReader(in, PackedInts.VERSION_CURRENT, blockSize, valueCount, random().nextBoolean());\n      assertEquals(fp, in.getFilePointer());\n      for (int i = 0; i < valueCount; ++i) {\n        assertEquals(\"i=\" +i, values[i], reader.get(i));\n      }\n      in.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db1893644d5f20456c9524b28e826293d767db65":["6613659748fe4411a7dcf85266e55db1f95f7315"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e76d3450662dab47d54e3f462c7b3eba4e38b9ac"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db1893644d5f20456c9524b28e826293d767db65"]},"commit2Childs":{"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"db1893644d5f20456c9524b28e826293d767db65":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["db1893644d5f20456c9524b28e826293d767db65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac","d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}