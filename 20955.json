{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    public void testChangingRAMBuffer() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    public void testChangingRAMBuffer() throws IOException {\n      MockRAMDirectory dir = newDirectory(random);      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    public void testChangingRAMBuffer() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    public void testChangingRAMBuffer() throws IOException {\n      MockDirectoryWrapper dir = newDirectory(random);      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    public void testChangingRAMBuffer() throws IOException {\n      MockRAMDirectory dir = newDirectory(random);      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    public void testChangingRAMBuffer() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    public void testChangingRAMBuffer() throws IOException {\n      MockDirectoryWrapper dir = newDirectory(random);      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    public void testChangingRAMBuffer() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    public void testChangingRAMBuffer() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"068265517d1fbc623f5aeaee57fcd8df925678e4","date":1286043654,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    @Deprecated\n    public void testChangingRAMBuffer() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    public void testChangingRAMBuffer() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":null,"sourceOld":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    @Deprecated\n    public void testChangingRAMBuffer() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":null,"sourceOld":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    @Deprecated\n    public void testChangingRAMBuffer() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();      \n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(newField(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":null,"sourceOld":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00b21520fafb9860ce0318d7be5ea84619c185ad","date":1300444600,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"/dev/null","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aff3b9dc7c2e78c6b286ca55abc6bed6c03b8fd2","date":1300530877,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"/dev/null","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"/dev/null","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", storedTextType, \"aaa\" + j));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", storedTextType, \"aaa\" + j));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      Directory dir = newDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      writer.getConfig().setMaxBufferedDocs(10);\n      writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, storedTextType));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.getConfig().setRAMBufferSizeMB(16);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.getConfig().setRAMBufferSizeMB(0.000001);\n          writer.getConfig().setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.getConfig().setMaxBufferedDocs(10);\n          writer.getConfig().setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"aff3b9dc7c2e78c6b286ca55abc6bed6c03b8fd2":["00b21520fafb9860ce0318d7be5ea84619c185ad"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","aff3b9dc7c2e78c6b286ca55abc6bed6c03b8fd2"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["aff3b9dc7c2e78c6b286ca55abc6bed6c03b8fd2"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"00b21520fafb9860ce0318d7be5ea84619c185ad":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["3bb13258feba31ab676502787ab2e1779f129b7a","aff3b9dc7c2e78c6b286ca55abc6bed6c03b8fd2"],"a3776dccca01c11e7046323cfad46a3b4a471233":["aff3b9dc7c2e78c6b286ca55abc6bed6c03b8fd2","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"068265517d1fbc623f5aeaee57fcd8df925678e4":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"3bb13258feba31ab676502787ab2e1779f129b7a":["068265517d1fbc623f5aeaee57fcd8df925678e4","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["068265517d1fbc623f5aeaee57fcd8df925678e4"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aff3b9dc7c2e78c6b286ca55abc6bed6c03b8fd2":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["068265517d1fbc623f5aeaee57fcd8df925678e4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1509f151d7692d84fae414b2b799ac06ba60fcb4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":[],"00b21520fafb9860ce0318d7be5ea84619c185ad":["aff3b9dc7c2e78c6b286ca55abc6bed6c03b8fd2"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"068265517d1fbc623f5aeaee57fcd8df925678e4":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","00b21520fafb9860ce0318d7be5ea84619c185ad","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}