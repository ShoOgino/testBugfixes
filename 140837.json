{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers.MyCollector#getLeafCollector(LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers.MyCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    public LeafCollector getLeafCollector(LeafReaderContext context)\n        throws IOException {\n      final int docBase = context.docBase;\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          super.setScorer(scorer);\n          tqsSet.clear();\n          fillLeaves(scorer, tqsSet);\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          int freq = 0;\n          for(Scorer scorer : tqsSet) {\n            if (doc == scorer.docID()) {\n              freq += scorer.freq();\n            }\n          }\n          docCounts.put(doc + docBase, freq);\n          super.collect(doc);\n        }\n        \n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers.MyCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers.MyCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    public LeafCollector getLeafCollector(LeafReaderContext context)\n        throws IOException {\n      final int docBase = context.docBase;\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          super.setScorer(scorer);\n          tqsSet.clear();\n          fillLeaves(scorer, tqsSet);\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          int freq = 0;\n          for(Scorer scorer : tqsSet) {\n            if (doc == scorer.docID()) {\n              freq += scorer.freq();\n            }\n          }\n          docCounts.put(doc + docBase, freq);\n          super.collect(doc);\n        }\n        \n      };\n    }\n\n","sourceOld":"    public LeafCollector getLeafCollector(LeafReaderContext context)\n        throws IOException {\n      final int docBase = context.docBase;\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          super.setScorer(scorer);\n          tqsSet.clear();\n          fillLeaves(scorer, tqsSet);\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          int freq = 0;\n          for(Scorer scorer : tqsSet) {\n            if (doc == scorer.docID()) {\n              freq += scorer.freq();\n            }\n          }\n          docCounts.put(doc + docBase, freq);\n          super.collect(doc);\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc14da055888b63b4f8c922d0e1579f3cb315ad7","date":1510744456,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers.MyCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers.MyCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    public LeafCollector getLeafCollector(LeafReaderContext context)\n        throws IOException {\n      final int docBase = context.docBase;\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          super.setScorer(scorer);\n          tqsSet.clear();\n          fillLeaves(scorer, tqsSet);\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          int freq = 0;\n          for(Scorer scorer : tqsSet) {\n            if (doc == scorer.docID()) {\n              freq += scorer.score();\n            }\n          }\n          docCounts.put(doc + docBase, freq);\n          super.collect(doc);\n        }\n        \n      };\n    }\n\n","sourceOld":"    public LeafCollector getLeafCollector(LeafReaderContext context)\n        throws IOException {\n      final int docBase = context.docBase;\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          super.setScorer(scorer);\n          tqsSet.clear();\n          fillLeaves(scorer, tqsSet);\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          int freq = 0;\n          for(Scorer scorer : tqsSet) {\n            if (doc == scorer.docID()) {\n              freq += scorer.freq();\n            }\n          }\n          docCounts.put(doc + docBase, freq);\n          super.collect(doc);\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers.MyCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers.MyCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    public LeafCollector getLeafCollector(LeafReaderContext context)\n        throws IOException {\n      final int docBase = context.docBase;\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        \n        @Override\n        public void setScorer(Scorable scorer) throws IOException {\n          super.setScorer(scorer);\n          tqsSet.clear();\n          fillLeaves(scorer, tqsSet);\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          int freq = 0;\n          for(Scorer scorer : tqsSet) {\n            if (doc == scorer.docID()) {\n              freq += scorer.score();\n            }\n          }\n          docCounts.put(doc + docBase, freq);\n          super.collect(doc);\n        }\n        \n      };\n    }\n\n","sourceOld":"    public LeafCollector getLeafCollector(LeafReaderContext context)\n        throws IOException {\n      final int docBase = context.docBase;\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        \n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          super.setScorer(scorer);\n          tqsSet.clear();\n          fillLeaves(scorer, tqsSet);\n        }\n        \n        @Override\n        public void collect(int doc) throws IOException {\n          int freq = 0;\n          for(Scorer scorer : tqsSet) {\n            if (doc == scorer.docID()) {\n              freq += scorer.score();\n            }\n          }\n          docCounts.put(doc + docBase, freq);\n          super.collect(doc);\n        }\n        \n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285244982ce6aa163d1e60a707f0e6e121736ce5"]},"commit2Childs":{"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}