{"path":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.FieldIndexReader#FieldIndexReader(IndexInput,FieldInfo,int,long,long,long,long).mjava","commits":[{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.FieldIndexReader#FieldIndexReader(IndexInput,FieldInfo,int,long,long,long,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader#FieldIndexReader(IndexInput,FieldInfo,int,long,long,long,long).mjava","sourceNew":"    public FieldIndexReader(IndexInput in, FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                            long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.in = in;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      // We still create the indexReader when indexDivisor\n      // is -1, so that PrefixCodedTermsReader can call\n      // isIndexTerm for each field:\n      if (indexDivisor > 0) {\n        coreIndex = new CoreFieldIndex(indexStart,\n                                       termsStart,\n                                       packedIndexStart,\n                                       packedOffsetsStart,\n                                       numIndexTerms);\n      \n      }\n    }\n\n","sourceOld":"    public FieldIndexReader(IndexInput in, FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                            long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.in = in;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      // We still create the indexReader when indexDivisor\n      // is -1, so that StandardTermsDictReader can call\n      // isIndexTerm for each field:\n      if (indexDivisor > 0) {\n        coreIndex = new CoreFieldIndex(indexStart,\n                                       termsStart,\n                                       packedIndexStart,\n                                       packedOffsetsStart,\n                                       numIndexTerms);\n      \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.FieldIndexReader#FieldIndexReader(IndexInput,FieldInfo,int,long,long,long,long).mjava","pathOld":"/dev/null","sourceNew":"    public FieldIndexReader(IndexInput in, FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                            long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.in = in;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      // We still create the indexReader when indexDivisor\n      // is -1, so that PrefixCodedTermsReader can call\n      // isIndexTerm for each field:\n      if (indexDivisor > 0) {\n        coreIndex = new CoreFieldIndex(indexStart,\n                                       termsStart,\n                                       packedIndexStart,\n                                       packedOffsetsStart,\n                                       numIndexTerms);\n      \n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(FieldInfo,int,long,long,long,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.FieldIndexReader#FieldIndexReader(IndexInput,FieldInfo,int,long,long,long,long).mjava","sourceNew":"    public FieldIndexData(FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                          long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      // We still create the indexReader when indexDivisor\n      // is -1, so that PrefixCodedTermsReader can call\n      // isIndexTerm for each field:\n      if (indexDivisor > 0) {\n        loadTermsIndex();\n      }\n    }\n\n","sourceOld":"    public FieldIndexReader(IndexInput in, FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                            long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.in = in;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      // We still create the indexReader when indexDivisor\n      // is -1, so that PrefixCodedTermsReader can call\n      // isIndexTerm for each field:\n      if (indexDivisor > 0) {\n        coreIndex = new CoreFieldIndex(indexStart,\n                                       termsStart,\n                                       packedIndexStart,\n                                       packedOffsetsStart,\n                                       numIndexTerms);\n      \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.FieldIndexReader#FieldIndexReader(IndexInput,FieldInfo,int,long,long,long,long).mjava","sourceNew":null,"sourceOld":"    public FieldIndexReader(IndexInput in, FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                            long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.in = in;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      // We still create the indexReader when indexDivisor\n      // is -1, so that PrefixCodedTermsReader can call\n      // isIndexTerm for each field:\n      if (indexDivisor > 0) {\n        coreIndex = new CoreFieldIndex(indexStart,\n                                       termsStart,\n                                       packedIndexStart,\n                                       packedOffsetsStart,\n                                       numIndexTerms);\n      \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.FieldIndexReader#FieldIndexReader(IndexInput,FieldInfo,int,long,long,long,long).mjava","sourceNew":null,"sourceOld":"    public FieldIndexReader(IndexInput in, FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                            long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.in = in;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      // We still create the indexReader when indexDivisor\n      // is -1, so that PrefixCodedTermsReader can call\n      // isIndexTerm for each field:\n      if (indexDivisor > 0) {\n        coreIndex = new CoreFieldIndex(indexStart,\n                                       termsStart,\n                                       packedIndexStart,\n                                       packedOffsetsStart,\n                                       numIndexTerms);\n      \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["99cf56f3a650b908f7017a72f9d23940418f8a52","56da903869515527852ee21ea7ef7bfe414cd40d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99cf56f3a650b908f7017a72f9d23940418f8a52"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56da903869515527852ee21ea7ef7bfe414cd40d"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["70ad682703b8585f5d0a637efec044d57ec05efb","56da903869515527852ee21ea7ef7bfe414cd40d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}