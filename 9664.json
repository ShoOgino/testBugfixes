{"path":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#tryCleanPath(String,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#tryCleanPath(String,String).mjava","pathOld":"solr/src/test/org/apache/solr/cloud/AbstractZkTestCase#tryCleanPath(String,String).mjava","sourceNew":"  static void tryCleanPath(String zkHost, String path) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, TIMEOUT);\n    if (zkClient.exists(path)) {\n      List<String> children = zkClient.getChildren(path, null);\n      for (String string : children) {\n        tryCleanPath(zkHost, path+\"/\"+string);\n      }\n      zkClient.delete(path, -1);\n    }\n    zkClient.close();\n  }\n\n","sourceOld":"  static void tryCleanPath(String zkHost, String path) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, TIMEOUT);\n    if (zkClient.exists(path)) {\n      List<String> children = zkClient.getChildren(path, null);\n      for (String string : children) {\n        tryCleanPath(zkHost, path+\"/\"+string);\n      }\n      zkClient.delete(path, -1);\n    }\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#tryCleanPath(String,String).mjava","pathOld":"solr/src/test/org/apache/solr/cloud/AbstractZkTestCase#tryCleanPath(String,String).mjava","sourceNew":"  static void tryCleanPath(String zkHost, String path) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, TIMEOUT);\n    if (zkClient.exists(path)) {\n      List<String> children = zkClient.getChildren(path, null);\n      for (String string : children) {\n        tryCleanPath(zkHost, path+\"/\"+string);\n      }\n      zkClient.delete(path, -1);\n    }\n    zkClient.close();\n  }\n\n","sourceOld":"  static void tryCleanPath(String zkHost, String path) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, TIMEOUT);\n    if (zkClient.exists(path)) {\n      List<String> children = zkClient.getChildren(path, null);\n      for (String string : children) {\n        tryCleanPath(zkHost, path+\"/\"+string);\n      }\n      zkClient.delete(path, -1);\n    }\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#tryCleanPath(String,String).mjava","pathOld":"solr/src/test/org/apache/solr/cloud/AbstractZkTestCase#tryCleanPath(String,String).mjava","sourceNew":"  static void tryCleanPath(String zkHost, String path) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, TIMEOUT);\n    if (zkClient.exists(path)) {\n      List<String> children = zkClient.getChildren(path, null);\n      for (String string : children) {\n        tryCleanPath(zkHost, path+\"/\"+string);\n      }\n      zkClient.delete(path, -1);\n    }\n    zkClient.close();\n  }\n\n","sourceOld":"  static void tryCleanPath(String zkHost, String path) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, TIMEOUT);\n    if (zkClient.exists(path)) {\n      List<String> children = zkClient.getChildren(path, null);\n      for (String string : children) {\n        tryCleanPath(zkHost, path+\"/\"+string);\n      }\n      zkClient.delete(path, -1);\n    }\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#tryCleanPath(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#tryCleanPath(String,String).mjava","sourceNew":"  static void tryCleanPath(String zkHost, String path) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, TIMEOUT);\n    if (zkClient.exists(path, true)) {\n      List<String> children = zkClient.getChildren(path, null, true);\n      for (String string : children) {\n        tryCleanPath(zkHost, path+\"/\"+string);\n      }\n      zkClient.delete(path, -1, true);\n    }\n    zkClient.close();\n  }\n\n","sourceOld":"  static void tryCleanPath(String zkHost, String path) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, TIMEOUT);\n    if (zkClient.exists(path)) {\n      List<String> children = zkClient.getChildren(path, null);\n      for (String string : children) {\n        tryCleanPath(zkHost, path+\"/\"+string);\n      }\n      zkClient.delete(path, -1);\n    }\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#tryCleanPath(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#tryCleanPath(String,String).mjava","sourceNew":"  static void tryCleanPath(String zkHost, String path) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, TIMEOUT);\n    if (zkClient.exists(path, true)) {\n      List<String> children = zkClient.getChildren(path, null, true);\n      for (String string : children) {\n        tryCleanPath(zkHost, path+\"/\"+string);\n      }\n      zkClient.delete(path, -1, true);\n    }\n    zkClient.close();\n  }\n\n","sourceOld":"  static void tryCleanPath(String zkHost, String path) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, TIMEOUT);\n    if (zkClient.exists(path)) {\n      List<String> children = zkClient.getChildren(path, null);\n      for (String string : children) {\n        tryCleanPath(zkHost, path+\"/\"+string);\n      }\n      zkClient.delete(path, -1);\n    }\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#tryCleanPath(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#tryCleanPath(String,String).mjava","sourceNew":"  static void tryCleanPath(String zkHost, String path) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, TIMEOUT);\n    if (zkClient.exists(path, true)) {\n      List<String> children = zkClient.getChildren(path, null, true);\n      for (String string : children) {\n        tryCleanPath(zkHost, path+\"/\"+string);\n      }\n      zkClient.delete(path, -1, true);\n    }\n    zkClient.close();\n  }\n\n","sourceOld":"  static void tryCleanPath(String zkHost, String path) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, TIMEOUT);\n    if (zkClient.exists(path)) {\n      List<String> children = zkClient.getChildren(path, null);\n      for (String string : children) {\n        tryCleanPath(zkHost, path+\"/\"+string);\n      }\n      zkClient.delete(path, -1);\n    }\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33d0ed80b7b47e34ad3ff033a77544563aba3085","date":1341244632,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#tryCleanPath(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#tryCleanPath(String,String).mjava","sourceNew":"  static void tryCleanPath(String zkHost, String path) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, TIMEOUT);\n    if (zkClient.exists(path, true)) {\n      zkClient.clean(path);\n    }\n    zkClient.close();\n  }\n\n","sourceOld":"  static void tryCleanPath(String zkHost, String path) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, TIMEOUT);\n    if (zkClient.exists(path, true)) {\n      List<String> children = zkClient.getChildren(path, null, true);\n      for (String string : children) {\n        tryCleanPath(zkHost, path+\"/\"+string);\n      }\n      zkClient.delete(path, -1, true);\n    }\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#tryCleanPath(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#tryCleanPath(String,String).mjava","sourceNew":"  static void tryCleanPath(String zkHost, String path) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, TIMEOUT);\n    if (zkClient.exists(path, true)) {\n      zkClient.clean(path);\n    }\n    zkClient.close();\n  }\n\n","sourceOld":"  static void tryCleanPath(String zkHost, String path) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, TIMEOUT);\n    if (zkClient.exists(path, true)) {\n      List<String> children = zkClient.getChildren(path, null, true);\n      for (String string : children) {\n        tryCleanPath(zkHost, path+\"/\"+string);\n      }\n      zkClient.delete(path, -1, true);\n    }\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#tryCleanPath(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#tryCleanPath(String,String).mjava","sourceNew":"  static void tryCleanPath(String zkHost, String path) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, TIMEOUT);\n    if (zkClient.exists(path, true)) {\n      zkClient.clean(path);\n    }\n    zkClient.close();\n  }\n\n","sourceOld":"  static void tryCleanPath(String zkHost, String path) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, TIMEOUT);\n    if (zkClient.exists(path, true)) {\n      zkClient.clean(path);\n    }\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#tryCleanPath(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#tryCleanPath(String,String).mjava","sourceNew":"  static void tryCleanPath(String zkHost, String path) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, TIMEOUT);\n    if (zkClient.exists(path, true)) {\n      zkClient.clean(path);\n    }\n    zkClient.close();\n  }\n\n","sourceOld":"  static void tryCleanPath(String zkHost, String path) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, TIMEOUT);\n    if (zkClient.exists(path, true)) {\n      zkClient.clean(path);\n    }\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractZkTestCase#tryCleanPath(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AbstractZkTestCase#tryCleanPath(String,String).mjava","sourceNew":"  static void tryCleanPath(String zkHost, String path) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, TIMEOUT);\n    if (zkClient.exists(path, true)) {\n      zkClient.clean(path);\n    }\n    zkClient.close();\n  }\n\n","sourceOld":"  static void tryCleanPath(String zkHost, String path) throws Exception {\n    SolrZkClient zkClient = new SolrZkClient(zkHost, TIMEOUT);\n    if (zkClient.exists(path, true)) {\n      zkClient.clean(path);\n    }\n    zkClient.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33d0ed80b7b47e34ad3ff033a77544563aba3085":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["fe33227f6805edab2036cbb80645cc4e2d1fa424","2c30e4c1cee08b3b229a77991882594fe7250b66"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","33d0ed80b7b47e34ad3ff033a77544563aba3085"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["33d0ed80b7b47e34ad3ff033a77544563aba3085","2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["33d0ed80b7b47e34ad3ff033a77544563aba3085"]},"commit2Childs":{"33d0ed80b7b47e34ad3ff033a77544563aba3085":["fe33227f6805edab2036cbb80645cc4e2d1fa424","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"c26f00b574427b55127e869b935845554afde1fa":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["33d0ed80b7b47e34ad3ff033a77544563aba3085","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}