{"path":"lucene/core/src/test/org/apache/lucene/index/TestParallelReader#testIncompatibleIndexes().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelReader#testIncompatibleIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestParallelReader#testIncompatibleIndexes().mjava","sourceNew":"  public void testIncompatibleIndexes() throws IOException {\n    // two documents:\n    Directory dir1 = getDir1(random);\n\n    // one document only:\n    Directory dir2 = newDirectory();\n    IndexWriter w2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document d3 = new Document();\n\n    d3.add(newField(\"f3\", \"v1\", TextField.TYPE_STORED));\n    w2.addDocument(d3);\n    w2.close();\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)));\n    DirectoryReader ir = DirectoryReader.open(dir2);\n    try {\n      pr.add(SlowCompositeReaderWrapper.wrap(ir));\n      fail(\"didn't get exptected exception: indexes don't have same number of documents\");\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    }\n    pr.close();\n    ir.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIncompatibleIndexes() throws IOException {\n    // two documents:\n    Directory dir1 = getDir1(random);\n\n    // one document only:\n    Directory dir2 = newDirectory();\n    IndexWriter w2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document d3 = new Document();\n\n    d3.add(newField(\"f3\", \"v1\", TextField.TYPE_STORED));\n    w2.addDocument(d3);\n    w2.close();\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)));\n    DirectoryReader ir = DirectoryReader.open(dir2);\n    try {\n      pr.add(SlowCompositeReaderWrapper.wrap(ir));\n      fail(\"didn't get exptected exception: indexes don't have same number of documents\");\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    }\n    pr.close();\n    ir.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e09a3a223be07d75777515a717312813221fe58","date":1328908385,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#testIncompatibleIndexes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelReader#testIncompatibleIndexes().mjava","sourceNew":"  public void testIncompatibleIndexes() throws IOException {\n    // two documents:\n    Directory dir1 = getDir1(random);\n\n    // one document only:\n    Directory dir2 = newDirectory();\n    IndexWriter w2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document d3 = new Document();\n\n    d3.add(newField(\"f3\", \"v1\", TextField.TYPE_STORED));\n    w2.addDocument(d3);\n    w2.close();\n    \n    AtomicReader ir1 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1));\n    AtomicReader ir2 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2));\n\n    try {\n      new ParallelAtomicReader(ir1, ir2);\n      fail(\"didn't get exptected exception: indexes don't have same number of documents\");\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    }\n\n    try {\n      new ParallelAtomicReader(random.nextBoolean(),\n                               new AtomicReader[] {ir1, ir2},\n                               new AtomicReader[] {ir1, ir2});\n      fail(\"didn't get expected exception: indexes don't have same number of documents\");\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    }\n    // check RefCounts\n    assertEquals(1, ir1.getRefCount());\n    assertEquals(1, ir2.getRefCount());\n    ir1.close();\n    ir2.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIncompatibleIndexes() throws IOException {\n    // two documents:\n    Directory dir1 = getDir1(random);\n\n    // one document only:\n    Directory dir2 = newDirectory();\n    IndexWriter w2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document d3 = new Document();\n\n    d3.add(newField(\"f3\", \"v1\", TextField.TYPE_STORED));\n    w2.addDocument(d3);\n    w2.close();\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)));\n    DirectoryReader ir = DirectoryReader.open(dir2);\n    try {\n      pr.add(SlowCompositeReaderWrapper.wrap(ir));\n      fail(\"didn't get exptected exception: indexes don't have same number of documents\");\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    }\n    pr.close();\n    ir.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0","04f07771a2a7dd3a395700665ed839c3dae2def2","05fe562aa248790944d43cdd478f512572835ba0","04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e09a3a223be07d75777515a717312813221fe58","date":1328908385,"type":6,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testIncompatibleIndexes1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelReader#testIncompatibleIndexes().mjava","sourceNew":"  public void testIncompatibleIndexes1() throws IOException {\n    // two documents:\n    Directory dir1 = getDir1(random);\n\n    // one document only:\n    Directory dir2 = newDirectory();\n    IndexWriter w2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document d3 = new Document();\n\n    d3.add(newField(\"f3\", \"v1\", TextField.TYPE_STORED));\n    w2.addDocument(d3);\n    w2.close();\n    \n    DirectoryReader ir1 = DirectoryReader.open(dir1),\n        ir2 = DirectoryReader.open(dir2);\n    try {\n      new ParallelCompositeReader(ir1, ir2);\n      fail(\"didn't get expected exception: indexes don't have same number of documents\");\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    }\n    try {\n      new ParallelCompositeReader(random.nextBoolean(), ir1, ir2);\n      fail(\"didn't get expected exception: indexes don't have same number of documents\");\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    }\n    assertEquals(1, ir1.getRefCount());\n    assertEquals(1, ir2.getRefCount());\n    ir1.close();\n    ir2.close();\n    assertEquals(0, ir1.getRefCount());\n    assertEquals(0, ir2.getRefCount());\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  public void testIncompatibleIndexes() throws IOException {\n    // two documents:\n    Directory dir1 = getDir1(random);\n\n    // one document only:\n    Directory dir2 = newDirectory();\n    IndexWriter w2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document d3 = new Document();\n\n    d3.add(newField(\"f3\", \"v1\", TextField.TYPE_STORED));\n    w2.addDocument(d3);\n    w2.close();\n    \n    ParallelReader pr = new ParallelReader();\n    pr.add(SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)));\n    DirectoryReader ir = DirectoryReader.open(dir2);\n    try {\n      pr.add(SlowCompositeReaderWrapper.wrap(ir));\n      fail(\"didn't get exptected exception: indexes don't have same number of documents\");\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    }\n    pr.close();\n    ir.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0","04f07771a2a7dd3a395700665ed839c3dae2def2","05fe562aa248790944d43cdd478f512572835ba0","04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e09a3a223be07d75777515a717312813221fe58":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e09a3a223be07d75777515a717312813221fe58"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6e09a3a223be07d75777515a717312813221fe58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6e09a3a223be07d75777515a717312813221fe58":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}