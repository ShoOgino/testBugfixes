{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#withDefaultTrigger(Map[String,Object],AutoScalingConfig).mjava","commits":[{"id":"9c6c0dad4932399aec99b4818086cb1772773916","date":1520515900,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#withDefaultTrigger(Map[String,Object],AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private AutoScalingConfig withDefaultTrigger(Map<String, Object> triggerProps, AutoScalingConfig autoScalingConfig) {\n    String triggerName = (String) triggerProps.get(\"name\");\n    Map<String, AutoScalingConfig.TriggerConfig> configs = autoScalingConfig.getTriggerConfigs();\n    for (AutoScalingConfig.TriggerConfig cfg : configs.values()) {\n      if (triggerName.equals(cfg.name)) {\n        // already has this trigger\n        return autoScalingConfig;\n      }\n    }\n    // need to add\n    triggerProps.computeIfPresent(\"waitFor\", (k, v) -> (long) (cloudConfig.getAutoReplicaFailoverWaitAfterExpiration() / 1000));\n    AutoScalingConfig.TriggerConfig config = new AutoScalingConfig.TriggerConfig(triggerName, triggerProps);\n    autoScalingConfig = autoScalingConfig.withTriggerConfig(config);\n    // need to add SystemLogListener explicitly here\n    autoScalingConfig = AutoScalingHandler.withSystemLogListener(autoScalingConfig, triggerName);\n    return autoScalingConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca","date":1586138114,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#withDefaultTrigger(Map[String,Object],AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#withDefaultTrigger(Map[String,Object],AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig withDefaultTrigger(Map<String, Object> triggerProps, AutoScalingConfig autoScalingConfig) {\n    String triggerName = (String) triggerProps.get(\"name\");\n    Map<String, AutoScalingConfig.TriggerConfig> configs = autoScalingConfig.getTriggerConfigs();\n    for (AutoScalingConfig.TriggerConfig cfg : configs.values()) {\n      if (triggerName.equals(cfg.name)) {\n        // already has this trigger\n        return autoScalingConfig;\n      }\n    }\n    // need to add\n    triggerProps.computeIfPresent(\"waitFor\", (k, v) -> (long) (DEFAULT_AUTO_ADD_REPLICA_WAIT_FOR_SECONDS));\n    AutoScalingConfig.TriggerConfig config = new AutoScalingConfig.TriggerConfig(triggerName, triggerProps);\n    autoScalingConfig = autoScalingConfig.withTriggerConfig(config);\n    // need to add SystemLogListener explicitly here\n    autoScalingConfig = AutoScalingHandler.withSystemLogListener(autoScalingConfig, triggerName);\n    return autoScalingConfig;\n  }\n\n","sourceOld":"  private AutoScalingConfig withDefaultTrigger(Map<String, Object> triggerProps, AutoScalingConfig autoScalingConfig) {\n    String triggerName = (String) triggerProps.get(\"name\");\n    Map<String, AutoScalingConfig.TriggerConfig> configs = autoScalingConfig.getTriggerConfigs();\n    for (AutoScalingConfig.TriggerConfig cfg : configs.values()) {\n      if (triggerName.equals(cfg.name)) {\n        // already has this trigger\n        return autoScalingConfig;\n      }\n    }\n    // need to add\n    triggerProps.computeIfPresent(\"waitFor\", (k, v) -> (long) (cloudConfig.getAutoReplicaFailoverWaitAfterExpiration() / 1000));\n    AutoScalingConfig.TriggerConfig config = new AutoScalingConfig.TriggerConfig(triggerName, triggerProps);\n    autoScalingConfig = autoScalingConfig.withTriggerConfig(config);\n    // need to add SystemLogListener explicitly here\n    autoScalingConfig = AutoScalingHandler.withSystemLogListener(autoScalingConfig, triggerName);\n    return autoScalingConfig;\n  }\n\n","bugFix":["9c6c0dad4932399aec99b4818086cb1772773916"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread#withDefaultTrigger(Map[String,Object],AutoScalingConfig).mjava","sourceNew":null,"sourceOld":"  private AutoScalingConfig withDefaultTrigger(Map<String, Object> triggerProps, AutoScalingConfig autoScalingConfig) {\n    String triggerName = (String) triggerProps.get(\"name\");\n    Map<String, AutoScalingConfig.TriggerConfig> configs = autoScalingConfig.getTriggerConfigs();\n    for (AutoScalingConfig.TriggerConfig cfg : configs.values()) {\n      if (triggerName.equals(cfg.name)) {\n        // already has this trigger\n        return autoScalingConfig;\n      }\n    }\n    // need to add\n    triggerProps.computeIfPresent(\"waitFor\", (k, v) -> (long) (DEFAULT_AUTO_ADD_REPLICA_WAIT_FOR_SECONDS));\n    AutoScalingConfig.TriggerConfig config = new AutoScalingConfig.TriggerConfig(triggerName, triggerProps);\n    autoScalingConfig = autoScalingConfig.withTriggerConfig(config);\n    // need to add SystemLogListener explicitly here\n    autoScalingConfig = AutoScalingHandler.withSystemLogListener(autoScalingConfig, triggerName);\n    return autoScalingConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca":["9c6c0dad4932399aec99b4818086cb1772773916"],"9c6c0dad4932399aec99b4818086cb1772773916":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca":["3f504512a03d978990cbff30db0522b354e846db"],"9c6c0dad4932399aec99b4818086cb1772773916":["f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9c6c0dad4932399aec99b4818086cb1772773916"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}