{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#cloneWithCollectionAliasProperties(String,Map[String,String]).mjava","commits":[{"id":"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767","date":1520865397,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#cloneWithCollectionAliasProperties(String,Map[String,String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#cloneWithCollectionAliasMetadata(String,Map[String,String]).mjava","sourceNew":"  /**\n   * Set the values for some properties keys on a collection alias. This is done by creating a new Aliases instance\n   * with the same data as the current one but with a modification based on the parameters.\n   * <p>\n   * Note that the state in zookeeper is unaffected by this method and the change must still be persisted via\n   * {@link ZkStateReader.AliasesManager#applyModificationAndExportToZk(UnaryOperator)}\n   *\n   * @param alias the alias to update\n   * @param properties the properties to add/replace, null values in the map will remove the key.\n   * @return An immutable copy of the aliases with the new properties.\n   */\n  public Aliases cloneWithCollectionAliasProperties(String alias, Map<String,String> properties) {\n    if (!collectionAliases.containsKey(alias)) {\n      throw new IllegalArgumentException(alias + \" is not a valid alias\");\n    }\n    if (properties == null) {\n      throw new IllegalArgumentException(\"Null is not a valid properties map\");\n    }\n    Map<String,Map<String,String>> newColProperties = new LinkedHashMap<>(this.collectionAliasProperties);//clone to modify\n    Map<String, String> newMetaMap = new LinkedHashMap<>(newColProperties.getOrDefault(alias, Collections.emptyMap()));\n    for (Map.Entry<String, String> metaEntry : properties.entrySet()) {\n      if (metaEntry.getValue() != null) {\n        newMetaMap.put(metaEntry.getKey(), metaEntry.getValue());\n      } else {\n        newMetaMap.remove(metaEntry.getKey());\n      }\n    }\n    newColProperties.put(alias, Collections.unmodifiableMap(newMetaMap));\n    return new Aliases(collectionAliases, newColProperties, zNodeVersion);\n  }\n\n","sourceOld":"  /**\n   * Set the values for some metadata keys on a collection alias. This is done by creating a new Aliases instance\n   * with the same data as the current one but with a modification based on the parameters.\n   * <p>\n   * Note that the state in zookeeper is unaffected by this method and the change must still be persisted via\n   * {@link ZkStateReader.AliasesManager#applyModificationAndExportToZk(UnaryOperator)}\n   *\n   * @param alias the alias to update\n   * @param metadata the metadata to add/replace, null values in the map will remove the key.\n   * @return An immutable copy of the aliases with the new metadata.\n   */\n  public Aliases cloneWithCollectionAliasMetadata(String alias, Map<String,String> metadata) {\n    if (!collectionAliases.containsKey(alias)) {\n      throw new IllegalArgumentException(alias + \" is not a valid alias\");\n    }\n    if (metadata == null) {\n      throw new IllegalArgumentException(\"Null is not a valid metadata map\");\n    }\n    Map<String,Map<String,String>> newColMetadata = new LinkedHashMap<>(this.collectionAliasMetadata);//clone to modify\n    Map<String, String> newMetaMap = new LinkedHashMap<>(newColMetadata.getOrDefault(alias, Collections.emptyMap()));\n    for (Map.Entry<String, String> metaEntry : metadata.entrySet()) {\n      if (metaEntry.getValue() != null) {\n        newMetaMap.put(metaEntry.getKey(), metaEntry.getValue());\n      } else {\n        newMetaMap.remove(metaEntry.getKey());\n      }\n    }\n    newColMetadata.put(alias, Collections.unmodifiableMap(newMetaMap));\n    return new Aliases(collectionAliases, newColMetadata, zNodeVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce0b61a2648584b34304ab915de569c63bdb36b4","date":1562311172,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#cloneWithCollectionAliasProperties(String,Map[String,String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/Aliases#cloneWithCollectionAliasProperties(String,Map[String,String]).mjava","sourceNew":"  /**\n   * Set the values for some properties keys on a collection alias. This is done by creating a new Aliases instance\n   * with the same data as the current one but with a modification based on the parameters.\n   * <p>\n   * Note that the state in zookeeper is unaffected by this method and the change must still be persisted via\n   * {@link ZkStateReader.AliasesManager#applyModificationAndExportToZk(UnaryOperator)}\n   *\n   * @param alias the alias to update\n   * @param properties the properties to add/replace, null values in the map will remove the key.\n   * @return An immutable copy of the aliases with the new properties.\n   */\n  public Aliases cloneWithCollectionAliasProperties(String alias, Map<String,String> properties) throws SolrException {\n    if (!collectionAliases.containsKey(alias)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, alias + \" is not a valid alias\");\n    }\n    if (properties == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Null is not a valid properties map\");\n    }\n    Map<String,Map<String,String>> newColProperties = new LinkedHashMap<>(this.collectionAliasProperties);//clone to modify\n    Map<String, String> newMetaMap = new LinkedHashMap<>(newColProperties.getOrDefault(alias, Collections.emptyMap()));\n    for (Map.Entry<String, String> metaEntry : properties.entrySet()) {\n      if (metaEntry.getValue() != null) {\n        newMetaMap.put(metaEntry.getKey(), metaEntry.getValue());\n      } else {\n        newMetaMap.remove(metaEntry.getKey());\n      }\n    }\n    newColProperties.put(alias, Collections.unmodifiableMap(newMetaMap));\n    return new Aliases(collectionAliases, newColProperties, zNodeVersion);\n  }\n\n","sourceOld":"  /**\n   * Set the values for some properties keys on a collection alias. This is done by creating a new Aliases instance\n   * with the same data as the current one but with a modification based on the parameters.\n   * <p>\n   * Note that the state in zookeeper is unaffected by this method and the change must still be persisted via\n   * {@link ZkStateReader.AliasesManager#applyModificationAndExportToZk(UnaryOperator)}\n   *\n   * @param alias the alias to update\n   * @param properties the properties to add/replace, null values in the map will remove the key.\n   * @return An immutable copy of the aliases with the new properties.\n   */\n  public Aliases cloneWithCollectionAliasProperties(String alias, Map<String,String> properties) {\n    if (!collectionAliases.containsKey(alias)) {\n      throw new IllegalArgumentException(alias + \" is not a valid alias\");\n    }\n    if (properties == null) {\n      throw new IllegalArgumentException(\"Null is not a valid properties map\");\n    }\n    Map<String,Map<String,String>> newColProperties = new LinkedHashMap<>(this.collectionAliasProperties);//clone to modify\n    Map<String, String> newMetaMap = new LinkedHashMap<>(newColProperties.getOrDefault(alias, Collections.emptyMap()));\n    for (Map.Entry<String, String> metaEntry : properties.entrySet()) {\n      if (metaEntry.getValue() != null) {\n        newMetaMap.put(metaEntry.getKey(), metaEntry.getValue());\n      } else {\n        newMetaMap.remove(metaEntry.getKey());\n      }\n    }\n    newColProperties.put(alias, Collections.unmodifiableMap(newMetaMap));\n    return new Aliases(collectionAliases, newColProperties, zNodeVersion);\n  }\n\n","bugFix":["6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ce0b61a2648584b34304ab915de569c63bdb36b4":["6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ce0b61a2648584b34304ab915de569c63bdb36b4"]},"commit2Childs":{"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767":["ce0b61a2648584b34304ab915de569c63bdb36b4"],"ce0b61a2648584b34304ab915de569c63bdb36b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}