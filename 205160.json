{"path":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testOptimize().mjava","commits":[{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testOptimize().mjava","pathOld":"/dev/null","sourceNew":"  public void testOptimize() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(200);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n      Directory base = buildRandomIndex(fieldNames.toArray(new String[0]),\n          20 + random.nextInt(100),\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      writer.optimize();\n      writer.commit();\n      writer.close();\n      Set<Entry<String, Integer>> afterOptmize = globalFieldMap.entries();\n      assertEquals(entries, afterOptmize);\n      base.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testOptimize().mjava","pathOld":"/dev/null","sourceNew":"  public void testOptimize() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(200);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n      Directory base = buildRandomIndex(fieldNames.toArray(new String[0]),\n          20 + random.nextInt(100),\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      writer.optimize();\n      writer.commit();\n      writer.close();\n      Set<Entry<String, Integer>> afterOptmize = globalFieldMap.entries();\n      assertEquals(entries, afterOptmize);\n      base.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testOptimize().mjava","pathOld":"/dev/null","sourceNew":"  public void testOptimize() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(200);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n      Directory base = buildRandomIndex(fieldNames.toArray(new String[0]),\n          20 + random.nextInt(100),\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      writer.optimize();\n      writer.commit();\n      writer.close();\n      Set<Entry<String, Integer>> afterOptmize = globalFieldMap.entries();\n      assertEquals(entries, afterOptmize);\n      base.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testOptimize().mjava","sourceNew":"  public void testOptimize() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(200);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n      Directory base = buildRandomIndex(fieldNames.toArray(new String[0]),\n          20 + random.nextInt(100),\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      writer.optimize();\n      writer.commit();\n      writer.close();\n      Set<Entry<String, Integer>> afterOptmize = globalFieldMap.entries();\n      assertEquals(entries, afterOptmize);\n      base.close();\n    }\n  }\n\n","sourceOld":"  public void testOptimize() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(200);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n      Directory base = buildRandomIndex(fieldNames.toArray(new String[0]),\n          20 + random.nextInt(100),\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      writer.optimize();\n      writer.commit();\n      writer.close();\n      Set<Entry<String, Integer>> afterOptmize = globalFieldMap.entries();\n      assertEquals(entries, afterOptmize);\n      base.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testOptimize().mjava","sourceNew":"  public void testOptimize() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(200);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n      Directory base = buildRandomIndex(fieldNames.toArray(new String[0]),\n          20 + random.nextInt(100),\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      writer.optimize();\n      writer.commit();\n      writer.close();\n      Set<Entry<String, Integer>> afterOptmize = globalFieldMap.entries();\n      assertEquals(entries, afterOptmize);\n      base.close();\n    }\n  }\n\n","sourceOld":"  public void testOptimize() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(200);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n      Directory base = buildRandomIndex(fieldNames.toArray(new String[0]),\n          20 + random.nextInt(100),\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      writer.optimize();\n      writer.commit();\n      writer.close();\n      Set<Entry<String, Integer>> afterOptmize = globalFieldMap.entries();\n      assertEquals(entries, afterOptmize);\n      base.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testOptimize().mjava","sourceNew":"  public void testOptimize() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(200);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n      Directory base = buildRandomIndex(fieldNames.toArray(new String[0]),\n          20 + random.nextInt(100),\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      writer.optimize();\n      writer.commit();\n      writer.close();\n      Set<Entry<String, Integer>> afterOptmize = globalFieldMap.entries();\n      assertEquals(entries, afterOptmize);\n      base.close();\n    }\n  }\n\n","sourceOld":"  public void testOptimize() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(200);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n      Directory base = buildRandomIndex(fieldNames.toArray(new String[0]),\n          20 + random.nextInt(100),\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      writer.optimize();\n      writer.commit();\n      writer.close();\n      Set<Entry<String, Integer>> afterOptmize = globalFieldMap.entries();\n      assertEquals(entries, afterOptmize);\n      base.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testOptimize().mjava","sourceNew":"  public void testOptimize() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(200);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n      Directory base = buildRandomIndex(fieldNames.toArray(new String[0]),\n          20 + random.nextInt(100),\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      writer.optimize();\n      writer.commit();\n      writer.close();\n      Set<Entry<String, Integer>> afterOptmize = globalFieldMap.entries();\n      assertEquals(entries, afterOptmize);\n      base.close();\n    }\n  }\n\n","sourceOld":"  public void testOptimize() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(200);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n      Directory base = buildRandomIndex(fieldNames.toArray(new String[0]),\n          20 + random.nextInt(100),\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()));\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      writer.optimize();\n      writer.commit();\n      writer.close();\n      Set<Entry<String, Integer>> afterOptmize = globalFieldMap.entries();\n      assertEquals(entries, afterOptmize);\n      base.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cca56866c19997e28ef073622656669c15210540","date":1307449014,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testOptimize().mjava","sourceNew":"  public void testOptimize() throws IOException {\n    for (int i = 0; i < 2*RANDOM_MULTIPLIER; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + (TEST_NIGHTLY ? random.nextInt(200) : random.nextInt(20));\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n      Directory base = buildRandomIndex(fieldNames.toArray(new String[0]),\n          20 + random.nextInt(100),\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      writer.optimize();\n      writer.commit();\n      writer.close();\n      Set<Entry<String, Integer>> afterOptmize = globalFieldMap.entries();\n      assertEquals(entries, afterOptmize);\n      base.close();\n    }\n  }\n\n","sourceOld":"  public void testOptimize() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(200);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n      Directory base = buildRandomIndex(fieldNames.toArray(new String[0]),\n          20 + random.nextInt(100),\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      writer.optimize();\n      writer.commit();\n      writer.close();\n      Set<Entry<String, Integer>> afterOptmize = globalFieldMap.entries();\n      assertEquals(entries, afterOptmize);\n      base.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testOptimize().mjava","sourceNew":"  public void testOptimize() throws IOException {\n    for (int i = 0; i < 2*RANDOM_MULTIPLIER; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + (TEST_NIGHTLY ? random.nextInt(200) : random.nextInt(20));\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n      Directory base = buildRandomIndex(fieldNames.toArray(new String[0]),\n          20 + random.nextInt(100),\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      writer.optimize();\n      writer.commit();\n      writer.close();\n      Set<Entry<String, Integer>> afterOptmize = globalFieldMap.entries();\n      assertEquals(entries, afterOptmize);\n      base.close();\n    }\n  }\n\n","sourceOld":"  public void testOptimize() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(200);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n      Directory base = buildRandomIndex(fieldNames.toArray(new String[0]),\n          20 + random.nextInt(100),\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      writer.optimize();\n      writer.commit();\n      writer.close();\n      Set<Entry<String, Integer>> afterOptmize = globalFieldMap.entries();\n      assertEquals(entries, afterOptmize);\n      base.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testOptimize().mjava","sourceNew":"  public void testOptimize() throws IOException {\n    for (int i = 0; i < 2*RANDOM_MULTIPLIER; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + (TEST_NIGHTLY ? random.nextInt(200) : random.nextInt(20));\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n      Directory base = buildRandomIndex(fieldNames.toArray(new String[0]),\n          20 + random.nextInt(100),\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      writer.optimize();\n      writer.commit();\n      writer.close();\n      Set<Entry<String, Integer>> afterOptmize = globalFieldMap.entries();\n      assertEquals(entries, afterOptmize);\n      base.close();\n    }\n  }\n\n","sourceOld":"  public void testOptimize() throws IOException {\n    for (int i = 0; i < 2; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + random.nextInt(200);\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n      Directory base = buildRandomIndex(fieldNames.toArray(new String[0]),\n          20 + random.nextInt(100),\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      writer.optimize();\n      writer.commit();\n      writer.close();\n      Set<Entry<String, Integer>> afterOptmize = globalFieldMap.entries();\n      assertEquals(entries, afterOptmize);\n      base.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testForceMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testOptimize().mjava","sourceNew":"  public void testForceMerge() throws IOException {\n    for (int i = 0; i < 2*RANDOM_MULTIPLIER; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + (TEST_NIGHTLY ? random.nextInt(200) : random.nextInt(20));\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n      Directory base = buildRandomIndex(fieldNames.toArray(new String[0]),\n          20 + random.nextInt(100),\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      writer.forceMerge(1);\n      writer.commit();\n      writer.close();\n      Set<Entry<String, Integer>> afterOptmize = globalFieldMap.entries();\n      assertEquals(entries, afterOptmize);\n      base.close();\n    }\n  }\n\n","sourceOld":"  public void testOptimize() throws IOException {\n    for (int i = 0; i < 2*RANDOM_MULTIPLIER; i++) {\n      Set<String> fieldNames = new HashSet<String>();\n      final int numFields = 2 + (TEST_NIGHTLY ? random.nextInt(200) : random.nextInt(20));\n      for (int j = 0; j < numFields; j++) {\n        fieldNames.add(\"field_\" + j);\n      }\n      Directory base = buildRandomIndex(fieldNames.toArray(new String[0]),\n          20 + random.nextInt(100),\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      IndexWriter writer = new IndexWriter(base, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n      FieldNumberBiMap globalFieldMap = writer.segmentInfos\n          .getOrLoadGlobalFieldNumberMap(base);\n      Set<Entry<String, Integer>> entries = globalFieldMap.entries();\n      writer.optimize();\n      writer.commit();\n      writer.close();\n      Set<Entry<String, Integer>> afterOptmize = globalFieldMap.entries();\n      assertEquals(entries, afterOptmize);\n      base.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a3776dccca01c11e7046323cfad46a3b4a471233","cca56866c19997e28ef073622656669c15210540"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["cca56866c19997e28ef073622656669c15210540"],"962d04139994fce5193143ef35615499a9a96d78":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1224a4027481acce15495b03bce9b48b93b42722"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1224a4027481acce15495b03bce9b48b93b42722"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1224a4027481acce15495b03bce9b48b93b42722"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1224a4027481acce15495b03bce9b48b93b42722","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","cca56866c19997e28ef073622656669c15210540"],"cca56866c19997e28ef073622656669c15210540":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"1224a4027481acce15495b03bce9b48b93b42722":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"962d04139994fce5193143ef35615499a9a96d78":[],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cca56866c19997e28ef073622656669c15210540"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","1224a4027481acce15495b03bce9b48b93b42722"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"cca56866c19997e28ef073622656669c15210540":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d14e8d18c0e3970c20354dbeeb49da11bd587fbd","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"1224a4027481acce15495b03bce9b48b93b42722":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","962d04139994fce5193143ef35615499a9a96d78","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}