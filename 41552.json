{"path":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger#doAddDistinct(SolrInputDocument,SolrInputField,Object).mjava","commits":[{"id":"b4d3dd8938b47955be7cebf7724fa9ae6122f106","date":1520246230,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger#doAddDistinct(SolrInputDocument,SolrInputField,Object).mjava","pathOld":"/dev/null","sourceNew":"  protected void doAddDistinct(SolrInputDocument toDoc, SolrInputField sif, Object fieldVal) {\n    final String name = sif.getName();\n    SolrInputField existingField = toDoc.get(name);\n\n    SchemaField sf = schema.getField(name);\n\n    if (sf != null) {\n      Collection<Object> original = existingField != null ?\n          existingField.getValues() :\n          new ArrayList<>();\n\n      int initialSize = original.size();\n      if (fieldVal instanceof Collection) {\n        for (Object object : (Collection) fieldVal) {\n          if (!original.contains(object)) {\n            original.add(object);\n          }\n        }\n      } else {\n        Object object = sf.getType().toNativeType(fieldVal);\n        if (!original.contains(object)) {\n          original.add(object);\n        }\n      }\n\n      if (original.size() > initialSize) { // update only if more are added\n        if (original.size() == 1) { // if single value, pass the value instead of List\n          doAdd(toDoc, sif, original.toArray()[0]);\n        } else {\n          toDoc.setField(name, original);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5b5fa3584550267bf4209f334513a9d5850dd1e0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5b5fa3584550267bf4209f334513a9d5850dd1e0","date":1591795784,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger#doAddDistinct(SolrInputDocument,SolrInputField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/AtomicUpdateDocumentMerger#doAddDistinct(SolrInputDocument,SolrInputField,Object).mjava","sourceNew":"  protected void doAddDistinct(SolrInputDocument toDoc, SolrInputField sif, Object fieldVal) {\n    final String name = sif.getName();\n    SolrInputField existingField = toDoc.get(name);\n\n    // throws exception if field doesn't exist\n    SchemaField sf = schema.getField(name);\n\n    Collection<Object> original = existingField != null ?\n        existingField.getValues() :\n        new ArrayList<>();\n\n    int initialSize = original.size();\n    if (fieldVal instanceof Collection) {\n      for (Object object : (Collection) fieldVal) {\n        Object obj = sf.getType().toNativeType(object);\n        if (!original.contains(obj)) {\n          original.add(obj);\n        }\n      }\n    } else {\n      Object object = sf.getType().toNativeType(fieldVal);\n      if (!original.contains(object)) {\n        original.add(object);\n      }\n    }\n\n    if (original.size() > initialSize) { // update only if more are added\n      if (original.size() == 1) { // if single value, pass the value instead of List\n        doAdd(toDoc, sif, original.toArray()[0]);\n      } else {\n        toDoc.setField(name, original);\n      }\n    }\n  }\n\n","sourceOld":"  protected void doAddDistinct(SolrInputDocument toDoc, SolrInputField sif, Object fieldVal) {\n    final String name = sif.getName();\n    SolrInputField existingField = toDoc.get(name);\n\n    SchemaField sf = schema.getField(name);\n\n    if (sf != null) {\n      Collection<Object> original = existingField != null ?\n          existingField.getValues() :\n          new ArrayList<>();\n\n      int initialSize = original.size();\n      if (fieldVal instanceof Collection) {\n        for (Object object : (Collection) fieldVal) {\n          if (!original.contains(object)) {\n            original.add(object);\n          }\n        }\n      } else {\n        Object object = sf.getType().toNativeType(fieldVal);\n        if (!original.contains(object)) {\n          original.add(object);\n        }\n      }\n\n      if (original.size() > initialSize) { // update only if more are added\n        if (original.size() == 1) { // if single value, pass the value instead of List\n          doAdd(toDoc, sif, original.toArray()[0]);\n        } else {\n          toDoc.setField(name, original);\n        }\n      }\n    }\n  }\n\n","bugFix":["b4d3dd8938b47955be7cebf7724fa9ae6122f106"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b5fa3584550267bf4209f334513a9d5850dd1e0":["b4d3dd8938b47955be7cebf7724fa9ae6122f106"],"b4d3dd8938b47955be7cebf7724fa9ae6122f106":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b5fa3584550267bf4209f334513a9d5850dd1e0"]},"commit2Childs":{"5b5fa3584550267bf4209f334513a9d5850dd1e0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b4d3dd8938b47955be7cebf7724fa9ae6122f106":["5b5fa3584550267bf4209f334513a9d5850dd1e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4d3dd8938b47955be7cebf7724fa9ae6122f106"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}