{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeDocsWithValue(Iterable[Number],NormMap,int).mjava","commits":[{"id":"0c3fae32338d82a0710e1756793faba13dcb598b","date":1414786590,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeDocsWithValue(Iterable[Number],NormMap,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeDocsWithValue(Iterable[Number],long).mjava","sourceNew":"  private void writeDocsWithValue(final Iterable<Number> values, NormMap uniqueValues, int minOrd) throws IOException {\n    data.writeLong(uniqueValues.values[minOrd]);\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(BLOCK_SIZE);\n    \n    // write docs with value\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    int doc = 0;\n    for (Number n : values) {\n      int ord = uniqueValues.ord(n.byteValue());\n      if (ord > minOrd) {\n        writer.add(doc);\n      }\n      doc++;\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  private void writeDocsWithValue(final Iterable<Number> values, long commonValue) throws IOException {\n    data.writeLong(commonValue);\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(BLOCK_SIZE);\n    \n    // write docs with value\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    int doc = 0;\n    for (Number n : values) {\n      long v = n.longValue();\n      if (v != commonValue) {\n        writer.add(doc);\n      }\n      doc++;\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeDocsWithValue(Iterable[Number],NormMap,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeDocsWithValue(Iterable[Number],NormMap,int).mjava","sourceNew":"  private void writeDocsWithValue(final Iterable<Number> values, NormMap uniqueValues, int minOrd) throws IOException {\n    data.writeLong(uniqueValues.values[minOrd]);\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(BLOCK_SIZE);\n    \n    // write docs with value\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    int doc = 0;\n    for (Number n : values) {\n      int ord = uniqueValues.ord(n.byteValue());\n      if (ord > minOrd) {\n        writer.add(doc);\n      }\n      doc++;\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  private void writeDocsWithValue(final Iterable<Number> values, NormMap uniqueValues, int minOrd) throws IOException {\n    data.writeLong(uniqueValues.values[minOrd]);\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(BLOCK_SIZE);\n    \n    // write docs with value\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    int doc = 0;\n    for (Number n : values) {\n      int ord = uniqueValues.ord(n.byteValue());\n      if (ord > minOrd) {\n        writer.add(doc);\n      }\n      doc++;\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["0c3fae32338d82a0710e1756793faba13dcb598b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0c3fae32338d82a0710e1756793faba13dcb598b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"]},"commit2Childs":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0c3fae32338d82a0710e1756793faba13dcb598b"],"0c3fae32338d82a0710e1756793faba13dcb598b":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}