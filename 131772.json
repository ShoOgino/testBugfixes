{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","sourceNew":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    if (executor == null) {\n      return search(leafContexts, weight, after, nDocs);\n    } else {\n      final HitQueue hq = new HitQueue(nDocs, false);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopDocs> runner = new ExecutionHelper<TopDocs>(executor);\n    \n      for (int i = 0; i < leafSlices.length; i++) { // search each sub\n        runner.submit(\n                      new SearcherCallableNoSort(lock, this, leafSlices[i], weight, after, nDocs, hq));\n      }\n\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopDocs topDocs : runner) {\n        if(topDocs.totalHits != 0) {\n          totalHits += topDocs.totalHits;\n          maxScore = Math.max(maxScore, topDocs.getMaxScore());\n        }\n      }\n\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopDocs(totalHits, scoreDocs, maxScore);\n    }\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    if (executor == null) {\n      return search(leafContexts, weight, after, nDocs);\n    } else {\n      final HitQueue hq = new HitQueue(nDocs, false);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopDocs> runner = new ExecutionHelper<TopDocs>(executor);\n    \n      for (int i = 0; i < leafSlices.length; i++) { // search each sub\n        runner.submit(\n                      new SearcherCallableNoSort(lock, this, leafSlices[i], weight, after, nDocs, hq));\n      }\n\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopDocs topDocs : runner) {\n        if(topDocs.totalHits != 0) {\n          totalHits += topDocs.totalHits;\n          maxScore = Math.max(maxScore, topDocs.getMaxScore());\n        }\n      }\n\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopDocs(totalHits, scoreDocs, maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","sourceNew":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    if (executor == null) {\n      return search(leafContexts, weight, after, nDocs);\n    } else {\n      final HitQueue hq = new HitQueue(nDocs, false);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopDocs> runner = new ExecutionHelper<TopDocs>(executor);\n    \n      for (int i = 0; i < leafSlices.length; i++) { // search each sub\n        runner.submit(\n                      new SearcherCallableNoSort(lock, this, leafSlices[i], weight, after, nDocs, hq));\n      }\n\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopDocs topDocs : runner) {\n        if(topDocs.totalHits != 0) {\n          totalHits += topDocs.totalHits;\n          maxScore = Math.max(maxScore, topDocs.getMaxScore());\n        }\n      }\n\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopDocs(totalHits, scoreDocs, maxScore);\n    }\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    if (executor == null) {\n      return search(leafContexts, weight, after, nDocs);\n    } else {\n      final HitQueue hq = new HitQueue(nDocs, false);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopDocs> runner = new ExecutionHelper<TopDocs>(executor);\n    \n      for (int i = 0; i < leafSlices.length; i++) { // search each sub\n        runner.submit(\n                      new SearcherCallableNoSort(lock, this, leafSlices[i], weight, after, nDocs, hq));\n      }\n\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopDocs topDocs : runner) {\n        if(topDocs.totalHits != 0) {\n          totalHits += topDocs.totalHits;\n          maxScore = Math.max(maxScore, topDocs.getMaxScore());\n        }\n      }\n\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopDocs(totalHits, scoreDocs, maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"450d0bc37c59f2de7743066469a444243907fd75","date":1366384804,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","sourceNew":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n    \n    if (executor == null) {\n      return search(leafContexts, weight, after, nDocs);\n    } else {\n      final HitQueue hq = new HitQueue(nDocs, false);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopDocs> runner = new ExecutionHelper<TopDocs>(executor);\n    \n      for (int i = 0; i < leafSlices.length; i++) { // search each sub\n        runner.submit(\n                      new SearcherCallableNoSort(lock, this, leafSlices[i], weight, after, nDocs, hq));\n      }\n\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopDocs topDocs : runner) {\n        if(topDocs.totalHits != 0) {\n          totalHits += topDocs.totalHits;\n          maxScore = Math.max(maxScore, topDocs.getMaxScore());\n        }\n      }\n\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopDocs(totalHits, scoreDocs, maxScore);\n    }\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    if (executor == null) {\n      return search(leafContexts, weight, after, nDocs);\n    } else {\n      final HitQueue hq = new HitQueue(nDocs, false);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopDocs> runner = new ExecutionHelper<TopDocs>(executor);\n    \n      for (int i = 0; i < leafSlices.length; i++) { // search each sub\n        runner.submit(\n                      new SearcherCallableNoSort(lock, this, leafSlices[i], weight, after, nDocs, hq));\n      }\n\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopDocs topDocs : runner) {\n        if(topDocs.totalHits != 0) {\n          totalHits += topDocs.totalHits;\n          maxScore = Math.max(maxScore, topDocs.getMaxScore());\n        }\n      }\n\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopDocs(totalHits, scoreDocs, maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e87ea9fb673e8638747af83477322f07ed5a8b95","date":1374560737,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","sourceNew":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in that reader: after.doc=\"\n          + after.doc + \" limit=\" + limit);\n    }\n    nDocs = Math.min(nDocs, limit);\n    \n    if (executor == null) {\n      return search(leafContexts, weight, after, nDocs);\n    } else {\n      final HitQueue hq = new HitQueue(nDocs, false);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopDocs> runner = new ExecutionHelper<TopDocs>(executor);\n    \n      for (int i = 0; i < leafSlices.length; i++) { // search each sub\n        runner.submit(new SearcherCallableNoSort(lock, this, leafSlices[i], weight, after, nDocs, hq));\n      }\n\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopDocs topDocs : runner) {\n        if(topDocs.totalHits != 0) {\n          totalHits += topDocs.totalHits;\n          maxScore = Math.max(maxScore, topDocs.getMaxScore());\n        }\n      }\n\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopDocs(totalHits, scoreDocs, maxScore);\n    }\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n    \n    if (executor == null) {\n      return search(leafContexts, weight, after, nDocs);\n    } else {\n      final HitQueue hq = new HitQueue(nDocs, false);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopDocs> runner = new ExecutionHelper<TopDocs>(executor);\n    \n      for (int i = 0; i < leafSlices.length; i++) { // search each sub\n        runner.submit(\n                      new SearcherCallableNoSort(lock, this, leafSlices[i], weight, after, nDocs, hq));\n      }\n\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopDocs topDocs : runner) {\n        if(topDocs.totalHits != 0) {\n          totalHits += topDocs.totalHits;\n          maxScore = Math.max(maxScore, topDocs.getMaxScore());\n        }\n      }\n\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopDocs(totalHits, scoreDocs, maxScore);\n    }\n  }\n\n","bugFix":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7","6620df8541b174097b1133a4fc370adb2e570524"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","sourceNew":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in that reader: after.doc=\"\n          + after.doc + \" limit=\" + limit);\n    }\n    nDocs = Math.min(nDocs, limit);\n    \n    if (executor == null) {\n      return search(leafContexts, weight, after, nDocs);\n    } else {\n      final HitQueue hq = new HitQueue(nDocs, false);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopDocs> runner = new ExecutionHelper<TopDocs>(executor);\n    \n      for (int i = 0; i < leafSlices.length; i++) { // search each sub\n        runner.submit(new SearcherCallableNoSort(lock, this, leafSlices[i], weight, after, nDocs, hq));\n      }\n\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopDocs topDocs : runner) {\n        if(topDocs.totalHits != 0) {\n          totalHits += topDocs.totalHits;\n          maxScore = Math.max(maxScore, topDocs.getMaxScore());\n        }\n      }\n\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopDocs(totalHits, scoreDocs, maxScore);\n    }\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    nDocs = Math.min(nDocs, limit);\n    \n    if (executor == null) {\n      return search(leafContexts, weight, after, nDocs);\n    } else {\n      final HitQueue hq = new HitQueue(nDocs, false);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopDocs> runner = new ExecutionHelper<TopDocs>(executor);\n    \n      for (int i = 0; i < leafSlices.length; i++) { // search each sub\n        runner.submit(\n                      new SearcherCallableNoSort(lock, this, leafSlices[i], weight, after, nDocs, hq));\n      }\n\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopDocs topDocs : runner) {\n        if(topDocs.totalHits != 0) {\n          totalHits += topDocs.totalHits;\n          maxScore = Math.max(maxScore, topDocs.getMaxScore());\n        }\n      }\n\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopDocs(totalHits, scoreDocs, maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78522aad83283ca58fae08fd89406b65429d0229","date":1385573562,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","sourceNew":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n          + after.doc + \" limit=\" + limit);\n    }\n    nDocs = Math.min(nDocs, limit);\n    \n    if (executor == null) {\n      return search(leafContexts, weight, after, nDocs);\n    } else {\n      final HitQueue hq = new HitQueue(nDocs, false);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopDocs> runner = new ExecutionHelper<TopDocs>(executor);\n    \n      for (int i = 0; i < leafSlices.length; i++) { // search each sub\n        runner.submit(new SearcherCallableNoSort(lock, this, leafSlices[i], weight, after, nDocs, hq));\n      }\n\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopDocs topDocs : runner) {\n        if(topDocs.totalHits != 0) {\n          totalHits += topDocs.totalHits;\n          maxScore = Math.max(maxScore, topDocs.getMaxScore());\n        }\n      }\n\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopDocs(totalHits, scoreDocs, maxScore);\n    }\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in that reader: after.doc=\"\n          + after.doc + \" limit=\" + limit);\n    }\n    nDocs = Math.min(nDocs, limit);\n    \n    if (executor == null) {\n      return search(leafContexts, weight, after, nDocs);\n    } else {\n      final HitQueue hq = new HitQueue(nDocs, false);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopDocs> runner = new ExecutionHelper<TopDocs>(executor);\n    \n      for (int i = 0; i < leafSlices.length; i++) { // search each sub\n        runner.submit(new SearcherCallableNoSort(lock, this, leafSlices[i], weight, after, nDocs, hq));\n      }\n\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopDocs topDocs : runner) {\n        if(topDocs.totalHits != 0) {\n          totalHits += topDocs.totalHits;\n          maxScore = Math.max(maxScore, topDocs.getMaxScore());\n        }\n      }\n\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopDocs(totalHits, scoreDocs, maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","sourceNew":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n          + after.doc + \" limit=\" + limit);\n    }\n    nDocs = Math.min(nDocs, limit);\n    \n    if (executor == null) {\n      return search(leafContexts, weight, after, nDocs);\n    } else {\n      final HitQueue hq = new HitQueue(nDocs, false);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopDocs> runner = new ExecutionHelper<TopDocs>(executor);\n    \n      for (int i = 0; i < leafSlices.length; i++) { // search each sub\n        runner.submit(new SearcherCallableNoSort(lock, this, leafSlices[i], weight, after, nDocs, hq));\n      }\n\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopDocs topDocs : runner) {\n        if(topDocs.totalHits != 0) {\n          totalHits += topDocs.totalHits;\n          maxScore = Math.max(maxScore, topDocs.getMaxScore());\n        }\n      }\n\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopDocs(totalHits, scoreDocs, maxScore);\n    }\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in that reader: after.doc=\"\n          + after.doc + \" limit=\" + limit);\n    }\n    nDocs = Math.min(nDocs, limit);\n    \n    if (executor == null) {\n      return search(leafContexts, weight, after, nDocs);\n    } else {\n      final HitQueue hq = new HitQueue(nDocs, false);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopDocs> runner = new ExecutionHelper<TopDocs>(executor);\n    \n      for (int i = 0; i < leafSlices.length; i++) { // search each sub\n        runner.submit(new SearcherCallableNoSort(lock, this, leafSlices[i], weight, after, nDocs, hq));\n      }\n\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopDocs topDocs : runner) {\n        if(topDocs.totalHits != 0) {\n          totalHits += topDocs.totalHits;\n          maxScore = Math.max(maxScore, topDocs.getMaxScore());\n        }\n      }\n\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopDocs(totalHits, scoreDocs, maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","sourceNew":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n          + after.doc + \" limit=\" + limit);\n    }\n    nDocs = Math.min(nDocs, limit);\n    \n    if (executor == null) {\n      return search(leafContexts, weight, after, nDocs);\n    } else {\n      final HitQueue hq = new HitQueue(nDocs, false);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopDocs> runner = new ExecutionHelper<>(executor);\n    \n      for (int i = 0; i < leafSlices.length; i++) { // search each sub\n        runner.submit(new SearcherCallableNoSort(lock, this, leafSlices[i], weight, after, nDocs, hq));\n      }\n\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopDocs topDocs : runner) {\n        if(topDocs.totalHits != 0) {\n          totalHits += topDocs.totalHits;\n          maxScore = Math.max(maxScore, topDocs.getMaxScore());\n        }\n      }\n\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopDocs(totalHits, scoreDocs, maxScore);\n    }\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n          + after.doc + \" limit=\" + limit);\n    }\n    nDocs = Math.min(nDocs, limit);\n    \n    if (executor == null) {\n      return search(leafContexts, weight, after, nDocs);\n    } else {\n      final HitQueue hq = new HitQueue(nDocs, false);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopDocs> runner = new ExecutionHelper<TopDocs>(executor);\n    \n      for (int i = 0; i < leafSlices.length; i++) { // search each sub\n        runner.submit(new SearcherCallableNoSort(lock, this, leafSlices[i], weight, after, nDocs, hq));\n      }\n\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopDocs topDocs : runner) {\n        if(topDocs.totalHits != 0) {\n          totalHits += topDocs.totalHits;\n          maxScore = Math.max(maxScore, topDocs.getMaxScore());\n        }\n      }\n\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopDocs(totalHits, scoreDocs, maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"023aa7229ae194442d2c4f36a9aaea1588760416","date":1421349700,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","sourceNew":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n          + after.doc + \" limit=\" + limit);\n    }\n    nDocs = Math.min(nDocs, limit);\n    \n    if (executor == null) {\n      return search(leafContexts, weight, after, nDocs);\n    } else {\n      final List<Future<TopDocs>> topDocsFutures = new ArrayList<>(leafSlices.length);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        topDocsFutures.add(executor.submit(new SearcherCallableNoSort(this, leafSlices[i], weight, after, nDocs)));\n      }\n      final TopDocs[] topDocs = new TopDocs[leafSlices.length];\n      for (int i = 0; i < leafSlices.length; i++) {\n        try {\n          topDocs[i] = topDocsFutures.get(i).get();\n        } catch (InterruptedException e) {\n          throw new ThreadInterruptedException(e);\n        } catch (ExecutionException e) {\n          throw new RuntimeException(e);\n        }\n      }\n      return TopDocs.merge(null, nDocs, topDocs);\n    }\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n          + after.doc + \" limit=\" + limit);\n    }\n    nDocs = Math.min(nDocs, limit);\n    \n    if (executor == null) {\n      return search(leafContexts, weight, after, nDocs);\n    } else {\n      final HitQueue hq = new HitQueue(nDocs, false);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopDocs> runner = new ExecutionHelper<>(executor);\n    \n      for (int i = 0; i < leafSlices.length; i++) { // search each sub\n        runner.submit(new SearcherCallableNoSort(lock, this, leafSlices[i], weight, after, nDocs, hq));\n      }\n\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopDocs topDocs : runner) {\n        if(topDocs.totalHits != 0) {\n          totalHits += topDocs.totalHits;\n          maxScore = Math.max(maxScore, topDocs.getMaxScore());\n        }\n      }\n\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopDocs(totalHits, scoreDocs, maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","sourceNew":null,"sourceOld":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    int limit = reader.maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    if (after != null && after.doc >= limit) {\n      throw new IllegalArgumentException(\"after.doc exceeds the number of documents in the reader: after.doc=\"\n          + after.doc + \" limit=\" + limit);\n    }\n    nDocs = Math.min(nDocs, limit);\n    \n    if (executor == null) {\n      return search(leafContexts, weight, after, nDocs);\n    } else {\n      final List<Future<TopDocs>> topDocsFutures = new ArrayList<>(leafSlices.length);\n      for (int i = 0; i < leafSlices.length; i++) { // search each leaf slice\n        topDocsFutures.add(executor.submit(new SearcherCallableNoSort(this, leafSlices[i], weight, after, nDocs)));\n      }\n      final TopDocs[] topDocs = new TopDocs[leafSlices.length];\n      for (int i = 0; i < leafSlices.length; i++) {\n        try {\n          topDocs[i] = topDocsFutures.get(i).get();\n        } catch (InterruptedException e) {\n          throw new ThreadInterruptedException(e);\n        } catch (ExecutionException e) {\n          throw new RuntimeException(e);\n        }\n      }\n      return TopDocs.merge(null, nDocs, topDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fb17639909a369c1e64866842e5c213440acc17e":["023aa7229ae194442d2c4f36a9aaea1588760416"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["450d0bc37c59f2de7743066469a444243907fd75"],"78522aad83283ca58fae08fd89406b65429d0229":["e87ea9fb673e8638747af83477322f07ed5a8b95"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["e87ea9fb673e8638747af83477322f07ed5a8b95","78522aad83283ca58fae08fd89406b65429d0229"],"e87ea9fb673e8638747af83477322f07ed5a8b95":["450d0bc37c59f2de7743066469a444243907fd75"],"023aa7229ae194442d2c4f36a9aaea1588760416":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"450d0bc37c59f2de7743066469a444243907fd75":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb17639909a369c1e64866842e5c213440acc17e"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["450d0bc37c59f2de7743066469a444243907fd75"],"fb17639909a369c1e64866842e5c213440acc17e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["023aa7229ae194442d2c4f36a9aaea1588760416"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"78522aad83283ca58fae08fd89406b65429d0229":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"e87ea9fb673e8638747af83477322f07ed5a8b95":["78522aad83283ca58fae08fd89406b65429d0229","3cc728b07df73b197e6d940d27f9b08b63918f13"],"023aa7229ae194442d2c4f36a9aaea1588760416":["fb17639909a369c1e64866842e5c213440acc17e"],"450d0bc37c59f2de7743066469a444243907fd75":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","e87ea9fb673e8638747af83477322f07ed5a8b95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}