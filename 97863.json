{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#getRandomReplica(Slice,Predicate[Replica]).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#getRandomReplica(Slice,Predicate[Replica]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get a (reproducibly) random replica from a {@link Slice} matching a predicate\n   */\n  protected static Replica getRandomReplica(Slice slice, Predicate<Replica> matchPredicate) {\n    List<Replica> replicas = new ArrayList<>(slice.getReplicas());\n    if (replicas.size() == 0)\n      fail(\"Couldn't get random replica from shard as it has no replicas!\\n\" + slice.toString());\n    Collections.shuffle(replicas, random());\n    for (Replica replica : replicas) {\n      if (matchPredicate.test(replica))\n        return replica;\n    }\n    fail(\"Couldn't get random replica that matched conditions\\n\" + slice.toString());\n    return null;  // just to keep the compiler happy - fail will always throw an Exception\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase#getRandomReplica(Slice,Predicate[Replica]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get a (reproducibly) random replica from a {@link Slice} matching a predicate\n   */\n  protected static Replica getRandomReplica(Slice slice, Predicate<Replica> matchPredicate) {\n    List<Replica> replicas = new ArrayList<>(slice.getReplicas());\n    if (replicas.size() == 0)\n      fail(\"Couldn't get random replica from shard as it has no replicas!\\n\" + slice.toString());\n    Collections.shuffle(replicas, random());\n    for (Replica replica : replicas) {\n      if (matchPredicate.test(replica))\n        return replica;\n    }\n    fail(\"Couldn't get random replica that matched conditions\\n\" + slice.toString());\n    return null;  // just to keep the compiler happy - fail will always throw an Exception\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}