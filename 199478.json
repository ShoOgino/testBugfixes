{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],BytesRef,int).mjava","commits":[{"id":"0628077afea69a2955260949478afabab8e500d8","date":1413915332,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],BytesRef,int).mjava","pathOld":"/dev/null","sourceNew":"  // Pushes a frame we seek'd to\n  Lucene40SegmentTermsEnumFrame pushFrame(FST.Arc<BytesRef> arc, BytesRef frameData, int length) throws IOException {\n    scratchReader.reset(frameData.bytes, frameData.offset, frameData.length);\n    final long code = scratchReader.readVLong();\n    final long fpSeek = code >>> Lucene40BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n    final Lucene40SegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.hasTerms = (code & Lucene40BlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS) != 0;\n    f.hasTermsOrig = f.hasTerms;\n    f.isFloor = (code & Lucene40BlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR) != 0;\n    if (f.isFloor) {\n      f.setFloorData(scratchReader, frameData);\n    }\n    pushFrame(arc, fpSeek, length);\n\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6d238816bcdf9bbe4ec886226d89bd93834eb7e","date":1413925889,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],BytesRef,int).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],BytesRef,int).mjava","sourceNew":"  // Pushes a frame we seek'd to\n  Lucene40SegmentTermsEnumFrame pushFrame(FST.Arc<BytesRef> arc, BytesRef frameData, int length) throws IOException {\n    scratchReader.reset(frameData.bytes, frameData.offset, frameData.length);\n    final long code = scratchReader.readVLong();\n    final long fpSeek = code >>> Lucene40BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS;\n    final Lucene40SegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.hasTerms = (code & Lucene40BlockTreeTermsReader.OUTPUT_FLAG_HAS_TERMS) != 0;\n    f.hasTermsOrig = f.hasTerms;\n    f.isFloor = (code & Lucene40BlockTreeTermsReader.OUTPUT_FLAG_IS_FLOOR) != 0;\n    if (f.isFloor) {\n      f.setFloorData(scratchReader, frameData);\n    }\n    pushFrame(arc, fpSeek, length);\n\n    return f;\n  }\n\n","sourceOld":"  // Pushes a frame we seek'd to\n  Lucene40SegmentTermsEnumFrame pushFrame(FST.Arc<BytesRef> arc, BytesRef frameData, int length) throws IOException {\n    scratchReader.reset(frameData.bytes, frameData.offset, frameData.length);\n    final long code = scratchReader.readVLong();\n    final long fpSeek = code >>> Lucene40BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n    final Lucene40SegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.hasTerms = (code & Lucene40BlockTreeTermsWriter.OUTPUT_FLAG_HAS_TERMS) != 0;\n    f.hasTermsOrig = f.hasTerms;\n    f.isFloor = (code & Lucene40BlockTreeTermsWriter.OUTPUT_FLAG_IS_FLOOR) != 0;\n    if (f.isFloor) {\n      f.setFloorData(scratchReader, frameData);\n    }\n    pushFrame(arc, fpSeek, length);\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],BytesRef,int).mjava","pathOld":"/dev/null","sourceNew":"  // Pushes a frame we seek'd to\n  Lucene40SegmentTermsEnumFrame pushFrame(FST.Arc<BytesRef> arc, BytesRef frameData, int length) throws IOException {\n    scratchReader.reset(frameData.bytes, frameData.offset, frameData.length);\n    final long code = scratchReader.readVLong();\n    final long fpSeek = code >>> Lucene40BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS;\n    final Lucene40SegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.hasTerms = (code & Lucene40BlockTreeTermsReader.OUTPUT_FLAG_HAS_TERMS) != 0;\n    f.hasTermsOrig = f.hasTerms;\n    f.isFloor = (code & Lucene40BlockTreeTermsReader.OUTPUT_FLAG_IS_FLOOR) != 0;\n    if (f.isFloor) {\n      f.setFloorData(scratchReader, frameData);\n    }\n    pushFrame(arc, fpSeek, length);\n\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40SegmentTermsEnum#pushFrame(FST.Arc[BytesRef],BytesRef,int).mjava","sourceNew":null,"sourceOld":"  // Pushes a frame we seek'd to\n  Lucene40SegmentTermsEnumFrame pushFrame(FST.Arc<BytesRef> arc, BytesRef frameData, int length) throws IOException {\n    scratchReader.reset(frameData.bytes, frameData.offset, frameData.length);\n    final long code = scratchReader.readVLong();\n    final long fpSeek = code >>> Lucene40BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS;\n    final Lucene40SegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);\n    f.hasTerms = (code & Lucene40BlockTreeTermsReader.OUTPUT_FLAG_HAS_TERMS) != 0;\n    f.hasTermsOrig = f.hasTerms;\n    f.isFloor = (code & Lucene40BlockTreeTermsReader.OUTPUT_FLAG_IS_FLOOR) != 0;\n    if (f.isFloor) {\n      f.setFloorData(scratchReader, frameData);\n    }\n    pushFrame(arc, fpSeek, length);\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["0628077afea69a2955260949478afabab8e500d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c6d238816bcdf9bbe4ec886226d89bd93834eb7e"],"0628077afea69a2955260949478afabab8e500d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","0628077afea69a2955260949478afabab8e500d8"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"0628077afea69a2955260949478afabab8e500d8":["c6d238816bcdf9bbe4ec886226d89bd93834eb7e"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}