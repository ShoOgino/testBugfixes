{"path":"src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#convertTokensToNamedLists(List[Token],AnalysisContext).mjava","commits":[{"id":"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a","date":1240390408,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#convertTokensToNamedLists(List[Token],AnalysisContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Converts the list of Tokens to a list of NamedLists representing the tokens.\n   *\n   * @param tokens  Tokens to convert\n   * @param context The analysis context\n   *\n   * @return List of NamedLists containing the relevant information taken from the tokens\n   */\n  private List<NamedList> convertTokensToNamedLists(List<Token> tokens, AnalysisContext context) {\n    List<NamedList> tokensNamedLists = new ArrayList<NamedList>();\n\n    Collections.sort(tokens, new Comparator<Token>() {\n      public int compare(Token o1, Token o2) {\n        return o1.endOffset() - o2.endOffset();\n      }\n    });\n\n    int position = 0;\n\n    FieldType fieldType = context.getFieldType();\n\n    for (Token token : tokens) {\n      NamedList<Object> tokenNamedList = new SimpleOrderedMap<Object>();\n\n      String text = fieldType.indexedToReadable(token.term());\n      tokenNamedList.add(\"text\", text);\n      if (!text.equals(token.term())) {\n        tokenNamedList.add(\"raw_text\", token.term());\n      }\n      tokenNamedList.add(\"type\", token.type());\n      tokenNamedList.add(\"start\", token.startOffset());\n      tokenNamedList.add(\"end\", token.endOffset());\n\n      position += token.getPositionIncrement();\n      tokenNamedList.add(\"position\", position);\n\n      if (context.getTermsToMatch().contains(token.term())) {\n        tokenNamedList.add(\"match\", true);\n      }\n\n      if (token.getPayload() != null) {\n        tokenNamedList.add(\"payload\", token.getPayload());\n      }\n\n      tokensNamedLists.add(tokenNamedList);\n    }\n\n    return tokensNamedLists;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#convertTokensToNamedLists(List[Token],AnalysisContext).mjava","pathOld":"src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#convertTokensToNamedLists(List[Token],AnalysisContext).mjava","sourceNew":"  /**\n   * Converts the list of Tokens to a list of NamedLists representing the tokens.\n   *\n   * @param tokens  Tokens to convert\n   * @param context The analysis context\n   *\n   * @return List of NamedLists containing the relevant information taken from the tokens\n   */\n  private List<NamedList> convertTokensToNamedLists(List<Token> tokens, AnalysisContext context) {\n    List<NamedList> tokensNamedLists = new ArrayList<NamedList>();\n\n    Collections.sort(tokens, new Comparator<Token>() {\n      public int compare(Token o1, Token o2) {\n        return o1.endOffset() - o2.endOffset();\n      }\n    });\n\n    int position = 0;\n\n    FieldType fieldType = context.getFieldType();\n\n    for (Token token : tokens) {\n      NamedList<Object> tokenNamedList = new SimpleOrderedMap<Object>();\n\n      String text = fieldType.indexedToReadable(token.term());\n      tokenNamedList.add(\"text\", text);\n      if (!text.equals(token.term())) {\n        tokenNamedList.add(\"raw_text\", token.term());\n      }\n      tokenNamedList.add(\"type\", token.type());\n      tokenNamedList.add(\"start\", token.startOffset());\n      tokenNamedList.add(\"end\", token.endOffset());\n\n      position += token.getPositionIncrement();\n      tokenNamedList.add(\"position\", position);\n\n      if (context.getTermsToMatch().contains(token.term())) {\n        tokenNamedList.add(\"match\", true);\n      }\n\n      if (token.getPayload() != null) {\n        tokenNamedList.add(\"payload\", token.getPayload());\n      }\n\n      tokensNamedLists.add(tokenNamedList);\n    }\n\n    return tokensNamedLists;\n  }\n\n","sourceOld":"  /**\n   * Converts the list of Tokens to a list of NamedLists representing the tokens.\n   *\n   * @param tokens  Tokens to convert\n   * @param context The analysis context\n   *\n   * @return List of NamedLists containing the relevant information taken from the tokens\n   */\n  private List<NamedList> convertTokensToNamedLists(List<Token> tokens, AnalysisContext context) {\n    List<NamedList> tokensNamedLists = new ArrayList<NamedList>();\n\n    Collections.sort(tokens, new Comparator<Token>() {\n      public int compare(Token o1, Token o2) {\n        return o1.endOffset() - o2.endOffset();\n      }\n    });\n\n    int position = 0;\n\n    FieldType fieldType = context.getFieldType();\n\n    for (Token token : tokens) {\n      NamedList<Object> tokenNamedList = new SimpleOrderedMap<Object>();\n\n      String text = fieldType.indexedToReadable(token.term());\n      tokenNamedList.add(\"text\", text);\n      if (!text.equals(token.term())) {\n        tokenNamedList.add(\"raw_text\", token.term());\n      }\n      tokenNamedList.add(\"type\", token.type());\n      tokenNamedList.add(\"start\", token.startOffset());\n      tokenNamedList.add(\"end\", token.endOffset());\n\n      position += token.getPositionIncrement();\n      tokenNamedList.add(\"position\", position);\n\n      if (context.getTermsToMatch().contains(token.term())) {\n        tokenNamedList.add(\"match\", true);\n      }\n\n      if (token.getPayload() != null) {\n        tokenNamedList.add(\"payload\", token.getPayload());\n      }\n\n      tokensNamedLists.add(tokenNamedList);\n    }\n\n    return tokensNamedLists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}