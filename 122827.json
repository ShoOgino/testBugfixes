{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#disconnected().mjava","commits":[{"id":"b85d2aa862c6ff17c9930e80591ab781c0b87579","date":1388263753,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#disconnected().mjava","pathOld":"/dev/null","sourceNew":"  private synchronized void disconnected() {\n    if (disconnectedTimer != null) {\n      disconnectedTimer.cancel();\n      disconnectedTimer = null;\n    }\n    \n    disconnectedTimer = new Timer();\n    disconnectedTimer.schedule(new TimerTask() {\n      \n      @Override\n      public void run() {\n        synchronized (ConnectionManager.this) {\n          likelyExpired = true;\n        }\n      }\n      \n    }, (long) (client.getZkClientTimeout() * 0.90));\n    connected = false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ae839c0b155e35fa4049376c3d3a1d842a68111"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"86e8c48d3ed7e6692dc720dd2a091dae4b02ffc6","date":1388276041,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#disconnected().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#disconnected().mjava","sourceNew":"  private synchronized void disconnected() {\n    if (disconnectedTimer != null) {\n      disconnectedTimer.cancel();\n      disconnectedTimer = null;\n    }\n    if (!isClosed) {\n      disconnectedTimer = new Timer();\n      disconnectedTimer.schedule(new TimerTask() {\n        \n        @Override\n        public void run() {\n          synchronized (ConnectionManager.this) {\n            likelyExpired = true;\n          }\n        }\n        \n      }, (long) (client.getZkClientTimeout() * 0.90));\n    }\n    connected = false;\n  }\n\n","sourceOld":"  private synchronized void disconnected() {\n    if (disconnectedTimer != null) {\n      disconnectedTimer.cancel();\n      disconnectedTimer = null;\n    }\n    \n    disconnectedTimer = new Timer();\n    disconnectedTimer.schedule(new TimerTask() {\n      \n      @Override\n      public void run() {\n        synchronized (ConnectionManager.this) {\n          likelyExpired = true;\n        }\n      }\n      \n    }, (long) (client.getZkClientTimeout() * 0.90));\n    connected = false;\n  }\n\n","bugFix":null,"bugIntro":["5ae839c0b155e35fa4049376c3d3a1d842a68111","bbf36bc4ffcb059ec73feefb2c36de5da1739c36","5be2ff5f99976897aa35a6ce84f61b0a2b45d91f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5be2ff5f99976897aa35a6ce84f61b0a2b45d91f","date":1389198917,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#disconnected().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#disconnected().mjava","sourceNew":"  private synchronized void disconnected() {\n    if (disconnectedTimer != null) {\n      disconnectedTimer.cancel();\n      disconnectedTimer = null;\n    }\n    if (!isClosed) {\n      disconnectedTimer = new Timer();\n      disconnectedTimer.schedule(new TimerTask() {\n        \n        @Override\n        public void run() {\n          likelyExpired = true;\n        }\n        \n      }, (long) (client.getZkClientTimeout() * 0.90));\n    }\n    connected = false;\n    notifyAll();\n  }\n\n","sourceOld":"  private synchronized void disconnected() {\n    if (disconnectedTimer != null) {\n      disconnectedTimer.cancel();\n      disconnectedTimer = null;\n    }\n    if (!isClosed) {\n      disconnectedTimer = new Timer();\n      disconnectedTimer.schedule(new TimerTask() {\n        \n        @Override\n        public void run() {\n          synchronized (ConnectionManager.this) {\n            likelyExpired = true;\n          }\n        }\n        \n      }, (long) (client.getZkClientTimeout() * 0.90));\n    }\n    connected = false;\n  }\n\n","bugFix":["86e8c48d3ed7e6692dc720dd2a091dae4b02ffc6"],"bugIntro":["5ae839c0b155e35fa4049376c3d3a1d842a68111"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e4d41e2817c7bff2b4b50c1357ea9972a1ca2535","date":1389364936,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#disconnected().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#disconnected().mjava","sourceNew":"  private synchronized void disconnected() {\n    if (disconnectedTimer != null) {\n      disconnectedTimer.cancel();\n      disconnectedTimer = null;\n    }\n    if (!isClosed) {\n      disconnectedTimer = new Timer(true);\n      disconnectedTimer.schedule(new TimerTask() {\n        \n        @Override\n        public void run() {\n          likelyExpired = true;\n        }\n        \n      }, (long) (client.getZkClientTimeout() * 0.90));\n    }\n    connected = false;\n    notifyAll();\n  }\n\n","sourceOld":"  private synchronized void disconnected() {\n    if (disconnectedTimer != null) {\n      disconnectedTimer.cancel();\n      disconnectedTimer = null;\n    }\n    if (!isClosed) {\n      disconnectedTimer = new Timer();\n      disconnectedTimer.schedule(new TimerTask() {\n        \n        @Override\n        public void run() {\n          likelyExpired = true;\n        }\n        \n      }, (long) (client.getZkClientTimeout() * 0.90));\n    }\n    connected = false;\n    notifyAll();\n  }\n\n","bugFix":null,"bugIntro":["bbf36bc4ffcb059ec73feefb2c36de5da1739c36"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2268a8d4d852ad26db83c7d71b2f58790bb036cd","date":1390166458,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#disconnected().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#disconnected().mjava","sourceNew":"  private synchronized void disconnected() {\n    if (disconnectedTimer != null) {\n      disconnectedTimer.cancel();\n      disconnectedTimer = null;\n    }\n    if (!isClosed) {\n      disconnectedTimer = new Timer(true);\n      disconnectedTimer.schedule(new TimerTask() {\n        \n        @Override\n        public void run() {\n          likelyExpired = true;\n        }\n        \n      }, (long) (client.getZkClientTimeout() * 0.90));\n      if (isClosed) {\n        // we might have closed after getting by isClosed\n        // and before starting the new timer\n        disconnectedTimer.cancel();\n        disconnectedTimer = null;\n      }\n    }\n    connected = false;\n    notifyAll();\n  }\n\n","sourceOld":"  private synchronized void disconnected() {\n    if (disconnectedTimer != null) {\n      disconnectedTimer.cancel();\n      disconnectedTimer = null;\n    }\n    if (!isClosed) {\n      disconnectedTimer = new Timer(true);\n      disconnectedTimer.schedule(new TimerTask() {\n        \n        @Override\n        public void run() {\n          likelyExpired = true;\n        }\n        \n      }, (long) (client.getZkClientTimeout() * 0.90));\n    }\n    connected = false;\n    notifyAll();\n  }\n\n","bugFix":null,"bugIntro":["5ae839c0b155e35fa4049376c3d3a1d842a68111"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ec245241c2474ed40f97e19635afbe89daf55c2","date":1390256744,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#disconnected().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#disconnected().mjava","sourceNew":"  private synchronized void disconnected() {\n    cancelTimer();\n    if (!isClosed) {\n      disconnectedTimer = new Timer(true);\n      disconnectedTimer.schedule(new TimerTask() {\n        \n        @Override\n        public void run() {\n          likelyExpired = true;\n        }\n        \n      }, (long) (client.getZkClientTimeout() * 0.90));\n      if (isClosed) {\n        // we might have closed after getting by isClosed\n        // and before starting the new timer\n        cancelTimer();\n      }\n    }\n    connected = false;\n    notifyAll();\n  }\n\n","sourceOld":"  private synchronized void disconnected() {\n    if (disconnectedTimer != null) {\n      disconnectedTimer.cancel();\n      disconnectedTimer = null;\n    }\n    if (!isClosed) {\n      disconnectedTimer = new Timer(true);\n      disconnectedTimer.schedule(new TimerTask() {\n        \n        @Override\n        public void run() {\n          likelyExpired = true;\n        }\n        \n      }, (long) (client.getZkClientTimeout() * 0.90));\n      if (isClosed) {\n        // we might have closed after getting by isClosed\n        // and before starting the new timer\n        disconnectedTimer.cancel();\n        disconnectedTimer = null;\n      }\n    }\n    connected = false;\n    notifyAll();\n  }\n\n","bugFix":null,"bugIntro":["5ae839c0b155e35fa4049376c3d3a1d842a68111","bbf36bc4ffcb059ec73feefb2c36de5da1739c36"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bbf36bc4ffcb059ec73feefb2c36de5da1739c36","date":1390747915,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#disconnected().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#disconnected().mjava","sourceNew":"  private synchronized void disconnected() {\n    cancelTimer();\n    if (!isClosed) {\n      Timer newDcTimer = new Timer(true);\n      newDcTimer.schedule(new TimerTask() {\n        \n        @Override\n        public void run() {\n          likelyExpired = true;\n        }\n        \n      }, (long) (client.getZkClientTimeout() * 0.90));\n      if (isClosed) {\n        // we might have closed after getting by isClosed\n        // and before starting the new timer\n        newDcTimer.cancel();\n      } else {\n        disconnectedTimer = newDcTimer;\n        if (isClosed) {\n          // now deal with we may have been closed after getting\n          // by isClosed but before setting disconnectedTimer -\n          // if close happens after isClosed check this time, it \n          // will handle stopping the timer\n          cancelTimer();\n        }\n      }\n    }\n    connected = false;\n    notifyAll();\n  }\n\n","sourceOld":"  private synchronized void disconnected() {\n    cancelTimer();\n    if (!isClosed) {\n      disconnectedTimer = new Timer(true);\n      disconnectedTimer.schedule(new TimerTask() {\n        \n        @Override\n        public void run() {\n          likelyExpired = true;\n        }\n        \n      }, (long) (client.getZkClientTimeout() * 0.90));\n      if (isClosed) {\n        // we might have closed after getting by isClosed\n        // and before starting the new timer\n        cancelTimer();\n      }\n    }\n    connected = false;\n    notifyAll();\n  }\n\n","bugFix":["e4d41e2817c7bff2b4b50c1357ea9972a1ca2535","2ec245241c2474ed40f97e19635afbe89daf55c2","86e8c48d3ed7e6692dc720dd2a091dae4b02ffc6"],"bugIntro":["5ae839c0b155e35fa4049376c3d3a1d842a68111"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ae839c0b155e35fa4049376c3d3a1d842a68111","date":1392392160,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#disconnected().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#disconnected().mjava","sourceNew":"  private synchronized void disconnected() {\n    connected = false;\n    // record the time we expired unless we are already likely expired\n    if (!likelyExpiredState.isLikelyExpired(0)) {\n      likelyExpiredState = new LikelyExpiredState(LikelyExpiredState.StateType.TRACKING_TIME, System.currentTimeMillis());\n    }\n    notifyAll();\n  }\n\n","sourceOld":"  private synchronized void disconnected() {\n    cancelTimer();\n    if (!isClosed) {\n      Timer newDcTimer = new Timer(true);\n      newDcTimer.schedule(new TimerTask() {\n        \n        @Override\n        public void run() {\n          likelyExpired = true;\n        }\n        \n      }, (long) (client.getZkClientTimeout() * 0.90));\n      if (isClosed) {\n        // we might have closed after getting by isClosed\n        // and before starting the new timer\n        newDcTimer.cancel();\n      } else {\n        disconnectedTimer = newDcTimer;\n        if (isClosed) {\n          // now deal with we may have been closed after getting\n          // by isClosed but before setting disconnectedTimer -\n          // if close happens after isClosed check this time, it \n          // will handle stopping the timer\n          cancelTimer();\n        }\n      }\n    }\n    connected = false;\n    notifyAll();\n  }\n\n","bugFix":["5be2ff5f99976897aa35a6ce84f61b0a2b45d91f","b85d2aa862c6ff17c9930e80591ab781c0b87579","2268a8d4d852ad26db83c7d71b2f58790bb036cd","bbf36bc4ffcb059ec73feefb2c36de5da1739c36","2ec245241c2474ed40f97e19635afbe89daf55c2","86e8c48d3ed7e6692dc720dd2a091dae4b02ffc6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd5bc858b8426d40bbe90b94120ead37c77d7954","date":1393812525,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#disconnected().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ConnectionManager#disconnected().mjava","sourceNew":"  private synchronized void disconnected() {\n    connected = false;\n    // record the time we expired unless we are already likely expired\n    if (!likelyExpiredState.isLikelyExpired(0)) {\n      likelyExpiredState = new LikelyExpiredState(LikelyExpiredState.StateType.TRACKING_TIME, System.nanoTime());\n    }\n    notifyAll();\n  }\n\n","sourceOld":"  private synchronized void disconnected() {\n    connected = false;\n    // record the time we expired unless we are already likely expired\n    if (!likelyExpiredState.isLikelyExpired(0)) {\n      likelyExpiredState = new LikelyExpiredState(LikelyExpiredState.StateType.TRACKING_TIME, System.currentTimeMillis());\n    }\n    notifyAll();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ae839c0b155e35fa4049376c3d3a1d842a68111":["bbf36bc4ffcb059ec73feefb2c36de5da1739c36"],"bbf36bc4ffcb059ec73feefb2c36de5da1739c36":["2ec245241c2474ed40f97e19635afbe89daf55c2"],"e4d41e2817c7bff2b4b50c1357ea9972a1ca2535":["5be2ff5f99976897aa35a6ce84f61b0a2b45d91f"],"2ec245241c2474ed40f97e19635afbe89daf55c2":["2268a8d4d852ad26db83c7d71b2f58790bb036cd"],"5be2ff5f99976897aa35a6ce84f61b0a2b45d91f":["86e8c48d3ed7e6692dc720dd2a091dae4b02ffc6"],"86e8c48d3ed7e6692dc720dd2a091dae4b02ffc6":["b85d2aa862c6ff17c9930e80591ab781c0b87579"],"b85d2aa862c6ff17c9930e80591ab781c0b87579":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2268a8d4d852ad26db83c7d71b2f58790bb036cd":["e4d41e2817c7bff2b4b50c1357ea9972a1ca2535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd5bc858b8426d40bbe90b94120ead37c77d7954"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["5ae839c0b155e35fa4049376c3d3a1d842a68111"]},"commit2Childs":{"5ae839c0b155e35fa4049376c3d3a1d842a68111":["fd5bc858b8426d40bbe90b94120ead37c77d7954"],"bbf36bc4ffcb059ec73feefb2c36de5da1739c36":["5ae839c0b155e35fa4049376c3d3a1d842a68111"],"e4d41e2817c7bff2b4b50c1357ea9972a1ca2535":["2268a8d4d852ad26db83c7d71b2f58790bb036cd"],"2ec245241c2474ed40f97e19635afbe89daf55c2":["bbf36bc4ffcb059ec73feefb2c36de5da1739c36"],"5be2ff5f99976897aa35a6ce84f61b0a2b45d91f":["e4d41e2817c7bff2b4b50c1357ea9972a1ca2535"],"86e8c48d3ed7e6692dc720dd2a091dae4b02ffc6":["5be2ff5f99976897aa35a6ce84f61b0a2b45d91f"],"b85d2aa862c6ff17c9930e80591ab781c0b87579":["86e8c48d3ed7e6692dc720dd2a091dae4b02ffc6"],"2268a8d4d852ad26db83c7d71b2f58790bb036cd":["2ec245241c2474ed40f97e19635afbe89daf55c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b85d2aa862c6ff17c9930e80591ab781c0b87579"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}