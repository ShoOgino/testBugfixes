{"path":"solr/core/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","sourceNew":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n    String template_root = request.getParams().get(\"v.base_dir\");\n    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n    if (template_root != null) {\n      baseDir = new File(template_root);\n    }\n    engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    // TODO: Externalize Velocity properties\n    engine.setProperty(VelocityEngine.RESOURCE_LOADER, \"params,file,solr\");\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","sourceOld":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n    String template_root = request.getParams().get(\"v.base_dir\");\n    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n    if (template_root != null) {\n      baseDir = new File(template_root);\n    }\n    engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    // TODO: Externalize Velocity properties\n    engine.setProperty(VelocityEngine.RESOURCE_LOADER, \"params,file,solr\");\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","sourceNew":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n    String template_root = request.getParams().get(\"v.base_dir\");\n    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n    if (template_root != null) {\n      baseDir = new File(template_root);\n    }\n    engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    // TODO: Externalize Velocity properties\n    engine.setProperty(VelocityEngine.RESOURCE_LOADER, \"params,file,solr\");\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","sourceOld":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n    String template_root = request.getParams().get(\"v.base_dir\");\n    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n    if (template_root != null) {\n      baseDir = new File(template_root);\n    }\n    engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    // TODO: Externalize Velocity properties\n    engine.setProperty(VelocityEngine.RESOURCE_LOADER, \"params,file,solr\");\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","sourceNew":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n    String template_root = request.getParams().get(\"v.base_dir\");\n    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n    if (template_root != null) {\n      baseDir = new File(template_root);\n    }\n    engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    // TODO: Externalize Velocity properties\n    engine.setProperty(VelocityEngine.RESOURCE_LOADER, \"params,file,solr\");\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","sourceOld":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n    String template_root = request.getParams().get(\"v.base_dir\");\n    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n    if (template_root != null) {\n      baseDir = new File(template_root);\n    }\n    engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    // TODO: Externalize Velocity properties\n    engine.setProperty(VelocityEngine.RESOURCE_LOADER, \"params,file,solr\");\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71946974c05b5dc4d3201f8abf4ecd2609bba400","date":1319655558,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/VelocityResponseWriter#getEngine(SolrQueryRequest).mjava","sourceNew":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n    String template_root = request.getParams().get(\"v.base_dir\");\n    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n    if (template_root != null) {\n      baseDir = new File(template_root);\n    }\n    engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    // TODO: Externalize Velocity properties\n    engine.setProperty(VelocityEngine.RESOURCE_LOADER, \"params,file,solr\");\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","sourceOld":"  private VelocityEngine getEngine(SolrQueryRequest request) {\n    VelocityEngine engine = new VelocityEngine();\n    String template_root = request.getParams().get(\"v.base_dir\");\n    File baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n    if (template_root != null) {\n      baseDir = new File(template_root);\n    }\n    engine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n    engine.setProperty(\"params.resource.loader.instance\", new SolrParamResourceLoader(request));\n    SolrVelocityResourceLoader resourceLoader =\n        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());\n    engine.setProperty(\"solr.resource.loader.instance\", resourceLoader);\n\n    // TODO: Externalize Velocity properties\n    engine.setProperty(VelocityEngine.RESOURCE_LOADER, \"params,file,solr\");\n    String propFile = request.getParams().get(\"v.properties\");\n    try {\n      if (propFile == null)\n        engine.init();\n      else {\n        InputStream is = null;\n        try {\n          is = resourceLoader.getResourceStream(propFile);\n          Properties props = new Properties();\n          props.load(is);\n          engine.init(props);\n        }\n        finally {\n          if (is != null) is.close();\n        }\n      }\n    }\n    catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    return engine;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71946974c05b5dc4d3201f8abf4ecd2609bba400":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71946974c05b5dc4d3201f8abf4ecd2609bba400"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["71946974c05b5dc4d3201f8abf4ecd2609bba400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"71946974c05b5dc4d3201f8abf4ecd2609bba400":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}