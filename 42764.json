{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","commits":[{"id":"1786be6a11f9cf5e48ce84869d1bb71e9c02f966","date":1448381196,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","pathOld":"/dev/null","sourceNew":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafBlockFPs.length) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);\n          docBlockUpto = 0;\n          for(int dim=0;dim<bkd.numDims;dim++) {\n            int prefix = state.in.readVInt();\n            state.commonPrefixLengths[dim] = prefix;\n            if (prefix > 0) {\n              state.in.readBytes(state.scratchPackedValue, dim*bkd.bytesPerDim, prefix);\n            }\n          }\n\n          blockID++;\n        }\n\n        int oldDocID = state.scratchDocIDs[docBlockUpto++];\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n        for(int dim=0;dim<bkd.numDims;dim++) {\n          int prefix = state.commonPrefixLengths[dim];\n          state.in.readBytes(state.scratchPackedValue, dim*bkd.bytesPerDim + prefix, bkd.bytesPerDim - prefix);\n        }\n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          return true;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d53f98721d7cda12df9fd4b2e8e2c235be9ac494","date":1450448699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","sourceNew":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafBlockFPs.length) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          for(int dim=0;dim<bkd.numDims;dim++) {\n            int prefix = state.in.readVInt();\n            state.commonPrefixLengths[dim] = prefix;\n            if (prefix > 0) {\n              state.in.readBytes(state.scratchPackedValue, dim*bkd.bytesPerDim, prefix);\n            }\n          }\n\n          blockID++;\n        }\n\n        int oldDocID = state.scratchDocIDs[docBlockUpto++];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n        for(int dim=0;dim<bkd.numDims;dim++) {\n          int prefix = state.commonPrefixLengths[dim];\n          state.in.readBytes(state.scratchPackedValue, dim*bkd.bytesPerDim + prefix, bkd.bytesPerDim - prefix);\n        }\n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          return true;\n        }\n      }\n    }\n\n","sourceOld":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafBlockFPs.length) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);\n          docBlockUpto = 0;\n          for(int dim=0;dim<bkd.numDims;dim++) {\n            int prefix = state.in.readVInt();\n            state.commonPrefixLengths[dim] = prefix;\n            if (prefix > 0) {\n              state.in.readBytes(state.scratchPackedValue, dim*bkd.bytesPerDim, prefix);\n            }\n          }\n\n          blockID++;\n        }\n\n        int oldDocID = state.scratchDocIDs[docBlockUpto++];\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n        for(int dim=0;dim<bkd.numDims;dim++) {\n          int prefix = state.commonPrefixLengths[dim];\n          state.in.readBytes(state.scratchPackedValue, dim*bkd.bytesPerDim + prefix, bkd.bytesPerDim - prefix);\n        }\n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          return true;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6","date":1468339076,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","sourceNew":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafBlockFPs.length) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          bkd.visitDocValues(state.commonPrefixLengths, state.scratchPackedValue, state.in, state.scratchDocIDs, docsInBlock, new IntersectVisitor() {\n            int i = 0;\n\n            @Override\n            public void visit(int docID) throws IOException {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void visit(int docID, byte[] packedValue) throws IOException {\n              assert docID == state.scratchDocIDs[i];\n              System.arraycopy(packedValue, 0, packedValues, i * bkd.packedBytesLength, bkd.packedBytesLength);\n              i++;\n            }\n\n            @Override\n            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n              throw new UnsupportedOperationException();\n            }\n\n          });\n\n          blockID++;\n        }\n\n        final int index = docBlockUpto++;\n        int oldDocID = state.scratchDocIDs[index];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n        \n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          System.arraycopy(packedValues, index * bkd.packedBytesLength, state.scratchPackedValue, 0, bkd.packedBytesLength);\n          return true;\n        }\n      }\n    }\n\n","sourceOld":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafBlockFPs.length) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          for(int dim=0;dim<bkd.numDims;dim++) {\n            int prefix = state.in.readVInt();\n            state.commonPrefixLengths[dim] = prefix;\n            if (prefix > 0) {\n              state.in.readBytes(state.scratchPackedValue, dim*bkd.bytesPerDim, prefix);\n            }\n          }\n\n          blockID++;\n        }\n\n        int oldDocID = state.scratchDocIDs[docBlockUpto++];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n        for(int dim=0;dim<bkd.numDims;dim++) {\n          int prefix = state.commonPrefixLengths[dim];\n          state.in.readBytes(state.scratchPackedValue, dim*bkd.bytesPerDim + prefix, bkd.bytesPerDim - prefix);\n        }\n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          return true;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","sourceNew":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafBlockFPs.length) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          bkd.visitDocValues(state.commonPrefixLengths, state.scratchPackedValue, state.in, state.scratchDocIDs, docsInBlock, new IntersectVisitor() {\n            int i = 0;\n\n            @Override\n            public void visit(int docID) throws IOException {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void visit(int docID, byte[] packedValue) throws IOException {\n              assert docID == state.scratchDocIDs[i];\n              System.arraycopy(packedValue, 0, packedValues, i * bkd.packedBytesLength, bkd.packedBytesLength);\n              i++;\n            }\n\n            @Override\n            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n              throw new UnsupportedOperationException();\n            }\n\n          });\n\n          blockID++;\n        }\n\n        final int index = docBlockUpto++;\n        int oldDocID = state.scratchDocIDs[index];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n\n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          System.arraycopy(packedValues, index * bkd.packedBytesLength, state.scratchPackedValue, 0, bkd.packedBytesLength);\n          return true;\n        }\n      }\n    }\n\n","sourceOld":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafBlockFPs.length) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          bkd.visitDocValues(state.commonPrefixLengths, state.scratchPackedValue, state.in, state.scratchDocIDs, docsInBlock, new IntersectVisitor() {\n            int i = 0;\n\n            @Override\n            public void visit(int docID) throws IOException {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void visit(int docID, byte[] packedValue) throws IOException {\n              assert docID == state.scratchDocIDs[i];\n              System.arraycopy(packedValue, 0, packedValues, i * bkd.packedBytesLength, bkd.packedBytesLength);\n              i++;\n            }\n\n            @Override\n            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n              throw new UnsupportedOperationException();\n            }\n\n          });\n\n          blockID++;\n        }\n\n        final int index = docBlockUpto++;\n        int oldDocID = state.scratchDocIDs[index];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n        \n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          System.arraycopy(packedValues, index * bkd.packedBytesLength, state.scratchPackedValue, 0, bkd.packedBytesLength);\n          return true;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","sourceNew":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafBlockFPs.length) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          bkd.visitDocValues(state.commonPrefixLengths, state.scratchPackedValue, state.in, state.scratchDocIDs, docsInBlock, new IntersectVisitor() {\n            int i = 0;\n\n            @Override\n            public void visit(int docID) throws IOException {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void visit(int docID, byte[] packedValue) throws IOException {\n              assert docID == state.scratchDocIDs[i];\n              System.arraycopy(packedValue, 0, packedValues, i * bkd.packedBytesLength, bkd.packedBytesLength);\n              i++;\n            }\n\n            @Override\n            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n              throw new UnsupportedOperationException();\n            }\n\n          });\n\n          blockID++;\n        }\n\n        final int index = docBlockUpto++;\n        int oldDocID = state.scratchDocIDs[index];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n\n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          System.arraycopy(packedValues, index * bkd.packedBytesLength, state.scratchPackedValue, 0, bkd.packedBytesLength);\n          return true;\n        }\n      }\n    }\n\n","sourceOld":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafBlockFPs.length) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          bkd.visitDocValues(state.commonPrefixLengths, state.scratchPackedValue, state.in, state.scratchDocIDs, docsInBlock, new IntersectVisitor() {\n            int i = 0;\n\n            @Override\n            public void visit(int docID) throws IOException {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void visit(int docID, byte[] packedValue) throws IOException {\n              assert docID == state.scratchDocIDs[i];\n              System.arraycopy(packedValue, 0, packedValues, i * bkd.packedBytesLength, bkd.packedBytesLength);\n              i++;\n            }\n\n            @Override\n            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n              throw new UnsupportedOperationException();\n            }\n\n          });\n\n          blockID++;\n        }\n\n        final int index = docBlockUpto++;\n        int oldDocID = state.scratchDocIDs[index];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n        \n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          System.arraycopy(packedValues, index * bkd.packedBytesLength, state.scratchPackedValue, 0, bkd.packedBytesLength);\n          return true;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","sourceNew":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafBlockFPs.length) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          bkd.visitDocValues(state.commonPrefixLengths, state.scratchPackedValue, state.in, state.scratchDocIDs, docsInBlock, new IntersectVisitor() {\n            int i = 0;\n\n            @Override\n            public void visit(int docID) throws IOException {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void visit(int docID, byte[] packedValue) throws IOException {\n              assert docID == state.scratchDocIDs[i];\n              System.arraycopy(packedValue, 0, packedValues, i * bkd.packedBytesLength, bkd.packedBytesLength);\n              i++;\n            }\n\n            @Override\n            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n              throw new UnsupportedOperationException();\n            }\n\n          });\n\n          blockID++;\n        }\n\n        final int index = docBlockUpto++;\n        int oldDocID = state.scratchDocIDs[index];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n\n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          System.arraycopy(packedValues, index * bkd.packedBytesLength, state.scratchPackedValue, 0, bkd.packedBytesLength);\n          return true;\n        }\n      }\n    }\n\n","sourceOld":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafBlockFPs.length) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          for(int dim=0;dim<bkd.numDims;dim++) {\n            int prefix = state.in.readVInt();\n            state.commonPrefixLengths[dim] = prefix;\n            if (prefix > 0) {\n              state.in.readBytes(state.scratchPackedValue, dim*bkd.bytesPerDim, prefix);\n            }\n          }\n\n          blockID++;\n        }\n\n        int oldDocID = state.scratchDocIDs[docBlockUpto++];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n        for(int dim=0;dim<bkd.numDims;dim++) {\n          int prefix = state.commonPrefixLengths[dim];\n          state.in.readBytes(state.scratchPackedValue, dim*bkd.bytesPerDim + prefix, bkd.bytesPerDim - prefix);\n        }\n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          return true;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","sourceNew":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafNodeOffset) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          bkd.visitDocValues(state.commonPrefixLengths, state.scratchPackedValue, state.in, state.scratchDocIDs, docsInBlock, new IntersectVisitor() {\n            int i = 0;\n\n            @Override\n            public void visit(int docID) throws IOException {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void visit(int docID, byte[] packedValue) throws IOException {\n              assert docID == state.scratchDocIDs[i];\n              System.arraycopy(packedValue, 0, packedValues, i * bkd.packedBytesLength, bkd.packedBytesLength);\n              i++;\n            }\n\n            @Override\n            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n              throw new UnsupportedOperationException();\n            }\n\n          });\n\n          blockID++;\n        }\n\n        final int index = docBlockUpto++;\n        int oldDocID = state.scratchDocIDs[index];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n\n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          System.arraycopy(packedValues, index * bkd.packedBytesLength, state.scratchPackedValue, 0, bkd.packedBytesLength);\n          return true;\n        }\n      }\n    }\n\n","sourceOld":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafBlockFPs.length) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          bkd.visitDocValues(state.commonPrefixLengths, state.scratchPackedValue, state.in, state.scratchDocIDs, docsInBlock, new IntersectVisitor() {\n            int i = 0;\n\n            @Override\n            public void visit(int docID) throws IOException {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void visit(int docID, byte[] packedValue) throws IOException {\n              assert docID == state.scratchDocIDs[i];\n              System.arraycopy(packedValue, 0, packedValues, i * bkd.packedBytesLength, bkd.packedBytesLength);\n              i++;\n            }\n\n            @Override\n            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n              throw new UnsupportedOperationException();\n            }\n\n          });\n\n          blockID++;\n        }\n\n        final int index = docBlockUpto++;\n        int oldDocID = state.scratchDocIDs[index];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n\n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          System.arraycopy(packedValues, index * bkd.packedBytesLength, state.scratchPackedValue, 0, bkd.packedBytesLength);\n          return true;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","sourceNew":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafNodeOffset) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          bkd.visitDocValues(state.commonPrefixLengths, state.scratchPackedValue, state.in, state.scratchDocIDs, docsInBlock, new IntersectVisitor() {\n            int i = 0;\n\n            @Override\n            public void visit(int docID) throws IOException {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void visit(int docID, byte[] packedValue) throws IOException {\n              assert docID == state.scratchDocIDs[i];\n              System.arraycopy(packedValue, 0, packedValues, i * bkd.packedBytesLength, bkd.packedBytesLength);\n              i++;\n            }\n\n            @Override\n            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n              throw new UnsupportedOperationException();\n            }\n\n          });\n\n          blockID++;\n        }\n\n        final int index = docBlockUpto++;\n        int oldDocID = state.scratchDocIDs[index];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n\n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          System.arraycopy(packedValues, index * bkd.packedBytesLength, state.scratchPackedValue, 0, bkd.packedBytesLength);\n          return true;\n        }\n      }\n    }\n\n","sourceOld":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafBlockFPs.length) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          bkd.visitDocValues(state.commonPrefixLengths, state.scratchPackedValue, state.in, state.scratchDocIDs, docsInBlock, new IntersectVisitor() {\n            int i = 0;\n\n            @Override\n            public void visit(int docID) throws IOException {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void visit(int docID, byte[] packedValue) throws IOException {\n              assert docID == state.scratchDocIDs[i];\n              System.arraycopy(packedValue, 0, packedValues, i * bkd.packedBytesLength, bkd.packedBytesLength);\n              i++;\n            }\n\n            @Override\n            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n              throw new UnsupportedOperationException();\n            }\n\n          });\n\n          blockID++;\n        }\n\n        final int index = docBlockUpto++;\n        int oldDocID = state.scratchDocIDs[index];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n\n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          System.arraycopy(packedValues, index * bkd.packedBytesLength, state.scratchPackedValue, 0, bkd.packedBytesLength);\n          return true;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d774afea15a18cc375fae2ffaa8319935d0a7b2a","date":1536414150,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","sourceNew":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafNodeOffset) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          bkd.visitDocValues(state.commonPrefixLengths, state.scratchPackedValue1, state.scratchPackedValue2, state.in, state.scratchDocIDs, docsInBlock, new IntersectVisitor() {\n            int i = 0;\n\n            @Override\n            public void visit(int docID) {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void visit(int docID, byte[] packedValue) {\n              assert docID == state.scratchDocIDs[i];\n              System.arraycopy(packedValue, 0, packedValues, i * bkd.packedBytesLength, bkd.packedBytesLength);\n              i++;\n            }\n\n            @Override\n            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n              return Relation.CELL_CROSSES_QUERY;\n            }\n\n          });\n\n          blockID++;\n        }\n\n        final int index = docBlockUpto++;\n        int oldDocID = state.scratchDocIDs[index];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n\n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          System.arraycopy(packedValues, index * bkd.packedBytesLength, state.scratchPackedValue1, 0, bkd.packedBytesLength);\n          return true;\n        }\n      }\n    }\n\n","sourceOld":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafNodeOffset) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          bkd.visitDocValues(state.commonPrefixLengths, state.scratchPackedValue, state.in, state.scratchDocIDs, docsInBlock, new IntersectVisitor() {\n            int i = 0;\n\n            @Override\n            public void visit(int docID) throws IOException {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void visit(int docID, byte[] packedValue) throws IOException {\n              assert docID == state.scratchDocIDs[i];\n              System.arraycopy(packedValue, 0, packedValues, i * bkd.packedBytesLength, bkd.packedBytesLength);\n              i++;\n            }\n\n            @Override\n            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n              throw new UnsupportedOperationException();\n            }\n\n          });\n\n          blockID++;\n        }\n\n        final int index = docBlockUpto++;\n        int oldDocID = state.scratchDocIDs[index];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n\n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          System.arraycopy(packedValues, index * bkd.packedBytesLength, state.scratchPackedValue, 0, bkd.packedBytesLength);\n          return true;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","sourceNew":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafNodeOffset) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          bkd.visitDocValues(state.commonPrefixLengths, state.scratchDataPackedValue, state.scratchMinIndexPackedValue, state.scratchMaxIndexPackedValue, state.in, state.scratchDocIDs, docsInBlock, new IntersectVisitor() {\n            int i = 0;\n\n            @Override\n            public void visit(int docID) {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void visit(int docID, byte[] packedValue) {\n              assert docID == state.scratchDocIDs[i];\n              System.arraycopy(packedValue, 0, packedValues, i * bkd.packedBytesLength, bkd.packedBytesLength);\n              i++;\n            }\n\n            @Override\n            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n              return Relation.CELL_CROSSES_QUERY;\n            }\n\n          });\n\n          blockID++;\n        }\n\n        final int index = docBlockUpto++;\n        int oldDocID = state.scratchDocIDs[index];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n\n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          System.arraycopy(packedValues, index * bkd.packedBytesLength, state.scratchDataPackedValue, 0, bkd.packedBytesLength);\n          return true;\n        }\n      }\n    }\n\n","sourceOld":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafNodeOffset) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          bkd.visitDocValues(state.commonPrefixLengths, state.scratchPackedValue1, state.scratchPackedValue2, state.in, state.scratchDocIDs, docsInBlock, new IntersectVisitor() {\n            int i = 0;\n\n            @Override\n            public void visit(int docID) {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void visit(int docID, byte[] packedValue) {\n              assert docID == state.scratchDocIDs[i];\n              System.arraycopy(packedValue, 0, packedValues, i * bkd.packedBytesLength, bkd.packedBytesLength);\n              i++;\n            }\n\n            @Override\n            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n              return Relation.CELL_CROSSES_QUERY;\n            }\n\n          });\n\n          blockID++;\n        }\n\n        final int index = docBlockUpto++;\n        int oldDocID = state.scratchDocIDs[index];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n\n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          System.arraycopy(packedValues, index * bkd.packedBytesLength, state.scratchPackedValue1, 0, bkd.packedBytesLength);\n          return true;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a14a9a6131884330f34844dabc1ece206ceaea9","date":1561954503,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","sourceNew":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafNodeOffset) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchIterator);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          bkd.visitDocValues(state.commonPrefixLengths, state.scratchDataPackedValue, state.scratchMinIndexPackedValue, state.scratchMaxIndexPackedValue, state.in, state.scratchIterator, docsInBlock, new IntersectVisitor() {\n            int i = 0;\n\n            @Override\n            public void visit(int docID) {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void visit(int docID, byte[] packedValue) {\n              assert docID == state.scratchIterator.docIDs[i];\n              System.arraycopy(packedValue, 0, packedValues, i * bkd.packedBytesLength, bkd.packedBytesLength);\n              i++;\n            }\n\n            @Override\n            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n              return Relation.CELL_CROSSES_QUERY;\n            }\n\n          });\n\n          blockID++;\n        }\n\n        final int index = docBlockUpto++;\n        int oldDocID = state.scratchIterator.docIDs[index];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n\n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          System.arraycopy(packedValues, index * bkd.packedBytesLength, state.scratchDataPackedValue, 0, bkd.packedBytesLength);\n          return true;\n        }\n      }\n    }\n\n","sourceOld":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafNodeOffset) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchDocIDs);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          bkd.visitDocValues(state.commonPrefixLengths, state.scratchDataPackedValue, state.scratchMinIndexPackedValue, state.scratchMaxIndexPackedValue, state.in, state.scratchDocIDs, docsInBlock, new IntersectVisitor() {\n            int i = 0;\n\n            @Override\n            public void visit(int docID) {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void visit(int docID, byte[] packedValue) {\n              assert docID == state.scratchDocIDs[i];\n              System.arraycopy(packedValue, 0, packedValues, i * bkd.packedBytesLength, bkd.packedBytesLength);\n              i++;\n            }\n\n            @Override\n            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n              return Relation.CELL_CROSSES_QUERY;\n            }\n\n          });\n\n          blockID++;\n        }\n\n        final int index = docBlockUpto++;\n        int oldDocID = state.scratchDocIDs[index];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n\n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          System.arraycopy(packedValues, index * bkd.packedBytesLength, state.scratchDataPackedValue, 0, bkd.packedBytesLength);\n          return true;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.MergeReader#next().mjava","sourceNew":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafNodeOffset) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchIterator);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          bkd.visitDocValues(state.commonPrefixLengths, state.scratchDataPackedValue, state.scratchMinIndexPackedValue, state.scratchMaxIndexPackedValue, state.in, state.scratchIterator, docsInBlock, new IntersectVisitor() {\n            int i = 0;\n\n            @Override\n            public void visit(int docID) {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void visit(int docID, byte[] packedValue) {\n              assert docID == state.scratchIterator.docIDs[i];\n              System.arraycopy(packedValue, 0, packedValues, i * bkd.config.packedBytesLength, bkd.config.packedBytesLength);\n              i++;\n            }\n\n            @Override\n            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n              return Relation.CELL_CROSSES_QUERY;\n            }\n\n          });\n\n          blockID++;\n        }\n\n        final int index = docBlockUpto++;\n        int oldDocID = state.scratchIterator.docIDs[index];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n\n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          System.arraycopy(packedValues, index * bkd.config.packedBytesLength, state.scratchDataPackedValue, 0, bkd.config.packedBytesLength);\n          return true;\n        }\n      }\n    }\n\n","sourceOld":"    public boolean next() throws IOException {\n      //System.out.println(\"MR.next this=\" + this);\n      while (true) {\n        if (docBlockUpto == docsInBlock) {\n          if (blockID == bkd.leafNodeOffset) {\n            //System.out.println(\"  done!\");\n            return false;\n          }\n          //System.out.println(\"  new block @ fp=\" + state.in.getFilePointer());\n          docsInBlock = bkd.readDocIDs(state.in, state.in.getFilePointer(), state.scratchIterator);\n          assert docsInBlock > 0;\n          docBlockUpto = 0;\n          bkd.visitDocValues(state.commonPrefixLengths, state.scratchDataPackedValue, state.scratchMinIndexPackedValue, state.scratchMaxIndexPackedValue, state.in, state.scratchIterator, docsInBlock, new IntersectVisitor() {\n            int i = 0;\n\n            @Override\n            public void visit(int docID) {\n              throw new UnsupportedOperationException();\n            }\n\n            @Override\n            public void visit(int docID, byte[] packedValue) {\n              assert docID == state.scratchIterator.docIDs[i];\n              System.arraycopy(packedValue, 0, packedValues, i * bkd.packedBytesLength, bkd.packedBytesLength);\n              i++;\n            }\n\n            @Override\n            public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n              return Relation.CELL_CROSSES_QUERY;\n            }\n\n          });\n\n          blockID++;\n        }\n\n        final int index = docBlockUpto++;\n        int oldDocID = state.scratchIterator.docIDs[index];\n\n        int mappedDocID;\n        if (docMap == null) {\n          mappedDocID = oldDocID;\n        } else {\n          mappedDocID = docMap.get(oldDocID);\n        }\n\n        if (mappedDocID != -1) {\n          // Not deleted!\n          docID = mappedDocID;\n          System.arraycopy(packedValues, index * bkd.packedBytesLength, state.scratchDataPackedValue, 0, bkd.packedBytesLength);\n          return true;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["8a14a9a6131884330f34844dabc1ece206ceaea9"],"f6652c943595e92c187ee904c382863013eae28f":["d774afea15a18cc375fae2ffaa8319935d0a7b2a"],"d774afea15a18cc375fae2ffaa8319935d0a7b2a":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d53f98721d7cda12df9fd4b2e8e2c235be9ac494","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6":["d53f98721d7cda12df9fd4b2e8e2c235be9ac494"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a14a9a6131884330f34844dabc1ece206ceaea9":["f6652c943595e92c187ee904c382863013eae28f"],"d53f98721d7cda12df9fd4b2e8e2c235be9ac494":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["d53f98721d7cda12df9fd4b2e8e2c235be9ac494"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["8a14a9a6131884330f34844dabc1ece206ceaea9"],"d774afea15a18cc375fae2ffaa8319935d0a7b2a":["f6652c943595e92c187ee904c382863013eae28f"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9fc0d60683b47b5d922124c31f57c8b34734f9e6","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["d774afea15a18cc375fae2ffaa8319935d0a7b2a","9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"8a14a9a6131884330f34844dabc1ece206ceaea9":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"d53f98721d7cda12df9fd4b2e8e2c235be9ac494":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3ca40baa99f9578eb8408ee5b9177f7ffe6f65d6"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}