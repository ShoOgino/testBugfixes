{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#beforeTest().mjava","commits":[{"id":"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a","date":1524514741,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#beforeTest().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    cluster.deleteAllCollections();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    timeSource.sleep(5000);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n    listenerEvents = new HashMap<>();\n    waitForSeconds = 3 + random().nextInt(5);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0921a3414432a896e242b56e81736020946fe960","date":1548182831,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    cluster.deleteAllCollections();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    \n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents = new HashMap<>();\n    listenerEventLatch = new CountDownLatch(0);\n    \n    waitForSeconds = 3 + random().nextInt(5);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    cluster.deleteAllCollections();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    timeSource.sleep(5000);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n    listenerEvents = new HashMap<>();\n    waitForSeconds = 3 + random().nextInt(5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":3,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    cluster.deleteAllCollections();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    \n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents = new HashMap<>();\n    listenerEventLatch = new CountDownLatch(0);\n    \n    waitForSeconds = 3 + random().nextInt(5);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    cluster.deleteAllCollections();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    timeSource.sleep(5000);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n\n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n    listenerEvents = new HashMap<>();\n    waitForSeconds = 3 + random().nextInt(5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    cluster.deleteAllCollections();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    if (log.isInfoEnabled()) {\n      log.info(\"{} reset, new znode version {}\", SOLR_AUTOSCALING_CONF_PATH, stat.getVersion());\n    }\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    \n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents = new HashMap<>();\n    listenerEventLatch = new CountDownLatch(0);\n    \n    waitForSeconds = 3 + random().nextInt(5);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    cluster.deleteAllCollections();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    log.info(SOLR_AUTOSCALING_CONF_PATH + \" reset, new znode version {}\", stat.getVersion());\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    \n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents = new HashMap<>();\n    listenerEventLatch = new CountDownLatch(0);\n    \n    waitForSeconds = 3 + random().nextInt(5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SearchRateTriggerIntegrationTest#beforeTest().mjava","sourceNew":null,"sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    cluster.deleteAllCollections();\n    // clear any persisted auto scaling configuration\n    Stat stat = zkClient().setData(SOLR_AUTOSCALING_CONF_PATH, Utils.toJSON(new ZkNodeProps()), true);\n    if (log.isInfoEnabled()) {\n      log.info(\"{} reset, new znode version {}\", SOLR_AUTOSCALING_CONF_PATH, stat.getVersion());\n    }\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_EVENTS_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH);\n    deleteChildrenRecursively(ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH);\n    \n    finished = new CountDownLatch(1);\n    started = new CountDownLatch(1);\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents = new HashMap<>();\n    listenerEventLatch = new CountDownLatch(0);\n    \n    waitForSeconds = 3 + random().nextInt(5);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["0921a3414432a896e242b56e81736020946fe960"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0921a3414432a896e242b56e81736020946fe960":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a","0921a3414432a896e242b56e81736020946fe960"]},"commit2Childs":{"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["0921a3414432a896e242b56e81736020946fe960","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["3f504512a03d978990cbff30db0522b354e846db"],"0921a3414432a896e242b56e81736020946fe960":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}