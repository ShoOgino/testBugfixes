{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","sourceNew":"  // load and publish a new CollectionInfo\n  private synchronized void updateCloudState(boolean immediate, final boolean onlyLiveNodes) throws KeeperException, InterruptedException,\n      IOException {\n\n    // TODO: - possibly: incremental update rather than reread everything\n    \n    // build immutable CloudInfo\n    \n    if(immediate) {\n      if(!onlyLiveNodes) {\n        log.info(\"Updating cloud state from ZooKeeper... \");\n      } else {\n        log.info(\"Updating live nodes from ZooKeeper... \");\n      }\n      CloudState cloudState;\n      cloudState = CloudState.buildCloudState(zkClient, this.cloudState, onlyLiveNodes);\n      // update volatile\n      this.cloudState = cloudState;\n    } else {\n      if(cloudStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      cloudStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cloud state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            cloudStateUpdateScheduled = false;\n            CloudState cloudState;\n            try {\n              cloudState = CloudState.buildCloudState(zkClient,\n                  ZkStateReader.this.cloudState, onlyLiveNodes);\n            } catch (KeeperException e) {\n              if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (IOException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            }\n            // update volatile\n            ZkStateReader.this.cloudState = cloudState;\n          }\n        }\n      }, CLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n\n  }\n\n","sourceOld":"  // load and publish a new CollectionInfo\n  private synchronized void updateCloudState(boolean immediate, final boolean onlyLiveNodes) throws KeeperException, InterruptedException,\n      IOException {\n\n    // TODO: - possibly: incremental update rather than reread everything\n    \n    // build immutable CloudInfo\n    \n    if(immediate) {\n      if(!onlyLiveNodes) {\n        log.info(\"Updating cloud state from ZooKeeper... \");\n      } else {\n        log.info(\"Updating live nodes from ZooKeeper... \");\n      }\n      CloudState cloudState;\n      cloudState = CloudState.buildCloudState(zkClient, this.cloudState, onlyLiveNodes);\n      // update volatile\n      this.cloudState = cloudState;\n    } else {\n      if(cloudStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      cloudStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cloud state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            cloudStateUpdateScheduled = false;\n            CloudState cloudState;\n            try {\n              cloudState = CloudState.buildCloudState(zkClient,\n                  ZkStateReader.this.cloudState, onlyLiveNodes);\n            } catch (KeeperException e) {\n              if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (IOException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            }\n            // update volatile\n            ZkStateReader.this.cloudState = cloudState;\n          }\n        }\n      }, CLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","sourceNew":"  // load and publish a new CollectionInfo\n  private synchronized void updateCloudState(boolean immediate, final boolean onlyLiveNodes) throws KeeperException, InterruptedException,\n      IOException {\n\n    // TODO: - possibly: incremental update rather than reread everything\n    \n    // build immutable CloudInfo\n    \n    if(immediate) {\n      if(!onlyLiveNodes) {\n        log.info(\"Updating cloud state from ZooKeeper... \");\n      } else {\n        log.info(\"Updating live nodes from ZooKeeper... \");\n      }\n      CloudState cloudState;\n      cloudState = CloudState.buildCloudState(zkClient, this.cloudState, onlyLiveNodes);\n      // update volatile\n      this.cloudState = cloudState;\n    } else {\n      if(cloudStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      cloudStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cloud state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            cloudStateUpdateScheduled = false;\n            CloudState cloudState;\n            try {\n              cloudState = CloudState.buildCloudState(zkClient,\n                  ZkStateReader.this.cloudState, onlyLiveNodes);\n            } catch (KeeperException e) {\n              if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (IOException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            }\n            // update volatile\n            ZkStateReader.this.cloudState = cloudState;\n          }\n        }\n      }, CLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n\n  }\n\n","sourceOld":"  // load and publish a new CollectionInfo\n  private synchronized void updateCloudState(boolean immediate, final boolean onlyLiveNodes) throws KeeperException, InterruptedException,\n      IOException {\n\n    // TODO: - possibly: incremental update rather than reread everything\n    \n    // build immutable CloudInfo\n    \n    if(immediate) {\n      if(!onlyLiveNodes) {\n        log.info(\"Updating cloud state from ZooKeeper... \");\n      } else {\n        log.info(\"Updating live nodes from ZooKeeper... \");\n      }\n      CloudState cloudState;\n      cloudState = CloudState.buildCloudState(zkClient, this.cloudState, onlyLiveNodes);\n      // update volatile\n      this.cloudState = cloudState;\n    } else {\n      if(cloudStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      cloudStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cloud state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            cloudStateUpdateScheduled = false;\n            CloudState cloudState;\n            try {\n              cloudState = CloudState.buildCloudState(zkClient,\n                  ZkStateReader.this.cloudState, onlyLiveNodes);\n            } catch (KeeperException e) {\n              if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (IOException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            }\n            // update volatile\n            ZkStateReader.this.cloudState = cloudState;\n          }\n        }\n      }, CLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","sourceNew":"  // load and publish a new CollectionInfo\n  private synchronized void updateCloudState(boolean immediate, final boolean onlyLiveNodes) throws KeeperException, InterruptedException,\n      IOException {\n\n    // TODO: - possibly: incremental update rather than reread everything\n    \n    // build immutable CloudInfo\n    \n    if(immediate) {\n      if(!onlyLiveNodes) {\n        log.info(\"Updating cloud state from ZooKeeper... \");\n      } else {\n        log.info(\"Updating live nodes from ZooKeeper... \");\n      }\n      CloudState cloudState;\n      cloudState = CloudState.buildCloudState(zkClient, this.cloudState, onlyLiveNodes);\n      // update volatile\n      this.cloudState = cloudState;\n    } else {\n      if(cloudStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      cloudStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cloud state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            cloudStateUpdateScheduled = false;\n            CloudState cloudState;\n            try {\n              cloudState = CloudState.buildCloudState(zkClient,\n                  ZkStateReader.this.cloudState, onlyLiveNodes);\n            } catch (KeeperException e) {\n              if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (IOException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            }\n            // update volatile\n            ZkStateReader.this.cloudState = cloudState;\n          }\n        }\n      }, CLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n\n  }\n\n","sourceOld":"  // load and publish a new CollectionInfo\n  private synchronized void updateCloudState(boolean immediate, final boolean onlyLiveNodes) throws KeeperException, InterruptedException,\n      IOException {\n\n    // TODO: - possibly: incremental update rather than reread everything\n    \n    // build immutable CloudInfo\n    \n    if(immediate) {\n      if(!onlyLiveNodes) {\n        log.info(\"Updating cloud state from ZooKeeper... \");\n      } else {\n        log.info(\"Updating live nodes from ZooKeeper... \");\n      }\n      CloudState cloudState;\n      cloudState = CloudState.buildCloudState(zkClient, this.cloudState, onlyLiveNodes);\n      // update volatile\n      this.cloudState = cloudState;\n    } else {\n      if(cloudStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      cloudStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cloud state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            cloudStateUpdateScheduled = false;\n            CloudState cloudState;\n            try {\n              cloudState = CloudState.buildCloudState(zkClient,\n                  ZkStateReader.this.cloudState, onlyLiveNodes);\n            } catch (KeeperException e) {\n              if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (IOException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            }\n            // update volatile\n            ZkStateReader.this.cloudState = cloudState;\n          }\n        }\n      }, CLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c12159f094951abca20de13adfd11224da456e1","date":1317314664,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","sourceNew":"  // load and publish a new CollectionInfo\n  private synchronized void updateCloudState(boolean immediate, final boolean onlyLiveNodes) throws KeeperException, InterruptedException,\n      IOException {\n    \n    // build immutable CloudInfo\n    \n    if(immediate) {\n      if(!onlyLiveNodes) {\n        log.info(\"Updating cloud state from ZooKeeper... \");\n      } else {\n        log.info(\"Updating live nodes from ZooKeeper... \");\n      }\n      CloudState cloudState;\n      cloudState = CloudState.buildCloudState(zkClient, this.cloudState, onlyLiveNodes);\n      // update volatile\n      this.cloudState = cloudState;\n    } else {\n      if(cloudStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      cloudStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cloud state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            cloudStateUpdateScheduled = false;\n            CloudState cloudState;\n            try {\n              cloudState = CloudState.buildCloudState(zkClient,\n                  ZkStateReader.this.cloudState, onlyLiveNodes);\n            } catch (KeeperException e) {\n              if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (IOException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            }\n            // update volatile\n            ZkStateReader.this.cloudState = cloudState;\n          }\n        }\n      }, CLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n\n  }\n\n","sourceOld":"  // load and publish a new CollectionInfo\n  private synchronized void updateCloudState(boolean immediate, final boolean onlyLiveNodes) throws KeeperException, InterruptedException,\n      IOException {\n\n    // TODO: - possibly: incremental update rather than reread everything\n    \n    // build immutable CloudInfo\n    \n    if(immediate) {\n      if(!onlyLiveNodes) {\n        log.info(\"Updating cloud state from ZooKeeper... \");\n      } else {\n        log.info(\"Updating live nodes from ZooKeeper... \");\n      }\n      CloudState cloudState;\n      cloudState = CloudState.buildCloudState(zkClient, this.cloudState, onlyLiveNodes);\n      // update volatile\n      this.cloudState = cloudState;\n    } else {\n      if(cloudStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      cloudStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cloud state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            cloudStateUpdateScheduled = false;\n            CloudState cloudState;\n            try {\n              cloudState = CloudState.buildCloudState(zkClient,\n                  ZkStateReader.this.cloudState, onlyLiveNodes);\n            } catch (KeeperException e) {\n              if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (IOException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            }\n            // update volatile\n            ZkStateReader.this.cloudState = cloudState;\n          }\n        }\n      }, CLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","sourceNew":"  // load and publish a new CollectionInfo\n  private synchronized void updateCloudState(boolean immediate,\n      final boolean onlyLiveNodes) throws KeeperException,\n      InterruptedException {\n    log.info(\"Manual update of cluster state initiated\");\n    // build immutable CloudInfo\n    \n    if (immediate) {\n      CloudState clusterState;\n      synchronized (getUpdateLock()) {\n      List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE, null, true);\n      Set<String> liveNodesSet = new HashSet<String>();\n      liveNodesSet.addAll(liveNodes);\n      \n        if (!onlyLiveNodes) {\n          log.info(\"Updating cloud state from ZooKeeper... \");\n          \n          clusterState = CloudState.load(zkClient, liveNodesSet);\n        } else {\n          log.info(\"Updating live nodes from ZooKeeper... \");\n          clusterState = new CloudState(liveNodesSet,\n              ZkStateReader.this.cloudState.getCollectionStates());\n        }\n      }\n\n      this.cloudState = clusterState;\n    } else {\n      if (cloudStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      cloudStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cluster state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            cloudStateUpdateScheduled = false;\n            CloudState clusterState;\n            try {\n              List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE,\n                  null, true);\n              Set<String> liveNodesSet = new HashSet<String>();\n              liveNodesSet.addAll(liveNodes);\n              \n              if (!onlyLiveNodes) {\n                log.info(\"Updating cloud state from ZooKeeper... \");\n                \n                clusterState = CloudState.load(zkClient, liveNodesSet);\n              } else {\n                log.info(\"Updating live nodes from ZooKeeper... \");\n                clusterState = new CloudState(liveNodesSet, ZkStateReader.this.cloudState.getCollectionStates());\n              }\n              \n              ZkStateReader.this.cloudState = clusterState;\n              \n            } catch (KeeperException e) {\n              if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                  || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } \n            // update volatile\n            ZkStateReader.this.cloudState = cloudState;\n          }\n        }\n      }, SOLRCLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n    \n  }\n\n","sourceOld":"  // load and publish a new CollectionInfo\n  private synchronized void updateCloudState(boolean immediate, final boolean onlyLiveNodes) throws KeeperException, InterruptedException,\n      IOException {\n    \n    // build immutable CloudInfo\n    \n    if(immediate) {\n      if(!onlyLiveNodes) {\n        log.info(\"Updating cloud state from ZooKeeper... \");\n      } else {\n        log.info(\"Updating live nodes from ZooKeeper... \");\n      }\n      CloudState cloudState;\n      cloudState = CloudState.buildCloudState(zkClient, this.cloudState, onlyLiveNodes);\n      // update volatile\n      this.cloudState = cloudState;\n    } else {\n      if(cloudStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      cloudStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cloud state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            cloudStateUpdateScheduled = false;\n            CloudState cloudState;\n            try {\n              cloudState = CloudState.buildCloudState(zkClient,\n                  ZkStateReader.this.cloudState, onlyLiveNodes);\n            } catch (KeeperException e) {\n              if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (IOException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            }\n            // update volatile\n            ZkStateReader.this.cloudState = cloudState;\n          }\n        }\n      }, CLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["1ce872f8af1c62041fc7720f70eee3d4c97de84e","1ce872f8af1c62041fc7720f70eee3d4c97de84e","1525b4dfbc0d413b8d7247da232009778e624836","1525b4dfbc0d413b8d7247da232009778e624836","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","sourceNew":"  // load and publish a new CollectionInfo\n  private synchronized void updateCloudState(boolean immediate,\n      final boolean onlyLiveNodes) throws KeeperException,\n      InterruptedException {\n    log.info(\"Manual update of cluster state initiated\");\n    // build immutable CloudInfo\n    \n    if (immediate) {\n      CloudState clusterState;\n      synchronized (getUpdateLock()) {\n      List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE, null, true);\n      Set<String> liveNodesSet = new HashSet<String>();\n      liveNodesSet.addAll(liveNodes);\n      \n        if (!onlyLiveNodes) {\n          log.info(\"Updating cloud state from ZooKeeper... \");\n          \n          clusterState = CloudState.load(zkClient, liveNodesSet);\n        } else {\n          log.info(\"Updating live nodes from ZooKeeper... \");\n          clusterState = new CloudState(liveNodesSet,\n              ZkStateReader.this.cloudState.getCollectionStates());\n        }\n      }\n\n      this.cloudState = clusterState;\n    } else {\n      if (cloudStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      cloudStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cluster state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            cloudStateUpdateScheduled = false;\n            CloudState clusterState;\n            try {\n              List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE,\n                  null, true);\n              Set<String> liveNodesSet = new HashSet<String>();\n              liveNodesSet.addAll(liveNodes);\n              \n              if (!onlyLiveNodes) {\n                log.info(\"Updating cloud state from ZooKeeper... \");\n                \n                clusterState = CloudState.load(zkClient, liveNodesSet);\n              } else {\n                log.info(\"Updating live nodes from ZooKeeper... \");\n                clusterState = new CloudState(liveNodesSet, ZkStateReader.this.cloudState.getCollectionStates());\n              }\n              \n              ZkStateReader.this.cloudState = clusterState;\n              \n            } catch (KeeperException e) {\n              if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                  || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } \n            // update volatile\n            ZkStateReader.this.cloudState = cloudState;\n          }\n        }\n      }, SOLRCLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n    \n  }\n\n","sourceOld":"  // load and publish a new CollectionInfo\n  private synchronized void updateCloudState(boolean immediate, final boolean onlyLiveNodes) throws KeeperException, InterruptedException,\n      IOException {\n    \n    // build immutable CloudInfo\n    \n    if(immediate) {\n      if(!onlyLiveNodes) {\n        log.info(\"Updating cloud state from ZooKeeper... \");\n      } else {\n        log.info(\"Updating live nodes from ZooKeeper... \");\n      }\n      CloudState cloudState;\n      cloudState = CloudState.buildCloudState(zkClient, this.cloudState, onlyLiveNodes);\n      // update volatile\n      this.cloudState = cloudState;\n    } else {\n      if(cloudStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      cloudStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cloud state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            cloudStateUpdateScheduled = false;\n            CloudState cloudState;\n            try {\n              cloudState = CloudState.buildCloudState(zkClient,\n                  ZkStateReader.this.cloudState, onlyLiveNodes);\n            } catch (KeeperException e) {\n              if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (IOException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            }\n            // update volatile\n            ZkStateReader.this.cloudState = cloudState;\n          }\n        }\n      }, CLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","sourceNew":"  // load and publish a new CollectionInfo\n  private synchronized void updateCloudState(boolean immediate,\n      final boolean onlyLiveNodes) throws KeeperException,\n      InterruptedException {\n    log.info(\"Manual update of cluster state initiated\");\n    // build immutable CloudInfo\n    \n    if (immediate) {\n      CloudState clusterState;\n      synchronized (getUpdateLock()) {\n      List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE, null, true);\n      Set<String> liveNodesSet = new HashSet<String>();\n      liveNodesSet.addAll(liveNodes);\n      \n        if (!onlyLiveNodes) {\n          log.info(\"Updating cloud state from ZooKeeper... \");\n          \n          clusterState = CloudState.load(zkClient, liveNodesSet);\n        } else {\n          log.info(\"Updating live nodes from ZooKeeper... \");\n          clusterState = new CloudState(liveNodesSet,\n              ZkStateReader.this.cloudState.getCollectionStates());\n        }\n      }\n\n      this.cloudState = clusterState;\n    } else {\n      if (cloudStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      cloudStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cluster state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            cloudStateUpdateScheduled = false;\n            CloudState clusterState;\n            try {\n              List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE,\n                  null, true);\n              Set<String> liveNodesSet = new HashSet<String>();\n              liveNodesSet.addAll(liveNodes);\n              \n              if (!onlyLiveNodes) {\n                log.info(\"Updating cloud state from ZooKeeper... \");\n                \n                clusterState = CloudState.load(zkClient, liveNodesSet);\n              } else {\n                log.info(\"Updating live nodes from ZooKeeper... \");\n                clusterState = new CloudState(liveNodesSet, ZkStateReader.this.cloudState.getCollectionStates());\n              }\n              \n              ZkStateReader.this.cloudState = clusterState;\n              \n            } catch (KeeperException e) {\n              if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                  || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } \n            // update volatile\n            ZkStateReader.this.cloudState = cloudState;\n          }\n        }\n      }, SOLRCLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n    \n  }\n\n","sourceOld":"  // load and publish a new CollectionInfo\n  private synchronized void updateCloudState(boolean immediate, final boolean onlyLiveNodes) throws KeeperException, InterruptedException,\n      IOException {\n    \n    // build immutable CloudInfo\n    \n    if(immediate) {\n      if(!onlyLiveNodes) {\n        log.info(\"Updating cloud state from ZooKeeper... \");\n      } else {\n        log.info(\"Updating live nodes from ZooKeeper... \");\n      }\n      CloudState cloudState;\n      cloudState = CloudState.buildCloudState(zkClient, this.cloudState, onlyLiveNodes);\n      // update volatile\n      this.cloudState = cloudState;\n    } else {\n      if(cloudStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      cloudStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cloud state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            cloudStateUpdateScheduled = false;\n            CloudState cloudState;\n            try {\n              cloudState = CloudState.buildCloudState(zkClient,\n                  ZkStateReader.this.cloudState, onlyLiveNodes);\n            } catch (KeeperException e) {\n              if(e.code() == KeeperException.Code.SESSIONEXPIRED || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (IOException e) {\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            }\n            // update volatile\n            ZkStateReader.this.cloudState = cloudState;\n          }\n        }\n      }, CLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","date":1342989037,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","sourceNew":"  // load and publish a new CollectionInfo\n  private synchronized void updateCloudState(boolean immediate,\n      final boolean onlyLiveNodes) throws KeeperException,\n      InterruptedException {\n    // build immutable CloudInfo\n    \n    if (immediate) {\n      CloudState clusterState;\n      synchronized (getUpdateLock()) {\n      List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE, null, true);\n      Set<String> liveNodesSet = new HashSet<String>();\n      liveNodesSet.addAll(liveNodes);\n      \n        if (!onlyLiveNodes) {\n          log.info(\"Updating cloud state from ZooKeeper... \");\n          \n          clusterState = CloudState.load(zkClient, liveNodesSet);\n        } else {\n          log.info(\"Updating live nodes from ZooKeeper... \");\n          clusterState = new CloudState(liveNodesSet,\n              ZkStateReader.this.cloudState.getCollectionStates());\n        }\n      }\n\n      this.cloudState = clusterState;\n    } else {\n      if (cloudStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      cloudStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cluster state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            cloudStateUpdateScheduled = false;\n            CloudState clusterState;\n            try {\n              List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE,\n                  null, true);\n              Set<String> liveNodesSet = new HashSet<String>();\n              liveNodesSet.addAll(liveNodes);\n              \n              if (!onlyLiveNodes) {\n                log.info(\"Updating cloud state from ZooKeeper... \");\n                \n                clusterState = CloudState.load(zkClient, liveNodesSet);\n              } else {\n                log.info(\"Updating live nodes from ZooKeeper... \");\n                clusterState = new CloudState(liveNodesSet, ZkStateReader.this.cloudState.getCollectionStates());\n              }\n              \n              ZkStateReader.this.cloudState = clusterState;\n              \n            } catch (KeeperException e) {\n              if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                  || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } \n            // update volatile\n            ZkStateReader.this.cloudState = cloudState;\n          }\n        }\n      }, SOLRCLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n    \n  }\n\n","sourceOld":"  // load and publish a new CollectionInfo\n  private synchronized void updateCloudState(boolean immediate,\n      final boolean onlyLiveNodes) throws KeeperException,\n      InterruptedException {\n    log.info(\"Manual update of cluster state initiated\");\n    // build immutable CloudInfo\n    \n    if (immediate) {\n      CloudState clusterState;\n      synchronized (getUpdateLock()) {\n      List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE, null, true);\n      Set<String> liveNodesSet = new HashSet<String>();\n      liveNodesSet.addAll(liveNodes);\n      \n        if (!onlyLiveNodes) {\n          log.info(\"Updating cloud state from ZooKeeper... \");\n          \n          clusterState = CloudState.load(zkClient, liveNodesSet);\n        } else {\n          log.info(\"Updating live nodes from ZooKeeper... \");\n          clusterState = new CloudState(liveNodesSet,\n              ZkStateReader.this.cloudState.getCollectionStates());\n        }\n      }\n\n      this.cloudState = clusterState;\n    } else {\n      if (cloudStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      cloudStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cluster state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            cloudStateUpdateScheduled = false;\n            CloudState clusterState;\n            try {\n              List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE,\n                  null, true);\n              Set<String> liveNodesSet = new HashSet<String>();\n              liveNodesSet.addAll(liveNodes);\n              \n              if (!onlyLiveNodes) {\n                log.info(\"Updating cloud state from ZooKeeper... \");\n                \n                clusterState = CloudState.load(zkClient, liveNodesSet);\n              } else {\n                log.info(\"Updating live nodes from ZooKeeper... \");\n                clusterState = new CloudState(liveNodesSet, ZkStateReader.this.cloudState.getCollectionStates());\n              }\n              \n              ZkStateReader.this.cloudState = clusterState;\n              \n            } catch (KeeperException e) {\n              if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                  || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } \n            // update volatile\n            ZkStateReader.this.cloudState = cloudState;\n          }\n        }\n      }, SOLRCLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n    \n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","sourceNew":"  // load and publish a new CollectionInfo\n  private synchronized void updateCloudState(boolean immediate,\n      final boolean onlyLiveNodes) throws KeeperException,\n      InterruptedException {\n    // build immutable CloudInfo\n    \n    if (immediate) {\n      CloudState clusterState;\n      synchronized (getUpdateLock()) {\n      List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE, null, true);\n      Set<String> liveNodesSet = new HashSet<String>();\n      liveNodesSet.addAll(liveNodes);\n      \n        if (!onlyLiveNodes) {\n          log.info(\"Updating cloud state from ZooKeeper... \");\n          \n          clusterState = CloudState.load(zkClient, liveNodesSet);\n        } else {\n          log.info(\"Updating live nodes from ZooKeeper... \");\n          clusterState = new CloudState(liveNodesSet,\n              ZkStateReader.this.cloudState.getCollectionStates());\n        }\n      }\n\n      this.cloudState = clusterState;\n    } else {\n      if (cloudStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      cloudStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cluster state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            cloudStateUpdateScheduled = false;\n            CloudState clusterState;\n            try {\n              List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE,\n                  null, true);\n              Set<String> liveNodesSet = new HashSet<String>();\n              liveNodesSet.addAll(liveNodes);\n              \n              if (!onlyLiveNodes) {\n                log.info(\"Updating cloud state from ZooKeeper... \");\n                \n                clusterState = CloudState.load(zkClient, liveNodesSet);\n              } else {\n                log.info(\"Updating live nodes from ZooKeeper... \");\n                clusterState = new CloudState(liveNodesSet, ZkStateReader.this.cloudState.getCollectionStates());\n              }\n              \n              ZkStateReader.this.cloudState = clusterState;\n              \n            } catch (KeeperException e) {\n              if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                  || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } \n            // update volatile\n            ZkStateReader.this.cloudState = cloudState;\n          }\n        }\n      }, SOLRCLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n    \n  }\n\n","sourceOld":"  // load and publish a new CollectionInfo\n  private synchronized void updateCloudState(boolean immediate,\n      final boolean onlyLiveNodes) throws KeeperException,\n      InterruptedException {\n    log.info(\"Manual update of cluster state initiated\");\n    // build immutable CloudInfo\n    \n    if (immediate) {\n      CloudState clusterState;\n      synchronized (getUpdateLock()) {\n      List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE, null, true);\n      Set<String> liveNodesSet = new HashSet<String>();\n      liveNodesSet.addAll(liveNodes);\n      \n        if (!onlyLiveNodes) {\n          log.info(\"Updating cloud state from ZooKeeper... \");\n          \n          clusterState = CloudState.load(zkClient, liveNodesSet);\n        } else {\n          log.info(\"Updating live nodes from ZooKeeper... \");\n          clusterState = new CloudState(liveNodesSet,\n              ZkStateReader.this.cloudState.getCollectionStates());\n        }\n      }\n\n      this.cloudState = clusterState;\n    } else {\n      if (cloudStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      cloudStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cluster state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            cloudStateUpdateScheduled = false;\n            CloudState clusterState;\n            try {\n              List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE,\n                  null, true);\n              Set<String> liveNodesSet = new HashSet<String>();\n              liveNodesSet.addAll(liveNodes);\n              \n              if (!onlyLiveNodes) {\n                log.info(\"Updating cloud state from ZooKeeper... \");\n                \n                clusterState = CloudState.load(zkClient, liveNodesSet);\n              } else {\n                log.info(\"Updating live nodes from ZooKeeper... \");\n                clusterState = new CloudState(liveNodesSet, ZkStateReader.this.cloudState.getCollectionStates());\n              }\n              \n              ZkStateReader.this.cloudState = clusterState;\n              \n            } catch (KeeperException e) {\n              if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                  || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } \n            // update volatile\n            ZkStateReader.this.cloudState = cloudState;\n          }\n        }\n      }, SOLRCLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","sourceNew":"  // load and publish a new CollectionInfo\n  private synchronized void updateCloudState(boolean immediate,\n      final boolean onlyLiveNodes) throws KeeperException,\n      InterruptedException {\n    // build immutable CloudInfo\n    \n    if (immediate) {\n      CloudState clusterState;\n      synchronized (getUpdateLock()) {\n      List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE, null, true);\n      Set<String> liveNodesSet = new HashSet<String>();\n      liveNodesSet.addAll(liveNodes);\n      \n        if (!onlyLiveNodes) {\n          log.info(\"Updating cloud state from ZooKeeper... \");\n          \n          clusterState = CloudState.load(zkClient, liveNodesSet);\n        } else {\n          log.info(\"Updating live nodes from ZooKeeper... \");\n          clusterState = new CloudState(liveNodesSet,\n              ZkStateReader.this.cloudState.getCollectionStates());\n        }\n      }\n\n      this.cloudState = clusterState;\n    } else {\n      if (cloudStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      cloudStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cluster state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            cloudStateUpdateScheduled = false;\n            CloudState clusterState;\n            try {\n              List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE,\n                  null, true);\n              Set<String> liveNodesSet = new HashSet<String>();\n              liveNodesSet.addAll(liveNodes);\n              \n              if (!onlyLiveNodes) {\n                log.info(\"Updating cloud state from ZooKeeper... \");\n                \n                clusterState = CloudState.load(zkClient, liveNodesSet);\n              } else {\n                log.info(\"Updating live nodes from ZooKeeper... \");\n                clusterState = new CloudState(liveNodesSet, ZkStateReader.this.cloudState.getCollectionStates());\n              }\n              \n              ZkStateReader.this.cloudState = clusterState;\n              \n            } catch (KeeperException e) {\n              if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                  || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } \n            // update volatile\n            ZkStateReader.this.cloudState = cloudState;\n          }\n        }\n      }, SOLRCLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n    \n  }\n\n","sourceOld":"  // load and publish a new CollectionInfo\n  private synchronized void updateCloudState(boolean immediate,\n      final boolean onlyLiveNodes) throws KeeperException,\n      InterruptedException {\n    log.info(\"Manual update of cluster state initiated\");\n    // build immutable CloudInfo\n    \n    if (immediate) {\n      CloudState clusterState;\n      synchronized (getUpdateLock()) {\n      List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE, null, true);\n      Set<String> liveNodesSet = new HashSet<String>();\n      liveNodesSet.addAll(liveNodes);\n      \n        if (!onlyLiveNodes) {\n          log.info(\"Updating cloud state from ZooKeeper... \");\n          \n          clusterState = CloudState.load(zkClient, liveNodesSet);\n        } else {\n          log.info(\"Updating live nodes from ZooKeeper... \");\n          clusterState = new CloudState(liveNodesSet,\n              ZkStateReader.this.cloudState.getCollectionStates());\n        }\n      }\n\n      this.cloudState = clusterState;\n    } else {\n      if (cloudStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      cloudStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cluster state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            cloudStateUpdateScheduled = false;\n            CloudState clusterState;\n            try {\n              List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE,\n                  null, true);\n              Set<String> liveNodesSet = new HashSet<String>();\n              liveNodesSet.addAll(liveNodes);\n              \n              if (!onlyLiveNodes) {\n                log.info(\"Updating cloud state from ZooKeeper... \");\n                \n                clusterState = CloudState.load(zkClient, liveNodesSet);\n              } else {\n                log.info(\"Updating live nodes from ZooKeeper... \");\n                clusterState = new CloudState(liveNodesSet, ZkStateReader.this.cloudState.getCollectionStates());\n              }\n              \n              ZkStateReader.this.cloudState = clusterState;\n              \n            } catch (KeeperException e) {\n              if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                  || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } \n            // update volatile\n            ZkStateReader.this.cloudState = cloudState;\n          }\n        }\n      }, SOLRCLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState(boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","sourceNew":"  // load and publish a new CollectionInfo\n  private synchronized void updateClusterState(boolean immediate,\n      final boolean onlyLiveNodes) throws KeeperException,\n      InterruptedException {\n    // build immutable CloudInfo\n    \n    if (immediate) {\n      ClusterState clusterState;\n      synchronized (getUpdateLock()) {\n        List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE, null,\n            true);\n        Set<String> liveNodesSet = new HashSet<String>();\n        liveNodesSet.addAll(liveNodes);\n        \n        if (!onlyLiveNodes) {\n          log.info(\"Updating cloud state from ZooKeeper... \");\n          \n          clusterState = ClusterState.load(zkClient, liveNodesSet);\n        } else {\n          log.info(\"Updating live nodes from ZooKeeper... \");\n          clusterState = new ClusterState(liveNodesSet,\n              ZkStateReader.this.clusterState.getCollectionStates());\n        }\n      }\n\n      this.clusterState = clusterState;\n    } else {\n      if (clusterStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      clusterStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cluster state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            clusterStateUpdateScheduled = false;\n            ClusterState clusterState;\n            try {\n              List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE,\n                  null, true);\n              Set<String> liveNodesSet = new HashSet<String>();\n              liveNodesSet.addAll(liveNodes);\n              \n              if (!onlyLiveNodes) {\n                log.info(\"Updating cloud state from ZooKeeper... \");\n                \n                clusterState = ClusterState.load(zkClient, liveNodesSet);\n              } else {\n                log.info(\"Updating live nodes from ZooKeeper... \");\n                clusterState = new ClusterState(liveNodesSet, ZkStateReader.this.clusterState.getCollectionStates());\n              }\n              \n              ZkStateReader.this.clusterState = clusterState;\n              \n            } catch (KeeperException e) {\n              if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                  || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } \n            // update volatile\n            ZkStateReader.this.clusterState = clusterState;\n          }\n        }\n      }, SOLRCLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n    \n  }\n\n","sourceOld":"  // load and publish a new CollectionInfo\n  private synchronized void updateCloudState(boolean immediate,\n      final boolean onlyLiveNodes) throws KeeperException,\n      InterruptedException {\n    // build immutable CloudInfo\n    \n    if (immediate) {\n      CloudState clusterState;\n      synchronized (getUpdateLock()) {\n      List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE, null, true);\n      Set<String> liveNodesSet = new HashSet<String>();\n      liveNodesSet.addAll(liveNodes);\n      \n        if (!onlyLiveNodes) {\n          log.info(\"Updating cloud state from ZooKeeper... \");\n          \n          clusterState = CloudState.load(zkClient, liveNodesSet);\n        } else {\n          log.info(\"Updating live nodes from ZooKeeper... \");\n          clusterState = new CloudState(liveNodesSet,\n              ZkStateReader.this.cloudState.getCollectionStates());\n        }\n      }\n\n      this.cloudState = clusterState;\n    } else {\n      if (cloudStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      cloudStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cluster state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            cloudStateUpdateScheduled = false;\n            CloudState clusterState;\n            try {\n              List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE,\n                  null, true);\n              Set<String> liveNodesSet = new HashSet<String>();\n              liveNodesSet.addAll(liveNodes);\n              \n              if (!onlyLiveNodes) {\n                log.info(\"Updating cloud state from ZooKeeper... \");\n                \n                clusterState = CloudState.load(zkClient, liveNodesSet);\n              } else {\n                log.info(\"Updating live nodes from ZooKeeper... \");\n                clusterState = new CloudState(liveNodesSet, ZkStateReader.this.cloudState.getCollectionStates());\n              }\n              \n              ZkStateReader.this.cloudState = clusterState;\n              \n            } catch (KeeperException e) {\n              if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                  || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } \n            // update volatile\n            ZkStateReader.this.cloudState = cloudState;\n          }\n        }\n      }, SOLRCLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateClusterState(boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","sourceNew":"  // load and publish a new CollectionInfo\n  private synchronized void updateClusterState(boolean immediate,\n      final boolean onlyLiveNodes) throws KeeperException,\n      InterruptedException {\n    // build immutable CloudInfo\n    \n    if (immediate) {\n      ClusterState clusterState;\n      synchronized (getUpdateLock()) {\n        List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE, null,\n            true);\n        Set<String> liveNodesSet = new HashSet<String>();\n        liveNodesSet.addAll(liveNodes);\n        \n        if (!onlyLiveNodes) {\n          log.info(\"Updating cloud state from ZooKeeper... \");\n          \n          clusterState = ClusterState.load(zkClient, liveNodesSet);\n        } else {\n          log.info(\"Updating live nodes from ZooKeeper... \");\n          clusterState = new ClusterState(liveNodesSet,\n              ZkStateReader.this.clusterState.getCollectionStates());\n        }\n      }\n\n      this.clusterState = clusterState;\n    } else {\n      if (clusterStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      clusterStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cluster state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            clusterStateUpdateScheduled = false;\n            ClusterState clusterState;\n            try {\n              List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE,\n                  null, true);\n              Set<String> liveNodesSet = new HashSet<String>();\n              liveNodesSet.addAll(liveNodes);\n              \n              if (!onlyLiveNodes) {\n                log.info(\"Updating cloud state from ZooKeeper... \");\n                \n                clusterState = ClusterState.load(zkClient, liveNodesSet);\n              } else {\n                log.info(\"Updating live nodes from ZooKeeper... \");\n                clusterState = new ClusterState(liveNodesSet, ZkStateReader.this.clusterState.getCollectionStates());\n              }\n              \n              ZkStateReader.this.clusterState = clusterState;\n              \n            } catch (KeeperException e) {\n              if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                  || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } \n            // update volatile\n            ZkStateReader.this.clusterState = clusterState;\n          }\n        }\n      }, SOLRCLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n    \n  }\n\n","sourceOld":"  // load and publish a new CollectionInfo\n  private synchronized void updateCloudState(boolean immediate,\n      final boolean onlyLiveNodes) throws KeeperException,\n      InterruptedException {\n    // build immutable CloudInfo\n    \n    if (immediate) {\n      CloudState clusterState;\n      synchronized (getUpdateLock()) {\n      List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE, null, true);\n      Set<String> liveNodesSet = new HashSet<String>();\n      liveNodesSet.addAll(liveNodes);\n      \n        if (!onlyLiveNodes) {\n          log.info(\"Updating cloud state from ZooKeeper... \");\n          \n          clusterState = CloudState.load(zkClient, liveNodesSet);\n        } else {\n          log.info(\"Updating live nodes from ZooKeeper... \");\n          clusterState = new CloudState(liveNodesSet,\n              ZkStateReader.this.cloudState.getCollectionStates());\n        }\n      }\n\n      this.cloudState = clusterState;\n    } else {\n      if (cloudStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      cloudStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cluster state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            cloudStateUpdateScheduled = false;\n            CloudState clusterState;\n            try {\n              List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE,\n                  null, true);\n              Set<String> liveNodesSet = new HashSet<String>();\n              liveNodesSet.addAll(liveNodes);\n              \n              if (!onlyLiveNodes) {\n                log.info(\"Updating cloud state from ZooKeeper... \");\n                \n                clusterState = CloudState.load(zkClient, liveNodesSet);\n              } else {\n                log.info(\"Updating live nodes from ZooKeeper... \");\n                clusterState = new CloudState(liveNodesSet, ZkStateReader.this.cloudState.getCollectionStates());\n              }\n              \n              ZkStateReader.this.cloudState = clusterState;\n              \n            } catch (KeeperException e) {\n              if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                  || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } \n            // update volatile\n            ZkStateReader.this.cloudState = cloudState;\n          }\n        }\n      }, SOLRCLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#updateCloudState(boolean,boolean).mjava","sourceNew":null,"sourceOld":"  // load and publish a new CollectionInfo\n  private synchronized void updateCloudState(boolean immediate,\n      final boolean onlyLiveNodes) throws KeeperException,\n      InterruptedException {\n    // build immutable CloudInfo\n    \n    if (immediate) {\n      CloudState clusterState;\n      synchronized (getUpdateLock()) {\n      List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE, null, true);\n      Set<String> liveNodesSet = new HashSet<String>();\n      liveNodesSet.addAll(liveNodes);\n      \n        if (!onlyLiveNodes) {\n          log.info(\"Updating cloud state from ZooKeeper... \");\n          \n          clusterState = CloudState.load(zkClient, liveNodesSet);\n        } else {\n          log.info(\"Updating live nodes from ZooKeeper... \");\n          clusterState = new CloudState(liveNodesSet,\n              ZkStateReader.this.cloudState.getCollectionStates());\n        }\n      }\n\n      this.cloudState = clusterState;\n    } else {\n      if (cloudStateUpdateScheduled) {\n        log.info(\"Cloud state update for ZooKeeper already scheduled\");\n        return;\n      }\n      log.info(\"Scheduling cloud state update from ZooKeeper...\");\n      cloudStateUpdateScheduled = true;\n      updateCloudExecutor.schedule(new Runnable() {\n        \n        public void run() {\n          log.info(\"Updating cluster state from ZooKeeper...\");\n          synchronized (getUpdateLock()) {\n            cloudStateUpdateScheduled = false;\n            CloudState clusterState;\n            try {\n              List<String> liveNodes = zkClient.getChildren(LIVE_NODES_ZKNODE,\n                  null, true);\n              Set<String> liveNodesSet = new HashSet<String>();\n              liveNodesSet.addAll(liveNodes);\n              \n              if (!onlyLiveNodes) {\n                log.info(\"Updating cloud state from ZooKeeper... \");\n                \n                clusterState = CloudState.load(zkClient, liveNodesSet);\n              } else {\n                log.info(\"Updating live nodes from ZooKeeper... \");\n                clusterState = new CloudState(liveNodesSet, ZkStateReader.this.cloudState.getCollectionStates());\n              }\n              \n              ZkStateReader.this.cloudState = clusterState;\n              \n            } catch (KeeperException e) {\n              if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                  || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n              log.error(\"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } \n            // update volatile\n            ZkStateReader.this.cloudState = cloudState;\n          }\n        }\n      }, SOLRCLOUD_UPDATE_DELAY, TimeUnit.MILLISECONDS);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c12159f094951abca20de13adfd11224da456e1":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["3c12159f094951abca20de13adfd11224da456e1","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","3f767f8c99eaedb984df754fe61f21c5de260f94"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["3c12159f094951abca20de13adfd11224da456e1","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"aba371508186796cc6151d8223a5b4e16d02e26e":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","3f767f8c99eaedb984df754fe61f21c5de260f94"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["3c12159f094951abca20de13adfd11224da456e1"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f767f8c99eaedb984df754fe61f21c5de260f94"]},"commit2Childs":{"3c12159f094951abca20de13adfd11224da456e1":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c26f00b574427b55127e869b935845554afde1fa":["3c12159f094951abca20de13adfd11224da456e1"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"3f767f8c99eaedb984df754fe61f21c5de260f94":["8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["3f767f8c99eaedb984df754fe61f21c5de260f94","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","0d22ac6a4146774c1bc8400160fc0b6150294e92","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab","0d22ac6a4146774c1bc8400160fc0b6150294e92","d6f074e73200c07d54f242d3880a8da5a35ff97b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}