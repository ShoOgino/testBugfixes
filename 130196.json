{"path":"solr/core/src/java/org/apache/solr/metrics/MetricSuppliers#meterSupplier(SolrResourceLoader,PluginInfo).mjava","commits":[{"id":"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa","date":1494330459,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/MetricSuppliers#meterSupplier(SolrResourceLoader,PluginInfo).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a {@link Meter} supplier.\n   * @param loader resource loader\n   * @param info plugin configuration, or null for default\n   * @return configured supplier instance, or default instance if configuration was invalid\n   */\n  public static MetricRegistry.MetricSupplier<Meter> meterSupplier(SolrResourceLoader loader, PluginInfo info) {\n    MetricRegistry.MetricSupplier<Meter> supplier;\n    if (info == null || info.className == null || info.className.isEmpty()) {\n      supplier = new DefaultMeterSupplier();\n    } else {\n      try {\n        supplier = loader.newInstance(info.className, MetricRegistry.MetricSupplier.class);\n      } catch (Exception e) {\n        log.warn(\"Error creating custom Meter supplier (will use default): \" + info, e);\n        supplier = new DefaultMeterSupplier();\n      }\n    }\n    if (supplier instanceof PluginInfoInitialized) {\n      ((PluginInfoInitialized)supplier).init(info);\n    } else {\n      SolrPluginUtils.invokeSetters(supplier, info.initArgs, true);\n    }\n    return supplier;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/MetricSuppliers#meterSupplier(SolrResourceLoader,PluginInfo).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a {@link Meter} supplier.\n   * @param loader resource loader\n   * @param info plugin configuration, or null for default\n   * @return configured supplier instance, or default instance if configuration was invalid\n   */\n  public static MetricRegistry.MetricSupplier<Meter> meterSupplier(SolrResourceLoader loader, PluginInfo info) {\n    MetricRegistry.MetricSupplier<Meter> supplier;\n    if (info == null || info.className == null || info.className.isEmpty()) {\n      supplier = new DefaultMeterSupplier();\n    } else {\n      try {\n        supplier = loader.newInstance(info.className, MetricRegistry.MetricSupplier.class);\n      } catch (Exception e) {\n        log.warn(\"Error creating custom Meter supplier (will use default): \" + info, e);\n        supplier = new DefaultMeterSupplier();\n      }\n    }\n    if (supplier instanceof PluginInfoInitialized) {\n      ((PluginInfoInitialized)supplier).init(info);\n    } else {\n      SolrPluginUtils.invokeSetters(supplier, info.initArgs, true);\n    }\n    return supplier;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/MetricSuppliers#meterSupplier(SolrResourceLoader,PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/MetricSuppliers#meterSupplier(SolrResourceLoader,PluginInfo).mjava","sourceNew":"  /**\n   * Create a {@link Meter} supplier.\n   * @param loader resource loader\n   * @param info plugin configuration, or null for default\n   * @return configured supplier instance, or default instance if configuration was invalid\n   */\n  public static MetricRegistry.MetricSupplier<Meter> meterSupplier(SolrResourceLoader loader, PluginInfo info) {\n    MetricRegistry.MetricSupplier<Meter> supplier;\n    if (info == null || info.className == null || info.className.isEmpty()) {\n      supplier = new DefaultMeterSupplier();\n    } else {\n      try {\n        supplier = loader.newInstance(info.className, MetricRegistry.MetricSupplier.class);\n      } catch (Exception e) {\n        log.warn(\"Error creating custom Meter supplier (will use default): {}\",info, e);\n        supplier = new DefaultMeterSupplier();\n      }\n    }\n    if (supplier instanceof PluginInfoInitialized) {\n      ((PluginInfoInitialized)supplier).init(info);\n    } else {\n      SolrPluginUtils.invokeSetters(supplier, info.initArgs, true);\n    }\n    return supplier;\n  }\n\n","sourceOld":"  /**\n   * Create a {@link Meter} supplier.\n   * @param loader resource loader\n   * @param info plugin configuration, or null for default\n   * @return configured supplier instance, or default instance if configuration was invalid\n   */\n  public static MetricRegistry.MetricSupplier<Meter> meterSupplier(SolrResourceLoader loader, PluginInfo info) {\n    MetricRegistry.MetricSupplier<Meter> supplier;\n    if (info == null || info.className == null || info.className.isEmpty()) {\n      supplier = new DefaultMeterSupplier();\n    } else {\n      try {\n        supplier = loader.newInstance(info.className, MetricRegistry.MetricSupplier.class);\n      } catch (Exception e) {\n        log.warn(\"Error creating custom Meter supplier (will use default): \" + info, e);\n        supplier = new DefaultMeterSupplier();\n      }\n    }\n    if (supplier instanceof PluginInfoInitialized) {\n      ((PluginInfoInitialized)supplier).init(info);\n    } else {\n      SolrPluginUtils.invokeSetters(supplier, info.initArgs, true);\n    }\n    return supplier;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/MetricSuppliers#meterSupplier(SolrResourceLoader,PluginInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/MetricSuppliers#meterSupplier(SolrResourceLoader,PluginInfo).mjava","sourceNew":"  /**\n   * Create a {@link Meter} supplier.\n   * @param loader resource loader\n   * @param info plugin configuration, or null for default\n   * @return configured supplier instance, or default instance if configuration was invalid\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static MetricRegistry.MetricSupplier<Meter> meterSupplier(SolrResourceLoader loader, PluginInfo info) {\n    MetricRegistry.MetricSupplier<Meter> supplier;\n    if (info == null || info.className == null || info.className.isEmpty()) {\n      supplier = new DefaultMeterSupplier();\n    } else {\n      try {\n        supplier = loader.newInstance(info.className, MetricRegistry.MetricSupplier.class);\n      } catch (Exception e) {\n        log.warn(\"Error creating custom Meter supplier (will use default): {}\",info, e);\n        supplier = new DefaultMeterSupplier();\n      }\n    }\n    if (supplier instanceof PluginInfoInitialized) {\n      ((PluginInfoInitialized)supplier).init(info);\n    } else {\n      SolrPluginUtils.invokeSetters(supplier, info.initArgs, true);\n    }\n    return supplier;\n  }\n\n","sourceOld":"  /**\n   * Create a {@link Meter} supplier.\n   * @param loader resource loader\n   * @param info plugin configuration, or null for default\n   * @return configured supplier instance, or default instance if configuration was invalid\n   */\n  public static MetricRegistry.MetricSupplier<Meter> meterSupplier(SolrResourceLoader loader, PluginInfo info) {\n    MetricRegistry.MetricSupplier<Meter> supplier;\n    if (info == null || info.className == null || info.className.isEmpty()) {\n      supplier = new DefaultMeterSupplier();\n    } else {\n      try {\n        supplier = loader.newInstance(info.className, MetricRegistry.MetricSupplier.class);\n      } catch (Exception e) {\n        log.warn(\"Error creating custom Meter supplier (will use default): {}\",info, e);\n        supplier = new DefaultMeterSupplier();\n      }\n    }\n    if (supplier instanceof PluginInfoInitialized) {\n      ((PluginInfoInitialized)supplier).init(info);\n    } else {\n      SolrPluginUtils.invokeSetters(supplier, info.initArgs, true);\n    }\n    return supplier;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["9df8125ba9193a2e2e285ed92157810b1952a244"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"9df8125ba9193a2e2e285ed92157810b1952a244":["195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa"],"195fcfcffd8f9047ac27ac642ee9da64f4e6c4fa":["e9017cf144952056066919f1ebc7897ff9bd71b1","9df8125ba9193a2e2e285ed92157810b1952a244"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9df8125ba9193a2e2e285ed92157810b1952a244":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}