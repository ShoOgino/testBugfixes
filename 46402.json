{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat#DirectPostingsFormat(int,int).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat#DirectPostingsFormat(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat#DirectPostingsFormat(int,int).mjava","sourceNew":"  /** minSkipCount is how many terms in a row must have the\n   *  same prefix before we put a skip pointer down.  Terms\n   *  with docFreq <= lowFreqCutoff will use a single int[]\n   *  to hold all docs, freqs, position and offsets; terms\n   *  with higher docFreq will use separate arrays. */\n  public DirectPostingsFormat(int minSkipCount, int lowFreqCutoff) {\n    super(\"Direct\");\n    this.minSkipCount = minSkipCount;\n    this.lowFreqCutoff = lowFreqCutoff;\n  }\n\n","sourceOld":"  /** minSkipCount is how many terms in a row must have the\n   *  same prefix before we put a skip pointer down.  Terms\n   *  with docFreq <= lowFreqCutoff will use a single int[]\n   *  to hold all docs, freqs, position and offsets; terms\n   *  with higher docFreq will use separate arrays. */\n  public DirectPostingsFormat(int minSkipCount, int lowFreqCutoff) {\n    super(\"Direct\");\n    this.minSkipCount = minSkipCount;\n    this.lowFreqCutoff = lowFreqCutoff;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat#DirectPostingsFormat(int,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat#DirectPostingsFormat(int,int).mjava","sourceNew":"  /** minSkipCount is how many terms in a row must have the\n   *  same prefix before we put a skip pointer down.  Terms\n   *  with docFreq &lt;= lowFreqCutoff will use a single int[]\n   *  to hold all docs, freqs, position and offsets; terms\n   *  with higher docFreq will use separate arrays. */\n  public DirectPostingsFormat(int minSkipCount, int lowFreqCutoff) {\n    super(\"Direct\");\n    this.minSkipCount = minSkipCount;\n    this.lowFreqCutoff = lowFreqCutoff;\n  }\n\n","sourceOld":"  /** minSkipCount is how many terms in a row must have the\n   *  same prefix before we put a skip pointer down.  Terms\n   *  with docFreq <= lowFreqCutoff will use a single int[]\n   *  to hold all docs, freqs, position and offsets; terms\n   *  with higher docFreq will use separate arrays. */\n  public DirectPostingsFormat(int minSkipCount, int lowFreqCutoff) {\n    super(\"Direct\");\n    this.minSkipCount = minSkipCount;\n    this.lowFreqCutoff = lowFreqCutoff;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b1eb427f2c6beed80d1724555fc1db003ccf3030"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}