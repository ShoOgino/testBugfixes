{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#toExpression(StreamFactory).mjava","commits":[{"id":"6fa0fff8102ba352427001188190711b7295a1c2","date":1559148790,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#toExpression(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n\n    // function name\n    StreamExpression expression = new StreamExpression(\"random\");\n\n    // collection\n    if(collection.indexOf(',') > -1) {\n      expression.addParameter(\"\\\"\"+collection+\"\\\"\");\n    } else {\n      expression.addParameter(collection);\n    }\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        // SOLR-8409: Escaping the \" is a special case.\n        // Do note that in any other BASE streams with parameters where a \" might come into play\n        // that this same replacement needs to take place.\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n            val.replace(\"\\\"\", \"\\\\\\\"\")));\n      }\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n\n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#toExpression(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n\n    // function name\n    StreamExpression expression = new StreamExpression(\"random\");\n\n    // collection\n    if(collection.indexOf(',') > -1) {\n      expression.addParameter(\"\\\"\"+collection+\"\\\"\");\n    } else {\n      expression.addParameter(collection);\n    }\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        // SOLR-8409: Escaping the \" is a special case.\n        // Do note that in any other BASE streams with parameters where a \" might come into play\n        // that this same replacement needs to take place.\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n            val.replace(\"\\\"\", \"\\\\\\\"\")));\n      }\n    }\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    // aliases\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n\n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6fa0fff8102ba352427001188190711b7295a1c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6fa0fff8102ba352427001188190711b7295a1c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6fa0fff8102ba352427001188190711b7295a1c2"]},"commit2Childs":{"6fa0fff8102ba352427001188190711b7295a1c2":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6fa0fff8102ba352427001188190711b7295a1c2","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}