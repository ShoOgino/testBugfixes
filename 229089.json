{"path":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testUpdateFeed().mjava","commits":[{"id":"52754a40a1550056d5637c8992b4076b5ed77328","date":1151345693,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testUpdateFeed().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * @throws IOException\n     * @throws StorageException\n     */\n    public void testUpdateFeed() throws IOException, StorageException {\n        testSaveFeed();\n        ServerBaseFeed feed = new ServerBaseFeed();\n        String title = \"myTitle\";\n        String newusername = \"doug\";\n        feed.setTitle(new PlainTextConstruct(title));\n        feed.setId(feedId);\n        feed.setServiceType(service);\n        feed.setServiceConfig(this.configurator);\n        StorageFeedWrapper wrapper = new StorageFeedWrapper(feed,newusername);\n        this.modifier.updateFeed(wrapper);\n        IndexSearcher searcher = new IndexSearcher(this.dir);\n        Query q = new TermQuery(new Term(StorageFeedWrapper.FIELD_FEED_ID,\n                feedId));\n        Hits h = searcher.search(q);\n        assertEquals(\"length == 1\", 1, h.length());\n        assertTrue(h.doc(0).get(StorageFeedWrapper.FIELD_ACCOUNTREFERENCE).equals(newusername));\n        searcher.close();\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testUpdateFeed().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/storage/lucenestorage/TestStorageModifier#testUpdateFeed().mjava","sourceNew":"    /**\n     * @throws IOException\n     * @throws StorageException\n     */\n    public void testUpdateFeed() throws IOException, StorageException {\n        testSaveFeed();\n        ServerBaseFeed feed = new ServerBaseFeed();\n        String title = \"myTitle\";\n        String newusername = \"doug\";\n        feed.setTitle(new PlainTextConstruct(title));\n        feed.setId(feedId);\n        feed.setServiceType(service);\n        feed.setServiceConfig(this.configurator);\n        StorageFeedWrapper wrapper = new StorageFeedWrapper(feed,newusername);\n        this.modifier.updateFeed(wrapper);\n        IndexSearcher searcher = new IndexSearcher(this.dir);\n        Query q = new TermQuery(new Term(StorageFeedWrapper.FIELD_FEED_ID,\n                feedId));\n        Hits h = searcher.search(q);\n        assertEquals(\"length == 1\", 1, h.length());\n        assertTrue(h.doc(0).get(StorageFeedWrapper.FIELD_ACCOUNTREFERENCE).equals(newusername));\n        searcher.close();\n\n    }\n\n","sourceOld":"    /**\n     * @throws IOException\n     * @throws StorageException\n     */\n    public void testUpdateFeed() throws IOException, StorageException {\n        testSaveFeed();\n        ServerBaseFeed feed = new ServerBaseFeed();\n        String title = \"myTitle\";\n        String newusername = \"doug\";\n        feed.setTitle(new PlainTextConstruct(title));\n        feed.setId(feedId);\n        feed.setServiceType(service);\n        feed.setServiceConfig(this.configurator);\n        StorageFeedWrapper wrapper = new StorageFeedWrapper(feed,newusername);\n        this.modifier.updateFeed(wrapper);\n        IndexSearcher searcher = new IndexSearcher(this.dir);\n        Query q = new TermQuery(new Term(StorageFeedWrapper.FIELD_FEED_ID,\n                feedId));\n        Hits h = searcher.search(q);\n        assertEquals(\"length == 1\", 1, h.length());\n        assertTrue(h.doc(0).get(StorageFeedWrapper.FIELD_ACCOUNTREFERENCE).equals(newusername));\n        searcher.close();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["52754a40a1550056d5637c8992b4076b5ed77328"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"52754a40a1550056d5637c8992b4076b5ed77328":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52754a40a1550056d5637c8992b4076b5ed77328"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"52754a40a1550056d5637c8992b4076b5ed77328":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}