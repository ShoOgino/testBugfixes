{"path":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#highlightFields(String[],Query,IndexSearcher,TopDocs,int[]).mjava","commits":[{"id":"e8176b5c0894f97addb4b77198ec5684476b1b32","date":1365103218,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#highlightFields(String[],Query,IndexSearcher,TopDocs,int[]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#highlightFields(String[],Query,IndexSearcher,TopDocs,int).mjava","sourceNew":"  /**\n   * Highlights the top-N passages from multiple fields.\n   * <p>\n   * Conceptually, this behaves as a more efficient form of:\n   * <pre class=\"prettyprint\">\n   * Map m = new HashMap();\n   * for (String field : fields) {\n   *   m.put(field, highlight(field, query, searcher, topDocs, maxPassages));\n   * }\n   * return m;\n   * </pre>\n   * \n   * @param fields field names to highlight. \n   *        Must have a stored string value and also be indexed with offsets.\n   * @param query query to highlight.\n   * @param searcher searcher that was previously used to execute the query.\n   * @param topDocs TopDocs containing the summary result documents to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages per-field used to \n   *        form the highlighted snippets.\n   * @return Map keyed on field name, containing the array of formatted snippets \n   *         corresponding to the documents in <code>topDocs</code>. \n   *         If no highlights were found for a document, the\n   *         first {@code maxPassages} sentences from the\n   *         field will be returned.\n   * @throws IOException if an I/O error occurred during processing\n   * @throws IllegalArgumentException if <code>field</code> was indexed without \n   *         {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}\n   */\n  public Map<String,String[]> highlightFields(String fields[], Query query, IndexSearcher searcher, TopDocs topDocs, int maxPassages[]) throws IOException {\n    final ScoreDoc scoreDocs[] = topDocs.scoreDocs;\n    int docids[] = new int[scoreDocs.length];\n    for (int i = 0; i < docids.length; i++) {\n      docids[i] = scoreDocs[i].doc;\n    }\n\n    return highlightFields(fields, query, searcher, docids, maxPassages);\n  }\n\n","sourceOld":"  /**\n   * Highlights the top-N passages from multiple fields.\n   * <p>\n   * Conceptually, this behaves as a more efficient form of:\n   * <pre class=\"prettyprint\">\n   * Map m = new HashMap();\n   * for (String field : fields) {\n   *   m.put(field, highlight(field, query, searcher, topDocs, maxPassages));\n   * }\n   * return m;\n   * </pre>\n   * \n   * @param fields field names to highlight. \n   *        Must have a stored string value and also be indexed with offsets.\n   * @param query query to highlight.\n   * @param searcher searcher that was previously used to execute the query.\n   * @param topDocs TopDocs containing the summary result documents to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages per-field used to \n   *        form the highlighted snippets.\n   * @return Map keyed on field name, containing the array of formatted snippets \n   *         corresponding to the documents in <code>topDocs</code>. \n   *         If no highlights were found for a document, the\n   *         first {@code maxPassages} sentences from the\n   *         field will be returned.\n   * @throws IOException if an I/O error occurred during processing\n   * @throws IllegalArgumentException if <code>field</code> was indexed without \n   *         {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}\n   */\n  public Map<String,String[]> highlightFields(String fields[], Query query, IndexSearcher searcher, TopDocs topDocs, int maxPassages) throws IOException {\n    final ScoreDoc scoreDocs[] = topDocs.scoreDocs;\n    int docids[] = new int[scoreDocs.length];\n    for (int i = 0; i < docids.length; i++) {\n      docids[i] = scoreDocs[i].doc;\n    }\n\n    return highlightFields(fields, query, searcher, docids, maxPassages);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"381618eac2691bb34ab9a3fca76ad55c6274517e","date":1495564791,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#highlightFields(String[],Query,IndexSearcher,TopDocs,int[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Highlights the top-N passages from multiple fields.\n   * <p>\n   * Conceptually, this behaves as a more efficient form of:\n   * <pre class=\"prettyprint\">\n   * Map m = new HashMap();\n   * for (String field : fields) {\n   *   m.put(field, highlight(field, query, searcher, topDocs, maxPassages));\n   * }\n   * return m;\n   * </pre>\n   * \n   * @param fields field names to highlight. \n   *        Must have a stored string value and also be indexed with offsets.\n   * @param query query to highlight.\n   * @param searcher searcher that was previously used to execute the query.\n   * @param topDocs TopDocs containing the summary result documents to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages per-field used to \n   *        form the highlighted snippets.\n   * @return Map keyed on field name, containing the array of formatted snippets \n   *         corresponding to the documents in <code>topDocs</code>. \n   *         If no highlights were found for a document, the\n   *         first {@code maxPassages} sentences from the\n   *         field will be returned.\n   * @throws IOException if an I/O error occurred during processing\n   * @throws IllegalArgumentException if <code>field</code> was indexed without \n   *         {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}\n   */\n  public Map<String,String[]> highlightFields(String fields[], Query query, IndexSearcher searcher, TopDocs topDocs, int maxPassages[]) throws IOException {\n    final ScoreDoc scoreDocs[] = topDocs.scoreDocs;\n    int docids[] = new int[scoreDocs.length];\n    for (int i = 0; i < docids.length; i++) {\n      docids[i] = scoreDocs[i].doc;\n    }\n\n    return highlightFields(fields, query, searcher, docids, maxPassages);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/PostingsHighlighter#highlightFields(String[],Query,IndexSearcher,TopDocs,int[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Highlights the top-N passages from multiple fields.\n   * <p>\n   * Conceptually, this behaves as a more efficient form of:\n   * <pre class=\"prettyprint\">\n   * Map m = new HashMap();\n   * for (String field : fields) {\n   *   m.put(field, highlight(field, query, searcher, topDocs, maxPassages));\n   * }\n   * return m;\n   * </pre>\n   * \n   * @param fields field names to highlight. \n   *        Must have a stored string value and also be indexed with offsets.\n   * @param query query to highlight.\n   * @param searcher searcher that was previously used to execute the query.\n   * @param topDocs TopDocs containing the summary result documents to highlight.\n   * @param maxPassages The maximum number of top-N ranked passages per-field used to \n   *        form the highlighted snippets.\n   * @return Map keyed on field name, containing the array of formatted snippets \n   *         corresponding to the documents in <code>topDocs</code>. \n   *         If no highlights were found for a document, the\n   *         first {@code maxPassages} sentences from the\n   *         field will be returned.\n   * @throws IOException if an I/O error occurred during processing\n   * @throws IllegalArgumentException if <code>field</code> was indexed without \n   *         {@link IndexOptions#DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS}\n   */\n  public Map<String,String[]> highlightFields(String fields[], Query query, IndexSearcher searcher, TopDocs topDocs, int maxPassages[]) throws IOException {\n    final ScoreDoc scoreDocs[] = topDocs.scoreDocs;\n    int docids[] = new int[scoreDocs.length];\n    for (int i = 0; i < docids.length; i++) {\n      docids[i] = scoreDocs[i].doc;\n    }\n\n    return highlightFields(fields, query, searcher, docids, maxPassages);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["e8176b5c0894f97addb4b77198ec5684476b1b32"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["e8176b5c0894f97addb4b77198ec5684476b1b32","381618eac2691bb34ab9a3fca76ad55c6274517e"],"e8176b5c0894f97addb4b77198ec5684476b1b32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["381618eac2691bb34ab9a3fca76ad55c6274517e"]},"commit2Childs":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"e8176b5c0894f97addb4b77198ec5684476b1b32":["381618eac2691bb34ab9a3fca76ad55c6274517e","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8176b5c0894f97addb4b77198ec5684476b1b32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}