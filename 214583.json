{"path":"src/java/org/apache/solr/request/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"2e97a7d6ce275d5deea94b74ce25d8551202f9ba","date":1223943844,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"\tpublic void write(Writer writer, SolrQueryRequest request,\n\t\t\tSolrQueryResponse response) throws IOException {\n\t\t\n\t\t// init velocity and get template\n\t\tVelocityEngine engine = new VelocityEngine();\n\t\tFile baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n\t\tengine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n\t\tengine.setProperty(VelocityEngine.RESOURCE_LOADER, \"file\");\n\t\tTemplate template;\n\t\ttry {\n\t\t\ttemplate = engine.getTemplate(request.getParams().get(PARAMETER_TEMPLATE, \"default\") + \".vm\");\n\t\t} catch (Exception e) {\n\t\t\tthrow new IOException(e.getMessage());\n\t\t}\n\t\t\n\t\t// put raw response into context\n\t\tVelocityContext context = new VelocityContext();\n\t\tcontext.put(\"rawResponse\", new RawResponseHelper(request, response));\n\t\t\n\t\t// convert response if a class is specified\n\t\tif (request.getParams().get(PARAMETER_RESPONSE) != null) {\n\t\t\tString className = request.getParams().get(PARAMETER_RESPONSE);\n\t\t\t\n\t\t\t// create SolrResponse using reflection\n\t\t\tSolrResponse solrResponse;\n\t\t\tObject object;\n\t\t\ttry {\n\t\t\t\tobject = request.getCore().getResourceLoader().newInstance(className, \"client.solrj.response.\");\n\t\t\t} catch (RuntimeException e) {\n\t\t\t\tthrow new IOException(\"Unable to resolve response class \\\"\" + className + \"\\\": \" + e.getMessage());\n\t\t\t}\n\t\t\tif (!(object instanceof SolrResponse)) {\n\t\t\t\tthrow new IOException(\"Class \\\"\" + className + \"\\\" doesn't implement SolrResponse!\");\n\t\t\t}\n\t\t\tsolrResponse = (SolrResponse) object;\n\t\t\t\n\t\t\t// inject the request into the response\n\t\t\tsolrResponse.setResponse(new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response));\n\t\t\t\n\t\t\t// put it into the context\n\t\t\tcontext.put(\"response\", solrResponse);\n\t\t}\n\t\t\n\t\t// create output, optionally wrap it into a json object\n\t\tif (isWrappedResponse(request)) {\n\t\t\tStringWriter stringWriter = new StringWriter();\n\t\t\ttemplate.merge(context, stringWriter);\n\t\t\twriter.write(request.getParams().get(PARAMETER_JSON) + \"(\");\n\t\t\twriter.write(getJSONWrap(stringWriter.toString()));\n\t\t\twriter.write(')');\n\t\t} else {\n\t\t\ttemplate.merge(context, writer);\n\t\t}\n\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfb338f6d98c611a3fa3ecc26f27ca98d5cedd75","date":1223990351,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/request/VelocityResponseWriter#write(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"\tpublic void write(Writer writer, SolrQueryRequest request,\n\t\t\tSolrQueryResponse response) throws IOException {\n\t\t\n\t\t// init velocity and get template\n\t\tVelocityEngine engine = new VelocityEngine();\n\t\tFile baseDir = new File(request.getCore().getResourceLoader().getConfigDir(), \"velocity\");\n\t\tengine.setProperty(VelocityEngine.FILE_RESOURCE_LOADER_PATH, baseDir.getAbsolutePath());\n\t\tengine.setProperty(VelocityEngine.RESOURCE_LOADER, \"file\");\n\t\tTemplate template;\n\t\ttry {\n\t\t\ttemplate = engine.getTemplate(request.getParams().get(PARAMETER_TEMPLATE, \"default\") + \".vm\");\n\t\t} catch (Exception e) {\n\t\t\tthrow new IOException(e.getMessage());\n\t\t}\n\t\t\n\t\t// put raw response into context\n\t\tVelocityContext context = new VelocityContext();\n\t\tcontext.put(\"rawResponse\", new RawResponseHelper(request, response));\n\t\t\n\t\t// convert response if a class is specified\n\t\tif (request.getParams().get(PARAMETER_RESPONSE) != null) {\n\t\t\tString className = request.getParams().get(PARAMETER_RESPONSE);\n\t\t\t\n\t\t\t// create SolrResponse using reflection\n\t\t\tSolrResponse solrResponse;\n\t\t\tObject object;\n\t\t\ttry {\n\t\t\t\tobject = request.getCore().getResourceLoader().newInstance(className, \"client.solrj.response.\");\n\t\t\t} catch (RuntimeException e) {\n\t\t\t\tthrow new IOException(\"Unable to resolve response class \\\"\" + className + \"\\\": \" + e.getMessage());\n\t\t\t}\n\t\t\tif (!(object instanceof SolrResponse)) {\n\t\t\t\tthrow new IOException(\"Class \\\"\" + className + \"\\\" doesn't implement SolrResponse!\");\n\t\t\t}\n\t\t\tsolrResponse = (SolrResponse) object;\n\t\t\t\n\t\t\t// inject the request into the response\n\t\t\tsolrResponse.setResponse(new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response));\n\t\t\t\n\t\t\t// put it into the context\n\t\t\tcontext.put(\"response\", solrResponse);\n\t\t}\n\t\t\n\t\t// create output, optionally wrap it into a json object\n\t\tif (isWrappedResponse(request)) {\n\t\t\tStringWriter stringWriter = new StringWriter();\n\t\t\ttemplate.merge(context, stringWriter);\n\t\t\twriter.write(request.getParams().get(PARAMETER_JSON) + \"(\");\n\t\t\twriter.write(getJSONWrap(stringWriter.toString()));\n\t\t\twriter.write(')');\n\t\t} else {\n\t\t\ttemplate.merge(context, writer);\n\t\t}\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cfb338f6d98c611a3fa3ecc26f27ca98d5cedd75":["2e97a7d6ce275d5deea94b74ce25d8551202f9ba"],"2e97a7d6ce275d5deea94b74ce25d8551202f9ba":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"cfb338f6d98c611a3fa3ecc26f27ca98d5cedd75":[],"2e97a7d6ce275d5deea94b74ce25d8551202f9ba":["cfb338f6d98c611a3fa3ecc26f27ca98d5cedd75"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["2e97a7d6ce275d5deea94b74ce25d8551202f9ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cfb338f6d98c611a3fa3ecc26f27ca98d5cedd75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}