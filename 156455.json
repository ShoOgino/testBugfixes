{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#collect(DocSet,int).mjava","commits":[{"id":"9e13d0d4d8b6dc352cb304974502b9a36c153f78","date":1436492687,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#collect(DocSet,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor[FacetRequest]#collect(DocSet,int).mjava","sourceNew":"  int collect(DocSet docs, int slot) throws IOException {\n    int count = 0;\n    SolrIndexSearcher searcher = fcontext.searcher;\n\n    final List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n    final Iterator<LeafReaderContext> ctxIt = leaves.iterator();\n    LeafReaderContext ctx = null;\n    int segBase = 0;\n    int segMax;\n    int adjustedMax = 0;\n    for (DocIterator docsIt = docs.iterator(); docsIt.hasNext(); ) {\n      final int doc = docsIt.nextDoc();\n      if (doc >= adjustedMax) {\n        do {\n          ctx = ctxIt.next();\n          if (ctx == null) {\n            // should be impossible\n            throw new RuntimeException(\"INTERNAL FACET ERROR\");\n          }\n          segBase = ctx.docBase;\n          segMax = ctx.reader().maxDoc();\n          adjustedMax = segBase + segMax;\n        } while (doc >= adjustedMax);\n        assert doc >= ctx.docBase;\n        setNextReader(ctx);\n      }\n      count++;\n      collect(doc - segBase, slot);  // per-seg collectors\n    }\n    return count;\n  }\n\n","sourceOld":"  int collect(DocSet docs, int slot) throws IOException {\n    int count = 0;\n    SolrIndexSearcher searcher = fcontext.searcher;\n\n    final List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n    final Iterator<LeafReaderContext> ctxIt = leaves.iterator();\n    LeafReaderContext ctx = null;\n    int segBase = 0;\n    int segMax;\n    int adjustedMax = 0;\n    for (DocIterator docsIt = docs.iterator(); docsIt.hasNext(); ) {\n      final int doc = docsIt.nextDoc();\n      if (doc >= adjustedMax) {\n        do {\n          ctx = ctxIt.next();\n          if (ctx == null) {\n            // should be impossible\n            throw new RuntimeException(\"INTERNAL FACET ERROR\");\n          }\n          segBase = ctx.docBase;\n          segMax = ctx.reader().maxDoc();\n          adjustedMax = segBase + segMax;\n        } while (doc >= adjustedMax);\n        assert doc >= ctx.docBase;\n        setNextReader(ctx);\n      }\n      count++;\n      collect(doc - segBase, slot);  // per-seg collectors\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":5,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#collect(DocSet,int,IntFunction[SlotContext]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#collect(DocSet,int).mjava","sourceNew":"  int collect(DocSet docs, int slot, IntFunction<SlotContext> slotContext) throws IOException {\n    int count = 0;\n    SolrIndexSearcher searcher = fcontext.searcher;\n\n    if (0 == docs.size()) {\n      // we may be in a \"processEmpty\" type situation where the client still cares about this bucket\n      // either way, we should let our accumulators know about the empty set, so they can collect &\n      // compute the slot (ie: let them decide if they care even when it's size==0)\n      if (accs != null) {\n        for (SlotAcc acc : accs) {\n          acc.collect(docs, slot, slotContext); // NOT per-seg collectors\n        }\n      }\n      return count;\n    }\n    \n    final List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n    final Iterator<LeafReaderContext> ctxIt = leaves.iterator();\n    LeafReaderContext ctx = null;\n    int segBase = 0;\n    int segMax;\n    int adjustedMax = 0;\n    for (DocIterator docsIt = docs.iterator(); docsIt.hasNext(); ) {\n      final int doc = docsIt.nextDoc();\n      if (doc >= adjustedMax) {\n        do {\n          ctx = ctxIt.next();\n          if (ctx == null) {\n            // should be impossible\n            throw new RuntimeException(\"INTERNAL FACET ERROR\");\n          }\n          segBase = ctx.docBase;\n          segMax = ctx.reader().maxDoc();\n          adjustedMax = segBase + segMax;\n        } while (doc >= adjustedMax);\n        assert doc >= ctx.docBase;\n        setNextReader(ctx);\n      }\n      count++;\n      collect(doc - segBase, slot, slotContext);  // per-seg collectors\n    }\n    return count;\n  }\n\n","sourceOld":"  int collect(DocSet docs, int slot) throws IOException {\n    int count = 0;\n    SolrIndexSearcher searcher = fcontext.searcher;\n\n    final List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n    final Iterator<LeafReaderContext> ctxIt = leaves.iterator();\n    LeafReaderContext ctx = null;\n    int segBase = 0;\n    int segMax;\n    int adjustedMax = 0;\n    for (DocIterator docsIt = docs.iterator(); docsIt.hasNext(); ) {\n      final int doc = docsIt.nextDoc();\n      if (doc >= adjustedMax) {\n        do {\n          ctx = ctxIt.next();\n          if (ctx == null) {\n            // should be impossible\n            throw new RuntimeException(\"INTERNAL FACET ERROR\");\n          }\n          segBase = ctx.docBase;\n          segMax = ctx.reader().maxDoc();\n          adjustedMax = segBase + segMax;\n        } while (doc >= adjustedMax);\n        assert doc >= ctx.docBase;\n        setNextReader(ctx);\n      }\n      count++;\n      collect(doc - segBase, slot);  // per-seg collectors\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":["1c841e27891873cab110ebeb89f124a8ec470176"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["9e13d0d4d8b6dc352cb304974502b9a36c153f78"],"9e13d0d4d8b6dc352cb304974502b9a36c153f78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c705a0d590cf911e7c942df49563ca2ea176e22"]},"commit2Childs":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9e13d0d4d8b6dc352cb304974502b9a36c153f78":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e13d0d4d8b6dc352cb304974502b9a36c153f78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}