{"path":"src/test/org/apache/lucene/document/TestDateTools#testDateToolsUTC().mjava","commits":[{"id":"87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0","date":1139163422,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestDateTools#testDateToolsUTC().mjava","pathOld":"/dev/null","sourceNew":"  public void testDateToolsUTC() throws Exception {\n    // Sun, 30 Oct 2005 00:00:00 +0000 -- the last second of 2005's DST in Europe/London\n    long time = 1130630400;\n    try {\n        TimeZone.setDefault(TimeZone.getTimeZone(/* \"GMT\" */ \"Europe/London\"));\n        String d1 = DateTools.dateToString(new Date(time*1000), DateTools.Resolution.MINUTE);\n        String d2 = DateTools.dateToString(new Date((time+3600)*1000), DateTools.Resolution.MINUTE);\n        assertFalse(\"different times\", d1.equals(d2));\n        assertEquals(\"midnight\", DateTools.stringToTime(d1), time*1000);\n        assertEquals(\"later\", DateTools.stringToTime(d2), (time+3600)*1000);\n    } finally {\n        TimeZone.setDefault(null);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/document/TestDateTools#testDateToolsUTC().mjava","sourceNew":null,"sourceOld":"  public void testDateToolsUTC() throws Exception {\n    // Sun, 30 Oct 2005 00:00:00 +0000 -- the last second of 2005's DST in Europe/London\n    long time = 1130630400;\n    try {\n        TimeZone.setDefault(TimeZone.getTimeZone(/* \"GMT\" */ \"Europe/London\"));\n        String d1 = DateTools.dateToString(new Date(time*1000), DateTools.Resolution.MINUTE);\n        String d2 = DateTools.dateToString(new Date((time+3600)*1000), DateTools.Resolution.MINUTE);\n        assertFalse(\"different times\", d1.equals(d2));\n        assertEquals(\"midnight\", DateTools.stringToTime(d1), time*1000);\n        assertEquals(\"later\", DateTools.stringToTime(d2), (time+3600)*1000);\n    } finally {\n        TimeZone.setDefault(null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/document/TestDateTools#testDateToolsUTC().mjava","sourceNew":null,"sourceOld":"  public void testDateToolsUTC() throws Exception {\n    // Sun, 30 Oct 2005 00:00:00 +0000 -- the last second of 2005's DST in Europe/London\n    long time = 1130630400;\n    try {\n        TimeZone.setDefault(TimeZone.getTimeZone(/* \"GMT\" */ \"Europe/London\"));\n        String d1 = DateTools.dateToString(new Date(time*1000), DateTools.Resolution.MINUTE);\n        String d2 = DateTools.dateToString(new Date((time+3600)*1000), DateTools.Resolution.MINUTE);\n        assertFalse(\"different times\", d1.equals(d2));\n        assertEquals(\"midnight\", DateTools.stringToTime(d1), time*1000);\n        assertEquals(\"later\", DateTools.stringToTime(d2), (time+3600)*1000);\n    } finally {\n        TimeZone.setDefault(null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a61b8e7beed03e44332d4a604c53962e7d34ea17","date":1255278355,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestDateTools#testDateToolsUTC().mjava","pathOld":"/dev/null","sourceNew":"  public void testDateToolsUTC() throws Exception {\n    // Sun, 30 Oct 2005 00:00:00 +0000 -- the last second of 2005's DST in Europe/London\n    long time = 1130630400;\n    try {\n        TimeZone.setDefault(TimeZone.getTimeZone(/* \"GMT\" */ \"Europe/London\"));\n        String d1 = DateTools.dateToString(new Date(time*1000), DateTools.Resolution.MINUTE);\n        String d2 = DateTools.dateToString(new Date((time+3600)*1000), DateTools.Resolution.MINUTE);\n        assertFalse(\"different times\", d1.equals(d2));\n        assertEquals(\"midnight\", DateTools.stringToTime(d1), time*1000);\n        assertEquals(\"later\", DateTools.stringToTime(d2), (time+3600)*1000);\n    } finally {\n        TimeZone.setDefault(null);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/document/TestDateTools#testDateToolsUTC().mjava","sourceNew":null,"sourceOld":"  public void testDateToolsUTC() throws Exception {\n    // Sun, 30 Oct 2005 00:00:00 +0000 -- the last second of 2005's DST in Europe/London\n    long time = 1130630400;\n    try {\n        TimeZone.setDefault(TimeZone.getTimeZone(/* \"GMT\" */ \"Europe/London\"));\n        String d1 = DateTools.dateToString(new Date(time*1000), DateTools.Resolution.MINUTE);\n        String d2 = DateTools.dateToString(new Date((time+3600)*1000), DateTools.Resolution.MINUTE);\n        assertFalse(\"different times\", d1.equals(d2));\n        assertEquals(\"midnight\", DateTools.stringToTime(d1), time*1000);\n        assertEquals(\"later\", DateTools.stringToTime(d2), (time+3600)*1000);\n    } finally {\n        TimeZone.setDefault(null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a61b8e7beed03e44332d4a604c53962e7d34ea17":["0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a61b8e7beed03e44332d4a604c53962e7d34ea17"],"87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a61b8e7beed03e44332d4a604c53962e7d34ea17":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"0a046c0c310bc77931fc8441bd920053b607dd14":["a61b8e7beed03e44332d4a604c53962e7d34ea17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0"],"87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}