{"path":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkSubFacetStats(String).mjava","commits":[{"id":"5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba","date":1513104620,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkSubFacetStats(String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkSubFacetStats(String extraJson) throws Exception {\n    String commonJson = \"type: terms, \" + extraJson;\n    NamedList<NamedList> all_facets = (NamedList) queryServer\n      ( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"rows\" , \"0\", \"json.facet\",\n                \"{ foo : { \" + commonJson + \" field: foo_s, facet: { \" +\n                ALL_STATS_JSON + \" bar: { \" + commonJson + \" field: bar_s, facet: { \" + ALL_STATS_JSON + \"} } } } }\"\n      ) ).getResponse().get(\"facets\");\n    \n    assertNotNull(all_facets);\n\n    List<NamedList> foo_buckets = (List) ((NamedList)all_facets.get(\"foo\")).get(\"buckets\");\n\n    NamedList aaa0_Bucket = foo_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, aaa0_Bucket.size()); // val,count,facet\n    assertEquals(\"aaa0\", aaa0_Bucket.get(\"val\"));\n    assertEquals(300L, aaa0_Bucket.get(\"count\"));\n    assertEquals(-99L, aaa0_Bucket.get(\"min\"));\n    assertEquals(693L, aaa0_Bucket.get(\"max\"));\n    // assertEquals(300L, aaa0_Bucket.get(\"num_values\")); // TODO: SOLR-11695\n    // assertEquals(0L, aaa0_Bucket.get(\"missing\")); // TODO: SOLR-11695\n    assertEquals(34650.0D, aaa0_Bucket.get(\"sum\"));\n    assertEquals(115.5D, (double) aaa0_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(1.674585E7D, (double) aaa0_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(206.4493184076D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(206.1049489944D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    NamedList tail_Bucket = foo_buckets.get(5);\n    assertEquals(ALL_STATS.size() + 3, tail_Bucket.size()); // val,count,facet\n    assertEquals(\"tail\", tail_Bucket.get(\"val\"));\n    assertEquals(135L, tail_Bucket.get(\"count\"));\n    assertEquals(0L, tail_Bucket.get(\"min\"));\n    assertEquals(44L, tail_Bucket.get(\"max\"));\n    // assertEquals(90L, tail_Bucket.get(\"num_values\")); // TODO: SOLR-11695\n    // assertEquals(45L, tail_Bucket.get(\"missing\")); // TODO: SOLR-11695\n    assertEquals(1980.0D, tail_Bucket.get(\"sum\"));\n    assertEquals(22.0D, (double) tail_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(58740.0D, (double) tail_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(13.0599310011D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(12.9871731592D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    List<NamedList> tail_bar_buckets = (List) ((NamedList)tail_Bucket.get(\"bar\")).get(\"buckets\");\n   \n    NamedList tailB_Bucket = tail_bar_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 2, tailB_Bucket.size()); // val,count ... NO SUB FACETS\n    assertEquals(\"tailB\", tailB_Bucket.get(\"val\"));\n    assertEquals(17L, tailB_Bucket.get(\"count\"));\n    assertEquals(35L, tailB_Bucket.get(\"min\"));\n    assertEquals(40L, tailB_Bucket.get(\"max\"));\n    // assertEquals(12L, tailB_Bucket.get(\"num_values\")); // TODO: SOLR-11695\n    // assertEquals(5L, tailB_Bucket.get(\"missing\")); // TODO: SOLR-11695\n    assertEquals(450.0D, tailB_Bucket.get(\"sum\"));\n    assertEquals(37.5D, (double) tailB_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(16910.0D, (double) tailB_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(1.78376517D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(1.70782513D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"927e6deec13723e5fd6fb8f1e0457e8597dae15e","date":1513167013,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkSubFacetStats(String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkSubFacetStats(String extraJson) throws Exception {\n    String commonJson = \"type: terms, \" + extraJson;\n    NamedList<NamedList> all_facets = (NamedList) queryServer\n      ( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"rows\" , \"0\", \"json.facet\",\n                \"{ foo : { \" + commonJson + \" field: foo_s, facet: { \" +\n                ALL_STATS_JSON + \" bar: { \" + commonJson + \" field: bar_s, facet: { \" + ALL_STATS_JSON + \"} } } } }\"\n      ) ).getResponse().get(\"facets\");\n    \n    assertNotNull(all_facets);\n\n    List<NamedList> foo_buckets = (List) ((NamedList)all_facets.get(\"foo\")).get(\"buckets\");\n\n    NamedList aaa0_Bucket = foo_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, aaa0_Bucket.size()); // val,count,facet\n    assertEquals(\"aaa0\", aaa0_Bucket.get(\"val\"));\n    assertEquals(300L, aaa0_Bucket.get(\"count\"));\n    assertEquals(-99L, aaa0_Bucket.get(\"min\"));\n    assertEquals(693L, aaa0_Bucket.get(\"max\"));\n    // assertEquals(300L, aaa0_Bucket.get(\"num_values\")); // TODO: SOLR-11695\n    // assertEquals(0L, aaa0_Bucket.get(\"missing\")); // TODO: SOLR-11695\n    assertEquals(34650.0D, aaa0_Bucket.get(\"sum\"));\n    assertEquals(115.5D, (double) aaa0_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(1.674585E7D, (double) aaa0_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(206.4493184076D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(206.1049489944D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    NamedList tail_Bucket = foo_buckets.get(5);\n    assertEquals(ALL_STATS.size() + 3, tail_Bucket.size()); // val,count,facet\n    assertEquals(\"tail\", tail_Bucket.get(\"val\"));\n    assertEquals(135L, tail_Bucket.get(\"count\"));\n    assertEquals(0L, tail_Bucket.get(\"min\"));\n    assertEquals(44L, tail_Bucket.get(\"max\"));\n    // assertEquals(90L, tail_Bucket.get(\"num_values\")); // TODO: SOLR-11695\n    // assertEquals(45L, tail_Bucket.get(\"missing\")); // TODO: SOLR-11695\n    assertEquals(1980.0D, tail_Bucket.get(\"sum\"));\n    assertEquals(22.0D, (double) tail_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(58740.0D, (double) tail_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(13.0599310011D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(12.9871731592D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    List<NamedList> tail_bar_buckets = (List) ((NamedList)tail_Bucket.get(\"bar\")).get(\"buckets\");\n   \n    NamedList tailB_Bucket = tail_bar_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 2, tailB_Bucket.size()); // val,count ... NO SUB FACETS\n    assertEquals(\"tailB\", tailB_Bucket.get(\"val\"));\n    assertEquals(17L, tailB_Bucket.get(\"count\"));\n    assertEquals(35L, tailB_Bucket.get(\"min\"));\n    assertEquals(40L, tailB_Bucket.get(\"max\"));\n    // assertEquals(12L, tailB_Bucket.get(\"num_values\")); // TODO: SOLR-11695\n    // assertEquals(5L, tailB_Bucket.get(\"missing\")); // TODO: SOLR-11695\n    assertEquals(450.0D, tailB_Bucket.get(\"sum\"));\n    assertEquals(37.5D, (double) tailB_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(16910.0D, (double) tailB_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(1.78376517D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(1.70782513D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkSubFacetStats(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkSubFacetStats(String).mjava","sourceNew":"  private void checkSubFacetStats(String extraJson) throws Exception {\n    String commonJson = \"type: terms, \" + extraJson;\n    NamedList<NamedList> all_facets = (NamedList) queryServer\n      ( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"rows\" , \"0\", \"json.facet\",\n                \"{ foo : { \" + commonJson + \" field: foo_s, facet: { \" +\n                ALL_STATS_JSON + \" bar: { \" + commonJson + \" field: bar_s, facet: { \" + ALL_STATS_JSON +\n                // under bar, in addition to \"ALL\" simple stats, we also ask for skg...\n                \", skg : 'relatedness($skg_fore,$skg_back)' } } } } }\",\n                \"skg_fore\", STAT_FIELD+\":[0 TO 40]\", \"skg_back\", STAT_FIELD+\":[-10000 TO 10000]\"\n      ) ).getResponse().get(\"facets\");\n    \n    assertNotNull(all_facets);\n\n    List<NamedList> foo_buckets = (List) ((NamedList)all_facets.get(\"foo\")).get(\"buckets\");\n\n    NamedList aaa0_Bucket = foo_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, aaa0_Bucket.size()); // val,count,facet\n    assertEquals(\"aaa0\", aaa0_Bucket.get(\"val\"));\n    assertEquals(300L, aaa0_Bucket.get(\"count\"));\n    assertEquals(-99L, aaa0_Bucket.get(\"min\"));\n    assertEquals(693L, aaa0_Bucket.get(\"max\"));\n    // assertEquals(300L, aaa0_Bucket.get(\"num_values\")); // TODO: SOLR-11695\n    // assertEquals(0L, aaa0_Bucket.get(\"missing\")); // TODO: SOLR-11695\n    assertEquals(34650.0D, aaa0_Bucket.get(\"sum\"));\n    assertEquals(115.5D, (double) aaa0_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(1.674585E7D, (double) aaa0_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(206.4493184076D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(206.1049489944D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    NamedList tail_Bucket = foo_buckets.get(5);\n    assertEquals(ALL_STATS.size() + 3, tail_Bucket.size()); // val,count,facet\n    assertEquals(\"tail\", tail_Bucket.get(\"val\"));\n    assertEquals(135L, tail_Bucket.get(\"count\"));\n    assertEquals(0L, tail_Bucket.get(\"min\"));\n    assertEquals(44L, tail_Bucket.get(\"max\"));\n    // assertEquals(90L, tail_Bucket.get(\"num_values\")); // TODO: SOLR-11695\n    // assertEquals(45L, tail_Bucket.get(\"missing\")); // TODO: SOLR-11695\n    assertEquals(1980.0D, tail_Bucket.get(\"sum\"));\n    assertEquals(22.0D, (double) tail_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(58740.0D, (double) tail_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(13.0599310011D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(12.9871731592D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    List<NamedList> tail_bar_buckets = (List) ((NamedList)tail_Bucket.get(\"bar\")).get(\"buckets\");\n   \n    NamedList tailB_Bucket = tail_bar_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, tailB_Bucket.size()); // val,count,skg ... NO SUB FACETS\n    assertEquals(\"tailB\", tailB_Bucket.get(\"val\"));\n    assertEquals(17L, tailB_Bucket.get(\"count\"));\n    assertEquals(35L, tailB_Bucket.get(\"min\"));\n    assertEquals(40L, tailB_Bucket.get(\"max\"));\n    // assertEquals(12L, tailB_Bucket.get(\"num_values\")); // TODO: SOLR-11695\n    // assertEquals(5L, tailB_Bucket.get(\"missing\")); // TODO: SOLR-11695\n    assertEquals(450.0D, tailB_Bucket.get(\"sum\"));\n    assertEquals(37.5D, (double) tailB_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(16910.0D, (double) tailB_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(1.78376517D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(1.70782513D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    // check the SKG stats on our tailB bucket\n    NamedList tailB_skg = (NamedList) tailB_Bucket.get(\"skg\");\n    assertEquals(tailB_skg.toString(),\n                 3, tailB_skg.size()); \n    assertEquals(0.19990D,    tailB_skg.get(\"relatedness\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"foreground_popularity\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"background_popularity\"));\n    //assertEquals(12L,       tailB_skg.get(\"foreground_count\"));\n    //assertEquals(82L,       tailB_skg.get(\"foreground_size\"));\n    //assertEquals(12L,       tailB_skg.get(\"background_count\"));\n    //assertEquals(3591L,     tailB_skg.get(\"background_size\"));\n  }\n\n","sourceOld":"  private void checkSubFacetStats(String extraJson) throws Exception {\n    String commonJson = \"type: terms, \" + extraJson;\n    NamedList<NamedList> all_facets = (NamedList) queryServer\n      ( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"rows\" , \"0\", \"json.facet\",\n                \"{ foo : { \" + commonJson + \" field: foo_s, facet: { \" +\n                ALL_STATS_JSON + \" bar: { \" + commonJson + \" field: bar_s, facet: { \" + ALL_STATS_JSON + \"} } } } }\"\n      ) ).getResponse().get(\"facets\");\n    \n    assertNotNull(all_facets);\n\n    List<NamedList> foo_buckets = (List) ((NamedList)all_facets.get(\"foo\")).get(\"buckets\");\n\n    NamedList aaa0_Bucket = foo_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, aaa0_Bucket.size()); // val,count,facet\n    assertEquals(\"aaa0\", aaa0_Bucket.get(\"val\"));\n    assertEquals(300L, aaa0_Bucket.get(\"count\"));\n    assertEquals(-99L, aaa0_Bucket.get(\"min\"));\n    assertEquals(693L, aaa0_Bucket.get(\"max\"));\n    // assertEquals(300L, aaa0_Bucket.get(\"num_values\")); // TODO: SOLR-11695\n    // assertEquals(0L, aaa0_Bucket.get(\"missing\")); // TODO: SOLR-11695\n    assertEquals(34650.0D, aaa0_Bucket.get(\"sum\"));\n    assertEquals(115.5D, (double) aaa0_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(1.674585E7D, (double) aaa0_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(206.4493184076D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(206.1049489944D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    NamedList tail_Bucket = foo_buckets.get(5);\n    assertEquals(ALL_STATS.size() + 3, tail_Bucket.size()); // val,count,facet\n    assertEquals(\"tail\", tail_Bucket.get(\"val\"));\n    assertEquals(135L, tail_Bucket.get(\"count\"));\n    assertEquals(0L, tail_Bucket.get(\"min\"));\n    assertEquals(44L, tail_Bucket.get(\"max\"));\n    // assertEquals(90L, tail_Bucket.get(\"num_values\")); // TODO: SOLR-11695\n    // assertEquals(45L, tail_Bucket.get(\"missing\")); // TODO: SOLR-11695\n    assertEquals(1980.0D, tail_Bucket.get(\"sum\"));\n    assertEquals(22.0D, (double) tail_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(58740.0D, (double) tail_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(13.0599310011D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(12.9871731592D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    List<NamedList> tail_bar_buckets = (List) ((NamedList)tail_Bucket.get(\"bar\")).get(\"buckets\");\n   \n    NamedList tailB_Bucket = tail_bar_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 2, tailB_Bucket.size()); // val,count ... NO SUB FACETS\n    assertEquals(\"tailB\", tailB_Bucket.get(\"val\"));\n    assertEquals(17L, tailB_Bucket.get(\"count\"));\n    assertEquals(35L, tailB_Bucket.get(\"min\"));\n    assertEquals(40L, tailB_Bucket.get(\"max\"));\n    // assertEquals(12L, tailB_Bucket.get(\"num_values\")); // TODO: SOLR-11695\n    // assertEquals(5L, tailB_Bucket.get(\"missing\")); // TODO: SOLR-11695\n    assertEquals(450.0D, tailB_Bucket.get(\"sum\"));\n    assertEquals(37.5D, (double) tailB_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(16910.0D, (double) tailB_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(1.78376517D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(1.70782513D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ab0d0e3eeff82234ea56bd0a3bf61cc196bf316","date":1573886531,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkSubFacetStats(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkSubFacetStats(String).mjava","sourceNew":"  private void checkSubFacetStats(String extraJson) throws Exception {\n    String commonJson = \"type: terms, \" + extraJson;\n    NamedList<NamedList> all_facets = (NamedList) queryServer\n      ( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"rows\" , \"0\", \"json.facet\",\n                \"{ foo : { \" + commonJson + \" field: foo_s, facet: { \" +\n                ALL_STATS_JSON + \" bar: { \" + commonJson + \" field: bar_s, facet: { \" + ALL_STATS_JSON +\n                // under bar, in addition to \"ALL\" simple stats, we also ask for skg...\n                \", skg : 'relatedness($skg_fore,$skg_back)' } } } } }\",\n                \"skg_fore\", STAT_FIELD+\":[0 TO 40]\", \"skg_back\", STAT_FIELD+\":[-10000 TO 10000]\"\n      ) ).getResponse().get(\"facets\");\n    \n    assertNotNull(all_facets);\n\n    List<NamedList> foo_buckets = (List) ((NamedList)all_facets.get(\"foo\")).get(\"buckets\");\n\n    NamedList aaa0_Bucket = foo_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, aaa0_Bucket.size()); // val,count,facet\n    assertEquals(\"aaa0\", aaa0_Bucket.get(\"val\"));\n    assertEquals(300L, aaa0_Bucket.get(\"count\"));\n    assertEquals(-99L, aaa0_Bucket.get(\"min\"));\n    assertEquals(693L, aaa0_Bucket.get(\"max\"));\n    // assertEquals(300L, aaa0_Bucket.get(\"num_values\")); // TODO: SOLR-11695\n    assertEquals(0L, aaa0_Bucket.get(\"missing\"));\n    assertEquals(34650.0D, aaa0_Bucket.get(\"sum\"));\n    assertEquals(115.5D, (double) aaa0_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(1.674585E7D, (double) aaa0_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(206.4493184076D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(206.1049489944D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    NamedList tail_Bucket = foo_buckets.get(5);\n    assertEquals(ALL_STATS.size() + 3, tail_Bucket.size()); // val,count,facet\n    assertEquals(\"tail\", tail_Bucket.get(\"val\"));\n    assertEquals(135L, tail_Bucket.get(\"count\"));\n    assertEquals(0L, tail_Bucket.get(\"min\"));\n    assertEquals(44L, tail_Bucket.get(\"max\"));\n    // assertEquals(90L, tail_Bucket.get(\"num_values\")); // TODO: SOLR-11695\n    assertEquals(45L, tail_Bucket.get(\"missing\"));\n    assertEquals(1980.0D, tail_Bucket.get(\"sum\"));\n    assertEquals(22.0D, (double) tail_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(58740.0D, (double) tail_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(13.0599310011D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(12.9871731592D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    List<NamedList> tail_bar_buckets = (List) ((NamedList)tail_Bucket.get(\"bar\")).get(\"buckets\");\n   \n    NamedList tailB_Bucket = tail_bar_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, tailB_Bucket.size()); // val,count,skg ... NO SUB FACETS\n    assertEquals(\"tailB\", tailB_Bucket.get(\"val\"));\n    assertEquals(17L, tailB_Bucket.get(\"count\"));\n    assertEquals(35L, tailB_Bucket.get(\"min\"));\n    assertEquals(40L, tailB_Bucket.get(\"max\"));\n    // assertEquals(12L, tailB_Bucket.get(\"num_values\")); // TODO: SOLR-11695\n    assertEquals(5L, tailB_Bucket.get(\"missing\"));\n    assertEquals(450.0D, tailB_Bucket.get(\"sum\"));\n    assertEquals(37.5D, (double) tailB_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(16910.0D, (double) tailB_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(1.78376517D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(1.70782513D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    // check the SKG stats on our tailB bucket\n    NamedList tailB_skg = (NamedList) tailB_Bucket.get(\"skg\");\n    assertEquals(tailB_skg.toString(),\n                 3, tailB_skg.size()); \n    assertEquals(0.19990D,    tailB_skg.get(\"relatedness\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"foreground_popularity\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"background_popularity\"));\n    //assertEquals(12L,       tailB_skg.get(\"foreground_count\"));\n    //assertEquals(82L,       tailB_skg.get(\"foreground_size\"));\n    //assertEquals(12L,       tailB_skg.get(\"background_count\"));\n    //assertEquals(3591L,     tailB_skg.get(\"background_size\"));\n  }\n\n","sourceOld":"  private void checkSubFacetStats(String extraJson) throws Exception {\n    String commonJson = \"type: terms, \" + extraJson;\n    NamedList<NamedList> all_facets = (NamedList) queryServer\n      ( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"rows\" , \"0\", \"json.facet\",\n                \"{ foo : { \" + commonJson + \" field: foo_s, facet: { \" +\n                ALL_STATS_JSON + \" bar: { \" + commonJson + \" field: bar_s, facet: { \" + ALL_STATS_JSON +\n                // under bar, in addition to \"ALL\" simple stats, we also ask for skg...\n                \", skg : 'relatedness($skg_fore,$skg_back)' } } } } }\",\n                \"skg_fore\", STAT_FIELD+\":[0 TO 40]\", \"skg_back\", STAT_FIELD+\":[-10000 TO 10000]\"\n      ) ).getResponse().get(\"facets\");\n    \n    assertNotNull(all_facets);\n\n    List<NamedList> foo_buckets = (List) ((NamedList)all_facets.get(\"foo\")).get(\"buckets\");\n\n    NamedList aaa0_Bucket = foo_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, aaa0_Bucket.size()); // val,count,facet\n    assertEquals(\"aaa0\", aaa0_Bucket.get(\"val\"));\n    assertEquals(300L, aaa0_Bucket.get(\"count\"));\n    assertEquals(-99L, aaa0_Bucket.get(\"min\"));\n    assertEquals(693L, aaa0_Bucket.get(\"max\"));\n    // assertEquals(300L, aaa0_Bucket.get(\"num_values\")); // TODO: SOLR-11695\n    // assertEquals(0L, aaa0_Bucket.get(\"missing\")); // TODO: SOLR-11695\n    assertEquals(34650.0D, aaa0_Bucket.get(\"sum\"));\n    assertEquals(115.5D, (double) aaa0_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(1.674585E7D, (double) aaa0_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(206.4493184076D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(206.1049489944D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    NamedList tail_Bucket = foo_buckets.get(5);\n    assertEquals(ALL_STATS.size() + 3, tail_Bucket.size()); // val,count,facet\n    assertEquals(\"tail\", tail_Bucket.get(\"val\"));\n    assertEquals(135L, tail_Bucket.get(\"count\"));\n    assertEquals(0L, tail_Bucket.get(\"min\"));\n    assertEquals(44L, tail_Bucket.get(\"max\"));\n    // assertEquals(90L, tail_Bucket.get(\"num_values\")); // TODO: SOLR-11695\n    // assertEquals(45L, tail_Bucket.get(\"missing\")); // TODO: SOLR-11695\n    assertEquals(1980.0D, tail_Bucket.get(\"sum\"));\n    assertEquals(22.0D, (double) tail_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(58740.0D, (double) tail_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(13.0599310011D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(12.9871731592D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    List<NamedList> tail_bar_buckets = (List) ((NamedList)tail_Bucket.get(\"bar\")).get(\"buckets\");\n   \n    NamedList tailB_Bucket = tail_bar_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, tailB_Bucket.size()); // val,count,skg ... NO SUB FACETS\n    assertEquals(\"tailB\", tailB_Bucket.get(\"val\"));\n    assertEquals(17L, tailB_Bucket.get(\"count\"));\n    assertEquals(35L, tailB_Bucket.get(\"min\"));\n    assertEquals(40L, tailB_Bucket.get(\"max\"));\n    // assertEquals(12L, tailB_Bucket.get(\"num_values\")); // TODO: SOLR-11695\n    // assertEquals(5L, tailB_Bucket.get(\"missing\")); // TODO: SOLR-11695\n    assertEquals(450.0D, tailB_Bucket.get(\"sum\"));\n    assertEquals(37.5D, (double) tailB_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(16910.0D, (double) tailB_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(1.78376517D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(1.70782513D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    // check the SKG stats on our tailB bucket\n    NamedList tailB_skg = (NamedList) tailB_Bucket.get(\"skg\");\n    assertEquals(tailB_skg.toString(),\n                 3, tailB_skg.size()); \n    assertEquals(0.19990D,    tailB_skg.get(\"relatedness\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"foreground_popularity\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"background_popularity\"));\n    //assertEquals(12L,       tailB_skg.get(\"foreground_count\"));\n    //assertEquals(82L,       tailB_skg.get(\"foreground_size\"));\n    //assertEquals(12L,       tailB_skg.get(\"background_count\"));\n    //assertEquals(3591L,     tailB_skg.get(\"background_size\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"356bbab82e5e26b4d86a88681d48baaf6103c4fc","date":1574426780,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkSubFacetStats(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkSubFacetStats(String).mjava","sourceNew":"  private void checkSubFacetStats(String extraJson) throws Exception {\n    String commonJson = \"type: terms, \" + extraJson;\n    NamedList<NamedList> all_facets = (NamedList) queryServer\n      ( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"rows\" , \"0\", \"json.facet\",\n                \"{ foo : { \" + commonJson + \" field: foo_s, facet: { \" +\n                ALL_STATS_JSON + \" bar: { \" + commonJson + \" field: bar_s, facet: { \" + ALL_STATS_JSON +\n                // under bar, in addition to \"ALL\" simple stats, we also ask for skg...\n                \", skg : 'relatedness($skg_fore,$skg_back)' } } } } }\",\n                \"skg_fore\", STAT_FIELD+\":[0 TO 40]\", \"skg_back\", STAT_FIELD+\":[-10000 TO 10000]\"\n      ) ).getResponse().get(\"facets\");\n    \n    assertNotNull(all_facets);\n\n    List<NamedList> foo_buckets = (List) ((NamedList)all_facets.get(\"foo\")).get(\"buckets\");\n\n    NamedList aaa0_Bucket = foo_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, aaa0_Bucket.size()); // val,count,facet\n    assertEquals(\"aaa0\", aaa0_Bucket.get(\"val\"));\n    assertEquals(300L, aaa0_Bucket.get(\"count\"));\n    assertEquals(-99L, aaa0_Bucket.get(\"min\"));\n    assertEquals(693L, aaa0_Bucket.get(\"max\"));\n    assertEquals(300L, aaa0_Bucket.get(\"countvals\"));\n    assertEquals(0L, aaa0_Bucket.get(\"missing\"));\n    assertEquals(34650.0D, aaa0_Bucket.get(\"sum\"));\n    assertEquals(115.5D, (double) aaa0_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(1.674585E7D, (double) aaa0_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(206.4493184076D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(206.1049489944D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    NamedList tail_Bucket = foo_buckets.get(5);\n    assertEquals(ALL_STATS.size() + 3, tail_Bucket.size()); // val,count,facet\n    assertEquals(\"tail\", tail_Bucket.get(\"val\"));\n    assertEquals(135L, tail_Bucket.get(\"count\"));\n    assertEquals(0L, tail_Bucket.get(\"min\"));\n    assertEquals(44L, tail_Bucket.get(\"max\"));\n    assertEquals(90L, tail_Bucket.get(\"countvals\"));\n    assertEquals(45L, tail_Bucket.get(\"missing\"));\n    assertEquals(1980.0D, tail_Bucket.get(\"sum\"));\n    assertEquals(22.0D, (double) tail_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(58740.0D, (double) tail_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(13.0599310011D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(12.9871731592D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    List<NamedList> tail_bar_buckets = (List) ((NamedList)tail_Bucket.get(\"bar\")).get(\"buckets\");\n   \n    NamedList tailB_Bucket = tail_bar_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, tailB_Bucket.size()); // val,count,skg ... NO SUB FACETS\n    assertEquals(\"tailB\", tailB_Bucket.get(\"val\"));\n    assertEquals(17L, tailB_Bucket.get(\"count\"));\n    assertEquals(35L, tailB_Bucket.get(\"min\"));\n    assertEquals(40L, tailB_Bucket.get(\"max\"));\n    assertEquals(12L, tailB_Bucket.get(\"countvals\"));\n    assertEquals(5L, tailB_Bucket.get(\"missing\"));\n    assertEquals(450.0D, tailB_Bucket.get(\"sum\"));\n    assertEquals(37.5D, (double) tailB_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(16910.0D, (double) tailB_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(1.78376517D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(1.70782513D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    // check the SKG stats on our tailB bucket\n    NamedList tailB_skg = (NamedList) tailB_Bucket.get(\"skg\");\n    assertEquals(tailB_skg.toString(),\n                 3, tailB_skg.size()); \n    assertEquals(0.19990D,    tailB_skg.get(\"relatedness\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"foreground_popularity\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"background_popularity\"));\n    //assertEquals(12L,       tailB_skg.get(\"foreground_count\"));\n    //assertEquals(82L,       tailB_skg.get(\"foreground_size\"));\n    //assertEquals(12L,       tailB_skg.get(\"background_count\"));\n    //assertEquals(3591L,     tailB_skg.get(\"background_size\"));\n  }\n\n","sourceOld":"  private void checkSubFacetStats(String extraJson) throws Exception {\n    String commonJson = \"type: terms, \" + extraJson;\n    NamedList<NamedList> all_facets = (NamedList) queryServer\n      ( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"rows\" , \"0\", \"json.facet\",\n                \"{ foo : { \" + commonJson + \" field: foo_s, facet: { \" +\n                ALL_STATS_JSON + \" bar: { \" + commonJson + \" field: bar_s, facet: { \" + ALL_STATS_JSON +\n                // under bar, in addition to \"ALL\" simple stats, we also ask for skg...\n                \", skg : 'relatedness($skg_fore,$skg_back)' } } } } }\",\n                \"skg_fore\", STAT_FIELD+\":[0 TO 40]\", \"skg_back\", STAT_FIELD+\":[-10000 TO 10000]\"\n      ) ).getResponse().get(\"facets\");\n    \n    assertNotNull(all_facets);\n\n    List<NamedList> foo_buckets = (List) ((NamedList)all_facets.get(\"foo\")).get(\"buckets\");\n\n    NamedList aaa0_Bucket = foo_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, aaa0_Bucket.size()); // val,count,facet\n    assertEquals(\"aaa0\", aaa0_Bucket.get(\"val\"));\n    assertEquals(300L, aaa0_Bucket.get(\"count\"));\n    assertEquals(-99L, aaa0_Bucket.get(\"min\"));\n    assertEquals(693L, aaa0_Bucket.get(\"max\"));\n    // assertEquals(300L, aaa0_Bucket.get(\"num_values\")); // TODO: SOLR-11695\n    assertEquals(0L, aaa0_Bucket.get(\"missing\"));\n    assertEquals(34650.0D, aaa0_Bucket.get(\"sum\"));\n    assertEquals(115.5D, (double) aaa0_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(1.674585E7D, (double) aaa0_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(206.4493184076D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(206.1049489944D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    NamedList tail_Bucket = foo_buckets.get(5);\n    assertEquals(ALL_STATS.size() + 3, tail_Bucket.size()); // val,count,facet\n    assertEquals(\"tail\", tail_Bucket.get(\"val\"));\n    assertEquals(135L, tail_Bucket.get(\"count\"));\n    assertEquals(0L, tail_Bucket.get(\"min\"));\n    assertEquals(44L, tail_Bucket.get(\"max\"));\n    // assertEquals(90L, tail_Bucket.get(\"num_values\")); // TODO: SOLR-11695\n    assertEquals(45L, tail_Bucket.get(\"missing\"));\n    assertEquals(1980.0D, tail_Bucket.get(\"sum\"));\n    assertEquals(22.0D, (double) tail_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(58740.0D, (double) tail_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(13.0599310011D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(12.9871731592D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    List<NamedList> tail_bar_buckets = (List) ((NamedList)tail_Bucket.get(\"bar\")).get(\"buckets\");\n   \n    NamedList tailB_Bucket = tail_bar_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, tailB_Bucket.size()); // val,count,skg ... NO SUB FACETS\n    assertEquals(\"tailB\", tailB_Bucket.get(\"val\"));\n    assertEquals(17L, tailB_Bucket.get(\"count\"));\n    assertEquals(35L, tailB_Bucket.get(\"min\"));\n    assertEquals(40L, tailB_Bucket.get(\"max\"));\n    // assertEquals(12L, tailB_Bucket.get(\"num_values\")); // TODO: SOLR-11695\n    assertEquals(5L, tailB_Bucket.get(\"missing\"));\n    assertEquals(450.0D, tailB_Bucket.get(\"sum\"));\n    assertEquals(37.5D, (double) tailB_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(16910.0D, (double) tailB_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(1.78376517D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(1.70782513D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    // check the SKG stats on our tailB bucket\n    NamedList tailB_skg = (NamedList) tailB_Bucket.get(\"skg\");\n    assertEquals(tailB_skg.toString(),\n                 3, tailB_skg.size()); \n    assertEquals(0.19990D,    tailB_skg.get(\"relatedness\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"foreground_popularity\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"background_popularity\"));\n    //assertEquals(12L,       tailB_skg.get(\"foreground_count\"));\n    //assertEquals(82L,       tailB_skg.get(\"foreground_size\"));\n    //assertEquals(12L,       tailB_skg.get(\"background_count\"));\n    //assertEquals(3591L,     tailB_skg.get(\"background_size\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fa9270995767ab6c92b235a5a62267aa426f47d","date":1575523102,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkSubFacetStats(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkSubFacetStats(String).mjava","sourceNew":"  private void checkSubFacetStats(String extraJson) throws Exception {\n    String commonJson = \"type: terms, \" + extraJson;\n    NamedList<NamedList> all_facets = (NamedList) queryServer\n      ( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"rows\" , \"0\", \"json.facet\",\n                \"{ foo : { \" + commonJson + \" field: foo_s, facet: { \" +\n                ALL_STATS_JSON + \" bar: { \" + commonJson + \" field: bar_s, facet: { \" + ALL_STATS_JSON +\n                // under bar, in addition to \"ALL\" simple stats, we also ask for skg...\n                \", skg : 'relatedness($skg_fore,$skg_back)' } } } } }\",\n                \"skg_fore\", STAT_FIELD+\":[0 TO 40]\", \"skg_back\", STAT_FIELD+\":[-10000 TO 10000]\"\n      ) ).getResponse().get(\"facets\");\n    \n    assertNotNull(all_facets);\n\n    List<NamedList> foo_buckets = (List) ((NamedList)all_facets.get(\"foo\")).get(\"buckets\");\n\n    NamedList aaa0_Bucket = foo_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, aaa0_Bucket.size()); // val,count,facet\n    assertEquals(\"aaa0\", aaa0_Bucket.get(\"val\"));\n    assertEquals(300L, aaa0_Bucket.get(\"count\"));\n    assertEquals(-99L, aaa0_Bucket.get(\"min\"));\n    assertEquals(693L, aaa0_Bucket.get(\"max\"));\n    assertEquals(300L, aaa0_Bucket.get(\"countvals\"));\n    assertEquals(0L, aaa0_Bucket.get(\"missing\"));\n    assertEquals(34650.0D, aaa0_Bucket.get(\"sum\"));\n    assertEquals(483.70000000000016D, (double)aaa0_Bucket.get(\"percentile\"), 0.1E-7);\n    assertEquals(115.5D, (double) aaa0_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(1.674585E7D, (double) aaa0_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(206.4493184076D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(206.1049489944D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    NamedList tail_Bucket = foo_buckets.get(5);\n    assertEquals(ALL_STATS.size() + 3, tail_Bucket.size()); // val,count,facet\n    assertEquals(\"tail\", tail_Bucket.get(\"val\"));\n    assertEquals(135L, tail_Bucket.get(\"count\"));\n    assertEquals(0L, tail_Bucket.get(\"min\"));\n    assertEquals(44L, tail_Bucket.get(\"max\"));\n    assertEquals(90L, tail_Bucket.get(\"countvals\"));\n    assertEquals(40.0D, tail_Bucket.get(\"percentile\"));\n    assertEquals(45L, tail_Bucket.get(\"missing\"));\n    assertEquals(1980.0D, tail_Bucket.get(\"sum\"));\n    assertEquals(22.0D, (double) tail_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(58740.0D, (double) tail_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(13.0599310011D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(12.9871731592D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    List<NamedList> tail_bar_buckets = (List) ((NamedList)tail_Bucket.get(\"bar\")).get(\"buckets\");\n   \n    NamedList tailB_Bucket = tail_bar_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, tailB_Bucket.size()); // val,count,skg ... NO SUB FACETS\n    assertEquals(\"tailB\", tailB_Bucket.get(\"val\"));\n    assertEquals(17L, tailB_Bucket.get(\"count\"));\n    assertEquals(35L, tailB_Bucket.get(\"min\"));\n    assertEquals(40L, tailB_Bucket.get(\"max\"));\n    assertEquals(12L, tailB_Bucket.get(\"countvals\"));\n    assertEquals(39.9D, tailB_Bucket.get(\"percentile\"));\n    assertEquals(5L, tailB_Bucket.get(\"missing\"));\n    assertEquals(450.0D, tailB_Bucket.get(\"sum\"));\n    assertEquals(37.5D, (double) tailB_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(16910.0D, (double) tailB_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(1.78376517D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(1.70782513D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    // check the SKG stats on our tailB bucket\n    NamedList tailB_skg = (NamedList) tailB_Bucket.get(\"skg\");\n    assertEquals(tailB_skg.toString(),\n                 3, tailB_skg.size()); \n    assertEquals(0.19990D,    tailB_skg.get(\"relatedness\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"foreground_popularity\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"background_popularity\"));\n    //assertEquals(12L,       tailB_skg.get(\"foreground_count\"));\n    //assertEquals(82L,       tailB_skg.get(\"foreground_size\"));\n    //assertEquals(12L,       tailB_skg.get(\"background_count\"));\n    //assertEquals(3591L,     tailB_skg.get(\"background_size\"));\n  }\n\n","sourceOld":"  private void checkSubFacetStats(String extraJson) throws Exception {\n    String commonJson = \"type: terms, \" + extraJson;\n    NamedList<NamedList> all_facets = (NamedList) queryServer\n      ( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"rows\" , \"0\", \"json.facet\",\n                \"{ foo : { \" + commonJson + \" field: foo_s, facet: { \" +\n                ALL_STATS_JSON + \" bar: { \" + commonJson + \" field: bar_s, facet: { \" + ALL_STATS_JSON +\n                // under bar, in addition to \"ALL\" simple stats, we also ask for skg...\n                \", skg : 'relatedness($skg_fore,$skg_back)' } } } } }\",\n                \"skg_fore\", STAT_FIELD+\":[0 TO 40]\", \"skg_back\", STAT_FIELD+\":[-10000 TO 10000]\"\n      ) ).getResponse().get(\"facets\");\n    \n    assertNotNull(all_facets);\n\n    List<NamedList> foo_buckets = (List) ((NamedList)all_facets.get(\"foo\")).get(\"buckets\");\n\n    NamedList aaa0_Bucket = foo_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, aaa0_Bucket.size()); // val,count,facet\n    assertEquals(\"aaa0\", aaa0_Bucket.get(\"val\"));\n    assertEquals(300L, aaa0_Bucket.get(\"count\"));\n    assertEquals(-99L, aaa0_Bucket.get(\"min\"));\n    assertEquals(693L, aaa0_Bucket.get(\"max\"));\n    assertEquals(300L, aaa0_Bucket.get(\"countvals\"));\n    assertEquals(0L, aaa0_Bucket.get(\"missing\"));\n    assertEquals(34650.0D, aaa0_Bucket.get(\"sum\"));\n    assertEquals(115.5D, (double) aaa0_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(1.674585E7D, (double) aaa0_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(206.4493184076D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(206.1049489944D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    NamedList tail_Bucket = foo_buckets.get(5);\n    assertEquals(ALL_STATS.size() + 3, tail_Bucket.size()); // val,count,facet\n    assertEquals(\"tail\", tail_Bucket.get(\"val\"));\n    assertEquals(135L, tail_Bucket.get(\"count\"));\n    assertEquals(0L, tail_Bucket.get(\"min\"));\n    assertEquals(44L, tail_Bucket.get(\"max\"));\n    assertEquals(90L, tail_Bucket.get(\"countvals\"));\n    assertEquals(45L, tail_Bucket.get(\"missing\"));\n    assertEquals(1980.0D, tail_Bucket.get(\"sum\"));\n    assertEquals(22.0D, (double) tail_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(58740.0D, (double) tail_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(13.0599310011D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(12.9871731592D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    List<NamedList> tail_bar_buckets = (List) ((NamedList)tail_Bucket.get(\"bar\")).get(\"buckets\");\n   \n    NamedList tailB_Bucket = tail_bar_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, tailB_Bucket.size()); // val,count,skg ... NO SUB FACETS\n    assertEquals(\"tailB\", tailB_Bucket.get(\"val\"));\n    assertEquals(17L, tailB_Bucket.get(\"count\"));\n    assertEquals(35L, tailB_Bucket.get(\"min\"));\n    assertEquals(40L, tailB_Bucket.get(\"max\"));\n    assertEquals(12L, tailB_Bucket.get(\"countvals\"));\n    assertEquals(5L, tailB_Bucket.get(\"missing\"));\n    assertEquals(450.0D, tailB_Bucket.get(\"sum\"));\n    assertEquals(37.5D, (double) tailB_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(16910.0D, (double) tailB_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(1.78376517D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(1.70782513D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    // check the SKG stats on our tailB bucket\n    NamedList tailB_skg = (NamedList) tailB_Bucket.get(\"skg\");\n    assertEquals(tailB_skg.toString(),\n                 3, tailB_skg.size()); \n    assertEquals(0.19990D,    tailB_skg.get(\"relatedness\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"foreground_popularity\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"background_popularity\"));\n    //assertEquals(12L,       tailB_skg.get(\"foreground_count\"));\n    //assertEquals(82L,       tailB_skg.get(\"foreground_size\"));\n    //assertEquals(12L,       tailB_skg.get(\"background_count\"));\n    //assertEquals(3591L,     tailB_skg.get(\"background_size\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a90f561fc609ec007ba18b10dea9191dbbd71831","date":1575541054,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkSubFacetStats(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkSubFacetStats(String).mjava","sourceNew":"  private void checkSubFacetStats(String extraJson) throws Exception {\n    String commonJson = \"type: terms, \" + extraJson;\n    NamedList<NamedList> all_facets = (NamedList) queryServer\n      ( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"rows\" , \"0\", \"json.facet\",\n                \"{ foo : { \" + commonJson + \" field: foo_s, facet: { \" +\n                ALL_STATS_JSON + \" bar: { \" + commonJson + \" field: bar_s, facet: { \" + ALL_STATS_JSON +\n                // under bar, in addition to \"ALL\" simple stats, we also ask for skg...\n                \", skg : 'relatedness($skg_fore,$skg_back)' } } } } }\",\n                \"skg_fore\", STAT_FIELD+\":[0 TO 40]\", \"skg_back\", STAT_FIELD+\":[-10000 TO 10000]\"\n      ) ).getResponse().get(\"facets\");\n    \n    assertNotNull(all_facets);\n\n    List<NamedList> foo_buckets = (List) ((NamedList)all_facets.get(\"foo\")).get(\"buckets\");\n\n    NamedList aaa0_Bucket = foo_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, aaa0_Bucket.size()); // val,count,facet\n    assertEquals(\"aaa0\", aaa0_Bucket.get(\"val\"));\n    assertEquals(300L, aaa0_Bucket.get(\"count\"));\n    assertEquals(-99L, aaa0_Bucket.get(\"min\"));\n    assertEquals(693L, aaa0_Bucket.get(\"max\"));\n    assertEquals(300L, aaa0_Bucket.get(\"countvals\"));\n    assertEquals(0L, aaa0_Bucket.get(\"missing\"));\n    assertEquals(34650.0D, aaa0_Bucket.get(\"sum\"));\n    assertEquals(483.70000000000016D, (double)aaa0_Bucket.get(\"percentile\"), 0.1E-7);\n    assertEquals(115.5D, (double) aaa0_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(1.674585E7D, (double) aaa0_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(206.4493184076D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(206.1049489944D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    NamedList tail_Bucket = foo_buckets.get(5);\n    assertEquals(ALL_STATS.size() + 3, tail_Bucket.size()); // val,count,facet\n    assertEquals(\"tail\", tail_Bucket.get(\"val\"));\n    assertEquals(135L, tail_Bucket.get(\"count\"));\n    assertEquals(0L, tail_Bucket.get(\"min\"));\n    assertEquals(44L, tail_Bucket.get(\"max\"));\n    assertEquals(90L, tail_Bucket.get(\"countvals\"));\n    assertEquals(40.0D, tail_Bucket.get(\"percentile\"));\n    assertEquals(45L, tail_Bucket.get(\"missing\"));\n    assertEquals(1980.0D, tail_Bucket.get(\"sum\"));\n    assertEquals(22.0D, (double) tail_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(58740.0D, (double) tail_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(13.0599310011D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(12.9871731592D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    List<NamedList> tail_bar_buckets = (List) ((NamedList)tail_Bucket.get(\"bar\")).get(\"buckets\");\n   \n    NamedList tailB_Bucket = tail_bar_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, tailB_Bucket.size()); // val,count,skg ... NO SUB FACETS\n    assertEquals(\"tailB\", tailB_Bucket.get(\"val\"));\n    assertEquals(17L, tailB_Bucket.get(\"count\"));\n    assertEquals(35L, tailB_Bucket.get(\"min\"));\n    assertEquals(40L, tailB_Bucket.get(\"max\"));\n    assertEquals(12L, tailB_Bucket.get(\"countvals\"));\n    assertEquals(39.9D, tailB_Bucket.get(\"percentile\"));\n    assertEquals(5L, tailB_Bucket.get(\"missing\"));\n    assertEquals(450.0D, tailB_Bucket.get(\"sum\"));\n    assertEquals(37.5D, (double) tailB_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(16910.0D, (double) tailB_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(1.78376517D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(1.70782513D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    // check the SKG stats on our tailB bucket\n    NamedList tailB_skg = (NamedList) tailB_Bucket.get(\"skg\");\n    assertEquals(tailB_skg.toString(),\n                 3, tailB_skg.size()); \n    assertEquals(0.19990D,    tailB_skg.get(\"relatedness\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"foreground_popularity\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"background_popularity\"));\n    //assertEquals(12L,       tailB_skg.get(\"foreground_count\"));\n    //assertEquals(82L,       tailB_skg.get(\"foreground_size\"));\n    //assertEquals(12L,       tailB_skg.get(\"background_count\"));\n    //assertEquals(3591L,     tailB_skg.get(\"background_size\"));\n  }\n\n","sourceOld":"  private void checkSubFacetStats(String extraJson) throws Exception {\n    String commonJson = \"type: terms, \" + extraJson;\n    NamedList<NamedList> all_facets = (NamedList) queryServer\n      ( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"rows\" , \"0\", \"json.facet\",\n                \"{ foo : { \" + commonJson + \" field: foo_s, facet: { \" +\n                ALL_STATS_JSON + \" bar: { \" + commonJson + \" field: bar_s, facet: { \" + ALL_STATS_JSON +\n                // under bar, in addition to \"ALL\" simple stats, we also ask for skg...\n                \", skg : 'relatedness($skg_fore,$skg_back)' } } } } }\",\n                \"skg_fore\", STAT_FIELD+\":[0 TO 40]\", \"skg_back\", STAT_FIELD+\":[-10000 TO 10000]\"\n      ) ).getResponse().get(\"facets\");\n    \n    assertNotNull(all_facets);\n\n    List<NamedList> foo_buckets = (List) ((NamedList)all_facets.get(\"foo\")).get(\"buckets\");\n\n    NamedList aaa0_Bucket = foo_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, aaa0_Bucket.size()); // val,count,facet\n    assertEquals(\"aaa0\", aaa0_Bucket.get(\"val\"));\n    assertEquals(300L, aaa0_Bucket.get(\"count\"));\n    assertEquals(-99L, aaa0_Bucket.get(\"min\"));\n    assertEquals(693L, aaa0_Bucket.get(\"max\"));\n    assertEquals(300L, aaa0_Bucket.get(\"countvals\"));\n    assertEquals(0L, aaa0_Bucket.get(\"missing\"));\n    assertEquals(34650.0D, aaa0_Bucket.get(\"sum\"));\n    assertEquals(115.5D, (double) aaa0_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(1.674585E7D, (double) aaa0_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(206.4493184076D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(206.1049489944D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    NamedList tail_Bucket = foo_buckets.get(5);\n    assertEquals(ALL_STATS.size() + 3, tail_Bucket.size()); // val,count,facet\n    assertEquals(\"tail\", tail_Bucket.get(\"val\"));\n    assertEquals(135L, tail_Bucket.get(\"count\"));\n    assertEquals(0L, tail_Bucket.get(\"min\"));\n    assertEquals(44L, tail_Bucket.get(\"max\"));\n    assertEquals(90L, tail_Bucket.get(\"countvals\"));\n    assertEquals(45L, tail_Bucket.get(\"missing\"));\n    assertEquals(1980.0D, tail_Bucket.get(\"sum\"));\n    assertEquals(22.0D, (double) tail_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(58740.0D, (double) tail_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(13.0599310011D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(12.9871731592D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    List<NamedList> tail_bar_buckets = (List) ((NamedList)tail_Bucket.get(\"bar\")).get(\"buckets\");\n   \n    NamedList tailB_Bucket = tail_bar_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, tailB_Bucket.size()); // val,count,skg ... NO SUB FACETS\n    assertEquals(\"tailB\", tailB_Bucket.get(\"val\"));\n    assertEquals(17L, tailB_Bucket.get(\"count\"));\n    assertEquals(35L, tailB_Bucket.get(\"min\"));\n    assertEquals(40L, tailB_Bucket.get(\"max\"));\n    assertEquals(12L, tailB_Bucket.get(\"countvals\"));\n    assertEquals(5L, tailB_Bucket.get(\"missing\"));\n    assertEquals(450.0D, tailB_Bucket.get(\"sum\"));\n    assertEquals(37.5D, (double) tailB_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(16910.0D, (double) tailB_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(1.78376517D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(1.70782513D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    // check the SKG stats on our tailB bucket\n    NamedList tailB_skg = (NamedList) tailB_Bucket.get(\"skg\");\n    assertEquals(tailB_skg.toString(),\n                 3, tailB_skg.size()); \n    assertEquals(0.19990D,    tailB_skg.get(\"relatedness\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"foreground_popularity\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"background_popularity\"));\n    //assertEquals(12L,       tailB_skg.get(\"foreground_count\"));\n    //assertEquals(82L,       tailB_skg.get(\"foreground_size\"));\n    //assertEquals(12L,       tailB_skg.get(\"background_count\"));\n    //assertEquals(3591L,     tailB_skg.get(\"background_size\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8b2f4669f58c62f64c1de0df0908bd214f1f729","date":1575782377,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkSubFacetStats(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkSubFacetStats(String).mjava","sourceNew":"  private void checkSubFacetStats(String extraJson) throws Exception {\n    String commonJson = \"type: terms, \" + extraJson;\n    NamedList<NamedList> all_facets = (NamedList) queryServer\n      ( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"rows\" , \"0\", \"json.facet\",\n                \"{ foo : { \" + commonJson + \" field: foo_s, facet: { \" +\n                ALL_STATS_JSON + \" bar: { \" + commonJson + \" field: bar_s, facet: { \" + ALL_STATS_JSON +\n                // under bar, in addition to \"ALL\" simple stats, we also ask for skg...\n                \", skg : 'relatedness($skg_fore,$skg_back)' } } } } }\",\n                \"skg_fore\", STAT_FIELD+\":[0 TO 40]\", \"skg_back\", STAT_FIELD+\":[-10000 TO 10000]\"\n      ) ).getResponse().get(\"facets\");\n    \n    assertNotNull(all_facets);\n\n    List<NamedList> foo_buckets = (List) ((NamedList)all_facets.get(\"foo\")).get(\"buckets\");\n\n    NamedList aaa0_Bucket = foo_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, aaa0_Bucket.size()); // val,count,facet\n    assertEquals(\"aaa0\", aaa0_Bucket.get(\"val\"));\n    assertEquals(300L, aaa0_Bucket.get(\"count\"));\n    assertEquals(-99L, aaa0_Bucket.get(\"min\"));\n    assertEquals(693L, aaa0_Bucket.get(\"max\"));\n    assertEquals(300L, aaa0_Bucket.get(\"countvals\"));\n    assertEquals(0L, aaa0_Bucket.get(\"missing\"));\n    assertEquals(34650.0D, aaa0_Bucket.get(\"sum\"));\n    assertEquals(483.70000000000016D, (double)aaa0_Bucket.get(\"percentile\"), 0.1E-7);\n    assertEquals(115.5D, (double) aaa0_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(1.674585E7D, (double) aaa0_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(206.4493184076D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    // assertEquals(42621.32107023412D, (double) aaa0_Bucket.get(\"variance\"), 0.1E-7);  // TODO: SOLR-11725\n    assertEquals(206.1049489944D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n    assertEquals(42479.25D, (double) aaa0_Bucket.get(\"variance\"), 0.1E-7); // json.facet is using the \"uncorrected variance\"\n    assertEquals(284L, aaa0_Bucket.get(\"unique\"));\n    assertEquals(284L, aaa0_Bucket.get(\"hll\"));\n\n    NamedList tail_Bucket = foo_buckets.get(5);\n    assertEquals(ALL_STATS.size() + 3, tail_Bucket.size()); // val,count,facet\n    assertEquals(\"tail\", tail_Bucket.get(\"val\"));\n    assertEquals(135L, tail_Bucket.get(\"count\"));\n    assertEquals(0L, tail_Bucket.get(\"min\"));\n    assertEquals(44L, tail_Bucket.get(\"max\"));\n    assertEquals(90L, tail_Bucket.get(\"countvals\"));\n    assertEquals(40.0D, tail_Bucket.get(\"percentile\"));\n    assertEquals(45L, tail_Bucket.get(\"missing\"));\n    assertEquals(1980.0D, tail_Bucket.get(\"sum\"));\n    assertEquals(22.0D, (double) tail_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(58740.0D, (double) tail_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(13.0599310011D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    // assertEquals(170.5617977535D, (double) tail_Bucket.get(\"variance\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(12.9871731592D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n    assertEquals(168.666666667D, (double) tail_Bucket.get(\"variance\"), 0.1E-7); // json.facet is using the \"uncorrected variance\"\n    assertEquals(45L, tail_Bucket.get(\"unique\"));\n    assertEquals(45L, tail_Bucket.get(\"hll\"));\n\n    List<NamedList> tail_bar_buckets = (List) ((NamedList)tail_Bucket.get(\"bar\")).get(\"buckets\");\n   \n    NamedList tailB_Bucket = tail_bar_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, tailB_Bucket.size()); // val,count,skg ... NO SUB FACETS\n    assertEquals(\"tailB\", tailB_Bucket.get(\"val\"));\n    assertEquals(17L, tailB_Bucket.get(\"count\"));\n    assertEquals(35L, tailB_Bucket.get(\"min\"));\n    assertEquals(40L, tailB_Bucket.get(\"max\"));\n    assertEquals(12L, tailB_Bucket.get(\"countvals\"));\n    assertEquals(39.9D, tailB_Bucket.get(\"percentile\"));\n    assertEquals(5L, tailB_Bucket.get(\"missing\"));\n    assertEquals(450.0D, tailB_Bucket.get(\"sum\"));\n    assertEquals(37.5D, (double) tailB_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(16910.0D, (double) tailB_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(1.78376517D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    // assertEquals(3.1818181817D, (double) tailB_Bucket.get(\"variance\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(1.70782513D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n    assertEquals(2.9166666747D, (double) tailB_Bucket.get(\"variance\"), 0.1E-7); // json.facet is using the \"uncorrected variance\"\n    assertEquals(6L, tailB_Bucket.get(\"unique\"));\n    assertEquals(6L, tailB_Bucket.get(\"hll\"));\n\n    // check the SKG stats on our tailB bucket\n    NamedList tailB_skg = (NamedList) tailB_Bucket.get(\"skg\");\n    assertEquals(tailB_skg.toString(),\n                 3, tailB_skg.size()); \n    assertEquals(0.19990D,    tailB_skg.get(\"relatedness\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"foreground_popularity\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"background_popularity\"));\n    //assertEquals(12L,       tailB_skg.get(\"foreground_count\"));\n    //assertEquals(82L,       tailB_skg.get(\"foreground_size\"));\n    //assertEquals(12L,       tailB_skg.get(\"background_count\"));\n    //assertEquals(3591L,     tailB_skg.get(\"background_size\"));\n  }\n\n","sourceOld":"  private void checkSubFacetStats(String extraJson) throws Exception {\n    String commonJson = \"type: terms, \" + extraJson;\n    NamedList<NamedList> all_facets = (NamedList) queryServer\n      ( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"rows\" , \"0\", \"json.facet\",\n                \"{ foo : { \" + commonJson + \" field: foo_s, facet: { \" +\n                ALL_STATS_JSON + \" bar: { \" + commonJson + \" field: bar_s, facet: { \" + ALL_STATS_JSON +\n                // under bar, in addition to \"ALL\" simple stats, we also ask for skg...\n                \", skg : 'relatedness($skg_fore,$skg_back)' } } } } }\",\n                \"skg_fore\", STAT_FIELD+\":[0 TO 40]\", \"skg_back\", STAT_FIELD+\":[-10000 TO 10000]\"\n      ) ).getResponse().get(\"facets\");\n    \n    assertNotNull(all_facets);\n\n    List<NamedList> foo_buckets = (List) ((NamedList)all_facets.get(\"foo\")).get(\"buckets\");\n\n    NamedList aaa0_Bucket = foo_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, aaa0_Bucket.size()); // val,count,facet\n    assertEquals(\"aaa0\", aaa0_Bucket.get(\"val\"));\n    assertEquals(300L, aaa0_Bucket.get(\"count\"));\n    assertEquals(-99L, aaa0_Bucket.get(\"min\"));\n    assertEquals(693L, aaa0_Bucket.get(\"max\"));\n    assertEquals(300L, aaa0_Bucket.get(\"countvals\"));\n    assertEquals(0L, aaa0_Bucket.get(\"missing\"));\n    assertEquals(34650.0D, aaa0_Bucket.get(\"sum\"));\n    assertEquals(483.70000000000016D, (double)aaa0_Bucket.get(\"percentile\"), 0.1E-7);\n    assertEquals(115.5D, (double) aaa0_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(1.674585E7D, (double) aaa0_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(206.4493184076D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(206.1049489944D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    NamedList tail_Bucket = foo_buckets.get(5);\n    assertEquals(ALL_STATS.size() + 3, tail_Bucket.size()); // val,count,facet\n    assertEquals(\"tail\", tail_Bucket.get(\"val\"));\n    assertEquals(135L, tail_Bucket.get(\"count\"));\n    assertEquals(0L, tail_Bucket.get(\"min\"));\n    assertEquals(44L, tail_Bucket.get(\"max\"));\n    assertEquals(90L, tail_Bucket.get(\"countvals\"));\n    assertEquals(40.0D, tail_Bucket.get(\"percentile\"));\n    assertEquals(45L, tail_Bucket.get(\"missing\"));\n    assertEquals(1980.0D, tail_Bucket.get(\"sum\"));\n    assertEquals(22.0D, (double) tail_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(58740.0D, (double) tail_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(13.0599310011D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(12.9871731592D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    List<NamedList> tail_bar_buckets = (List) ((NamedList)tail_Bucket.get(\"bar\")).get(\"buckets\");\n   \n    NamedList tailB_Bucket = tail_bar_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, tailB_Bucket.size()); // val,count,skg ... NO SUB FACETS\n    assertEquals(\"tailB\", tailB_Bucket.get(\"val\"));\n    assertEquals(17L, tailB_Bucket.get(\"count\"));\n    assertEquals(35L, tailB_Bucket.get(\"min\"));\n    assertEquals(40L, tailB_Bucket.get(\"max\"));\n    assertEquals(12L, tailB_Bucket.get(\"countvals\"));\n    assertEquals(39.9D, tailB_Bucket.get(\"percentile\"));\n    assertEquals(5L, tailB_Bucket.get(\"missing\"));\n    assertEquals(450.0D, tailB_Bucket.get(\"sum\"));\n    assertEquals(37.5D, (double) tailB_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(16910.0D, (double) tailB_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(1.78376517D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(1.70782513D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    // check the SKG stats on our tailB bucket\n    NamedList tailB_skg = (NamedList) tailB_Bucket.get(\"skg\");\n    assertEquals(tailB_skg.toString(),\n                 3, tailB_skg.size()); \n    assertEquals(0.19990D,    tailB_skg.get(\"relatedness\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"foreground_popularity\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"background_popularity\"));\n    //assertEquals(12L,       tailB_skg.get(\"foreground_count\"));\n    //assertEquals(82L,       tailB_skg.get(\"foreground_size\"));\n    //assertEquals(12L,       tailB_skg.get(\"background_count\"));\n    //assertEquals(3591L,     tailB_skg.get(\"background_size\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ebdcd7cba625039937ab5b668449544f9dd36927","date":1575885354,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkSubFacetStats(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkSubFacetStats(String).mjava","sourceNew":"  private void checkSubFacetStats(String extraJson) throws Exception {\n    String commonJson = \"type: terms, \" + extraJson;\n    NamedList<NamedList> all_facets = (NamedList) queryServer\n      ( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"rows\" , \"0\", \"json.facet\",\n                \"{ foo : { \" + commonJson + \" field: foo_s, facet: { \" +\n                ALL_STATS_JSON + \" bar: { \" + commonJson + \" field: bar_s, facet: { \" + ALL_STATS_JSON +\n                // under bar, in addition to \"ALL\" simple stats, we also ask for skg...\n                \", skg : 'relatedness($skg_fore,$skg_back)' } } } } }\",\n                \"skg_fore\", STAT_FIELD+\":[0 TO 40]\", \"skg_back\", STAT_FIELD+\":[-10000 TO 10000]\"\n      ) ).getResponse().get(\"facets\");\n    \n    assertNotNull(all_facets);\n\n    List<NamedList> foo_buckets = (List) ((NamedList)all_facets.get(\"foo\")).get(\"buckets\");\n\n    NamedList aaa0_Bucket = foo_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, aaa0_Bucket.size()); // val,count,facet\n    assertEquals(\"aaa0\", aaa0_Bucket.get(\"val\"));\n    assertEquals(300L, aaa0_Bucket.get(\"count\"));\n    assertEquals(-99L, aaa0_Bucket.get(\"min\"));\n    assertEquals(693L, aaa0_Bucket.get(\"max\"));\n    assertEquals(300L, aaa0_Bucket.get(\"countvals\"));\n    assertEquals(0L, aaa0_Bucket.get(\"missing\"));\n    assertEquals(34650.0D, aaa0_Bucket.get(\"sum\"));\n    assertEquals(483.70000000000016D, (double)aaa0_Bucket.get(\"percentile\"), 0.1E-7);\n    assertEquals(115.5D, (double) aaa0_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(1.674585E7D, (double) aaa0_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(206.4493184076D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    // assertEquals(42621.32107023412D, (double) aaa0_Bucket.get(\"variance\"), 0.1E-7);  // TODO: SOLR-11725\n    assertEquals(206.1049489944D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n    assertEquals(42479.25D, (double) aaa0_Bucket.get(\"variance\"), 0.1E-7); // json.facet is using the \"uncorrected variance\"\n    assertEquals(284L, aaa0_Bucket.get(\"unique\"));\n    assertEquals(284L, aaa0_Bucket.get(\"hll\"));\n\n    NamedList tail_Bucket = foo_buckets.get(5);\n    assertEquals(ALL_STATS.size() + 3, tail_Bucket.size()); // val,count,facet\n    assertEquals(\"tail\", tail_Bucket.get(\"val\"));\n    assertEquals(135L, tail_Bucket.get(\"count\"));\n    assertEquals(0L, tail_Bucket.get(\"min\"));\n    assertEquals(44L, tail_Bucket.get(\"max\"));\n    assertEquals(90L, tail_Bucket.get(\"countvals\"));\n    assertEquals(40.0D, tail_Bucket.get(\"percentile\"));\n    assertEquals(45L, tail_Bucket.get(\"missing\"));\n    assertEquals(1980.0D, tail_Bucket.get(\"sum\"));\n    assertEquals(22.0D, (double) tail_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(58740.0D, (double) tail_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(13.0599310011D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    // assertEquals(170.5617977535D, (double) tail_Bucket.get(\"variance\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(12.9871731592D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n    assertEquals(168.666666667D, (double) tail_Bucket.get(\"variance\"), 0.1E-7); // json.facet is using the \"uncorrected variance\"\n    assertEquals(45L, tail_Bucket.get(\"unique\"));\n    assertEquals(45L, tail_Bucket.get(\"hll\"));\n\n    List<NamedList> tail_bar_buckets = (List) ((NamedList)tail_Bucket.get(\"bar\")).get(\"buckets\");\n   \n    NamedList tailB_Bucket = tail_bar_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, tailB_Bucket.size()); // val,count,skg ... NO SUB FACETS\n    assertEquals(\"tailB\", tailB_Bucket.get(\"val\"));\n    assertEquals(17L, tailB_Bucket.get(\"count\"));\n    assertEquals(35L, tailB_Bucket.get(\"min\"));\n    assertEquals(40L, tailB_Bucket.get(\"max\"));\n    assertEquals(12L, tailB_Bucket.get(\"countvals\"));\n    assertEquals(39.9D, tailB_Bucket.get(\"percentile\"));\n    assertEquals(5L, tailB_Bucket.get(\"missing\"));\n    assertEquals(450.0D, tailB_Bucket.get(\"sum\"));\n    assertEquals(37.5D, (double) tailB_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(16910.0D, (double) tailB_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(1.78376517D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    // assertEquals(3.1818181817D, (double) tailB_Bucket.get(\"variance\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(1.70782513D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n    assertEquals(2.9166666747D, (double) tailB_Bucket.get(\"variance\"), 0.1E-7); // json.facet is using the \"uncorrected variance\"\n    assertEquals(6L, tailB_Bucket.get(\"unique\"));\n    assertEquals(6L, tailB_Bucket.get(\"hll\"));\n\n    // check the SKG stats on our tailB bucket\n    NamedList tailB_skg = (NamedList) tailB_Bucket.get(\"skg\");\n    assertEquals(tailB_skg.toString(),\n                 3, tailB_skg.size()); \n    assertEquals(0.19990D,    tailB_skg.get(\"relatedness\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"foreground_popularity\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"background_popularity\"));\n    //assertEquals(12L,       tailB_skg.get(\"foreground_count\"));\n    //assertEquals(82L,       tailB_skg.get(\"foreground_size\"));\n    //assertEquals(12L,       tailB_skg.get(\"background_count\"));\n    //assertEquals(3591L,     tailB_skg.get(\"background_size\"));\n  }\n\n","sourceOld":"  private void checkSubFacetStats(String extraJson) throws Exception {\n    String commonJson = \"type: terms, \" + extraJson;\n    NamedList<NamedList> all_facets = (NamedList) queryServer\n      ( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"rows\" , \"0\", \"json.facet\",\n                \"{ foo : { \" + commonJson + \" field: foo_s, facet: { \" +\n                ALL_STATS_JSON + \" bar: { \" + commonJson + \" field: bar_s, facet: { \" + ALL_STATS_JSON +\n                // under bar, in addition to \"ALL\" simple stats, we also ask for skg...\n                \", skg : 'relatedness($skg_fore,$skg_back)' } } } } }\",\n                \"skg_fore\", STAT_FIELD+\":[0 TO 40]\", \"skg_back\", STAT_FIELD+\":[-10000 TO 10000]\"\n      ) ).getResponse().get(\"facets\");\n    \n    assertNotNull(all_facets);\n\n    List<NamedList> foo_buckets = (List) ((NamedList)all_facets.get(\"foo\")).get(\"buckets\");\n\n    NamedList aaa0_Bucket = foo_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, aaa0_Bucket.size()); // val,count,facet\n    assertEquals(\"aaa0\", aaa0_Bucket.get(\"val\"));\n    assertEquals(300L, aaa0_Bucket.get(\"count\"));\n    assertEquals(-99L, aaa0_Bucket.get(\"min\"));\n    assertEquals(693L, aaa0_Bucket.get(\"max\"));\n    assertEquals(300L, aaa0_Bucket.get(\"countvals\"));\n    assertEquals(0L, aaa0_Bucket.get(\"missing\"));\n    assertEquals(34650.0D, aaa0_Bucket.get(\"sum\"));\n    assertEquals(483.70000000000016D, (double)aaa0_Bucket.get(\"percentile\"), 0.1E-7);\n    assertEquals(115.5D, (double) aaa0_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(1.674585E7D, (double) aaa0_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(206.4493184076D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(206.1049489944D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    NamedList tail_Bucket = foo_buckets.get(5);\n    assertEquals(ALL_STATS.size() + 3, tail_Bucket.size()); // val,count,facet\n    assertEquals(\"tail\", tail_Bucket.get(\"val\"));\n    assertEquals(135L, tail_Bucket.get(\"count\"));\n    assertEquals(0L, tail_Bucket.get(\"min\"));\n    assertEquals(44L, tail_Bucket.get(\"max\"));\n    assertEquals(90L, tail_Bucket.get(\"countvals\"));\n    assertEquals(40.0D, tail_Bucket.get(\"percentile\"));\n    assertEquals(45L, tail_Bucket.get(\"missing\"));\n    assertEquals(1980.0D, tail_Bucket.get(\"sum\"));\n    assertEquals(22.0D, (double) tail_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(58740.0D, (double) tail_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(13.0599310011D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(12.9871731592D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    List<NamedList> tail_bar_buckets = (List) ((NamedList)tail_Bucket.get(\"bar\")).get(\"buckets\");\n   \n    NamedList tailB_Bucket = tail_bar_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, tailB_Bucket.size()); // val,count,skg ... NO SUB FACETS\n    assertEquals(\"tailB\", tailB_Bucket.get(\"val\"));\n    assertEquals(17L, tailB_Bucket.get(\"count\"));\n    assertEquals(35L, tailB_Bucket.get(\"min\"));\n    assertEquals(40L, tailB_Bucket.get(\"max\"));\n    assertEquals(12L, tailB_Bucket.get(\"countvals\"));\n    assertEquals(39.9D, tailB_Bucket.get(\"percentile\"));\n    assertEquals(5L, tailB_Bucket.get(\"missing\"));\n    assertEquals(450.0D, tailB_Bucket.get(\"sum\"));\n    assertEquals(37.5D, (double) tailB_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(16910.0D, (double) tailB_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(1.78376517D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(1.70782513D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n\n    // check the SKG stats on our tailB bucket\n    NamedList tailB_skg = (NamedList) tailB_Bucket.get(\"skg\");\n    assertEquals(tailB_skg.toString(),\n                 3, tailB_skg.size()); \n    assertEquals(0.19990D,    tailB_skg.get(\"relatedness\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"foreground_popularity\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"background_popularity\"));\n    //assertEquals(12L,       tailB_skg.get(\"foreground_count\"));\n    //assertEquals(82L,       tailB_skg.get(\"foreground_size\"));\n    //assertEquals(12L,       tailB_skg.get(\"background_count\"));\n    //assertEquals(3591L,     tailB_skg.get(\"background_size\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c323a47ee02cccb79b79272be52db023360d339d","date":1584625917,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkSubFacetStats(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkSubFacetStats(String).mjava","sourceNew":"  private void checkSubFacetStats(String extraJson) throws Exception {\n    String commonJson = \"type: terms, \" + extraJson;\n    NamedList<NamedList> all_facets = (NamedList) queryServer\n      ( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"rows\" , \"0\", \"json.facet\",\n                \"{ foo : { \" + commonJson + \" field: foo_s, facet: { \" +\n                ALL_STATS_JSON + \" bar: { \" + commonJson + \" field: bar_s, facet: { \" + ALL_STATS_JSON +\n                // under bar, in addition to \"ALL\" simple stats, we also ask for skg...\n                \", skg : 'relatedness($skg_fore,$skg_back)' } } } } }\",\n                \"skg_fore\", STAT_FIELD+\":[0 TO 40]\", \"skg_back\", STAT_FIELD+\":[-10000 TO 10000]\"\n      ) ).getResponse().get(\"facets\");\n    \n    assertNotNull(all_facets);\n\n    List<NamedList> foo_buckets = (List) ((NamedList)all_facets.get(\"foo\")).get(\"buckets\");\n\n    NamedList aaa0_Bucket = foo_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, aaa0_Bucket.size()); // val,count,facet\n    assertEquals(\"aaa0\", aaa0_Bucket.get(\"val\"));\n    assertEquals(300L, aaa0_Bucket.get(\"count\"));\n    assertEquals(-99L, aaa0_Bucket.get(\"min\"));\n    assertEquals(693L, aaa0_Bucket.get(\"max\"));\n    assertEquals(300L, aaa0_Bucket.get(\"countvals\"));\n    assertEquals(0L, aaa0_Bucket.get(\"missing\"));\n    assertEquals(34650.0D, aaa0_Bucket.get(\"sum\"));\n    assertEquals(483.70000000000016D, (double)aaa0_Bucket.get(\"percentile\"), 0.1E-7);\n    assertEquals(115.5D, (double) aaa0_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(1.674585E7D, (double) aaa0_Bucket.get(\"sumsq\"), 0.1E-7);\n    assertEquals(206.4493184076D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7);\n    assertEquals(42621.32107023412D, (double) aaa0_Bucket.get(\"variance\"), 0.1E-7);\n    assertEquals(284L, aaa0_Bucket.get(\"unique\"));\n    assertEquals(284L, aaa0_Bucket.get(\"hll\"));\n\n    NamedList tail_Bucket = foo_buckets.get(5);\n    assertEquals(ALL_STATS.size() + 3, tail_Bucket.size()); // val,count,facet\n    assertEquals(\"tail\", tail_Bucket.get(\"val\"));\n    assertEquals(135L, tail_Bucket.get(\"count\"));\n    assertEquals(0L, tail_Bucket.get(\"min\"));\n    assertEquals(44L, tail_Bucket.get(\"max\"));\n    assertEquals(90L, tail_Bucket.get(\"countvals\"));\n    assertEquals(40.0D, tail_Bucket.get(\"percentile\"));\n    assertEquals(45L, tail_Bucket.get(\"missing\"));\n    assertEquals(1980.0D, tail_Bucket.get(\"sum\"));\n    assertEquals(22.0D, (double) tail_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(58740.0D, (double) tail_Bucket.get(\"sumsq\"), 0.1E-7);\n    assertEquals(13.0599310011D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7);\n    assertEquals(170.5617977535D, (double) tail_Bucket.get(\"variance\"), 0.1E-7);\n    assertEquals(45L, tail_Bucket.get(\"unique\"));\n    assertEquals(45L, tail_Bucket.get(\"hll\"));\n\n    List<NamedList> tail_bar_buckets = (List) ((NamedList)tail_Bucket.get(\"bar\")).get(\"buckets\");\n   \n    NamedList tailB_Bucket = tail_bar_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, tailB_Bucket.size()); // val,count,skg ... NO SUB FACETS\n    assertEquals(\"tailB\", tailB_Bucket.get(\"val\"));\n    assertEquals(17L, tailB_Bucket.get(\"count\"));\n    assertEquals(35L, tailB_Bucket.get(\"min\"));\n    assertEquals(40L, tailB_Bucket.get(\"max\"));\n    assertEquals(12L, tailB_Bucket.get(\"countvals\"));\n    assertEquals(39.9D, tailB_Bucket.get(\"percentile\"));\n    assertEquals(5L, tailB_Bucket.get(\"missing\"));\n    assertEquals(450.0D, tailB_Bucket.get(\"sum\"));\n    assertEquals(37.5D, (double) tailB_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(16910.0D, (double) tailB_Bucket.get(\"sumsq\"), 0.1E-7);\n    assertEquals(1.78376517D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7);\n    assertEquals(3.1818181817D, (double) tailB_Bucket.get(\"variance\"), 0.1E-7);\n    assertEquals(6L, tailB_Bucket.get(\"unique\"));\n    assertEquals(6L, tailB_Bucket.get(\"hll\"));\n\n    // check the SKG stats on our tailB bucket\n    NamedList tailB_skg = (NamedList) tailB_Bucket.get(\"skg\");\n    assertEquals(tailB_skg.toString(),\n                 3, tailB_skg.size()); \n    assertEquals(0.19990D,    tailB_skg.get(\"relatedness\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"foreground_popularity\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"background_popularity\"));\n    //assertEquals(12L,       tailB_skg.get(\"foreground_count\"));\n    //assertEquals(82L,       tailB_skg.get(\"foreground_size\"));\n    //assertEquals(12L,       tailB_skg.get(\"background_count\"));\n    //assertEquals(3591L,     tailB_skg.get(\"background_size\"));\n  }\n\n","sourceOld":"  private void checkSubFacetStats(String extraJson) throws Exception {\n    String commonJson = \"type: terms, \" + extraJson;\n    NamedList<NamedList> all_facets = (NamedList) queryServer\n      ( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"rows\" , \"0\", \"json.facet\",\n                \"{ foo : { \" + commonJson + \" field: foo_s, facet: { \" +\n                ALL_STATS_JSON + \" bar: { \" + commonJson + \" field: bar_s, facet: { \" + ALL_STATS_JSON +\n                // under bar, in addition to \"ALL\" simple stats, we also ask for skg...\n                \", skg : 'relatedness($skg_fore,$skg_back)' } } } } }\",\n                \"skg_fore\", STAT_FIELD+\":[0 TO 40]\", \"skg_back\", STAT_FIELD+\":[-10000 TO 10000]\"\n      ) ).getResponse().get(\"facets\");\n    \n    assertNotNull(all_facets);\n\n    List<NamedList> foo_buckets = (List) ((NamedList)all_facets.get(\"foo\")).get(\"buckets\");\n\n    NamedList aaa0_Bucket = foo_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, aaa0_Bucket.size()); // val,count,facet\n    assertEquals(\"aaa0\", aaa0_Bucket.get(\"val\"));\n    assertEquals(300L, aaa0_Bucket.get(\"count\"));\n    assertEquals(-99L, aaa0_Bucket.get(\"min\"));\n    assertEquals(693L, aaa0_Bucket.get(\"max\"));\n    assertEquals(300L, aaa0_Bucket.get(\"countvals\"));\n    assertEquals(0L, aaa0_Bucket.get(\"missing\"));\n    assertEquals(34650.0D, aaa0_Bucket.get(\"sum\"));\n    assertEquals(483.70000000000016D, (double)aaa0_Bucket.get(\"percentile\"), 0.1E-7);\n    assertEquals(115.5D, (double) aaa0_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(1.674585E7D, (double) aaa0_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(206.4493184076D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    // assertEquals(42621.32107023412D, (double) aaa0_Bucket.get(\"variance\"), 0.1E-7);  // TODO: SOLR-11725\n    assertEquals(206.1049489944D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n    assertEquals(42479.25D, (double) aaa0_Bucket.get(\"variance\"), 0.1E-7); // json.facet is using the \"uncorrected variance\"\n    assertEquals(284L, aaa0_Bucket.get(\"unique\"));\n    assertEquals(284L, aaa0_Bucket.get(\"hll\"));\n\n    NamedList tail_Bucket = foo_buckets.get(5);\n    assertEquals(ALL_STATS.size() + 3, tail_Bucket.size()); // val,count,facet\n    assertEquals(\"tail\", tail_Bucket.get(\"val\"));\n    assertEquals(135L, tail_Bucket.get(\"count\"));\n    assertEquals(0L, tail_Bucket.get(\"min\"));\n    assertEquals(44L, tail_Bucket.get(\"max\"));\n    assertEquals(90L, tail_Bucket.get(\"countvals\"));\n    assertEquals(40.0D, tail_Bucket.get(\"percentile\"));\n    assertEquals(45L, tail_Bucket.get(\"missing\"));\n    assertEquals(1980.0D, tail_Bucket.get(\"sum\"));\n    assertEquals(22.0D, (double) tail_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(58740.0D, (double) tail_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(13.0599310011D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    // assertEquals(170.5617977535D, (double) tail_Bucket.get(\"variance\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(12.9871731592D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n    assertEquals(168.666666667D, (double) tail_Bucket.get(\"variance\"), 0.1E-7); // json.facet is using the \"uncorrected variance\"\n    assertEquals(45L, tail_Bucket.get(\"unique\"));\n    assertEquals(45L, tail_Bucket.get(\"hll\"));\n\n    List<NamedList> tail_bar_buckets = (List) ((NamedList)tail_Bucket.get(\"bar\")).get(\"buckets\");\n   \n    NamedList tailB_Bucket = tail_bar_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, tailB_Bucket.size()); // val,count,skg ... NO SUB FACETS\n    assertEquals(\"tailB\", tailB_Bucket.get(\"val\"));\n    assertEquals(17L, tailB_Bucket.get(\"count\"));\n    assertEquals(35L, tailB_Bucket.get(\"min\"));\n    assertEquals(40L, tailB_Bucket.get(\"max\"));\n    assertEquals(12L, tailB_Bucket.get(\"countvals\"));\n    assertEquals(39.9D, tailB_Bucket.get(\"percentile\"));\n    assertEquals(5L, tailB_Bucket.get(\"missing\"));\n    assertEquals(450.0D, tailB_Bucket.get(\"sum\"));\n    assertEquals(37.5D, (double) tailB_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(16910.0D, (double) tailB_Bucket.get(\"sumsq\"), 0.1E-7);\n    // assertEquals(1.78376517D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // TODO: SOLR-11725\n    // assertEquals(3.1818181817D, (double) tailB_Bucket.get(\"variance\"), 0.1E-7); // TODO: SOLR-11725\n    assertEquals(1.70782513D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7); // json.facet is using the \"uncorrected stddev\"\n    assertEquals(2.9166666747D, (double) tailB_Bucket.get(\"variance\"), 0.1E-7); // json.facet is using the \"uncorrected variance\"\n    assertEquals(6L, tailB_Bucket.get(\"unique\"));\n    assertEquals(6L, tailB_Bucket.get(\"hll\"));\n\n    // check the SKG stats on our tailB bucket\n    NamedList tailB_skg = (NamedList) tailB_Bucket.get(\"skg\");\n    assertEquals(tailB_skg.toString(),\n                 3, tailB_skg.size()); \n    assertEquals(0.19990D,    tailB_skg.get(\"relatedness\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"foreground_popularity\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"background_popularity\"));\n    //assertEquals(12L,       tailB_skg.get(\"foreground_count\"));\n    //assertEquals(82L,       tailB_skg.get(\"foreground_size\"));\n    //assertEquals(12L,       tailB_skg.get(\"background_count\"));\n    //assertEquals(3591L,     tailB_skg.get(\"background_size\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkSubFacetStats(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/DistributedFacetSimpleRefinementLongTailTest#checkSubFacetStats(String).mjava","sourceNew":"  private void checkSubFacetStats(String extraJson) throws Exception {\n    String commonJson = \"type: terms, \" + extraJson;\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    NamedList<NamedList> all_facets = (NamedList) queryServer\n      ( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"rows\" , \"0\", \"json.facet\",\n                \"{ foo : { \" + commonJson + \" field: foo_s, facet: { \" +\n                ALL_STATS_JSON + \" bar: { \" + commonJson + \" field: bar_s, facet: { \" + ALL_STATS_JSON +\n                // under bar, in addition to \"ALL\" simple stats, we also ask for skg...\n                \", skg : 'relatedness($skg_fore,$skg_back)' } } } } }\",\n                \"skg_fore\", STAT_FIELD+\":[0 TO 40]\", \"skg_back\", STAT_FIELD+\":[-10000 TO 10000]\"\n      ) ).getResponse().get(\"facets\");\n    \n    assertNotNull(all_facets);\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<NamedList> foo_buckets = (List) (all_facets.get(\"foo\")).get(\"buckets\");\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList aaa0_Bucket = foo_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, aaa0_Bucket.size()); // val,count,facet\n    assertEquals(\"aaa0\", aaa0_Bucket.get(\"val\"));\n    assertEquals(300L, aaa0_Bucket.get(\"count\"));\n    assertEquals(-99L, aaa0_Bucket.get(\"min\"));\n    assertEquals(693L, aaa0_Bucket.get(\"max\"));\n    assertEquals(300L, aaa0_Bucket.get(\"countvals\"));\n    assertEquals(0L, aaa0_Bucket.get(\"missing\"));\n    assertEquals(34650.0D, aaa0_Bucket.get(\"sum\"));\n    assertEquals(483.70000000000016D, (double)aaa0_Bucket.get(\"percentile\"), 0.1E-7);\n    assertEquals(115.5D, (double) aaa0_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(1.674585E7D, (double) aaa0_Bucket.get(\"sumsq\"), 0.1E-7);\n    assertEquals(206.4493184076D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7);\n    assertEquals(42621.32107023412D, (double) aaa0_Bucket.get(\"variance\"), 0.1E-7);\n    assertEquals(284L, aaa0_Bucket.get(\"unique\"));\n    assertEquals(284L, aaa0_Bucket.get(\"hll\"));\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList tail_Bucket = foo_buckets.get(5);\n    assertEquals(ALL_STATS.size() + 3, tail_Bucket.size()); // val,count,facet\n    assertEquals(\"tail\", tail_Bucket.get(\"val\"));\n    assertEquals(135L, tail_Bucket.get(\"count\"));\n    assertEquals(0L, tail_Bucket.get(\"min\"));\n    assertEquals(44L, tail_Bucket.get(\"max\"));\n    assertEquals(90L, tail_Bucket.get(\"countvals\"));\n    assertEquals(40.0D, tail_Bucket.get(\"percentile\"));\n    assertEquals(45L, tail_Bucket.get(\"missing\"));\n    assertEquals(1980.0D, tail_Bucket.get(\"sum\"));\n    assertEquals(22.0D, (double) tail_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(58740.0D, (double) tail_Bucket.get(\"sumsq\"), 0.1E-7);\n    assertEquals(13.0599310011D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7);\n    assertEquals(170.5617977535D, (double) tail_Bucket.get(\"variance\"), 0.1E-7);\n    assertEquals(45L, tail_Bucket.get(\"unique\"));\n    assertEquals(45L, tail_Bucket.get(\"hll\"));\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<NamedList> tail_bar_buckets = (List) ((NamedList)tail_Bucket.get(\"bar\")).get(\"buckets\");\n   \n    @SuppressWarnings({\"rawtypes\"})\n    NamedList tailB_Bucket = tail_bar_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, tailB_Bucket.size()); // val,count,skg ... NO SUB FACETS\n    assertEquals(\"tailB\", tailB_Bucket.get(\"val\"));\n    assertEquals(17L, tailB_Bucket.get(\"count\"));\n    assertEquals(35L, tailB_Bucket.get(\"min\"));\n    assertEquals(40L, tailB_Bucket.get(\"max\"));\n    assertEquals(12L, tailB_Bucket.get(\"countvals\"));\n    assertEquals(39.9D, tailB_Bucket.get(\"percentile\"));\n    assertEquals(5L, tailB_Bucket.get(\"missing\"));\n    assertEquals(450.0D, tailB_Bucket.get(\"sum\"));\n    assertEquals(37.5D, (double) tailB_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(16910.0D, (double) tailB_Bucket.get(\"sumsq\"), 0.1E-7);\n    assertEquals(1.78376517D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7);\n    assertEquals(3.1818181817D, (double) tailB_Bucket.get(\"variance\"), 0.1E-7);\n    assertEquals(6L, tailB_Bucket.get(\"unique\"));\n    assertEquals(6L, tailB_Bucket.get(\"hll\"));\n\n    // check the SKG stats on our tailB bucket\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList tailB_skg = (NamedList) tailB_Bucket.get(\"skg\");\n    assertEquals(tailB_skg.toString(),\n                 3, tailB_skg.size()); \n    assertEquals(0.19990D,    tailB_skg.get(\"relatedness\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"foreground_popularity\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"background_popularity\"));\n    //assertEquals(12L,       tailB_skg.get(\"foreground_count\"));\n    //assertEquals(82L,       tailB_skg.get(\"foreground_size\"));\n    //assertEquals(12L,       tailB_skg.get(\"background_count\"));\n    //assertEquals(3591L,     tailB_skg.get(\"background_size\"));\n  }\n\n","sourceOld":"  private void checkSubFacetStats(String extraJson) throws Exception {\n    String commonJson = \"type: terms, \" + extraJson;\n    NamedList<NamedList> all_facets = (NamedList) queryServer\n      ( params( \"q\", \"*:*\", \"shards\", getShardsString(), \"rows\" , \"0\", \"json.facet\",\n                \"{ foo : { \" + commonJson + \" field: foo_s, facet: { \" +\n                ALL_STATS_JSON + \" bar: { \" + commonJson + \" field: bar_s, facet: { \" + ALL_STATS_JSON +\n                // under bar, in addition to \"ALL\" simple stats, we also ask for skg...\n                \", skg : 'relatedness($skg_fore,$skg_back)' } } } } }\",\n                \"skg_fore\", STAT_FIELD+\":[0 TO 40]\", \"skg_back\", STAT_FIELD+\":[-10000 TO 10000]\"\n      ) ).getResponse().get(\"facets\");\n    \n    assertNotNull(all_facets);\n\n    List<NamedList> foo_buckets = (List) ((NamedList)all_facets.get(\"foo\")).get(\"buckets\");\n\n    NamedList aaa0_Bucket = foo_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, aaa0_Bucket.size()); // val,count,facet\n    assertEquals(\"aaa0\", aaa0_Bucket.get(\"val\"));\n    assertEquals(300L, aaa0_Bucket.get(\"count\"));\n    assertEquals(-99L, aaa0_Bucket.get(\"min\"));\n    assertEquals(693L, aaa0_Bucket.get(\"max\"));\n    assertEquals(300L, aaa0_Bucket.get(\"countvals\"));\n    assertEquals(0L, aaa0_Bucket.get(\"missing\"));\n    assertEquals(34650.0D, aaa0_Bucket.get(\"sum\"));\n    assertEquals(483.70000000000016D, (double)aaa0_Bucket.get(\"percentile\"), 0.1E-7);\n    assertEquals(115.5D, (double) aaa0_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(1.674585E7D, (double) aaa0_Bucket.get(\"sumsq\"), 0.1E-7);\n    assertEquals(206.4493184076D, (double) aaa0_Bucket.get(\"stddev\"), 0.1E-7);\n    assertEquals(42621.32107023412D, (double) aaa0_Bucket.get(\"variance\"), 0.1E-7);\n    assertEquals(284L, aaa0_Bucket.get(\"unique\"));\n    assertEquals(284L, aaa0_Bucket.get(\"hll\"));\n\n    NamedList tail_Bucket = foo_buckets.get(5);\n    assertEquals(ALL_STATS.size() + 3, tail_Bucket.size()); // val,count,facet\n    assertEquals(\"tail\", tail_Bucket.get(\"val\"));\n    assertEquals(135L, tail_Bucket.get(\"count\"));\n    assertEquals(0L, tail_Bucket.get(\"min\"));\n    assertEquals(44L, tail_Bucket.get(\"max\"));\n    assertEquals(90L, tail_Bucket.get(\"countvals\"));\n    assertEquals(40.0D, tail_Bucket.get(\"percentile\"));\n    assertEquals(45L, tail_Bucket.get(\"missing\"));\n    assertEquals(1980.0D, tail_Bucket.get(\"sum\"));\n    assertEquals(22.0D, (double) tail_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(58740.0D, (double) tail_Bucket.get(\"sumsq\"), 0.1E-7);\n    assertEquals(13.0599310011D, (double) tail_Bucket.get(\"stddev\"), 0.1E-7);\n    assertEquals(170.5617977535D, (double) tail_Bucket.get(\"variance\"), 0.1E-7);\n    assertEquals(45L, tail_Bucket.get(\"unique\"));\n    assertEquals(45L, tail_Bucket.get(\"hll\"));\n\n    List<NamedList> tail_bar_buckets = (List) ((NamedList)tail_Bucket.get(\"bar\")).get(\"buckets\");\n   \n    NamedList tailB_Bucket = tail_bar_buckets.get(0);\n    assertEquals(ALL_STATS.size() + 3, tailB_Bucket.size()); // val,count,skg ... NO SUB FACETS\n    assertEquals(\"tailB\", tailB_Bucket.get(\"val\"));\n    assertEquals(17L, tailB_Bucket.get(\"count\"));\n    assertEquals(35L, tailB_Bucket.get(\"min\"));\n    assertEquals(40L, tailB_Bucket.get(\"max\"));\n    assertEquals(12L, tailB_Bucket.get(\"countvals\"));\n    assertEquals(39.9D, tailB_Bucket.get(\"percentile\"));\n    assertEquals(5L, tailB_Bucket.get(\"missing\"));\n    assertEquals(450.0D, tailB_Bucket.get(\"sum\"));\n    assertEquals(37.5D, (double) tailB_Bucket.get(\"avg\"), 0.1E-7);\n    assertEquals(16910.0D, (double) tailB_Bucket.get(\"sumsq\"), 0.1E-7);\n    assertEquals(1.78376517D, (double) tailB_Bucket.get(\"stddev\"), 0.1E-7);\n    assertEquals(3.1818181817D, (double) tailB_Bucket.get(\"variance\"), 0.1E-7);\n    assertEquals(6L, tailB_Bucket.get(\"unique\"));\n    assertEquals(6L, tailB_Bucket.get(\"hll\"));\n\n    // check the SKG stats on our tailB bucket\n    NamedList tailB_skg = (NamedList) tailB_Bucket.get(\"skg\");\n    assertEquals(tailB_skg.toString(),\n                 3, tailB_skg.size()); \n    assertEquals(0.19990D,    tailB_skg.get(\"relatedness\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"foreground_popularity\"));\n    assertEquals(0.00334D,    tailB_skg.get(\"background_popularity\"));\n    //assertEquals(12L,       tailB_skg.get(\"foreground_count\"));\n    //assertEquals(82L,       tailB_skg.get(\"foreground_size\"));\n    //assertEquals(12L,       tailB_skg.get(\"background_count\"));\n    //assertEquals(3591L,     tailB_skg.get(\"background_size\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2fa9270995767ab6c92b235a5a62267aa426f47d":["356bbab82e5e26b4d86a88681d48baaf6103c4fc"],"c323a47ee02cccb79b79272be52db023360d339d":["e8b2f4669f58c62f64c1de0df0908bd214f1f729"],"a90f561fc609ec007ba18b10dea9191dbbd71831":["356bbab82e5e26b4d86a88681d48baaf6103c4fc","2fa9270995767ab6c92b235a5a62267aa426f47d"],"356bbab82e5e26b4d86a88681d48baaf6103c4fc":["8ab0d0e3eeff82234ea56bd0a3bf61cc196bf316"],"ebdcd7cba625039937ab5b668449544f9dd36927":["a90f561fc609ec007ba18b10dea9191dbbd71831","e8b2f4669f58c62f64c1de0df0908bd214f1f729"],"927e6deec13723e5fd6fb8f1e0457e8597dae15e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba"],"e98520789adb1d5ad05afb4956eca0944a929688":["c323a47ee02cccb79b79272be52db023360d339d"],"2c705a0d590cf911e7c942df49563ca2ea176e22":["927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"8ab0d0e3eeff82234ea56bd0a3bf61cc196bf316":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e8b2f4669f58c62f64c1de0df0908bd214f1f729":["2fa9270995767ab6c92b235a5a62267aa426f47d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"]},"commit2Childs":{"2fa9270995767ab6c92b235a5a62267aa426f47d":["a90f561fc609ec007ba18b10dea9191dbbd71831","e8b2f4669f58c62f64c1de0df0908bd214f1f729"],"c323a47ee02cccb79b79272be52db023360d339d":["e98520789adb1d5ad05afb4956eca0944a929688"],"a90f561fc609ec007ba18b10dea9191dbbd71831":["ebdcd7cba625039937ab5b668449544f9dd36927"],"356bbab82e5e26b4d86a88681d48baaf6103c4fc":["2fa9270995767ab6c92b235a5a62267aa426f47d","a90f561fc609ec007ba18b10dea9191dbbd71831"],"ebdcd7cba625039937ab5b668449544f9dd36927":[],"927e6deec13723e5fd6fb8f1e0457e8597dae15e":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2c705a0d590cf911e7c942df49563ca2ea176e22":["8ab0d0e3eeff82234ea56bd0a3bf61cc196bf316"],"8ab0d0e3eeff82234ea56bd0a3bf61cc196bf316":["356bbab82e5e26b4d86a88681d48baaf6103c4fc"],"5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba":["927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["927e6deec13723e5fd6fb8f1e0457e8597dae15e","5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba"],"e8b2f4669f58c62f64c1de0df0908bd214f1f729":["c323a47ee02cccb79b79272be52db023360d339d","ebdcd7cba625039937ab5b668449544f9dd36927"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ebdcd7cba625039937ab5b668449544f9dd36927","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}