{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","sourceNew":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the AtomicIndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakReference.\n   * </p>\n   * @lucene.experimental\n   */\n  public abstract CacheEntry[] getCacheEntries();\n\n","sourceOld":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the AtomicIndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakReference.\n   * </p>\n   * @lucene.experimental\n   */\n  public abstract CacheEntry[] getCacheEntries();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2dcffe8fc78b093a5f4207f492bbae185740f6a","date":1380887572,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","sourceNew":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the AtomicIndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakReference.\n   * </p>\n   * @lucene.experimental\n   */\n  public CacheEntry[] getCacheEntries();\n\n","sourceOld":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the AtomicIndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakReference.\n   * </p>\n   * @lucene.experimental\n   */\n  public abstract CacheEntry[] getCacheEntries();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getCacheEntries().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","sourceNew":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the AtomicIndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakReference.\n   * </p>\n   * @lucene.experimental\n   */\n  public CacheEntry[] getCacheEntries();\n\n","sourceOld":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the AtomicIndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakReference.\n   * </p>\n   * @lucene.experimental\n   */\n  public CacheEntry[] getCacheEntries();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getCacheEntries().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","sourceNew":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the AtomicIndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakReference.\n   * </p>\n   * @lucene.experimental\n   */\n  public CacheEntry[] getCacheEntries();\n\n","sourceOld":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the AtomicIndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakReference.\n   * </p>\n   * @lucene.experimental\n   */\n  public CacheEntry[] getCacheEntries();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCache#getCacheEntries().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getCacheEntries().mjava","sourceNew":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the AtomicIndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakReference.\n   * </p>\n   * @lucene.experimental\n   */\n  public CacheEntry[] getCacheEntries();\n\n","sourceOld":"  /**\n   * EXPERT: Generates an array of CacheEntry objects representing all items \n   * currently in the FieldCache.\n   * <p>\n   * NOTE: These CacheEntry objects maintain a strong reference to the \n   * Cached Values.  Maintaining references to a CacheEntry the AtomicIndexReader \n   * associated with it has garbage collected will prevent the Value itself\n   * from being garbage collected when the Cache drops the WeakReference.\n   * </p>\n   * @lucene.experimental\n   */\n  public CacheEntry[] getCacheEntries();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["d2dcffe8fc78b093a5f4207f492bbae185740f6a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d2dcffe8fc78b093a5f4207f492bbae185740f6a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["d2dcffe8fc78b093a5f4207f492bbae185740f6a"],"56572ec06f1407c066d6b7399413178b33176cd8":["d2dcffe8fc78b093a5f4207f492bbae185740f6a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d2dcffe8fc78b093a5f4207f492bbae185740f6a"],"d2dcffe8fc78b093a5f4207f492bbae185740f6a":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}