{"path":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#getDU(File).mjava","commits":[{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#getDU(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Takes an input dir and returns the du on that local directory. Very basic\n   * implementation.\n   *\n   * @param dir\n   *          The input dir to get the disk space of this local dir\n   * @return The total disk space of the input local directory\n   */\n  public static long getDU(File dir) {\n    long size = 0;\n    if (!dir.exists())\n      return 0;\n    if (!dir.isDirectory()) {\n      return dir.length();\n    } else {\n      File[] allFiles = dir.listFiles();\n      if(allFiles != null) {\n        for (int i = 0; i < allFiles.length; i++) {\n          boolean isSymLink;\n          try {\n            isSymLink = org.apache.commons.io.FileUtils.isSymlink(allFiles[i]);\n          } catch(IOException ioe) {\n            isSymLink = true;\n          }\n          if(!isSymLink) {\n            size += getDU(allFiles[i]);\n          }\n        }\n      }\n      return size;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#getDU(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Takes an input dir and returns the du on that local directory. Very basic\n   * implementation.\n   *\n   * @param dir\n   *          The input dir to get the disk space of this local dir\n   * @return The total disk space of the input local directory\n   */\n  public static long getDU(File dir) {\n    long size = 0;\n    if (!dir.exists())\n      return 0;\n    if (!dir.isDirectory()) {\n      return dir.length();\n    } else {\n      File[] allFiles = dir.listFiles();\n      if(allFiles != null) {\n        for (int i = 0; i < allFiles.length; i++) {\n          boolean isSymLink;\n          try {\n            isSymLink = org.apache.commons.io.FileUtils.isSymlink(allFiles[i]);\n          } catch(IOException ioe) {\n            isSymLink = true;\n          }\n          if(!isSymLink) {\n            size += getDU(allFiles[i]);\n          }\n        }\n      }\n      return size;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d0b04dff05c5b642fe6b6b8001f6d02be9ec692","date":1601539662,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#getDU(File).mjava","pathOld":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#getDU(File).mjava","sourceNew":"  /**\n   * Takes an input dir and returns the du on that local directory. Very basic\n   * implementation.\n   *\n   * @param dir\n   *          The input dir to get the disk space of this local dir\n   * @return The total disk space of the input local directory\n   */\n  public static long getDU(File dir) {\n    long size = 0;\n    if (!dir.exists())\n      return 0;\n    if (!dir.isDirectory()) {\n      return dir.length();\n    } else {\n      File[] allFiles = dir.listFiles();\n      if(allFiles != null) {\n        for (int i = 0; i < allFiles.length; i++) {\n          boolean isSymLink = org.apache.commons.io.FileUtils.isSymlink(allFiles[i]);\n          if(!isSymLink) {\n            size += getDU(allFiles[i]);\n          }\n        }\n      }\n      return size;\n    }\n  }\n\n","sourceOld":"  /**\n   * Takes an input dir and returns the du on that local directory. Very basic\n   * implementation.\n   *\n   * @param dir\n   *          The input dir to get the disk space of this local dir\n   * @return The total disk space of the input local directory\n   */\n  public static long getDU(File dir) {\n    long size = 0;\n    if (!dir.exists())\n      return 0;\n    if (!dir.isDirectory()) {\n      return dir.length();\n    } else {\n      File[] allFiles = dir.listFiles();\n      if(allFiles != null) {\n        for (int i = 0; i < allFiles.length; i++) {\n          boolean isSymLink;\n          try {\n            isSymLink = org.apache.commons.io.FileUtils.isSymlink(allFiles[i]);\n          } catch(IOException ioe) {\n            isSymLink = true;\n          }\n          if(!isSymLink) {\n            size += getDU(allFiles[i]);\n          }\n        }\n      }\n      return size;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a229cb50768e988c50a2106bdae3a92154f428bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d0b04dff05c5b642fe6b6b8001f6d02be9ec692":["6bdf107cf16be0f22504ae184fed81596665a244"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d0b04dff05c5b642fe6b6b8001f6d02be9ec692"]},"commit2Childs":{"a229cb50768e988c50a2106bdae3a92154f428bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","9d0b04dff05c5b642fe6b6b8001f6d02be9ec692"],"9d0b04dff05c5b642fe6b6b8001f6d02be9ec692":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}