{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = (SolrInputDocument)o;\n          handler.document(sdoc, updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n\n\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (Object o : doclist) {\n        solrInputDocs.add((SolrInputDocument)o);\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          handler.document(listToSolrInputDocument((List<NamedList>) o), updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List<List<NamedList>>) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (List<NamedList> n : doclist) {\n        solrInputDocs.add(listToSolrInputDocument(n));\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e75d826d1f37079d934ae6ec2016a235d96c041","date":1321875173,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingUpdateHandler).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec#unmarshal(InputStream,StreamingDocumentHandler).mjava","sourceNew":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingUpdateHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingUpdateHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = null;\n          if (o instanceof List) {\n            sdoc = listToSolrInputDocument((List<NamedList>) o);\n          } else if (o instanceof NamedList)  {\n            UpdateRequest req = new UpdateRequest();\n            req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));\n            handler.update(null, req);\n          } else  {\n            sdoc = (SolrInputDocument) o;\n          }\n          handler.update(sdoc, updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n\n\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (Object o : doclist) {\n        if (o instanceof List) {\n          solrInputDocs.add(listToSolrInputDocument((List<NamedList>)o));\n        } else  {\n          solrInputDocs.add((SolrInputDocument)o);\n        }\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","sourceOld":"  /**\n   * Reads a NamedList from the given InputStream, converts it into a SolrInputDocument and passes it to the given\n   * StreamingDocumentHandler\n   *\n   * @param is      the InputStream from which to read\n   * @param handler an instance of StreamingDocumentHandler to which SolrInputDocuments are streamed one by one\n   *\n   * @return the UpdateRequest\n   *\n   * @throws IOException in case of an exception while reading from the input stream or unmarshalling\n   */\n  public UpdateRequest unmarshal(InputStream is, final StreamingDocumentHandler handler) throws IOException {\n    final UpdateRequest updateRequest = new UpdateRequest();\n    List<List<NamedList>> doclist;\n    List<String> delById;\n    List<String> delByQ;\n    final NamedList[] namedList = new NamedList[1];\n    JavaBinCodec codec = new JavaBinCodec() {\n\n      // NOTE: this only works because this is an anonymous inner class \n      // which will only ever be used on a single stream -- if this class \n      // is ever refactored, this will not work.\n      private boolean seenOuterMostDocIterator = false;\n        \n      @Override\n      public NamedList readNamedList(FastInputStream dis) throws IOException {\n        int sz = readSize(dis);\n        NamedList nl = new NamedList();\n        if (namedList[0] == null) {\n          namedList[0] = nl;\n        }\n        for (int i = 0; i < sz; i++) {\n          String name = (String) readVal(dis);\n          Object val = readVal(dis);\n          nl.add(name, val);\n        }\n        return nl;\n      }\n\n      @Override\n      public List readIterator(FastInputStream fis) throws IOException {\n\n        // default behavior for reading any regular Iterator in the stream\n        if (seenOuterMostDocIterator) return super.readIterator(fis);\n\n        // special treatment for first outermost Iterator \n        // (the list of documents)\n        seenOuterMostDocIterator = true;\n        return readOuterMostDocIterator(fis);\n      }\n\n      private List readOuterMostDocIterator(FastInputStream fis) throws IOException {\n        NamedList params = (NamedList) namedList[0].getVal(0);\n        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));\n        if (handler == null) return super.readIterator(fis);\n        while (true) {\n          Object o = readVal(fis);\n          if (o == END_OBJ) break;\n          SolrInputDocument sdoc = (SolrInputDocument)o;\n          handler.document(sdoc, updateRequest);\n        }\n        return Collections.EMPTY_LIST;\n      }\n    };\n\n\n    codec.unmarshal(is);\n    delById = (List<String>) namedList[0].get(\"delById\");\n    delByQ = (List<String>) namedList[0].get(\"delByQ\");\n    doclist = (List) namedList[0].get(\"docs\");\n\n    if (doclist != null && !doclist.isEmpty()) {\n      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();\n      for (Object o : doclist) {\n        solrInputDocs.add((SolrInputDocument)o);\n      }\n      updateRequest.add(solrInputDocs);\n    }\n    if (delById != null) {\n      for (String s : delById) {\n        updateRequest.deleteById(s);\n      }\n    }\n    if (delByQ != null) {\n      for (String s : delByQ) {\n        updateRequest.deleteByQuery(s);\n      }\n    }\n    return updateRequest;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bd0ef6574805f3cb9880e0983b7548a6aa933508":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e75d826d1f37079d934ae6ec2016a235d96c041":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e75d826d1f37079d934ae6ec2016a235d96c041"]},"commit2Childs":{"bd0ef6574805f3cb9880e0983b7548a6aa933508":["0e75d826d1f37079d934ae6ec2016a235d96c041"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"0e75d826d1f37079d934ae6ec2016a235d96c041":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}