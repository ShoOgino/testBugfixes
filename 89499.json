{"path":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,boolean).mjava","commits":[{"id":"2e327741cef719817558806865704ff0864d12fd","date":1363899030,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private Scorer scorer(String values[], int minShouldMatch, boolean slow) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq);\n    \n    if (slow) {\n      return new SlowMinShouldMatchScorer(weight, reader.getSortedSetDocValues(\"dv\"), reader.maxDoc());\n    } else {\n      return weight.scorer(reader.getContext(), true, false, null);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"707f5285c280ff14fa898e7722e57b7a46b81a76","date":1363965759,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,boolean).mjava","sourceNew":"  private Scorer scorer(String values[], int minShouldMatch, boolean slow) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq);\n    \n    if (slow) {\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    } else {\n      return weight.scorer(reader.getContext(), true, false, null);\n    }\n  }\n\n","sourceOld":"  private Scorer scorer(String values[], int minShouldMatch, boolean slow) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq);\n    \n    if (slow) {\n      return new SlowMinShouldMatchScorer(weight, reader.getSortedSetDocValues(\"dv\"), reader.maxDoc());\n    } else {\n      return weight.scorer(reader.getContext(), true, false, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,boolean).mjava","sourceNew":"  private Scorer scorer(String values[], int minShouldMatch, boolean slow) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq);\n    \n    if (slow) {\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    } else {\n      return weight.scorer(reader.getContext(), null);\n    }\n  }\n\n","sourceOld":"  private Scorer scorer(String values[], int minShouldMatch, boolean slow) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq);\n    \n    if (slow) {\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    } else {\n      return weight.scorer(reader.getContext(), true, false, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,boolean).mjava","sourceNew":"  private Scorer scorer(String values[], int minShouldMatch, boolean slow) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq);\n    \n    if (slow) {\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    } else {\n      return weight.scorer(reader.getContext(), null);\n    }\n  }\n\n","sourceOld":"  private Scorer scorer(String values[], int minShouldMatch, boolean slow) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq);\n    \n    if (slow) {\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    } else {\n      return weight.scorer(reader.getContext(), true, false, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251e6911800e3a02e1da3bfd4dc49a914aef9778","date":1423063783,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,Mode).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#scorer(String[],int,boolean).mjava","sourceNew":"  private Scorer scorer(String values[], int minShouldMatch, Mode mode) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq);\n    \n    switch (mode) {\n    case DOC_VALUES:\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    case SCORER:\n      return weight.scorer(reader.getContext(), null);\n    case BULK_SCORER:\n      final BulkScorer bulkScorer = weight.booleanScorer(reader.getContext(), null);\n      if (bulkScorer == null) {\n        if (weight.scorer(reader.getContext(), null) != null) {\n          throw new AssertionError(\"BooleanScorer should be applicable for this query\");\n        }\n        return null;\n      }\n      return new BulkScorerWrapperScorer(weight, bulkScorer, TestUtil.nextInt(random(), 1, 100));\n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private Scorer scorer(String values[], int minShouldMatch, boolean slow) throws Exception {\n    BooleanQuery bq = new BooleanQuery();\n    for (String value : values) {\n      bq.add(new TermQuery(new Term(\"field\", value)), BooleanClause.Occur.SHOULD);\n    }\n    bq.setMinimumNumberShouldMatch(minShouldMatch);\n\n    BooleanWeight weight = (BooleanWeight) searcher.createNormalizedWeight(bq);\n    \n    if (slow) {\n      return new SlowMinShouldMatchScorer(weight, reader, searcher);\n    } else {\n      return weight.scorer(reader.getContext(), null);\n    }\n  }\n\n","bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["707f5285c280ff14fa898e7722e57b7a46b81a76"],"251e6911800e3a02e1da3bfd4dc49a914aef9778":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"2e327741cef719817558806865704ff0864d12fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acf00221f44c5f08ccea014f2492b53af15ecd66":["707f5285c280ff14fa898e7722e57b7a46b81a76","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"707f5285c280ff14fa898e7722e57b7a46b81a76":["2e327741cef719817558806865704ff0864d12fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["251e6911800e3a02e1da3bfd4dc49a914aef9778"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"251e6911800e3a02e1da3bfd4dc49a914aef9778":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e327741cef719817558806865704ff0864d12fd":["707f5285c280ff14fa898e7722e57b7a46b81a76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e327741cef719817558806865704ff0864d12fd"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"707f5285c280ff14fa898e7722e57b7a46b81a76":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}