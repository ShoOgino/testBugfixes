{"path":"lucene/luke/src/java/org/apache/lucene/luke/models/util/IndexUtils#openIndex(String,String).mjava","commits":[{"id":"f554f2d9b5456248ab6467b9d4f6015686797a6c","date":1554891357,"type":0,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/models/util/IndexUtils#openIndex(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Opens index(es) reader for given index path.\n   *\n   * @param indexPath - path to the index directory\n   * @param dirImpl - class name for the specific directory implementation\n   * @return index reader\n   * @throws Exception - if there is a low level IO error.\n   */\n  public static IndexReader openIndex(String indexPath, String dirImpl)\n      throws Exception {\n    final Path root = FileSystems.getDefault().getPath(Objects.requireNonNull(indexPath));\n    final List<DirectoryReader> readers = new ArrayList<>();\n\n    // find all valid index directories in this directory\n    Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n      @Override\n      public FileVisitResult preVisitDirectory(Path path, BasicFileAttributes attrs) throws IOException {\n        Directory dir = openDirectory(path, dirImpl);\n        try {\n          DirectoryReader dr = DirectoryReader.open(dir);\n          readers.add(dr);\n        } catch (IOException e) {\n          log.warn(e.getMessage(), e);\n        }\n        return FileVisitResult.CONTINUE;\n      }\n    });\n\n    if (readers.isEmpty()) {\n      throw new RuntimeException(\"No valid directory at the location: \" + indexPath);\n    }\n\n    log.info(String.format(Locale.ENGLISH, \"IndexReaders (%d leaf readers) successfully opened. Index path=%s\", readers.size(), indexPath));\n\n    if (readers.size() == 1) {\n      return readers.get(0);\n    } else {\n      return new MultiReader(readers.toArray(new IndexReader[readers.size()]));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/models/util/IndexUtils#openIndex(String,String).mjava","pathOld":"lucene/luke/src/java/org/apache/lucene/luke/models/util/IndexUtils#openIndex(String,String).mjava","sourceNew":"  /**\n   * Opens index(es) reader for given index path.\n   *\n   * @param indexPath - path to the index directory\n   * @param dirImpl - class name for the specific directory implementation\n   * @return index reader\n   * @throws Exception - if there is a low level IO error.\n   */\n  public static IndexReader openIndex(String indexPath, String dirImpl)\n      throws Exception {\n    final Path root = FileSystems.getDefault().getPath(Objects.requireNonNull(indexPath));\n    final List<DirectoryReader> readers = new ArrayList<>();\n\n    // find all valid index directories in this directory\n    Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n      @Override\n      public FileVisitResult preVisitDirectory(Path path, BasicFileAttributes attrs) throws IOException {\n        Directory dir = openDirectory(path, dirImpl);\n        try {\n          DirectoryReader dr = DirectoryReader.open(dir);\n          readers.add(dr);\n        } catch (IOException e) {\n          log.warn(e.getMessage(), e);\n        }\n        return FileVisitResult.CONTINUE;\n      }\n    });\n\n    if (readers.isEmpty()) {\n      throw new RuntimeException(\"No valid directory at the location: \" + indexPath);\n    }\n\n    if (log.isInfoEnabled()) {\n      log.info(String.format(Locale.ENGLISH, \"IndexReaders (%d leaf readers) successfully opened. Index path=%s\", readers.size(), indexPath));\n    }\n\n    if (readers.size() == 1) {\n      return readers.get(0);\n    } else {\n      return new MultiReader(readers.toArray(new IndexReader[readers.size()]));\n    }\n  }\n\n","sourceOld":"  /**\n   * Opens index(es) reader for given index path.\n   *\n   * @param indexPath - path to the index directory\n   * @param dirImpl - class name for the specific directory implementation\n   * @return index reader\n   * @throws Exception - if there is a low level IO error.\n   */\n  public static IndexReader openIndex(String indexPath, String dirImpl)\n      throws Exception {\n    final Path root = FileSystems.getDefault().getPath(Objects.requireNonNull(indexPath));\n    final List<DirectoryReader> readers = new ArrayList<>();\n\n    // find all valid index directories in this directory\n    Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n      @Override\n      public FileVisitResult preVisitDirectory(Path path, BasicFileAttributes attrs) throws IOException {\n        Directory dir = openDirectory(path, dirImpl);\n        try {\n          DirectoryReader dr = DirectoryReader.open(dir);\n          readers.add(dr);\n        } catch (IOException e) {\n          log.warn(e.getMessage(), e);\n        }\n        return FileVisitResult.CONTINUE;\n      }\n    });\n\n    if (readers.isEmpty()) {\n      throw new RuntimeException(\"No valid directory at the location: \" + indexPath);\n    }\n\n    log.info(String.format(Locale.ENGLISH, \"IndexReaders (%d leaf readers) successfully opened. Index path=%s\", readers.size(), indexPath));\n\n    if (readers.size() == 1) {\n      return readers.get(0);\n    } else {\n      return new MultiReader(readers.toArray(new IndexReader[readers.size()]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"265216658b9b02ae56c6ccd3def38eacedbea7d3","date":1593139450,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/models/util/IndexUtils#openIndex(String,String).mjava","pathOld":"lucene/luke/src/java/org/apache/lucene/luke/models/util/IndexUtils#openIndex(String,String).mjava","sourceNew":"  /**\n   * Opens index(es) reader for given index path.\n   *\n   * @param indexPath - path to the index directory\n   * @param dirImpl - class name for the specific directory implementation\n   * @return index reader\n   * @throws Exception - if there is a low level IO error.\n   */\n  public static IndexReader openIndex(String indexPath, String dirImpl)\n      throws Exception {\n    final Path root = FileSystems.getDefault().getPath(Objects.requireNonNull(indexPath));\n    final List<DirectoryReader> readers = new ArrayList<>();\n\n    // find all valid index directories in this directory\n    Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n      @Override\n      public FileVisitResult preVisitDirectory(Path path, BasicFileAttributes attrs) throws IOException {\n        Directory dir = openDirectory(path, dirImpl);\n        try {\n          DirectoryReader dr = DirectoryReader.open(dir);\n          readers.add(dr);\n        } catch (IOException e) {\n          log.warn(\"Error opening directory\", e);\n        }\n        return FileVisitResult.CONTINUE;\n      }\n    });\n\n    if (readers.isEmpty()) {\n      throw new RuntimeException(\"No valid directory at the location: \" + indexPath);\n    }\n\n    if (log.isInfoEnabled()) {\n      log.info(String.format(Locale.ENGLISH, \"IndexReaders (%d leaf readers) successfully opened. Index path=%s\", readers.size(), indexPath));\n    }\n\n    if (readers.size() == 1) {\n      return readers.get(0);\n    } else {\n      return new MultiReader(readers.toArray(new IndexReader[readers.size()]));\n    }\n  }\n\n","sourceOld":"  /**\n   * Opens index(es) reader for given index path.\n   *\n   * @param indexPath - path to the index directory\n   * @param dirImpl - class name for the specific directory implementation\n   * @return index reader\n   * @throws Exception - if there is a low level IO error.\n   */\n  public static IndexReader openIndex(String indexPath, String dirImpl)\n      throws Exception {\n    final Path root = FileSystems.getDefault().getPath(Objects.requireNonNull(indexPath));\n    final List<DirectoryReader> readers = new ArrayList<>();\n\n    // find all valid index directories in this directory\n    Files.walkFileTree(root, new SimpleFileVisitor<Path>() {\n      @Override\n      public FileVisitResult preVisitDirectory(Path path, BasicFileAttributes attrs) throws IOException {\n        Directory dir = openDirectory(path, dirImpl);\n        try {\n          DirectoryReader dr = DirectoryReader.open(dir);\n          readers.add(dr);\n        } catch (IOException e) {\n          log.warn(e.getMessage(), e);\n        }\n        return FileVisitResult.CONTINUE;\n      }\n    });\n\n    if (readers.isEmpty()) {\n      throw new RuntimeException(\"No valid directory at the location: \" + indexPath);\n    }\n\n    if (log.isInfoEnabled()) {\n      log.info(String.format(Locale.ENGLISH, \"IndexReaders (%d leaf readers) successfully opened. Index path=%s\", readers.size(), indexPath));\n    }\n\n    if (readers.size() == 1) {\n      return readers.get(0);\n    } else {\n      return new MultiReader(readers.toArray(new IndexReader[readers.size()]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"265216658b9b02ae56c6ccd3def38eacedbea7d3":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["f554f2d9b5456248ab6467b9d4f6015686797a6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["265216658b9b02ae56c6ccd3def38eacedbea7d3"]},"commit2Childs":{"265216658b9b02ae56c6ccd3def38eacedbea7d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f554f2d9b5456248ab6467b9d4f6015686797a6c"],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["265216658b9b02ae56c6ccd3def38eacedbea7d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}