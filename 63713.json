{"path":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#getDateResolution(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#getDateResolution(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getDateResolution(String).mjava","sourceNew":"  /**\n   * Returns the date resolution that is used by RangeQueries for the given field. \n   * Returns null, if no default or field specific date resolution has been set\n   * for the given field.\n   *\n   */\n  public DateTools.Resolution getDateResolution(String fieldName) {\n    if (fieldName == null) {\n      throw new IllegalArgumentException(\"Field cannot be null.\");\n    }\n\n    if (fieldToDateResolution == null) {\n      // no field specific date resolutions set; return default date resolution instead\n      return this.dateResolution;\n    }\n\n    DateTools.Resolution resolution = fieldToDateResolution.get(fieldName);\n    if (resolution == null) {\n      // no date resolutions set for the given field; return default date resolution instead\n      resolution = this.dateResolution;\n    }\n\n    return resolution;\n  }\n\n","sourceOld":"  /**\n   * Returns the date resolution that is used by RangeQueries for the given field. \n   * Returns null, if no default or field specific date resolution has been set\n   * for the given field.\n   *\n   */\n  public DateTools.Resolution getDateResolution(String fieldName) {\n    if (fieldName == null) {\n      throw new IllegalArgumentException(\"Field cannot be null.\");\n    }\n\n    if (fieldToDateResolution == null) {\n      // no field specific date resolutions set; return default date resolution instead\n      return this.dateResolution;\n    }\n\n    DateTools.Resolution resolution = fieldToDateResolution.get(fieldName);\n    if (resolution == null) {\n      // no date resolutions set for the given field; return default date resolution instead\n      resolution = this.dateResolution;\n    }\n\n    return resolution;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e87c4193bc100c3b96235f14bee01a5b2009ce5","date":1287756261,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getDateResolution(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#getDateResolution(String).mjava","sourceNew":"  /**\r\n   * Returns the date resolution that is used by RangeQueries for the given field.\r\n   * Returns null, if no default or field specific date resolution has been set\r\n   * for the given field.\r\n   *\r\n   */\r\n  public DateTools.Resolution getDateResolution(String fieldName) {\r\n    if (fieldName == null) {\r\n      throw new IllegalArgumentException(\"Field cannot be null.\");\r\n    }\r\n\r\n    if (fieldToDateResolution == null) {\r\n      // no field specific date resolutions set; return default date resolution instead\r\n      return this.dateResolution;\r\n    }\r\n\r\n    DateTools.Resolution resolution = fieldToDateResolution.get(fieldName);\r\n    if (resolution == null) {\r\n      // no date resolutions set for the given field; return default date resolution instead\r\n      resolution = this.dateResolution;\r\n    }\r\n\r\n    return resolution;\r\n  }\r\n\n","sourceOld":"  /**\n   * Returns the date resolution that is used by RangeQueries for the given field. \n   * Returns null, if no default or field specific date resolution has been set\n   * for the given field.\n   *\n   */\n  public DateTools.Resolution getDateResolution(String fieldName) {\n    if (fieldName == null) {\n      throw new IllegalArgumentException(\"Field cannot be null.\");\n    }\n\n    if (fieldToDateResolution == null) {\n      // no field specific date resolutions set; return default date resolution instead\n      return this.dateResolution;\n    }\n\n    DateTools.Resolution resolution = fieldToDateResolution.get(fieldName);\n    if (resolution == null) {\n      // no date resolutions set for the given field; return default date resolution instead\n      resolution = this.dateResolution;\n    }\n\n    return resolution;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getDateResolution(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#getDateResolution(String).mjava","sourceNew":"  /**\r\n   * Returns the date resolution that is used by RangeQueries for the given field.\r\n   * Returns null, if no default or field specific date resolution has been set\r\n   * for the given field.\r\n   *\r\n   */\r\n  public DateTools.Resolution getDateResolution(String fieldName) {\r\n    if (fieldName == null) {\r\n      throw new IllegalArgumentException(\"Field cannot be null.\");\r\n    }\r\n\r\n    if (fieldToDateResolution == null) {\r\n      // no field specific date resolutions set; return default date resolution instead\r\n      return this.dateResolution;\r\n    }\r\n\r\n    DateTools.Resolution resolution = fieldToDateResolution.get(fieldName);\r\n    if (resolution == null) {\r\n      // no date resolutions set for the given field; return default date resolution instead\r\n      resolution = this.dateResolution;\r\n    }\r\n\r\n    return resolution;\r\n  }\r\n\n","sourceOld":"  /**\n   * Returns the date resolution that is used by RangeQueries for the given field. \n   * Returns null, if no default or field specific date resolution has been set\n   * for the given field.\n   *\n   */\n  public DateTools.Resolution getDateResolution(String fieldName) {\n    if (fieldName == null) {\n      throw new IllegalArgumentException(\"Field cannot be null.\");\n    }\n\n    if (fieldToDateResolution == null) {\n      // no field specific date resolutions set; return default date resolution instead\n      return this.dateResolution;\n    }\n\n    DateTools.Resolution resolution = fieldToDateResolution.get(fieldName);\n    if (resolution == null) {\n      // no date resolutions set for the given field; return default date resolution instead\n      resolution = this.dateResolution;\n    }\n\n    return resolution;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#getDateResolution(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the date resolution that is used by RangeQueries for the given field. \n   * Returns null, if no default or field specific date resolution has been set\n   * for the given field.\n   *\n   */\n  public DateTools.Resolution getDateResolution(String fieldName) {\n    if (fieldName == null) {\n      throw new IllegalArgumentException(\"Field cannot be null.\");\n    }\n\n    if (fieldToDateResolution == null) {\n      // no field specific date resolutions set; return default date resolution instead\n      return this.dateResolution;\n    }\n\n    DateTools.Resolution resolution = fieldToDateResolution.get(fieldName);\n    if (resolution == null) {\n      // no date resolutions set for the given field; return default date resolution instead\n      resolution = this.dateResolution;\n    }\n\n    return resolution;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9e87c4193bc100c3b96235f14bee01a5b2009ce5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["9454a6510e2db155fb01faa5c049b06ece95fab9","9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9e87c4193bc100c3b96235f14bee01a5b2009ce5":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9e87c4193bc100c3b96235f14bee01a5b2009ce5","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}