{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree.QuadCell#concat(BytesRef,byte,BytesRef).mjava","commits":[{"id":"4de14be4bd1b857ba37ca138b61c4661c6d1bed3","date":1396628861,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree.QuadCell#concat(BytesRef,byte,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    private BytesRef concat(BytesRef source, byte b, BytesRef target) {\n      assert target.offset == 0;\n      target.bytes = new byte[source.length + 2];//+2 for new char + potential leaf\n      target.length = 0;\n      target.copyBytes(source);\n      target.bytes[target.length++] = b;\n      return target;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree.QuadCell#concat(BytesRef,byte,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    private BytesRef concat(BytesRef source, byte b, BytesRef target) {\n      assert target.offset == 0;\n      target.bytes = new byte[source.length + 2];//+2 for new char + potential leaf\n      target.length = 0;\n      target.copyBytes(source);\n      target.bytes[target.length++] = b;\n      return target;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree.QuadCell#concat(BytesRef,byte,BytesRef).mjava","sourceNew":null,"sourceOld":"    private BytesRef concat(BytesRef source, byte b, BytesRef target) {\n      assert target.offset == 0;\n      target.bytes = new byte[source.length + 2];//+2 for new char + potential leaf\n      target.length = 0;\n      target.copyBytes(source);\n      target.bytes[target.length++] = b;\n      return target;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}