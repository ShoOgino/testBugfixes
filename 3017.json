{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","commits":[{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#SearchRateTrigger(String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","sourceNew":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    // parse config options\n    collection = (String)properties.getOrDefault(AutoScalingParams.COLLECTION, Policy.ANY);\n    shard = (String)properties.getOrDefault(AutoScalingParams.SHARD, Policy.ANY);\n    if (collection.equals(Policy.ANY) && !shard.equals(Policy.ANY)) {\n      throw new TriggerValidationException(\"shard\", \"When 'shard' is other than #ANY then collection name must be also other than #ANY\");\n    }\n    node = (String)properties.getOrDefault(AutoScalingParams.NODE, Policy.ANY);\n    handler = (String)properties.getOrDefault(AutoScalingParams.HANDLER, \"/select\");\n\n    String rateString = String.valueOf(properties.get(\"rate\"));\n    try {\n      rate = Double.parseDouble(rateString);\n    } catch (Exception e) {\n      throw new TriggerValidationException(name, \"rate\", \"Invalid 'rate' configuration value: '\" + rateString + \"': \" + e.toString());\n    }\n  }\n\n","sourceOld":"  public SearchRateTrigger(String name, Map<String, Object> properties,\n                           SolrResourceLoader loader,\n                           SolrCloudManager cloudManager) {\n    super(TriggerEventType.SEARCHRATE, name, properties, loader, cloudManager);\n    this.state.put(\"lastCollectionEvent\", lastCollectionEvent);\n    this.state.put(\"lastNodeEvent\", lastNodeEvent);\n    this.state.put(\"lastShardEvent\", lastShardEvent);\n    this.state.put(\"lastReplicaEvent\", lastReplicaEvent);\n\n    // parse config options\n    collection = (String)properties.getOrDefault(AutoScalingParams.COLLECTION, Policy.ANY);\n    shard = (String)properties.getOrDefault(AutoScalingParams.SHARD, Policy.ANY);\n    if (collection.equals(Policy.ANY) && !shard.equals(Policy.ANY)) {\n      throw new IllegalArgumentException(\"When 'shard' is other than #ANY then collection name must be also other than #ANY\");\n    }\n    node = (String)properties.getOrDefault(AutoScalingParams.NODE, Policy.ANY);\n    handler = (String)properties.getOrDefault(AutoScalingParams.HANDLER, \"/select\");\n\n    if (properties.get(\"rate\") == null) {\n      throw new IllegalArgumentException(\"No 'rate' specified in configuration\");\n    }\n    String rateString = String.valueOf(properties.get(\"rate\"));\n    try {\n      rate = Double.parseDouble(rateString);\n    } catch (Exception e) {\n      throw new IllegalArgumentException(\"Invalid 'rate' configuration value: '\" + rateString + \"'\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a","date":1524514741,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","sourceNew":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    // parse config options\n    String collectionsStr = (String)properties.get(COLLECTIONS_PROP);\n    if (collectionsStr != null) {\n      collections.addAll(StrUtils.splitSmart(collectionsStr, ','));\n    }\n    // check back-compat collection prop\n    collectionsStr = (String)properties.get(BC_COLLECTION_PROP);\n    if (collectionsStr != null) {\n      if (!collectionsStr.equals(Policy.ANY)) {\n        collections.add(collectionsStr);\n      }\n    }\n    shard = (String)properties.getOrDefault(AutoScalingParams.SHARD, Policy.ANY);\n    if (!shard.equals(Policy.ANY) && (collections.isEmpty() || collections.size() > 1)) {\n      throw new TriggerValidationException(name, AutoScalingParams.SHARD, \"When 'shard' is other than #ANY then exactly one collection name must be set\");\n    }\n    node = (String)properties.getOrDefault(AutoScalingParams.NODE, Policy.ANY);\n    metric = (String)properties.getOrDefault(METRIC_PROP, DEFAULT_METRIC);\n\n    String maxOpsStr = String.valueOf(properties.getOrDefault(MAX_OPS_PROP, DEFAULT_MAX_OPS));\n    try {\n      maxOps = Integer.parseInt(maxOpsStr);\n    } catch (Exception e) {\n      throw new TriggerValidationException(name, MAX_OPS_PROP, \"invalid value '\" + maxOpsStr + \"': \" + e.toString());\n    }\n\n    Object o = properties.get(MIN_REPLICAS_PROP);\n    if (o != null) {\n      try {\n        minReplicas = Integer.parseInt(o.toString());\n        if (minReplicas < 1) {\n          throw new Exception(\"must be at least 1, or not set to use 'replicationFactor'\");\n        }\n      } catch (Exception e) {\n        throw new TriggerValidationException(name, MIN_REPLICAS_PROP, \"invalid value '\" + o + \"': \" + e.toString());\n      }\n    }\n\n    Object above = properties.get(ABOVE_RATE_PROP);\n    Object below = properties.get(BELOW_RATE_PROP);\n    // back-compat rate prop\n    if (properties.containsKey(BC_RATE_PROP)) {\n      above = properties.get(BC_RATE_PROP);\n    }\n    if (above == null && below == null) {\n      throw new TriggerValidationException(name, ABOVE_RATE_PROP, \"at least one of '\" +\n      ABOVE_RATE_PROP + \"' or '\" + BELOW_RATE_PROP + \"' must be set\");\n    }\n    if (above != null) {\n      try {\n        aboveRate = Double.parseDouble(String.valueOf(above));\n      } catch (Exception e) {\n        throw new TriggerValidationException(name, ABOVE_RATE_PROP, \"Invalid configuration value: '\" + above + \"': \" + e.toString());\n      }\n    } else {\n      aboveRate = Double.MAX_VALUE;\n    }\n    if (below != null) {\n      try {\n        belowRate = Double.parseDouble(String.valueOf(below));\n      } catch (Exception e) {\n        throw new TriggerValidationException(name, BELOW_RATE_PROP, \"Invalid configuration value: '\" + below + \"': \" + e.toString());\n      }\n    } else {\n      belowRate = -1;\n    }\n\n    String aboveOpStr = String.valueOf(properties.getOrDefault(ABOVE_OP_PROP, CollectionParams.CollectionAction.ADDREPLICA.toLower()));\n    String belowOpStr = String.valueOf(properties.getOrDefault(BELOW_OP_PROP, CollectionParams.CollectionAction.DELETEREPLICA.toLower()));\n    aboveOp = CollectionParams.CollectionAction.get(aboveOpStr);\n    if (aboveOp == null) {\n      throw new TriggerValidationException(getName(), ABOVE_OP_PROP, \"unrecognized value: '\" + aboveOpStr + \"'\");\n    }\n    belowOp = CollectionParams.CollectionAction.get(belowOpStr);\n    if (belowOp == null) {\n      throw new TriggerValidationException(getName(), BELOW_OP_PROP, \"unrecognized value: '\" + belowOpStr + \"'\");\n    }\n    Object aboveNodeObj = properties.getOrDefault(ABOVE_NODE_OP_PROP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n    // do NOT set the default to DELETENODE\n    Object belowNodeObj = properties.get(BELOW_NODE_OP_PROP);\n    try {\n      aboveNodeOp = CollectionParams.CollectionAction.get(String.valueOf(aboveNodeObj));\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_NODE_OP_PROP, \"unrecognized value: '\" + aboveNodeObj + \"'\");\n    }\n    if (belowNodeObj != null) {\n      try {\n        belowNodeOp = CollectionParams.CollectionAction.get(String.valueOf(belowNodeObj));\n      } catch (Exception e) {\n        throw new TriggerValidationException(getName(), BELOW_NODE_OP_PROP, \"unrecognized value: '\" + belowNodeObj + \"'\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    // parse config options\n    collection = (String)properties.getOrDefault(AutoScalingParams.COLLECTION, Policy.ANY);\n    shard = (String)properties.getOrDefault(AutoScalingParams.SHARD, Policy.ANY);\n    if (collection.equals(Policy.ANY) && !shard.equals(Policy.ANY)) {\n      throw new TriggerValidationException(\"shard\", \"When 'shard' is other than #ANY then collection name must be also other than #ANY\");\n    }\n    node = (String)properties.getOrDefault(AutoScalingParams.NODE, Policy.ANY);\n    handler = (String)properties.getOrDefault(AutoScalingParams.HANDLER, \"/select\");\n\n    String rateString = String.valueOf(properties.get(\"rate\"));\n    try {\n      rate = Double.parseDouble(rateString);\n    } catch (Exception e) {\n      throw new TriggerValidationException(name, \"rate\", \"Invalid 'rate' configuration value: '\" + rateString + \"': \" + e.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","sourceNew":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    // parse config options\n    String collectionsStr = (String)properties.get(COLLECTIONS_PROP);\n    if (collectionsStr != null) {\n      collections.addAll(StrUtils.splitSmart(collectionsStr, ','));\n    }\n    // check back-compat collection prop\n    collectionsStr = (String)properties.get(BC_COLLECTION_PROP);\n    if (collectionsStr != null) {\n      if (!collectionsStr.equals(Policy.ANY)) {\n        collections.add(collectionsStr);\n      }\n    }\n    shard = (String)properties.getOrDefault(AutoScalingParams.SHARD, Policy.ANY);\n    if (!shard.equals(Policy.ANY) && (collections.isEmpty() || collections.size() > 1)) {\n      throw new TriggerValidationException(name, AutoScalingParams.SHARD, \"When 'shard' is other than #ANY then exactly one collection name must be set\");\n    }\n    node = (String)properties.getOrDefault(AutoScalingParams.NODE, Policy.ANY);\n    metric = (String)properties.getOrDefault(METRIC_PROP, DEFAULT_METRIC);\n\n    String maxOpsStr = String.valueOf(properties.getOrDefault(MAX_OPS_PROP, DEFAULT_MAX_OPS));\n    try {\n      maxOps = Integer.parseInt(maxOpsStr);\n    } catch (Exception e) {\n      throw new TriggerValidationException(name, MAX_OPS_PROP, \"invalid value '\" + maxOpsStr + \"': \" + e.toString());\n    }\n\n    Object o = properties.get(MIN_REPLICAS_PROP);\n    if (o != null) {\n      try {\n        minReplicas = Integer.parseInt(o.toString());\n        if (minReplicas < 1) {\n          throw new Exception(\"must be at least 1, or not set to use 'replicationFactor'\");\n        }\n      } catch (Exception e) {\n        throw new TriggerValidationException(name, MIN_REPLICAS_PROP, \"invalid value '\" + o + \"': \" + e.toString());\n      }\n    }\n\n    Object above = properties.get(ABOVE_RATE_PROP);\n    Object below = properties.get(BELOW_RATE_PROP);\n    // back-compat rate prop\n    if (properties.containsKey(BC_RATE_PROP)) {\n      above = properties.get(BC_RATE_PROP);\n    }\n    if (above == null && below == null) {\n      throw new TriggerValidationException(name, ABOVE_RATE_PROP, \"at least one of '\" +\n      ABOVE_RATE_PROP + \"' or '\" + BELOW_RATE_PROP + \"' must be set\");\n    }\n    if (above != null) {\n      try {\n        aboveRate = Double.parseDouble(String.valueOf(above));\n      } catch (Exception e) {\n        throw new TriggerValidationException(name, ABOVE_RATE_PROP, \"Invalid configuration value: '\" + above + \"': \" + e.toString());\n      }\n    } else {\n      aboveRate = Double.MAX_VALUE;\n    }\n    if (below != null) {\n      try {\n        belowRate = Double.parseDouble(String.valueOf(below));\n      } catch (Exception e) {\n        throw new TriggerValidationException(name, BELOW_RATE_PROP, \"Invalid configuration value: '\" + below + \"': \" + e.toString());\n      }\n    } else {\n      belowRate = -1;\n    }\n\n    // node rates\n    above = properties.get(ABOVE_NODE_RATE_PROP);\n    below = properties.get(BELOW_NODE_RATE_PROP);\n    if (above != null) {\n      try {\n        aboveNodeRate = Double.parseDouble(String.valueOf(above));\n      } catch (Exception e) {\n        throw new TriggerValidationException(name, ABOVE_NODE_RATE_PROP, \"Invalid configuration value: '\" + above + \"': \" + e.toString());\n      }\n    } else {\n      aboveNodeRate = Double.MAX_VALUE;\n    }\n    if (below != null) {\n      try {\n        belowNodeRate = Double.parseDouble(String.valueOf(below));\n      } catch (Exception e) {\n        throw new TriggerValidationException(name, BELOW_NODE_RATE_PROP, \"Invalid configuration value: '\" + below + \"': \" + e.toString());\n      }\n    } else {\n      belowNodeRate = -1;\n    }\n\n    String aboveOpStr = String.valueOf(properties.getOrDefault(ABOVE_OP_PROP, CollectionParams.CollectionAction.ADDREPLICA.toLower()));\n    String belowOpStr = String.valueOf(properties.getOrDefault(BELOW_OP_PROP, CollectionParams.CollectionAction.DELETEREPLICA.toLower()));\n    aboveOp = CollectionParams.CollectionAction.get(aboveOpStr);\n    if (aboveOp == null) {\n      throw new TriggerValidationException(getName(), ABOVE_OP_PROP, \"unrecognized value: '\" + aboveOpStr + \"'\");\n    }\n    belowOp = CollectionParams.CollectionAction.get(belowOpStr);\n    if (belowOp == null) {\n      throw new TriggerValidationException(getName(), BELOW_OP_PROP, \"unrecognized value: '\" + belowOpStr + \"'\");\n    }\n    Object aboveNodeObj = properties.getOrDefault(ABOVE_NODE_OP_PROP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n    // do NOT set the default to DELETENODE\n    Object belowNodeObj = properties.get(BELOW_NODE_OP_PROP);\n    try {\n      aboveNodeOp = CollectionParams.CollectionAction.get(String.valueOf(aboveNodeObj));\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_NODE_OP_PROP, \"unrecognized value: '\" + aboveNodeObj + \"'\");\n    }\n    if (belowNodeObj != null) {\n      try {\n        belowNodeOp = CollectionParams.CollectionAction.get(String.valueOf(belowNodeObj));\n      } catch (Exception e) {\n        throw new TriggerValidationException(getName(), BELOW_NODE_OP_PROP, \"unrecognized value: '\" + belowNodeObj + \"'\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    // parse config options\n    String collectionsStr = (String)properties.get(COLLECTIONS_PROP);\n    if (collectionsStr != null) {\n      collections.addAll(StrUtils.splitSmart(collectionsStr, ','));\n    }\n    // check back-compat collection prop\n    collectionsStr = (String)properties.get(BC_COLLECTION_PROP);\n    if (collectionsStr != null) {\n      if (!collectionsStr.equals(Policy.ANY)) {\n        collections.add(collectionsStr);\n      }\n    }\n    shard = (String)properties.getOrDefault(AutoScalingParams.SHARD, Policy.ANY);\n    if (!shard.equals(Policy.ANY) && (collections.isEmpty() || collections.size() > 1)) {\n      throw new TriggerValidationException(name, AutoScalingParams.SHARD, \"When 'shard' is other than #ANY then exactly one collection name must be set\");\n    }\n    node = (String)properties.getOrDefault(AutoScalingParams.NODE, Policy.ANY);\n    metric = (String)properties.getOrDefault(METRIC_PROP, DEFAULT_METRIC);\n\n    String maxOpsStr = String.valueOf(properties.getOrDefault(MAX_OPS_PROP, DEFAULT_MAX_OPS));\n    try {\n      maxOps = Integer.parseInt(maxOpsStr);\n    } catch (Exception e) {\n      throw new TriggerValidationException(name, MAX_OPS_PROP, \"invalid value '\" + maxOpsStr + \"': \" + e.toString());\n    }\n\n    Object o = properties.get(MIN_REPLICAS_PROP);\n    if (o != null) {\n      try {\n        minReplicas = Integer.parseInt(o.toString());\n        if (minReplicas < 1) {\n          throw new Exception(\"must be at least 1, or not set to use 'replicationFactor'\");\n        }\n      } catch (Exception e) {\n        throw new TriggerValidationException(name, MIN_REPLICAS_PROP, \"invalid value '\" + o + \"': \" + e.toString());\n      }\n    }\n\n    Object above = properties.get(ABOVE_RATE_PROP);\n    Object below = properties.get(BELOW_RATE_PROP);\n    // back-compat rate prop\n    if (properties.containsKey(BC_RATE_PROP)) {\n      above = properties.get(BC_RATE_PROP);\n    }\n    if (above == null && below == null) {\n      throw new TriggerValidationException(name, ABOVE_RATE_PROP, \"at least one of '\" +\n      ABOVE_RATE_PROP + \"' or '\" + BELOW_RATE_PROP + \"' must be set\");\n    }\n    if (above != null) {\n      try {\n        aboveRate = Double.parseDouble(String.valueOf(above));\n      } catch (Exception e) {\n        throw new TriggerValidationException(name, ABOVE_RATE_PROP, \"Invalid configuration value: '\" + above + \"': \" + e.toString());\n      }\n    } else {\n      aboveRate = Double.MAX_VALUE;\n    }\n    if (below != null) {\n      try {\n        belowRate = Double.parseDouble(String.valueOf(below));\n      } catch (Exception e) {\n        throw new TriggerValidationException(name, BELOW_RATE_PROP, \"Invalid configuration value: '\" + below + \"': \" + e.toString());\n      }\n    } else {\n      belowRate = -1;\n    }\n\n    String aboveOpStr = String.valueOf(properties.getOrDefault(ABOVE_OP_PROP, CollectionParams.CollectionAction.ADDREPLICA.toLower()));\n    String belowOpStr = String.valueOf(properties.getOrDefault(BELOW_OP_PROP, CollectionParams.CollectionAction.DELETEREPLICA.toLower()));\n    aboveOp = CollectionParams.CollectionAction.get(aboveOpStr);\n    if (aboveOp == null) {\n      throw new TriggerValidationException(getName(), ABOVE_OP_PROP, \"unrecognized value: '\" + aboveOpStr + \"'\");\n    }\n    belowOp = CollectionParams.CollectionAction.get(belowOpStr);\n    if (belowOp == null) {\n      throw new TriggerValidationException(getName(), BELOW_OP_PROP, \"unrecognized value: '\" + belowOpStr + \"'\");\n    }\n    Object aboveNodeObj = properties.getOrDefault(ABOVE_NODE_OP_PROP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n    // do NOT set the default to DELETENODE\n    Object belowNodeObj = properties.get(BELOW_NODE_OP_PROP);\n    try {\n      aboveNodeOp = CollectionParams.CollectionAction.get(String.valueOf(aboveNodeObj));\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_NODE_OP_PROP, \"unrecognized value: '\" + aboveNodeObj + \"'\");\n    }\n    if (belowNodeObj != null) {\n      try {\n        belowNodeOp = CollectionParams.CollectionAction.get(String.valueOf(belowNodeObj));\n      } catch (Exception e) {\n        throw new TriggerValidationException(getName(), BELOW_NODE_OP_PROP, \"unrecognized value: '\" + belowNodeObj + \"'\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    super.configure(loader, cloudManager, properties);\n    // parse config options\n    String collectionsStr = (String)properties.get(COLLECTIONS_PROP);\n    if (collectionsStr != null) {\n      collections.addAll(StrUtils.splitSmart(collectionsStr, ','));\n    }\n    // check back-compat collection prop\n    collectionsStr = (String)properties.get(BC_COLLECTION_PROP);\n    if (collectionsStr != null) {\n      if (!collectionsStr.equals(Policy.ANY)) {\n        collections.add(collectionsStr);\n      }\n    }\n    shard = (String)properties.getOrDefault(AutoScalingParams.SHARD, Policy.ANY);\n    if (!shard.equals(Policy.ANY) && (collections.isEmpty() || collections.size() > 1)) {\n      throw new TriggerValidationException(name, AutoScalingParams.SHARD, \"When 'shard' is other than #ANY then exactly one collection name must be set\");\n    }\n    node = (String)properties.getOrDefault(AutoScalingParams.NODE, Policy.ANY);\n    metric = (String)properties.getOrDefault(METRIC_PROP, DEFAULT_METRIC);\n\n    String maxOpsStr = String.valueOf(properties.getOrDefault(MAX_OPS_PROP, DEFAULT_MAX_OPS));\n    try {\n      maxOps = Integer.parseInt(maxOpsStr);\n    } catch (Exception e) {\n      throw new TriggerValidationException(name, MAX_OPS_PROP, \"invalid value '\" + maxOpsStr + \"': \" + e.toString());\n    }\n\n    Object o = properties.get(MIN_REPLICAS_PROP);\n    if (o != null) {\n      try {\n        minReplicas = Integer.parseInt(o.toString());\n        if (minReplicas < 1) {\n          throw new Exception(\"must be at least 1, or not set to use 'replicationFactor'\");\n        }\n      } catch (Exception e) {\n        throw new TriggerValidationException(name, MIN_REPLICAS_PROP, \"invalid value '\" + o + \"': \" + e.toString());\n      }\n    }\n\n    Object above = properties.get(ABOVE_RATE_PROP);\n    Object below = properties.get(BELOW_RATE_PROP);\n    // back-compat rate prop\n    if (properties.containsKey(BC_RATE_PROP)) {\n      above = properties.get(BC_RATE_PROP);\n    }\n    if (above == null && below == null) {\n      throw new TriggerValidationException(name, ABOVE_RATE_PROP, \"at least one of '\" +\n      ABOVE_RATE_PROP + \"' or '\" + BELOW_RATE_PROP + \"' must be set\");\n    }\n    if (above != null) {\n      try {\n        aboveRate = Double.parseDouble(String.valueOf(above));\n      } catch (Exception e) {\n        throw new TriggerValidationException(name, ABOVE_RATE_PROP, \"Invalid configuration value: '\" + above + \"': \" + e.toString());\n      }\n    } else {\n      aboveRate = Double.MAX_VALUE;\n    }\n    if (below != null) {\n      try {\n        belowRate = Double.parseDouble(String.valueOf(below));\n      } catch (Exception e) {\n        throw new TriggerValidationException(name, BELOW_RATE_PROP, \"Invalid configuration value: '\" + below + \"': \" + e.toString());\n      }\n    } else {\n      belowRate = -1;\n    }\n\n    // node rates\n    above = properties.get(ABOVE_NODE_RATE_PROP);\n    below = properties.get(BELOW_NODE_RATE_PROP);\n    if (above != null) {\n      try {\n        aboveNodeRate = Double.parseDouble(String.valueOf(above));\n      } catch (Exception e) {\n        throw new TriggerValidationException(name, ABOVE_NODE_RATE_PROP, \"Invalid configuration value: '\" + above + \"': \" + e.toString());\n      }\n    } else {\n      aboveNodeRate = Double.MAX_VALUE;\n    }\n    if (below != null) {\n      try {\n        belowNodeRate = Double.parseDouble(String.valueOf(below));\n      } catch (Exception e) {\n        throw new TriggerValidationException(name, BELOW_NODE_RATE_PROP, \"Invalid configuration value: '\" + below + \"': \" + e.toString());\n      }\n    } else {\n      belowNodeRate = -1;\n    }\n\n    String aboveOpStr = String.valueOf(properties.getOrDefault(ABOVE_OP_PROP, CollectionParams.CollectionAction.ADDREPLICA.toLower()));\n    String belowOpStr = String.valueOf(properties.getOrDefault(BELOW_OP_PROP, CollectionParams.CollectionAction.DELETEREPLICA.toLower()));\n    aboveOp = CollectionParams.CollectionAction.get(aboveOpStr);\n    if (aboveOp == null) {\n      throw new TriggerValidationException(getName(), ABOVE_OP_PROP, \"unrecognized value: '\" + aboveOpStr + \"'\");\n    }\n    belowOp = CollectionParams.CollectionAction.get(belowOpStr);\n    if (belowOp == null) {\n      throw new TriggerValidationException(getName(), BELOW_OP_PROP, \"unrecognized value: '\" + belowOpStr + \"'\");\n    }\n    Object aboveNodeObj = properties.getOrDefault(ABOVE_NODE_OP_PROP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());\n    // do NOT set the default to DELETENODE\n    Object belowNodeObj = properties.get(BELOW_NODE_OP_PROP);\n    try {\n      aboveNodeOp = CollectionParams.CollectionAction.get(String.valueOf(aboveNodeObj));\n    } catch (Exception e) {\n      throw new TriggerValidationException(getName(), ABOVE_NODE_OP_PROP, \"unrecognized value: '\" + aboveNodeObj + \"'\");\n    }\n    if (belowNodeObj != null) {\n      try {\n        belowNodeOp = CollectionParams.CollectionAction.get(String.valueOf(belowNodeObj));\n      } catch (Exception e) {\n        throw new TriggerValidationException(getName(), BELOW_NODE_OP_PROP, \"unrecognized value: '\" + belowNodeObj + \"'\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"3f504512a03d978990cbff30db0522b354e846db":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["3f504512a03d978990cbff30db0522b354e846db"],"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}