{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#testAllPointDocsDeletedInSegment().mjava","commits":[{"id":"25b2820b242e28867a2f4edae536382216c511dc","date":1454059647,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#testAllPointDocsDeletedInSegment().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testAllPointDocsDeletedInSegment().mjava","sourceNew":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    PointValues values = MultiPointValues.get(r);\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n    NumericDocValues idValues = MultiDocValues.getNumericValues(r, \"id\");\n\n    if (values != null) {\n      BitSet seen = new BitSet();\n      values.intersect(\"dim\",\n                       new IntersectVisitor() {\n                         @Override\n                         public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                           return Relation.CELL_CROSSES_QUERY;\n                         }\n                         public void visit(int docID) {\n                           throw new IllegalStateException();\n                         }\n                         public void visit(int docID, byte[] packedValue) {\n                           if (liveDocs.get(docID)) {\n                             seen.set(docID);\n                           }\n                           assertEquals(idValues.get(docID), NumericUtils.bytesToInt(packedValue, 0));\n                         }\n                       });\n      assertEquals(0, seen.cardinality());\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    PointValues values = MultiPointValues.get(r);\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n    NumericDocValues idValues = MultiDocValues.getNumericValues(r, \"id\");\n\n    if (values != null) {\n      BitSet seen = new BitSet();\n      values.intersect(\"dim\",\n                       new IntersectVisitor() {\n                         @Override\n                         public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                           return Relation.CELL_CROSSES_QUERY;\n                         }\n                         public void visit(int docID) {\n                           throw new IllegalStateException();\n                         }\n                         public void visit(int docID, byte[] packedValue) {\n                           if (liveDocs.get(docID)) {\n                             seen.set(docID);\n                           }\n                           assertEquals(idValues.get(docID), NumericUtils.bytesToInt(packedValue, 0));\n                         }\n                       });\n      assertEquals(0, seen.cardinality());\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#testAllPointDocsDeletedInSegment().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testAllPointDocsDeletedInSegment().mjava","sourceNew":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    PointValues values = MultiPointValues.get(r);\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n    NumericDocValues idValues = MultiDocValues.getNumericValues(r, \"id\");\n\n    if (values != null) {\n      BitSet seen = new BitSet();\n      values.intersect(\"dim\",\n                       new IntersectVisitor() {\n                         @Override\n                         public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                           return Relation.CELL_CROSSES_QUERY;\n                         }\n                         public void visit(int docID) {\n                           throw new IllegalStateException();\n                         }\n                         public void visit(int docID, byte[] packedValue) {\n                           if (liveDocs.get(docID)) {\n                             seen.set(docID);\n                           }\n                           assertEquals(idValues.get(docID), NumericUtils.bytesToInt(packedValue, 0));\n                         }\n                       });\n      assertEquals(0, seen.cardinality());\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    PointValues values = MultiPointValues.get(r);\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n    NumericDocValues idValues = MultiDocValues.getNumericValues(r, \"id\");\n\n    if (values != null) {\n      BitSet seen = new BitSet();\n      values.intersect(\"dim\",\n                       new IntersectVisitor() {\n                         @Override\n                         public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                           return Relation.CELL_CROSSES_QUERY;\n                         }\n                         public void visit(int docID) {\n                           throw new IllegalStateException();\n                         }\n                         public void visit(int docID, byte[] packedValue) {\n                           if (liveDocs.get(docID)) {\n                             seen.set(docID);\n                           }\n                           assertEquals(idValues.get(docID), NumericUtils.bytesToInt(packedValue, 0));\n                         }\n                       });\n      assertEquals(0, seen.cardinality());\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#testAllPointDocsDeletedInSegment().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testAllPointDocsDeletedInSegment().mjava","sourceNew":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    PointValues values = MultiPointValues.get(r);\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n    NumericDocValues idValues = MultiDocValues.getNumericValues(r, \"id\");\n\n    if (values != null) {\n      BitSet seen = new BitSet();\n      values.intersect(\"dim\",\n                       new IntersectVisitor() {\n                         @Override\n                         public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                           return Relation.CELL_CROSSES_QUERY;\n                         }\n                         public void visit(int docID) {\n                           throw new IllegalStateException();\n                         }\n                         public void visit(int docID, byte[] packedValue) {\n                           if (liveDocs.get(docID)) {\n                             seen.set(docID);\n                           }\n                           assertEquals(idValues.get(docID), NumericUtils.bytesToInt(packedValue, 0));\n                         }\n                       });\n      assertEquals(0, seen.cardinality());\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    PointValues values = MultiPointValues.get(r);\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n    NumericDocValues idValues = MultiDocValues.getNumericValues(r, \"id\");\n\n    if (values != null) {\n      BitSet seen = new BitSet();\n      values.intersect(\"dim\",\n                       new IntersectVisitor() {\n                         @Override\n                         public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                           return Relation.CELL_CROSSES_QUERY;\n                         }\n                         public void visit(int docID) {\n                           throw new IllegalStateException();\n                         }\n                         public void visit(int docID, byte[] packedValue) {\n                           if (liveDocs.get(docID)) {\n                             seen.set(docID);\n                           }\n                           assertEquals(idValues.get(docID), NumericUtils.bytesToInt(packedValue, 0));\n                         }\n                       });\n      assertEquals(0, seen.cardinality());\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","date":1456936072,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#testAllPointDocsDeletedInSegment().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#testAllPointDocsDeletedInSegment().mjava","sourceNew":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues values = ctx.reader().getPointValues();\n      NumericDocValues idValues = ctx.reader().getNumericDocValues(\"id\");\n      if (values != null) {\n        BitSet seen = new BitSet();\n        values.intersect(\"dim\",\n                         new IntersectVisitor() {\n                           @Override\n                           public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           }\n                           public void visit(int docID) {\n                             throw new IllegalStateException();\n                           }\n                           public void visit(int docID, byte[] packedValue) {\n                             if (liveDocs.get(docID)) {\n                               seen.set(docID);\n                             }\n                             assertEquals(idValues.get(docID), NumericUtils.bytesToInt(packedValue, 0));\n                           }\n                         });\n        assertEquals(0, seen.cardinality());\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    PointValues values = MultiPointValues.get(r);\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n    NumericDocValues idValues = MultiDocValues.getNumericValues(r, \"id\");\n\n    if (values != null) {\n      BitSet seen = new BitSet();\n      values.intersect(\"dim\",\n                       new IntersectVisitor() {\n                         @Override\n                         public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                           return Relation.CELL_CROSSES_QUERY;\n                         }\n                         public void visit(int docID) {\n                           throw new IllegalStateException();\n                         }\n                         public void visit(int docID, byte[] packedValue) {\n                           if (liveDocs.get(docID)) {\n                             seen.set(docID);\n                           }\n                           assertEquals(idValues.get(docID), NumericUtils.bytesToInt(packedValue, 0));\n                         }\n                       });\n      assertEquals(0, seen.cardinality());\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":["a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","date":1457059932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#testAllPointDocsDeletedInSegment().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#testAllPointDocsDeletedInSegment().mjava","sourceNew":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues values = ctx.reader().getPointValues();\n      NumericDocValues idValues = ctx.reader().getNumericDocValues(\"id\");\n      if (values != null) {\n        BitSet seen = new BitSet();\n        values.intersect(\"dim\",\n                         new IntersectVisitor() {\n                           @Override\n                           public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           }\n                           public void visit(int docID) {\n                             throw new IllegalStateException();\n                           }\n                           public void visit(int docID, byte[] packedValue) {\n                             if (liveDocs.get(docID)) {\n                               seen.set(docID);\n                             }\n                             assertEquals(idValues.get(docID), NumericUtils.sortableBytesToInt(packedValue, 0));\n                           }\n                         });\n        assertEquals(0, seen.cardinality());\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues values = ctx.reader().getPointValues();\n      NumericDocValues idValues = ctx.reader().getNumericDocValues(\"id\");\n      if (values != null) {\n        BitSet seen = new BitSet();\n        values.intersect(\"dim\",\n                         new IntersectVisitor() {\n                           @Override\n                           public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           }\n                           public void visit(int docID) {\n                             throw new IllegalStateException();\n                           }\n                           public void visit(int docID, byte[] packedValue) {\n                             if (liveDocs.get(docID)) {\n                               seen.set(docID);\n                             }\n                             assertEquals(idValues.get(docID), NumericUtils.bytesToInt(packedValue, 0));\n                           }\n                         });\n        assertEquals(0, seen.cardinality());\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":["770342641f7b505eaa8dccdc666158bff2419109","adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#testAllPointDocsDeletedInSegment().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#testAllPointDocsDeletedInSegment().mjava","sourceNew":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues values = ctx.reader().getPointValues();\n      NumericDocValues idValues = ctx.reader().getNumericDocValues(\"id\");\n      if (values != null) {\n        BitSet seen = new BitSet();\n        values.intersect(\"dim\",\n                         new IntersectVisitor() {\n                           @Override\n                           public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           }\n                           public void visit(int docID) {\n                             throw new IllegalStateException();\n                           }\n                           public void visit(int docID, byte[] packedValue) {\n                             if (liveDocs.get(docID)) {\n                               seen.set(docID);\n                             }\n                             assertEquals(idValues.get(docID), NumericUtils.sortableBytesToInt(packedValue, 0));\n                           }\n                         });\n        assertEquals(0, seen.cardinality());\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    PointValues values = MultiPointValues.get(r);\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n    NumericDocValues idValues = MultiDocValues.getNumericValues(r, \"id\");\n\n    if (values != null) {\n      BitSet seen = new BitSet();\n      values.intersect(\"dim\",\n                       new IntersectVisitor() {\n                         @Override\n                         public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                           return Relation.CELL_CROSSES_QUERY;\n                         }\n                         public void visit(int docID) {\n                           throw new IllegalStateException();\n                         }\n                         public void visit(int docID, byte[] packedValue) {\n                           if (liveDocs.get(docID)) {\n                             seen.set(docID);\n                           }\n                           assertEquals(idValues.get(docID), NumericUtils.bytesToInt(packedValue, 0));\n                         }\n                       });\n      assertEquals(0, seen.cardinality());\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4522ffca5a1f420c6a02198c9332d7c596a30ca5","date":1457270822,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testAllPointDocsDeletedInSegment().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#testAllPointDocsDeletedInSegment().mjava","sourceNew":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues values = ctx.reader().getPointValues();\n      NumericDocValues idValues = ctx.reader().getNumericDocValues(\"id\");\n      if (values != null) {\n        BitSet seen = new BitSet();\n        values.intersect(\"dim\",\n                         new IntersectVisitor() {\n                           @Override\n                           public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           }\n                           public void visit(int docID) {\n                             throw new IllegalStateException();\n                           }\n                           public void visit(int docID, byte[] packedValue) {\n                             if (liveDocs.get(docID)) {\n                               seen.set(docID);\n                             }\n                             assertEquals(idValues.get(docID), NumericUtils.sortableBytesToInt(packedValue, 0));\n                           }\n                         });\n        assertEquals(0, seen.cardinality());\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues values = ctx.reader().getPointValues();\n      NumericDocValues idValues = ctx.reader().getNumericDocValues(\"id\");\n      if (values != null) {\n        BitSet seen = new BitSet();\n        values.intersect(\"dim\",\n                         new IntersectVisitor() {\n                           @Override\n                           public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           }\n                           public void visit(int docID) {\n                             throw new IllegalStateException();\n                           }\n                           public void visit(int docID, byte[] packedValue) {\n                             if (liveDocs.get(docID)) {\n                               seen.set(docID);\n                             }\n                             assertEquals(idValues.get(docID), NumericUtils.sortableBytesToInt(packedValue, 0));\n                           }\n                         });\n        assertEquals(0, seen.cardinality());\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"25b2820b242e28867a2f4edae536382216c511dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d15e34266d75e4e8b95da046cd0afc812367b38"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["8d15e34266d75e4e8b95da046cd0afc812367b38","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","25b2820b242e28867a2f4edae536382216c511dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"]},"commit2Childs":{"25b2820b242e28867a2f4edae536382216c511dc":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25b2820b242e28867a2f4edae536382216c511dc","1e6acbaae7af722f17204ceccf0f7db5753eccf3","8d15e34266d75e4e8b95da046cd0afc812367b38"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cf1a614098b46c9c22afebd7b898ae4d1d2fc273","adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}