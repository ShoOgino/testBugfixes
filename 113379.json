{"path":"src/java/org/apache/solr/core/PluginInfo#PluginInfo(Node,String,boolean,boolean).mjava","commits":[{"id":"8963910260f4ff9adfecbdcff7bc9a94f9db03ef","date":1252220279,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/PluginInfo#PluginInfo(Node,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/core/PluginInfo#PluginInfo(Node,String,boolean).mjava","sourceNew":"  public PluginInfo(Node node, String err, boolean requireName, boolean requireClass) {\r\n    type = node.getNodeName();\r\n    name = DOMUtil.getAttr(node, \"name\", requireName ? err : null);\r\n    className = DOMUtil.getAttr(node, \"class\", requireClass ? err : null);\r\n    isDefault = Boolean.parseBoolean(DOMUtil.getAttr(node, \"default\", null));\r\n    startup = DOMUtil.getAttr(node, \"startup\", null);\r\n    initArgs = DOMUtil.childNodesToNamedList(node);\r\n    Map<String, String> m = new HashMap<String, String>();\r\n    NamedNodeMap nnm = node.getAttributes();\r\n    for (int i = 0; i < nnm.getLength(); i++) {\r\n      String name = nnm.item(i).getNodeName();\r\n      m.put(name, nnm.item(i).getNodeValue());\r\n    }\r\n    attributes = Collections.unmodifiableMap(m);\r\n\r\n  }\r\n\n","sourceOld":"  public PluginInfo(Node node, String err, boolean requireName) {\r\n    type = node.getNodeName();\r\n    name = DOMUtil.getAttr(node, \"name\", requireName ? err : null);\r\n    className = DOMUtil.getAttr(node, \"class\", err);\r\n    isDefault = Boolean.parseBoolean(DOMUtil.getAttr(node, \"default\", null));\r\n    startup = DOMUtil.getAttr(node, \"startup\", null);\r\n    initArgs = DOMUtil.childNodesToNamedList(node);\r\n    Map<String, String> m = new HashMap<String, String>();\r\n    NamedNodeMap nnm = node.getAttributes();\r\n    for (int i = 0; i < nnm.getLength(); i++) {\r\n      String name = nnm.item(i).getNodeName();\r\n      m.put(name, nnm.item(i).getNodeValue());\r\n    }\r\n    attributes = Collections.unmodifiableMap(m);\r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a7153c5cd4b2cd8054f8e46101442030d8a3c37","date":1253512682,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/PluginInfo#PluginInfo(Node,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/core/PluginInfo#PluginInfo(Node,String,boolean,boolean).mjava","sourceNew":"  public PluginInfo(Node node, String err, boolean requireName, boolean requireClass) {\r\n    type = node.getNodeName();\r\n    name = DOMUtil.getAttr(node, \"name\", requireName ? err : null);\r\n    className = DOMUtil.getAttr(node, \"class\", requireClass ? err : null);\r\n    initArgs = DOMUtil.childNodesToNamedList(node);\r\n    Map<String, String> m = new HashMap<String, String>();\r\n    NamedNodeMap nnm = node.getAttributes();\r\n    for (int i = 0; i < nnm.getLength(); i++) {\r\n      String name = nnm.item(i).getNodeName();\r\n      m.put(name, nnm.item(i).getNodeValue());\r\n    }\r\n    attributes = unmodifiableMap(m);\r\n    children = loadSubPlugins(node);\r\n  }\r\n\n","sourceOld":"  public PluginInfo(Node node, String err, boolean requireName, boolean requireClass) {\r\n    type = node.getNodeName();\r\n    name = DOMUtil.getAttr(node, \"name\", requireName ? err : null);\r\n    className = DOMUtil.getAttr(node, \"class\", requireClass ? err : null);\r\n    isDefault = Boolean.parseBoolean(DOMUtil.getAttr(node, \"default\", null));\r\n    startup = DOMUtil.getAttr(node, \"startup\", null);\r\n    initArgs = DOMUtil.childNodesToNamedList(node);\r\n    Map<String, String> m = new HashMap<String, String>();\r\n    NamedNodeMap nnm = node.getAttributes();\r\n    for (int i = 0; i < nnm.getLength(); i++) {\r\n      String name = nnm.item(i).getNodeName();\r\n      m.put(name, nnm.item(i).getNodeValue());\r\n    }\r\n    attributes = Collections.unmodifiableMap(m);\r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c537a639cd20e7fce077bc56e0b03ed7a2781226","date":1253532562,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/PluginInfo#PluginInfo(Node,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/core/PluginInfo#PluginInfo(Node,String,boolean,boolean).mjava","sourceNew":"  public PluginInfo(Node node, String err, boolean requireName, boolean requireClass) {\r\n    type = node.getNodeName();\r\n    name = DOMUtil.getAttr(node, \"name\", requireName ? err : null);\r\n    className = DOMUtil.getAttr(node, \"class\", requireClass ? err : null);\r\n    initArgs = DOMUtil.childNodesToNamedList(node);\r\n    attributes = unmodifiableMap(DOMUtil.toMap(node.getAttributes()));\r\n    children = loadSubPlugins(node);\r\n  }\r\n\n","sourceOld":"  public PluginInfo(Node node, String err, boolean requireName, boolean requireClass) {\r\n    type = node.getNodeName();\r\n    name = DOMUtil.getAttr(node, \"name\", requireName ? err : null);\r\n    className = DOMUtil.getAttr(node, \"class\", requireClass ? err : null);\r\n    initArgs = DOMUtil.childNodesToNamedList(node);\r\n    Map<String, String> m = new HashMap<String, String>();\r\n    NamedNodeMap nnm = node.getAttributes();\r\n    for (int i = 0; i < nnm.getLength(); i++) {\r\n      String name = nnm.item(i).getNodeName();\r\n      m.put(name, nnm.item(i).getNodeValue());\r\n    }\r\n    attributes = unmodifiableMap(m);\r\n    children = loadSubPlugins(node);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ec88b8391cee0c2a1037c6dbf75623a1773188f","date":1263001848,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/core/PluginInfo#PluginInfo(Node,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/core/PluginInfo#PluginInfo(Node,String,boolean,boolean).mjava","sourceNew":"  public PluginInfo(Node node, String err, boolean requireName, boolean requireClass) {\n    type = node.getNodeName();\n    name = DOMUtil.getAttr(node, \"name\", requireName ? err : null);\n    className = DOMUtil.getAttr(node, \"class\", requireClass ? err : null);\n    initArgs = DOMUtil.childNodesToNamedList(node);\n    attributes = unmodifiableMap(DOMUtil.toMap(node.getAttributes()));\n    children = loadSubPlugins(node);\n  }\n\n","sourceOld":"  public PluginInfo(Node node, String err, boolean requireName, boolean requireClass) {\r\n    type = node.getNodeName();\r\n    name = DOMUtil.getAttr(node, \"name\", requireName ? err : null);\r\n    className = DOMUtil.getAttr(node, \"class\", requireClass ? err : null);\r\n    initArgs = DOMUtil.childNodesToNamedList(node);\r\n    attributes = unmodifiableMap(DOMUtil.toMap(node.getAttributes()));\r\n    children = loadSubPlugins(node);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/PluginInfo#PluginInfo(Node,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/core/PluginInfo#PluginInfo(Node,String,boolean,boolean).mjava","sourceNew":"  public PluginInfo(Node node, String err, boolean requireName, boolean requireClass) {\n    type = node.getNodeName();\n    name = DOMUtil.getAttr(node, \"name\", requireName ? err : null);\n    className = DOMUtil.getAttr(node, \"class\", requireClass ? err : null);\n    initArgs = DOMUtil.childNodesToNamedList(node);\n    attributes = unmodifiableMap(DOMUtil.toMap(node.getAttributes()));\n    children = loadSubPlugins(node);\n  }\n\n","sourceOld":"  public PluginInfo(Node node, String err, boolean requireName, boolean requireClass) {\n    type = node.getNodeName();\n    name = DOMUtil.getAttr(node, \"name\", requireName ? err : null);\n    className = DOMUtil.getAttr(node, \"class\", requireClass ? err : null);\n    initArgs = DOMUtil.childNodesToNamedList(node);\n    attributes = unmodifiableMap(DOMUtil.toMap(node.getAttributes()));\n    children = loadSubPlugins(node);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6ec88b8391cee0c2a1037c6dbf75623a1773188f":["c537a639cd20e7fce077bc56e0b03ed7a2781226"],"c537a639cd20e7fce077bc56e0b03ed7a2781226":["6a7153c5cd4b2cd8054f8e46101442030d8a3c37"],"6a7153c5cd4b2cd8054f8e46101442030d8a3c37":["8963910260f4ff9adfecbdcff7bc9a94f9db03ef"],"8963910260f4ff9adfecbdcff7bc9a94f9db03ef":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["6ec88b8391cee0c2a1037c6dbf75623a1773188f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6ec88b8391cee0c2a1037c6dbf75623a1773188f":["ad94625fb8d088209f46650c8097196fec67f00c"],"c537a639cd20e7fce077bc56e0b03ed7a2781226":["6ec88b8391cee0c2a1037c6dbf75623a1773188f"],"6a7153c5cd4b2cd8054f8e46101442030d8a3c37":["c537a639cd20e7fce077bc56e0b03ed7a2781226"],"8963910260f4ff9adfecbdcff7bc9a94f9db03ef":["6a7153c5cd4b2cd8054f8e46101442030d8a3c37"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8963910260f4ff9adfecbdcff7bc9a94f9db03ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}