{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.AutoscalingTool#simulate(SimCloudManager,AutoScalingConfig,Map[String,Object],boolean,boolean,boolean,boolean,boolean,int).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AutoscalingTool#simulate(SimCloudManager,AutoScalingConfig,Map[String,Object],boolean,boolean,boolean,boolean,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"    private void simulate(SimCloudManager simCloudManager,\n                          AutoScalingConfig config,\n                          Map<String, Object> results,\n                          boolean withClusterState,\n                          boolean withStats,\n                          boolean withSuggestions,\n                          boolean withSortedNodes,\n                          boolean withDiagnostics, int iterations) throws Exception {\n      int loop = iterations;\n      List<Suggester.SuggestionInfo> suggestions = Collections.emptyList();\n      Map<String, Object> intermediate = new LinkedHashMap<>();\n      results.put(\"intermediateSuggestions\", intermediate);\n      while (loop-- > 0) {\n        suggestions = PolicyHelper.getSuggestions(config, simCloudManager);\n        log.info(\"-- step \" + (iterations - loop) + \", \" + suggestions.size() + \" suggestions.\");\n        if (suggestions.isEmpty()) {\n          break;\n        }\n        intermediate.put(\"step\" + (iterations - loop), suggestions);\n        int unresolvedCount = 0;\n        for (Suggester.SuggestionInfo suggestion : suggestions) {\n          SolrRequest operation = suggestion.getOperation();\n          if (operation == null) {\n            unresolvedCount++;\n            if (suggestion.getViolation() == null) {\n              log.info(\"   - ignoring suggestion without violation and without operation: \" + suggestion);\n            }\n            continue;\n          }\n          simCloudManager.request(operation);\n        }\n        if (unresolvedCount == suggestions.size()) {\n          log.info(\"--- aborting simulation, only unresolved violations remain\");\n          break;\n        }\n      }\n      if (loop == 0 && !suggestions.isEmpty()) {\n        CLIO.err(\"### Failed to apply all suggestions in \" + iterations + \" steps. Remaining suggestions: \" + suggestions + \"\\n\");\n      }\n      results.put(\"finalState\", prepareResults(simCloudManager, config, withClusterState, withStats,\n          withSuggestions, withSortedNodes, withDiagnostics));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AutoscalingTool#simulate(SimCloudManager,AutoScalingConfig,Map[String,Object],boolean,boolean,boolean,boolean,boolean,int).mjava","sourceNew":null,"sourceOld":"    private void simulate(SimCloudManager simCloudManager,\n                          AutoScalingConfig config,\n                          Map<String, Object> results,\n                          boolean withClusterState,\n                          boolean withStats,\n                          boolean withSuggestions,\n                          boolean withSortedNodes,\n                          boolean withDiagnostics, int iterations) throws Exception {\n      int loop = iterations;\n      List<Suggester.SuggestionInfo> suggestions = Collections.emptyList();\n      Map<String, Object> intermediate = new LinkedHashMap<>();\n      results.put(\"intermediateSuggestions\", intermediate);\n      while (loop-- > 0) {\n        suggestions = PolicyHelper.getSuggestions(config, simCloudManager);\n        log.info(\"-- step \" + (iterations - loop) + \", \" + suggestions.size() + \" suggestions.\");\n        if (suggestions.isEmpty()) {\n          break;\n        }\n        intermediate.put(\"step\" + (iterations - loop), suggestions);\n        int unresolvedCount = 0;\n        for (Suggester.SuggestionInfo suggestion : suggestions) {\n          SolrRequest operation = suggestion.getOperation();\n          if (operation == null) {\n            unresolvedCount++;\n            if (suggestion.getViolation() == null) {\n              log.info(\"   - ignoring suggestion without violation and without operation: \" + suggestion);\n            }\n            continue;\n          }\n          simCloudManager.request(operation);\n        }\n        if (unresolvedCount == suggestions.size()) {\n          log.info(\"--- aborting simulation, only unresolved violations remain\");\n          break;\n        }\n      }\n      if (loop == 0 && !suggestions.isEmpty()) {\n        CLIO.err(\"### Failed to apply all suggestions in \" + iterations + \" steps. Remaining suggestions: \" + suggestions + \"\\n\");\n      }\n      results.put(\"finalState\", prepareResults(simCloudManager, config, withClusterState, withStats,\n          withSuggestions, withSortedNodes, withDiagnostics));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edf5b262a72d10530eb2f01dc8f19060355b213e":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["edf5b262a72d10530eb2f01dc8f19060355b213e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}