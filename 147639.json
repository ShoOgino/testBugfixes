{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeMarkersRegistration().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeMarkersRegistration().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // pick overseer node\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    // add a node\n    String node = cluster.simAddNode();\n    if (!listener.onChangeLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node, listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node;\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\",\n        cluster.getDistribStateManager().hasData(pathAdded));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.simRestartOverseer(overseerLeader);\n    if (!listener.onChangeLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    cluster.getTimeSource().sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", cluster.getDistribStateManager().hasData(pathLost));\n\n    listener.reset();\n\n    // set up triggers\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    String node1 = cluster.simAddNode();\n    if (!listener.onChangeLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1, listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1;\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", cluster.getDistribStateManager().hasData(pathAdded));\n\n    cluster.getTimeSource().sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\",\n        cluster.getDistribStateManager().hasData(pathAdded));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.simRestartOverseer(overseerLeader);\n    if (!listener.onChangeLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>)ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","98d4af357762468d37df7424f81785cd89b49a7b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e16ac84f9e5d560008fe1554462ff8b853b3d3c","date":1520142134,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeMarkersRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeMarkersRegistration().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // pick overseer node\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    // add a node\n    String node = cluster.simAddNode();\n    if (!listener.onChangeLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node, listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node;\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\",\n        cluster.getDistribStateManager().hasData(pathAdded));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.simRestartOverseer(overseerLeader);\n    if (!listener.onChangeLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    cluster.getTimeSource().sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", cluster.getDistribStateManager().hasData(pathLost));\n\n    listener.reset();\n\n    // set up triggers\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    String node1 = cluster.simAddNode();\n    if (!listener.onChangeLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1, listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1;\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", cluster.getDistribStateManager().hasData(pathAdded));\n\n    cluster.getTimeSource().sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\",\n        cluster.getDistribStateManager().hasData(pathAdded));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.simRestartOverseer(overseerLeader);\n    if (!listener.onChangeLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>)ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":"  @Test\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // pick overseer node\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    // add a node\n    String node = cluster.simAddNode();\n    if (!listener.onChangeLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node, listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node;\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\",\n        cluster.getDistribStateManager().hasData(pathAdded));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.simRestartOverseer(overseerLeader);\n    if (!listener.onChangeLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    cluster.getTimeSource().sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", cluster.getDistribStateManager().hasData(pathLost));\n\n    listener.reset();\n\n    // set up triggers\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    String node1 = cluster.simAddNode();\n    if (!listener.onChangeLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1, listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1;\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", cluster.getDistribStateManager().hasData(pathAdded));\n\n    cluster.getTimeSource().sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\",\n        cluster.getDistribStateManager().hasData(pathAdded));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.simRestartOverseer(overseerLeader);\n    if (!listener.onChangeLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>)ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testNodeMarkersRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testNodeMarkersRegistration().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // pick overseer node\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    // add a node\n    String node = cluster.simAddNode();\n    if (!listener.onChangeLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node, listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node;\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\",\n        cluster.getDistribStateManager().hasData(pathAdded));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.simRestartOverseer(overseerLeader);\n    if (!listener.onChangeLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    cluster.getTimeSource().sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", cluster.getDistribStateManager().hasData(pathLost));\n\n    listener.reset();\n\n    // set up triggers\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    String node1 = cluster.simAddNode();\n    if (!listener.onChangeLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1, listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1;\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", cluster.getDistribStateManager().hasData(pathAdded));\n\n    cluster.getTimeSource().sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\",\n        cluster.getDistribStateManager().hasData(pathAdded));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.simRestartOverseer(overseerLeader);\n    if (!listener.onChangeLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>)ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testNodeMarkersRegistration() throws Exception {\n    // for this test we want to create two triggers so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n    // similarly we want both triggers to fire\n    triggerFiredLatch = new CountDownLatch(2);\n    TestLiveNodesListener listener = registerLiveNodesListener();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n\n    // pick overseer node\n    String overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    // add a node\n    String node = cluster.simAddNode();\n    if (!listener.onChangeLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node, listener.addedNodes.iterator().next());\n    // verify that a znode doesn't exist (no trigger)\n    String pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node;\n    assertFalse(\"Path \" + pathAdded + \" was created but there are no nodeAdded triggers\",\n        cluster.getDistribStateManager().hasData(pathAdded));\n    listener.reset();\n    // stop overseer\n    log.info(\"====== KILL OVERSEER 1\");\n    cluster.simRestartOverseer(overseerLeader);\n    if (!listener.onChangeLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.lostNodes.size());\n    assertEquals(overseerLeader, listener.lostNodes.iterator().next());\n    assertEquals(0, listener.addedNodes.size());\n    // wait until the new overseer is up\n    cluster.getTimeSource().sleep(5000);\n    // verify that a znode does NOT exist - there's no nodeLost trigger,\n    // so the new overseer cleaned up existing nodeLost markers\n    String pathLost = ZkStateReader.SOLR_AUTOSCALING_NODE_LOST_PATH + \"/\" + overseerLeader;\n    assertFalse(\"Path \" + pathLost + \" exists\", cluster.getDistribStateManager().hasData(pathLost));\n\n    listener.reset();\n\n    // set up triggers\n\n    log.info(\"====== ADD TRIGGERS\");\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventMarkerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    overseerLeader = cluster.getSimClusterStateProvider().simGetRandomNode(random());\n\n    // create another node\n    log.info(\"====== ADD NODE 1\");\n    String node1 = cluster.simAddNode();\n    if (!listener.onChangeLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n    assertEquals(1, listener.addedNodes.size());\n    assertEquals(node1, listener.addedNodes.iterator().next());\n    // verify that a znode exists\n    pathAdded = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + node1;\n    assertTrue(\"Path \" + pathAdded + \" wasn't created\", cluster.getDistribStateManager().hasData(pathAdded));\n\n    cluster.getTimeSource().sleep(5000);\n    // nodeAdded marker should be consumed now by nodeAdded trigger\n    assertFalse(\"Path \" + pathAdded + \" should have been deleted\",\n        cluster.getDistribStateManager().hasData(pathAdded));\n\n    listener.reset();\n    events.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    // kill overseer again\n    log.info(\"====== KILL OVERSEER 2\");\n    cluster.simRestartOverseer(overseerLeader);\n    if (!listener.onChangeLatch.await(10000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"onChange listener didn't execute on cluster change\");\n    }\n\n\n    if (!triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS)) {\n      fail(\"Trigger should have fired by now\");\n    }\n    assertEquals(1, events.size());\n    TriggerEvent ev = events.iterator().next();\n    List<String> nodeNames = (List<String>)ev.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(overseerLeader));\n    assertEquals(TriggerEventType.NODELOST, ev.getEventType());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7e16ac84f9e5d560008fe1554462ff8b853b3d3c":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["7e16ac84f9e5d560008fe1554462ff8b853b3d3c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"7e16ac84f9e5d560008fe1554462ff8b853b3d3c":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["7e16ac84f9e5d560008fe1554462ff8b853b3d3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}