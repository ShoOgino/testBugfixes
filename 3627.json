{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testQPA().mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testQPA().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testQPA().mjava","sourceNew":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n        \"term (phrase1 phrase2) term\");\n    // note the parens in this next assertion differ from the original\n    // QueryParser behavior\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n        \"(+term -(phrase1 phrase2)) term\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop OR stop AND stop\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","sourceOld":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n        \"term (phrase1 phrase2) term\");\n    // note the parens in this next assertion differ from the original\n    // QueryParser behavior\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n        \"(+term -(phrase1 phrase2)) term\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop OR stop AND stop\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testQPA().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testQPA().mjava","sourceNew":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n        \"term (phrase1 phrase2) term\");\n    // note the parens in this next assertion differ from the original\n    // QueryParser behavior\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n        \"(+term -(phrase1 phrase2)) term\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop OR stop AND stop\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","sourceOld":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n        \"term (phrase1 phrase2) term\");\n    // note the parens in this next assertion differ from the original\n    // QueryParser behavior\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n        \"(+term -(phrase1 phrase2)) term\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop OR stop AND stop\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}