{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSimple().mjava","commits":[{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","sourceNew":"  // test deleteAll()\n  public void testDeleteAllSimple() throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: now start\");\n    }\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))\n                                           .setMaxBufferedDocs(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now commit\");\n    }\n    modifier.commit();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add 1 doc (so we will have something buffered)\n    addDoc(modifier, 99, value);\n\n    // Delete all\n    if (VERBOSE) {\n      System.out.println(\"TEST: now delete all\");\n    }\n    modifier.deleteAll();\n\n    // Delete all shouldn't be on disk yet\n    reader = DirectoryReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add a doc and update a doc (after the deleteAll, before the commit)\n    addDoc(modifier, 101, value);\n    updateDoc(modifier, 102, value);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now 2nd commit\");\n    }\n\n    // commit the delete all\n    modifier.commit();\n\n    // Validate there are no docs left\n    reader = DirectoryReader.open(dir);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll()\n  public void testDeleteAll() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))\n        .setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add 1 doc (so we will have something buffered)\n    addDoc(modifier, 99, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    // Delete all shouldn't be on disk yet\n    reader = DirectoryReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add a doc and update a doc (after the deleteAll, before the commit)\n    addDoc(modifier, 101, value);\n    updateDoc(modifier, 102, value);\n\n    // commit the delete all\n    modifier.commit();\n\n    // Validate there are no docs left\n    reader = DirectoryReader.open(dir);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAll().mjava","sourceNew":"  // test deleteAll()\n  public void testDeleteAllSimple() throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: now start\");\n    }\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))\n                                           .setMaxBufferedDocs(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now commit\");\n    }\n    modifier.commit();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add 1 doc (so we will have something buffered)\n    addDoc(modifier, 99, value);\n\n    // Delete all\n    if (VERBOSE) {\n      System.out.println(\"TEST: now delete all\");\n    }\n    modifier.deleteAll();\n\n    // Delete all shouldn't be on disk yet\n    reader = DirectoryReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add a doc and update a doc (after the deleteAll, before the commit)\n    addDoc(modifier, 101, value);\n    updateDoc(modifier, 102, value);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now 2nd commit\");\n    }\n\n    // commit the delete all\n    modifier.commit();\n\n    // Validate there are no docs left\n    reader = DirectoryReader.open(dir);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll()\n  public void testDeleteAll() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))\n        .setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add 1 doc (so we will have something buffered)\n    addDoc(modifier, 99, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    // Delete all shouldn't be on disk yet\n    reader = DirectoryReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add a doc and update a doc (after the deleteAll, before the commit)\n    addDoc(modifier, 101, value);\n    updateDoc(modifier, 102, value);\n\n    // commit the delete all\n    modifier.commit();\n\n    // Validate there are no docs left\n    reader = DirectoryReader.open(dir);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSimple().mjava","pathOld":"/dev/null","sourceNew":"  // test deleteAll()\n  public void testDeleteAllSimple() throws IOException {\n    if (VERBOSE) {\n      System.out.println(\"TEST: now start\");\n    }\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false))\n                                           .setMaxBufferedDocs(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: now commit\");\n    }\n    modifier.commit();\n\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add 1 doc (so we will have something buffered)\n    addDoc(modifier, 99, value);\n\n    // Delete all\n    if (VERBOSE) {\n      System.out.println(\"TEST: now delete all\");\n    }\n    modifier.deleteAll();\n\n    // Delete all shouldn't be on disk yet\n    reader = DirectoryReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    // Add a doc and update a doc (after the deleteAll, before the commit)\n    addDoc(modifier, 101, value);\n    updateDoc(modifier, 102, value);\n    if (VERBOSE) {\n      System.out.println(\"TEST: now 2nd commit\");\n    }\n\n    // commit the delete all\n    modifier.commit();\n\n    // Validate there are no docs left\n    reader = DirectoryReader.open(dir);\n    assertEquals(2, reader.numDocs());\n    reader.close();\n\n    modifier.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}