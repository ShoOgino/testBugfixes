{"path":"solr/core/src/java/org/apache/solr/cloud/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"30572b5bb51001316f9a67e632d09750dc627a53","date":1511445746,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, NODE);\n    String nodeName = message.getStr(NODE);\n    String async = message.getStr(ASYNC);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    //first look for any violation that may use this replica\n    List<ZkNodeProps> requests = new ArrayList<>();\n    //first look for suggestions if any\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, ocmh.overseer.getSolrCloudManager());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      log.info(\"op: \" + suggestionInfo.getOperation());\n      String coll = null;\n      List<String> pieces = StrUtils.splitSmart(suggestionInfo.getOperation().getPath(), '/');\n      if (pieces.size() > 1) {\n        coll = pieces.get(2);\n      } else {\n        continue;\n      }\n      log.info(\"coll: \" + coll);\n      state.getCollection(coll).forEachReplica((s, r) -> {\n        if (Objects.equals(r.getName(), r.getName())) {\n          log.info(\"replica to be moved \" + r);\n        }\n      });\n      if (suggestionInfo.getOperation() instanceof V2Request) {\n        String targetNode = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/targetNode\");\n        if (Objects.equals(targetNode, nodeName)) {\n          String replica = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/replica\");\n          requests.add(new ZkNodeProps(COLLECTION_PROP, coll,\n              CollectionParams.TARGET_NODE, targetNode,\n              ASYNC, async,\n              REPLICA_PROP, replica));\n        }\n      }\n    }\n    executeAll(requests);\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(ocmh.overseer.getSolrCloudManager());\n    for (; ; ) {\n      Suggester suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Suggester.Hint.TARGET_NODE, nodeName);\n      session = suggester.getSession();\n      SolrRequest request = suggester.getSuggestion();\n      if (request == null) break;\n      requests.add(new ZkNodeProps(COLLECTION_PROP, request.getParams().get(COLLECTION_PROP),\n          CollectionParams.TARGET_NODE, request.getParams().get(CollectionParams.TARGET_NODE),\n          REPLICA_PROP, request.getParams().get(REPLICA_PROP),\n          ASYNC, request.getParams().get(ASYNC)));\n    }\n\n\n    executeAll(requests);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19584c7528aa2eda0725bc780701b911a410c26f","date":1511764587,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, NODE);\n    String nodeName = message.getStr(NODE);\n    String async = message.getStr(ASYNC);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    //first look for any violation that may use this replica\n    List<ZkNodeProps> requests = new ArrayList<>();\n    //first look for suggestions if any\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, ocmh.overseer.getSolrCloudManager());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      log.info(\"op: \" + suggestionInfo.getOperation());\n      String coll = null;\n      List<String> pieces = StrUtils.splitSmart(suggestionInfo.getOperation().getPath(), '/');\n      if (pieces.size() > 1) {\n        coll = pieces.get(2);\n      } else {\n        continue;\n      }\n      log.info(\"coll: \" + coll);\n      if (suggestionInfo.getOperation() instanceof V2Request) {\n        String targetNode = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/targetNode\");\n        if (Objects.equals(targetNode, nodeName)) {\n          String replica = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/replica\");\n          requests.add(new ZkNodeProps(COLLECTION_PROP, coll,\n              CollectionParams.TARGET_NODE, targetNode,\n              ASYNC, async,\n              REPLICA_PROP, replica));\n        }\n      }\n    }\n    executeAll(requests);\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(ocmh.overseer.getSolrCloudManager());\n    for (; ; ) {\n      Suggester suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Suggester.Hint.TARGET_NODE, nodeName);\n      session = suggester.getSession();\n      SolrRequest request = suggester.getSuggestion();\n      if (request == null) break;\n      requests.add(new ZkNodeProps(COLLECTION_PROP, request.getParams().get(COLLECTION_PROP),\n          CollectionParams.TARGET_NODE, request.getParams().get(CollectionParams.TARGET_NODE),\n          REPLICA_PROP, request.getParams().get(REPLICA_PROP),\n          ASYNC, request.getParams().get(ASYNC)));\n    }\n\n\n    executeAll(requests);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, NODE);\n    String nodeName = message.getStr(NODE);\n    String async = message.getStr(ASYNC);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    //first look for any violation that may use this replica\n    List<ZkNodeProps> requests = new ArrayList<>();\n    //first look for suggestions if any\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, ocmh.overseer.getSolrCloudManager());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      log.info(\"op: \" + suggestionInfo.getOperation());\n      String coll = null;\n      List<String> pieces = StrUtils.splitSmart(suggestionInfo.getOperation().getPath(), '/');\n      if (pieces.size() > 1) {\n        coll = pieces.get(2);\n      } else {\n        continue;\n      }\n      log.info(\"coll: \" + coll);\n      state.getCollection(coll).forEachReplica((s, r) -> {\n        if (Objects.equals(r.getName(), r.getName())) {\n          log.info(\"replica to be moved \" + r);\n        }\n      });\n      if (suggestionInfo.getOperation() instanceof V2Request) {\n        String targetNode = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/targetNode\");\n        if (Objects.equals(targetNode, nodeName)) {\n          String replica = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/replica\");\n          requests.add(new ZkNodeProps(COLLECTION_PROP, coll,\n              CollectionParams.TARGET_NODE, targetNode,\n              ASYNC, async,\n              REPLICA_PROP, replica));\n        }\n      }\n    }\n    executeAll(requests);\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(ocmh.overseer.getSolrCloudManager());\n    for (; ; ) {\n      Suggester suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Suggester.Hint.TARGET_NODE, nodeName);\n      session = suggester.getSession();\n      SolrRequest request = suggester.getSuggestion();\n      if (request == null) break;\n      requests.add(new ZkNodeProps(COLLECTION_PROP, request.getParams().get(COLLECTION_PROP),\n          CollectionParams.TARGET_NODE, request.getParams().get(CollectionParams.TARGET_NODE),\n          REPLICA_PROP, request.getParams().get(REPLICA_PROP),\n          ASYNC, request.getParams().get(ASYNC)));\n    }\n\n\n    executeAll(requests);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0e53d133180083c87dcb8114b087cfe6bfc7bce","date":1511856078,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, NODE);\n    String nodeName = message.getStr(NODE);\n    String async = message.getStr(ASYNC);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    //first look for any violation that may use this replica\n    List<ZkNodeProps> requests = new ArrayList<>();\n    //first look for suggestions if any\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, ocmh.overseer.getSolrCloudManager());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      log.info(\"op: \" + suggestionInfo.getOperation());\n      String coll = null;\n      List<String> pieces = StrUtils.splitSmart(suggestionInfo.getOperation().getPath(), '/');\n      if (pieces.size() > 1) {\n        coll = pieces.get(2);\n      } else {\n        continue;\n      }\n      log.info(\"coll: \" + coll);\n      if (suggestionInfo.getOperation() instanceof V2Request) {\n        String targetNode = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/targetNode\");\n        if (Objects.equals(targetNode, nodeName)) {\n          String replica = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/replica\");\n          requests.add(new ZkNodeProps(COLLECTION_PROP, coll,\n              CollectionParams.TARGET_NODE, targetNode,\n              ASYNC, async,\n              REPLICA_PROP, replica));\n        }\n      }\n    }\n    executeAll(requests);\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(ocmh.overseer.getSolrCloudManager());\n    for (; ; ) {\n      Suggester suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Suggester.Hint.TARGET_NODE, nodeName);\n      session = suggester.getSession();\n      SolrRequest request = suggester.getSuggestion();\n      if (request == null) break;\n      requests.add(new ZkNodeProps(COLLECTION_PROP, request.getParams().get(COLLECTION_PROP),\n          CollectionParams.TARGET_NODE, request.getParams().get(CollectionParams.TARGET_NODE),\n          REPLICA_PROP, request.getParams().get(REPLICA_PROP),\n          ASYNC, request.getParams().get(ASYNC)));\n    }\n\n\n    executeAll(requests);\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, NODE);\n    String nodeName = message.getStr(NODE);\n    String async = message.getStr(ASYNC);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    //first look for any violation that may use this replica\n    List<ZkNodeProps> requests = new ArrayList<>();\n    //first look for suggestions if any\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, ocmh.overseer.getSolrCloudManager());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      log.info(\"op: \" + suggestionInfo.getOperation());\n      String coll = null;\n      List<String> pieces = StrUtils.splitSmart(suggestionInfo.getOperation().getPath(), '/');\n      if (pieces.size() > 1) {\n        coll = pieces.get(2);\n      } else {\n        continue;\n      }\n      log.info(\"coll: \" + coll);\n      state.getCollection(coll).forEachReplica((s, r) -> {\n        if (Objects.equals(r.getName(), r.getName())) {\n          log.info(\"replica to be moved \" + r);\n        }\n      });\n      if (suggestionInfo.getOperation() instanceof V2Request) {\n        String targetNode = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/targetNode\");\n        if (Objects.equals(targetNode, nodeName)) {\n          String replica = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/replica\");\n          requests.add(new ZkNodeProps(COLLECTION_PROP, coll,\n              CollectionParams.TARGET_NODE, targetNode,\n              ASYNC, async,\n              REPLICA_PROP, replica));\n        }\n      }\n    }\n    executeAll(requests);\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(ocmh.overseer.getSolrCloudManager());\n    for (; ; ) {\n      Suggester suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Suggester.Hint.TARGET_NODE, nodeName);\n      session = suggester.getSession();\n      SolrRequest request = suggester.getSuggestion();\n      if (request == null) break;\n      requests.add(new ZkNodeProps(COLLECTION_PROP, request.getParams().get(COLLECTION_PROP),\n          CollectionParams.TARGET_NODE, request.getParams().get(CollectionParams.TARGET_NODE),\n          REPLICA_PROP, request.getParams().get(REPLICA_PROP),\n          ASYNC, request.getParams().get(ASYNC)));\n    }\n\n\n    executeAll(requests);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d907c28c7fe6305eaec1756d51365f5149e1e41d","date":1512533044,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, NODE);\n    String nodeName = message.getStr(NODE);\n    String async = message.getStr(ASYNC);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    //first look for any violation that may use this replica\n    List<ZkNodeProps> requests = new ArrayList<>();\n    //first look for suggestions if any\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, ocmh.overseer.getSolrCloudManager());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      log.info(\"op: \" + suggestionInfo.getOperation());\n      String coll = null;\n      List<String> pieces = StrUtils.splitSmart(suggestionInfo.getOperation().getPath(), '/');\n      if (pieces.size() > 1) {\n        coll = pieces.get(2);\n      } else {\n        continue;\n      }\n      log.info(\"coll: \" + coll);\n      if (suggestionInfo.getOperation() instanceof V2Request) {\n        String targetNode = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/targetNode\");\n        if (Objects.equals(targetNode, nodeName)) {\n          String replica = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/replica\");\n          requests.add(new ZkNodeProps(COLLECTION_PROP, coll,\n              CollectionParams.TARGET_NODE, targetNode,\n              ASYNC, async,\n              REPLICA_PROP, replica));\n        }\n      }\n    }\n    executeAll(requests);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(ocmh.overseer.getSolrCloudManager());\n    Policy.Session session =  sessionWrapper.get();\n    for (; ; ) {\n      Suggester suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Suggester.Hint.TARGET_NODE, nodeName);\n      session = suggester.getSession();\n      SolrRequest request = suggester.getSuggestion();\n      if (request == null) break;\n      requests.add(new ZkNodeProps(COLLECTION_PROP, request.getParams().get(COLLECTION_PROP),\n          CollectionParams.TARGET_NODE, request.getParams().get(CollectionParams.TARGET_NODE),\n          REPLICA_PROP, request.getParams().get(REPLICA_PROP),\n          ASYNC, request.getParams().get(ASYNC)));\n    }\n    sessionWrapper.returnSession(session);\n    try {\n      executeAll(requests);\n    } finally {\n      sessionWrapper.release();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, NODE);\n    String nodeName = message.getStr(NODE);\n    String async = message.getStr(ASYNC);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    //first look for any violation that may use this replica\n    List<ZkNodeProps> requests = new ArrayList<>();\n    //first look for suggestions if any\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, ocmh.overseer.getSolrCloudManager());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      log.info(\"op: \" + suggestionInfo.getOperation());\n      String coll = null;\n      List<String> pieces = StrUtils.splitSmart(suggestionInfo.getOperation().getPath(), '/');\n      if (pieces.size() > 1) {\n        coll = pieces.get(2);\n      } else {\n        continue;\n      }\n      log.info(\"coll: \" + coll);\n      if (suggestionInfo.getOperation() instanceof V2Request) {\n        String targetNode = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/targetNode\");\n        if (Objects.equals(targetNode, nodeName)) {\n          String replica = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/replica\");\n          requests.add(new ZkNodeProps(COLLECTION_PROP, coll,\n              CollectionParams.TARGET_NODE, targetNode,\n              ASYNC, async,\n              REPLICA_PROP, replica));\n        }\n      }\n    }\n    executeAll(requests);\n    Policy.Session session = autoScalingConfig.getPolicy().createSession(ocmh.overseer.getSolrCloudManager());\n    for (; ; ) {\n      Suggester suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Suggester.Hint.TARGET_NODE, nodeName);\n      session = suggester.getSession();\n      SolrRequest request = suggester.getSuggestion();\n      if (request == null) break;\n      requests.add(new ZkNodeProps(COLLECTION_PROP, request.getParams().get(COLLECTION_PROP),\n          CollectionParams.TARGET_NODE, request.getParams().get(CollectionParams.TARGET_NODE),\n          REPLICA_PROP, request.getParams().get(REPLICA_PROP),\n          ASYNC, request.getParams().get(ASYNC)));\n    }\n\n\n    executeAll(requests);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, NODE);\n    String nodeName = message.getStr(NODE);\n    String async = message.getStr(ASYNC);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    //first look for any violation that may use this replica\n    List<ZkNodeProps> requests = new ArrayList<>();\n    //first look for suggestions if any\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, ocmh.overseer.getSolrCloudManager());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      log.info(\"op: \" + suggestionInfo.getOperation());\n      String coll = null;\n      List<String> pieces = StrUtils.splitSmart(suggestionInfo.getOperation().getPath(), '/');\n      if (pieces.size() > 1) {\n        coll = pieces.get(2);\n      } else {\n        continue;\n      }\n      log.info(\"coll: \" + coll);\n      if (suggestionInfo.getOperation() instanceof V2Request) {\n        String targetNode = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/targetNode\");\n        if (Objects.equals(targetNode, nodeName)) {\n          String replica = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/replica\");\n          requests.add(new ZkNodeProps(COLLECTION_PROP, coll,\n              CollectionParams.TARGET_NODE, targetNode,\n              ASYNC, async,\n              REPLICA_PROP, replica));\n        }\n      }\n    }\n    executeAll(requests);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(ocmh.overseer.getSolrCloudManager());\n    Policy.Session session =  sessionWrapper.get();\n    for (; ; ) {\n      Suggester suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Suggester.Hint.TARGET_NODE, nodeName);\n      session = suggester.getSession();\n      SolrRequest request = suggester.getSuggestion();\n      if (request == null) break;\n      requests.add(new ZkNodeProps(COLLECTION_PROP, request.getParams().get(COLLECTION_PROP),\n          CollectionParams.TARGET_NODE, request.getParams().get(CollectionParams.TARGET_NODE),\n          REPLICA_PROP, request.getParams().get(REPLICA_PROP),\n          ASYNC, request.getParams().get(ASYNC)));\n    }\n    sessionWrapper.returnSession(session);\n    try {\n      executeAll(requests);\n    } finally {\n      sessionWrapper.release();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, NODE);\n    String nodeName = message.getStr(NODE);\n    String async = message.getStr(ASYNC);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    //first look for any violation that may use this replica\n    List<ZkNodeProps> requests = new ArrayList<>();\n    //first look for suggestions if any\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, ocmh.overseer.getSolrCloudManager());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      log.info(\"op: \" + suggestionInfo.getOperation());\n      String coll = null;\n      List<String> pieces = StrUtils.splitSmart(suggestionInfo.getOperation().getPath(), '/');\n      if (pieces.size() > 1) {\n        coll = pieces.get(2);\n      } else {\n        continue;\n      }\n      log.info(\"coll: \" + coll);\n      if (suggestionInfo.getOperation() instanceof V2Request) {\n        String targetNode = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/targetNode\");\n        if (Objects.equals(targetNode, nodeName)) {\n          String replica = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/replica\");\n          requests.add(new ZkNodeProps(COLLECTION_PROP, coll,\n              CollectionParams.TARGET_NODE, targetNode,\n              ASYNC, async,\n              REPLICA_PROP, replica));\n        }\n      }\n    }\n    executeAll(requests);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(ocmh.overseer.getSolrCloudManager());\n    Policy.Session session =  sessionWrapper.get();\n    for (; ; ) {\n      Suggester suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Suggester.Hint.TARGET_NODE, nodeName);\n      session = suggester.getSession();\n      SolrRequest request = suggester.getSuggestion();\n      if (request == null) break;\n      requests.add(new ZkNodeProps(COLLECTION_PROP, request.getParams().get(COLLECTION_PROP),\n          CollectionParams.TARGET_NODE, request.getParams().get(CollectionParams.TARGET_NODE),\n          REPLICA_PROP, request.getParams().get(REPLICA_PROP),\n          ASYNC, request.getParams().get(ASYNC)));\n    }\n    sessionWrapper.returnSession(session);\n    try {\n      executeAll(requests);\n    } finally {\n      sessionWrapper.release();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/UtilizeNodeCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, NODE);\n    String nodeName = message.getStr(NODE);\n    String async = message.getStr(ASYNC);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    //first look for any violation that may use this replica\n    List<ZkNodeProps> requests = new ArrayList<>();\n    //first look for suggestions if any\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, ocmh.overseer.getSolrCloudManager());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      log.info(\"op: \" + suggestionInfo.getOperation());\n      String coll = null;\n      List<String> pieces = StrUtils.splitSmart(suggestionInfo.getOperation().getPath(), '/');\n      if (pieces.size() > 1) {\n        coll = pieces.get(2);\n      } else {\n        continue;\n      }\n      log.info(\"coll: \" + coll);\n      if (suggestionInfo.getOperation() instanceof V2Request) {\n        String targetNode = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/targetNode\");\n        if (Objects.equals(targetNode, nodeName)) {\n          String replica = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/replica\");\n          requests.add(new ZkNodeProps(COLLECTION_PROP, coll,\n              CollectionParams.TARGET_NODE, targetNode,\n              ASYNC, async,\n              REPLICA_PROP, replica));\n        }\n      }\n    }\n    executeAll(requests);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(ocmh.overseer.getSolrCloudManager());\n    Policy.Session session =  sessionWrapper.get();\n    for (; ; ) {\n      Suggester suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Suggester.Hint.TARGET_NODE, nodeName);\n      session = suggester.getSession();\n      SolrRequest request = suggester.getSuggestion();\n      if (request == null) break;\n      requests.add(new ZkNodeProps(COLLECTION_PROP, request.getParams().get(COLLECTION_PROP),\n          CollectionParams.TARGET_NODE, request.getParams().get(CollectionParams.TARGET_NODE),\n          REPLICA_PROP, request.getParams().get(REPLICA_PROP),\n          ASYNC, request.getParams().get(ASYNC)));\n    }\n    sessionWrapper.returnSession(session);\n    try {\n      executeAll(requests);\n    } finally {\n      sessionWrapper.release();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ocmh.checkRequired(message, NODE);\n    String nodeName = message.getStr(NODE);\n    String async = message.getStr(ASYNC);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    //first look for any violation that may use this replica\n    List<ZkNodeProps> requests = new ArrayList<>();\n    //first look for suggestions if any\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, ocmh.overseer.getSolrCloudManager());\n    for (Suggester.SuggestionInfo suggestionInfo : suggestions) {\n      log.info(\"op: \" + suggestionInfo.getOperation());\n      String coll = null;\n      List<String> pieces = StrUtils.splitSmart(suggestionInfo.getOperation().getPath(), '/');\n      if (pieces.size() > 1) {\n        coll = pieces.get(2);\n      } else {\n        continue;\n      }\n      log.info(\"coll: \" + coll);\n      if (suggestionInfo.getOperation() instanceof V2Request) {\n        String targetNode = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/targetNode\");\n        if (Objects.equals(targetNode, nodeName)) {\n          String replica = (String) Utils.getObjectByPath(suggestionInfo.getOperation(), true, \"command/move-replica/replica\");\n          requests.add(new ZkNodeProps(COLLECTION_PROP, coll,\n              CollectionParams.TARGET_NODE, targetNode,\n              ASYNC, async,\n              REPLICA_PROP, replica));\n        }\n      }\n    }\n    executeAll(requests);\n    PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(ocmh.overseer.getSolrCloudManager());\n    Policy.Session session =  sessionWrapper.get();\n    for (; ; ) {\n      Suggester suggester = session.getSuggester(MOVEREPLICA)\n          .hint(Suggester.Hint.TARGET_NODE, nodeName);\n      session = suggester.getSession();\n      SolrRequest request = suggester.getSuggestion();\n      if (request == null) break;\n      requests.add(new ZkNodeProps(COLLECTION_PROP, request.getParams().get(COLLECTION_PROP),\n          CollectionParams.TARGET_NODE, request.getParams().get(CollectionParams.TARGET_NODE),\n          REPLICA_PROP, request.getParams().get(REPLICA_PROP),\n          ASYNC, request.getParams().get(ASYNC)));\n    }\n    sessionWrapper.returnSession(session);\n    try {\n      executeAll(requests);\n    } finally {\n      sessionWrapper.release();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19584c7528aa2eda0725bc780701b911a410c26f":["30572b5bb51001316f9a67e632d09750dc627a53"],"b94236357aaa22b76c10629851fe4e376e0cea82":["d907c28c7fe6305eaec1756d51365f5149e1e41d","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30572b5bb51001316f9a67e632d09750dc627a53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f0e53d133180083c87dcb8114b087cfe6bfc7bce":["30572b5bb51001316f9a67e632d09750dc627a53","19584c7528aa2eda0725bc780701b911a410c26f"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["d907c28c7fe6305eaec1756d51365f5149e1e41d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"d907c28c7fe6305eaec1756d51365f5149e1e41d":["f0e53d133180083c87dcb8114b087cfe6bfc7bce"]},"commit2Childs":{"19584c7528aa2eda0725bc780701b911a410c26f":["f0e53d133180083c87dcb8114b087cfe6bfc7bce"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30572b5bb51001316f9a67e632d09750dc627a53"],"30572b5bb51001316f9a67e632d09750dc627a53":["19584c7528aa2eda0725bc780701b911a410c26f","f0e53d133180083c87dcb8114b087cfe6bfc7bce"],"f0e53d133180083c87dcb8114b087cfe6bfc7bce":["d907c28c7fe6305eaec1756d51365f5149e1e41d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"d907c28c7fe6305eaec1756d51365f5149e1e41d":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}