{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/RegexpQueryNodeProcessor#postProcessNode(QueryNode).mjava","commits":[{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/RegexpQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    if (node instanceof RegexpQueryNode) {\n      RegexpQueryNode regexpNode = (RegexpQueryNode) node;\n      Analyzer analyzer = getQueryConfigHandler().get(ConfigurationKeys.ANALYZER);\n      if (analyzer != null) {\n        String text = regexpNode.getText().toString();\n        // because we call utf8ToString, this will only work with the default TermToBytesRefAttribute\n        text = analyzer.normalize(regexpNode.getFieldAsString(), text).utf8ToString();\n        regexpNode.setText(text);\n      }\n    }\n    return node;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/RegexpQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    if (node instanceof RegexpQueryNode) {\n      RegexpQueryNode regexpNode = (RegexpQueryNode) node;\n      Analyzer analyzer = getQueryConfigHandler().get(ConfigurationKeys.ANALYZER);\n      if (analyzer != null) {\n        String text = regexpNode.getText().toString();\n        // because we call utf8ToString, this will only work with the default TermToBytesRefAttribute\n        text = analyzer.normalize(regexpNode.getFieldAsString(), text).utf8ToString();\n        regexpNode.setText(text);\n      }\n    }\n    return node;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea4107f60b9f95623c16025c9c247412ff809092":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}