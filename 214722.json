{"path":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","commits":[{"id":"dc2bafa00000be70227a04c29e3f885ff41e531d","date":1412182669,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","pathOld":"/dev/null","sourceNew":"  private void replicaPropTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r2, \"preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r1, \"preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r1, \"preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\", \"true\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          SLICE_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\",\n          SLICE_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            SLICE_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting sliceUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the sliceUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["57517fbf5120ed94888bc0bfb86f9a81094059cf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57517fbf5120ed94888bc0bfb86f9a81094059cf","date":1412273713,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","sourceNew":"  private void replicaPropTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\", \"true\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          SLICE_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          SLICE_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            SLICE_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting sliceUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the sliceUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\");\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  private void replicaPropTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r2, \"preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r1, \"preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r1, \"preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\", \"true\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          SLICE_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\",\n          SLICE_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            SLICE_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting sliceUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the sliceUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\");\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","bugFix":["dc2bafa00000be70227a04c29e3f885ff41e531d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","pathOld":"/dev/null","sourceNew":"  private void replicaPropTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\", \"true\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          SLICE_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          SLICE_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            SLICE_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting sliceUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the sliceUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\");\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64707d25b6352cf02909d3916038a3b3cec7f0a8","date":1412782122,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","sourceNew":"  private void replicaPropTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          SLICE_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          SLICE_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            SLICE_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting sliceUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the sliceUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\");\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  private void replicaPropTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\", \"true\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          SLICE_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          SLICE_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            SLICE_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting sliceUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the sliceUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\");\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","sourceNew":"  private void replicaPropTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          SLICE_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          SLICE_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            SLICE_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting sliceUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the sliceUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\");\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  private void replicaPropTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredLeader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\", \"true\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          SLICE_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          SLICE_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            SLICE_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting sliceUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the sliceUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s2_r2, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\");\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfb61c9baefa8681e40fca3c803f61bf485a9d8d","date":1414979559,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","sourceNew":"  private void replicaPropTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          SHARD_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          SHARD_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            SHARD_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting shardUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the shardUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\");\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  private void replicaPropTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          SLICE_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          SLICE_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            SLICE_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting sliceUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the sliceUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\");\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","sourceNew":"  private void replicaPropTest() throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          SHARD_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          SHARD_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            SHARD_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting shardUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the shardUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\");\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  private void replicaPropTest() throws Exception {\n    CloudSolrServer client = createCloudClient(null);\n    try {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          SHARD_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          SHARD_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            SHARD_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting shardUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the shardUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\");\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","sourceNew":"  private void replicaPropTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          SHARD_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          SHARD_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            SHARD_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting shardUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the shardUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\");\n\n    }\n  }\n\n","sourceOld":"  private void replicaPropTest() throws Exception {\n    CloudSolrClient client = createCloudClient(null);\n    try {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          SHARD_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          SHARD_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            SHARD_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting shardUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the shardUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\");\n\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a7098b1923741f1d9887fad7cc27074c26d1f","date":1502268482,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","sourceNew":"  private void replicaPropTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          SHARD_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          SHARD_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            SHARD_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting shardUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the shardUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"base_url\");\n\n    }\n  }\n\n","sourceOld":"  private void replicaPropTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          SHARD_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          SHARD_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            SHARD_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting shardUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the shardUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\");\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","sourceNew":"  private void replicaPropTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          SHARD_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          SHARD_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            SHARD_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting shardUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the shardUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"base_url\");\n\n    }\n  }\n\n","sourceOld":"  private void replicaPropTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          SHARD_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          SHARD_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            SHARD_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting shardUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the shardUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\");\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","sourceNew":"  private void replicaPropTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          SHARD_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          SHARD_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            SHARD_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting shardUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the shardUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"base_url\");\n\n    }\n  }\n\n","sourceOld":"  private void replicaPropTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          SHARD_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          SHARD_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            SHARD_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting shardUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the shardUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"property.preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"property.prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"property.preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"property.preferredLeader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"property.base_url\");\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#replicaPropTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","sourceNew":"  private void replicaPropTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          OverseerCollectionMessageHandler.SHARD_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          OverseerCollectionMessageHandler.SHARD_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            OverseerCollectionMessageHandler.SHARD_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting shardUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the shardUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"base_url\");\n\n    }\n  }\n\n","sourceOld":"  private void replicaPropTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          SHARD_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          SHARD_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            SHARD_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting shardUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the shardUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"base_url\");\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#replicaPropTest().mjava","sourceNew":null,"sourceOld":"  private void replicaPropTest() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      client.connect();\n      Map<String, Slice> slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME).getSlicesMap();\n      List<String> sliceList = new ArrayList<>(slices.keySet());\n      String c1_s1 = sliceList.get(0);\n      List<String> replicasList = new ArrayList<>(slices.get(c1_s1).getReplicasMap().keySet());\n      String c1_s1_r1 = replicasList.get(0);\n      String c1_s1_r2 = replicasList.get(1);\n\n      String c1_s2 = sliceList.get(1);\n      replicasList = new ArrayList<>(slices.get(c1_s2).getReplicasMap().keySet());\n      String c1_s2_r1 = replicasList.get(0);\n      String c1_s2_r2 = replicasList.get(1);\n\n\n      slices = client.getZkStateReader().getClusterState().getCollection(COLLECTION_NAME1).getSlicesMap();\n      sliceList = new ArrayList<>(slices.keySet());\n      String c2_s1 = sliceList.get(0);\n      replicasList = new ArrayList<>(slices.get(c2_s1).getReplicasMap().keySet());\n      String c2_s1_r1 = replicasList.get(0);\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());\n\n      // Insure we get error returns when omitting required parameters\n\n      missingParamsError(client, params);\n      params.set(\"collection\", COLLECTION_NAME);\n      missingParamsError(client, params);\n      params.set(\"shard\", c1_s1);\n      missingParamsError(client, params);\n      params.set(\"replica\", c1_s1_r1);\n      missingParamsError(client, params);\n      params.set(\"property\", \"preferredLeader\");\n      missingParamsError(client, params);\n      params.set(\"property.value\", \"true\");\n\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      client.request(request);\n\n      // The above should have set exactly one preferredleader...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n      // The preferred leader property for shard1 should have switched to the other replica.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s2,\n          \"replica\", c1_s2_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have a preferred leader in both shards...\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\",\n          \"property.value\", \"true\");\n\n      // Now we should have three preferred leaders.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME1, c2_s1_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME1,\n          \"shard\", c2_s1,\n          \"replica\", c2_s1_r1,\n          \"property\", \"preferredLeader\");\n\n      // Now we should have two preferred leaders.\n      // But first we have to wait for the overseer to finish the action\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      // Try adding an arbitrary property to one that has the leader property\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r2,\n          \"property\", \"prop\",\n          \"property.value\", \"silly\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"testprop\",\n          \"property.value\", \"nonsense\",\n          SHARD_UNIQUE, \"true\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"nonsense\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\",\n          \"property.value\", \"true\",\n          SHARD_UNIQUE, \"false\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"testprop\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"property.testprop\");\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      try {\n        doPropertyAction(client,\n            \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toString(),\n            \"collection\", COLLECTION_NAME,\n            \"shard\", c1_s1,\n            \"replica\", c1_s1_r1,\n            \"property\", \"preferredLeader\",\n            \"property.value\", \"true\",\n            SHARD_UNIQUE, \"false\");\n        fail(\"Should have thrown an exception, setting shardUnique=false is not allowed for 'preferredLeader'.\");\n      } catch (SolrException se) {\n        assertTrue(\"Should have received a specific error message\",\n            se.getMessage().contains(\"with the shardUnique parameter set to something other than 'true'\"));\n      }\n\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"preferredleader\", \"true\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s2_r1, \"preferredleader\", \"true\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"testprop\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r2, \"prop\", \"silly\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME, \"preferredLeader\");\n      verifyUniquePropertyWithinCollection(client, COLLECTION_NAME1, \"preferredLeader\");\n\n      Map<String, String> origProps = getProps(client, COLLECTION_NAME, c1_s1_r1,\n          \"state\", \"core\", \"node_name\", \"base_url\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\",\n          \"property.value\", \"state_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\",\n          \"property.value\", \"core_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\",\n          \"property.value\", \"node_name_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.ADDREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\",\n          \"property.value\", \"base_url_bad\");\n\n      // The above should be on new proeprties.\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"state\", \"state_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"core\", \"core_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"node_name\", \"node_name_bad\");\n      verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, \"base_url\", \"base_url_bad\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"state\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"core\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"node_name\");\n\n      doPropertyAction(client,\n          \"action\", CollectionParams.CollectionAction.DELETEREPLICAPROP.toLower(),\n          \"collection\", COLLECTION_NAME,\n          \"shard\", c1_s1,\n          \"replica\", c1_s1_r1,\n          \"property\", \"base_url\");\n\n      // They better not have been changed!\n      for (Map.Entry<String, String> ent : origProps.entrySet()) {\n        verifyPropertyVal(client, COLLECTION_NAME, c1_s1_r1, ent.getKey(), ent.getValue());\n      }\n\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"state\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"core\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"node_name\");\n      verifyPropertyNotPresent(client, COLLECTION_NAME, c1_s1_r1, \"base_url\");\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["636a7098b1923741f1d9887fad7cc27074c26d1f","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"55980207f1977bd1463465de1659b821347e2fa8":["d9a47902d6207303f5ed3e7aaca62ca33433af66","64707d25b6352cf02909d3916038a3b3cec7f0a8"],"636a7098b1923741f1d9887fad7cc27074c26d1f":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"cfb61c9baefa8681e40fca3c803f61bf485a9d8d":["64707d25b6352cf02909d3916038a3b3cec7f0a8"],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["57517fbf5120ed94888bc0bfb86f9a81094059cf"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["636a7098b1923741f1d9887fad7cc27074c26d1f"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","57517fbf5120ed94888bc0bfb86f9a81094059cf"],"bafca15d8e408346a67f4282ad1143b88023893b":["cfb61c9baefa8681e40fca3c803f61bf485a9d8d"],"dc2bafa00000be70227a04c29e3f885ff41e531d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"57517fbf5120ed94888bc0bfb86f9a81094059cf":["dc2bafa00000be70227a04c29e3f885ff41e531d"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["cc3b13b430571c2e169f98fe38e1e7666f88522d","636a7098b1923741f1d9887fad7cc27074c26d1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["cc3b13b430571c2e169f98fe38e1e7666f88522d","636a7098b1923741f1d9887fad7cc27074c26d1f"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55980207f1977bd1463465de1659b821347e2fa8":[],"636a7098b1923741f1d9887fad7cc27074c26d1f":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"cfb61c9baefa8681e40fca3c803f61bf485a9d8d":["bafca15d8e408346a67f4282ad1143b88023893b"],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["55980207f1977bd1463465de1659b821347e2fa8","cfb61c9baefa8681e40fca3c803f61bf485a9d8d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["55980207f1977bd1463465de1659b821347e2fa8"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"dc2bafa00000be70227a04c29e3f885ff41e531d":["57517fbf5120ed94888bc0bfb86f9a81094059cf"],"57517fbf5120ed94888bc0bfb86f9a81094059cf":["64707d25b6352cf02909d3916038a3b3cec7f0a8","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9a47902d6207303f5ed3e7aaca62ca33433af66","dc2bafa00000be70227a04c29e3f885ff41e531d"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["636a7098b1923741f1d9887fad7cc27074c26d1f","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}