{"path":"lucene/src/java/org/apache/lucene/index/MultiFields#getFields(IndexReader).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getFields(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a single {@link Fields} instance for this\n   *  reader, merging fields/terms/docs/positions on the\n   *  fly.  This method will not return null.\n   *\n   *  <p><bNOTE</b>: this is a slow way to access postings.\n   *  It's better to get the sub-readers (using {@link\n   *  Gather}) and iterate through them\n   *  yourself. */\n  public static Fields getFields(IndexReader r) throws IOException {\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    if (subs == null) {\n      // already an atomic reader\n      return r.fields();\n    } else if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getFields(subs[0]);\n    } else {\n\n      Fields currentFields = r.retrieveFields();\n      if (currentFields == null) {\n      \n        final List<Fields> fields = new ArrayList<Fields>();\n        final List<ReaderUtil.Slice> slices = new ArrayList<ReaderUtil.Slice>();\n\n        new ReaderUtil.Gather(r) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            fields.add(r.fields());\n            slices.add(new ReaderUtil.Slice(base, r.maxDoc(), fields.size()-1));\n          }\n        }.run();\n\n        if (fields.size() == 0) {\n          return null;\n        } else if (fields.size() == 1) {\n          currentFields = fields.get(0);\n        } else {\n          currentFields = new MultiFields(fields.toArray(Fields.EMPTY_ARRAY),\n                                         slices.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n        }\n        r.storeFields(currentFields);\n      }\n      return currentFields;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c","8028ab7a24273833d53d35eb160dba5b57283cf5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c","date":1270671893,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getFields(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getFields(IndexReader).mjava","sourceNew":"  /** Returns a single {@link Fields} instance for this\n   *  reader, merging fields/terms/docs/positions on the\n   *  fly.  This method will not return null.\n   *\n   *  <p><bNOTE</b>: this is a slow way to access postings.\n   *  It's better to get the sub-readers (using {@link\n   *  Gather}) and iterate through them\n   *  yourself. */\n  public static Fields getFields(IndexReader r) throws IOException {\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    if (subs == null) {\n      // already an atomic reader\n      return r.fields();\n    } else if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getFields(subs[0]);\n    } else {\n\n      Fields currentFields = r.retrieveFields();\n      if (currentFields == null) {\n      \n        final List<Fields> fields = new ArrayList<Fields>();\n        final List<ReaderUtil.Slice> slices = new ArrayList<ReaderUtil.Slice>();\n\n        new ReaderUtil.Gather(r) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            final Fields f = r.fields();\n            if (f != null) {\n              fields.add(f);\n              slices.add(new ReaderUtil.Slice(base, r.maxDoc(), fields.size()-1));\n            }\n          }\n        }.run();\n\n        if (fields.size() == 0) {\n          return null;\n        } else if (fields.size() == 1) {\n          currentFields = fields.get(0);\n        } else {\n          currentFields = new MultiFields(fields.toArray(Fields.EMPTY_ARRAY),\n                                         slices.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n        }\n        r.storeFields(currentFields);\n      }\n      return currentFields;\n    }\n  }\n\n","sourceOld":"  /** Returns a single {@link Fields} instance for this\n   *  reader, merging fields/terms/docs/positions on the\n   *  fly.  This method will not return null.\n   *\n   *  <p><bNOTE</b>: this is a slow way to access postings.\n   *  It's better to get the sub-readers (using {@link\n   *  Gather}) and iterate through them\n   *  yourself. */\n  public static Fields getFields(IndexReader r) throws IOException {\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    if (subs == null) {\n      // already an atomic reader\n      return r.fields();\n    } else if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getFields(subs[0]);\n    } else {\n\n      Fields currentFields = r.retrieveFields();\n      if (currentFields == null) {\n      \n        final List<Fields> fields = new ArrayList<Fields>();\n        final List<ReaderUtil.Slice> slices = new ArrayList<ReaderUtil.Slice>();\n\n        new ReaderUtil.Gather(r) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            fields.add(r.fields());\n            slices.add(new ReaderUtil.Slice(base, r.maxDoc(), fields.size()-1));\n          }\n        }.run();\n\n        if (fields.size() == 0) {\n          return null;\n        } else if (fields.size() == 1) {\n          currentFields = fields.get(0);\n        } else {\n          currentFields = new MultiFields(fields.toArray(Fields.EMPTY_ARRAY),\n                                         slices.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n        }\n        r.storeFields(currentFields);\n      }\n      return currentFields;\n    }\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b81ce69c567e53e3cf531ee7cc423bdd467a77a","date":1270843228,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getFields(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getFields(IndexReader).mjava","sourceNew":"  /** Returns a single {@link Fields} instance for this\n   *  reader, merging fields/terms/docs/positions on the\n   *  fly.  This method will not return null.\n   *\n   *  <p><b>NOTE</b>: this is a slow way to access postings.\n   *  It's better to get the sub-readers (using {@link\n   *  Gather}) and iterate through them\n   *  yourself. */\n  public static Fields getFields(IndexReader r) throws IOException {\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    if (subs == null) {\n      // already an atomic reader\n      return r.fields();\n    } else if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getFields(subs[0]);\n    } else {\n\n      Fields currentFields = r.retrieveFields();\n      if (currentFields == null) {\n      \n        final List<Fields> fields = new ArrayList<Fields>();\n        final List<ReaderUtil.Slice> slices = new ArrayList<ReaderUtil.Slice>();\n\n        new ReaderUtil.Gather(r) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            final Fields f = r.fields();\n            if (f != null) {\n              fields.add(f);\n              slices.add(new ReaderUtil.Slice(base, r.maxDoc(), fields.size()-1));\n            }\n          }\n        }.run();\n\n        if (fields.size() == 0) {\n          return null;\n        } else if (fields.size() == 1) {\n          currentFields = fields.get(0);\n        } else {\n          currentFields = new MultiFields(fields.toArray(Fields.EMPTY_ARRAY),\n                                         slices.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n        }\n        r.storeFields(currentFields);\n      }\n      return currentFields;\n    }\n  }\n\n","sourceOld":"  /** Returns a single {@link Fields} instance for this\n   *  reader, merging fields/terms/docs/positions on the\n   *  fly.  This method will not return null.\n   *\n   *  <p><bNOTE</b>: this is a slow way to access postings.\n   *  It's better to get the sub-readers (using {@link\n   *  Gather}) and iterate through them\n   *  yourself. */\n  public static Fields getFields(IndexReader r) throws IOException {\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    if (subs == null) {\n      // already an atomic reader\n      return r.fields();\n    } else if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getFields(subs[0]);\n    } else {\n\n      Fields currentFields = r.retrieveFields();\n      if (currentFields == null) {\n      \n        final List<Fields> fields = new ArrayList<Fields>();\n        final List<ReaderUtil.Slice> slices = new ArrayList<ReaderUtil.Slice>();\n\n        new ReaderUtil.Gather(r) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            final Fields f = r.fields();\n            if (f != null) {\n              fields.add(f);\n              slices.add(new ReaderUtil.Slice(base, r.maxDoc(), fields.size()-1));\n            }\n          }\n        }.run();\n\n        if (fields.size() == 0) {\n          return null;\n        } else if (fields.size() == 1) {\n          currentFields = fields.get(0);\n        } else {\n          currentFields = new MultiFields(fields.toArray(Fields.EMPTY_ARRAY),\n                                         slices.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n        }\n        r.storeFields(currentFields);\n      }\n      return currentFields;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59c0414b081ae3776bc77e4f9f48f1472c58b4be","date":1315515718,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getFields(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getFields(IndexReader).mjava","sourceNew":"  /** Returns a single {@link Fields} instance for this\n   *  reader, merging fields/terms/docs/positions on the\n   *  fly.  This method will return null if the reader \n   *  has no postings.\n   *\n   *  <p><b>NOTE</b>: this is a slow way to access postings.\n   *  It's better to get the sub-readers (using {@link\n   *  Gather}) and iterate through them\n   *  yourself. */\n  public static Fields getFields(IndexReader r) throws IOException {\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    if (subs == null) {\n      // already an atomic reader\n      return r.fields();\n    } else if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getFields(subs[0]);\n    } else {\n\n      Fields currentFields = r.retrieveFields();\n      if (currentFields == null) {\n      \n        final List<Fields> fields = new ArrayList<Fields>();\n        final List<ReaderUtil.Slice> slices = new ArrayList<ReaderUtil.Slice>();\n\n        new ReaderUtil.Gather(r) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            final Fields f = r.fields();\n            if (f != null) {\n              fields.add(f);\n              slices.add(new ReaderUtil.Slice(base, r.maxDoc(), fields.size()-1));\n            }\n          }\n        }.run();\n\n        if (fields.size() == 0) {\n          return null;\n        } else if (fields.size() == 1) {\n          currentFields = fields.get(0);\n        } else {\n          currentFields = new MultiFields(fields.toArray(Fields.EMPTY_ARRAY),\n                                         slices.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n        }\n        r.storeFields(currentFields);\n      }\n      return currentFields;\n    }\n  }\n\n","sourceOld":"  /** Returns a single {@link Fields} instance for this\n   *  reader, merging fields/terms/docs/positions on the\n   *  fly.  This method will not return null.\n   *\n   *  <p><b>NOTE</b>: this is a slow way to access postings.\n   *  It's better to get the sub-readers (using {@link\n   *  Gather}) and iterate through them\n   *  yourself. */\n  public static Fields getFields(IndexReader r) throws IOException {\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    if (subs == null) {\n      // already an atomic reader\n      return r.fields();\n    } else if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getFields(subs[0]);\n    } else {\n\n      Fields currentFields = r.retrieveFields();\n      if (currentFields == null) {\n      \n        final List<Fields> fields = new ArrayList<Fields>();\n        final List<ReaderUtil.Slice> slices = new ArrayList<ReaderUtil.Slice>();\n\n        new ReaderUtil.Gather(r) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            final Fields f = r.fields();\n            if (f != null) {\n              fields.add(f);\n              slices.add(new ReaderUtil.Slice(base, r.maxDoc(), fields.size()-1));\n            }\n          }\n        }.run();\n\n        if (fields.size() == 0) {\n          return null;\n        } else if (fields.size() == 1) {\n          currentFields = fields.get(0);\n        } else {\n          currentFields = new MultiFields(fields.toArray(Fields.EMPTY_ARRAY),\n                                         slices.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n        }\n        r.storeFields(currentFields);\n      }\n      return currentFields;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getFields(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getFields(IndexReader).mjava","sourceNew":"  /** Returns a single {@link Fields} instance for this\n   *  reader, merging fields/terms/docs/positions on the\n   *  fly.  This method will return null if the reader \n   *  has no postings.\n   *\n   *  <p><b>NOTE</b>: this is a slow way to access postings.\n   *  It's better to get the sub-readers (using {@link\n   *  Gather}) and iterate through them\n   *  yourself. */\n  public static Fields getFields(IndexReader r) throws IOException {\n    if (r instanceof AtomicIndexReader) {\n      // already an atomic reader\n      return ((AtomicIndexReader) r).fields();\n    }\n    assert r instanceof CompositeIndexReader;\n    final IndexReader[] subs = ((CompositeIndexReader) r).getSequentialSubReaders();\n    if (subs.length == 0) {\n      // no fields\n      return null;\n    } else {\n      final List<Fields> fields = new ArrayList<Fields>();\n      final List<ReaderUtil.Slice> slices = new ArrayList<ReaderUtil.Slice>();\n\n      new ReaderUtil.Gather(r) {\n        @Override\n        protected void add(int base, AtomicIndexReader r) throws IOException {\n          final Fields f = r.fields();\n          if (f != null) {\n            fields.add(f);\n            slices.add(new ReaderUtil.Slice(base, r.maxDoc(), fields.size()-1));\n          }\n        }\n      }.run();\n\n      if (fields.isEmpty()) {\n        return null;\n      } else if (fields.size() == 1) {\n        return fields.get(0);\n      } else {\n        return new MultiFields(fields.toArray(Fields.EMPTY_ARRAY),\n                                       slices.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n      }\n    }\n  }\n\n","sourceOld":"  /** Returns a single {@link Fields} instance for this\n   *  reader, merging fields/terms/docs/positions on the\n   *  fly.  This method will return null if the reader \n   *  has no postings.\n   *\n   *  <p><b>NOTE</b>: this is a slow way to access postings.\n   *  It's better to get the sub-readers (using {@link\n   *  Gather}) and iterate through them\n   *  yourself. */\n  public static Fields getFields(IndexReader r) throws IOException {\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    if (subs == null) {\n      // already an atomic reader\n      return r.fields();\n    } else if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getFields(subs[0]);\n    } else {\n\n      Fields currentFields = r.retrieveFields();\n      if (currentFields == null) {\n      \n        final List<Fields> fields = new ArrayList<Fields>();\n        final List<ReaderUtil.Slice> slices = new ArrayList<ReaderUtil.Slice>();\n\n        new ReaderUtil.Gather(r) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            final Fields f = r.fields();\n            if (f != null) {\n              fields.add(f);\n              slices.add(new ReaderUtil.Slice(base, r.maxDoc(), fields.size()-1));\n            }\n          }\n        }.run();\n\n        if (fields.size() == 0) {\n          return null;\n        } else if (fields.size() == 1) {\n          currentFields = fields.get(0);\n        } else {\n          currentFields = new MultiFields(fields.toArray(Fields.EMPTY_ARRAY),\n                                         slices.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n        }\n        r.storeFields(currentFields);\n      }\n      return currentFields;\n    }\n  }\n\n","bugFix":null,"bugIntro":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getFields(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getFields(IndexReader).mjava","sourceNew":"  /** Returns a single {@link Fields} instance for this\n   *  reader, merging fields/terms/docs/positions on the\n   *  fly.  This method will return null if the reader \n   *  has no postings.\n   *\n   *  <p><b>NOTE</b>: this is a slow way to access postings.\n   *  It's better to get the sub-readers (using {@link\n   *  Gather}) and iterate through them\n   *  yourself. */\n  public static Fields getFields(IndexReader r) throws IOException {\n    if (r instanceof AtomicReader) {\n      // already an atomic reader\n      return ((AtomicReader) r).fields();\n    }\n    assert r instanceof CompositeReader;\n    final IndexReader[] subs = ((CompositeReader) r).getSequentialSubReaders();\n    if (subs.length == 0) {\n      // no fields\n      return null;\n    } else {\n      final List<Fields> fields = new ArrayList<Fields>();\n      final List<ReaderUtil.Slice> slices = new ArrayList<ReaderUtil.Slice>();\n\n      new ReaderUtil.Gather(r) {\n        @Override\n        protected void add(int base, AtomicReader r) throws IOException {\n          final Fields f = r.fields();\n          if (f != null) {\n            fields.add(f);\n            slices.add(new ReaderUtil.Slice(base, r.maxDoc(), fields.size()-1));\n          }\n        }\n      }.run();\n\n      if (fields.isEmpty()) {\n        return null;\n      } else if (fields.size() == 1) {\n        return fields.get(0);\n      } else {\n        return new MultiFields(fields.toArray(Fields.EMPTY_ARRAY),\n                                       slices.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n      }\n    }\n  }\n\n","sourceOld":"  /** Returns a single {@link Fields} instance for this\n   *  reader, merging fields/terms/docs/positions on the\n   *  fly.  This method will return null if the reader \n   *  has no postings.\n   *\n   *  <p><b>NOTE</b>: this is a slow way to access postings.\n   *  It's better to get the sub-readers (using {@link\n   *  Gather}) and iterate through them\n   *  yourself. */\n  public static Fields getFields(IndexReader r) throws IOException {\n    if (r instanceof AtomicIndexReader) {\n      // already an atomic reader\n      return ((AtomicIndexReader) r).fields();\n    }\n    assert r instanceof CompositeIndexReader;\n    final IndexReader[] subs = ((CompositeIndexReader) r).getSequentialSubReaders();\n    if (subs.length == 0) {\n      // no fields\n      return null;\n    } else {\n      final List<Fields> fields = new ArrayList<Fields>();\n      final List<ReaderUtil.Slice> slices = new ArrayList<ReaderUtil.Slice>();\n\n      new ReaderUtil.Gather(r) {\n        @Override\n        protected void add(int base, AtomicIndexReader r) throws IOException {\n          final Fields f = r.fields();\n          if (f != null) {\n            fields.add(f);\n            slices.add(new ReaderUtil.Slice(base, r.maxDoc(), fields.size()-1));\n          }\n        }\n      }.run();\n\n      if (fields.isEmpty()) {\n        return null;\n      } else if (fields.size() == 1) {\n        return fields.get(0);\n      } else {\n        return new MultiFields(fields.toArray(Fields.EMPTY_ARRAY),\n                                       slices.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getFields(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getFields(IndexReader).mjava","sourceNew":"  /** Returns a single {@link Fields} instance for this\n   *  reader, merging fields/terms/docs/positions on the\n   *  fly.  This method will return null if the reader \n   *  has no postings.\n   *\n   *  <p><b>NOTE</b>: this is a slow way to access postings.\n   *  It's better to get the sub-readers (using {@link\n   *  Gather}) and iterate through them\n   *  yourself. */\n  public static Fields getFields(IndexReader r) throws IOException {\n    if (r instanceof AtomicReader) {\n      // already an atomic reader\n      return ((AtomicReader) r).fields();\n    }\n    assert r instanceof CompositeReader;\n    final IndexReader[] subs = ((CompositeReader) r).getSequentialSubReaders();\n    if (subs.length == 0) {\n      // no fields\n      return null;\n    } else {\n      final List<Fields> fields = new ArrayList<Fields>();\n      final List<ReaderUtil.Slice> slices = new ArrayList<ReaderUtil.Slice>();\n\n      new ReaderUtil.Gather(r) {\n        @Override\n        protected void add(int base, AtomicReader r) throws IOException {\n          final Fields f = r.fields();\n          if (f != null) {\n            fields.add(f);\n            slices.add(new ReaderUtil.Slice(base, r.maxDoc(), fields.size()-1));\n          }\n        }\n      }.run();\n\n      if (fields.isEmpty()) {\n        return null;\n      } else if (fields.size() == 1) {\n        return fields.get(0);\n      } else {\n        return new MultiFields(fields.toArray(Fields.EMPTY_ARRAY),\n                                       slices.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n      }\n    }\n  }\n\n","sourceOld":"  /** Returns a single {@link Fields} instance for this\n   *  reader, merging fields/terms/docs/positions on the\n   *  fly.  This method will return null if the reader \n   *  has no postings.\n   *\n   *  <p><b>NOTE</b>: this is a slow way to access postings.\n   *  It's better to get the sub-readers (using {@link\n   *  Gather}) and iterate through them\n   *  yourself. */\n  public static Fields getFields(IndexReader r) throws IOException {\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    if (subs == null) {\n      // already an atomic reader\n      return r.fields();\n    } else if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getFields(subs[0]);\n    } else {\n\n      Fields currentFields = r.retrieveFields();\n      if (currentFields == null) {\n      \n        final List<Fields> fields = new ArrayList<Fields>();\n        final List<ReaderUtil.Slice> slices = new ArrayList<ReaderUtil.Slice>();\n\n        new ReaderUtil.Gather(r) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            final Fields f = r.fields();\n            if (f != null) {\n              fields.add(f);\n              slices.add(new ReaderUtil.Slice(base, r.maxDoc(), fields.size()-1));\n            }\n          }\n        }.run();\n\n        if (fields.size() == 0) {\n          return null;\n        } else if (fields.size() == 1) {\n          currentFields = fields.get(0);\n        } else {\n          currentFields = new MultiFields(fields.toArray(Fields.EMPTY_ARRAY),\n                                         slices.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n        }\n        r.storeFields(currentFields);\n      }\n      return currentFields;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getFields(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getFields(IndexReader).mjava","sourceNew":"  /** Returns a single {@link Fields} instance for this\n   *  reader, merging fields/terms/docs/positions on the\n   *  fly.  This method will return null if the reader \n   *  has no postings.\n   *\n   *  <p><b>NOTE</b>: this is a slow way to access postings.\n   *  It's better to get the sub-readers (using {@link\n   *  Gather}) and iterate through them\n   *  yourself. */\n  public static Fields getFields(IndexReader r) throws IOException {\n    if (r instanceof AtomicReader) {\n      // already an atomic reader\n      return ((AtomicReader) r).fields();\n    }\n    assert r instanceof CompositeReader;\n    final IndexReader[] subs = ((CompositeReader) r).getSequentialSubReaders();\n    if (subs.length == 0) {\n      // no fields\n      return null;\n    } else {\n      final List<Fields> fields = new ArrayList<Fields>();\n      final List<ReaderUtil.Slice> slices = new ArrayList<ReaderUtil.Slice>();\n\n      new ReaderUtil.Gather(r) {\n        @Override\n        protected void add(int base, AtomicReader r) throws IOException {\n          final Fields f = r.fields();\n          if (f != null) {\n            fields.add(f);\n            slices.add(new ReaderUtil.Slice(base, r.maxDoc(), fields.size()-1));\n          }\n        }\n      }.run();\n\n      if (fields.isEmpty()) {\n        return null;\n      } else if (fields.size() == 1) {\n        return fields.get(0);\n      } else {\n        return new MultiFields(fields.toArray(Fields.EMPTY_ARRAY),\n                                       slices.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n      }\n    }\n  }\n\n","sourceOld":"  /** Returns a single {@link Fields} instance for this\n   *  reader, merging fields/terms/docs/positions on the\n   *  fly.  This method will return null if the reader \n   *  has no postings.\n   *\n   *  <p><b>NOTE</b>: this is a slow way to access postings.\n   *  It's better to get the sub-readers (using {@link\n   *  Gather}) and iterate through them\n   *  yourself. */\n  public static Fields getFields(IndexReader r) throws IOException {\n    if (r instanceof AtomicReader) {\n      // already an atomic reader\n      return ((AtomicReader) r).fields();\n    }\n    assert r instanceof CompositeReader;\n    final IndexReader[] subs = ((CompositeReader) r).getSequentialSubReaders();\n    if (subs.length == 0) {\n      // no fields\n      return null;\n    } else {\n      final List<Fields> fields = new ArrayList<Fields>();\n      final List<ReaderUtil.Slice> slices = new ArrayList<ReaderUtil.Slice>();\n\n      new ReaderUtil.Gather(r) {\n        @Override\n        protected void add(int base, AtomicReader r) throws IOException {\n          final Fields f = r.fields();\n          if (f != null) {\n            fields.add(f);\n            slices.add(new ReaderUtil.Slice(base, r.maxDoc(), fields.size()-1));\n          }\n        }\n      }.run();\n\n      if (fields.isEmpty()) {\n        return null;\n      } else if (fields.size() == 1) {\n        return fields.get(0);\n      } else {\n        return new MultiFields(fields.toArray(Fields.EMPTY_ARRAY),\n                                       slices.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"59c0414b081ae3776bc77e4f9f48f1472c58b4be":["1b81ce69c567e53e3cf531ee7cc423bdd467a77a"],"1b81ce69c567e53e3cf531ee7cc423bdd467a77a":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["59c0414b081ae3776bc77e4f9f48f1472c58b4be","da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["59c0414b081ae3776bc77e4f9f48f1472c58b4be"]},"commit2Childs":{"b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c":["1b81ce69c567e53e3cf531ee7cc423bdd467a77a"],"59c0414b081ae3776bc77e4f9f48f1472c58b4be":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"1b81ce69c567e53e3cf531ee7cc423bdd467a77a":["59c0414b081ae3776bc77e4f9f48f1472c58b4be"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}