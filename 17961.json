{"path":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","commits":[{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with IndexDocValues!\", \n        \"PreFlex\".equals(CodecProvider.getDefault().getDefaultFieldCodec()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    IndexDocValuesField dvField = new IndexDocValuesField(\"foo_boost\");\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setFloat(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setFloat(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarityProvider(new DefaultSimilarityProvider() {\n      final Similarity fooSim = new BoostingSimilarity(super.get(\"foo\"), \"foo_boost\");\n\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : super.get(field);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    \n    searcher1.close();\n    searcher2.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766","a78a90fc9701e511308346ea29f4f5e548bb39fe","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with IndexDocValues!\", \n        \"PreFlex\".equals(CodecProvider.getDefault().getDefaultFieldCodec()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    IndexDocValuesField dvField = new IndexDocValuesField(\"foo_boost\");\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setFloat(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setFloat(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarityProvider(new DefaultSimilarityProvider() {\n      final Similarity fooSim = new BoostingSimilarity(super.get(\"foo\"), \"foo_boost\");\n\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : super.get(field);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    \n    searcher1.close();\n    searcher2.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with IndexDocValues!\", \n        \"PreFlex\".equals(CodecProvider.getDefault().getDefaultFieldCodec()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    IndexDocValuesField dvField = new IndexDocValuesField(\"foo_boost\");\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setFloat(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setFloat(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarityProvider(new DefaultSimilarityProvider() {\n      final Similarity fooSim = new BoostingSimilarity(super.get(\"foo\"), \"foo_boost\");\n\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : super.get(field);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    \n    searcher1.close();\n    searcher2.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with IndexDocValues!\", \n        \"PreFlex\".equals(CodecProvider.getDefault().getDefaultFieldCodec()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    IndexDocValuesField dvField = new IndexDocValuesField(\"foo_boost\");\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setFloat(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setFloat(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarityProvider(new DefaultSimilarityProvider() {\n      final Similarity fooSim = new BoostingSimilarity(super.get(\"foo\"), \"foo_boost\");\n\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : super.get(field);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    \n    searcher1.close();\n    searcher2.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with IndexDocValues!\", \n        \"PreFlex\".equals(CodecProvider.getDefault().getDefaultFieldCodec()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field);\n    IndexDocValuesField dvField = new IndexDocValuesField(\"foo_boost\");\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", Field.Store.NO, Field.Index.ANALYZED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setFloat(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setFloat(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarityProvider(new DefaultSimilarityProvider() {\n      final Similarity fooSim = new BoostingSimilarity(super.get(\"foo\"), \"foo_boost\");\n\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : super.get(field);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    \n    searcher1.close();\n    searcher2.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with IndexDocValues!\", \n        \"PreFlex\".equals(CodecProvider.getDefault().getDefaultFieldCodec()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    IndexDocValuesField dvField = new IndexDocValuesField(\"foo_boost\");\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setFloat(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setFloat(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final SimilarityProvider base = searcher1.getSimilarityProvider();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarityProvider(new SimilarityProvider() {\n      final Similarity fooSim = new BoostingSimilarity(base.get(\"foo\"), \"foo_boost\");\n\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base.get(field);\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    \n    searcher1.close();\n    searcher2.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with IndexDocValues!\", \n        \"PreFlex\".equals(CodecProvider.getDefault().getDefaultFieldCodec()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    IndexDocValuesField dvField = new IndexDocValuesField(\"foo_boost\");\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setFloat(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setFloat(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarityProvider(new DefaultSimilarityProvider() {\n      final Similarity fooSim = new BoostingSimilarity(super.get(\"foo\"), \"foo_boost\");\n\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : super.get(field);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    \n    searcher1.close();\n    searcher2.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with IndexDocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    IndexDocValuesField dvField = new IndexDocValuesField(\"foo_boost\");\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setFloat(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setFloat(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final SimilarityProvider base = searcher1.getSimilarityProvider();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarityProvider(new SimilarityProvider() {\n      final Similarity fooSim = new BoostingSimilarity(base.get(\"foo\"), \"foo_boost\");\n\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base.get(field);\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    \n    searcher1.close();\n    searcher2.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with IndexDocValues!\", \n        \"PreFlex\".equals(CodecProvider.getDefault().getDefaultFieldCodec()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    IndexDocValuesField dvField = new IndexDocValuesField(\"foo_boost\");\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setFloat(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setFloat(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final SimilarityProvider base = searcher1.getSimilarityProvider();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarityProvider(new SimilarityProvider() {\n      final Similarity fooSim = new BoostingSimilarity(base.get(\"foo\"), \"foo_boost\");\n\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base.get(field);\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    \n    searcher1.close();\n    searcher2.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with DocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    DocValuesField dvField = new DocValuesField(\"foo_boost\");\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setFloat(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setFloat(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final SimilarityProvider base = searcher1.getSimilarityProvider();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarityProvider(new SimilarityProvider() {\n      final Similarity fooSim = new BoostingSimilarity(base.get(\"foo\"), \"foo_boost\");\n\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base.get(field);\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    \n    searcher1.close();\n    searcher2.close();\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with IndexDocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    IndexDocValuesField dvField = new IndexDocValuesField(\"foo_boost\");\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setFloat(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setFloat(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final SimilarityProvider base = searcher1.getSimilarityProvider();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarityProvider(new SimilarityProvider() {\n      final Similarity fooSim = new BoostingSimilarity(base.get(\"foo\"), \"foo_boost\");\n\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base.get(field);\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    \n    searcher1.close();\n    searcher2.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with IndexDocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    IndexDocValuesField dvField = new IndexDocValuesField(\"foo_boost\");\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setFloat(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setFloat(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final SimilarityProvider base = searcher1.getSimilarityProvider();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarityProvider(new SimilarityProvider() {\n      final Similarity fooSim = new BoostingSimilarity(base.get(\"foo\"), \"foo_boost\");\n\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base.get(field);\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with IndexDocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    IndexDocValuesField dvField = new IndexDocValuesField(\"foo_boost\");\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setFloat(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setFloat(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final SimilarityProvider base = searcher1.getSimilarityProvider();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarityProvider(new SimilarityProvider() {\n      final Similarity fooSim = new BoostingSimilarity(base.get(\"foo\"), \"foo_boost\");\n\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base.get(field);\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    \n    searcher1.close();\n    searcher2.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with DocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    DocValuesField dvField = new DocValuesField(\"foo_boost\");\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setFloat(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setFloat(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final SimilarityProvider base = searcher1.getSimilarityProvider();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarityProvider(new SimilarityProvider() {\n      final Similarity fooSim = new BoostingSimilarity(base.get(\"foo\"), \"foo_boost\");\n\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base.get(field);\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with DocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    DocValuesField dvField = new DocValuesField(\"foo_boost\");\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setFloat(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setFloat(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final SimilarityProvider base = searcher1.getSimilarityProvider();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarityProvider(new SimilarityProvider() {\n      final Similarity fooSim = new BoostingSimilarity(base.get(\"foo\"), \"foo_boost\");\n\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base.get(field);\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    \n    searcher1.close();\n    searcher2.close();\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with DocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    DocValuesField dvField = new DocValuesField(\"foo_boost\");\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setFloat(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setFloat(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final SimilarityProvider base = searcher1.getSimilarityProvider();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarityProvider(new SimilarityProvider() {\n      final Similarity fooSim = new BoostingSimilarity(base.get(\"foo\"), \"foo_boost\");\n\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base.get(field);\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with IndexDocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    IndexDocValuesField dvField = new IndexDocValuesField(\"foo_boost\");\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setFloat(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setFloat(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final SimilarityProvider base = searcher1.getSimilarityProvider();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarityProvider(new SimilarityProvider() {\n      final Similarity fooSim = new BoostingSimilarity(base.get(\"foo\"), \"foo_boost\");\n\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base.get(field);\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with DocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    DocValuesField dvField = new DocValuesField(\"foo_boost\", 0.0f, DocValues.Type.FLOAT_32);\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final SimilarityProvider base = searcher1.getSimilarityProvider();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarityProvider(new SimilarityProvider() {\n      final Similarity fooSim = new BoostingSimilarity(base.get(\"foo\"), \"foo_boost\");\n\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base.get(field);\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with DocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    DocValuesField dvField = new DocValuesField(\"foo_boost\");\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setFloat(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setFloat(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final SimilarityProvider base = searcher1.getSimilarityProvider();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarityProvider(new SimilarityProvider() {\n      final Similarity fooSim = new BoostingSimilarity(base.get(\"foo\"), \"foo_boost\");\n\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base.get(field);\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["0f3cee3d20b0c786e6fca20539454262e29edcab","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe","cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with DocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    DocValuesField dvField = new DocValuesField(\"foo_boost\", 0.0f, DocValues.Type.FLOAT_32);\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with DocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    DocValuesField dvField = new DocValuesField(\"foo_boost\", 0.0f, DocValues.Type.FLOAT_32);\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final SimilarityProvider base = searcher1.getSimilarityProvider();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarityProvider(new SimilarityProvider() {\n      final Similarity fooSim = new BoostingSimilarity(base.get(\"foo\"), \"foo_boost\");\n\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base.get(field);\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocValuesScoring#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with DocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    DocValuesField dvField = new DocValuesField(\"foo_boost\", 0.0f, DocValues.Type.FLOAT_32);\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assumeFalse(\"PreFlex codec cannot work with DocValues!\", \n        \"Lucene3x\".equals(Codec.getDefault().getName()));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    Field field = newField(\"foo\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    DocValuesField dvField = new DocValuesField(\"foo_boost\", 0.0f, DocValues.Type.FLOAT_32);\n    doc.add(dvField);\n    Field field2 = newField(\"bar\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field2);\n    \n    field.setValue(\"quick brown fox\");\n    field2.setValue(\"quick brown fox\");\n    dvField.setValue(2f); // boost x2\n    iw.addDocument(doc);\n    field.setValue(\"jumps over lazy brown dog\");\n    field2.setValue(\"jumps over lazy brown dog\");\n    dvField.setValue(4f); // boost x4\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    // no boosting\n    IndexSearcher searcher1 = newSearcher(ir);\n    final Similarity base = searcher1.getSimilarity();\n    // boosting\n    IndexSearcher searcher2 = newSearcher(ir);\n    searcher2.setSimilarity(new PerFieldSimilarityWrapper() {\n      final Similarity fooSim = new BoostingSimilarity(base, \"foo_boost\");\n\n      @Override\n      public Similarity get(String field) {\n        return \"foo\".equals(field) ? fooSim : base;\n      }\n\n      @Override\n      public float coord(int overlap, int maxOverlap) {\n        return base.coord(overlap, maxOverlap);\n      }\n\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return base.queryNorm(sumOfSquaredWeights);\n      }\n    });\n    \n    // in this case, we searched on field \"foo\". first document should have 2x the score.\n    TermQuery tq = new TermQuery(new Term(\"foo\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    TopDocs noboost = searcher1.search(tq, 10);\n    TopDocs boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    //System.out.println(searcher2.explain(tq, boost.scoreDocs[0].doc));\n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*2f, SCORE_EPSILON);\n    \n    // this query matches only the second document, which should have 4x the score.\n    tq = new TermQuery(new Term(\"foo\", \"jumps\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score*4f, SCORE_EPSILON);\n    \n    // search on on field bar just for kicks, nothing should happen, since we setup\n    // our sim provider to only use foo_boost for field foo.\n    tq = new TermQuery(new Term(\"bar\", \"quick\"));\n    QueryUtils.check(random, tq, searcher1);\n    QueryUtils.check(random, tq, searcher2);\n    \n    noboost = searcher1.search(tq, 10);\n    boost = searcher2.search(tq, 10);\n    assertEquals(1, noboost.totalHits);\n    assertEquals(1, boost.totalHits);\n    \n    assertEquals(boost.scoreDocs[0].score, noboost.scoreDocs[0].score, SCORE_EPSILON);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["fa0f44f887719e97183771e977cfc4bfb485b766"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"7b91922b55d15444d554721b352861d028eb8278":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"1291e4568eb7d9463d751627596ef14baf4c1603":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f3cee3d20b0c786e6fca20539454262e29edcab"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f3cee3d20b0c786e6fca20539454262e29edcab"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["7b91922b55d15444d554721b352861d028eb8278"],"fa0f44f887719e97183771e977cfc4bfb485b766":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["7b91922b55d15444d554721b352861d028eb8278"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["fa0f44f887719e97183771e977cfc4bfb485b766"],"7b91922b55d15444d554721b352861d028eb8278":["0e7c2454a6a8237bfd0e953f5b940838408c9055","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f3cee3d20b0c786e6fca20539454262e29edcab","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"fa0f44f887719e97183771e977cfc4bfb485b766":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}