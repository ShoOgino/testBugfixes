{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain.TermFacet#buildRandomFacets(AtomicInteger,int).mjava","commits":[{"id":"b1b26212116cd764dfc34c7f93ecaa718ec27ef3","date":1493832602,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain.TermFacet#buildRandomFacets(AtomicInteger,int).mjava","pathOld":"/dev/null","sourceNew":"    /** \n     * recursive helper method for building random facets\n     *\n     * @param keyCounter used to ensure every generated facet has a unique key name\n     * @param maxDepth max possible depth allowed for the recusion, a lower value may be used depending on how many facets are returned at the current level. \n     */\n    private static Map<String,TermFacet> buildRandomFacets(AtomicInteger keyCounter, int maxDepth) {\n      final int numFacets = Math.max(1, TestUtil.nextInt(random(), -1, 3)); // 3/5th chance of being '1'\n      Map<String,TermFacet> results = new LinkedHashMap<>();\n      for (int i = 0; i < numFacets; i++) {\n        final JoinDomain domain = JoinDomain.buildRandomDomain();\n        assert null != domain;\n        final TermFacet facet =  new TermFacet(field(random().nextBoolean() ? STR_FIELD_SUFFIXES : INT_FIELD_SUFFIXES,\n                                                     random().nextInt(MAX_FIELD_NUM)),\n                                               domain);\n        results.put(\"facet_\" + keyCounter.incrementAndGet(), facet);\n        if (0 < maxDepth) {\n          // if we're going wide, don't go deep\n          final int nextMaxDepth = Math.max(0, maxDepth - numFacets);\n          facet.subFacets.putAll(buildRandomFacets(keyCounter, TestUtil.nextInt(random(), 0, nextMaxDepth)));\n        }\n      }\n      return results;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain.TermFacet#buildRandomFacets(AtomicInteger,int).mjava","pathOld":"/dev/null","sourceNew":"    /** \n     * recursive helper method for building random facets\n     *\n     * @param keyCounter used to ensure every generated facet has a unique key name\n     * @param maxDepth max possible depth allowed for the recusion, a lower value may be used depending on how many facets are returned at the current level. \n     */\n    private static Map<String,TermFacet> buildRandomFacets(AtomicInteger keyCounter, int maxDepth) {\n      final int numFacets = Math.max(1, TestUtil.nextInt(random(), -1, 3)); // 3/5th chance of being '1'\n      Map<String,TermFacet> results = new LinkedHashMap<>();\n      for (int i = 0; i < numFacets; i++) {\n        final JoinDomain domain = JoinDomain.buildRandomDomain();\n        assert null != domain;\n        final TermFacet facet =  new TermFacet(field(random().nextBoolean() ? STR_FIELD_SUFFIXES : INT_FIELD_SUFFIXES,\n                                                     random().nextInt(MAX_FIELD_NUM)),\n                                               domain);\n        results.put(\"facet_\" + keyCounter.incrementAndGet(), facet);\n        if (0 < maxDepth) {\n          // if we're going wide, don't go deep\n          final int nextMaxDepth = Math.max(0, maxDepth - numFacets);\n          facet.subFacets.putAll(buildRandomFacets(keyCounter, TestUtil.nextInt(random(), 0, nextMaxDepth)));\n        }\n      }\n      return results;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e27469285c87fe39ba0fcaf9c290f18bb0f1cf","date":1507135648,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain.TermFacet#buildRandomFacets(AtomicInteger,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain.TermFacet#buildRandomFacets(AtomicInteger,int).mjava","sourceNew":"    /** \n     * recursive helper method for building random facets\n     *\n     * @param keyCounter used to ensure every generated facet has a unique key name\n     * @param maxDepth max possible depth allowed for the recusion, a lower value may be used depending on how many facets are returned at the current level. \n     */\n    private static Map<String,TermFacet> buildRandomFacets(AtomicInteger keyCounter, int maxDepth) {\n      final int numFacets = Math.max(1, TestUtil.nextInt(random(), -1, 3)); // 3/5th chance of being '1'\n      Map<String,TermFacet> results = new LinkedHashMap<>();\n      for (int i = 0; i < numFacets; i++) {\n        final JoinDomain domain = JoinDomain.buildRandomDomain();\n        assert null != domain;\n        final Integer limit = randomLimitParam(random());\n        final Integer overrequest = randomOverrequestParam(random());\n        final TermFacet facet =  new TermFacet(field(random().nextBoolean() ? STR_FIELD_SUFFIXES : INT_FIELD_SUFFIXES,\n                                                     random().nextInt(MAX_FIELD_NUM)),\n                                               domain, limit, overrequest,\n                                               randomRefineParam(random(), limit, overrequest));\n        results.put(\"facet_\" + keyCounter.incrementAndGet(), facet);\n        if (0 < maxDepth) {\n          // if we're going wide, don't go deep\n          final int nextMaxDepth = Math.max(0, maxDepth - numFacets);\n          facet.subFacets.putAll(buildRandomFacets(keyCounter, TestUtil.nextInt(random(), 0, nextMaxDepth)));\n        }\n      }\n      return results;\n    }\n\n","sourceOld":"    /** \n     * recursive helper method for building random facets\n     *\n     * @param keyCounter used to ensure every generated facet has a unique key name\n     * @param maxDepth max possible depth allowed for the recusion, a lower value may be used depending on how many facets are returned at the current level. \n     */\n    private static Map<String,TermFacet> buildRandomFacets(AtomicInteger keyCounter, int maxDepth) {\n      final int numFacets = Math.max(1, TestUtil.nextInt(random(), -1, 3)); // 3/5th chance of being '1'\n      Map<String,TermFacet> results = new LinkedHashMap<>();\n      for (int i = 0; i < numFacets; i++) {\n        final JoinDomain domain = JoinDomain.buildRandomDomain();\n        assert null != domain;\n        final TermFacet facet =  new TermFacet(field(random().nextBoolean() ? STR_FIELD_SUFFIXES : INT_FIELD_SUFFIXES,\n                                                     random().nextInt(MAX_FIELD_NUM)),\n                                               domain);\n        results.put(\"facet_\" + keyCounter.incrementAndGet(), facet);\n        if (0 < maxDepth) {\n          // if we're going wide, don't go deep\n          final int nextMaxDepth = Math.max(0, maxDepth - numFacets);\n          facet.subFacets.putAll(buildRandomFacets(keyCounter, TestUtil.nextInt(random(), 0, nextMaxDepth)));\n        }\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7859b8e6a469429413db808a609e8468be14c03","date":1507222263,"type":3,"author":"tballison","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain.TermFacet#buildRandomFacets(AtomicInteger,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain.TermFacet#buildRandomFacets(AtomicInteger,int).mjava","sourceNew":"    /** \n     * recursive helper method for building random facets\n     *\n     * @param keyCounter used to ensure every generated facet has a unique key name\n     * @param maxDepth max possible depth allowed for the recusion, a lower value may be used depending on how many facets are returned at the current level. \n     */\n    private static Map<String,TermFacet> buildRandomFacets(AtomicInteger keyCounter, int maxDepth) {\n      final int numFacets = Math.max(1, TestUtil.nextInt(random(), -1, 3)); // 3/5th chance of being '1'\n      Map<String,TermFacet> results = new LinkedHashMap<>();\n      for (int i = 0; i < numFacets; i++) {\n        final JoinDomain domain = JoinDomain.buildRandomDomain();\n        assert null != domain;\n        final Integer limit = randomLimitParam(random());\n        final Integer overrequest = randomOverrequestParam(random());\n        final TermFacet facet =  new TermFacet(field(random().nextBoolean() ? STR_FIELD_SUFFIXES : INT_FIELD_SUFFIXES,\n                                                     random().nextInt(MAX_FIELD_NUM)),\n                                               domain, limit, overrequest,\n                                               randomRefineParam(random(), limit, overrequest));\n        results.put(\"facet_\" + keyCounter.incrementAndGet(), facet);\n        if (0 < maxDepth) {\n          // if we're going wide, don't go deep\n          final int nextMaxDepth = Math.max(0, maxDepth - numFacets);\n          facet.subFacets.putAll(buildRandomFacets(keyCounter, TestUtil.nextInt(random(), 0, nextMaxDepth)));\n        }\n      }\n      return results;\n    }\n\n","sourceOld":"    /** \n     * recursive helper method for building random facets\n     *\n     * @param keyCounter used to ensure every generated facet has a unique key name\n     * @param maxDepth max possible depth allowed for the recusion, a lower value may be used depending on how many facets are returned at the current level. \n     */\n    private static Map<String,TermFacet> buildRandomFacets(AtomicInteger keyCounter, int maxDepth) {\n      final int numFacets = Math.max(1, TestUtil.nextInt(random(), -1, 3)); // 3/5th chance of being '1'\n      Map<String,TermFacet> results = new LinkedHashMap<>();\n      for (int i = 0; i < numFacets; i++) {\n        final JoinDomain domain = JoinDomain.buildRandomDomain();\n        assert null != domain;\n        final TermFacet facet =  new TermFacet(field(random().nextBoolean() ? STR_FIELD_SUFFIXES : INT_FIELD_SUFFIXES,\n                                                     random().nextInt(MAX_FIELD_NUM)),\n                                               domain);\n        results.put(\"facet_\" + keyCounter.incrementAndGet(), facet);\n        if (0 < maxDepth) {\n          // if we're going wide, don't go deep\n          final int nextMaxDepth = Math.max(0, maxDepth - numFacets);\n          facet.subFacets.putAll(buildRandomFacets(keyCounter, TestUtil.nextInt(random(), 0, nextMaxDepth)));\n        }\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92910727264a23a47b7a6c94b0f75d655537b9ea","date":1540414655,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain.TermFacet#buildRandomFacets(AtomicInteger,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain.TermFacet#buildRandomFacets(AtomicInteger,int).mjava","sourceNew":"    /** \n     * recursive helper method for building random facets\n     *\n     * @param keyCounter used to ensure every generated facet has a unique key name\n     * @param maxDepth max possible depth allowed for the recusion, a lower value may be used depending on how many facets are returned at the current level. \n     */\n    private static Map<String,TermFacet> buildRandomFacets(AtomicInteger keyCounter, int maxDepth) {\n      final int numFacets = Math.max(1, TestUtil.nextInt(random(), -1, 3)); // 3/5th chance of being '1'\n      Map<String,TermFacet> results = new LinkedHashMap<>();\n      for (int i = 0; i < numFacets; i++) {\n        final JoinDomain domain = JoinDomain.buildRandomDomain();\n        assert null != domain;\n        final Integer limit = randomLimitParam(random());\n        final Integer overrequest = randomOverrequestParam(random());\n        final TermFacet facet =  new TermFacet(field(random().nextBoolean() ? STR_FIELD_SUFFIXES : INT_FIELD_SUFFIXES,\n                                                     random().nextInt(MAX_FIELD_NUM)),\n                                               domain, limit, overrequest,\n                                               randomRefineParam(random(), limit, overrequest));\n        results.put(\"facet_\" + keyCounter.incrementAndGet(), facet);\n        if (0 < maxDepth) {\n          // if we're going wide, don't go deep\n          final int nextMaxDepth = Math.max(0, maxDepth - numFacets);\n          facet.subFacets.putAll(buildRandomFacets(keyCounter, TestUtil.nextInt(random(), 0, nextMaxDepth)));\n        }\n      }\n      return results;\n    }\n\n","sourceOld":"    /** \n     * recursive helper method for building random facets\n     *\n     * @param keyCounter used to ensure every generated facet has a unique key name\n     * @param maxDepth max possible depth allowed for the recusion, a lower value may be used depending on how many facets are returned at the current level. \n     */\n    private static Map<String,TermFacet> buildRandomFacets(AtomicInteger keyCounter, int maxDepth) {\n      final int numFacets = Math.max(1, TestUtil.nextInt(random(), -1, 3)); // 3/5th chance of being '1'\n      Map<String,TermFacet> results = new LinkedHashMap<>();\n      for (int i = 0; i < numFacets; i++) {\n        final JoinDomain domain = JoinDomain.buildRandomDomain();\n        assert null != domain;\n        final Integer limit = randomLimitParam(random());\n        final Integer overrequest = randomOverrequestParam(random());\n        final TermFacet facet =  new TermFacet(field(random().nextBoolean() ? STR_FIELD_SUFFIXES : INT_FIELD_SUFFIXES,\n                                                     random().nextInt(MAX_FIELD_NUM)),\n                                               domain, limit, overrequest,\n                                               randomRefineParam(random(), limit, overrequest));\n        results.put(\"facet_\" + keyCounter.incrementAndGet(), facet);\n        if (0 < maxDepth) {\n          // if we're going wide, don't go deep\n          final int nextMaxDepth = Math.max(0, maxDepth - numFacets);\n          facet.subFacets.putAll(buildRandomFacets(keyCounter, TestUtil.nextInt(random(), 0, nextMaxDepth)));\n        }\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"d7859b8e6a469429413db808a609e8468be14c03":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3","20e27469285c87fe39ba0fcaf9c290f18bb0f1cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92910727264a23a47b7a6c94b0f75d655537b9ea":["20e27469285c87fe39ba0fcaf9c290f18bb0f1cf"],"20e27469285c87fe39ba0fcaf9c290f18bb0f1cf":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92910727264a23a47b7a6c94b0f75d655537b9ea"]},"commit2Childs":{"b1b26212116cd764dfc34c7f93ecaa718ec27ef3":["e9017cf144952056066919f1ebc7897ff9bd71b1","d7859b8e6a469429413db808a609e8468be14c03","20e27469285c87fe39ba0fcaf9c290f18bb0f1cf"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"d7859b8e6a469429413db808a609e8468be14c03":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1b26212116cd764dfc34c7f93ecaa718ec27ef3","e9017cf144952056066919f1ebc7897ff9bd71b1"],"92910727264a23a47b7a6c94b0f75d655537b9ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"20e27469285c87fe39ba0fcaf9c290f18bb0f1cf":["d7859b8e6a469429413db808a609e8468be14c03","92910727264a23a47b7a6c94b0f75d655537b9ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","d7859b8e6a469429413db808a609e8468be14c03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}