{"path":"src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean,boolean).mjava","commits":[{"id":"b00d44ccb616bf40482a9ba5302cb256c26c6e4c","date":1249308735,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder, boolean collectPayloads) {\n\n    // copy clauses array into an ArrayList\n    this.clauses = new ArrayList(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpanQuery clause = clauses[i];\n      if (i == 0) {                               // check field\n        field = clause.getField();\n      } else if (!clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n    this.collectPayloads = collectPayloads;\n    this.slop = slop;\n    this.inOrder = inOrder;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["15b2c0b1d50ad54ea367036e4bd9376be42c2805"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean,boolean).mjava","sourceNew":"  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder, boolean collectPayloads) {\n\n    // copy clauses array into an ArrayList\n    this.clauses = new ArrayList<SpanQuery>(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpanQuery clause = clauses[i];\n      if (i == 0) {                               // check field\n        field = clause.getField();\n      } else if (!clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n    this.collectPayloads = collectPayloads;\n    this.slop = slop;\n    this.inOrder = inOrder;\n  }\n\n","sourceOld":"  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder, boolean collectPayloads) {\n\n    // copy clauses array into an ArrayList\n    this.clauses = new ArrayList(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpanQuery clause = clauses[i];\n      if (i == 0) {                               // check field\n        field = clause.getField();\n      } else if (!clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n    this.collectPayloads = collectPayloads;\n    this.slop = slop;\n    this.inOrder = inOrder;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean,boolean).mjava","sourceNew":"  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder, boolean collectPayloads) {\n\n    // copy clauses array into an ArrayList\n    this.clauses = new ArrayList<SpanQuery>(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpanQuery clause = clauses[i];\n      if (i == 0) {                               // check field\n        field = clause.getField();\n      } else if (!clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n    this.collectPayloads = collectPayloads;\n    this.slop = slop;\n    this.inOrder = inOrder;\n  }\n\n","sourceOld":"  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder, boolean collectPayloads) {\n\n    // copy clauses array into an ArrayList\n    this.clauses = new ArrayList<SpanQuery>(clauses.length);\n    for (int i = 0; i < clauses.length; i++) {\n      SpanQuery clause = clauses[i];\n      if (i == 0) {                               // check field\n        field = clause.getField();\n      } else if (!clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n    this.collectPayloads = collectPayloads;\n    this.slop = slop;\n    this.inOrder = inOrder;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b00d44ccb616bf40482a9ba5302cb256c26c6e4c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef82ff03e4016c705811b2658e81471a645c0e49":["b00d44ccb616bf40482a9ba5302cb256c26c6e4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ef82ff03e4016c705811b2658e81471a645c0e49"]},"commit2Childs":{"b00d44ccb616bf40482a9ba5302cb256c26c6e4c":["ef82ff03e4016c705811b2658e81471a645c0e49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b00d44ccb616bf40482a9ba5302cb256c26c6e4c"],"ef82ff03e4016c705811b2658e81471a645c0e49":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}