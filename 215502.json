{"path":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testOverlapping().mjava","commits":[{"id":"798f4c48c9561bff1dcf2652d51afc7dd0ceae3e","date":1546868039,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testOverlapping().mjava","pathOld":"/dev/null","sourceNew":"  public void testOverlapping() throws IOException {\n    IntervalsSource source = Intervals.overlapping(\n        Intervals.unordered(Intervals.term(\"hot\"), Intervals.term(\"porridge\")),\n        Intervals.unordered(Intervals.term(\"cold\"), Intervals.term(\"pease\"))\n    );\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        { 2, 4, 7, 17 },\n        { 5, 7, 7, 21 },\n        {},\n        { 2, 4 },\n        {}\n    });\n\n    assertGaps(source, 2, \"field1\", new int[]{ 1, 13 });\n\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertNotNull(mi);\n    assertMatch(mi, 2, 4, 15, 39);\n    MatchesIterator sub = mi.getSubMatches();\n    assertNotNull(sub);\n    assertMatch(sub, 2, 2, 15, 18);\n    assertMatch(sub, 3, 3, 20, 25);\n    assertMatch(sub, 4, 4, 26, 34);\n    assertMatch(sub, 5, 5, 35, 39);\n    assertFalse(sub.next());\n    assertMatch(mi, 7, 17, 41, 118);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"362cb5d910af28f1dadaddc4c7670d7d166b23c2","date":1547647156,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testOverlapping().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testOverlapping().mjava","sourceNew":"  public void testOverlapping() throws IOException {\n    IntervalsSource source = Intervals.overlapping(\n        Intervals.unordered(Intervals.term(\"hot\"), Intervals.term(\"porridge\")),\n        Intervals.unordered(Intervals.term(\"cold\"), Intervals.term(\"pease\"))\n    );\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        { 2, 4, 7, 17 },\n        { 5, 7, 7, 21 },\n        {},\n        { 2, 4 },\n        {}\n    });\n\n    assertGaps(source, 2, \"field1\", new int[]{ 1, 13 });\n\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertNotNull(mi);\n    assertMatch(mi, 2, 4, 15, 39);\n    MatchesIterator sub = mi.getSubMatches();\n    assertNotNull(sub);\n    assertMatch(sub, 2, 2, 15, 18);\n    assertMatch(sub, 3, 3, 20, 25);\n    assertMatch(sub, 4, 4, 26, 34);\n    assertMatch(sub, 5, 5, 35, 39);\n    assertFalse(sub.next());\n    assertMatch(mi, 7, 17, 41, 118);\n\n    assertEquals(2, source.minExtent());\n  }\n\n","sourceOld":"  public void testOverlapping() throws IOException {\n    IntervalsSource source = Intervals.overlapping(\n        Intervals.unordered(Intervals.term(\"hot\"), Intervals.term(\"porridge\")),\n        Intervals.unordered(Intervals.term(\"cold\"), Intervals.term(\"pease\"))\n    );\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        { 2, 4, 7, 17 },\n        { 5, 7, 7, 21 },\n        {},\n        { 2, 4 },\n        {}\n    });\n\n    assertGaps(source, 2, \"field1\", new int[]{ 1, 13 });\n\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertNotNull(mi);\n    assertMatch(mi, 2, 4, 15, 39);\n    MatchesIterator sub = mi.getSubMatches();\n    assertNotNull(sub);\n    assertMatch(sub, 2, 2, 15, 18);\n    assertMatch(sub, 3, 3, 20, 25);\n    assertMatch(sub, 4, 4, 26, 34);\n    assertMatch(sub, 5, 5, 35, 39);\n    assertFalse(sub.next());\n    assertMatch(mi, 7, 17, 41, 118);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testOverlapping().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testOverlapping().mjava","sourceNew":"  public void testOverlapping() throws IOException {\n    IntervalsSource source = Intervals.overlapping(\n        Intervals.unordered(Intervals.term(\"hot\"), Intervals.term(\"porridge\")),\n        Intervals.unordered(Intervals.term(\"cold\"), Intervals.term(\"pease\"))\n    );\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        { 2, 4, 7, 17 },\n        { 5, 7, 7, 21 },\n        {},\n        { 2, 4 },\n        {}\n    });\n\n    assertGaps(source, 2, \"field1\", new int[]{ 1, 13 });\n\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertNotNull(mi);\n    assertMatch(mi, 2, 4, 15, 39);\n    MatchesIterator sub = mi.getSubMatches();\n    assertNotNull(sub);\n    assertMatch(sub, 2, 2, 15, 18);\n    assertMatch(sub, 3, 3, 20, 25);\n    assertMatch(sub, 4, 4, 26, 34);\n    assertMatch(sub, 5, 5, 35, 39);\n    assertFalse(sub.next());\n    assertMatch(mi, 7, 17, 41, 118);\n\n    assertEquals(2, source.minExtent());\n  }\n\n","sourceOld":"  public void testOverlapping() throws IOException {\n    IntervalsSource source = Intervals.overlapping(\n        Intervals.unordered(Intervals.term(\"hot\"), Intervals.term(\"porridge\")),\n        Intervals.unordered(Intervals.term(\"cold\"), Intervals.term(\"pease\"))\n    );\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        { 2, 4, 7, 17 },\n        { 5, 7, 7, 21 },\n        {},\n        { 2, 4 },\n        {}\n    });\n\n    assertGaps(source, 2, \"field1\", new int[]{ 1, 13 });\n\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertNotNull(mi);\n    assertMatch(mi, 2, 4, 15, 39);\n    MatchesIterator sub = mi.getSubMatches();\n    assertNotNull(sub);\n    assertMatch(sub, 2, 2, 15, 18);\n    assertMatch(sub, 3, 3, 20, 25);\n    assertMatch(sub, 4, 4, 26, 34);\n    assertMatch(sub, 5, 5, 35, 39);\n    assertFalse(sub.next());\n    assertMatch(mi, 7, 17, 41, 118);\n\n    assertEquals(2, source.minExtent());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["362cb5d910af28f1dadaddc4c7670d7d166b23c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"362cb5d910af28f1dadaddc4c7670d7d166b23c2":["798f4c48c9561bff1dcf2652d51afc7dd0ceae3e"],"798f4c48c9561bff1dcf2652d51afc7dd0ceae3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["798f4c48c9561bff1dcf2652d51afc7dd0ceae3e"],"362cb5d910af28f1dadaddc4c7670d7d166b23c2":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"798f4c48c9561bff1dcf2652d51afc7dd0ceae3e":["362cb5d910af28f1dadaddc4c7670d7d166b23c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}