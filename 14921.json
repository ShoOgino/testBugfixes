{"path":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned as an array of strings in order of score (contiguous fragments are merged into\n\t * one in their original order to improve readability)\n\t *\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tTokenStream tokenStream,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tmaxNumFragments = Math.max(1, maxNumFragments); //sanity check\n\n\t\tTextFragment[] frag =getBestTextFragments(tokenStream,text, true,maxNumFragments);\n\n\t\t//Get text\n\t\tArrayList<String> fragTexts = new ArrayList<String>();\n\t\tfor (int i = 0; i < frag.length; i++)\n\t\t{\n\t\t\tif ((frag[i] != null) && (frag[i].getScore() > 0))\n\t\t\t{\n\t\t\t\tfragTexts.add(frag[i].toString());\n\t\t\t}\n\t\t}\n\t\treturn fragTexts.toArray(new String[0]);\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned as an array of strings in order of score (contiguous fragments are merged into\n\t * one in their original order to improve readability)\n\t *\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tTokenStream tokenStream,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tmaxNumFragments = Math.max(1, maxNumFragments); //sanity check\n\n\t\tTextFragment[] frag =getBestTextFragments(tokenStream,text, true,maxNumFragments);\n\n\t\t//Get text\n\t\tArrayList<String> fragTexts = new ArrayList<String>();\n\t\tfor (int i = 0; i < frag.length; i++)\n\t\t{\n\t\t\tif ((frag[i] != null) && (frag[i].getScore() > 0))\n\t\t\t{\n\t\t\t\tfragTexts.add(frag[i].toString());\n\t\t\t}\n\t\t}\n\t\treturn fragTexts.toArray(new String[0]);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","sourceNew":"  /**\n   * Highlights chosen terms in a text, extracting the most relevant sections.\n   * The document text is analysed in chunks to record hit statistics\n   * across the document. After accumulating stats, the fragments with the highest scores\n   * are returned as an array of strings in order of score (contiguous fragments are merged into\n   * one in their original order to improve readability)\n   *\n   * @param text          text to highlight terms in\n   * @param maxNumFragments  the maximum number of fragments.\n   *\n   * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n   * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n   */\n  public final String[] getBestFragments(\n    TokenStream tokenStream,\n    String text,\n    int maxNumFragments)\n    throws IOException, InvalidTokenOffsetsException\n  {\n    maxNumFragments = Math.max(1, maxNumFragments); //sanity check\n\n    TextFragment[] frag =getBestTextFragments(tokenStream,text, true,maxNumFragments);\n\n    //Get text\n    ArrayList<String> fragTexts = new ArrayList<String>();\n    for (int i = 0; i < frag.length; i++)\n    {\n      if ((frag[i] != null) && (frag[i].getScore() > 0))\n      {\n        fragTexts.add(frag[i].toString());\n      }\n    }\n    return fragTexts.toArray(new String[0]);\n  }\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * The document text is analysed in chunks to record hit statistics\n\t * across the document. After accumulating stats, the fragments with the highest scores\n\t * are returned as an array of strings in order of score (contiguous fragments are merged into\n\t * one in their original order to improve readability)\n\t *\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tTokenStream tokenStream,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tmaxNumFragments = Math.max(1, maxNumFragments); //sanity check\n\n\t\tTextFragment[] frag =getBestTextFragments(tokenStream,text, true,maxNumFragments);\n\n\t\t//Get text\n\t\tArrayList<String> fragTexts = new ArrayList<String>();\n\t\tfor (int i = 0; i < frag.length; i++)\n\t\t{\n\t\t\tif ((frag[i] != null) && (frag[i].getScore() > 0))\n\t\t\t{\n\t\t\t\tfragTexts.add(frag[i].toString());\n\t\t\t}\n\t\t}\n\t\treturn fragTexts.toArray(new String[0]);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(TokenStream,String,int).mjava","sourceNew":"  /**\n   * Highlights chosen terms in a text, extracting the most relevant sections.\n   * The document text is analysed in chunks to record hit statistics\n   * across the document. After accumulating stats, the fragments with the highest scores\n   * are returned as an array of strings in order of score (contiguous fragments are merged into\n   * one in their original order to improve readability)\n   *\n   * @param text          text to highlight terms in\n   * @param maxNumFragments  the maximum number of fragments.\n   *\n   * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n   * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n   */\n  public final String[] getBestFragments(\n    TokenStream tokenStream,\n    String text,\n    int maxNumFragments)\n    throws IOException, InvalidTokenOffsetsException\n  {\n    maxNumFragments = Math.max(1, maxNumFragments); //sanity check\n\n    TextFragment[] frag =getBestTextFragments(tokenStream,text, true,maxNumFragments);\n\n    //Get text\n    ArrayList<String> fragTexts = new ArrayList<>();\n    for (int i = 0; i < frag.length; i++)\n    {\n      if ((frag[i] != null) && (frag[i].getScore() > 0))\n      {\n        fragTexts.add(frag[i].toString());\n      }\n    }\n    return fragTexts.toArray(new String[0]);\n  }\n\n","sourceOld":"  /**\n   * Highlights chosen terms in a text, extracting the most relevant sections.\n   * The document text is analysed in chunks to record hit statistics\n   * across the document. After accumulating stats, the fragments with the highest scores\n   * are returned as an array of strings in order of score (contiguous fragments are merged into\n   * one in their original order to improve readability)\n   *\n   * @param text          text to highlight terms in\n   * @param maxNumFragments  the maximum number of fragments.\n   *\n   * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n   * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n   */\n  public final String[] getBestFragments(\n    TokenStream tokenStream,\n    String text,\n    int maxNumFragments)\n    throws IOException, InvalidTokenOffsetsException\n  {\n    maxNumFragments = Math.max(1, maxNumFragments); //sanity check\n\n    TextFragment[] frag =getBestTextFragments(tokenStream,text, true,maxNumFragments);\n\n    //Get text\n    ArrayList<String> fragTexts = new ArrayList<String>();\n    for (int i = 0; i < frag.length; i++)\n    {\n      if ((frag[i] != null) && (frag[i].getScore() > 0))\n      {\n        fragTexts.add(frag[i].toString());\n      }\n    }\n    return fragTexts.toArray(new String[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}