{"path":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<String>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<String>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<String>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<String>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<String>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<String>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","sourceOld":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<String>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":["f4fcd0bb2fc087796f9d5ea348f2fedf8521fdd9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19be870dbbc5366138e3d1f4e6e038f2f5e167cd","date":1428973440,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n          if (storedFieldName.matches(fieldRegex)) {\n            storedFieldsToHighlight.add(storedFieldName);\n          }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[storedFieldsToHighlight.size()]);\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    // Trim them now in case they haven't been yet.  Not needed for all code-paths above but do it here.\n    for (int i = 0; i < fields.length; i++) {\n      fields[i] = fields[i].trim();\n    }\n    return fields;\n  }\n\n","sourceOld":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n            if (storedFieldName.matches(fieldRegex)) {\n              storedFieldsToHighlight.add(storedFieldName);\n            }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[] {});\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":["f4fcd0bb2fc087796f9d5ea348f2fedf8521fdd9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasiński","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programmatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n          if (storedFieldName.matches(fieldRegex)) {\n            storedFieldsToHighlight.add(storedFieldName);\n          }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[storedFieldsToHighlight.size()]);\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    // Trim them now in case they haven't been yet.  Not needed for all code-paths above but do it here.\n    for (int i = 0; i < fields.length; i++) {\n      fields[i] = fields[i].trim();\n    }\n    return fields;\n  }\n\n","sourceOld":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n          if (storedFieldName.matches(fieldRegex)) {\n            storedFieldsToHighlight.add(storedFieldName);\n          }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[storedFieldsToHighlight.size()]);\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    // Trim them now in case they haven't been yet.  Not needed for all code-paths above but do it here.\n    for (int i = 0; i < fields.length; i++) {\n      fields[i] = fields[i].trim();\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programmatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n          if (storedFieldName.matches(fieldRegex)) {\n            storedFieldsToHighlight.add(storedFieldName);\n          }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[storedFieldsToHighlight.size()]);\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    // Trim them now in case they haven't been yet.  Not needed for all code-paths above but do it here.\n    for (int i = 0; i < fields.length; i++) {\n      fields[i] = fields[i].trim();\n    }\n    return fields;\n  }\n\n","sourceOld":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n          if (storedFieldName.matches(fieldRegex)) {\n            storedFieldsToHighlight.add(storedFieldName);\n          }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[storedFieldsToHighlight.size()]);\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    // Trim them now in case they haven't been yet.  Not needed for all code-paths above but do it here.\n    for (int i = 0; i < fields.length; i++) {\n      fields[i] = fields[i].trim();\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programmatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n          if (storedFieldName.matches(fieldRegex)) {\n            storedFieldsToHighlight.add(storedFieldName);\n          }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[storedFieldsToHighlight.size()]);\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    // Trim them now in case they haven't been yet.  Not needed for all code-paths above but do it here.\n    for (int i = 0; i < fields.length; i++) {\n      fields[i] = fields[i].trim();\n    }\n    return fields;\n  }\n\n","sourceOld":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n          if (storedFieldName.matches(fieldRegex)) {\n            storedFieldsToHighlight.add(storedFieldName);\n          }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[storedFieldsToHighlight.size()]);\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    // Trim them now in case they haven't been yet.  Not needed for all code-paths above but do it here.\n    for (int i = 0; i < fields.length; i++) {\n      fields[i] = fields[i].trim();\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a9344cff6a72bc4c1ef080c69e10ad0635b811","date":1490410892,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programmatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getDocFetcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n          if (storedFieldName.matches(fieldRegex)) {\n            storedFieldsToHighlight.add(storedFieldName);\n          }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[storedFieldsToHighlight.size()]);\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    // Trim them now in case they haven't been yet.  Not needed for all code-paths above but do it here.\n    for (int i = 0; i < fields.length; i++) {\n      fields[i] = fields[i].trim();\n    }\n    return fields;\n  }\n\n","sourceOld":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programmatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n          if (storedFieldName.matches(fieldRegex)) {\n            storedFieldsToHighlight.add(storedFieldName);\n          }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[storedFieldsToHighlight.size()]);\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    // Trim them now in case they haven't been yet.  Not needed for all code-paths above but do it here.\n    for (int i = 0; i < fields.length; i++) {\n      fields[i] = fields[i].trim();\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":["f4fcd0bb2fc087796f9d5ea348f2fedf8521fdd9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"de548de3ce5405595899f548152d4b93ac9eb9cc","date":1490594650,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programmatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getDocFetcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n          if (storedFieldName.matches(fieldRegex)) {\n            storedFieldsToHighlight.add(storedFieldName);\n          }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[storedFieldsToHighlight.size()]);\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    // Trim them now in case they haven't been yet.  Not needed for all code-paths above but do it here.\n    for (int i = 0; i < fields.length; i++) {\n      fields[i] = fields[i].trim();\n    }\n    return fields;\n  }\n\n","sourceOld":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programmatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n          if (storedFieldName.matches(fieldRegex)) {\n            storedFieldsToHighlight.add(storedFieldName);\n          }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[storedFieldsToHighlight.size()]);\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    // Trim them now in case they haven't been yet.  Not needed for all code-paths above but do it here.\n    for (int i = 0; i < fields.length; i++) {\n      fields[i] = fields[i].trim();\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4fcd0bb2fc087796f9d5ea348f2fedf8521fdd9","date":1492601294,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programmatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      } else {\n        fields = defaultFields;\n      }\n    } else {\n      Set<String> expandedFields = new LinkedHashSet<String>();\n      Collection<String> storedHighlightFieldNames = request.getSearcher().getDocFetcher().getStoredHighlightFieldNames();\n      for (String field : fields) {\n        expandWildcardsInHighlightFields(\n            expandedFields,\n            storedHighlightFieldNames,\n            SolrPluginUtils.split(field));\n      }\n      fields = expandedFields.toArray(new String[]{});\n    }\n\n    // Trim them now in case they haven't been yet.  Not needed for all code-paths above but do it here.\n    for (int i = 0; i < fields.length; i++) {\n      fields[i] = fields[i].trim();\n    }\n    return fields;\n  }\n\n","sourceOld":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programmatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getDocFetcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n          if (storedFieldName.matches(fieldRegex)) {\n            storedFieldsToHighlight.add(storedFieldName);\n          }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[storedFieldsToHighlight.size()]);\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    // Trim them now in case they haven't been yet.  Not needed for all code-paths above but do it here.\n    for (int i = 0; i < fields.length; i++) {\n      fields[i] = fields[i].trim();\n    }\n    return fields;\n  }\n\n","bugFix":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","19be870dbbc5366138e3d1f4e6e038f2f5e167cd","63a9344cff6a72bc4c1ef080c69e10ad0635b811","a11ec658894eed204e77ed47f9ff29c3356d8099"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programmatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      } else {\n        fields = defaultFields;\n      }\n    } else {\n      Set<String> expandedFields = new LinkedHashSet<String>();\n      Collection<String> storedHighlightFieldNames = request.getSearcher().getDocFetcher().getStoredHighlightFieldNames();\n      for (String field : fields) {\n        expandWildcardsInHighlightFields(\n            expandedFields,\n            storedHighlightFieldNames,\n            SolrPluginUtils.split(field));\n      }\n      fields = expandedFields.toArray(new String[]{});\n    }\n\n    // Trim them now in case they haven't been yet.  Not needed for all code-paths above but do it here.\n    for (int i = 0; i < fields.length; i++) {\n      fields[i] = fields[i].trim();\n    }\n    return fields;\n  }\n\n","sourceOld":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programmatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      }\n      else {\n        fields = defaultFields;\n      }\n    }\n    else if (fields.length == 1) {\n      if (fields[0].contains(\"*\")) {\n        // create a Java regular expression from the wildcard string\n        String fieldRegex = fields[0].replaceAll(\"\\\\*\", \".*\");\n        Collection<String> storedHighlightFieldNames = request.getSearcher().getDocFetcher().getStoredHighlightFieldNames();\n        List<String> storedFieldsToHighlight = new ArrayList<>();\n        for (String storedFieldName: storedHighlightFieldNames) {\n          if (storedFieldName.matches(fieldRegex)) {\n            storedFieldsToHighlight.add(storedFieldName);\n          }\n        }\n        fields = storedFieldsToHighlight.toArray(new String[storedFieldsToHighlight.size()]);\n      } else {\n        // if there's a single request/handler value, it may be a space/comma separated list\n        fields = SolrPluginUtils.split(fields[0]);\n      }\n    }\n\n    // Trim them now in case they haven't been yet.  Not needed for all code-paths above but do it here.\n    for (int i = 0; i < fields.length; i++) {\n      fields[i] = fields[i].trim();\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d057970b5f9fcaabc49d2f54c59a5d2a09da1769","date":1495200448,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programmatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field from request if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getParams().get(CommonParams.DF);\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      } else {\n        fields = defaultFields;\n      }\n    } else {\n      Set<String> expandedFields = new LinkedHashSet<String>();\n      Collection<String> storedHighlightFieldNames = request.getSearcher().getDocFetcher().getStoredHighlightFieldNames();\n      for (String field : fields) {\n        expandWildcardsInHighlightFields(\n            expandedFields,\n            storedHighlightFieldNames,\n            SolrPluginUtils.split(field));\n      }\n      fields = expandedFields.toArray(new String[]{});\n    }\n\n    // Trim them now in case they haven't been yet.  Not needed for all code-paths above but do it here.\n    for (int i = 0; i < fields.length; i++) {\n      fields[i] = fields[i].trim();\n    }\n    return fields;\n  }\n\n","sourceOld":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programmatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      } else {\n        fields = defaultFields;\n      }\n    } else {\n      Set<String> expandedFields = new LinkedHashSet<String>();\n      Collection<String> storedHighlightFieldNames = request.getSearcher().getDocFetcher().getStoredHighlightFieldNames();\n      for (String field : fields) {\n        expandWildcardsInHighlightFields(\n            expandedFields,\n            storedHighlightFieldNames,\n            SolrPluginUtils.split(field));\n      }\n      fields = expandedFields.toArray(new String[]{});\n    }\n\n    // Trim them now in case they haven't been yet.  Not needed for all code-paths above but do it here.\n    for (int i = 0; i < fields.length; i++) {\n      fields[i] = fields[i].trim();\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/SolrHighlighter#getHighlightFields(Query,SolrQueryRequest,String[]).mjava","sourceNew":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programmatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field from request if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getParams().get(CommonParams.DF);\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      } else {\n        fields = defaultFields;\n      }\n    } else {\n      Set<String> expandedFields = new LinkedHashSet<String>();\n      Collection<String> storedHighlightFieldNames = request.getSearcher().getDocFetcher().getStoredHighlightFieldNames();\n      for (String field : fields) {\n        expandWildcardsInHighlightFields(\n            expandedFields,\n            storedHighlightFieldNames,\n            SolrPluginUtils.split(field));\n      }\n      fields = expandedFields.toArray(new String[]{});\n    }\n\n    // Trim them now in case they haven't been yet.  Not needed for all code-paths above but do it here.\n    for (int i = 0; i < fields.length; i++) {\n      fields[i] = fields[i].trim();\n    }\n    return fields;\n  }\n\n","sourceOld":"  /**\n   * Return a String array of the fields to be highlighted.\n   * Falls back to the programmatic defaults, or the default search field if the list of fields\n   * is not specified in either the handler configuration or the request.\n   * @param query The current Query\n   * @param request The current SolrQueryRequest\n   * @param defaultFields Programmatic default highlight fields, used if nothing is specified in the handler config or the request.\n   */\n  public String[] getHighlightFields(Query query, SolrQueryRequest request, String[] defaultFields) {\n    String fields[] = request.getParams().getParams(HighlightParams.FIELDS);\n\n    // if no fields specified in the request, or the handler, fall back to programmatic default, or default search field.\n    if(emptyArray(fields)) {\n      // use default search field if highlight fieldlist not specified.\n      if (emptyArray(defaultFields)) {\n        String defaultSearchField = request.getSchema().getDefaultSearchFieldName();\n        fields = null == defaultSearchField ? new String[]{} : new String[]{defaultSearchField};\n      } else {\n        fields = defaultFields;\n      }\n    } else {\n      Set<String> expandedFields = new LinkedHashSet<String>();\n      Collection<String> storedHighlightFieldNames = request.getSearcher().getDocFetcher().getStoredHighlightFieldNames();\n      for (String field : fields) {\n        expandWildcardsInHighlightFields(\n            expandedFields,\n            storedHighlightFieldNames,\n            SolrPluginUtils.split(field));\n      }\n      fields = expandedFields.toArray(new String[]{});\n    }\n\n    // Trim them now in case they haven't been yet.  Not needed for all code-paths above but do it here.\n    for (int i = 0; i < fields.length; i++) {\n      fields[i] = fields[i].trim();\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["de548de3ce5405595899f548152d4b93ac9eb9cc"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"de548de3ce5405595899f548152d4b93ac9eb9cc":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d057970b5f9fcaabc49d2f54c59a5d2a09da1769":["f4fcd0bb2fc087796f9d5ea348f2fedf8521fdd9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["19be870dbbc5366138e3d1f4e6e038f2f5e167cd","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["19be870dbbc5366138e3d1f4e6e038f2f5e167cd","0158ced21948b6626f733c1c42c1e18d94449789"],"19be870dbbc5366138e3d1f4e6e038f2f5e167cd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","d057970b5f9fcaabc49d2f54c59a5d2a09da1769"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4fcd0bb2fc087796f9d5ea348f2fedf8521fdd9":["63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d057970b5f9fcaabc49d2f54c59a5d2a09da1769"],"0158ced21948b6626f733c1c42c1e18d94449789":["19be870dbbc5366138e3d1f4e6e038f2f5e167cd"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19be870dbbc5366138e3d1f4e6e038f2f5e167cd"],"de548de3ce5405595899f548152d4b93ac9eb9cc":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["f4fcd0bb2fc087796f9d5ea348f2fedf8521fdd9"],"d057970b5f9fcaabc49d2f54c59a5d2a09da1769":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["de548de3ce5405595899f548152d4b93ac9eb9cc","63a9344cff6a72bc4c1ef080c69e10ad0635b811","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"19be870dbbc5366138e3d1f4e6e038f2f5e167cd":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f4fcd0bb2fc087796f9d5ea348f2fedf8521fdd9":["d057970b5f9fcaabc49d2f54c59a5d2a09da1769"],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}