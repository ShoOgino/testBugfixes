{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#getQueryDOA(String,Analyzer).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#getQueryDOA(String,Analyzer).mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#getQueryDOA(String,Analyzer).mjava","sourceNew":"  public Query getQueryDOA(String query, Analyzer a) throws Exception {\n    if (a == null)\n      a = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(a);\n    qp.setDefaultOperator(Operator.AND);\n\n    return qp.parse(query, \"field\");\n\n  }\n\n","sourceOld":"  public Query getQueryDOA(String query, Analyzer a) throws Exception {\n    if (a == null)\n      a = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(a);\n    qp.setDefaultOperator(Operator.AND);\n\n    return qp.parse(query, \"field\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7edb20114e86ec883b0b08bd624eee852c565c06","date":1273941247,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#getQueryDOA(String,Analyzer).mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#getQueryDOA(String,Analyzer).mjava","sourceNew":"  public Query getQueryDOA(String query, Analyzer a) throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(MockAnalyzer.SIMPLE, true);\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(a);\n    qp.setDefaultOperator(Operator.AND);\n\n    return qp.parse(query, \"field\");\n\n  }\n\n","sourceOld":"  public Query getQueryDOA(String query, Analyzer a) throws Exception {\n    if (a == null)\n      a = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(a);\n    qp.setDefaultOperator(Operator.AND);\n\n    return qp.parse(query, \"field\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ade882efb2f2235dafb176284c1e35dbdb1c126","date":1274043418,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#getQueryDOA(String,Analyzer).mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#getQueryDOA(String,Analyzer).mjava","sourceNew":"  public Query getQueryDOA(String query, Analyzer a) throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(MockTokenizer.SIMPLE, true);\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(a);\n    qp.setDefaultOperator(Operator.AND);\n\n    return qp.parse(query, \"field\");\n\n  }\n\n","sourceOld":"  public Query getQueryDOA(String query, Analyzer a) throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(MockAnalyzer.SIMPLE, true);\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(a);\n    qp.setDefaultOperator(Operator.AND);\n\n    return qp.parse(query, \"field\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#getQueryDOA(String,Analyzer).mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#getQueryDOA(String,Analyzer).mjava","sourceNew":"  public Query getQueryDOA(String query, Analyzer a) throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(a);\n    qp.setDefaultOperator(Operator.AND);\n\n    return qp.parse(query, \"field\");\n\n  }\n\n","sourceOld":"  public Query getQueryDOA(String query, Analyzer a) throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(MockTokenizer.SIMPLE, true);\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(a);\n    qp.setDefaultOperator(Operator.AND);\n\n    return qp.parse(query, \"field\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#getQueryDOA(String,Analyzer).mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#getQueryDOA(String,Analyzer).mjava","sourceNew":"  public Query getQueryDOA(String query, Analyzer a) throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(a);\n    qp.setDefaultOperator(Operator.AND);\n\n    return qp.parse(query, \"field\");\n\n  }\n\n","sourceOld":"  public Query getQueryDOA(String query, Analyzer a) throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(MockTokenizer.SIMPLE, true);\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(a);\n    qp.setDefaultOperator(Operator.AND);\n\n    return qp.parse(query, \"field\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#getQueryDOA(String,Analyzer).mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#getQueryDOA(String,Analyzer).mjava","sourceNew":"  public Query getQueryDOA(String query, Analyzer a) throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(a);\n    qp.setDefaultOperator(Operator.AND);\n\n    return qp.parse(query, \"field\");\n\n  }\n\n","sourceOld":"  public Query getQueryDOA(String query, Analyzer a) throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(MockTokenizer.SIMPLE, true);\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(a);\n    qp.setDefaultOperator(Operator.AND);\n\n    return qp.parse(query, \"field\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#getQueryDOA(String,Analyzer).mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#getQueryDOA(String,Analyzer).mjava","sourceNew":"  public Query getQueryDOA(String query, Analyzer a) throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(a);\n    qp.setDefaultOperator(Operator.AND);\n\n    return qp.parse(query, \"field\");\n\n  }\n\n","sourceOld":"  public Query getQueryDOA(String query, Analyzer a) throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(MockTokenizer.SIMPLE, true);\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(a);\n    qp.setDefaultOperator(Operator.AND);\n\n    return qp.parse(query, \"field\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c1fe1aedb70da4139fd9f2f7e92e572017fd083","date":1309827452,"type":3,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#getQueryDOA(String,Analyzer).mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#getQueryDOA(String,Analyzer).mjava","sourceNew":"  public Query getQueryDOA(String query, Analyzer a) throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(a);\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n\n    return qp.parse(query, \"field\");\n\n  }\n\n","sourceOld":"  public Query getQueryDOA(String query, Analyzer a) throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(a);\n    qp.setDefaultOperator(Operator.AND);\n\n    return qp.parse(query, \"field\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#getQueryDOA(String,Analyzer).mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#getQueryDOA(String,Analyzer).mjava","sourceNew":"  public Query getQueryDOA(String query, Analyzer a) throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(a);\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n\n    return qp.parse(query, \"field\");\n\n  }\n\n","sourceOld":"  public Query getQueryDOA(String query, Analyzer a) throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(a);\n    qp.setDefaultOperator(Operator.AND);\n\n    return qp.parse(query, \"field\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#getQueryDOA(String,Analyzer).mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#getQueryDOA(String,Analyzer).mjava","sourceNew":"  public Query getQueryDOA(String query, Analyzer a) throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(a);\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n\n    return qp.parse(query, \"field\");\n\n  }\n\n","sourceOld":"  public Query getQueryDOA(String query, Analyzer a) throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(a);\n    qp.setDefaultOperator(Operator.AND);\n\n    return qp.parse(query, \"field\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#getQueryDOA(String,Analyzer).mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#getQueryDOA(String,Analyzer).mjava","sourceNew":"  public Query getQueryDOA(String query, Analyzer a) throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(a);\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n\n    return qp.parse(query, \"field\");\n\n  }\n\n","sourceOld":"  public Query getQueryDOA(String query, Analyzer a) throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random, MockTokenizer.SIMPLE, true);\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(a);\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n\n    return qp.parse(query, \"field\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"7edb20114e86ec883b0b08bd624eee852c565c06":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2ade882efb2f2235dafb176284c1e35dbdb1c126","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["2ade882efb2f2235dafb176284c1e35dbdb1c126","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f2c5f0cb44df114db4228c8f77861714b5cabaea","2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","2c1fe1aedb70da4139fd9f2f7e92e572017fd083"],"2c1fe1aedb70da4139fd9f2f7e92e572017fd083":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["2ade882efb2f2235dafb176284c1e35dbdb1c126"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2ade882efb2f2235dafb176284c1e35dbdb1c126","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ade882efb2f2235dafb176284c1e35dbdb1c126":["7edb20114e86ec883b0b08bd624eee852c565c06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7edb20114e86ec883b0b08bd624eee852c565c06":["2ade882efb2f2235dafb176284c1e35dbdb1c126"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"2c1fe1aedb70da4139fd9f2f7e92e572017fd083":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","2c1fe1aedb70da4139fd9f2f7e92e572017fd083","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2ade882efb2f2235dafb176284c1e35dbdb1c126":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7edb20114e86ec883b0b08bd624eee852c565c06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}