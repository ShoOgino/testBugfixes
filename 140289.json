{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#verify(String,String).mjava","commits":[{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#verify(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void verify(String input, String output) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify input=\" + input + \" expectedOutput=\" + output);\n    }\n\n    tokensIn.reset(new StringReader(input));\n    tokensOut.reset();\n    final String[] expected = output.split(\" \");\n    int expectedUpto = 0;\n    while(tokensOut.incrementToken()) {\n\n      if (VERBOSE) {\n        System.out.println(\"  incr token=\" + termAtt.toString() + \" posIncr=\" + posIncrAtt.getPositionIncrement());\n      }\n\n      assertTrue(expectedUpto < expected.length);\n      final int startOffset = offsetAtt.startOffset();\n      final int endOffset = offsetAtt.endOffset();\n\n      final String[] expectedAtPos = expected[expectedUpto++].split(\"/\");\n      for(int atPos=0;atPos<expectedAtPos.length;atPos++) {\n        if (atPos > 0) {\n          assertTrue(tokensOut.incrementToken());\n          if (VERBOSE) {\n            System.out.println(\"  incr token=\" + termAtt.toString() + \" posIncr=\" + posIncrAtt.getPositionIncrement());\n          }\n        }\n        assertEquals(termAtt, expectedAtPos[atPos]);\n        assertEquals(atPos == 0 ? 1 : 0,\n                     posIncrAtt.getPositionIncrement());\n        // start/end offset of all tokens at same pos should\n        // be the same:\n        assertEquals(startOffset, offsetAtt.startOffset());\n        assertEquals(endOffset, offsetAtt.endOffset());\n      }\n    }\n    tokensOut.end();\n    tokensOut.close();\n    if (VERBOSE) {\n      System.out.println(\"  incr: END\");\n    }\n    assertEquals(expectedUpto, expected.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["865b7d0f8430a08d385370b6b87a89a737aa6145"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"de11853c992f764e52d4164cc9afdebb989dba8a","date":1313510465,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#verify(String,String).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#verify(String,String).mjava","sourceNew":"  // todo: we should probably refactor this guy to use/take analyzer,\n  // the tests are a little messy\n  private void verify(String input, String output) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify input=\" + input + \" expectedOutput=\" + output);\n    }\n\n    tokensIn.reset(new StringReader(input));\n    tokensOut.reset();\n    final String[] expected = output.split(\" \");\n    int expectedUpto = 0;\n    while(tokensOut.incrementToken()) {\n\n      if (VERBOSE) {\n        System.out.println(\"  incr token=\" + termAtt.toString() + \" posIncr=\" + posIncrAtt.getPositionIncrement());\n      }\n\n      assertTrue(expectedUpto < expected.length);\n      final int startOffset = offsetAtt.startOffset();\n      final int endOffset = offsetAtt.endOffset();\n\n      final String[] expectedAtPos = expected[expectedUpto++].split(\"/\");\n      for(int atPos=0;atPos<expectedAtPos.length;atPos++) {\n        if (atPos > 0) {\n          assertTrue(tokensOut.incrementToken());\n          if (VERBOSE) {\n            System.out.println(\"  incr token=\" + termAtt.toString() + \" posIncr=\" + posIncrAtt.getPositionIncrement());\n          }\n        }\n        assertEquals(termAtt, expectedAtPos[atPos]);\n        assertEquals(atPos == 0 ? 1 : 0,\n                     posIncrAtt.getPositionIncrement());\n        // start/end offset of all tokens at same pos should\n        // be the same:\n        assertEquals(startOffset, offsetAtt.startOffset());\n        assertEquals(endOffset, offsetAtt.endOffset());\n      }\n    }\n    tokensOut.end();\n    tokensOut.close();\n    if (VERBOSE) {\n      System.out.println(\"  incr: END\");\n    }\n    assertEquals(expectedUpto, expected.length);\n  }\n\n","sourceOld":"  private void verify(String input, String output) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify input=\" + input + \" expectedOutput=\" + output);\n    }\n\n    tokensIn.reset(new StringReader(input));\n    tokensOut.reset();\n    final String[] expected = output.split(\" \");\n    int expectedUpto = 0;\n    while(tokensOut.incrementToken()) {\n\n      if (VERBOSE) {\n        System.out.println(\"  incr token=\" + termAtt.toString() + \" posIncr=\" + posIncrAtt.getPositionIncrement());\n      }\n\n      assertTrue(expectedUpto < expected.length);\n      final int startOffset = offsetAtt.startOffset();\n      final int endOffset = offsetAtt.endOffset();\n\n      final String[] expectedAtPos = expected[expectedUpto++].split(\"/\");\n      for(int atPos=0;atPos<expectedAtPos.length;atPos++) {\n        if (atPos > 0) {\n          assertTrue(tokensOut.incrementToken());\n          if (VERBOSE) {\n            System.out.println(\"  incr token=\" + termAtt.toString() + \" posIncr=\" + posIncrAtt.getPositionIncrement());\n          }\n        }\n        assertEquals(termAtt, expectedAtPos[atPos]);\n        assertEquals(atPos == 0 ? 1 : 0,\n                     posIncrAtt.getPositionIncrement());\n        // start/end offset of all tokens at same pos should\n        // be the same:\n        assertEquals(startOffset, offsetAtt.startOffset());\n        assertEquals(endOffset, offsetAtt.endOffset());\n      }\n    }\n    tokensOut.end();\n    tokensOut.close();\n    if (VERBOSE) {\n      System.out.println(\"  incr: END\");\n    }\n    assertEquals(expectedUpto, expected.length);\n  }\n\n","bugFix":null,"bugIntro":["865b7d0f8430a08d385370b6b87a89a737aa6145"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"865b7d0f8430a08d385370b6b87a89a737aa6145","date":1325953575,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#verify(String,String).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#verify(String,String).mjava","sourceNew":"  // TODO: we should probably refactor this guy to use/take analyzer,\n  // the tests are a little messy\n  private void verify(String input, String output) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify input=\" + input + \" expectedOutput=\" + output);\n    }\n\n    tokensIn.reset(new StringReader(input));\n    tokensOut.reset();\n    final String[] expected = output.split(\" \");\n    int expectedUpto = 0;\n    while(tokensOut.incrementToken()) {\n\n      if (VERBOSE) {\n        System.out.println(\"  incr token=\" + termAtt.toString() + \" posIncr=\" + posIncrAtt.getPositionIncrement() + \" startOff=\" + offsetAtt.startOffset() + \" endOff=\" + offsetAtt.endOffset());\n      }\n\n      assertTrue(expectedUpto < expected.length);\n      final int startOffset = offsetAtt.startOffset();\n      final int endOffset = offsetAtt.endOffset();\n\n      final String[] expectedAtPos = expected[expectedUpto++].split(\"/\");\n      for(int atPos=0;atPos<expectedAtPos.length;atPos++) {\n        if (atPos > 0) {\n          assertTrue(tokensOut.incrementToken());\n          if (VERBOSE) {\n            System.out.println(\"  incr token=\" + termAtt.toString() + \" posIncr=\" + posIncrAtt.getPositionIncrement() + \" startOff=\" + offsetAtt.startOffset() + \" endOff=\" + offsetAtt.endOffset());\n          }\n        }\n        final int colonIndex = expectedAtPos[atPos].indexOf(':');\n        final String expectedToken;\n        final int expectedEndOffset;\n        if (colonIndex != -1) {\n          expectedToken = expectedAtPos[atPos].substring(0, colonIndex);\n          expectedEndOffset = Integer.parseInt(expectedAtPos[atPos].substring(1+colonIndex));\n        } else {\n          expectedToken = expectedAtPos[atPos];\n          expectedEndOffset = endOffset;\n        }\n        assertEquals(expectedToken, termAtt.toString());\n        assertEquals(atPos == 0 ? 1 : 0,\n                     posIncrAtt.getPositionIncrement());\n        // start/end offset of all tokens at same pos should\n        // be the same:\n        assertEquals(startOffset, offsetAtt.startOffset());\n        assertEquals(expectedEndOffset, offsetAtt.endOffset());\n      }\n    }\n    tokensOut.end();\n    tokensOut.close();\n    if (VERBOSE) {\n      System.out.println(\"  incr: END\");\n    }\n    assertEquals(expectedUpto, expected.length);\n  }\n\n","sourceOld":"  // todo: we should probably refactor this guy to use/take analyzer,\n  // the tests are a little messy\n  private void verify(String input, String output) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify input=\" + input + \" expectedOutput=\" + output);\n    }\n\n    tokensIn.reset(new StringReader(input));\n    tokensOut.reset();\n    final String[] expected = output.split(\" \");\n    int expectedUpto = 0;\n    while(tokensOut.incrementToken()) {\n\n      if (VERBOSE) {\n        System.out.println(\"  incr token=\" + termAtt.toString() + \" posIncr=\" + posIncrAtt.getPositionIncrement());\n      }\n\n      assertTrue(expectedUpto < expected.length);\n      final int startOffset = offsetAtt.startOffset();\n      final int endOffset = offsetAtt.endOffset();\n\n      final String[] expectedAtPos = expected[expectedUpto++].split(\"/\");\n      for(int atPos=0;atPos<expectedAtPos.length;atPos++) {\n        if (atPos > 0) {\n          assertTrue(tokensOut.incrementToken());\n          if (VERBOSE) {\n            System.out.println(\"  incr token=\" + termAtt.toString() + \" posIncr=\" + posIncrAtt.getPositionIncrement());\n          }\n        }\n        assertEquals(termAtt, expectedAtPos[atPos]);\n        assertEquals(atPos == 0 ? 1 : 0,\n                     posIncrAtt.getPositionIncrement());\n        // start/end offset of all tokens at same pos should\n        // be the same:\n        assertEquals(startOffset, offsetAtt.startOffset());\n        assertEquals(endOffset, offsetAtt.endOffset());\n      }\n    }\n    tokensOut.end();\n    tokensOut.close();\n    if (VERBOSE) {\n      System.out.println(\"  incr: END\");\n    }\n    assertEquals(expectedUpto, expected.length);\n  }\n\n","bugFix":["de11853c992f764e52d4164cc9afdebb989dba8a","44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffbcd36aff3bb411177ed61f02fb3d3aa9588d27","date":1333918532,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#verify(String,String).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#verify(String,String).mjava","sourceNew":"  // TODO: we should probably refactor this guy to use/take analyzer,\n  // the tests are a little messy\n  private void verify(String input, String output) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify input=\" + input + \" expectedOutput=\" + output);\n    }\n\n    tokensIn.reset(new StringReader(input));\n    tokensOut.reset();\n    final String[] expected = output.split(\" \");\n    int expectedUpto = 0;\n    while(tokensOut.incrementToken()) {\n\n      if (VERBOSE) {\n        System.out.println(\"  incr token=\" + termAtt.toString() + \" posIncr=\" + posIncrAtt.getPositionIncrement() + \" startOff=\" + offsetAtt.startOffset() + \" endOff=\" + offsetAtt.endOffset());\n      }\n\n      assertTrue(expectedUpto < expected.length);\n      final int startOffset = offsetAtt.startOffset();\n      final int endOffset = offsetAtt.endOffset();\n\n      final String[] expectedAtPos = expected[expectedUpto++].split(\"/\");\n      for(int atPos=0;atPos<expectedAtPos.length;atPos++) {\n        if (atPos > 0) {\n          assertTrue(tokensOut.incrementToken());\n          if (VERBOSE) {\n            System.out.println(\"  incr token=\" + termAtt.toString() + \" posIncr=\" + posIncrAtt.getPositionIncrement() + \" startOff=\" + offsetAtt.startOffset() + \" endOff=\" + offsetAtt.endOffset());\n          }\n        }\n        final int colonIndex = expectedAtPos[atPos].indexOf(':');\n        final int underbarIndex = expectedAtPos[atPos].indexOf('_');\n        final String expectedToken;\n        final int expectedEndOffset;\n        final int expectedPosLen;\n        if (colonIndex != -1) {\n          expectedToken = expectedAtPos[atPos].substring(0, colonIndex);\n          if (underbarIndex != -1) {\n            expectedEndOffset = Integer.parseInt(expectedAtPos[atPos].substring(1+colonIndex, underbarIndex));\n            expectedPosLen = Integer.parseInt(expectedAtPos[atPos].substring(1+underbarIndex));\n          } else {\n            expectedEndOffset = Integer.parseInt(expectedAtPos[atPos].substring(1+colonIndex));\n            expectedPosLen = 1;\n          }\n        } else {\n          expectedToken = expectedAtPos[atPos];\n          expectedEndOffset = endOffset;\n          expectedPosLen = 1;\n        }\n        assertEquals(expectedToken, termAtt.toString());\n        assertEquals(atPos == 0 ? 1 : 0,\n                     posIncrAtt.getPositionIncrement());\n        // start/end offset of all tokens at same pos should\n        // be the same:\n        assertEquals(startOffset, offsetAtt.startOffset());\n        assertEquals(expectedEndOffset, offsetAtt.endOffset());\n        assertEquals(expectedPosLen, posLenAtt.getPositionLength());\n      }\n    }\n    tokensOut.end();\n    tokensOut.close();\n    if (VERBOSE) {\n      System.out.println(\"  incr: END\");\n    }\n    assertEquals(expectedUpto, expected.length);\n  }\n\n","sourceOld":"  // TODO: we should probably refactor this guy to use/take analyzer,\n  // the tests are a little messy\n  private void verify(String input, String output) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify input=\" + input + \" expectedOutput=\" + output);\n    }\n\n    tokensIn.reset(new StringReader(input));\n    tokensOut.reset();\n    final String[] expected = output.split(\" \");\n    int expectedUpto = 0;\n    while(tokensOut.incrementToken()) {\n\n      if (VERBOSE) {\n        System.out.println(\"  incr token=\" + termAtt.toString() + \" posIncr=\" + posIncrAtt.getPositionIncrement() + \" startOff=\" + offsetAtt.startOffset() + \" endOff=\" + offsetAtt.endOffset());\n      }\n\n      assertTrue(expectedUpto < expected.length);\n      final int startOffset = offsetAtt.startOffset();\n      final int endOffset = offsetAtt.endOffset();\n\n      final String[] expectedAtPos = expected[expectedUpto++].split(\"/\");\n      for(int atPos=0;atPos<expectedAtPos.length;atPos++) {\n        if (atPos > 0) {\n          assertTrue(tokensOut.incrementToken());\n          if (VERBOSE) {\n            System.out.println(\"  incr token=\" + termAtt.toString() + \" posIncr=\" + posIncrAtt.getPositionIncrement() + \" startOff=\" + offsetAtt.startOffset() + \" endOff=\" + offsetAtt.endOffset());\n          }\n        }\n        final int colonIndex = expectedAtPos[atPos].indexOf(':');\n        final String expectedToken;\n        final int expectedEndOffset;\n        if (colonIndex != -1) {\n          expectedToken = expectedAtPos[atPos].substring(0, colonIndex);\n          expectedEndOffset = Integer.parseInt(expectedAtPos[atPos].substring(1+colonIndex));\n        } else {\n          expectedToken = expectedAtPos[atPos];\n          expectedEndOffset = endOffset;\n        }\n        assertEquals(expectedToken, termAtt.toString());\n        assertEquals(atPos == 0 ? 1 : 0,\n                     posIncrAtt.getPositionIncrement());\n        // start/end offset of all tokens at same pos should\n        // be the same:\n        assertEquals(startOffset, offsetAtt.startOffset());\n        assertEquals(expectedEndOffset, offsetAtt.endOffset());\n      }\n    }\n    tokensOut.end();\n    tokensOut.close();\n    if (VERBOSE) {\n      System.out.println(\"  incr: END\");\n    }\n    assertEquals(expectedUpto, expected.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#verify(String,String).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#verify(String,String).mjava","sourceNew":"  // TODO: we should probably refactor this guy to use/take analyzer,\n  // the tests are a little messy\n  private void verify(String input, String output) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify input=\" + input + \" expectedOutput=\" + output);\n    }\n\n    tokensIn.reset(new StringReader(input));\n    tokensOut.reset();\n    final String[] expected = output.split(\" \");\n    int expectedUpto = 0;\n    while(tokensOut.incrementToken()) {\n\n      if (VERBOSE) {\n        System.out.println(\"  incr token=\" + termAtt.toString() + \" posIncr=\" + posIncrAtt.getPositionIncrement() + \" startOff=\" + offsetAtt.startOffset() + \" endOff=\" + offsetAtt.endOffset());\n      }\n\n      assertTrue(expectedUpto < expected.length);\n      final int startOffset = offsetAtt.startOffset();\n      final int endOffset = offsetAtt.endOffset();\n\n      final String[] expectedAtPos = expected[expectedUpto++].split(\"/\");\n      for(int atPos=0;atPos<expectedAtPos.length;atPos++) {\n        if (atPos > 0) {\n          assertTrue(tokensOut.incrementToken());\n          if (VERBOSE) {\n            System.out.println(\"  incr token=\" + termAtt.toString() + \" posIncr=\" + posIncrAtt.getPositionIncrement() + \" startOff=\" + offsetAtt.startOffset() + \" endOff=\" + offsetAtt.endOffset());\n          }\n        }\n        final int colonIndex = expectedAtPos[atPos].indexOf(':');\n        final int underbarIndex = expectedAtPos[atPos].indexOf('_');\n        final String expectedToken;\n        final int expectedEndOffset;\n        final int expectedPosLen;\n        if (colonIndex != -1) {\n          expectedToken = expectedAtPos[atPos].substring(0, colonIndex);\n          if (underbarIndex != -1) {\n            expectedEndOffset = Integer.parseInt(expectedAtPos[atPos].substring(1+colonIndex, underbarIndex));\n            expectedPosLen = Integer.parseInt(expectedAtPos[atPos].substring(1+underbarIndex));\n          } else {\n            expectedEndOffset = Integer.parseInt(expectedAtPos[atPos].substring(1+colonIndex));\n            expectedPosLen = 1;\n          }\n        } else {\n          expectedToken = expectedAtPos[atPos];\n          expectedEndOffset = endOffset;\n          expectedPosLen = 1;\n        }\n        assertEquals(expectedToken, termAtt.toString());\n        assertEquals(atPos == 0 ? 1 : 0,\n                     posIncrAtt.getPositionIncrement());\n        // start/end offset of all tokens at same pos should\n        // be the same:\n        assertEquals(startOffset, offsetAtt.startOffset());\n        assertEquals(expectedEndOffset, offsetAtt.endOffset());\n        assertEquals(expectedPosLen, posLenAtt.getPositionLength());\n      }\n    }\n    tokensOut.end();\n    tokensOut.close();\n    if (VERBOSE) {\n      System.out.println(\"  incr: END\");\n    }\n    assertEquals(expectedUpto, expected.length);\n  }\n\n","sourceOld":"  // TODO: we should probably refactor this guy to use/take analyzer,\n  // the tests are a little messy\n  private void verify(String input, String output) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify input=\" + input + \" expectedOutput=\" + output);\n    }\n\n    tokensIn.reset(new StringReader(input));\n    tokensOut.reset();\n    final String[] expected = output.split(\" \");\n    int expectedUpto = 0;\n    while(tokensOut.incrementToken()) {\n\n      if (VERBOSE) {\n        System.out.println(\"  incr token=\" + termAtt.toString() + \" posIncr=\" + posIncrAtt.getPositionIncrement() + \" startOff=\" + offsetAtt.startOffset() + \" endOff=\" + offsetAtt.endOffset());\n      }\n\n      assertTrue(expectedUpto < expected.length);\n      final int startOffset = offsetAtt.startOffset();\n      final int endOffset = offsetAtt.endOffset();\n\n      final String[] expectedAtPos = expected[expectedUpto++].split(\"/\");\n      for(int atPos=0;atPos<expectedAtPos.length;atPos++) {\n        if (atPos > 0) {\n          assertTrue(tokensOut.incrementToken());\n          if (VERBOSE) {\n            System.out.println(\"  incr token=\" + termAtt.toString() + \" posIncr=\" + posIncrAtt.getPositionIncrement() + \" startOff=\" + offsetAtt.startOffset() + \" endOff=\" + offsetAtt.endOffset());\n          }\n        }\n        final int colonIndex = expectedAtPos[atPos].indexOf(':');\n        final int underbarIndex = expectedAtPos[atPos].indexOf('_');\n        final String expectedToken;\n        final int expectedEndOffset;\n        final int expectedPosLen;\n        if (colonIndex != -1) {\n          expectedToken = expectedAtPos[atPos].substring(0, colonIndex);\n          if (underbarIndex != -1) {\n            expectedEndOffset = Integer.parseInt(expectedAtPos[atPos].substring(1+colonIndex, underbarIndex));\n            expectedPosLen = Integer.parseInt(expectedAtPos[atPos].substring(1+underbarIndex));\n          } else {\n            expectedEndOffset = Integer.parseInt(expectedAtPos[atPos].substring(1+colonIndex));\n            expectedPosLen = 1;\n          }\n        } else {\n          expectedToken = expectedAtPos[atPos];\n          expectedEndOffset = endOffset;\n          expectedPosLen = 1;\n        }\n        assertEquals(expectedToken, termAtt.toString());\n        assertEquals(atPos == 0 ? 1 : 0,\n                     posIncrAtt.getPositionIncrement());\n        // start/end offset of all tokens at same pos should\n        // be the same:\n        assertEquals(startOffset, offsetAtt.startOffset());\n        assertEquals(expectedEndOffset, offsetAtt.endOffset());\n        assertEquals(expectedPosLen, posLenAtt.getPositionLength());\n      }\n    }\n    tokensOut.end();\n    tokensOut.close();\n    if (VERBOSE) {\n      System.out.println(\"  incr: END\");\n    }\n    assertEquals(expectedUpto, expected.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ffbcd36aff3bb411177ed61f02fb3d3aa9588d27"],"865b7d0f8430a08d385370b6b87a89a737aa6145":["de11853c992f764e52d4164cc9afdebb989dba8a"],"de11853c992f764e52d4164cc9afdebb989dba8a":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"ffbcd36aff3bb411177ed61f02fb3d3aa9588d27":["865b7d0f8430a08d385370b6b87a89a737aa6145"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"865b7d0f8430a08d385370b6b87a89a737aa6145":["ffbcd36aff3bb411177ed61f02fb3d3aa9588d27"],"de11853c992f764e52d4164cc9afdebb989dba8a":["865b7d0f8430a08d385370b6b87a89a737aa6145"],"ffbcd36aff3bb411177ed61f02fb3d3aa9588d27":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["de11853c992f764e52d4164cc9afdebb989dba8a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}