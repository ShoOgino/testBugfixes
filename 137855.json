{"path":"solr/core/src/java/org/apache/solr/core/SolrCores#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","commits":[{"id":"9409650933cc688e77e565092a25e58adfc2e18d","date":1366663164,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    final int transientCacheSize = cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (modifyLock) {\n              pendingCloses.add(eldest.getValue()); // Essentially just queue this core up for closing.\n              modifyLock.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    final int transientCacheSize = cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (locker) {\n              pendingCloses.add(eldest.getValue()); // Essentially just queue this core up for closing.\n              locker.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    final int transientCacheSize = cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (modifyLock) {\n              SolrCore coreToClose = eldest.getValue();\n              logger.info(\"Closing transient core [{}]\", coreToClose.getName());\n              pendingCloses.add(coreToClose); // Essentially just queue this core up for closing.\n              modifyLock.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    final int transientCacheSize = cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (modifyLock) {\n              pendingCloses.add(eldest.getValue()); // Essentially just queue this core up for closing.\n              modifyLock.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":["275019a81d0883a1db4560391b072d1fbe272ec4","275019a81d0883a1db4560391b072d1fbe272ec4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    final int transientCacheSize = cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (modifyLock) {\n              SolrCore coreToClose = eldest.getValue();\n              logger.info(\"Closing transient core [{}]\", coreToClose.getName());\n              pendingCloses.add(coreToClose); // Essentially just queue this core up for closing.\n              modifyLock.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    final int transientCacheSize = cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (modifyLock) {\n              pendingCloses.add(eldest.getValue()); // Essentially just queue this core up for closing.\n              modifyLock.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92a4da96826f502cf1a56a096929b37ce73e523a","date":1374584011,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#allocateLazyCores(int,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final int cacheSize, final SolrResourceLoader loader) {\n    if (cacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", cacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(cacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > cacheSize) {\n            synchronized (modifyLock) {\n              SolrCore coreToClose = eldest.getValue();\n              logger.info(\"Closing transient core [{}]\", coreToClose.getName());\n              pendingCloses.add(coreToClose); // Essentially just queue this core up for closing.\n              modifyLock.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    final int transientCacheSize = cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (modifyLock) {\n              SolrCore coreToClose = eldest.getValue();\n              logger.info(\"Closing transient core [{}]\", coreToClose.getName());\n              pendingCloses.add(coreToClose); // Essentially just queue this core up for closing.\n              modifyLock.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":5,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#allocateLazyCores(int,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final int cacheSize, final SolrResourceLoader loader) {\n    if (cacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", cacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(cacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > cacheSize) {\n            synchronized (modifyLock) {\n              SolrCore coreToClose = eldest.getValue();\n              logger.info(\"Closing transient core [{}]\", coreToClose.getName());\n              pendingCloses.add(coreToClose); // Essentially just queue this core up for closing.\n              modifyLock.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    final int transientCacheSize = cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (modifyLock) {\n              SolrCore coreToClose = eldest.getValue();\n              logger.info(\"Closing transient core [{}]\", coreToClose.getName());\n              pendingCloses.add(coreToClose); // Essentially just queue this core up for closing.\n              modifyLock.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["37a0f60745e53927c4c876cfe5b5a58170f0646c","92a4da96826f502cf1a56a096929b37ce73e523a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["9409650933cc688e77e565092a25e58adfc2e18d","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"9409650933cc688e77e565092a25e58adfc2e18d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"92a4da96826f502cf1a56a096929b37ce73e523a":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["9409650933cc688e77e565092a25e58adfc2e18d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92a4da96826f502cf1a56a096929b37ce73e523a"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"9409650933cc688e77e565092a25e58adfc2e18d":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"92a4da96826f502cf1a56a096929b37ce73e523a":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9409650933cc688e77e565092a25e58adfc2e18d"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","92a4da96826f502cf1a56a096929b37ce73e523a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}