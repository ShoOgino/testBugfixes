{"path":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#runFlushByRam(int,double,boolean).mjava","commits":[{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#runFlushByRam(int,double,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected void runFlushByRam(int numThreads, double maxRam,\n      boolean ensureNotStalled) throws IOException, CorruptIndexException,\n      LockObtainFailedException, InterruptedException {\n    final int numDocumentsToIndex = 50 + random.nextInt(150);\n    AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n    Directory dir = newDirectory();\n    MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setFlushPolicy(flushPolicy);\n\n    final int numDWPT = 1 + random.nextInt(8);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    iwc.setRAMBufferSizeMB(1 + random.nextInt(10) + random.nextDouble());\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertFalse(flushPolicy.flushOnDocCount());\n    assertFalse(flushPolicy.flushOnDeleteTerms());\n    assertTrue(flushPolicy.flushOnRAM());\n    DocumentsWriter docsWriter = writer.getDocsWriter();\n    assertNotNull(docsWriter);\n    DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n    assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n    IndexThread[] threads = new IndexThread[numThreads];\n    for (int x = 0; x < threads.length; x++) {\n      threads[x] = new IndexThread(numDocs, numThreads, writer, lineDocFile,\n          false);\n      threads[x].start();\n    }\n\n    for (int x = 0; x < threads.length; x++) {\n      threads[x].join();\n    }\n    final long maxRAMBytes = (long) (iwc.getRAMBufferSizeMB() * 1024. * 1024.);\n    assertEquals(\" all flushes must be due numThreads=\" + numThreads, 0,\n        flushControl.flushBytes());\n    assertEquals(numDocumentsToIndex, writer.numDocs());\n    assertEquals(numDocumentsToIndex, writer.maxDoc());\n    assertTrue(\"peak bytes without flush exceeded watermark\",\n        flushPolicy.peakBytesWithoutFlush <= maxRAMBytes);\n    assertActiveBytesAfter(flushControl);\n    if (flushPolicy.hasMarkedPending) {\n      assertTrue(maxRAMBytes < flushControl.peakActiveBytes);\n    }\n    if (ensureNotStalled) {\n      assertFalse(docsWriter.healthiness.wasStalled);\n    }\n    writer.close();\n    assertEquals(0, flushControl.activeBytes());\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","32f306edd62f81390a6e263e8b913f089f3e98a1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#runFlushByRam(int,double,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#runFlushByRam(int,double,boolean).mjava","sourceNew":"  protected void runFlushByRam(int numThreads, double maxRam,\n      boolean ensureNotStalled) throws IOException, CorruptIndexException,\n      LockObtainFailedException, InterruptedException {\n    final int numDocumentsToIndex = 50 + random.nextInt(150);\n    AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n    Directory dir = newDirectory();\n    MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setFlushPolicy(flushPolicy);\n\n    final int numDWPT = 1 + random.nextInt(8);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    iwc.setRAMBufferSizeMB(1 + random.nextInt(10) + random.nextDouble());\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertFalse(flushPolicy.flushOnDocCount());\n    assertFalse(flushPolicy.flushOnDeleteTerms());\n    assertTrue(flushPolicy.flushOnRAM());\n    DocumentsWriter docsWriter = writer.getDocsWriter();\n    assertNotNull(docsWriter);\n    DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n    assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n    IndexThread[] threads = new IndexThread[numThreads];\n    for (int x = 0; x < threads.length; x++) {\n      threads[x] = new IndexThread(numDocs, numThreads, writer, lineDocFile,\n          false);\n      threads[x].start();\n    }\n\n    for (int x = 0; x < threads.length; x++) {\n      threads[x].join();\n    }\n    final long maxRAMBytes = (long) (iwc.getRAMBufferSizeMB() * 1024. * 1024.);\n    assertEquals(\" all flushes must be due numThreads=\" + numThreads, 0,\n        flushControl.flushBytes());\n    assertEquals(numDocumentsToIndex, writer.numDocs());\n    assertEquals(numDocumentsToIndex, writer.maxDoc());\n    assertTrue(\"peak bytes without flush exceeded watermark\",\n        flushPolicy.peakBytesWithoutFlush <= maxRAMBytes);\n    assertActiveBytesAfter(flushControl);\n    if (flushPolicy.hasMarkedPending) {\n      assertTrue(maxRAMBytes < flushControl.peakActiveBytes);\n    }\n    if (ensureNotStalled) {\n      assertFalse(docsWriter.healthiness.wasStalled);\n    }\n    writer.close();\n    assertEquals(0, flushControl.activeBytes());\n    dir.close();\n  }\n\n","sourceOld":"  protected void runFlushByRam(int numThreads, double maxRam,\n      boolean ensureNotStalled) throws IOException, CorruptIndexException,\n      LockObtainFailedException, InterruptedException {\n    final int numDocumentsToIndex = 50 + random.nextInt(150);\n    AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n    Directory dir = newDirectory();\n    MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setFlushPolicy(flushPolicy);\n\n    final int numDWPT = 1 + random.nextInt(8);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    iwc.setRAMBufferSizeMB(1 + random.nextInt(10) + random.nextDouble());\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertFalse(flushPolicy.flushOnDocCount());\n    assertFalse(flushPolicy.flushOnDeleteTerms());\n    assertTrue(flushPolicy.flushOnRAM());\n    DocumentsWriter docsWriter = writer.getDocsWriter();\n    assertNotNull(docsWriter);\n    DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n    assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n    IndexThread[] threads = new IndexThread[numThreads];\n    for (int x = 0; x < threads.length; x++) {\n      threads[x] = new IndexThread(numDocs, numThreads, writer, lineDocFile,\n          false);\n      threads[x].start();\n    }\n\n    for (int x = 0; x < threads.length; x++) {\n      threads[x].join();\n    }\n    final long maxRAMBytes = (long) (iwc.getRAMBufferSizeMB() * 1024. * 1024.);\n    assertEquals(\" all flushes must be due numThreads=\" + numThreads, 0,\n        flushControl.flushBytes());\n    assertEquals(numDocumentsToIndex, writer.numDocs());\n    assertEquals(numDocumentsToIndex, writer.maxDoc());\n    assertTrue(\"peak bytes without flush exceeded watermark\",\n        flushPolicy.peakBytesWithoutFlush <= maxRAMBytes);\n    assertActiveBytesAfter(flushControl);\n    if (flushPolicy.hasMarkedPending) {\n      assertTrue(maxRAMBytes < flushControl.peakActiveBytes);\n    }\n    if (ensureNotStalled) {\n      assertFalse(docsWriter.healthiness.wasStalled);\n    }\n    writer.close();\n    assertEquals(0, flushControl.activeBytes());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#runFlushByRam(int,double,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected void runFlushByRam(int numThreads, double maxRam,\n      boolean ensureNotStalled) throws IOException, CorruptIndexException,\n      LockObtainFailedException, InterruptedException {\n    final int numDocumentsToIndex = 50 + random.nextInt(150);\n    AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n    Directory dir = newDirectory();\n    MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setFlushPolicy(flushPolicy);\n\n    final int numDWPT = 1 + random.nextInt(8);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    iwc.setRAMBufferSizeMB(1 + random.nextInt(10) + random.nextDouble());\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertFalse(flushPolicy.flushOnDocCount());\n    assertFalse(flushPolicy.flushOnDeleteTerms());\n    assertTrue(flushPolicy.flushOnRAM());\n    DocumentsWriter docsWriter = writer.getDocsWriter();\n    assertNotNull(docsWriter);\n    DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n    assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n    IndexThread[] threads = new IndexThread[numThreads];\n    for (int x = 0; x < threads.length; x++) {\n      threads[x] = new IndexThread(numDocs, numThreads, writer, lineDocFile,\n          false);\n      threads[x].start();\n    }\n\n    for (int x = 0; x < threads.length; x++) {\n      threads[x].join();\n    }\n    final long maxRAMBytes = (long) (iwc.getRAMBufferSizeMB() * 1024. * 1024.);\n    assertEquals(\" all flushes must be due numThreads=\" + numThreads, 0,\n        flushControl.flushBytes());\n    assertEquals(numDocumentsToIndex, writer.numDocs());\n    assertEquals(numDocumentsToIndex, writer.maxDoc());\n    assertTrue(\"peak bytes without flush exceeded watermark\",\n        flushPolicy.peakBytesWithoutFlush <= maxRAMBytes);\n    assertActiveBytesAfter(flushControl);\n    if (flushPolicy.hasMarkedPending) {\n      assertTrue(maxRAMBytes < flushControl.peakActiveBytes);\n    }\n    if (ensureNotStalled) {\n      assertFalse(docsWriter.healthiness.wasStalled);\n    }\n    writer.close();\n    assertEquals(0, flushControl.activeBytes());\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b48631cad04355b1145531265cf87a095299e14","date":1304320797,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#runFlushByRam(int,double,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#runFlushByRam(int,double,boolean).mjava","sourceNew":"  protected void runFlushByRam(int numThreads, double maxRamMB,\n      boolean ensureNotStalled) throws IOException, CorruptIndexException,\n      LockObtainFailedException, InterruptedException {\n    final int numDocumentsToIndex = 50 + random.nextInt(150);\n    AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n    Directory dir = newDirectory();\n    MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setFlushPolicy(flushPolicy);\n    final int numDWPT = 1 + random.nextInt(8);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    iwc.setRAMBufferSizeMB(maxRamMB);\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertFalse(flushPolicy.flushOnDocCount());\n    assertFalse(flushPolicy.flushOnDeleteTerms());\n    assertTrue(flushPolicy.flushOnRAM());\n    DocumentsWriter docsWriter = writer.getDocsWriter();\n    assertNotNull(docsWriter);\n    DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n    assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n    IndexThread[] threads = new IndexThread[numThreads];\n    for (int x = 0; x < threads.length; x++) {\n      threads[x] = new IndexThread(numDocs, numThreads, writer, lineDocFile,\n          false);\n      threads[x].start();\n    }\n\n    for (int x = 0; x < threads.length; x++) {\n      threads[x].join();\n    }\n    final long maxRAMBytes = (long) (iwc.getRAMBufferSizeMB() * 1024. * 1024.);\n    assertEquals(\" all flushes must be due numThreads=\" + numThreads, 0,\n        flushControl.flushBytes());\n    assertEquals(numDocumentsToIndex, writer.numDocs());\n    assertEquals(numDocumentsToIndex, writer.maxDoc());\n    assertTrue(\"peak bytes without flush exceeded watermark\",\n        flushPolicy.peakBytesWithoutFlush <= maxRAMBytes);\n    assertActiveBytesAfter(flushControl);\n    if (flushPolicy.hasMarkedPending) {\n      assertTrue(maxRAMBytes < flushControl.peakActiveBytes);\n    }\n    if (ensureNotStalled) {\n      assertFalse(docsWriter.healthiness.wasStalled);\n    }\n    writer.close();\n    assertEquals(0, flushControl.activeBytes());\n    dir.close();\n  }\n\n","sourceOld":"  protected void runFlushByRam(int numThreads, double maxRam,\n      boolean ensureNotStalled) throws IOException, CorruptIndexException,\n      LockObtainFailedException, InterruptedException {\n    final int numDocumentsToIndex = 50 + random.nextInt(150);\n    AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n    Directory dir = newDirectory();\n    MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setFlushPolicy(flushPolicy);\n\n    final int numDWPT = 1 + random.nextInt(8);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    iwc.setRAMBufferSizeMB(1 + random.nextInt(10) + random.nextDouble());\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertFalse(flushPolicy.flushOnDocCount());\n    assertFalse(flushPolicy.flushOnDeleteTerms());\n    assertTrue(flushPolicy.flushOnRAM());\n    DocumentsWriter docsWriter = writer.getDocsWriter();\n    assertNotNull(docsWriter);\n    DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n    assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n    IndexThread[] threads = new IndexThread[numThreads];\n    for (int x = 0; x < threads.length; x++) {\n      threads[x] = new IndexThread(numDocs, numThreads, writer, lineDocFile,\n          false);\n      threads[x].start();\n    }\n\n    for (int x = 0; x < threads.length; x++) {\n      threads[x].join();\n    }\n    final long maxRAMBytes = (long) (iwc.getRAMBufferSizeMB() * 1024. * 1024.);\n    assertEquals(\" all flushes must be due numThreads=\" + numThreads, 0,\n        flushControl.flushBytes());\n    assertEquals(numDocumentsToIndex, writer.numDocs());\n    assertEquals(numDocumentsToIndex, writer.maxDoc());\n    assertTrue(\"peak bytes without flush exceeded watermark\",\n        flushPolicy.peakBytesWithoutFlush <= maxRAMBytes);\n    assertActiveBytesAfter(flushControl);\n    if (flushPolicy.hasMarkedPending) {\n      assertTrue(maxRAMBytes < flushControl.peakActiveBytes);\n    }\n    if (ensureNotStalled) {\n      assertFalse(docsWriter.healthiness.wasStalled);\n    }\n    writer.close();\n    assertEquals(0, flushControl.activeBytes());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#runFlushByRam(int,double,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected void runFlushByRam(int numThreads, double maxRamMB,\n      boolean ensureNotStalled) throws IOException, CorruptIndexException,\n      LockObtainFailedException, InterruptedException {\n    final int numDocumentsToIndex = 50 + random.nextInt(150);\n    AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n    Directory dir = newDirectory();\n    MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setFlushPolicy(flushPolicy);\n    final int numDWPT = 1 + random.nextInt(8);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    iwc.setRAMBufferSizeMB(maxRamMB);\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertFalse(flushPolicy.flushOnDocCount());\n    assertFalse(flushPolicy.flushOnDeleteTerms());\n    assertTrue(flushPolicy.flushOnRAM());\n    DocumentsWriter docsWriter = writer.getDocsWriter();\n    assertNotNull(docsWriter);\n    DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n    assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n    IndexThread[] threads = new IndexThread[numThreads];\n    for (int x = 0; x < threads.length; x++) {\n      threads[x] = new IndexThread(numDocs, numThreads, writer, lineDocFile,\n          false);\n      threads[x].start();\n    }\n\n    for (int x = 0; x < threads.length; x++) {\n      threads[x].join();\n    }\n    final long maxRAMBytes = (long) (iwc.getRAMBufferSizeMB() * 1024. * 1024.);\n    assertEquals(\" all flushes must be due numThreads=\" + numThreads, 0,\n        flushControl.flushBytes());\n    assertEquals(numDocumentsToIndex, writer.numDocs());\n    assertEquals(numDocumentsToIndex, writer.maxDoc());\n    assertTrue(\"peak bytes without flush exceeded watermark\",\n        flushPolicy.peakBytesWithoutFlush <= maxRAMBytes);\n    assertActiveBytesAfter(flushControl);\n    if (flushPolicy.hasMarkedPending) {\n      assertTrue(maxRAMBytes < flushControl.peakActiveBytes);\n    }\n    if (ensureNotStalled) {\n      assertFalse(docsWriter.healthiness.wasStalled);\n    }\n    writer.close();\n    assertEquals(0, flushControl.activeBytes());\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32f306edd62f81390a6e263e8b913f089f3e98a1","date":1305615519,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#runFlushByRam(int,double,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#runFlushByRam(int,double,boolean).mjava","sourceNew":"  protected void runFlushByRam(int numThreads, double maxRamMB,\n      boolean ensureNotStalled) throws IOException, CorruptIndexException,\n      LockObtainFailedException, InterruptedException {\n    final int numDocumentsToIndex = 50 + random.nextInt(150);\n    AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n    Directory dir = newDirectory();\n    MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setFlushPolicy(flushPolicy);\n    final int numDWPT = 1 + random.nextInt(8);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    iwc.setRAMBufferSizeMB(maxRamMB);\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertFalse(flushPolicy.flushOnDocCount());\n    assertFalse(flushPolicy.flushOnDeleteTerms());\n    assertTrue(flushPolicy.flushOnRAM());\n    DocumentsWriter docsWriter = writer.getDocsWriter();\n    assertNotNull(docsWriter);\n    DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n    assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n    IndexThread[] threads = new IndexThread[numThreads];\n    for (int x = 0; x < threads.length; x++) {\n      threads[x] = new IndexThread(numDocs, numThreads, writer, lineDocFile,\n          false);\n      threads[x].start();\n    }\n\n    for (int x = 0; x < threads.length; x++) {\n      threads[x].join();\n    }\n    final long maxRAMBytes = (long) (iwc.getRAMBufferSizeMB() * 1024. * 1024.);\n    assertEquals(\" all flushes must be due numThreads=\" + numThreads, 0,\n        flushControl.flushBytes());\n    assertEquals(numDocumentsToIndex, writer.numDocs());\n    assertEquals(numDocumentsToIndex, writer.maxDoc());\n    assertTrue(\"peak bytes without flush exceeded watermark\",\n        flushPolicy.peakBytesWithoutFlush <= maxRAMBytes);\n    assertActiveBytesAfter(flushControl);\n    if (flushPolicy.hasMarkedPending) {\n      assertTrue(maxRAMBytes < flushControl.peakActiveBytes);\n    }\n    if (ensureNotStalled) {\n      assertFalse(docsWriter.flushControl.stallControl.wasStalled);\n    }\n    writer.close();\n    assertEquals(0, flushControl.activeBytes());\n    dir.close();\n  }\n\n","sourceOld":"  protected void runFlushByRam(int numThreads, double maxRamMB,\n      boolean ensureNotStalled) throws IOException, CorruptIndexException,\n      LockObtainFailedException, InterruptedException {\n    final int numDocumentsToIndex = 50 + random.nextInt(150);\n    AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n    Directory dir = newDirectory();\n    MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setFlushPolicy(flushPolicy);\n    final int numDWPT = 1 + random.nextInt(8);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    iwc.setRAMBufferSizeMB(maxRamMB);\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertFalse(flushPolicy.flushOnDocCount());\n    assertFalse(flushPolicy.flushOnDeleteTerms());\n    assertTrue(flushPolicy.flushOnRAM());\n    DocumentsWriter docsWriter = writer.getDocsWriter();\n    assertNotNull(docsWriter);\n    DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n    assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n    IndexThread[] threads = new IndexThread[numThreads];\n    for (int x = 0; x < threads.length; x++) {\n      threads[x] = new IndexThread(numDocs, numThreads, writer, lineDocFile,\n          false);\n      threads[x].start();\n    }\n\n    for (int x = 0; x < threads.length; x++) {\n      threads[x].join();\n    }\n    final long maxRAMBytes = (long) (iwc.getRAMBufferSizeMB() * 1024. * 1024.);\n    assertEquals(\" all flushes must be due numThreads=\" + numThreads, 0,\n        flushControl.flushBytes());\n    assertEquals(numDocumentsToIndex, writer.numDocs());\n    assertEquals(numDocumentsToIndex, writer.maxDoc());\n    assertTrue(\"peak bytes without flush exceeded watermark\",\n        flushPolicy.peakBytesWithoutFlush <= maxRAMBytes);\n    assertActiveBytesAfter(flushControl);\n    if (flushPolicy.hasMarkedPending) {\n      assertTrue(maxRAMBytes < flushControl.peakActiveBytes);\n    }\n    if (ensureNotStalled) {\n      assertFalse(docsWriter.healthiness.wasStalled);\n    }\n    writer.close();\n    assertEquals(0, flushControl.activeBytes());\n    dir.close();\n  }\n\n","bugFix":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#runFlushByRam(int,double,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#runFlushByRam(int,double,boolean).mjava","sourceNew":"  protected void runFlushByRam(int numThreads, double maxRamMB,\n      boolean ensureNotStalled) throws IOException, CorruptIndexException,\n      LockObtainFailedException, InterruptedException {\n    final int numDocumentsToIndex = 50 + random.nextInt(150);\n    AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n    Directory dir = newDirectory();\n    MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setFlushPolicy(flushPolicy);\n    final int numDWPT = 1 + random.nextInt(8);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    iwc.setRAMBufferSizeMB(maxRamMB);\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertFalse(flushPolicy.flushOnDocCount());\n    assertFalse(flushPolicy.flushOnDeleteTerms());\n    assertTrue(flushPolicy.flushOnRAM());\n    DocumentsWriter docsWriter = writer.getDocsWriter();\n    assertNotNull(docsWriter);\n    DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n    assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n    IndexThread[] threads = new IndexThread[numThreads];\n    for (int x = 0; x < threads.length; x++) {\n      threads[x] = new IndexThread(numDocs, numThreads, writer, lineDocFile,\n          false);\n      threads[x].start();\n    }\n\n    for (int x = 0; x < threads.length; x++) {\n      threads[x].join();\n    }\n    final long maxRAMBytes = (long) (iwc.getRAMBufferSizeMB() * 1024. * 1024.);\n    assertEquals(\" all flushes must be due numThreads=\" + numThreads, 0,\n        flushControl.flushBytes());\n    assertEquals(numDocumentsToIndex, writer.numDocs());\n    assertEquals(numDocumentsToIndex, writer.maxDoc());\n    assertTrue(\"peak bytes without flush exceeded watermark\",\n        flushPolicy.peakBytesWithoutFlush <= maxRAMBytes);\n    assertActiveBytesAfter(flushControl);\n    if (flushPolicy.hasMarkedPending) {\n      assertTrue(maxRAMBytes < flushControl.peakActiveBytes);\n    }\n    if (ensureNotStalled) {\n      assertFalse(docsWriter.flushControl.stallControl.wasStalled);\n    }\n    writer.close();\n    assertEquals(0, flushControl.activeBytes());\n    dir.close();\n  }\n\n","sourceOld":"  protected void runFlushByRam(int numThreads, double maxRamMB,\n      boolean ensureNotStalled) throws IOException, CorruptIndexException,\n      LockObtainFailedException, InterruptedException {\n    final int numDocumentsToIndex = 50 + random.nextInt(150);\n    AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n    Directory dir = newDirectory();\n    MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setFlushPolicy(flushPolicy);\n    final int numDWPT = 1 + random.nextInt(8);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    iwc.setRAMBufferSizeMB(maxRamMB);\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertFalse(flushPolicy.flushOnDocCount());\n    assertFalse(flushPolicy.flushOnDeleteTerms());\n    assertTrue(flushPolicy.flushOnRAM());\n    DocumentsWriter docsWriter = writer.getDocsWriter();\n    assertNotNull(docsWriter);\n    DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n    assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n    IndexThread[] threads = new IndexThread[numThreads];\n    for (int x = 0; x < threads.length; x++) {\n      threads[x] = new IndexThread(numDocs, numThreads, writer, lineDocFile,\n          false);\n      threads[x].start();\n    }\n\n    for (int x = 0; x < threads.length; x++) {\n      threads[x].join();\n    }\n    final long maxRAMBytes = (long) (iwc.getRAMBufferSizeMB() * 1024. * 1024.);\n    assertEquals(\" all flushes must be due numThreads=\" + numThreads, 0,\n        flushControl.flushBytes());\n    assertEquals(numDocumentsToIndex, writer.numDocs());\n    assertEquals(numDocumentsToIndex, writer.maxDoc());\n    assertTrue(\"peak bytes without flush exceeded watermark\",\n        flushPolicy.peakBytesWithoutFlush <= maxRAMBytes);\n    assertActiveBytesAfter(flushControl);\n    if (flushPolicy.hasMarkedPending) {\n      assertTrue(maxRAMBytes < flushControl.peakActiveBytes);\n    }\n    if (ensureNotStalled) {\n      assertFalse(docsWriter.healthiness.wasStalled);\n    }\n    writer.close();\n    assertEquals(0, flushControl.activeBytes());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#runFlushByRam(int,double,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected void runFlushByRam(int numThreads, double maxRamMB,\n      boolean ensureNotStalled) throws IOException, CorruptIndexException,\n      LockObtainFailedException, InterruptedException {\n    final int numDocumentsToIndex = 50 + random.nextInt(150);\n    AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n    Directory dir = newDirectory();\n    MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setFlushPolicy(flushPolicy);\n    final int numDWPT = 1 + random.nextInt(8);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    iwc.setRAMBufferSizeMB(maxRamMB);\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertFalse(flushPolicy.flushOnDocCount());\n    assertFalse(flushPolicy.flushOnDeleteTerms());\n    assertTrue(flushPolicy.flushOnRAM());\n    DocumentsWriter docsWriter = writer.getDocsWriter();\n    assertNotNull(docsWriter);\n    DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n    assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n    IndexThread[] threads = new IndexThread[numThreads];\n    for (int x = 0; x < threads.length; x++) {\n      threads[x] = new IndexThread(numDocs, numThreads, writer, lineDocFile,\n          false);\n      threads[x].start();\n    }\n\n    for (int x = 0; x < threads.length; x++) {\n      threads[x].join();\n    }\n    final long maxRAMBytes = (long) (iwc.getRAMBufferSizeMB() * 1024. * 1024.);\n    assertEquals(\" all flushes must be due numThreads=\" + numThreads, 0,\n        flushControl.flushBytes());\n    assertEquals(numDocumentsToIndex, writer.numDocs());\n    assertEquals(numDocumentsToIndex, writer.maxDoc());\n    assertTrue(\"peak bytes without flush exceeded watermark\",\n        flushPolicy.peakBytesWithoutFlush <= maxRAMBytes);\n    assertActiveBytesAfter(flushControl);\n    if (flushPolicy.hasMarkedPending) {\n      assertTrue(maxRAMBytes < flushControl.peakActiveBytes);\n    }\n    if (ensureNotStalled) {\n      assertFalse(docsWriter.flushControl.stallControl.wasStalled);\n    }\n    writer.close();\n    assertEquals(0, flushControl.activeBytes());\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24799f7a3ae4a9e034b683aaa4d6b657d8a3ecdd","date":1309269564,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#runFlushByRam(int,double,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#runFlushByRam(int,double,boolean).mjava","sourceNew":"  protected void runFlushByRam(int numThreads, double maxRamMB,\n      boolean ensureNotStalled) throws IOException, CorruptIndexException,\n      LockObtainFailedException, InterruptedException {\n    final int numDocumentsToIndex = 10 + atLeast(30);\n    AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n    Directory dir = newDirectory();\n    MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setFlushPolicy(flushPolicy);\n    final int numDWPT = 1 + atLeast(2);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    iwc.setRAMBufferSizeMB(maxRamMB);\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertFalse(flushPolicy.flushOnDocCount());\n    assertFalse(flushPolicy.flushOnDeleteTerms());\n    assertTrue(flushPolicy.flushOnRAM());\n    DocumentsWriter docsWriter = writer.getDocsWriter();\n    assertNotNull(docsWriter);\n    DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n    assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n    IndexThread[] threads = new IndexThread[numThreads];\n    for (int x = 0; x < threads.length; x++) {\n      threads[x] = new IndexThread(numDocs, numThreads, writer, lineDocFile,\n          false);\n      threads[x].start();\n    }\n\n    for (int x = 0; x < threads.length; x++) {\n      threads[x].join();\n    }\n    final long maxRAMBytes = (long) (iwc.getRAMBufferSizeMB() * 1024. * 1024.);\n    assertEquals(\" all flushes must be due numThreads=\" + numThreads, 0,\n        flushControl.flushBytes());\n    assertEquals(numDocumentsToIndex, writer.numDocs());\n    assertEquals(numDocumentsToIndex, writer.maxDoc());\n    assertTrue(\"peak bytes without flush exceeded watermark\",\n        flushPolicy.peakBytesWithoutFlush <= maxRAMBytes);\n    assertActiveBytesAfter(flushControl);\n    if (flushPolicy.hasMarkedPending) {\n      assertTrue(maxRAMBytes < flushControl.peakActiveBytes);\n    }\n    if (ensureNotStalled) {\n      assertFalse(docsWriter.flushControl.stallControl.wasStalled);\n    }\n    writer.close();\n    assertEquals(0, flushControl.activeBytes());\n    dir.close();\n  }\n\n","sourceOld":"  protected void runFlushByRam(int numThreads, double maxRamMB,\n      boolean ensureNotStalled) throws IOException, CorruptIndexException,\n      LockObtainFailedException, InterruptedException {\n    final int numDocumentsToIndex = 50 + random.nextInt(150);\n    AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n    Directory dir = newDirectory();\n    MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setFlushPolicy(flushPolicy);\n    final int numDWPT = 1 + random.nextInt(8);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    iwc.setRAMBufferSizeMB(maxRamMB);\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertFalse(flushPolicy.flushOnDocCount());\n    assertFalse(flushPolicy.flushOnDeleteTerms());\n    assertTrue(flushPolicy.flushOnRAM());\n    DocumentsWriter docsWriter = writer.getDocsWriter();\n    assertNotNull(docsWriter);\n    DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n    assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n    IndexThread[] threads = new IndexThread[numThreads];\n    for (int x = 0; x < threads.length; x++) {\n      threads[x] = new IndexThread(numDocs, numThreads, writer, lineDocFile,\n          false);\n      threads[x].start();\n    }\n\n    for (int x = 0; x < threads.length; x++) {\n      threads[x].join();\n    }\n    final long maxRAMBytes = (long) (iwc.getRAMBufferSizeMB() * 1024. * 1024.);\n    assertEquals(\" all flushes must be due numThreads=\" + numThreads, 0,\n        flushControl.flushBytes());\n    assertEquals(numDocumentsToIndex, writer.numDocs());\n    assertEquals(numDocumentsToIndex, writer.maxDoc());\n    assertTrue(\"peak bytes without flush exceeded watermark\",\n        flushPolicy.peakBytesWithoutFlush <= maxRAMBytes);\n    assertActiveBytesAfter(flushControl);\n    if (flushPolicy.hasMarkedPending) {\n      assertTrue(maxRAMBytes < flushControl.peakActiveBytes);\n    }\n    if (ensureNotStalled) {\n      assertFalse(docsWriter.flushControl.stallControl.wasStalled);\n    }\n    writer.close();\n    assertEquals(0, flushControl.activeBytes());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#runFlushByRam(int,double,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#runFlushByRam(int,double,boolean).mjava","sourceNew":"  protected void runFlushByRam(int numThreads, double maxRamMB,\n      boolean ensureNotStalled) throws IOException, CorruptIndexException,\n      LockObtainFailedException, InterruptedException {\n    final int numDocumentsToIndex = 10 + atLeast(30);\n    AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n    Directory dir = newDirectory();\n    MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setFlushPolicy(flushPolicy);\n    final int numDWPT = 1 + atLeast(2);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    iwc.setRAMBufferSizeMB(maxRamMB);\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertFalse(flushPolicy.flushOnDocCount());\n    assertFalse(flushPolicy.flushOnDeleteTerms());\n    assertTrue(flushPolicy.flushOnRAM());\n    DocumentsWriter docsWriter = writer.getDocsWriter();\n    assertNotNull(docsWriter);\n    DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n    assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n    IndexThread[] threads = new IndexThread[numThreads];\n    for (int x = 0; x < threads.length; x++) {\n      threads[x] = new IndexThread(numDocs, numThreads, writer, lineDocFile,\n          false);\n      threads[x].start();\n    }\n\n    for (int x = 0; x < threads.length; x++) {\n      threads[x].join();\n    }\n    final long maxRAMBytes = (long) (iwc.getRAMBufferSizeMB() * 1024. * 1024.);\n    assertEquals(\" all flushes must be due numThreads=\" + numThreads, 0,\n        flushControl.flushBytes());\n    assertEquals(numDocumentsToIndex, writer.numDocs());\n    assertEquals(numDocumentsToIndex, writer.maxDoc());\n    assertTrue(\"peak bytes without flush exceeded watermark\",\n        flushPolicy.peakBytesWithoutFlush <= maxRAMBytes);\n    assertActiveBytesAfter(flushControl);\n    if (flushPolicy.hasMarkedPending) {\n      assertTrue(maxRAMBytes < flushControl.peakActiveBytes);\n    }\n    if (ensureNotStalled) {\n      assertFalse(docsWriter.flushControl.stallControl.wasStalled);\n    }\n    writer.close();\n    assertEquals(0, flushControl.activeBytes());\n    dir.close();\n  }\n\n","sourceOld":"  protected void runFlushByRam(int numThreads, double maxRamMB,\n      boolean ensureNotStalled) throws IOException, CorruptIndexException,\n      LockObtainFailedException, InterruptedException {\n    final int numDocumentsToIndex = 50 + random.nextInt(150);\n    AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n    Directory dir = newDirectory();\n    MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setFlushPolicy(flushPolicy);\n    final int numDWPT = 1 + random.nextInt(8);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    iwc.setRAMBufferSizeMB(maxRamMB);\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertFalse(flushPolicy.flushOnDocCount());\n    assertFalse(flushPolicy.flushOnDeleteTerms());\n    assertTrue(flushPolicy.flushOnRAM());\n    DocumentsWriter docsWriter = writer.getDocsWriter();\n    assertNotNull(docsWriter);\n    DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n    assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n    IndexThread[] threads = new IndexThread[numThreads];\n    for (int x = 0; x < threads.length; x++) {\n      threads[x] = new IndexThread(numDocs, numThreads, writer, lineDocFile,\n          false);\n      threads[x].start();\n    }\n\n    for (int x = 0; x < threads.length; x++) {\n      threads[x].join();\n    }\n    final long maxRAMBytes = (long) (iwc.getRAMBufferSizeMB() * 1024. * 1024.);\n    assertEquals(\" all flushes must be due numThreads=\" + numThreads, 0,\n        flushControl.flushBytes());\n    assertEquals(numDocumentsToIndex, writer.numDocs());\n    assertEquals(numDocumentsToIndex, writer.maxDoc());\n    assertTrue(\"peak bytes without flush exceeded watermark\",\n        flushPolicy.peakBytesWithoutFlush <= maxRAMBytes);\n    assertActiveBytesAfter(flushControl);\n    if (flushPolicy.hasMarkedPending) {\n      assertTrue(maxRAMBytes < flushControl.peakActiveBytes);\n    }\n    if (ensureNotStalled) {\n      assertFalse(docsWriter.flushControl.stallControl.wasStalled);\n    }\n    writer.close();\n    assertEquals(0, flushControl.activeBytes());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#runFlushByRam(int,double,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#runFlushByRam(int,double,boolean).mjava","sourceNew":"  protected void runFlushByRam(int numThreads, double maxRamMB,\n      boolean ensureNotStalled) throws IOException, CorruptIndexException,\n      LockObtainFailedException, InterruptedException {\n    final int numDocumentsToIndex = 10 + atLeast(30);\n    AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n    Directory dir = newDirectory();\n    MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setFlushPolicy(flushPolicy);\n    final int numDWPT = 1 + atLeast(2);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    iwc.setRAMBufferSizeMB(maxRamMB);\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertFalse(flushPolicy.flushOnDocCount());\n    assertFalse(flushPolicy.flushOnDeleteTerms());\n    assertTrue(flushPolicy.flushOnRAM());\n    DocumentsWriter docsWriter = writer.getDocsWriter();\n    assertNotNull(docsWriter);\n    DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n    assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n    IndexThread[] threads = new IndexThread[numThreads];\n    for (int x = 0; x < threads.length; x++) {\n      threads[x] = new IndexThread(numDocs, numThreads, writer, lineDocFile,\n          false);\n      threads[x].start();\n    }\n\n    for (int x = 0; x < threads.length; x++) {\n      threads[x].join();\n    }\n    final long maxRAMBytes = (long) (iwc.getRAMBufferSizeMB() * 1024. * 1024.);\n    assertEquals(\" all flushes must be due numThreads=\" + numThreads, 0,\n        flushControl.flushBytes());\n    assertEquals(numDocumentsToIndex, writer.numDocs());\n    assertEquals(numDocumentsToIndex, writer.maxDoc());\n    assertTrue(\"peak bytes without flush exceeded watermark\",\n        flushPolicy.peakBytesWithoutFlush <= maxRAMBytes);\n    assertActiveBytesAfter(flushControl);\n    if (flushPolicy.hasMarkedPending) {\n      assertTrue(maxRAMBytes < flushControl.peakActiveBytes);\n    }\n    if (ensureNotStalled) {\n      assertFalse(docsWriter.flushControl.stallControl.wasStalled);\n    }\n    writer.close();\n    assertEquals(0, flushControl.activeBytes());\n    dir.close();\n  }\n\n","sourceOld":"  protected void runFlushByRam(int numThreads, double maxRamMB,\n      boolean ensureNotStalled) throws IOException, CorruptIndexException,\n      LockObtainFailedException, InterruptedException {\n    final int numDocumentsToIndex = 50 + random.nextInt(150);\n    AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n    Directory dir = newDirectory();\n    MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setFlushPolicy(flushPolicy);\n    final int numDWPT = 1 + random.nextInt(8);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    iwc.setRAMBufferSizeMB(maxRamMB);\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertFalse(flushPolicy.flushOnDocCount());\n    assertFalse(flushPolicy.flushOnDeleteTerms());\n    assertTrue(flushPolicy.flushOnRAM());\n    DocumentsWriter docsWriter = writer.getDocsWriter();\n    assertNotNull(docsWriter);\n    DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n    assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n    IndexThread[] threads = new IndexThread[numThreads];\n    for (int x = 0; x < threads.length; x++) {\n      threads[x] = new IndexThread(numDocs, numThreads, writer, lineDocFile,\n          false);\n      threads[x].start();\n    }\n\n    for (int x = 0; x < threads.length; x++) {\n      threads[x].join();\n    }\n    final long maxRAMBytes = (long) (iwc.getRAMBufferSizeMB() * 1024. * 1024.);\n    assertEquals(\" all flushes must be due numThreads=\" + numThreads, 0,\n        flushControl.flushBytes());\n    assertEquals(numDocumentsToIndex, writer.numDocs());\n    assertEquals(numDocumentsToIndex, writer.maxDoc());\n    assertTrue(\"peak bytes without flush exceeded watermark\",\n        flushPolicy.peakBytesWithoutFlush <= maxRAMBytes);\n    assertActiveBytesAfter(flushControl);\n    if (flushPolicy.hasMarkedPending) {\n      assertTrue(maxRAMBytes < flushControl.peakActiveBytes);\n    }\n    if (ensureNotStalled) {\n      assertFalse(docsWriter.flushControl.stallControl.wasStalled);\n    }\n    writer.close();\n    assertEquals(0, flushControl.activeBytes());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#runFlushByRam(int,double,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlushByRamOrCountsPolicy#runFlushByRam(int,double,boolean).mjava","sourceNew":"  protected void runFlushByRam(int numThreads, double maxRamMB,\n      boolean ensureNotStalled) throws IOException, CorruptIndexException,\n      LockObtainFailedException, InterruptedException {\n    final int numDocumentsToIndex = 10 + atLeast(30);\n    AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n    Directory dir = newDirectory();\n    MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setFlushPolicy(flushPolicy);\n    final int numDWPT = 1 + atLeast(2);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    iwc.setRAMBufferSizeMB(maxRamMB);\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertFalse(flushPolicy.flushOnDocCount());\n    assertFalse(flushPolicy.flushOnDeleteTerms());\n    assertTrue(flushPolicy.flushOnRAM());\n    DocumentsWriter docsWriter = writer.getDocsWriter();\n    assertNotNull(docsWriter);\n    DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n    assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n    IndexThread[] threads = new IndexThread[numThreads];\n    for (int x = 0; x < threads.length; x++) {\n      threads[x] = new IndexThread(numDocs, numThreads, writer, lineDocFile,\n          false);\n      threads[x].start();\n    }\n\n    for (int x = 0; x < threads.length; x++) {\n      threads[x].join();\n    }\n    final long maxRAMBytes = (long) (iwc.getRAMBufferSizeMB() * 1024. * 1024.);\n    assertEquals(\" all flushes must be due numThreads=\" + numThreads, 0,\n        flushControl.flushBytes());\n    assertEquals(numDocumentsToIndex, writer.numDocs());\n    assertEquals(numDocumentsToIndex, writer.maxDoc());\n    assertTrue(\"peak bytes without flush exceeded watermark\",\n        flushPolicy.peakBytesWithoutFlush <= maxRAMBytes);\n    assertActiveBytesAfter(flushControl);\n    if (flushPolicy.hasMarkedPending) {\n      assertTrue(maxRAMBytes < flushControl.peakActiveBytes);\n    }\n    if (ensureNotStalled) {\n      assertFalse(docsWriter.flushControl.stallControl.wasStalled);\n    }\n    writer.close();\n    assertEquals(0, flushControl.activeBytes());\n    dir.close();\n  }\n\n","sourceOld":"  protected void runFlushByRam(int numThreads, double maxRamMB,\n      boolean ensureNotStalled) throws IOException, CorruptIndexException,\n      LockObtainFailedException, InterruptedException {\n    final int numDocumentsToIndex = 10 + atLeast(30);\n    AtomicInteger numDocs = new AtomicInteger(numDocumentsToIndex);\n    Directory dir = newDirectory();\n    MockDefaultFlushPolicy flushPolicy = new MockDefaultFlushPolicy();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setFlushPolicy(flushPolicy);\n    final int numDWPT = 1 + atLeast(2);\n    DocumentsWriterPerThreadPool threadPool = new ThreadAffinityDocumentsWriterThreadPool(\n        numDWPT);\n    iwc.setIndexerThreadPool(threadPool);\n    iwc.setRAMBufferSizeMB(maxRamMB);\n    iwc.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    iwc.setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n    assertFalse(flushPolicy.flushOnDocCount());\n    assertFalse(flushPolicy.flushOnDeleteTerms());\n    assertTrue(flushPolicy.flushOnRAM());\n    DocumentsWriter docsWriter = writer.getDocsWriter();\n    assertNotNull(docsWriter);\n    DocumentsWriterFlushControl flushControl = docsWriter.flushControl;\n    assertEquals(\" bytes must be 0 after init\", 0, flushControl.flushBytes());\n\n    IndexThread[] threads = new IndexThread[numThreads];\n    for (int x = 0; x < threads.length; x++) {\n      threads[x] = new IndexThread(numDocs, numThreads, writer, lineDocFile,\n          false);\n      threads[x].start();\n    }\n\n    for (int x = 0; x < threads.length; x++) {\n      threads[x].join();\n    }\n    final long maxRAMBytes = (long) (iwc.getRAMBufferSizeMB() * 1024. * 1024.);\n    assertEquals(\" all flushes must be due numThreads=\" + numThreads, 0,\n        flushControl.flushBytes());\n    assertEquals(numDocumentsToIndex, writer.numDocs());\n    assertEquals(numDocumentsToIndex, writer.maxDoc());\n    assertTrue(\"peak bytes without flush exceeded watermark\",\n        flushPolicy.peakBytesWithoutFlush <= maxRAMBytes);\n    assertActiveBytesAfter(flushControl);\n    if (flushPolicy.hasMarkedPending) {\n      assertTrue(maxRAMBytes < flushControl.peakActiveBytes);\n    }\n    if (ensureNotStalled) {\n      assertFalse(docsWriter.flushControl.stallControl.wasStalled);\n    }\n    writer.close();\n    assertEquals(0, flushControl.activeBytes());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["24799f7a3ae4a9e034b683aaa4d6b657d8a3ecdd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3b48631cad04355b1145531265cf87a095299e14"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","962d04139994fce5193143ef35615499a9a96d78"],"3b48631cad04355b1145531265cf87a095299e14":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"962d04139994fce5193143ef35615499a9a96d78":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","24799f7a3ae4a9e034b683aaa4d6b657d8a3ecdd"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["32f306edd62f81390a6e263e8b913f089f3e98a1","24799f7a3ae4a9e034b683aaa4d6b657d8a3ecdd"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["135621f3a0670a9394eb563224a3b76cc4dddc0f","32f306edd62f81390a6e263e8b913f089f3e98a1"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32f306edd62f81390a6e263e8b913f089f3e98a1"],"32f306edd62f81390a6e263e8b913f089f3e98a1":["3b48631cad04355b1145531265cf87a095299e14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"24799f7a3ae4a9e034b683aaa4d6b657d8a3ecdd":["32f306edd62f81390a6e263e8b913f089f3e98a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["3b48631cad04355b1145531265cf87a095299e14"],"3b48631cad04355b1145531265cf87a095299e14":["135621f3a0670a9394eb563224a3b76cc4dddc0f","32f306edd62f81390a6e263e8b913f089f3e98a1"],"962d04139994fce5193143ef35615499a9a96d78":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["962d04139994fce5193143ef35615499a9a96d78"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","962d04139994fce5193143ef35615499a9a96d78","d2ed1b9b7b46829fe3199afe9a8bc203f201b175","a3776dccca01c11e7046323cfad46a3b4a471233"],"32f306edd62f81390a6e263e8b913f089f3e98a1":["d083e83f225b11e5fdd900e83d26ddb385b6955c","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","24799f7a3ae4a9e034b683aaa4d6b657d8a3ecdd"],"24799f7a3ae4a9e034b683aaa4d6b657d8a3ecdd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","c3a8a449466c1ff7ce2274fe73dab487256964b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}