{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#init(IndexInput).mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#init(IndexInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#init(IndexInput).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkHeader(termsIn,\n                          Lucene41PostingsWriter.TERMS_CODEC,\n                          Lucene41PostingsWriter.VERSION_CURRENT,\n                          Lucene41PostingsWriter.VERSION_CURRENT);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkHeader(termsIn,\n                          BlockPostingsWriter.TERMS_CODEC,\n                          BlockPostingsWriter.VERSION_CURRENT,\n                          BlockPostingsWriter.VERSION_CURRENT);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#init(IndexInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#init(IndexInput).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkHeader(termsIn,\n                          Lucene41PostingsWriter.TERMS_CODEC,\n                          Lucene41PostingsWriter.VERSION_CURRENT,\n                          Lucene41PostingsWriter.VERSION_CURRENT);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkHeader(termsIn,\n                          BlockPostingsWriter.TERMS_CODEC,\n                          BlockPostingsWriter.VERSION_CURRENT,\n                          BlockPostingsWriter.VERSION_CURRENT);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#init(IndexInput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#init(IndexInput).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkHeader(termsIn,\n                          Lucene41PostingsWriter.TERMS_CODEC,\n                          Lucene41PostingsWriter.VERSION_CURRENT,\n                          Lucene41PostingsWriter.VERSION_CURRENT);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkHeader(termsIn,\n                          BlockPostingsWriter.TERMS_CODEC,\n                          BlockPostingsWriter.VERSION_CURRENT,\n                          BlockPostingsWriter.VERSION_CURRENT);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3263230f04a1aa8d431d722fdfce583a9542c18","date":1377603209,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#init(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#init(IndexInput).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkHeader(termsIn,\n                          Lucene41PostingsWriter.TERMS_CODEC,\n                          Lucene41PostingsWriter.VERSION_START,\n                          Lucene41PostingsWriter.VERSION_CURRENT);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkHeader(termsIn,\n                          Lucene41PostingsWriter.TERMS_CODEC,\n                          Lucene41PostingsWriter.VERSION_CURRENT,\n                          Lucene41PostingsWriter.VERSION_CURRENT);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#init(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#init(IndexInput).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkHeader(termsIn,\n                          Lucene41PostingsWriter.TERMS_CODEC,\n                          Lucene41PostingsWriter.VERSION_START,\n                          Lucene41PostingsWriter.VERSION_CURRENT);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkHeader(termsIn,\n                          Lucene41PostingsWriter.TERMS_CODEC,\n                          Lucene41PostingsWriter.VERSION_CURRENT,\n                          Lucene41PostingsWriter.VERSION_CURRENT);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#init(IndexInput,SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#init(IndexInput).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn, SegmentReadState state) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkHeader(termsIn,\n                          Lucene41PostingsFormat.TERMS_CODEC,\n                          Lucene41PostingsFormat.VERSION_START,\n                          Lucene41PostingsFormat.VERSION_CURRENT);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkHeader(termsIn,\n                          Lucene41PostingsWriter.TERMS_CODEC,\n                          Lucene41PostingsWriter.VERSION_START,\n                          Lucene41PostingsWriter.VERSION_CURRENT);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#init(IndexInput,SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#init(IndexInput).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn, SegmentReadState state) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkSegmentHeader(termsIn,\n                                 Lucene50PostingsWriter.TERMS_CODEC,\n                                 Lucene50PostingsWriter.VERSION_START,\n                                 Lucene50PostingsWriter.VERSION_CURRENT,\n                                 state.segmentInfo.getId(),\n                                 state.segmentSuffix);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkHeader(termsIn,\n                          Lucene41PostingsWriter.TERMS_CODEC,\n                          Lucene41PostingsWriter.VERSION_START,\n                          Lucene41PostingsWriter.VERSION_CURRENT);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#init(IndexInput,SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#init(IndexInput).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn, SegmentReadState state) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkHeader(termsIn,\n                          Lucene41PostingsFormat.TERMS_CODEC,\n                          Lucene41PostingsFormat.VERSION_START,\n                          Lucene41PostingsFormat.VERSION_CURRENT);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkHeader(termsIn,\n                          Lucene41PostingsWriter.TERMS_CODEC,\n                          Lucene41PostingsWriter.VERSION_START,\n                          Lucene41PostingsWriter.VERSION_CURRENT);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#init(IndexInput,SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#init(IndexInput).mjava","sourceNew":"  @Override\n  public void init(IndexInput termsIn, SegmentReadState state) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkIndexHeader(termsIn, TERMS_CODEC, VERSION_START, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexInput termsIn) throws IOException {\n    // Make sure we are talking to the matching postings writer\n    CodecUtil.checkHeader(termsIn,\n                          Lucene41PostingsWriter.TERMS_CODEC,\n                          Lucene41PostingsWriter.VERSION_START,\n                          Lucene41PostingsWriter.VERSION_CURRENT);\n    final int indexBlockSize = termsIn.readVInt();\n    if (indexBlockSize != BLOCK_SIZE) {\n      throw new IllegalStateException(\"index-time BLOCK_SIZE (\" + indexBlockSize + \") != read-time BLOCK_SIZE (\" + BLOCK_SIZE + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"99eb4a732d1a908f4636ace52928876136bf1896":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["2f948dd442d23baa6cbb28daf77c8db78b351329","99eb4a732d1a908f4636ace52928876136bf1896"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","e3263230f04a1aa8d431d722fdfce583a9542c18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"e3263230f04a1aa8d431d722fdfce583a9542c18":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"]},"commit2Childs":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","2f948dd442d23baa6cbb28daf77c8db78b351329","e3263230f04a1aa8d431d722fdfce583a9542c18"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"e3263230f04a1aa8d431d722fdfce583a9542c18":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}