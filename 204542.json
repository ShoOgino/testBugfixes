{"path":"solr/core/src/test/org/apache/solr/cloud/TestShardsWithSingleReplica#testSkipLeaderOperations().mjava","commits":[{"id":"691d1439503ec32e198724114f6cd32446c86ac6","date":1506996002,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestShardsWithSingleReplica#testSkipLeaderOperations().mjava","pathOld":"/dev/null","sourceNew":"  public void testSkipLeaderOperations() throws Exception {\n    String overseerLeader = getOverseerLeader();\n    List<JettySolrRunner> notOverseerNodes = cluster.getJettySolrRunners()\n        .stream()\n        .filter(solrRunner -> !solrRunner.getNodeName().equals(overseerLeader))\n        .collect(Collectors.toList());\n    String collection = \"collection1\";\n    CollectionAdminRequest\n        .createCollection(collection, 2, 1)\n        .setCreateNodeSet(notOverseerNodes\n            .stream()\n            .map(JettySolrRunner::getNodeName)\n            .collect(Collectors.joining(\",\"))\n        )\n        .process(cluster.getSolrClient());\n\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      cluster.stopJettySolrRunner(solrRunner);\n    }\n    waitForState(\"Expected empty liveNodes\", collection,\n        (liveNodes, collectionState) -> liveNodes.size() == 1);\n\n    CollectionAdminResponse resp = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      cluster.startJettySolrRunner(solrRunner);\n    }\n\n    waitForState(\"Expected 2x1 for collection: \" + collection, collection,\n        clusterShape(2, 1));\n    CollectionAdminResponse resp2 = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    assertEquals(getNumLeaderOpeations(resp), getNumLeaderOpeations(resp2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestShardsWithSingleReplica#testSkipLeaderOperations().mjava","pathOld":"/dev/null","sourceNew":"  public void testSkipLeaderOperations() throws Exception {\n    String overseerLeader = getOverseerLeader();\n    List<JettySolrRunner> notOverseerNodes = cluster.getJettySolrRunners()\n        .stream()\n        .filter(solrRunner -> !solrRunner.getNodeName().equals(overseerLeader))\n        .collect(Collectors.toList());\n    String collection = \"collection1\";\n    CollectionAdminRequest\n        .createCollection(collection, 2, 1)\n        .setCreateNodeSet(notOverseerNodes\n            .stream()\n            .map(JettySolrRunner::getNodeName)\n            .collect(Collectors.joining(\",\"))\n        )\n        .process(cluster.getSolrClient());\n\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      cluster.stopJettySolrRunner(solrRunner);\n    }\n    waitForState(\"Expected empty liveNodes\", collection,\n        (liveNodes, collectionState) -> liveNodes.size() == 1);\n\n    CollectionAdminResponse resp = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      cluster.startJettySolrRunner(solrRunner);\n    }\n\n    waitForState(\"Expected 2x1 for collection: \" + collection, collection,\n        clusterShape(2, 1));\n    CollectionAdminResponse resp2 = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    assertEquals(getNumLeaderOpeations(resp), getNumLeaderOpeations(resp2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27d63bd6ea608c208e37fd3e13e7b27f06da6b60","date":1507105517,"type":6,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSkipOverseerOperations#testSkipDownOperations().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestShardsWithSingleReplica#testSkipLeaderOperations().mjava","sourceNew":"  public void testSkipDownOperations() throws Exception {\n    String overseerLeader = getOverseerLeader();\n    List<JettySolrRunner> notOverseerNodes = cluster.getJettySolrRunners()\n        .stream()\n        .filter(solrRunner -> !solrRunner.getNodeName().equals(overseerLeader))\n        .collect(Collectors.toList());\n    String collection = \"collection2\";\n    CollectionAdminRequest\n        .createCollection(collection, 2, 2)\n        .setCreateNodeSet(notOverseerNodes\n            .stream()\n            .map(JettySolrRunner::getNodeName)\n            .collect(Collectors.joining(\",\"))\n        )\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.stop();\n    }\n    waitForState(\"Expected single liveNode\", collection,\n        (liveNodes, collectionState) -> liveNodes.size() == 1);\n\n    CollectionAdminResponse resp = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.start();\n    }\n\n    waitForState(\"Expected 2x2 for collection: \" + collection, collection,\n        clusterShape(2, 2));\n    CollectionAdminResponse resp2 = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    // 2 for recovering state, 4 for active state\n    assertEquals(getNumStateOpeations(resp) + 6, getNumStateOpeations(resp2));\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  public void testSkipLeaderOperations() throws Exception {\n    String overseerLeader = getOverseerLeader();\n    List<JettySolrRunner> notOverseerNodes = cluster.getJettySolrRunners()\n        .stream()\n        .filter(solrRunner -> !solrRunner.getNodeName().equals(overseerLeader))\n        .collect(Collectors.toList());\n    String collection = \"collection1\";\n    CollectionAdminRequest\n        .createCollection(collection, 2, 1)\n        .setCreateNodeSet(notOverseerNodes\n            .stream()\n            .map(JettySolrRunner::getNodeName)\n            .collect(Collectors.joining(\",\"))\n        )\n        .process(cluster.getSolrClient());\n\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      cluster.stopJettySolrRunner(solrRunner);\n    }\n    waitForState(\"Expected empty liveNodes\", collection,\n        (liveNodes, collectionState) -> liveNodes.size() == 1);\n\n    CollectionAdminResponse resp = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      cluster.startJettySolrRunner(solrRunner);\n    }\n\n    waitForState(\"Expected 2x1 for collection: \" + collection, collection,\n        clusterShape(2, 1));\n    CollectionAdminResponse resp2 = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    assertEquals(getNumLeaderOpeations(resp), getNumLeaderOpeations(resp2));\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"27d63bd6ea608c208e37fd3e13e7b27f06da6b60","date":1507105517,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSkipOverseerOperations#testSkipLeaderOperations().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestShardsWithSingleReplica#testSkipLeaderOperations().mjava","sourceNew":"  public void testSkipLeaderOperations() throws Exception {\n    String overseerLeader = getOverseerLeader();\n    List<JettySolrRunner> notOverseerNodes = cluster.getJettySolrRunners()\n        .stream()\n        .filter(solrRunner -> !solrRunner.getNodeName().equals(overseerLeader))\n        .collect(Collectors.toList());\n    String collection = \"collection1\";\n    CollectionAdminRequest\n        .createCollection(collection, 2, 1)\n        .setCreateNodeSet(notOverseerNodes\n            .stream()\n            .map(JettySolrRunner::getNodeName)\n            .collect(Collectors.joining(\",\"))\n        )\n        .process(cluster.getSolrClient());\n\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.stop();\n    }\n    waitForState(\"Expected single liveNode\", collection,\n        (liveNodes, collectionState) -> liveNodes.size() == 1);\n\n    CollectionAdminResponse resp = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.start();\n    }\n\n    waitForState(\"Expected 2x1 for collection: \" + collection, collection,\n        clusterShape(2, 1));\n    CollectionAdminResponse resp2 = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    assertEquals(getNumLeaderOpeations(resp), getNumLeaderOpeations(resp2));\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  public void testSkipLeaderOperations() throws Exception {\n    String overseerLeader = getOverseerLeader();\n    List<JettySolrRunner> notOverseerNodes = cluster.getJettySolrRunners()\n        .stream()\n        .filter(solrRunner -> !solrRunner.getNodeName().equals(overseerLeader))\n        .collect(Collectors.toList());\n    String collection = \"collection1\";\n    CollectionAdminRequest\n        .createCollection(collection, 2, 1)\n        .setCreateNodeSet(notOverseerNodes\n            .stream()\n            .map(JettySolrRunner::getNodeName)\n            .collect(Collectors.joining(\",\"))\n        )\n        .process(cluster.getSolrClient());\n\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      cluster.stopJettySolrRunner(solrRunner);\n    }\n    waitForState(\"Expected empty liveNodes\", collection,\n        (liveNodes, collectionState) -> liveNodes.size() == 1);\n\n    CollectionAdminResponse resp = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      cluster.startJettySolrRunner(solrRunner);\n    }\n\n    waitForState(\"Expected 2x1 for collection: \" + collection, collection,\n        clusterShape(2, 1));\n    CollectionAdminResponse resp2 = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    assertEquals(getNumLeaderOpeations(resp), getNumLeaderOpeations(resp2));\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"27d63bd6ea608c208e37fd3e13e7b27f06da6b60":["691d1439503ec32e198724114f6cd32446c86ac6"],"691d1439503ec32e198724114f6cd32446c86ac6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","691d1439503ec32e198724114f6cd32446c86ac6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27d63bd6ea608c208e37fd3e13e7b27f06da6b60"]},"commit2Childs":{"27d63bd6ea608c208e37fd3e13e7b27f06da6b60":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"691d1439503ec32e198724114f6cd32446c86ac6":["27d63bd6ea608c208e37fd3e13e7b27f06da6b60","6240b74b884c5587f2a4062dd27d6c32bf228889"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["691d1439503ec32e198724114f6cd32446c86ac6","6240b74b884c5587f2a4062dd27d6c32bf228889"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}