{"path":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testDoubles().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testDoubles().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testDoubles().mjava","sourceNew":"  public void testDoubles() throws Exception {\n    double[] vals=new double[]{\n      Double.NEGATIVE_INFINITY, -2.3E25, -1.0E15, -1.0, -1.0E-1, -1.0E-2, -0.0, \n      +0.0, 1.0E-2, 1.0E-1, 1.0, 1.0E15, 2.3E25, Double.POSITIVE_INFINITY, Double.NaN\n    };\n    long[] longVals=new long[vals.length];\n    \n    // check forward and back conversion\n    for (int i=0; i<vals.length; i++) {\n      longVals[i]=NumericUtils.doubleToSortableLong(vals[i]);\n      assertTrue( \"forward and back conversion should generate same double\", Double.compare(vals[i], NumericUtils.sortableLongToDouble(longVals[i]))==0 );\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<longVals.length; i++) {\n      assertTrue( \"check sort order\", longVals[i-1] < longVals[i] );\n    }\n  }\n\n","sourceOld":"  public void testDoubles() throws Exception {\n    double[] vals=new double[]{\n      Double.NEGATIVE_INFINITY, -2.3E25, -1.0E15, -1.0, -1.0E-1, -1.0E-2, -0.0, \n      +0.0, 1.0E-2, 1.0E-1, 1.0, 1.0E15, 2.3E25, Double.POSITIVE_INFINITY, Double.NaN\n    };\n    long[] longVals=new long[vals.length];\n    \n    // check forward and back conversion\n    for (int i=0; i<vals.length; i++) {\n      longVals[i]=NumericUtils.doubleToSortableLong(vals[i]);\n      assertTrue( \"forward and back conversion should generate same double\", Double.compare(vals[i], NumericUtils.sortableLongToDouble(longVals[i]))==0 );\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<longVals.length; i++) {\n      assertTrue( \"check sort order\", longVals[i-1] < longVals[i] );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testDoubles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testDoubles().mjava","sourceNew":"  public void testDoubles() throws Exception {\n    double[] vals=new double[]{\n      Double.NEGATIVE_INFINITY, -2.3E25, -1.0E15, -1.0, -1.0E-1, -1.0E-2, -0.0, \n      +0.0, 1.0E-2, 1.0E-1, 1.0, 1.0E15, 2.3E25, Double.POSITIVE_INFINITY, Double.NaN\n    };\n    long[] longVals=new long[vals.length];\n    \n    // check forward and back conversion\n    for (int i=0; i<vals.length; i++) {\n      longVals[i]= LegacyNumericUtils.doubleToSortableLong(vals[i]);\n      assertTrue( \"forward and back conversion should generate same double\", Double.compare(vals[i], LegacyNumericUtils.sortableLongToDouble(longVals[i]))==0 );\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<longVals.length; i++) {\n      assertTrue( \"check sort order\", longVals[i-1] < longVals[i] );\n    }\n  }\n\n","sourceOld":"  public void testDoubles() throws Exception {\n    double[] vals=new double[]{\n      Double.NEGATIVE_INFINITY, -2.3E25, -1.0E15, -1.0, -1.0E-1, -1.0E-2, -0.0, \n      +0.0, 1.0E-2, 1.0E-1, 1.0, 1.0E15, 2.3E25, Double.POSITIVE_INFINITY, Double.NaN\n    };\n    long[] longVals=new long[vals.length];\n    \n    // check forward and back conversion\n    for (int i=0; i<vals.length; i++) {\n      longVals[i]=NumericUtils.doubleToSortableLong(vals[i]);\n      assertTrue( \"forward and back conversion should generate same double\", Double.compare(vals[i], NumericUtils.sortableLongToDouble(longVals[i]))==0 );\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<longVals.length; i++) {\n      assertTrue( \"check sort order\", longVals[i-1] < longVals[i] );\n    }\n  }\n\n","bugFix":null,"bugIntro":["a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","date":1457059932,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testDoubles().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * check various sorted values of doubles (including extreme values)\n   * check for correct ordering of the encoded bytes and that values round-trip.\n   */\n  public void testDoubles() throws Exception {\n    double[] values = new double[] {\n      Double.NEGATIVE_INFINITY, -2.3E25, -1.0E15, -1.0, -1.0E-1, -1.0E-2, -0.0, \n      +0.0, 1.0E-2, 1.0E-1, 1.0, 1.0E15, 2.3E25, Double.POSITIVE_INFINITY, Double.NaN\n    };\n    long[] encoded = new long[values.length];\n    \n    // check forward and back conversion\n    for (int i = 0; i < values.length; i++) {\n      encoded[i] = NumericUtils.doubleToSortableLong(values[i]);\n      assertTrue(\"forward and back conversion should generate same double\", \n                 Double.compare(values[i], NumericUtils.sortableLongToDouble(encoded[i])) == 0);\n    }\n    \n    // check sort order (encoded values should be ascending)\n    for (int i = 1; i < encoded.length; i++) {\n      assertTrue(\"check sort order\", encoded[i-1] < encoded[i]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testDoubles().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * check various sorted values of doubles (including extreme values)\n   * check for correct ordering of the encoded bytes and that values round-trip.\n   */\n  public void testDoubles() throws Exception {\n    double[] values = new double[] {\n      Double.NEGATIVE_INFINITY, -2.3E25, -1.0E15, -1.0, -1.0E-1, -1.0E-2, -0.0, \n      +0.0, 1.0E-2, 1.0E-1, 1.0, 1.0E15, 2.3E25, Double.POSITIVE_INFINITY, Double.NaN\n    };\n    long[] encoded = new long[values.length];\n    \n    // check forward and back conversion\n    for (int i = 0; i < values.length; i++) {\n      encoded[i] = NumericUtils.doubleToSortableLong(values[i]);\n      assertTrue(\"forward and back conversion should generate same double\", \n                 Double.compare(values[i], NumericUtils.sortableLongToDouble(encoded[i])) == 0);\n    }\n    \n    // check sort order (encoded values should be ascending)\n    for (int i = 1; i < encoded.length; i++) {\n      assertTrue(\"check sort order\", encoded[i-1] < encoded[i]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["770342641f7b505eaa8dccdc666158bff2419109","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"770342641f7b505eaa8dccdc666158bff2419109":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"770342641f7b505eaa8dccdc666158bff2419109":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}