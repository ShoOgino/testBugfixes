{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","pathOld":"/dev/null","sourceNew":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        LogDocMergePolicy ldmp = new LogDocMergePolicy(writer);\n        ldmp.setMinMergeDocs(1);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.setMaxBufferedDocs(2);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","sourceNew":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        LogDocMergePolicy ldmp = new LogDocMergePolicy(writer);\n        ldmp.setMinMergeDocs(1);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.setMaxBufferedDocs(2);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        LogDocMergePolicy ldmp = new LogDocMergePolicy(writer);\n        ldmp.setMinMergeDocs(1);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.setMaxBufferedDocs(2);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}