{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/CategoryRoutedAlias#createCollectionsIfRequired(AddUpdateCommand).mjava","commits":[{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CategoryRoutedAlias#createCollectionsIfRequired(AddUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Method to possibly create a collection. It's possible that the collection will already have been created\n   * either by a prior invocation in this thread or another thread. This method is idempotent, multiple invocations\n   * are harmless.\n   *\n   * @param cmd The command that might cause collection creation\n   * @return the collection to which the the update should be directed, possibly a newly created collection.\n   */\n  @Override\n  public String createCollectionsIfRequired(AddUpdateCommand cmd) {\n    SolrQueryRequest req = cmd.getReq();\n    SolrCore core = req.getCore();\n    CoreContainer coreContainer = core.getCoreContainer();\n    CollectionsHandler collectionsHandler = coreContainer.getCollectionsHandler();\n    String dataValue = String.valueOf(cmd.getSolrInputDocument().getFieldValue(getRouteField()));\n    String candidateCollectionName = buildCollectionNameFromValue(dataValue);\n\n    try {\n      // Note: CRA's have no way to predict values that determine collection so preemptive async creation\n      // is not possible. We have no choice but to block and wait (to do otherwise would imperil the overseer).\n      do {\n        if (getCollectionList(this.parsedAliases).contains(candidateCollectionName)) {\n          return candidateCollectionName;\n        } else {\n          // this could time out in which case we simply let it throw an error\n          MaintainCategoryRoutedAliasCmd.remoteInvoke(collectionsHandler, getAliasName(), candidateCollectionName);\n          // It's possible no collection was created because of a race and that's okay... we'll retry.\n\n          // Ensure our view of the aliases has updated. If we didn't do this, our zkStateReader might\n          //  not yet know about the new alias (thus won't see the newly added collection to it), and we might think\n          //  we failed.\n          collectionsHandler.getCoreContainer().getZkController().getZkStateReader().aliasesManager.update();\n\n          // we should see some sort of update to our aliases\n          if (!updateParsedCollectionAliases(coreContainer.getZkController())) { // thus we didn't make progress...\n            // this is not expected, even in known failure cases, but we check just in case\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"We need to create a new category routed collection but for unknown reasons were unable to do so.\");\n          }\n        }\n      } while (true);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":4,"author":"Gus Heck","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CategoryRoutedAlias#createCollectionsIfRequired(AddUpdateCommand).mjava","sourceNew":null,"sourceOld":"  /**\n   * Method to possibly create a collection. It's possible that the collection will already have been created\n   * either by a prior invocation in this thread or another thread. This method is idempotent, multiple invocations\n   * are harmless.\n   *\n   * @param cmd The command that might cause collection creation\n   * @return the collection to which the the update should be directed, possibly a newly created collection.\n   */\n  @Override\n  public String createCollectionsIfRequired(AddUpdateCommand cmd) {\n    SolrQueryRequest req = cmd.getReq();\n    SolrCore core = req.getCore();\n    CoreContainer coreContainer = core.getCoreContainer();\n    CollectionsHandler collectionsHandler = coreContainer.getCollectionsHandler();\n    String dataValue = String.valueOf(cmd.getSolrInputDocument().getFieldValue(getRouteField()));\n    String candidateCollectionName = buildCollectionNameFromValue(dataValue);\n\n    try {\n      // Note: CRA's have no way to predict values that determine collection so preemptive async creation\n      // is not possible. We have no choice but to block and wait (to do otherwise would imperil the overseer).\n      do {\n        if (getCollectionList(this.parsedAliases).contains(candidateCollectionName)) {\n          return candidateCollectionName;\n        } else {\n          // this could time out in which case we simply let it throw an error\n          MaintainCategoryRoutedAliasCmd.remoteInvoke(collectionsHandler, getAliasName(), candidateCollectionName);\n          // It's possible no collection was created because of a race and that's okay... we'll retry.\n\n          // Ensure our view of the aliases has updated. If we didn't do this, our zkStateReader might\n          //  not yet know about the new alias (thus won't see the newly added collection to it), and we might think\n          //  we failed.\n          collectionsHandler.getCoreContainer().getZkController().getZkStateReader().aliasesManager.update();\n\n          // we should see some sort of update to our aliases\n          if (!updateParsedCollectionAliases(coreContainer.getZkController())) { // thus we didn't make progress...\n            // this is not expected, even in known failure cases, but we check just in case\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"We need to create a new category routed collection but for unknown reasons were unable to do so.\");\n          }\n        }\n      } while (true);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["b627755385655c7cd3fb296f17593658805cf4d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b627755385655c7cd3fb296f17593658805cf4d5"],"b627755385655c7cd3fb296f17593658805cf4d5":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}