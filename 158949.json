{"path":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext#replicasWithHigherTermParticipated(ZkShardTerms,String).mjava","commits":[{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext#replicasWithHigherTermParticipated(ZkShardTerms,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#replicasWithHigherTermParticipated(ZkShardTerms,String).mjava","sourceNew":"  /**\n   * Do other replicas with higher term participated in the election\n   *\n   * @return true if other replicas with higher term participated in the election, false if otherwise\n   */\n  private boolean replicasWithHigherTermParticipated(ZkShardTerms zkShardTerms, String coreNodeName) {\n    ClusterState clusterState = zkController.getClusterState();\n    DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    Slice slices = (docCollection == null) ? null : docCollection.getSlice(shardId);\n    if (slices == null) return false;\n\n    long replicaTerm = zkShardTerms.getTerm(coreNodeName);\n    boolean isRecovering = zkShardTerms.isRecovering(coreNodeName);\n\n    for (Replica replica : slices.getReplicas()) {\n      if (replica.getName().equals(coreNodeName)) continue;\n\n      if (clusterState.getLiveNodes().contains(replica.getNodeName())) {\n        long otherTerm = zkShardTerms.getTerm(replica.getName());\n        boolean isOtherReplicaRecovering = zkShardTerms.isRecovering(replica.getName());\n\n        if (isRecovering && !isOtherReplicaRecovering) return true;\n        if (otherTerm > replicaTerm) return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Do other replicas with higher term participated in the election\n   * @return true if other replicas with higher term participated in the election, false if otherwise\n   */\n  private boolean replicasWithHigherTermParticipated(ZkShardTerms zkShardTerms, String coreNodeName) {\n    ClusterState clusterState = zkController.getClusterState();\n    DocCollection docCollection = clusterState.getCollectionOrNull(collection);\n    Slice slices = (docCollection == null) ? null : docCollection.getSlice(shardId);\n    if (slices == null) return false;\n\n    long replicaTerm = zkShardTerms.getTerm(coreNodeName);\n    boolean isRecovering = zkShardTerms.isRecovering(coreNodeName);\n\n    for (Replica replica : slices.getReplicas()) {\n      if (replica.getName().equals(coreNodeName)) continue;\n\n      if (clusterState.getLiveNodes().contains(replica.getNodeName())) {\n        long otherTerm = zkShardTerms.getTerm(replica.getName());\n        boolean isOtherReplicaRecovering = zkShardTerms.isRecovering(replica.getName());\n\n        if (isRecovering && !isOtherReplicaRecovering) return true;\n        if (otherTerm > replicaTerm) return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba33781da68babcaa5828121b443d3eb5c9d8480":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba33781da68babcaa5828121b443d3eb5c9d8480"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}