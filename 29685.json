{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#req(List[Scorer],List[Scorer]).mjava","commits":[{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#req(List[Scorer],List[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#req(List[Scorer],List[Scorer],boolean).mjava","sourceNew":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(List<Scorer> required, List<Scorer> requiredScoring) {\n    if (required.size() == 1) {\n      Scorer req = required.get(0);\n\n      if (needsScores == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public int freq() throws IOException {\n            return 0;\n          }\n        };\n      }\n      \n      return req;\n    } else {\n      return new ConjunctionScorer(this, required, requiredScoring);\n    }\n  }\n\n","sourceOld":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(List<Scorer> required, List<Scorer> requiredScoring, boolean disableCoord) {\n    if (required.size() == 1) {\n      Scorer req = required.get(0);\n\n      if (needsScores == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public int freq() throws IOException {\n            return 0;\n          }\n        };\n      }\n      \n      float boost = 1f;\n      if (disableCoord == false) {\n        boost = coord(1, maxCoord);\n      }\n      if (boost == 1f) {\n        return req;\n      }\n      return new BooleanTopLevelScorers.BoostedScorer(req, boost);\n    } else {\n      return new ConjunctionScorer(this, required, requiredScoring,\n                                   disableCoord ? 1.0F : coord(requiredScoring.size(), maxCoord));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#req(List[Scorer],List[Scorer]).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(List<Scorer> required, List<Scorer> requiredScoring) {\n    if (required.size() == 1) {\n      Scorer req = required.get(0);\n\n      if (needsScores == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public int freq() throws IOException {\n            return 0;\n          }\n        };\n      }\n      \n      return req;\n    } else {\n      return new ConjunctionScorer(this, required, requiredScoring);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dca67e06c96e95a8d9ef07418b6299bfd981523b","date":1484639518,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#req(Collection[ScorerSupplier],Collection[ScorerSupplier],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#req(List[Scorer],List[Scorer]).mjava","sourceNew":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(Collection<ScorerSupplier> requiredNoScoring, Collection<ScorerSupplier> requiredScoring, boolean randomAccess) throws IOException {\n    if (requiredNoScoring.size() + requiredScoring.size() == 1) {\n      Scorer req = (requiredNoScoring.isEmpty() ? requiredScoring : requiredNoScoring).iterator().next().get(randomAccess);\n\n      if (needsScores == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public int freq() throws IOException {\n            return 0;\n          }\n        };\n      }\n\n      return req;\n    } else {\n      long minCost = Math.min(\n          requiredNoScoring.stream().mapToLong(ScorerSupplier::cost).min().orElse(Long.MAX_VALUE),\n          requiredScoring.stream().mapToLong(ScorerSupplier::cost).min().orElse(Long.MAX_VALUE));\n      List<Scorer> requiredScorers = new ArrayList<>();\n      List<Scorer> scoringScorers = new ArrayList<>();\n      for (ScorerSupplier s : requiredNoScoring) {\n        requiredScorers.add(s.get(randomAccess || s.cost() > minCost));\n      }\n      for (ScorerSupplier s : requiredScoring) {\n        Scorer scorer = s.get(randomAccess || s.cost() > minCost);\n        requiredScorers.add(scorer);\n        scoringScorers.add(scorer);\n      }\n      return new ConjunctionScorer(weight, requiredScorers, scoringScorers);\n    }\n  }\n\n","sourceOld":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(List<Scorer> required, List<Scorer> requiredScoring) {\n    if (required.size() == 1) {\n      Scorer req = required.get(0);\n\n      if (needsScores == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public int freq() throws IOException {\n            return 0;\n          }\n        };\n      }\n      \n      return req;\n    } else {\n      return new ConjunctionScorer(this, required, requiredScoring);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#req(Collection[ScorerSupplier],Collection[ScorerSupplier],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanWeight#req(List[Scorer],List[Scorer]).mjava","sourceNew":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(Collection<ScorerSupplier> requiredNoScoring, Collection<ScorerSupplier> requiredScoring, boolean randomAccess) throws IOException {\n    if (requiredNoScoring.size() + requiredScoring.size() == 1) {\n      Scorer req = (requiredNoScoring.isEmpty() ? requiredScoring : requiredNoScoring).iterator().next().get(randomAccess);\n\n      if (needsScores == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public int freq() throws IOException {\n            return 0;\n          }\n        };\n      }\n\n      return req;\n    } else {\n      long minCost = Math.min(\n          requiredNoScoring.stream().mapToLong(ScorerSupplier::cost).min().orElse(Long.MAX_VALUE),\n          requiredScoring.stream().mapToLong(ScorerSupplier::cost).min().orElse(Long.MAX_VALUE));\n      List<Scorer> requiredScorers = new ArrayList<>();\n      List<Scorer> scoringScorers = new ArrayList<>();\n      for (ScorerSupplier s : requiredNoScoring) {\n        requiredScorers.add(s.get(randomAccess || s.cost() > minCost));\n      }\n      for (ScorerSupplier s : requiredScoring) {\n        Scorer scorer = s.get(randomAccess || s.cost() > minCost);\n        requiredScorers.add(scorer);\n        scoringScorers.add(scorer);\n      }\n      return new ConjunctionScorer(weight, requiredScorers, scoringScorers);\n    }\n  }\n\n","sourceOld":"  /** Create a new scorer for the given required clauses. Note that\n   *  {@code requiredScoring} is a subset of {@code required} containing\n   *  required clauses that should participate in scoring. */\n  private Scorer req(List<Scorer> required, List<Scorer> requiredScoring) {\n    if (required.size() == 1) {\n      Scorer req = required.get(0);\n\n      if (needsScores == false) {\n        return req;\n      }\n\n      if (requiredScoring.isEmpty()) {\n        // Scores are needed but we only have a filter clause\n        // BooleanWeight expects that calling score() is ok so we need to wrap\n        // to prevent score() from being propagated\n        return new FilterScorer(req) {\n          @Override\n          public float score() throws IOException {\n            return 0f;\n          }\n          @Override\n          public int freq() throws IOException {\n            return 0;\n          }\n        };\n      }\n      \n      return req;\n    } else {\n      return new ConjunctionScorer(this, required, requiredScoring);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dca67e06c96e95a8d9ef07418b6299bfd981523b":["c8a0e442f7b61f811680273b25da95994a724466"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dca67e06c96e95a8d9ef07418b6299bfd981523b"],"302d34f2c66e8d489ee13078305c330cbf67b226":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","dca67e06c96e95a8d9ef07418b6299bfd981523b"]},"commit2Childs":{"dca67e06c96e95a8d9ef07418b6299bfd981523b":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c8a0e442f7b61f811680273b25da95994a724466":["dca67e06c96e95a8d9ef07418b6299bfd981523b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["302d34f2c66e8d489ee13078305c330cbf67b226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}