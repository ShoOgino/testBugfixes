{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    writer.setMergedSegmentWarmer(warmer);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    writer.setMergedSegmentWarmer(warmer);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testMergeWarmer().mjava","sourceNew":null,"sourceOld":"  public void testMergeWarmer() throws Exception {\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n\n    // create the index\n    createIndexNoClose(false, \"test\", writer);\n\n    // get a reader to put writer into near real-time mode\n    IndexReader r1 = writer.getReader();\n\n    // Enroll warmer\n    MyWarmer warmer = new MyWarmer();\n    writer.setMergedSegmentWarmer(warmer);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n\n    for (int i = 0; i < 10; i++) {\n      writer.addDocument(createDocument(i, \"test\", 4));\n    }\n    ((ConcurrentMergeScheduler) writer.getMergeScheduler()).sync();\n\n    assertTrue(warmer.warmCount > 0);\n    final int count = warmer.warmCount;\n\n    writer.addDocument(createDocument(17, \"test\", 4));\n    writer.optimize();\n    assertTrue(warmer.warmCount > count);\n    \n    writer.close();\n    r1.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}