{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#_testPrecedence().mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#_testPrecedence().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#_testPrecedence().mjava","sourceNew":"  /**\n   * This test differs from the original QueryParser, showing how the\n   * precedence issue has been corrected.\n   */\n  // failing tests disabled since PrecedenceQueryParser\n  // is currently unmaintained\n  public void _testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    Query query1 = parser.parse(\"A AND B OR C AND D\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\");\n    query2 = parser.parse(\"A B C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\");\n    query2 = parser.parse(\"(+A +B) C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\");\n    query2 = parser.parse(\"+A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\");\n    query2 = parser.parse(\"A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\");\n    query2 = parser.parse(\"A (-B +C)\");\n    assertEquals(query1, query2);\n  }\n\n","sourceOld":"  /**\n   * This test differs from the original QueryParser, showing how the\n   * precedence issue has been corrected.\n   */\n  // failing tests disabled since PrecedenceQueryParser\n  // is currently unmaintained\n  public void _testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    Query query1 = parser.parse(\"A AND B OR C AND D\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\");\n    query2 = parser.parse(\"A B C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\");\n    query2 = parser.parse(\"(+A +B) C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\");\n    query2 = parser.parse(\"+A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\");\n    query2 = parser.parse(\"A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\");\n    query2 = parser.parse(\"A (-B +C)\");\n    assertEquals(query1, query2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f8e68717c68517265937c911e1ce9f25750247","date":1274071103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#_testPrecedence().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#_testPrecedence().mjava","sourceNew":"  /**\n   * This test differs from the original QueryParser, showing how the\n   * precedence issue has been corrected.\n   */\n  // failing tests disabled since PrecedenceQueryParser\n  // is currently unmaintained\n  public void _testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    Query query1 = parser.parse(\"A AND B OR C AND D\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\");\n    query2 = parser.parse(\"A B C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\");\n    query2 = parser.parse(\"(+A +B) C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\");\n    query2 = parser.parse(\"+A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\");\n    query2 = parser.parse(\"A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\");\n    query2 = parser.parse(\"A (-B +C)\");\n    assertEquals(query1, query2);\n  }\n\n","sourceOld":"  /**\n   * This test differs from the original QueryParser, showing how the\n   * precedence issue has been corrected.\n   */\n  // failing tests disabled since PrecedenceQueryParser\n  // is currently unmaintained\n  public void _testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    Query query1 = parser.parse(\"A AND B OR C AND D\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\");\n    query2 = parser.parse(\"A B C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\");\n    query2 = parser.parse(\"(+A +B) C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\");\n    query2 = parser.parse(\"+A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\");\n    query2 = parser.parse(\"A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\");\n    query2 = parser.parse(\"A (-B +C)\");\n    assertEquals(query1, query2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecaea79e307d83311c31273b0ea89b9fdb0c5a32","date":1287584790,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#_testPrecedence().mjava","sourceNew":null,"sourceOld":"  /**\n   * This test differs from the original QueryParser, showing how the\n   * precedence issue has been corrected.\n   */\n  // failing tests disabled since PrecedenceQueryParser\n  // is currently unmaintained\n  public void _testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    Query query1 = parser.parse(\"A AND B OR C AND D\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\");\n    query2 = parser.parse(\"A B C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\");\n    query2 = parser.parse(\"(+A +B) C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\");\n    query2 = parser.parse(\"+A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\");\n    query2 = parser.parse(\"A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\");\n    query2 = parser.parse(\"A (-B +C)\");\n    assertEquals(query1, query2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8017ab6544f30f93b106e419e7298173bad77f69","date":1287608126,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#_testPrecedence().mjava","sourceNew":null,"sourceOld":"  /**\n   * This test differs from the original QueryParser, showing how the\n   * precedence issue has been corrected.\n   */\n  // failing tests disabled since PrecedenceQueryParser\n  // is currently unmaintained\n  public void _testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    Query query1 = parser.parse(\"A AND B OR C AND D\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\");\n    query2 = parser.parse(\"A B C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\");\n    query2 = parser.parse(\"(+A +B) C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\");\n    query2 = parser.parse(\"+A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\");\n    query2 = parser.parse(\"A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\");\n    query2 = parser.parse(\"A (-B +C)\");\n    assertEquals(query1, query2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#_testPrecedence().mjava","sourceNew":null,"sourceOld":"  /**\n   * This test differs from the original QueryParser, showing how the\n   * precedence issue has been corrected.\n   */\n  // failing tests disabled since PrecedenceQueryParser\n  // is currently unmaintained\n  public void _testPrecedence() throws Exception {\n    PrecedenceQueryParser parser = getParser(new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n    Query query1 = parser.parse(\"A AND B OR C AND D\");\n    Query query2 = parser.parse(\"(A AND B) OR (C AND D)\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR B C\");\n    query2 = parser.parse(\"A B C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND B C\");\n    query2 = parser.parse(\"(+A +B) C\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A AND NOT B\");\n    query2 = parser.parse(\"+A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B\");\n    query2 = parser.parse(\"A -B\");\n    assertEquals(query1, query2);\n\n    query1 = parser.parse(\"A OR NOT B AND C\");\n    query2 = parser.parse(\"A (-B +C)\");\n    assertEquals(query1, query2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["c7f8e68717c68517265937c911e1ce9f25750247"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7f8e68717c68517265937c911e1ce9f25750247":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"8017ab6544f30f93b106e419e7298173bad77f69":["c7f8e68717c68517265937c911e1ce9f25750247","ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c7f8e68717c68517265937c911e1ce9f25750247","ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32"]},"commit2Childs":{"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["c7f8e68717c68517265937c911e1ce9f25750247"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"c7f8e68717c68517265937c911e1ce9f25750247":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32","8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"8017ab6544f30f93b106e419e7298173bad77f69":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}