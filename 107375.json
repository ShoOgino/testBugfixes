{"path":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testIntervalDisjunction().mjava","commits":[{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testIntervalDisjunction().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testIntervalDisjunction().mjava","sourceNew":"  public void testIntervalDisjunction() throws IOException {\n    IntervalsSource source = Intervals.or(Intervals.term(\"pease\"), Intervals.term(\"hot\"), Intervals.term(\"notMatching\"));\n    checkIntervals(source, \"field1\", 4, new int[][]{\n        {},\n        { 0, 0, 2, 2, 3, 3, 6, 6, 17, 17},\n        { 0, 0, 3, 3, 5, 5, 6, 6, 21, 21},\n        { 3, 3, 7, 7 },\n        { 0, 0, 2, 2, 3, 3, 6, 6, 17, 17},\n        {}\n    });\n    assertNull(getMatches(source, 0, \"field1\"));\n    MatchesIterator mi = getMatches(source, 3, \"field1\");\n    assertMatch(mi, 3, 3, 15, 18);\n    assertNull(mi.getSubMatches());\n    assertMatch(mi, 7, 7, 31, 36);\n    assertNull(mi.getSubMatches());\n    assertFalse(mi.next());\n\n    assertEquals(1, source.minExtent());\n  }\n\n","sourceOld":"  public void testIntervalDisjunction() throws IOException {\n    IntervalsSource source = Intervals.or(Intervals.term(\"pease\"), Intervals.term(\"hot\"), Intervals.term(\"notMatching\"));\n    checkIntervals(source, \"field1\", 4, new int[][]{\n        {},\n        { 0, 0, 2, 2, 3, 3, 6, 6, 17, 17},\n        { 0, 0, 3, 3, 5, 5, 6, 6, 21, 21},\n        { 3, 3, 7, 7 },\n        { 0, 0, 2, 2, 3, 3, 6, 6, 17, 17},\n        {}\n    });\n    assertNull(getMatches(source, 0, \"field1\"));\n    MatchesIterator mi = getMatches(source, 3, \"field1\");\n    assertMatch(mi, 3, 3, 15, 18);\n    assertNull(mi.getSubMatches());\n    assertMatch(mi, 7, 7, 31, 36);\n    assertNull(mi.getSubMatches());\n    assertFalse(mi.next());\n\n    assertEquals(1, source.minExtent());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed67e557f509069144486ee34fd0275a6dcbe991","date":1574418540,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testIntervalDisjunction().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testIntervalDisjunction().mjava","sourceNew":"  public void testIntervalDisjunction() throws IOException {\n    IntervalsSource source = Intervals.or(Intervals.term(\"pease\"), Intervals.term(\"hot\"), Intervals.term(\"notMatching\"));\n    checkIntervals(source, \"field1\", 4, new int[][]{\n        {},\n        { 0, 0, 2, 2, 3, 3, 6, 6, 17, 17},\n        { 0, 0, 3, 3, 5, 5, 6, 6, 21, 21},\n        { 3, 3, 7, 7 },\n        { 0, 0, 2, 2, 3, 3, 6, 6, 17, 17},\n        {}\n    });\n    assertNull(getMatches(source, 0, \"field1\"));\n    MatchesIterator mi = getMatches(source, 3, \"field1\");\n    assertMatch(mi, 3, 3, 15, 18);\n    assertNull(mi.getSubMatches());\n    assertMatch(mi, 7, 7, 31, 36);\n    assertNull(mi.getSubMatches());\n    assertFalse(mi.next());\n\n    assertEquals(1, source.minExtent());\n\n    checkVisits(source, 4, \"pease\", \"hot\", \"notMatching\");\n  }\n\n","sourceOld":"  public void testIntervalDisjunction() throws IOException {\n    IntervalsSource source = Intervals.or(Intervals.term(\"pease\"), Intervals.term(\"hot\"), Intervals.term(\"notMatching\"));\n    checkIntervals(source, \"field1\", 4, new int[][]{\n        {},\n        { 0, 0, 2, 2, 3, 3, 6, 6, 17, 17},\n        { 0, 0, 3, 3, 5, 5, 6, 6, 21, 21},\n        { 3, 3, 7, 7 },\n        { 0, 0, 2, 2, 3, 3, 6, 6, 17, 17},\n        {}\n    });\n    assertNull(getMatches(source, 0, \"field1\"));\n    MatchesIterator mi = getMatches(source, 3, \"field1\");\n    assertMatch(mi, 3, 3, 15, 18);\n    assertNull(mi.getSubMatches());\n    assertMatch(mi, 7, 7, 31, 36);\n    assertNull(mi.getSubMatches());\n    assertFalse(mi.next());\n\n    assertEquals(1, source.minExtent());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68a600ba48cf2abfb5af305ebbf96bb6e2d820ea","date":1574601528,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testIntervalDisjunction().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testIntervalDisjunction().mjava","sourceNew":"  public void testIntervalDisjunction() throws IOException {\n    IntervalsSource source = Intervals.or(Intervals.term(\"pease\"), Intervals.term(\"hot\"), Intervals.term(\"notMatching\"));\n    checkIntervals(source, \"field1\", 4, new int[][]{\n        {},\n        { 0, 0, 2, 2, 3, 3, 6, 6, 17, 17},\n        { 0, 0, 3, 3, 5, 5, 6, 6, 21, 21},\n        { 3, 3, 7, 7 },\n        { 0, 0, 2, 2, 3, 3, 6, 6, 17, 17},\n        {}\n    });\n    assertNull(getMatches(source, 0, \"field1\"));\n    MatchesIterator mi = getMatches(source, 3, \"field1\");\n    assertMatch(mi, 3, 3, 15, 18);\n    assertEquals(new TermQuery(new Term(\"field1\",\"hot\")), mi.getQuery());\n    assertNull(mi.getSubMatches());\n    assertMatch(mi, 7, 7, 31, 36);\n    assertEquals(new TermQuery(new Term(\"field1\",\"pease\")), mi.getQuery());\n    assertNull(mi.getSubMatches());\n    assertFalse(mi.next());\n\n    assertEquals(1, source.minExtent());\n\n    checkVisits(source, 4, \"pease\", \"hot\", \"notMatching\");\n  }\n\n","sourceOld":"  public void testIntervalDisjunction() throws IOException {\n    IntervalsSource source = Intervals.or(Intervals.term(\"pease\"), Intervals.term(\"hot\"), Intervals.term(\"notMatching\"));\n    checkIntervals(source, \"field1\", 4, new int[][]{\n        {},\n        { 0, 0, 2, 2, 3, 3, 6, 6, 17, 17},\n        { 0, 0, 3, 3, 5, 5, 6, 6, 21, 21},\n        { 3, 3, 7, 7 },\n        { 0, 0, 2, 2, 3, 3, 6, 6, 17, 17},\n        {}\n    });\n    assertNull(getMatches(source, 0, \"field1\"));\n    MatchesIterator mi = getMatches(source, 3, \"field1\");\n    assertMatch(mi, 3, 3, 15, 18);\n    assertNull(mi.getSubMatches());\n    assertMatch(mi, 7, 7, 31, 36);\n    assertNull(mi.getSubMatches());\n    assertFalse(mi.next());\n\n    assertEquals(1, source.minExtent());\n\n    checkVisits(source, 4, \"pease\", \"hot\", \"notMatching\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"68a600ba48cf2abfb5af305ebbf96bb6e2d820ea":["ed67e557f509069144486ee34fd0275a6dcbe991"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ed67e557f509069144486ee34fd0275a6dcbe991":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68a600ba48cf2abfb5af305ebbf96bb6e2d820ea"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["ed67e557f509069144486ee34fd0275a6dcbe991"],"68a600ba48cf2abfb5af305ebbf96bb6e2d820ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"ed67e557f509069144486ee34fd0275a6dcbe991":["68a600ba48cf2abfb5af305ebbf96bb6e2d820ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}