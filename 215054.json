{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testStopwords().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testStopwords().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testStopwords().mjava","sourceNew":"  public void testStopwords() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    qp.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopSet, true));\n\n    Query result = qp.parse(\"a:the OR a:foo\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\n        \"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\",\n        \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE)\n      System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","sourceOld":"  public void testStopwords() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    qp.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopSet, true));\n\n    Query result = qp.parse(\"a:the OR a:foo\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\n        \"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\",\n        \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE)\n      System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testStopwords().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testStopwords().mjava","sourceNew":"  public void testStopwords() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    qp.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopSet));\n\n    Query result = qp.parse(\"a:the OR a:foo\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\n        \"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\",\n        \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE)\n      System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","sourceOld":"  public void testStopwords() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    qp.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopSet, true));\n\n    Query result = qp.parse(\"a:the OR a:foo\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\n        \"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\",\n        \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE)\n      System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testStopwords().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testStopwords().mjava","sourceNew":"  public void testStopwords() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toLightAutomaton());\n    qp.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopSet));\n\n    Query result = qp.parse(\"a:the OR a:foo\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\n        \"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\",\n        \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE)\n      System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","sourceOld":"  public void testStopwords() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    qp.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopSet));\n\n    Query result = qp.parse(\"a:the OR a:foo\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\n        \"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\",\n        \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE)\n      System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testStopwords().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testStopwords().mjava","sourceNew":"  public void testStopwords() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    qp.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopSet));\n\n    Query result = qp.parse(\"a:the OR a:foo\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\n        \"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\",\n        \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE)\n      System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","sourceOld":"  public void testStopwords() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toLightAutomaton());\n    qp.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopSet));\n\n    Query result = qp.parse(\"a:the OR a:foo\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\n        \"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\",\n        \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE)\n      System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testStopwords().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testStopwords().mjava","sourceNew":"  public void testStopwords() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    qp.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopSet));\n\n    Query result = qp.parse(\"a:the OR a:foo\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a MatchNoDocsQuery\", result instanceof MatchNoDocsQuery);\n    result = qp.parse(\"a:woo OR a:the\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\n        \"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\",\n        \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE)\n      System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","sourceOld":"  public void testStopwords() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    qp.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopSet));\n\n    Query result = qp.parse(\"a:the OR a:foo\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 0, ((BooleanQuery) result).clauses().size() == 0);\n    result = qp.parse(\"a:woo OR a:the\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\n        \"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\",\n        \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE)\n      System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testStopwords().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testStopwords().mjava","sourceNew":"  public void testStopwords() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    qp.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopSet));\n\n    Query result = qp.parse(\"a:the OR a:foo\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a MatchNoDocsQuery\", result instanceof MatchNoDocsQuery);\n    result = qp.parse(\"a:woo OR a:the\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\n        \"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\",\n        \"a\");\n    Query expected = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"fieldX\", \"xxxxx\")), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"fieldy\", \"xxxxxxxx\")), Occur.SHOULD)\n        .build();\n    expected = new BoostQuery(expected, 2f);\n    assertEquals(expected, result);\n  }\n\n","sourceOld":"  public void testStopwords() throws Exception {\n    StandardQueryParser qp = new StandardQueryParser();\n    CharacterRunAutomaton stopSet = new CharacterRunAutomaton(new RegExp(\"the|foo\").toAutomaton());\n    qp.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopSet));\n\n    Query result = qp.parse(\"a:the OR a:foo\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a MatchNoDocsQuery\", result instanceof MatchNoDocsQuery);\n    result = qp.parse(\"a:woo OR a:the\", \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a TermQuery\", result instanceof TermQuery);\n    result = qp.parse(\n        \"(fieldX:xxxxx OR fieldy:xxxxxxxx)^2 AND (fieldx:the OR fieldy:foo)\",\n        \"a\");\n    assertNotNull(\"result is null and it shouldn't be\", result);\n    assertTrue(\"result is not a BooleanQuery\", result instanceof BooleanQuery);\n    if (VERBOSE)\n      System.out.println(\"Result: \" + result);\n    assertTrue(((BooleanQuery) result).clauses().size() + \" does not equal: \"\n        + 2, ((BooleanQuery) result).clauses().size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}