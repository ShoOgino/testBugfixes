{"path":"lucene/src/java/org/apache/lucene/index/SegmentInfos#pruneDeletedSegments().mjava","commits":[{"id":"cfd641edd796340315609425e9f70819e6d9ef0e","date":1295970051,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#pruneDeletedSegments().mjava","pathOld":"/dev/null","sourceNew":"  /** Prunes any segment whose docs are all deleted. */\n  public void pruneDeletedSegments() {\n    int segIdx = 0;\n    while(segIdx < size()) {\n      final SegmentInfo info = info(segIdx);\n      if (info.getDelCount() == info.docCount) {\n        remove(segIdx);\n      } else {\n        segIdx++;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#pruneDeletedSegments().mjava","pathOld":"/dev/null","sourceNew":"  /** Prunes any segment whose docs are all deleted. */\n  public void pruneDeletedSegments() {\n    int segIdx = 0;\n    while(segIdx < size()) {\n      final SegmentInfo info = info(segIdx);\n      if (info.getDelCount() == info.docCount) {\n        remove(segIdx);\n      } else {\n        segIdx++;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#pruneDeletedSegments().mjava","pathOld":"/dev/null","sourceNew":"  /** Prunes any segment whose docs are all deleted. */\n  public void pruneDeletedSegments() {\n    int segIdx = 0;\n    while(segIdx < size()) {\n      final SegmentInfo info = info(segIdx);\n      if (info.getDelCount() == info.docCount) {\n        remove(segIdx);\n      } else {\n        segIdx++;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#pruneDeletedSegments().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#pruneDeletedSegments().mjava","sourceNew":"  /** Prunes any segment whose docs are all deleted. */\n  public void pruneDeletedSegments() {\n    for(final Iterator<SegmentInfo> it = segments.iterator(); it.hasNext();) {\n      final SegmentInfo info = it.next();\n      if (info.getDelCount() == info.docCount) {\n        it.remove();\n        segmentSet.remove(info);\n      }\n    }\n    assert segmentSet.size() == segments.size();\n  }\n\n","sourceOld":"  /** Prunes any segment whose docs are all deleted. */\n  public void pruneDeletedSegments() {\n    int segIdx = 0;\n    while(segIdx < size()) {\n      final SegmentInfo info = info(segIdx);\n      if (info.getDelCount() == info.docCount) {\n        remove(segIdx);\n      } else {\n        segIdx++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#pruneDeletedSegments().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#pruneDeletedSegments().mjava","sourceNew":"  /** Prunes any segment whose docs are all deleted. */\n  public void pruneDeletedSegments() {\n    for(final Iterator<SegmentInfo> it = segments.iterator(); it.hasNext();) {\n      final SegmentInfo info = it.next();\n      if (info.getDelCount() == info.docCount) {\n        it.remove();\n        segmentSet.remove(info);\n      }\n    }\n    assert segmentSet.size() == segments.size();\n  }\n\n","sourceOld":"  /** Prunes any segment whose docs are all deleted. */\n  public void pruneDeletedSegments() {\n    int segIdx = 0;\n    while(segIdx < size()) {\n      final SegmentInfo info = info(segIdx);\n      if (info.getDelCount() == info.docCount) {\n        remove(segIdx);\n      } else {\n        segIdx++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#pruneDeletedSegments().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#pruneDeletedSegments().mjava","sourceNew":"  /** Prunes any segment whose docs are all deleted. */\n  public void pruneDeletedSegments() {\n    for(final Iterator<SegmentInfo> it = segments.iterator(); it.hasNext();) {\n      final SegmentInfo info = it.next();\n      if (info.getDelCount() == info.docCount) {\n        it.remove();\n        segmentSet.remove(info);\n      }\n    }\n    assert segmentSet.size() == segments.size();\n  }\n\n","sourceOld":"  /** Prunes any segment whose docs are all deleted. */\n  public void pruneDeletedSegments() {\n    int segIdx = 0;\n    while(segIdx < size()) {\n      final SegmentInfo info = info(segIdx);\n      if (info.getDelCount() == info.docCount) {\n        remove(segIdx);\n      } else {\n        segIdx++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#pruneDeletedSegments().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#pruneDeletedSegments().mjava","sourceNew":"  /** Prunes any segment whose docs are all deleted. */\n  public void pruneDeletedSegments() {\n    for(final Iterator<SegmentInfo> it = segments.iterator(); it.hasNext();) {\n      final SegmentInfo info = it.next();\n      if (info.getDelCount() == info.docCount) {\n        it.remove();\n        final boolean didRemove = segmentSet.remove(info);\n        assert didRemove;\n      }\n    }\n    assert segmentSet.size() == segments.size();\n  }\n\n","sourceOld":"  /** Prunes any segment whose docs are all deleted. */\n  public void pruneDeletedSegments() {\n    for(final Iterator<SegmentInfo> it = segments.iterator(); it.hasNext();) {\n      final SegmentInfo info = it.next();\n      if (info.getDelCount() == info.docCount) {\n        it.remove();\n        segmentSet.remove(info);\n      }\n    }\n    assert segmentSet.size() == segments.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#pruneDeletedSegments().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#pruneDeletedSegments().mjava","sourceNew":"  /** Prunes any segment whose docs are all deleted. */\n  public void pruneDeletedSegments() {\n    for(final Iterator<SegmentInfo> it = segments.iterator(); it.hasNext();) {\n      final SegmentInfo info = it.next();\n      if (info.getDelCount() == info.docCount) {\n        it.remove();\n        final boolean didRemove = segmentSet.remove(info);\n        assert didRemove;\n      }\n    }\n    assert segmentSet.size() == segments.size();\n  }\n\n","sourceOld":"  /** Prunes any segment whose docs are all deleted. */\n  public void pruneDeletedSegments() {\n    for(final Iterator<SegmentInfo> it = segments.iterator(); it.hasNext();) {\n      final SegmentInfo info = it.next();\n      if (info.getDelCount() == info.docCount) {\n        it.remove();\n        final boolean didRemove = segmentSet.remove(info);\n        assert didRemove;\n      }\n    }\n    assert segmentSet.size() == segments.size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["cfd641edd796340315609425e9f70819e6d9ef0e"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["29ef99d61cda9641b6250bf9567329a6e65f901d","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"a3776dccca01c11e7046323cfad46a3b4a471233":["cfd641edd796340315609425e9f70819e6d9ef0e","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cfd641edd796340315609425e9f70819e6d9ef0e"],"cfd641edd796340315609425e9f70819e6d9ef0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ce667c6d3400b22523701c549c0d35e26da8b46":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cfd641edd796340315609425e9f70819e6d9ef0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","9ce667c6d3400b22523701c549c0d35e26da8b46"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"cfd641edd796340315609425e9f70819e6d9ef0e":["786a4d25ca958a1f315a9d6a74f0441fdafcd522","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","cfd641edd796340315609425e9f70819e6d9ef0e","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}