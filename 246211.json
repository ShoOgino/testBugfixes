{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsSeekingEquals(String,Terms,Terms).mjava","commits":[{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsSeekingEquals(String,Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertTermsSeeking(Terms,Terms).mjava","sourceNew":"  private void assertTermsSeekingEquals(String info, Terms leftTerms, Terms rightTerms) throws IOException {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n\n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n\n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        } else if (code == 3) {\n          switch (random().nextInt(3)) {\n            case 0:\n              tests.add(new BytesRef()); // before the first term\n              break;\n            case 1:\n              tests.add(new BytesRef(new byte[] {(byte) 0xFF, (byte) 0xFF})); // past the last term\n              break;\n            case 2:\n              tests.add(new BytesRef(_TestUtil.randomSimpleString(random()))); // random term\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      numPasses++;\n    }\n\n    rightEnum = rightTerms.iterator(rightEnum);\n\n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n\n    for (BytesRef b : shuffledTests) {\n      if (rarely()) {\n        // reuse the enums\n        leftEnum = leftTerms.iterator(leftEnum);\n        rightEnum = rightTerms.iterator(rightEnum);\n      }\n\n      final boolean useCache = random().nextBoolean();\n      final boolean seekExact = random().nextBoolean();\n\n      if (seekExact) {\n        assertEquals(info, leftEnum.seekExact(b, useCache), rightEnum.seekExact(b, useCache));\n      } else {\n        SeekStatus leftStatus = leftEnum.seekCeil(b, useCache);\n        SeekStatus rightStatus = rightEnum.seekCeil(b, useCache);\n        assertEquals(info, leftStatus, rightStatus);\n        if (leftStatus != SeekStatus.END) {\n          assertEquals(info, leftEnum.term(), rightEnum.term());\n          assertTermStatsEquals(info, leftEnum, rightEnum);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n\n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n\n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        } else if (code == 3) {\n          switch (random().nextInt(3)) {\n            case 0:\n              tests.add(new BytesRef()); // before the first term\n              break;\n            case 1:\n              tests.add(new BytesRef(new byte[] {(byte) 0xFF, (byte) 0xFF})); // past the last term\n              break;\n            case 2:\n              tests.add(new BytesRef(_TestUtil.randomSimpleString(random()))); // random term\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      numPasses++;\n    }\n\n    rightEnum = rightTerms.iterator(rightEnum);\n\n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n\n    for (BytesRef b : shuffledTests) {\n      if (rarely()) {\n        // reuse the enums\n        leftEnum = leftTerms.iterator(leftEnum);\n        rightEnum = rightTerms.iterator(rightEnum);\n      }\n\n      final boolean useCache = random().nextBoolean();\n      final boolean seekExact = random().nextBoolean();\n\n      if (seekExact) {\n        assertEquals(info, leftEnum.seekExact(b, useCache), rightEnum.seekExact(b, useCache));\n      } else {\n        SeekStatus leftStatus = leftEnum.seekCeil(b, useCache);\n        SeekStatus rightStatus = rightEnum.seekCeil(b, useCache);\n        assertEquals(info, leftStatus, rightStatus);\n        if (leftStatus != SeekStatus.END) {\n          assertEquals(info, leftEnum.term(), rightEnum.term());\n          assertTermStats(leftEnum, rightEnum);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsSeekingEquals(String,Terms,Terms).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsSeekingEquals(String,Terms,Terms).mjava","sourceNew":"  private void assertTermsSeekingEquals(String info, Terms leftTerms, Terms rightTerms) throws IOException {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n\n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n\n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        } else if (code == 3) {\n          switch (random().nextInt(3)) {\n            case 0:\n              tests.add(new BytesRef()); // before the first term\n              break;\n            case 1:\n              tests.add(new BytesRef(new byte[] {(byte) 0xFF, (byte) 0xFF})); // past the last term\n              break;\n            case 2:\n              tests.add(new BytesRef(_TestUtil.randomSimpleString(random()))); // random term\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      numPasses++;\n    }\n\n    rightEnum = rightTerms.iterator(rightEnum);\n\n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n\n    for (BytesRef b : shuffledTests) {\n      if (rarely()) {\n        // reuse the enums\n        leftEnum = leftTerms.iterator(leftEnum);\n        rightEnum = rightTerms.iterator(rightEnum);\n      }\n\n      final boolean seekExact = random().nextBoolean();\n\n      if (seekExact) {\n        assertEquals(info, leftEnum.seekExact(b), rightEnum.seekExact(b));\n      } else {\n        SeekStatus leftStatus = leftEnum.seekCeil(b);\n        SeekStatus rightStatus = rightEnum.seekCeil(b);\n        assertEquals(info, leftStatus, rightStatus);\n        if (leftStatus != SeekStatus.END) {\n          assertEquals(info, leftEnum.term(), rightEnum.term());\n          assertTermStatsEquals(info, leftEnum, rightEnum);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTermsSeekingEquals(String info, Terms leftTerms, Terms rightTerms) throws IOException {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n\n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n\n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        } else if (code == 3) {\n          switch (random().nextInt(3)) {\n            case 0:\n              tests.add(new BytesRef()); // before the first term\n              break;\n            case 1:\n              tests.add(new BytesRef(new byte[] {(byte) 0xFF, (byte) 0xFF})); // past the last term\n              break;\n            case 2:\n              tests.add(new BytesRef(_TestUtil.randomSimpleString(random()))); // random term\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      numPasses++;\n    }\n\n    rightEnum = rightTerms.iterator(rightEnum);\n\n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n\n    for (BytesRef b : shuffledTests) {\n      if (rarely()) {\n        // reuse the enums\n        leftEnum = leftTerms.iterator(leftEnum);\n        rightEnum = rightTerms.iterator(rightEnum);\n      }\n\n      final boolean useCache = random().nextBoolean();\n      final boolean seekExact = random().nextBoolean();\n\n      if (seekExact) {\n        assertEquals(info, leftEnum.seekExact(b, useCache), rightEnum.seekExact(b, useCache));\n      } else {\n        SeekStatus leftStatus = leftEnum.seekCeil(b, useCache);\n        SeekStatus rightStatus = rightEnum.seekCeil(b, useCache);\n        assertEquals(info, leftStatus, rightStatus);\n        if (leftStatus != SeekStatus.END) {\n          assertEquals(info, leftEnum.term(), rightEnum.term());\n          assertTermStatsEquals(info, leftEnum, rightEnum);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsSeekingEquals(String,Terms,Terms).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsSeekingEquals(String,Terms,Terms).mjava","sourceNew":"  private void assertTermsSeekingEquals(String info, Terms leftTerms, Terms rightTerms) throws IOException {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n\n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n\n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        } else if (code == 3) {\n          switch (random().nextInt(3)) {\n            case 0:\n              tests.add(new BytesRef()); // before the first term\n              break;\n            case 1:\n              tests.add(new BytesRef(new byte[] {(byte) 0xFF, (byte) 0xFF})); // past the last term\n              break;\n            case 2:\n              tests.add(new BytesRef(_TestUtil.randomSimpleString(random()))); // random term\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      numPasses++;\n    }\n\n    rightEnum = rightTerms.iterator(rightEnum);\n\n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n\n    for (BytesRef b : shuffledTests) {\n      if (rarely()) {\n        // reuse the enums\n        leftEnum = leftTerms.iterator(leftEnum);\n        rightEnum = rightTerms.iterator(rightEnum);\n      }\n\n      final boolean seekExact = random().nextBoolean();\n\n      if (seekExact) {\n        assertEquals(info, leftEnum.seekExact(b), rightEnum.seekExact(b));\n      } else {\n        SeekStatus leftStatus = leftEnum.seekCeil(b);\n        SeekStatus rightStatus = rightEnum.seekCeil(b);\n        assertEquals(info, leftStatus, rightStatus);\n        if (leftStatus != SeekStatus.END) {\n          assertEquals(info, leftEnum.term(), rightEnum.term());\n          assertTermStatsEquals(info, leftEnum, rightEnum);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTermsSeekingEquals(String info, Terms leftTerms, Terms rightTerms) throws IOException {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n\n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n\n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        } else if (code == 3) {\n          switch (random().nextInt(3)) {\n            case 0:\n              tests.add(new BytesRef()); // before the first term\n              break;\n            case 1:\n              tests.add(new BytesRef(new byte[] {(byte) 0xFF, (byte) 0xFF})); // past the last term\n              break;\n            case 2:\n              tests.add(new BytesRef(_TestUtil.randomSimpleString(random()))); // random term\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      numPasses++;\n    }\n\n    rightEnum = rightTerms.iterator(rightEnum);\n\n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n\n    for (BytesRef b : shuffledTests) {\n      if (rarely()) {\n        // reuse the enums\n        leftEnum = leftTerms.iterator(leftEnum);\n        rightEnum = rightTerms.iterator(rightEnum);\n      }\n\n      final boolean useCache = random().nextBoolean();\n      final boolean seekExact = random().nextBoolean();\n\n      if (seekExact) {\n        assertEquals(info, leftEnum.seekExact(b, useCache), rightEnum.seekExact(b, useCache));\n      } else {\n        SeekStatus leftStatus = leftEnum.seekCeil(b, useCache);\n        SeekStatus rightStatus = rightEnum.seekCeil(b, useCache);\n        assertEquals(info, leftStatus, rightStatus);\n        if (leftStatus != SeekStatus.END) {\n          assertEquals(info, leftEnum.term(), rightEnum.term());\n          assertTermStatsEquals(info, leftEnum, rightEnum);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsSeekingEquals(String,Terms,Terms).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsSeekingEquals(String,Terms,Terms).mjava","sourceNew":"  private void assertTermsSeekingEquals(String info, Terms leftTerms, Terms rightTerms) throws IOException {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n\n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n\n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        } else if (code == 3) {\n          switch (random().nextInt(3)) {\n            case 0:\n              tests.add(new BytesRef()); // before the first term\n              break;\n            case 1:\n              tests.add(new BytesRef(new byte[] {(byte) 0xFF, (byte) 0xFF})); // past the last term\n              break;\n            case 2:\n              tests.add(new BytesRef(TestUtil.randomSimpleString(random()))); // random term\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      numPasses++;\n    }\n\n    rightEnum = rightTerms.iterator(rightEnum);\n\n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n\n    for (BytesRef b : shuffledTests) {\n      if (rarely()) {\n        // reuse the enums\n        leftEnum = leftTerms.iterator(leftEnum);\n        rightEnum = rightTerms.iterator(rightEnum);\n      }\n\n      final boolean seekExact = random().nextBoolean();\n\n      if (seekExact) {\n        assertEquals(info, leftEnum.seekExact(b), rightEnum.seekExact(b));\n      } else {\n        SeekStatus leftStatus = leftEnum.seekCeil(b);\n        SeekStatus rightStatus = rightEnum.seekCeil(b);\n        assertEquals(info, leftStatus, rightStatus);\n        if (leftStatus != SeekStatus.END) {\n          assertEquals(info, leftEnum.term(), rightEnum.term());\n          assertTermStatsEquals(info, leftEnum, rightEnum);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTermsSeekingEquals(String info, Terms leftTerms, Terms rightTerms) throws IOException {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n\n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n\n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        } else if (code == 3) {\n          switch (random().nextInt(3)) {\n            case 0:\n              tests.add(new BytesRef()); // before the first term\n              break;\n            case 1:\n              tests.add(new BytesRef(new byte[] {(byte) 0xFF, (byte) 0xFF})); // past the last term\n              break;\n            case 2:\n              tests.add(new BytesRef(_TestUtil.randomSimpleString(random()))); // random term\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      numPasses++;\n    }\n\n    rightEnum = rightTerms.iterator(rightEnum);\n\n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n\n    for (BytesRef b : shuffledTests) {\n      if (rarely()) {\n        // reuse the enums\n        leftEnum = leftTerms.iterator(leftEnum);\n        rightEnum = rightTerms.iterator(rightEnum);\n      }\n\n      final boolean seekExact = random().nextBoolean();\n\n      if (seekExact) {\n        assertEquals(info, leftEnum.seekExact(b), rightEnum.seekExact(b));\n      } else {\n        SeekStatus leftStatus = leftEnum.seekCeil(b);\n        SeekStatus rightStatus = rightEnum.seekCeil(b);\n        assertEquals(info, leftStatus, rightStatus);\n        if (leftStatus != SeekStatus.END) {\n          assertEquals(info, leftEnum.term(), rightEnum.term());\n          assertTermStatsEquals(info, leftEnum, rightEnum);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsSeekingEquals(String,Terms,Terms).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsSeekingEquals(String,Terms,Terms).mjava","sourceNew":"  private void assertTermsSeekingEquals(String info, Terms leftTerms, Terms rightTerms) throws IOException {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n\n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n\n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        } else if (code == 3) {\n          switch (random().nextInt(3)) {\n            case 0:\n              tests.add(new BytesRef()); // before the first term\n              break;\n            case 1:\n              tests.add(new BytesRef(new byte[] {(byte) 0xFF, (byte) 0xFF})); // past the last term\n              break;\n            case 2:\n              tests.add(new BytesRef(TestUtil.randomSimpleString(random()))); // random term\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      numPasses++;\n    }\n\n    rightEnum = rightTerms.iterator(rightEnum);\n\n    ArrayList<BytesRef> shuffledTests = new ArrayList<>(tests);\n    Collections.shuffle(shuffledTests, random);\n\n    for (BytesRef b : shuffledTests) {\n      if (rarely()) {\n        // reuse the enums\n        leftEnum = leftTerms.iterator(leftEnum);\n        rightEnum = rightTerms.iterator(rightEnum);\n      }\n\n      final boolean seekExact = random().nextBoolean();\n\n      if (seekExact) {\n        assertEquals(info, leftEnum.seekExact(b), rightEnum.seekExact(b));\n      } else {\n        SeekStatus leftStatus = leftEnum.seekCeil(b);\n        SeekStatus rightStatus = rightEnum.seekCeil(b);\n        assertEquals(info, leftStatus, rightStatus);\n        if (leftStatus != SeekStatus.END) {\n          assertEquals(info, leftEnum.term(), rightEnum.term());\n          assertTermStatsEquals(info, leftEnum, rightEnum);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTermsSeekingEquals(String info, Terms leftTerms, Terms rightTerms) throws IOException {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n\n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n\n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        } else if (code == 3) {\n          switch (random().nextInt(3)) {\n            case 0:\n              tests.add(new BytesRef()); // before the first term\n              break;\n            case 1:\n              tests.add(new BytesRef(new byte[] {(byte) 0xFF, (byte) 0xFF})); // past the last term\n              break;\n            case 2:\n              tests.add(new BytesRef(TestUtil.randomSimpleString(random()))); // random term\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      numPasses++;\n    }\n\n    rightEnum = rightTerms.iterator(rightEnum);\n\n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n\n    for (BytesRef b : shuffledTests) {\n      if (rarely()) {\n        // reuse the enums\n        leftEnum = leftTerms.iterator(leftEnum);\n        rightEnum = rightTerms.iterator(rightEnum);\n      }\n\n      final boolean seekExact = random().nextBoolean();\n\n      if (seekExact) {\n        assertEquals(info, leftEnum.seekExact(b), rightEnum.seekExact(b));\n      } else {\n        SeekStatus leftStatus = leftEnum.seekCeil(b);\n        SeekStatus rightStatus = rightEnum.seekCeil(b);\n        assertEquals(info, leftStatus, rightStatus);\n        if (leftStatus != SeekStatus.END) {\n          assertEquals(info, leftEnum.term(), rightEnum.term());\n          assertTermStatsEquals(info, leftEnum, rightEnum);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsSeekingEquals(String,Terms,Terms).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertTermsSeekingEquals(String,Terms,Terms).mjava","sourceNew":"  private void assertTermsSeekingEquals(String info, Terms leftTerms, Terms rightTerms) throws IOException {\n\n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n\n    TermsEnum leftEnum = null;\n\n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator();\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        } else if (code == 3) {\n          switch (random().nextInt(3)) {\n            case 0:\n              tests.add(new BytesRef()); // before the first term\n              break;\n            case 1:\n              tests.add(new BytesRef(new byte[] {(byte) 0xFF, (byte) 0xFF})); // past the last term\n              break;\n            case 2:\n              tests.add(new BytesRef(TestUtil.randomSimpleString(random()))); // random term\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      numPasses++;\n    }\n\n    TermsEnum rightEnum = rightTerms.iterator();\n\n    ArrayList<BytesRef> shuffledTests = new ArrayList<>(tests);\n    Collections.shuffle(shuffledTests, random);\n\n    for (BytesRef b : shuffledTests) {\n      if (rarely()) {\n        // make new enums\n        leftEnum = leftTerms.iterator();\n        rightEnum = rightTerms.iterator();\n      }\n\n      final boolean seekExact = random().nextBoolean();\n\n      if (seekExact) {\n        assertEquals(info, leftEnum.seekExact(b), rightEnum.seekExact(b));\n      } else {\n        SeekStatus leftStatus = leftEnum.seekCeil(b);\n        SeekStatus rightStatus = rightEnum.seekCeil(b);\n        assertEquals(info, leftStatus, rightStatus);\n        if (leftStatus != SeekStatus.END) {\n          assertEquals(info, leftEnum.term(), rightEnum.term());\n          assertTermStatsEquals(info, leftEnum, rightEnum);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTermsSeekingEquals(String info, Terms leftTerms, Terms rightTerms) throws IOException {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n\n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n\n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        } else if (code == 3) {\n          switch (random().nextInt(3)) {\n            case 0:\n              tests.add(new BytesRef()); // before the first term\n              break;\n            case 1:\n              tests.add(new BytesRef(new byte[] {(byte) 0xFF, (byte) 0xFF})); // past the last term\n              break;\n            case 2:\n              tests.add(new BytesRef(TestUtil.randomSimpleString(random()))); // random term\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n      }\n      numPasses++;\n    }\n\n    rightEnum = rightTerms.iterator(rightEnum);\n\n    ArrayList<BytesRef> shuffledTests = new ArrayList<>(tests);\n    Collections.shuffle(shuffledTests, random);\n\n    for (BytesRef b : shuffledTests) {\n      if (rarely()) {\n        // reuse the enums\n        leftEnum = leftTerms.iterator(leftEnum);\n        rightEnum = rightTerms.iterator(rightEnum);\n      }\n\n      final boolean seekExact = random().nextBoolean();\n\n      if (seekExact) {\n        assertEquals(info, leftEnum.seekExact(b), rightEnum.seekExact(b));\n      } else {\n        SeekStatus leftStatus = leftEnum.seekCeil(b);\n        SeekStatus rightStatus = rightEnum.seekCeil(b);\n        assertEquals(info, leftStatus, rightStatus);\n        if (leftStatus != SeekStatus.END) {\n          assertEquals(info, leftEnum.term(), rightEnum.term());\n          assertTermStatsEquals(info, leftEnum, rightEnum);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["6613659748fe4411a7dcf85266e55db1f95f7315"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}