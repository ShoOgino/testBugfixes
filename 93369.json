{"path":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#DefaultDocValuesConsumer(PerDocWriteState,Comparator[BytesRef],boolean).mjava","commits":[{"id":"bc0b8069918917b33f361011899a1af0cdd2d462","date":1310039336,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#DefaultDocValuesConsumer(PerDocWriteState,Comparator[BytesRef],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#DefaultDocValuesConsumer(PerDocWriteState,Comparator[BytesRef]).mjava","sourceNew":"  public DefaultDocValuesConsumer(PerDocWriteState state, Comparator<BytesRef> comparator, boolean useCompoundFile) throws IOException {\n    this.segmentName = state.segmentName;\n    this.codecId = state.codecId;\n    this.bytesUsed = state.bytesUsed;\n    //TODO maybe we should enable a global CFS that all codecs can pull on demand to further reduce the number of files?\n    this.directory = useCompoundFile ? state.directory.createCompoundOutput(IndexFileNames.segmentFileName(segmentName, state.codecId, IndexFileNames.COMPOUND_FILE_EXTENSION)) : state.directory;\n    this.comparator = comparator;\n    this.useCompoundFile = useCompoundFile;\n  }\n\n","sourceOld":"  public DefaultDocValuesConsumer(PerDocWriteState state, Comparator<BytesRef> comparator) {\n    this.segmentName = state.segmentName;\n    this.codecId = state.codecId;\n    this.bytesUsed = state.bytesUsed;\n    this.directory = state.directory;\n    this.comparator = comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#DefaultDocValuesConsumer(PerDocWriteState,Comparator[BytesRef],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#DefaultDocValuesConsumer(PerDocWriteState,Comparator[BytesRef]).mjava","sourceNew":"  public DefaultDocValuesConsumer(PerDocWriteState state, Comparator<BytesRef> comparator, boolean useCompoundFile) throws IOException {\n    this.segmentName = state.segmentName;\n    this.codecId = state.codecId;\n    this.bytesUsed = state.bytesUsed;\n    //TODO maybe we should enable a global CFS that all codecs can pull on demand to further reduce the number of files?\n    this.directory = useCompoundFile ? state.directory.createCompoundOutput(IndexFileNames.segmentFileName(segmentName, state.codecId, IndexFileNames.COMPOUND_FILE_EXTENSION)) : state.directory;\n    this.comparator = comparator;\n    this.useCompoundFile = useCompoundFile;\n  }\n\n","sourceOld":"  public DefaultDocValuesConsumer(PerDocWriteState state, Comparator<BytesRef> comparator) {\n    this.segmentName = state.segmentName;\n    this.codecId = state.codecId;\n    this.bytesUsed = state.bytesUsed;\n    this.directory = state.directory;\n    this.comparator = comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#DefaultDocValuesConsumer(PerDocWriteState,Comparator[BytesRef],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#DefaultDocValuesConsumer(PerDocWriteState,Comparator[BytesRef]).mjava","sourceNew":"  public DefaultDocValuesConsumer(PerDocWriteState state, Comparator<BytesRef> comparator, boolean useCompoundFile) throws IOException {\n    this.segmentName = state.segmentName;\n    this.codecId = state.codecId;\n    this.bytesUsed = state.bytesUsed;\n    this.context = state.context;\n    //TODO maybe we should enable a global CFS that all codecs can pull on demand to further reduce the number of files?\n    this.directory = useCompoundFile ? state.directory.createCompoundOutput(\n        IndexFileNames.segmentFileName(segmentName, codecId,\n            IndexFileNames.COMPOUND_FILE_EXTENSION), context) : state.directory;\n    this.comparator = comparator;\n    this.useCompoundFile = useCompoundFile;\n  }\n\n","sourceOld":"  public DefaultDocValuesConsumer(PerDocWriteState state, Comparator<BytesRef> comparator) {\n    this.segmentName = state.segmentName;\n    this.codecId = state.codecId;\n    this.bytesUsed = state.bytesUsed;\n    this.directory = state.directory;\n    this.comparator = comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#DefaultDocValuesConsumer(PerDocWriteState,Comparator[BytesRef],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#DefaultDocValuesConsumer(PerDocWriteState,Comparator[BytesRef],boolean).mjava","sourceNew":"  public DefaultDocValuesConsumer(PerDocWriteState state, Comparator<BytesRef> comparator, boolean useCompoundFile) throws IOException {\n    this.segmentName = state.segmentName;\n    this.codecId = state.codecId;\n    this.bytesUsed = state.bytesUsed;\n    this.context = state.context;\n    //TODO maybe we should enable a global CFS that all codecs can pull on demand to further reduce the number of files?\n    this.directory = useCompoundFile ? state.directory.createCompoundOutput(\n        IndexFileNames.segmentFileName(segmentName, codecId,\n            IndexFileNames.COMPOUND_FILE_EXTENSION), context) : state.directory;\n    this.comparator = comparator;\n    this.useCompoundFile = useCompoundFile;\n  }\n\n","sourceOld":"  public DefaultDocValuesConsumer(PerDocWriteState state, Comparator<BytesRef> comparator, boolean useCompoundFile) throws IOException {\n    this.segmentName = state.segmentName;\n    this.codecId = state.codecId;\n    this.bytesUsed = state.bytesUsed;\n    //TODO maybe we should enable a global CFS that all codecs can pull on demand to further reduce the number of files?\n    this.directory = useCompoundFile ? state.directory.createCompoundOutput(IndexFileNames.segmentFileName(segmentName, state.codecId, IndexFileNames.COMPOUND_FILE_EXTENSION)) : state.directory;\n    this.comparator = comparator;\n    this.useCompoundFile = useCompoundFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#DefaultDocValuesConsumer(PerDocWriteState,Comparator[BytesRef],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#DefaultDocValuesConsumer(PerDocWriteState,Comparator[BytesRef],boolean).mjava","sourceNew":"  public DefaultDocValuesConsumer(PerDocWriteState state, Comparator<BytesRef> comparator, boolean useCompoundFile) throws IOException {\n    this.segmentName = state.segmentName;\n    this.codecId = state.codecId;\n    this.bytesUsed = state.bytesUsed;\n    this.context = state.context;\n    //TODO maybe we should enable a global CFS that all codecs can pull on demand to further reduce the number of files?\n    this.directory = useCompoundFile ? state.directory.createCompoundOutput(\n        IndexFileNames.segmentFileName(segmentName, codecId,\n            IndexFileNames.COMPOUND_FILE_EXTENSION), context) : state.directory;\n    this.comparator = comparator;\n    this.useCompoundFile = useCompoundFile;\n  }\n\n","sourceOld":"  public DefaultDocValuesConsumer(PerDocWriteState state, Comparator<BytesRef> comparator, boolean useCompoundFile) throws IOException {\n    this.segmentName = state.segmentName;\n    this.codecId = state.codecId;\n    this.bytesUsed = state.bytesUsed;\n    //TODO maybe we should enable a global CFS that all codecs can pull on demand to further reduce the number of files?\n    this.directory = useCompoundFile ? state.directory.createCompoundOutput(IndexFileNames.segmentFileName(segmentName, state.codecId, IndexFileNames.COMPOUND_FILE_EXTENSION)) : state.directory;\n    this.comparator = comparator;\n    this.useCompoundFile = useCompoundFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67aadace85f701c87a4e0721eedcda25d8415a70","date":1314201925,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#DefaultDocValuesConsumer(PerDocWriteState,Comparator[BytesRef],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#DefaultDocValuesConsumer(PerDocWriteState,Comparator[BytesRef],boolean).mjava","sourceNew":"  public DefaultDocValuesConsumer(PerDocWriteState state, Comparator<BytesRef> comparator, boolean useCompoundFile) throws IOException {\n    this.segmentName = state.segmentName;\n    this.codecId = state.codecId;\n    this.bytesUsed = state.bytesUsed;\n    this.context = state.context;\n    //TODO maybe we should enable a global CFS that all codecs can pull on demand to further reduce the number of files?\n    this.directory = useCompoundFile ? new CompoundFileDirectory(state.directory,\n        IndexFileNames.segmentFileName(segmentName, codecId,\n            IndexFileNames.COMPOUND_FILE_EXTENSION), context, true) : state.directory;\n    this.comparator = comparator;\n    this.useCompoundFile = useCompoundFile;\n  }\n\n","sourceOld":"  public DefaultDocValuesConsumer(PerDocWriteState state, Comparator<BytesRef> comparator, boolean useCompoundFile) throws IOException {\n    this.segmentName = state.segmentName;\n    this.codecId = state.codecId;\n    this.bytesUsed = state.bytesUsed;\n    this.context = state.context;\n    //TODO maybe we should enable a global CFS that all codecs can pull on demand to further reduce the number of files?\n    this.directory = useCompoundFile ? state.directory.createCompoundOutput(\n        IndexFileNames.segmentFileName(segmentName, codecId,\n            IndexFileNames.COMPOUND_FILE_EXTENSION), context) : state.directory;\n    this.comparator = comparator;\n    this.useCompoundFile = useCompoundFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37f149c99eae8edb6c2f44fda36f194e0e345565","date":1317419618,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesConsumer#DefaultDocValuesConsumer(PerDocWriteState,Comparator[BytesRef],boolean).mjava","sourceNew":null,"sourceOld":"  public DefaultDocValuesConsumer(PerDocWriteState state, Comparator<BytesRef> comparator, boolean useCompoundFile) throws IOException {\n    this.segmentName = state.segmentName;\n    this.codecId = state.codecId;\n    this.bytesUsed = state.bytesUsed;\n    this.context = state.context;\n    //TODO maybe we should enable a global CFS that all codecs can pull on demand to further reduce the number of files?\n    this.directory = useCompoundFile ? new CompoundFileDirectory(state.directory,\n        IndexFileNames.segmentFileName(segmentName, codecId,\n            IndexFileNames.COMPOUND_FILE_EXTENSION), context, true) : state.directory;\n    this.comparator = comparator;\n    this.useCompoundFile = useCompoundFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc0b8069918917b33f361011899a1af0cdd2d462"],"67aadace85f701c87a4e0721eedcda25d8415a70":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc0b8069918917b33f361011899a1af0cdd2d462"],"37f149c99eae8edb6c2f44fda36f194e0e345565":["67aadace85f701c87a4e0721eedcda25d8415a70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bc0b8069918917b33f361011899a1af0cdd2d462":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["f0b9507caf22f292ac0e5e59f62db4275adf4511","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["bc0b8069918917b33f361011899a1af0cdd2d462","1291e4568eb7d9463d751627596ef14baf4c1603"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["37f149c99eae8edb6c2f44fda36f194e0e345565"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"67aadace85f701c87a4e0721eedcda25d8415a70":["37f149c99eae8edb6c2f44fda36f194e0e345565"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","bc0b8069918917b33f361011899a1af0cdd2d462"],"37f149c99eae8edb6c2f44fda36f194e0e345565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bc0b8069918917b33f361011899a1af0cdd2d462":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["67aadace85f701c87a4e0721eedcda25d8415a70","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}