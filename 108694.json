{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int).mjava","commits":[{"id":"709714c6ee47950678dd2d2ef4e0473886909226","date":1407339661,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          log.warn(\"Request to \"+getUrl+\" failed due to: \"+exc.getMessage()+\n              \", sleeping for 5 seconds before re-trying the request ...\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n          \n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n    \n    return json;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":5,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#getJson(HttpClient,String,int).mjava","sourceNew":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts, boolean isFirstAttempt) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          if (!isFirstAttempt) // only show the log warning after the second attempt fails\n            log.warn(\"Request to \"+getUrl+\" failed due to: \"+exc.getMessage()+\n                \", sleeping for 5 seconds before re-trying the request ...\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n          \n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts, false);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n    \n    return json;\n  }\n\n","sourceOld":"  /**\n   * Utility function for sending HTTP GET request to Solr with built-in retry support.\n   */\n  public static Map<String,Object> getJson(HttpClient httpClient, String getUrl, int attempts) throws Exception {\n    Map<String,Object> json = null;\n    if (attempts >= 1) {\n      try {\n        json = getJson(httpClient, getUrl);\n      } catch (Exception exc) {\n        if (--attempts > 0 && checkCommunicationError(exc)) {\n          log.warn(\"Request to \"+getUrl+\" failed due to: \"+exc.getMessage()+\n              \", sleeping for 5 seconds before re-trying the request ...\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException ie) { Thread.interrupted(); }\n          \n          // retry using recursion with one-less attempt available\n          json = getJson(httpClient, getUrl, attempts);\n        } else {\n          // no more attempts or error is not retry-able\n          throw exc;\n        }\n      }\n    }\n    \n    return json;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ca20be81c9284c840498143264e583ccbb8525a":["709714c6ee47950678dd2d2ef4e0473886909226"],"709714c6ee47950678dd2d2ef4e0473886909226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ca20be81c9284c840498143264e583ccbb8525a"]},"commit2Childs":{"4ca20be81c9284c840498143264e583ccbb8525a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"709714c6ee47950678dd2d2ef4e0473886909226":["4ca20be81c9284c840498143264e583ccbb8525a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["709714c6ee47950678dd2d2ef4e0473886909226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}