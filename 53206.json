{"path":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite.ParallelArraysTermCollector#collect(BytesRef).mjava","commits":[{"id":"33a8b1f99104f4144f210f5d068411c297cd7163","date":1287152748,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite.ParallelArraysTermCollector#collect(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public boolean collect(BytesRef bytes) {\n        final int e = terms.add(bytes);\n        if (e < 0 ) {\n          // duplicate term: update docFreq\n          final int pos = (-e)-1;\n          array.docFreq[pos] += termsEnum.docFreq();\n          assert array.boost[pos] == boostAtt.getBoost() : \"boost should be equal in all segment TermsEnums\";\n        } else {\n          // new entry: we populate the entry initially\n          array.docFreq[e] = termsEnum.docFreq();\n          array.boost[e] = boostAtt.getBoost();\n        }\n        // if the new entry reaches the max clause count, we exit early\n        if (e >= BooleanQuery.getMaxClauseCount())\n          throw new BooleanQuery.TooManyClauses();\n        return true;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite.ParallelArraysTermCollector#collect(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public boolean collect(BytesRef bytes) {\n        final int e = terms.add(bytes);\n        if (e < 0 ) {\n          // duplicate term: update docFreq\n          final int pos = (-e)-1;\n          array.docFreq[pos] += termsEnum.docFreq();\n          assert array.boost[pos] == boostAtt.getBoost() : \"boost should be equal in all segment TermsEnums\";\n        } else {\n          // new entry: we populate the entry initially\n          array.docFreq[e] = termsEnum.docFreq();\n          array.boost[e] = boostAtt.getBoost();\n        }\n        // if the new entry reaches the max clause count, we exit early\n        if (e >= BooleanQuery.getMaxClauseCount())\n          throw new BooleanQuery.TooManyClauses();\n        return true;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744486748bc5bee772100e49230e5bca39bac99a","date":1289776426,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite.ParallelArraysTermCollector#collect(BytesRef).mjava","sourceNew":null,"sourceOld":"      @Override\n      public boolean collect(BytesRef bytes) {\n        final int e = terms.add(bytes);\n        if (e < 0 ) {\n          // duplicate term: update docFreq\n          final int pos = (-e)-1;\n          array.docFreq[pos] += termsEnum.docFreq();\n          assert array.boost[pos] == boostAtt.getBoost() : \"boost should be equal in all segment TermsEnums\";\n        } else {\n          // new entry: we populate the entry initially\n          array.docFreq[e] = termsEnum.docFreq();\n          array.boost[e] = boostAtt.getBoost();\n        }\n        // if the new entry reaches the max clause count, we exit early\n        if (e >= BooleanQuery.getMaxClauseCount())\n          throw new BooleanQuery.TooManyClauses();\n        return true;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ScoringBooleanQueryRewrite.ParallelArraysTermCollector#collect(BytesRef).mjava","sourceNew":null,"sourceOld":"      @Override\n      public boolean collect(BytesRef bytes) {\n        final int e = terms.add(bytes);\n        if (e < 0 ) {\n          // duplicate term: update docFreq\n          final int pos = (-e)-1;\n          array.docFreq[pos] += termsEnum.docFreq();\n          assert array.boost[pos] == boostAtt.getBoost() : \"boost should be equal in all segment TermsEnums\";\n        } else {\n          // new entry: we populate the entry initially\n          array.docFreq[e] = termsEnum.docFreq();\n          array.boost[e] = boostAtt.getBoost();\n        }\n        // if the new entry reaches the max clause count, we exit early\n        if (e >= BooleanQuery.getMaxClauseCount())\n          throw new BooleanQuery.TooManyClauses();\n        return true;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33a8b1f99104f4144f210f5d068411c297cd7163":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","744486748bc5bee772100e49230e5bca39bac99a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33a8b1f99104f4144f210f5d068411c297cd7163"],"744486748bc5bee772100e49230e5bca39bac99a":["33a8b1f99104f4144f210f5d068411c297cd7163"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["744486748bc5bee772100e49230e5bca39bac99a"]},"commit2Childs":{"33a8b1f99104f4144f210f5d068411c297cd7163":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","744486748bc5bee772100e49230e5bca39bac99a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33a8b1f99104f4144f210f5d068411c297cd7163","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"744486748bc5bee772100e49230e5bca39bac99a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}