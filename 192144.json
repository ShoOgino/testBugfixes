{"path":"backwards/src/java/org/apache/lucene/store/Directory#copy(Directory,Directory,boolean).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/store/Directory#copy(Directory,Directory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copy contents of a directory src to a directory dest.\n   * If a file in src already exists in dest then the\n   * one in dest will be blindly overwritten.\n   *\n   * <p><b>NOTE:</b> the source directory cannot change\n   * while this method is running.  Otherwise the results\n   * are undefined and you could easily hit a\n   * FileNotFoundException.\n   *\n   * <p><b>NOTE:</b> this method only copies files that look\n   * like index files (ie, have extensions matching the\n   * known extensions of index files).\n   *\n   * @param src source directory\n   * @param dest destination directory\n   * @param closeDirSrc if <code>true</code>, call {@link #close()} method on source directory\n   * @throws IOException\n   */\n  public static void copy(Directory src, Directory dest, boolean closeDirSrc) throws IOException {\n    final String[] files = src.listAll();\n\n    IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n\n    byte[] buf = new byte[BufferedIndexOutput.BUFFER_SIZE];\n    for (int i = 0; i < files.length; i++) {\n\n      if (!filter.accept(null, files[i]))\n        continue;\n\n      IndexOutput os = null;\n      IndexInput is = null;\n      try {\n        // create file in dest directory\n        os = dest.createOutput(files[i]);\n        // read current file\n        is = src.openInput(files[i]);\n        // and copy to dest directory\n        long len = is.length();\n        long readCount = 0;\n        while (readCount < len) {\n          int toRead = readCount + BufferedIndexOutput.BUFFER_SIZE > len ? (int)(len - readCount) : BufferedIndexOutput.BUFFER_SIZE;\n          is.readBytes(buf, 0, toRead);\n          os.writeBytes(buf, toRead);\n          readCount += toRead;\n        }\n      } finally {\n        // graceful cleanup\n        try {\n          if (os != null)\n            os.close();\n        } finally {\n          if (is != null)\n            is.close();\n        }\n      }\n    }\n    if(closeDirSrc)\n      src.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/store/Directory#copy(Directory,Directory,boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/store/Directory#copy(Directory,Directory,boolean).mjava","sourceNew":"  /**\n   * Copy contents of a directory src to a directory dest.\n   * If a file in src already exists in dest then the\n   * one in dest will be blindly overwritten.\n   *\n   * <p><b>NOTE:</b> the source directory cannot change\n   * while this method is running.  Otherwise the results\n   * are undefined and you could easily hit a\n   * FileNotFoundException.\n   *\n   * <p><b>NOTE:</b> this method only copies files that look\n   * like index files (ie, have extensions matching the\n   * known extensions of index files).\n   *\n   * @param src source directory\n   * @param dest destination directory\n   * @param closeDirSrc if <code>true</code>, call {@link #close()} method on source directory\n   * @throws IOException\n   */\n  public static void copy(Directory src, Directory dest, boolean closeDirSrc) throws IOException {\n    final String[] files = src.listAll();\n\n    IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n\n    byte[] buf = new byte[BufferedIndexOutput.BUFFER_SIZE];\n    for (int i = 0; i < files.length; i++) {\n\n      if (!filter.accept(null, files[i]))\n        continue;\n\n      IndexOutput os = null;\n      IndexInput is = null;\n      try {\n        // create file in dest directory\n        os = dest.createOutput(files[i]);\n        // read current file\n        is = src.openInput(files[i]);\n        // and copy to dest directory\n        long len = is.length();\n        long readCount = 0;\n        while (readCount < len) {\n          int toRead = readCount + BufferedIndexOutput.BUFFER_SIZE > len ? (int)(len - readCount) : BufferedIndexOutput.BUFFER_SIZE;\n          is.readBytes(buf, 0, toRead);\n          os.writeBytes(buf, toRead);\n          readCount += toRead;\n        }\n      } finally {\n        // graceful cleanup\n        try {\n          if (os != null)\n            os.close();\n        } finally {\n          if (is != null)\n            is.close();\n        }\n      }\n    }\n    if(closeDirSrc)\n      src.close();\n  }\n\n","sourceOld":"  /**\n   * Copy contents of a directory src to a directory dest.\n   * If a file in src already exists in dest then the\n   * one in dest will be blindly overwritten.\n   *\n   * <p><b>NOTE:</b> the source directory cannot change\n   * while this method is running.  Otherwise the results\n   * are undefined and you could easily hit a\n   * FileNotFoundException.\n   *\n   * <p><b>NOTE:</b> this method only copies files that look\n   * like index files (ie, have extensions matching the\n   * known extensions of index files).\n   *\n   * @param src source directory\n   * @param dest destination directory\n   * @param closeDirSrc if <code>true</code>, call {@link #close()} method on source directory\n   * @throws IOException\n   */\n  public static void copy(Directory src, Directory dest, boolean closeDirSrc) throws IOException {\n    final String[] files = src.listAll();\n\n    IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n\n    byte[] buf = new byte[BufferedIndexOutput.BUFFER_SIZE];\n    for (int i = 0; i < files.length; i++) {\n\n      if (!filter.accept(null, files[i]))\n        continue;\n\n      IndexOutput os = null;\n      IndexInput is = null;\n      try {\n        // create file in dest directory\n        os = dest.createOutput(files[i]);\n        // read current file\n        is = src.openInput(files[i]);\n        // and copy to dest directory\n        long len = is.length();\n        long readCount = 0;\n        while (readCount < len) {\n          int toRead = readCount + BufferedIndexOutput.BUFFER_SIZE > len ? (int)(len - readCount) : BufferedIndexOutput.BUFFER_SIZE;\n          is.readBytes(buf, 0, toRead);\n          os.writeBytes(buf, toRead);\n          readCount += toRead;\n        }\n      } finally {\n        // graceful cleanup\n        try {\n          if (os != null)\n            os.close();\n        } finally {\n          if (is != null)\n            is.close();\n        }\n      }\n    }\n    if(closeDirSrc)\n      src.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}