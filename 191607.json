{"path":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#visitTerm(TermsEnum,int).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = BytesRef.deepCopyOf(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getLeafReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.postingsEnum = postingsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      postingsEnum = deState.postingsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = BytesRef.deepCopyOf(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getLeafReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.postingsEnum = postingsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      postingsEnum = deState.postingsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a7c13535572b8e97cc477fc3388a57321a7751a","date":1427500960,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[ Math.min(Integer.MAX_VALUE-16, maxTermCounts.length*2) ];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = BytesRef.deepCopyOf(term);\n      topTerm.termNum = termNum;\n      topTerm.termQuery = new TermQuery(new Term(field, topTerm.term));\n\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getLeafReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.postingsEnum = postingsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      postingsEnum = deState.postingsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[maxTermCounts.length*2];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = BytesRef.deepCopyOf(term);\n      topTerm.termNum = termNum;\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getLeafReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.postingsEnum = postingsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      postingsEnum = deState.postingsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[ Math.min(Integer.MAX_VALUE-16, maxTermCounts.length*2) ];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = BytesRef.deepCopyOf(term);\n      topTerm.termNum = termNum;\n      topTerm.termQuery = new TermQuery(new Term(field, topTerm.term));\n\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getLeafReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.postingsEnum = postingsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      postingsEnum = deState.postingsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c5ae3000a048dea45f71032386fb1adf814986a","date":1445375139,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[ Math.min(Integer.MAX_VALUE-16, maxTermCounts.length*2) ];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      Term t = new Term(field, term);  // this makes a deep copy of the term bytes\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = t.bytes();\n      topTerm.termNum = termNum;\n      topTerm.termQuery = new TermQuery(t);\n\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getLeafReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.postingsEnum = postingsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      postingsEnum = deState.postingsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[ Math.min(Integer.MAX_VALUE-16, maxTermCounts.length*2) ];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = BytesRef.deepCopyOf(term);\n      topTerm.termNum = termNum;\n      topTerm.termQuery = new TermQuery(new Term(field, topTerm.term));\n\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getLeafReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.postingsEnum = postingsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      postingsEnum = deState.postingsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e07c409cff8701e4dc3d45934b021a949a5a8822","date":1475694629,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[ Math.min(Integer.MAX_VALUE-16, maxTermCounts.length*2) ];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      Term t = new Term(field, term);  // this makes a deep copy of the term bytes\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = t.bytes();\n      topTerm.termNum = termNum;\n      topTerm.termQuery = new TermQuery(t);\n\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getSlowAtomicReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.postingsEnum = postingsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      postingsEnum = deState.postingsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[ Math.min(Integer.MAX_VALUE-16, maxTermCounts.length*2) ];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      Term t = new Term(field, term);  // this makes a deep copy of the term bytes\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = t.bytes();\n      topTerm.termNum = termNum;\n      topTerm.termQuery = new TermQuery(t);\n\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getLeafReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.postingsEnum = postingsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      postingsEnum = deState.postingsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[ Math.min(Integer.MAX_VALUE-16, maxTermCounts.length*2) ];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      Term t = new Term(field, term);  // this makes a deep copy of the term bytes\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = t.bytes();\n      topTerm.termNum = termNum;\n      topTerm.termQuery = new TermQuery(t);\n\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getSlowAtomicReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.postingsEnum = postingsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      postingsEnum = deState.postingsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[ Math.min(Integer.MAX_VALUE-16, maxTermCounts.length*2) ];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      Term t = new Term(field, term);  // this makes a deep copy of the term bytes\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = t.bytes();\n      topTerm.termNum = termNum;\n      topTerm.termQuery = new TermQuery(t);\n\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getLeafReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.postingsEnum = postingsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      postingsEnum = deState.postingsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac981db60ef979233b3438ec49ddae82e8cc4697","date":1503407558,"type":3,"author":"Toke Eskildsen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  /**\n   * Called for each term in the field being uninverted.\n   * Collects {@link #maxTermCounts} for all bigTerms as well as storing them in {@link #bigTerms}.\n   * @param te positioned at the current term.\n   * @param termNum the ID/pointer/ordinal of the current term. Monotonically increasing between calls.\n   */\n  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[ Math.min(Integer.MAX_VALUE-16, maxTermCounts.length*2) ];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      Term t = new Term(field, term);  // this makes a deep copy of the term bytes\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = t.bytes();\n      topTerm.termNum = termNum;\n      topTerm.termQuery = new TermQuery(t);\n\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getSlowAtomicReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.postingsEnum = postingsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      postingsEnum = deState.postingsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[ Math.min(Integer.MAX_VALUE-16, maxTermCounts.length*2) ];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      Term t = new Term(field, term);  // this makes a deep copy of the term bytes\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = t.bytes();\n      topTerm.termNum = termNum;\n      topTerm.termQuery = new TermQuery(t);\n\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getSlowAtomicReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.postingsEnum = postingsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      postingsEnum = deState.postingsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  /**\n   * Called for each term in the field being uninverted.\n   * Collects {@link #maxTermCounts} for all bigTerms as well as storing them in {@link #bigTerms}.\n   * @param te positioned at the current term.\n   * @param termNum the ID/pointer/ordinal of the current term. Monotonically increasing between calls.\n   */\n  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[ Math.min(Integer.MAX_VALUE-16, maxTermCounts.length*2) ];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      Term t = new Term(field, term);  // this makes a deep copy of the term bytes\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = t.bytes();\n      topTerm.termNum = termNum;\n      topTerm.termQuery = new TermQuery(t);\n\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getSlowAtomicReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.postingsEnum = postingsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      postingsEnum = deState.postingsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[ Math.min(Integer.MAX_VALUE-16, maxTermCounts.length*2) ];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      Term t = new Term(field, term);  // this makes a deep copy of the term bytes\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = t.bytes();\n      topTerm.termNum = termNum;\n      topTerm.termQuery = new TermQuery(t);\n\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getSlowAtomicReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.postingsEnum = postingsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      postingsEnum = deState.postingsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf29cc8a76949bbcbc15b386a9e46a533f5b3332","date":1527778512,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#visitTerm(TermsEnum,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField#visitTerm(TermsEnum,int).mjava","sourceNew":"  /**\n   * Called for each term in the field being uninverted.\n   * Collects {@link #maxTermCounts} for all bigTerms as well as storing them in {@link #bigTerms}.\n   * @param te positioned at the current term.\n   * @param termNum the ID/pointer/ordinal of the current term. Monotonically increasing between calls.\n   */\n  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[ Math.min(Integer.MAX_VALUE-16, maxTermCounts.length*2) ];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      Term t = new Term(field, term);  // this makes a deep copy of the term bytes\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = t.bytes();\n      topTerm.termNum = termNum;\n      topTerm.termQuery = new TermQuery(t);\n\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getLiveDocsBits();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.postingsEnum = postingsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      postingsEnum = deState.postingsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","sourceOld":"  /**\n   * Called for each term in the field being uninverted.\n   * Collects {@link #maxTermCounts} for all bigTerms as well as storing them in {@link #bigTerms}.\n   * @param te positioned at the current term.\n   * @param termNum the ID/pointer/ordinal of the current term. Monotonically increasing between calls.\n   */\n  @Override\n  protected void visitTerm(TermsEnum te, int termNum) throws IOException {\n\n    if (termNum >= maxTermCounts.length) {\n      // resize by doubling - for very large number of unique terms, expanding\n      // by 4K and resultant GC will dominate uninvert times.  Resize at end if material\n      int[] newMaxTermCounts = new int[ Math.min(Integer.MAX_VALUE-16, maxTermCounts.length*2) ];\n      System.arraycopy(maxTermCounts, 0, newMaxTermCounts, 0, termNum);\n      maxTermCounts = newMaxTermCounts;\n    }\n\n    final BytesRef term = te.term();\n\n    if (te.docFreq() > maxTermDocFreq) {\n      Term t = new Term(field, term);  // this makes a deep copy of the term bytes\n      TopTerm topTerm = new TopTerm();\n      topTerm.term = t.bytes();\n      topTerm.termNum = termNum;\n      topTerm.termQuery = new TermQuery(t);\n\n      bigTerms.put(topTerm.termNum, topTerm);\n\n      if (deState == null) {\n        deState = new SolrIndexSearcher.DocsEnumState();\n        deState.fieldName = field;\n        deState.liveDocs = searcher.getSlowAtomicReader().getLiveDocs();\n        deState.termsEnum = te;  // TODO: check for MultiTermsEnum in SolrIndexSearcher could now fail?\n        deState.postingsEnum = postingsEnum;\n        deState.minSetSizeCached = maxTermDocFreq;\n      }\n\n      postingsEnum = deState.postingsEnum;\n      DocSet set = searcher.getDocSet(deState);\n      maxTermCounts[termNum] = set.size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a7c13535572b8e97cc477fc3388a57321a7751a"],"2c5ae3000a048dea45f71032386fb1adf814986a":["4a7c13535572b8e97cc477fc3388a57321a7751a"],"bf29cc8a76949bbcbc15b386a9e46a533f5b3332":["ac981db60ef979233b3438ec49ddae82e8cc4697"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["e07c409cff8701e4dc3d45934b021a949a5a8822","ac981db60ef979233b3438ec49ddae82e8cc4697"],"ac981db60ef979233b3438ec49ddae82e8cc4697":["e07c409cff8701e4dc3d45934b021a949a5a8822"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e07c409cff8701e4dc3d45934b021a949a5a8822":["2c5ae3000a048dea45f71032386fb1adf814986a"],"4a7c13535572b8e97cc477fc3388a57321a7751a":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2c5ae3000a048dea45f71032386fb1adf814986a","e07c409cff8701e4dc3d45934b021a949a5a8822"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bf29cc8a76949bbcbc15b386a9e46a533f5b3332"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"2c5ae3000a048dea45f71032386fb1adf814986a":["e07c409cff8701e4dc3d45934b021a949a5a8822","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bf29cc8a76949bbcbc15b386a9e46a533f5b3332":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac981db60ef979233b3438ec49ddae82e8cc4697":["bf29cc8a76949bbcbc15b386a9e46a533f5b3332","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["4a7c13535572b8e97cc477fc3388a57321a7751a"],"e07c409cff8701e4dc3d45934b021a949a5a8822":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","ac981db60ef979233b3438ec49ddae82e8cc4697","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4a7c13535572b8e97cc477fc3388a57321a7751a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2c5ae3000a048dea45f71032386fb1adf814986a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3a7809d1d753b67f48b1a706e17034bf8b624ea3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}