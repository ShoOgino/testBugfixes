{"path":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertStoredField(StorableField,StorableField).mjava","commits":[{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertStoredField(StorableField,StorableField).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertStoredField(IndexableField,IndexableField).mjava","sourceNew":"  /** \n   * checks that two stored fields are equivalent \n   */\n  public void assertStoredField(StorableField leftField, StorableField rightField) {\n    assertEquals(info, leftField.name(), rightField.name());\n    assertEquals(info, leftField.binaryValue(), rightField.binaryValue());\n    assertEquals(info, leftField.stringValue(), rightField.stringValue());\n    assertEquals(info, leftField.numericValue(), rightField.numericValue());\n    // TODO: should we check the FT at all?\n  }\n\n","sourceOld":"  /** \n   * checks that two stored fields are equivalent \n   */\n  public void assertStoredField(IndexableField leftField, IndexableField rightField) {\n    assertEquals(info, leftField.name(), rightField.name());\n    assertEquals(info, leftField.binaryValue(), rightField.binaryValue());\n    assertEquals(info, leftField.stringValue(), rightField.stringValue());\n    assertEquals(info, leftField.numericValue(), rightField.numericValue());\n    // TODO: should we check the FT at all?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertStoredField(StorableField,StorableField).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertStoredField(IndexableField,IndexableField).mjava","sourceNew":"  /** \n   * checks that two stored fields are equivalent \n   */\n  public void assertStoredField(StorableField leftField, StorableField rightField) {\n    assertEquals(info, leftField.name(), rightField.name());\n    assertEquals(info, leftField.binaryValue(), rightField.binaryValue());\n    assertEquals(info, leftField.stringValue(), rightField.stringValue());\n    assertEquals(info, leftField.numericValue(), rightField.numericValue());\n    // TODO: should we check the FT at all?\n  }\n\n","sourceOld":"  /** \n   * checks that two stored fields are equivalent \n   */\n  public void assertStoredField(IndexableField leftField, IndexableField rightField) {\n    assertEquals(info, leftField.name(), rightField.name());\n    assertEquals(info, leftField.binaryValue(), rightField.binaryValue());\n    assertEquals(info, leftField.stringValue(), rightField.stringValue());\n    assertEquals(info, leftField.numericValue(), rightField.numericValue());\n    // TODO: should we check the FT at all?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertStoredFieldEquals(String,StorableField,StorableField).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertStoredField(StorableField,StorableField).mjava","sourceNew":"  /** \n   * checks that two stored fields are equivalent \n   */\n  public void assertStoredFieldEquals(String info, StorableField leftField, StorableField rightField) {\n    assertEquals(info, leftField.name(), rightField.name());\n    assertEquals(info, leftField.binaryValue(), rightField.binaryValue());\n    assertEquals(info, leftField.stringValue(), rightField.stringValue());\n    assertEquals(info, leftField.numericValue(), rightField.numericValue());\n    // TODO: should we check the FT at all?\n  }\n\n","sourceOld":"  /** \n   * checks that two stored fields are equivalent \n   */\n  public void assertStoredField(StorableField leftField, StorableField rightField) {\n    assertEquals(info, leftField.name(), rightField.name());\n    assertEquals(info, leftField.binaryValue(), rightField.binaryValue());\n    assertEquals(info, leftField.stringValue(), rightField.stringValue());\n    assertEquals(info, leftField.numericValue(), rightField.numericValue());\n    // TODO: should we check the FT at all?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51c8450b3b616b6777f722ff4083c0bf946381a2":["1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51c8450b3b616b6777f722ff4083c0bf946381a2"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}