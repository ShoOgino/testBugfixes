{"path":"contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","commits":[{"id":"48723f897a60bd03cbbde5978fc56918af4ee635","date":1226103632,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"/dev/null","sourceNew":"\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n\t\t//Take all completed form fields and add to a Properties object\r\n\t\tProperties completedFormFields=new Properties();\r\n\t\tEnumeration pNames = request.getParameterNames();\r\n\t\twhile(pNames.hasMoreElements()){\r\n\t\t\tString propName=(String) pNames.nextElement();\r\n\t\t\tString value=request.getParameter(propName);\r\n\t\t\tif((value!=null)&&(value.trim().length()>0)){\r\n\t\t\t\tcompletedFormFields.setProperty(propName, value);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ttry{\r\n\r\n\t\t\t//Create an XML query by populating template with given user criteria\r\n\t\t\torg.w3c.dom.Document xmlQuery=queryTemplateManager.getQueryAsDOM(completedFormFields);\r\n\r\n\t\t\t//Parse the XML to produce a Lucene query\r\n\t\t\tQuery query=xmlParser.getQuery(xmlQuery.getDocumentElement());\r\n\r\n\t\t\t//Run the query\r\n\t\t\tTopDocs topDocs = searcher.search(query,10);\r\n\r\n\t\t\t//and package the results and forward to JSP\r\n\t\t\tif(topDocs!=null)\t{\r\n\t\t\t\tScoreDoc[] sd = topDocs.scoreDocs;\r\n\t\t\t\tDocument[] results=new Document[sd.length];\r\n\t\t\t\tfor (int i = 0; i < results.length; i++) {\r\n\t\t\t\t\tresults[i]=searcher.doc(sd[i].doc);\r\n\t\t\t\t\trequest.setAttribute(\"results\", results);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tRequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\r\n\t\t\tdispatcher.forward(request,response);\r\n\t\t}\r\n\t\tcatch(Exception e){\r\n\t\t\tthrow new ServletException(\"Error processing query\",e);\r\n\t\t}\r\n\t}\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t//Take all completed form fields and add to a Properties object\n\t\tProperties completedFormFields=new Properties();\n\t\tEnumeration pNames = request.getParameterNames();\n\t\twhile(pNames.hasMoreElements()){\n\t\t\tString propName=(String) pNames.nextElement();\n\t\t\tString value=request.getParameter(propName);\n\t\t\tif((value!=null)&&(value.trim().length()>0)){\n\t\t\t\tcompletedFormFields.setProperty(propName, value);\n\t\t\t}\n\t\t}\n\n\t\ttry{\n\n\t\t\t//Create an XML query by populating template with given user criteria\n\t\t\torg.w3c.dom.Document xmlQuery=queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n\t\t\t//Parse the XML to produce a Lucene query\n\t\t\tQuery query=xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n\t\t\t//Run the query\n\t\t\tTopDocs topDocs = searcher.search(query,10);\n\n\t\t\t//and package the results and forward to JSP\n\t\t\tif(topDocs!=null)\t{\n\t\t\t\tScoreDoc[] sd = topDocs.scoreDocs;\n\t\t\t\tDocument[] results=new Document[sd.length];\n\t\t\t\tfor (int i = 0; i < results.length; i++) {\n\t\t\t\t\tresults[i]=searcher.doc(sd[i].doc);\n\t\t\t\t\trequest.setAttribute(\"results\", results);\n\t\t\t\t}\n\t\t\t}\n\t\t\tRequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n\t\t\tdispatcher.forward(request,response);\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tthrow new ServletException(\"Error processing query\",e);\n\t\t}\n\t}\n\n","sourceOld":"\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n\t\t//Take all completed form fields and add to a Properties object\r\n\t\tProperties completedFormFields=new Properties();\r\n\t\tEnumeration pNames = request.getParameterNames();\r\n\t\twhile(pNames.hasMoreElements()){\r\n\t\t\tString propName=(String) pNames.nextElement();\r\n\t\t\tString value=request.getParameter(propName);\r\n\t\t\tif((value!=null)&&(value.trim().length()>0)){\r\n\t\t\t\tcompletedFormFields.setProperty(propName, value);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ttry{\r\n\r\n\t\t\t//Create an XML query by populating template with given user criteria\r\n\t\t\torg.w3c.dom.Document xmlQuery=queryTemplateManager.getQueryAsDOM(completedFormFields);\r\n\r\n\t\t\t//Parse the XML to produce a Lucene query\r\n\t\t\tQuery query=xmlParser.getQuery(xmlQuery.getDocumentElement());\r\n\r\n\t\t\t//Run the query\r\n\t\t\tTopDocs topDocs = searcher.search(query,10);\r\n\r\n\t\t\t//and package the results and forward to JSP\r\n\t\t\tif(topDocs!=null)\t{\r\n\t\t\t\tScoreDoc[] sd = topDocs.scoreDocs;\r\n\t\t\t\tDocument[] results=new Document[sd.length];\r\n\t\t\t\tfor (int i = 0; i < results.length; i++) {\r\n\t\t\t\t\tresults[i]=searcher.doc(sd[i].doc);\r\n\t\t\t\t\trequest.setAttribute(\"results\", results);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tRequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\r\n\t\t\tdispatcher.forward(request,response);\r\n\t\t}\r\n\t\tcatch(Exception e){\r\n\t\t\tthrow new ServletException(\"Error processing query\",e);\r\n\t\t}\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"\t@Override\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t//Take all completed form fields and add to a Properties object\n\t\tProperties completedFormFields=new Properties();\n\t\tEnumeration pNames = request.getParameterNames();\n\t\twhile(pNames.hasMoreElements()){\n\t\t\tString propName=(String) pNames.nextElement();\n\t\t\tString value=request.getParameter(propName);\n\t\t\tif((value!=null)&&(value.trim().length()>0)){\n\t\t\t\tcompletedFormFields.setProperty(propName, value);\n\t\t\t}\n\t\t}\n\n\t\ttry{\n\n\t\t\t//Create an XML query by populating template with given user criteria\n\t\t\torg.w3c.dom.Document xmlQuery=queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n\t\t\t//Parse the XML to produce a Lucene query\n\t\t\tQuery query=xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n\t\t\t//Run the query\n\t\t\tTopDocs topDocs = searcher.search(query,10);\n\n\t\t\t//and package the results and forward to JSP\n\t\t\tif(topDocs!=null)\t{\n\t\t\t\tScoreDoc[] sd = topDocs.scoreDocs;\n\t\t\t\tDocument[] results=new Document[sd.length];\n\t\t\t\tfor (int i = 0; i < results.length; i++) {\n\t\t\t\t\tresults[i]=searcher.doc(sd[i].doc);\n\t\t\t\t\trequest.setAttribute(\"results\", results);\n\t\t\t\t}\n\t\t\t}\n\t\t\tRequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n\t\t\tdispatcher.forward(request,response);\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tthrow new ServletException(\"Error processing query\",e);\n\t\t}\n\t}\n\n","sourceOld":"\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t//Take all completed form fields and add to a Properties object\n\t\tProperties completedFormFields=new Properties();\n\t\tEnumeration pNames = request.getParameterNames();\n\t\twhile(pNames.hasMoreElements()){\n\t\t\tString propName=(String) pNames.nextElement();\n\t\t\tString value=request.getParameter(propName);\n\t\t\tif((value!=null)&&(value.trim().length()>0)){\n\t\t\t\tcompletedFormFields.setProperty(propName, value);\n\t\t\t}\n\t\t}\n\n\t\ttry{\n\n\t\t\t//Create an XML query by populating template with given user criteria\n\t\t\torg.w3c.dom.Document xmlQuery=queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n\t\t\t//Parse the XML to produce a Lucene query\n\t\t\tQuery query=xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n\t\t\t//Run the query\n\t\t\tTopDocs topDocs = searcher.search(query,10);\n\n\t\t\t//and package the results and forward to JSP\n\t\t\tif(topDocs!=null)\t{\n\t\t\t\tScoreDoc[] sd = topDocs.scoreDocs;\n\t\t\t\tDocument[] results=new Document[sd.length];\n\t\t\t\tfor (int i = 0; i < results.length; i++) {\n\t\t\t\t\tresults[i]=searcher.doc(sd[i].doc);\n\t\t\t\t\trequest.setAttribute(\"results\", results);\n\t\t\t\t}\n\t\t\t}\n\t\t\tRequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n\t\t\tdispatcher.forward(request,response);\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tthrow new ServletException(\"Error processing query\",e);\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"contrib/xml-query-parser/src/demo/java/org/apache/lucene/xmlparser/webdemo/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"\t@Override\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t//Take all completed form fields and add to a Properties object\n\t\tProperties completedFormFields=new Properties();\n\t\tEnumeration pNames = request.getParameterNames();\n\t\twhile(pNames.hasMoreElements()){\n\t\t\tString propName=(String) pNames.nextElement();\n\t\t\tString value=request.getParameter(propName);\n\t\t\tif((value!=null)&&(value.trim().length()>0)){\n\t\t\t\tcompletedFormFields.setProperty(propName, value);\n\t\t\t}\n\t\t}\n\n\t\ttry{\n\n\t\t\t//Create an XML query by populating template with given user criteria\n\t\t\torg.w3c.dom.Document xmlQuery=queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n\t\t\t//Parse the XML to produce a Lucene query\n\t\t\tQuery query=xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n\t\t\t//Run the query\n\t\t\tTopDocs topDocs = searcher.search(query,10);\n\n\t\t\t//and package the results and forward to JSP\n\t\t\tif(topDocs!=null)\t{\n\t\t\t\tScoreDoc[] sd = topDocs.scoreDocs;\n\t\t\t\tDocument[] results=new Document[sd.length];\n\t\t\t\tfor (int i = 0; i < results.length; i++) {\n\t\t\t\t\tresults[i]=searcher.doc(sd[i].doc);\n\t\t\t\t\trequest.setAttribute(\"results\", results);\n\t\t\t\t}\n\t\t\t}\n\t\t\tRequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n\t\t\tdispatcher.forward(request,response);\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tthrow new ServletException(\"Error processing query\",e);\n\t\t}\n\t}\n\n","sourceOld":"\t@Override\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t//Take all completed form fields and add to a Properties object\n\t\tProperties completedFormFields=new Properties();\n\t\tEnumeration pNames = request.getParameterNames();\n\t\twhile(pNames.hasMoreElements()){\n\t\t\tString propName=(String) pNames.nextElement();\n\t\t\tString value=request.getParameter(propName);\n\t\t\tif((value!=null)&&(value.trim().length()>0)){\n\t\t\t\tcompletedFormFields.setProperty(propName, value);\n\t\t\t}\n\t\t}\n\n\t\ttry{\n\n\t\t\t//Create an XML query by populating template with given user criteria\n\t\t\torg.w3c.dom.Document xmlQuery=queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n\t\t\t//Parse the XML to produce a Lucene query\n\t\t\tQuery query=xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n\t\t\t//Run the query\n\t\t\tTopDocs topDocs = searcher.search(query,10);\n\n\t\t\t//and package the results and forward to JSP\n\t\t\tif(topDocs!=null)\t{\n\t\t\t\tScoreDoc[] sd = topDocs.scoreDocs;\n\t\t\t\tDocument[] results=new Document[sd.length];\n\t\t\t\tfor (int i = 0; i < results.length; i++) {\n\t\t\t\t\tresults[i]=searcher.doc(sd[i].doc);\n\t\t\t\t\trequest.setAttribute(\"results\", results);\n\t\t\t\t}\n\t\t\t}\n\t\t\tRequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n\t\t\tdispatcher.forward(request,response);\n\t\t}\n\t\tcatch(Exception e){\n\t\t\tthrow new ServletException(\"Error processing query\",e);\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48723f897a60bd03cbbde5978fc56918af4ee635":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["48723f897a60bd03cbbde5978fc56918af4ee635"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"48723f897a60bd03cbbde5978fc56918af4ee635":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48723f897a60bd03cbbde5978fc56918af4ee635"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}