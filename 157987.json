{"path":"src/java/org/apache/lucene/search/Weight#scorer(IndexReader,boolean,boolean).mjava","commits":[{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Weight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/QueryWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a {@link Scorer} which scores documents in/out-of order according\n   * to <code>scoreDocsInOrder</code>.\n   * <p>\n   * <b>NOTE:</b> even if <code>scoreDocsInOrder</code> is false, it is\n   * recommended to check whether the returned <code>Scorer</code> indeed scores\n   * documents out of order (i.e., call {@link #scoresDocsOutOfOrder()}), as\n   * some <code>Scorer</code> implementations will always return documents\n   * in-order.<br>\n   * <b>NOTE:</b> null can be returned if no documents will be scored by this\n   * query.\n   * \n   * @param reader\n   *          the {@link IndexReader} for which to return the {@link Scorer}.\n   * @param scoreDocsInOrder\n   *          specifies whether in-order scoring of documents is required. Note\n   *          that if set to false (i.e., out-of-order scoring is required),\n   *          this method can return whatever scoring mode it supports, as every\n   *          in-order scorer is also an out-of-order one. However, an\n   *          out-of-order scorer may not support {@link Scorer#nextDoc()}\n   *          and/or {@link Scorer#advance(int)}, therefore it is recommended to\n   *          request an in-order scorer if use of these methods is required.\n   * @param topScorer\n   *          if true, {@link Scorer#score(Collector)} will be called; if false,\n   *          {@link Scorer#nextDoc()} and/or {@link Scorer#advance(int)} will\n   *          be called.\n   * @return a {@link Scorer} which scores documents in/out-of order.\n   * @throws IOException\n   */\n  public abstract Scorer scorer(IndexReader reader, boolean scoreDocsInOrder,\n      boolean topScorer) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link Scorer} which scores documents in/out-of order according\n   * to <code>scoreDocsInOrder</code>.\n   * <p>\n   * <b>NOTE:</b> even if <code>scoreDocsInOrder</code> is false, it is\n   * recommended to check whether the returned <code>Scorer</code> indeed scores\n   * documents out of order (i.e., call {@link #scoresDocsOutOfOrder()}), as\n   * some <code>Scorer</code> implementations will always return documents\n   * in-order.<br>\n   * <b>NOTE:</b> null can be returned if no documents will be scored by this\n   * query.\n   * \n   * @param reader\n   *          the {@link IndexReader} for which to return the {@link Scorer}.\n   * @param scoreDocsInOrder\n   *          specifies whether in-order scoring of documents is required. Note\n   *          that if set to false (i.e., out-of-order scoring is required),\n   *          this method can return whatever scoring mode it supports, as every\n   *          in-order scorer is also an out-of-order one. However, an\n   *          out-of-order scorer may not support {@link Scorer#nextDoc()}\n   *          and/or {@link Scorer#advance(int)}, therfore it is recommended to\n   *          request an in-order scorer if use of these methods is required.\n   * @param topScorer\n   *          specifies whether the returned {@link Scorer} will be used as a\n   *          top scorer or as in iterator. I.e., if true,\n   *          {@link Scorer#score(Collector)} will be called; if false,\n   *          {@link Scorer#nextDoc()} and/or {@link Scorer#advance(int)} will\n   *          be called.\n   * @return a {@link Scorer} which scores documents in/out-of order.\n   * @throws IOException\n   */\n  public abstract Scorer scorer(IndexReader reader, boolean scoreDocsInOrder,\n      boolean topScorer) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Weight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/Weight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"  /**\n   * Returns a {@link Scorer} which scores documents in/out-of order according\n   * to <code>scoreDocsInOrder</code>.\n   * <p>\n   * <b>NOTE:</b> even if <code>scoreDocsInOrder</code> is false, it is\n   * recommended to check whether the returned <code>Scorer</code> indeed scores\n   * documents out of order (i.e., call {@link #scoresDocsOutOfOrder()}), as\n   * some <code>Scorer</code> implementations will always return documents\n   * in-order.<br>\n   * <b>NOTE:</b> null can be returned if no documents will be scored by this\n   * query.\n   * \n   * @param reader\n   *          the {@link IndexReader} for which to return the {@link Scorer}.\n   * @param scoreDocsInOrder\n   *          specifies whether in-order scoring of documents is required. Note\n   *          that if set to false (i.e., out-of-order scoring is required),\n   *          this method can return whatever scoring mode it supports, as every\n   *          in-order scorer is also an out-of-order one. However, an\n   *          out-of-order scorer may not support {@link Scorer#nextDoc()}\n   *          and/or {@link Scorer#advance(int)}, therefore it is recommended to\n   *          request an in-order scorer if use of these methods is required.\n   * @param topScorer\n   *          if true, {@link Scorer#score(Collector)} will be called; if false,\n   *          {@link Scorer#nextDoc()} and/or {@link Scorer#advance(int)} will\n   *          be called.\n   * @return a {@link Scorer} which scores documents in/out-of order.\n   * @throws IOException\n   */\n  public abstract Scorer scorer(IndexReader reader, boolean scoreDocsInOrder,\n      boolean topScorer) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link Scorer} which scores documents in/out-of order according\n   * to <code>scoreDocsInOrder</code>.\n   * <p>\n   * <b>NOTE:</b> even if <code>scoreDocsInOrder</code> is false, it is\n   * recommended to check whether the returned <code>Scorer</code> indeed scores\n   * documents out of order (i.e., call {@link #scoresDocsOutOfOrder()}), as\n   * some <code>Scorer</code> implementations will always return documents\n   * in-order.<br>\n   * <b>NOTE:</b> null can be returned if no documents will be scored by this\n   * query.\n   * \n   * @param reader\n   *          the {@link IndexReader} for which to return the {@link Scorer}.\n   * @param scoreDocsInOrder\n   *          specifies whether in-order scoring of documents is required. Note\n   *          that if set to false (i.e., out-of-order scoring is required),\n   *          this method can return whatever scoring mode it supports, as every\n   *          in-order scorer is also an out-of-order one. However, an\n   *          out-of-order scorer may not support {@link Scorer#nextDoc()}\n   *          and/or {@link Scorer#advance(int)}, therefore it is recommended to\n   *          request an in-order scorer if use of these methods is required.\n   * @param topScorer\n   *          if true, {@link Scorer#score(Collector)} will be called; if false,\n   *          {@link Scorer#nextDoc()} and/or {@link Scorer#advance(int)} will\n   *          be called.\n   * @return a {@link Scorer} which scores documents in/out-of order.\n   * @throws IOException\n   */\n  public abstract Scorer scorer(IndexReader reader, boolean scoreDocsInOrder,\n      boolean topScorer) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe941135bdfc28c81e20b4d21422f8726af34925":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fe941135bdfc28c81e20b4d21422f8726af34925"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe941135bdfc28c81e20b4d21422f8726af34925"],"fe941135bdfc28c81e20b4d21422f8726af34925":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}