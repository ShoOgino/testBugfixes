{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createCollectAcc(int,int).mjava","commits":[{"id":"79759974460bc59933cd169acc94f5c6b16368d5","date":1471318443,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createCollectAcc(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#createCollectAcc(int,int).mjava","sourceNew":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    } else {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","sourceOld":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    } else {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createCollectAcc(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#createCollectAcc(int,int).mjava","sourceNew":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    } else {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","sourceOld":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    } else {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createCollectAcc(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#createCollectAcc(int,int).mjava","sourceNew":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    } else {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","sourceOld":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    } else {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createCollectAcc(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#createCollectAcc(int,int).mjava","sourceNew":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    } else {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","sourceOld":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    } else {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a510dfee3d23db41e13a46adf0e1b2bfc303f108","date":1495587166,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createCollectAcc(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createCollectAcc(int,int).mjava","sourceNew":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    }\n\n    // If we are going to return all buckets and if there are no subfacets (that would need a domain), then don't defer\n    // any aggregation calculations to a second phase.  This way we can avoid calculating domains for each bucket, which\n    // can be expensive.\n    if (freq.limit == -1 && freq.subFacets.size() == 0) {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n      int otherAccIdx = 0;\n      for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n        AggValueSource agg = entry.getValue();\n        SlotAcc acc = agg.createSlotAcc(fcontext, numDocs, numSlots);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n        accs[otherAccIdx++] = acc;\n      }\n      if (accs.length == 1) {\n        collectAcc = accs[0];\n      } else {\n        collectAcc = new MultiAcc(fcontext, accs);\n      }\n\n      if (sortAcc == null) {\n        sortAcc = accMap.get(freq.sortVariable);\n        assert sortAcc != null;\n      }\n\n      deferredAggs = null;\n    }\n\n    if (sortAcc == null) {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs == null || deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","sourceOld":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    } else {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createCollectAcc(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createCollectAcc(int,int).mjava","sourceNew":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    }\n\n    // If we are going to return all buckets and if there are no subfacets (that would need a domain), then don't defer\n    // any aggregation calculations to a second phase.  This way we can avoid calculating domains for each bucket, which\n    // can be expensive.\n    if (freq.limit == -1 && freq.subFacets.size() == 0) {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n      int otherAccIdx = 0;\n      for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n        AggValueSource agg = entry.getValue();\n        SlotAcc acc = agg.createSlotAcc(fcontext, numDocs, numSlots);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n        accs[otherAccIdx++] = acc;\n      }\n      if (accs.length == 1) {\n        collectAcc = accs[0];\n      } else {\n        collectAcc = new MultiAcc(fcontext, accs);\n      }\n\n      if (sortAcc == null) {\n        sortAcc = accMap.get(freq.sortVariable);\n        assert sortAcc != null;\n      }\n\n      deferredAggs = null;\n    }\n\n    if (sortAcc == null) {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs == null || deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","sourceOld":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    } else {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ce69d020f939568b84a1dbbfbd11bfd9907b73","date":1543618146,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createCollectAcc(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createCollectAcc(int,int).mjava","sourceNew":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n    \n    // start with the assumption that we're going to defer the computation of all stats\n    deferredAggs.putAll(freq.getFacetStats());\n \n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    sortAcc = getTrivialSortingSlotAcc(this.sort);\n\n    if (this.singlePassSlotAccCollection) {\n      // If we are going to return all buckets, and if there are no subfacets (that would need a domain),\n      // then don't defer any aggregation calculations to a second phase.\n      // This way we can avoid calculating domains for each bucket, which can be expensive.\n\n      // TODO: BEGIN: why can't we just call createAccs here ?\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n      int otherAccIdx = 0;\n      for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n        AggValueSource agg = entry.getValue();\n        SlotAcc acc = agg.createSlotAcc(fcontext, numDocs, numSlots);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n        accs[otherAccIdx++] = acc;\n      }\n      // TODO: END: why can't we just call createAccs here ?\n      if (accs.length == 1) {\n        collectAcc = accs[0];\n      } else {\n        collectAcc = new MultiAcc(fcontext, accs);\n      }\n\n      if (sortAcc == null) {\n        sortAcc = accMap.get(sort.sortVariable);\n        assert sortAcc != null;\n      }\n\n      deferredAggs.clear();\n    }\n\n    if (sortAcc == null) {\n      AggValueSource sortAgg = freq.getFacetStats().get(sort.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = sort.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs.remove(sort.sortVariable);\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","sourceOld":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n\n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    if (\"count\".equals(freq.sortVariable)) {\n      sortAcc = countAcc;\n      deferredAggs = freq.getFacetStats();\n    } else if (\"index\".equals(freq.sortVariable)) {\n      // allow subclass to set indexOrderAcc first\n      if (indexOrderAcc == null) {\n        // This sorting accumulator just goes by the slot number, so does not need to be collected\n        // and hence does not need to find it's way into the accMap or accs array.\n        indexOrderAcc = new SortSlotAcc(fcontext);\n      }\n      sortAcc = indexOrderAcc;\n      deferredAggs = freq.getFacetStats();\n    }\n\n    // If we are going to return all buckets and if there are no subfacets (that would need a domain), then don't defer\n    // any aggregation calculations to a second phase.  This way we can avoid calculating domains for each bucket, which\n    // can be expensive.\n    if (freq.limit == -1 && freq.subFacets.size() == 0) {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n      int otherAccIdx = 0;\n      for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n        AggValueSource agg = entry.getValue();\n        SlotAcc acc = agg.createSlotAcc(fcontext, numDocs, numSlots);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n        accs[otherAccIdx++] = acc;\n      }\n      if (accs.length == 1) {\n        collectAcc = accs[0];\n      } else {\n        collectAcc = new MultiAcc(fcontext, accs);\n      }\n\n      if (sortAcc == null) {\n        sortAcc = accMap.get(freq.sortVariable);\n        assert sortAcc != null;\n      }\n\n      deferredAggs = null;\n    }\n\n    if (sortAcc == null) {\n      AggValueSource sortAgg = freq.getFacetStats().get(freq.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = freq.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs = new HashMap<>(freq.getFacetStats());\n      deferredAggs.remove(freq.sortVariable);\n    }\n\n    if (deferredAggs == null || deferredAggs.size() == 0) {\n      deferredAggs = null;\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"055706edcc08dfbacd42d8ed4144209d3dc05b67","date":1569388195,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createCollectAcc(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createCollectAcc(int,int).mjava","sourceNew":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n    \n    // start with the assumption that we're going to defer the computation of all stats\n    deferredAggs.putAll(freq.getFacetStats());\n \n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    sortAcc = getTrivialSortingSlotAcc(this.sort);\n\n    if (this.singlePassSlotAccCollection) {\n      // If we are going to return all buckets, and if there are no subfacets (that would need a domain),\n      // then don't defer any aggregation calculations to a second phase.\n      // This way we can avoid calculating domains for each bucket, which can be expensive.\n\n      // TODO: BEGIN: why can't we just call createAccs here ?\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n      int otherAccIdx = 0;\n      for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n        AggValueSource agg = entry.getValue();\n        SlotAcc acc = agg.createSlotAcc(fcontext, numDocs, numSlots);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n        accs[otherAccIdx++] = acc;\n      }\n      // TODO: END: why can't we just call createAccs here ?\n      if (accs.length == 1) {\n        collectAcc = accs[0];\n      } else {\n        collectAcc = new MultiAcc(fcontext, accs);\n      }\n\n      if (sortAcc == null) {\n        sortAcc = accMap.get(sort.sortVariable);\n        assert sortAcc != null;\n      }\n\n      deferredAggs.clear();\n    }\n\n    if (sortAcc == null) {\n      AggValueSource sortAgg = freq.getFacetStats().get(sort.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = sort.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs.remove(sort.sortVariable);\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (sortAcc == null) {\n      // as sort is already validated, in what case sortAcc would be null?\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Invalid sort '\" + sort + \"' for field '\" + sf.getName() + \"'\");\n    }\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","sourceOld":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n    \n    // start with the assumption that we're going to defer the computation of all stats\n    deferredAggs.putAll(freq.getFacetStats());\n \n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    sortAcc = getTrivialSortingSlotAcc(this.sort);\n\n    if (this.singlePassSlotAccCollection) {\n      // If we are going to return all buckets, and if there are no subfacets (that would need a domain),\n      // then don't defer any aggregation calculations to a second phase.\n      // This way we can avoid calculating domains for each bucket, which can be expensive.\n\n      // TODO: BEGIN: why can't we just call createAccs here ?\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n      int otherAccIdx = 0;\n      for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n        AggValueSource agg = entry.getValue();\n        SlotAcc acc = agg.createSlotAcc(fcontext, numDocs, numSlots);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n        accs[otherAccIdx++] = acc;\n      }\n      // TODO: END: why can't we just call createAccs here ?\n      if (accs.length == 1) {\n        collectAcc = accs[0];\n      } else {\n        collectAcc = new MultiAcc(fcontext, accs);\n      }\n\n      if (sortAcc == null) {\n        sortAcc = accMap.get(sort.sortVariable);\n        assert sortAcc != null;\n      }\n\n      deferredAggs.clear();\n    }\n\n    if (sortAcc == null) {\n      AggValueSource sortAgg = freq.getFacetStats().get(sort.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = sort.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs.remove(sort.sortVariable);\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createCollectAcc(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createCollectAcc(int,int).mjava","sourceNew":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n    \n    // start with the assumption that we're going to defer the computation of all stats\n    deferredAggs.putAll(freq.getFacetStats());\n \n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new SlotAcc.CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    sortAcc = getTrivialSortingSlotAcc(this.sort);\n\n    if (this.singlePassSlotAccCollection) {\n      // If we are going to return all buckets, and if there are no subfacets (that would need a domain),\n      // then don't defer any aggregation calculations to a second phase.\n      // This way we can avoid calculating domains for each bucket, which can be expensive.\n\n      // TODO: BEGIN: why can't we just call createAccs here ?\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n      int otherAccIdx = 0;\n      for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n        AggValueSource agg = entry.getValue();\n        SlotAcc acc = agg.createSlotAcc(fcontext, numDocs, numSlots);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n        accs[otherAccIdx++] = acc;\n      }\n      // TODO: END: why can't we just call createAccs here ?\n      if (accs.length == 1) {\n        collectAcc = accs[0];\n      } else {\n        collectAcc = new MultiAcc(fcontext, accs);\n      }\n\n      if (sortAcc == null) {\n        sortAcc = accMap.get(sort.sortVariable);\n        assert sortAcc != null;\n      }\n\n      deferredAggs.clear();\n    }\n\n    if (sortAcc == null) {\n      AggValueSource sortAgg = freq.getFacetStats().get(sort.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = sort.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs.remove(sort.sortVariable);\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (sortAcc == null) {\n      // as sort is already validated, in what case sortAcc would be null?\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Invalid sort '\" + sort + \"' for field '\" + sf.getName() + \"'\");\n    }\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","sourceOld":"  void createCollectAcc(int numDocs, int numSlots) throws IOException {\n    accMap = new LinkedHashMap<>();\n    \n    // start with the assumption that we're going to defer the computation of all stats\n    deferredAggs.putAll(freq.getFacetStats());\n \n    // we always count...\n    // allow a subclass to set a custom counter.\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, numSlots);\n    }\n\n    sortAcc = getTrivialSortingSlotAcc(this.sort);\n\n    if (this.singlePassSlotAccCollection) {\n      // If we are going to return all buckets, and if there are no subfacets (that would need a domain),\n      // then don't defer any aggregation calculations to a second phase.\n      // This way we can avoid calculating domains for each bucket, which can be expensive.\n\n      // TODO: BEGIN: why can't we just call createAccs here ?\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n      int otherAccIdx = 0;\n      for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n        AggValueSource agg = entry.getValue();\n        SlotAcc acc = agg.createSlotAcc(fcontext, numDocs, numSlots);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n        accs[otherAccIdx++] = acc;\n      }\n      // TODO: END: why can't we just call createAccs here ?\n      if (accs.length == 1) {\n        collectAcc = accs[0];\n      } else {\n        collectAcc = new MultiAcc(fcontext, accs);\n      }\n\n      if (sortAcc == null) {\n        sortAcc = accMap.get(sort.sortVariable);\n        assert sortAcc != null;\n      }\n\n      deferredAggs.clear();\n    }\n\n    if (sortAcc == null) {\n      AggValueSource sortAgg = freq.getFacetStats().get(sort.sortVariable);\n      if (sortAgg != null) {\n        collectAcc = sortAgg.createSlotAcc(fcontext, numDocs, numSlots);\n        collectAcc.key = sort.sortVariable; // TODO: improve this\n      }\n      sortAcc = collectAcc;\n      deferredAggs.remove(sort.sortVariable);\n    }\n\n    boolean needOtherAccs = freq.allBuckets;  // TODO: use for missing too...\n\n    if (sortAcc == null) {\n      // as sort is already validated, in what case sortAcc would be null?\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Invalid sort '\" + sort + \"' for field '\" + sf.getName() + \"'\");\n    }\n\n    if (!needOtherAccs) {\n      // we may need them later, but we don't want to create them now\n      // otherwise we won't know if we need to call setNextReader on them.\n      return;\n    }\n\n    // create the deferred aggs up front for use by allBuckets\n    createOtherAccs(numDocs, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["403d05f7f8d69b65659157eff1bc1d2717f04c66","a510dfee3d23db41e13a46adf0e1b2bfc303f108"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["055706edcc08dfbacd42d8ed4144209d3dc05b67"],"055706edcc08dfbacd42d8ed4144209d3dc05b67":["94ce69d020f939568b84a1dbbfbd11bfd9907b73"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","79759974460bc59933cd169acc94f5c6b16368d5"],"79759974460bc59933cd169acc94f5c6b16368d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["a510dfee3d23db41e13a46adf0e1b2bfc303f108"],"a510dfee3d23db41e13a46adf0e1b2bfc303f108":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["e9017cf144952056066919f1ebc7897ff9bd71b1","a510dfee3d23db41e13a46adf0e1b2bfc303f108","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"055706edcc08dfbacd42d8ed4144209d3dc05b67":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","79759974460bc59933cd169acc94f5c6b16368d5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"79759974460bc59933cd169acc94f5c6b16368d5":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a510dfee3d23db41e13a46adf0e1b2bfc303f108":["e9017cf144952056066919f1ebc7897ff9bd71b1","94ce69d020f939568b84a1dbbfbd11bfd9907b73"],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["055706edcc08dfbacd42d8ed4144209d3dc05b67"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}