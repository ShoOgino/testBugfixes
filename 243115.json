{"path":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int,int,boolean).mjava","commits":[{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int,boolean).mjava","sourceNew":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, boolean storePayloads,\n                   IndexOptions indexOptions, DocValuesType docValues, long dvGen, Map<String,String> attributes,\n                   int pointDataDimensionCount, int pointIndexDimensionCount, int pointNumBytes, boolean softDeletesField) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType must not be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions must not be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    this.pointDataDimensionCount = pointDataDimensionCount;\n    this.pointIndexDimensionCount = pointIndexDimensionCount;\n    this.pointNumBytes = pointNumBytes;\n    this.softDeletesField = softDeletesField;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, boolean storePayloads,\n                   IndexOptions indexOptions, DocValuesType docValues, long dvGen, Map<String,String> attributes,\n                   int pointDimensionCount, int pointNumBytes, boolean softDeletesField) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType must not be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions must not be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    this.pointDimensionCount = pointDimensionCount;\n    this.pointNumBytes = pointNumBytes;\n    this.softDeletesField = softDeletesField;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int,int,boolean).mjava","sourceNew":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, boolean storePayloads,\n                   IndexOptions indexOptions, DocValuesType docValues, long dvGen, Map<String,String> attributes,\n                   int pointDimensionCount, int pointIndexDimensionCount, int pointNumBytes, boolean softDeletesField) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType must not be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions must not be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    this.pointDimensionCount = pointDimensionCount;\n    this.pointIndexDimensionCount = pointIndexDimensionCount;\n    this.pointNumBytes = pointNumBytes;\n    this.softDeletesField = softDeletesField;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, boolean storePayloads,\n                   IndexOptions indexOptions, DocValuesType docValues, long dvGen, Map<String,String> attributes,\n                   int pointDataDimensionCount, int pointIndexDimensionCount, int pointNumBytes, boolean softDeletesField) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType must not be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions must not be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    this.pointDataDimensionCount = pointDataDimensionCount;\n    this.pointIndexDimensionCount = pointIndexDimensionCount;\n    this.pointNumBytes = pointNumBytes;\n    this.softDeletesField = softDeletesField;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"683b2041fcb490acd2bfec6034c593b3cfb2098c","date":1596135595,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,int,boolean,boolean,boolean,IndexOptions,DocValuesType,long,Map[String,String],int,int,int,boolean).mjava","sourceNew":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, boolean storePayloads,\n                   IndexOptions indexOptions, DocValuesType docValues, long dvGen, Map<String,String> attributes,\n                   int pointDimensionCount, int pointIndexDimensionCount, int pointNumBytes, boolean softDeletesField) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType must not be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions must not be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    this.pointDimensionCount = pointDimensionCount;\n    this.pointIndexDimensionCount = pointIndexDimensionCount;\n    this.pointNumBytes = pointNumBytes;\n    this.softDeletesField = softDeletesField;\n    this.checkConsistency();\n  }\n\n","sourceOld":"  /**\n   * Sole constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, int number, boolean storeTermVector, boolean omitNorms, boolean storePayloads,\n                   IndexOptions indexOptions, DocValuesType docValues, long dvGen, Map<String,String> attributes,\n                   int pointDimensionCount, int pointIndexDimensionCount, int pointNumBytes, boolean softDeletesField) {\n    this.name = Objects.requireNonNull(name);\n    this.number = number;\n    this.docValuesType = Objects.requireNonNull(docValues, \"DocValuesType must not be null (field: \\\"\" + name + \"\\\")\");\n    this.indexOptions = Objects.requireNonNull(indexOptions, \"IndexOptions must not be null (field: \\\"\" + name + \"\\\")\");\n    if (indexOptions != IndexOptions.NONE) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n    }\n    this.dvGen = dvGen;\n    this.attributes = Objects.requireNonNull(attributes);\n    this.pointDimensionCount = pointDimensionCount;\n    this.pointIndexDimensionCount = pointIndexDimensionCount;\n    this.pointNumBytes = pointNumBytes;\n    this.softDeletesField = softDeletesField;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"683b2041fcb490acd2bfec6034c593b3cfb2098c":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["683b2041fcb490acd2bfec6034c593b3cfb2098c"]},"commit2Childs":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["683b2041fcb490acd2bfec6034c593b3cfb2098c"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6652c943595e92c187ee904c382863013eae28f"],"683b2041fcb490acd2bfec6034c593b3cfb2098c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}