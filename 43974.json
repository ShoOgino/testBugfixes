{"path":"solr/solrj/src/java/org/apache/solr/common/util/TimeSource#get(String).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/TimeSource#get(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Obtain an instance of time source.\n   * @param type supported types: <code>currentTime</code>, <code>nanoTime</code> and accelerated\n   *             time with a double factor in the form of <code>simTime:FACTOR</code>, eg.\n   *             <code>simTime:2.5</code>\n   * @return one of the supported types\n   */\n  public static TimeSource get(String type) {\n    if (type == null) {\n      return NANO_TIME;\n    } else if (type.equals(\"currentTime\")) {\n      return CURRENT_TIME;\n    } else if (type.equals(\"nanoTime\")) {\n      return NANO_TIME;\n    } else if (type.startsWith(\"simTime\")) {\n      return simTimeSources.computeIfAbsent(type, t -> {\n        String[] parts = t.split(\":\");\n        double mul = 1.0;\n        if (parts.length != 2) {\n          log.warn(\"Invalid simTime specification, assuming multiplier==1.0: '\" + type + \"'\");\n        } else {\n          try {\n            mul = Double.parseDouble(parts[1]);\n          } catch (Exception e) {\n            log.warn(\"Invalid simTime specification, assuming multiplier==1.0: '\" + type + \"'\");\n          }\n        }\n        return new SimTimeSource(mul);\n      });\n    } else {\n      throw new UnsupportedOperationException(\"Unsupported time source type '\" + type + \"'.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/TimeSource#get(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/TimeSource#get(String).mjava","sourceNew":"  /**\n   * Obtain an instance of time source.\n   * @param type supported types: <code>currentTime</code>, <code>nanoTime</code> and accelerated\n   *             time with a double factor in the form of <code>simTime:FACTOR</code>, eg.\n   *             <code>simTime:2.5</code>\n   * @return one of the supported types\n   */\n  public static TimeSource get(String type) {\n    if (type == null) {\n      return NANO_TIME;\n    } else if (type.equals(\"currentTime\") || type.equals(CurrentTimeSource.class.getSimpleName())) {\n      return CURRENT_TIME;\n    } else if (type.equals(\"nanoTime\") || type.equals(NanoTimeSource.class.getSimpleName())) {\n      return NANO_TIME;\n    } else if (type.startsWith(\"simTime\") || type.startsWith(SimTimeSource.class.getSimpleName())) {\n      return simTimeSources.computeIfAbsent(type, t -> {\n        String[] parts = t.split(\":\");\n        double mul = 1.0;\n        if (parts.length != 2) {\n          log.warn(\"Invalid simTime specification, assuming multiplier==1.0: '\" + type + \"'\");\n        } else {\n          try {\n            mul = Double.parseDouble(parts[1]);\n          } catch (Exception e) {\n            log.warn(\"Invalid simTime specification, assuming multiplier==1.0: '\" + type + \"'\");\n          }\n        }\n        return new SimTimeSource(mul);\n      });\n    } else {\n      throw new UnsupportedOperationException(\"Unsupported time source type '\" + type + \"'.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Obtain an instance of time source.\n   * @param type supported types: <code>currentTime</code>, <code>nanoTime</code> and accelerated\n   *             time with a double factor in the form of <code>simTime:FACTOR</code>, eg.\n   *             <code>simTime:2.5</code>\n   * @return one of the supported types\n   */\n  public static TimeSource get(String type) {\n    if (type == null) {\n      return NANO_TIME;\n    } else if (type.equals(\"currentTime\")) {\n      return CURRENT_TIME;\n    } else if (type.equals(\"nanoTime\")) {\n      return NANO_TIME;\n    } else if (type.startsWith(\"simTime\")) {\n      return simTimeSources.computeIfAbsent(type, t -> {\n        String[] parts = t.split(\":\");\n        double mul = 1.0;\n        if (parts.length != 2) {\n          log.warn(\"Invalid simTime specification, assuming multiplier==1.0: '\" + type + \"'\");\n        } else {\n          try {\n            mul = Double.parseDouble(parts[1]);\n          } catch (Exception e) {\n            log.warn(\"Invalid simTime specification, assuming multiplier==1.0: '\" + type + \"'\");\n          }\n        }\n        return new SimTimeSource(mul);\n      });\n    } else {\n      throw new UnsupportedOperationException(\"Unsupported time source type '\" + type + \"'.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/TimeSource#get(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/TimeSource#get(String).mjava","sourceNew":"  /**\n   * Obtain an instance of time source.\n   * @param type supported types: <code>currentTime</code>, <code>nanoTime</code> and accelerated\n   *             time with a double factor in the form of <code>simTime:FACTOR</code>, eg.\n   *             <code>simTime:2.5</code>\n   * @return one of the supported types\n   */\n  public static TimeSource get(String type) {\n    if (type == null) {\n      return NANO_TIME;\n    } else if (type.equals(\"currentTime\") || type.equals(CurrentTimeSource.class.getSimpleName())) {\n      return CURRENT_TIME;\n    } else if (type.equals(\"nanoTime\") || type.equals(NanoTimeSource.class.getSimpleName())) {\n      return NANO_TIME;\n    } else if (type.startsWith(\"simTime\") || type.startsWith(SimTimeSource.class.getSimpleName())) {\n      return simTimeSources.computeIfAbsent(type, t -> {\n        String[] parts = t.split(\":\");\n        double mul = 1.0;\n        if (parts.length != 2) {\n          log.warn(\"Invalid simTime specification, assuming multiplier==1.0: '{}'.\", type);\n        } else {\n          try {\n            mul = Double.parseDouble(parts[1]);\n          } catch (Exception e) {\n            log.warn(\"Invalid simTime specification, assuming multiplier==1.0: '{}'.\", type);\n          }\n        }\n        return new SimTimeSource(mul);\n      });\n    } else {\n      throw new UnsupportedOperationException(\"Unsupported time source type '\" + type + \"'.\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Obtain an instance of time source.\n   * @param type supported types: <code>currentTime</code>, <code>nanoTime</code> and accelerated\n   *             time with a double factor in the form of <code>simTime:FACTOR</code>, eg.\n   *             <code>simTime:2.5</code>\n   * @return one of the supported types\n   */\n  public static TimeSource get(String type) {\n    if (type == null) {\n      return NANO_TIME;\n    } else if (type.equals(\"currentTime\") || type.equals(CurrentTimeSource.class.getSimpleName())) {\n      return CURRENT_TIME;\n    } else if (type.equals(\"nanoTime\") || type.equals(NanoTimeSource.class.getSimpleName())) {\n      return NANO_TIME;\n    } else if (type.startsWith(\"simTime\") || type.startsWith(SimTimeSource.class.getSimpleName())) {\n      return simTimeSources.computeIfAbsent(type, t -> {\n        String[] parts = t.split(\":\");\n        double mul = 1.0;\n        if (parts.length != 2) {\n          log.warn(\"Invalid simTime specification, assuming multiplier==1.0: '\" + type + \"'\");\n        } else {\n          try {\n            mul = Double.parseDouble(parts[1]);\n          } catch (Exception e) {\n            log.warn(\"Invalid simTime specification, assuming multiplier==1.0: '\" + type + \"'\");\n          }\n        }\n        return new SimTimeSource(mul);\n      });\n    } else {\n      throw new UnsupportedOperationException(\"Unsupported time source type '\" + type + \"'.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edf5b262a72d10530eb2f01dc8f19060355b213e":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dc613ed6f75d1988140301ee8de8fdb056fa337"]},"commit2Childs":{"6dc613ed6f75d1988140301ee8de8fdb056fa337":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}