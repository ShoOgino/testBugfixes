{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#encodeLat(double).mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#encodeLat(double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/DimensionalLatLonField#encodeLat(double).mjava","sourceNew":"  /** Quantizes double (64 bit) latitude into 32 bits */\n  public static int encodeLat(double lat) {\n    assert GeoUtils.isValidLat(lat): \"lat=\" + lat;\n    long x = (long) (lat * LAT_SCALE);\n    assert x < Integer.MAX_VALUE: \"lat=\" + lat + \" mapped to Integer.MAX_VALUE + \" + (x - Integer.MAX_VALUE);\n    assert x > Integer.MIN_VALUE: \"lat=\" + lat + \" mapped to Integer.MIN_VALUE\";\n    return (int) x;\n  }\n\n","sourceOld":"  /** Quantizes double (64 bit) latitude into 32 bits */\n  public static int encodeLat(double lat) {\n    assert GeoUtils.isValidLat(lat): \"lat=\" + lat;\n    long x = (long) (lat * LAT_SCALE);\n    assert x < Integer.MAX_VALUE: \"lat=\" + lat + \" mapped to Integer.MAX_VALUE + \" + (x - Integer.MAX_VALUE);\n    assert x > Integer.MIN_VALUE: \"lat=\" + lat + \" mapped to Integer.MIN_VALUE\";\n    return (int) x;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ee361295fb38310ac4d53cb4773d1622423d68","date":1456833885,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#encodeLat(double).mjava","sourceNew":null,"sourceOld":"  /** Quantizes double (64 bit) latitude into 32 bits */\n  public static int encodeLat(double lat) {\n    assert GeoUtils.isValidLat(lat): \"lat=\" + lat;\n    long x = (long) (lat * LAT_SCALE);\n    assert x < Integer.MAX_VALUE: \"lat=\" + lat + \" mapped to Integer.MAX_VALUE + \" + (x - Integer.MAX_VALUE);\n    assert x > Integer.MIN_VALUE: \"lat=\" + lat + \" mapped to Integer.MIN_VALUE\";\n    return (int) x;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#encodeLat(double).mjava","sourceNew":null,"sourceOld":"  /** Quantizes double (64 bit) latitude into 32 bits */\n  public static int encodeLat(double lat) {\n    assert GeoUtils.isValidLat(lat): \"lat=\" + lat;\n    long x = (long) (lat * LAT_SCALE);\n    assert x < Integer.MAX_VALUE: \"lat=\" + lat + \" mapped to Integer.MAX_VALUE + \" + (x - Integer.MAX_VALUE);\n    assert x > Integer.MIN_VALUE: \"lat=\" + lat + \" mapped to Integer.MIN_VALUE\";\n    return (int) x;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"94ee361295fb38310ac4d53cb4773d1622423d68":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","94ee361295fb38310ac4d53cb4773d1622423d68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["94ee361295fb38310ac4d53cb4773d1622423d68","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"94ee361295fb38310ac4d53cb4773d1622423d68":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}