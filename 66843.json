{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getShardReplicationFactor(String,NamedList).mjava","commits":[{"id":"9d22d0f5940f155267b250876fa797ff69e8e6e7","date":1400540695,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getShardReplicationFactor(String,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n    \n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof CloudSolrServer.RouteResponse) {\n      NamedList routes = ((CloudSolrServer.RouteResponse)resp).getRouteResponses();      \n      ClusterState clusterState = zkStateReader.getClusterState();     \n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : clusterState.getActiveSlices(collection)) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n      \n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }    \n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getShardReplicationFactor(String,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n    \n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof CloudSolrServer.RouteResponse) {\n      NamedList routes = ((CloudSolrServer.RouteResponse)resp).getRouteResponses();      \n      ClusterState clusterState = zkStateReader.getClusterState();     \n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : clusterState.getActiveSlices(collection)) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n      \n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }    \n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getShardReplicationFactor(String,NamedList).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#getShardReplicationFactor(String,NamedList).mjava","sourceNew":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n    \n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof CloudSolrClient.RouteResponse) {\n      NamedList routes = ((CloudSolrClient.RouteResponse)resp).getRouteResponses();\n      ClusterState clusterState = zkStateReader.getClusterState();     \n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : clusterState.getActiveSlices(collection)) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n      \n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }    \n    return results;\n  }\n\n","sourceOld":"  /**\n   * Walks the NamedList response after performing an update request looking for\n   * the replication factor that was achieved in each shard involved in the request.\n   * For single doc updates, there will be only one shard in the return value. \n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Map<String,Integer> getShardReplicationFactor(String collection, NamedList resp) {\n    connect();\n    \n    Map<String,Integer> results = new HashMap<String,Integer>();\n    if (resp instanceof CloudSolrServer.RouteResponse) {\n      NamedList routes = ((CloudSolrServer.RouteResponse)resp).getRouteResponses();      \n      ClusterState clusterState = zkStateReader.getClusterState();     \n      Map<String,String> leaders = new HashMap<String,String>();\n      for (Slice slice : clusterState.getActiveSlices(collection)) {\n        Replica leader = slice.getLeader();\n        if (leader != null) {\n          ZkCoreNodeProps zkProps = new ZkCoreNodeProps(leader);\n          String leaderUrl = zkProps.getBaseUrl() + \"/\" + zkProps.getCoreName();\n          leaders.put(leaderUrl, slice.getName());\n          String altLeaderUrl = zkProps.getBaseUrl() + \"/\" + collection;\n          leaders.put(altLeaderUrl, slice.getName());\n        }\n      }\n      \n      Iterator<Map.Entry<String,Object>> routeIter = routes.iterator();\n      while (routeIter.hasNext()) {\n        Map.Entry<String,Object> next = routeIter.next();\n        String host = next.getKey();\n        NamedList hostResp = (NamedList)next.getValue();\n        Integer rf = (Integer)((NamedList)hostResp.get(\"responseHeader\")).get(UpdateRequest.REPFACT);\n        if (rf != null) {\n          String shard = leaders.get(host);\n          if (shard == null) {\n            if (host.endsWith(\"/\"))\n              shard = leaders.get(host.substring(0,host.length()-1));\n            if (shard == null) {\n              shard = host;\n            }\n          }\n          results.put(shard, rf);\n        }\n      }\n    }    \n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9d22d0f5940f155267b250876fa797ff69e8e6e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["9d22d0f5940f155267b250876fa797ff69e8e6e7"],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d22d0f5940f155267b250876fa797ff69e8e6e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"9d22d0f5940f155267b250876fa797ff69e8e6e7":["bafca15d8e408346a67f4282ad1143b88023893b","b7605579001505896d48b07160075a5c8b8e128e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d22d0f5940f155267b250876fa797ff69e8e6e7","b7605579001505896d48b07160075a5c8b8e128e"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7605579001505896d48b07160075a5c8b8e128e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}