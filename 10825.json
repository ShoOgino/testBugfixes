{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemoveListener(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","commits":[{"id":"32c42b3b8d01657c1fa648ce7faafee5d9a68f07","date":1490344676,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemoveListener(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"/dev/null","sourceNew":"  private void handleRemoveListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(\"name\");\n\n    if (listenerName == null || listenerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The listener name cannot be null or empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> listeners = (Map<String, Object>) autoScalingConf.get(\"listeners\");\n    if (listeners == null || !listeners.containsKey(listenerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No listener exists with name: \" + listenerName);\n    }\n    zkSetListener(container.getZkController().getZkStateReader(), listenerName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66bf265775ef85fdd57c7b2bd73d9f3897fae1cf","date":1496154116,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemoveListener(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemoveListener(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private void handleRemoveListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n\n    if (listenerName == null || listenerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The listener name cannot be null or empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> listeners = (Map<String, Object>) autoScalingConf.get(\"listeners\");\n    if (listeners == null || !listeners.containsKey(listenerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No listener exists with name: \" + listenerName);\n    }\n    zkSetListener(container.getZkController().getZkStateReader(), listenerName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  private void handleRemoveListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(\"name\");\n\n    if (listenerName == null || listenerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The listener name cannot be null or empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> listeners = (Map<String, Object>) autoScalingConf.get(\"listeners\");\n    if (listeners == null || !listeners.containsKey(listenerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No listener exists with name: \" + listenerName);\n    }\n    zkSetListener(container.getZkController().getZkStateReader(), listenerName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemoveListener(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemoveListener(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private AutoScalingConfig handleRemoveListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                    AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n\n    if (listenerName == null || listenerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The listener name cannot be null or empty\");\n    }\n    Map<String, AutoScalingConfig.TriggerListenerConfig> listeners = currentConfig.getTriggerListenerConfigs();\n    if (listeners == null || !listeners.containsKey(listenerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No listener exists with name: \" + listenerName);\n    }\n    currentConfig = currentConfig.withoutTriggerListenerConfig(listenerName);\n    return currentConfig;\n  }\n\n","sourceOld":"  private void handleRemoveListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n\n    if (listenerName == null || listenerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The listener name cannot be null or empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> listeners = (Map<String, Object>) autoScalingConf.get(\"listeners\");\n    if (listeners == null || !listeners.containsKey(listenerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No listener exists with name: \" + listenerName);\n    }\n    zkSetListener(container.getZkController().getZkStateReader(), listenerName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"32c42b3b8d01657c1fa648ce7faafee5d9a68f07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66bf265775ef85fdd57c7b2bd73d9f3897fae1cf":["32c42b3b8d01657c1fa648ce7faafee5d9a68f07"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["66bf265775ef85fdd57c7b2bd73d9f3897fae1cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"32c42b3b8d01657c1fa648ce7faafee5d9a68f07":["66bf265775ef85fdd57c7b2bd73d9f3897fae1cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["32c42b3b8d01657c1fa648ce7faafee5d9a68f07","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"66bf265775ef85fdd57c7b2bd73d9f3897fae1cf":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}