{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentOptimizationTest#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentOptimizationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentOptimizationTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"test_sS\", \"21\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }),                     //  2\n          // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n          \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"test_sS\", \"22\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }));                    //  5\n    index(id, \"3\", \"text\", \"a\", \"test_sS\", \"23\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }));                    //  8\n    index(id, \"4\", \"text\", \"b\", \"test_sS\", \"24\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }));                    //  4\n    index(id, \"5\", \"text\", \"a\", \"test_sS\", \"25\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }));              //  9\n    index(id, \"6\", \"text\", \"c\", \"test_sS\", \"26\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }));  //  3\n    index(id, \"7\", \"text\", \"c\", \"test_sS\", \"27\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }));                    //  1\n    index(id, \"8\", \"text\", \"c\", \"test_sS\", \"28\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }));                    // 11\n    index(id, \"9\", \"text\", \"a\", \"test_sS\", \"29\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }));                    // 10\n    index(id, \"10\", \"text\", \"b\", \"test_sS\", \"30\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));                   //  6\n    index(id, \"11\", \"text\", \"d\", \"test_sS\", \"31\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })); // 13\n    index(id, \"12\", \"text\", \"d\", \"test_sS\", \"32\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }));             //  7\n    index(id, \"13\", \"text\", \"d\", \"test_sS\", \"33\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));             // 12\n    commit();\n\n    QueryResponse rsp;\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    assertFieldValues(rsp.getResults(), \"test_sS\", \"27\", \"21\", \"26\", \"24\", \"22\", \"30\", \"32\", \"23\", \"25\", \"29\", \"28\", \"33\", \"31\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n    // works with just fl=id as well\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    assertFieldValues(rsp.getResults(), \"test_sS\", \"27\", \"21\", \"26\", \"24\", \"22\", \"30\", \"32\", \"23\", \"25\", \"29\", \"28\", \"33\", \"31\");\n\n    QueryResponse nonDistribRsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    compareResponses(rsp, nonDistribRsp); // make sure distrib and distrib.singlePass return the same thing\n\n    nonDistribRsp = query(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n    compareResponses(rsp, nonDistribRsp); // make sure distrib and distrib.singlePass return the same thing\n\n    // verify that the optimization actually works\n    verifySinglePass(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\"); // id only is optimized by default\n    verifySinglePass(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload desc\", \"rows\", \"20\"); // id,score only is optimized by default\n    verifySinglePass(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n\n    // SOLR-6545, wild card field list\n    index(id, \"19\", \"text\", \"d\", \"cat_a_sS\", \"1\" ,\"dynamic\", \"2\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));\n    commit();\n\n    nonDistribRsp = query(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\");\n    rsp = query(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n\n    assertFieldValues(nonDistribRsp.getResults(), \"id\", 19);\n    assertFieldValues(rsp.getResults(), \"id\", 19);\n\n    nonDistribRsp = query(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\");\n    rsp = query(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n    assertFieldValues(nonDistribRsp.getResults(), \"id\", 19);\n    assertFieldValues(rsp.getResults(), \"id\", 19);\n\n    verifySinglePass(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n    verifySinglePass(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n\n    // see SOLR-6795, distrib.singlePass=true would return score even when not asked for\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"_version_\", SKIPVAL);\n    // we don't to compare maxScore because most distributed requests return it anyway (just because they have score already)\n    handle.put(\"maxScore\", SKIPVAL);\n    query(\"q\", \"{!func}id\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n\n    // fix for a bug where not all fields are returned if using multiple fl parameters, see SOLR-6796\n    query(\"q\",\"*:*\", \"fl\", \"id\", \"fl\",\"dynamic\",\"sort\",\"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"test_sS\", \"21\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }),                     //  2\n          // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n          \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"test_sS\", \"22\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }));                    //  5\n    index(id, \"3\", \"text\", \"a\", \"test_sS\", \"23\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }));                    //  8\n    index(id, \"4\", \"text\", \"b\", \"test_sS\", \"24\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }));                    //  4\n    index(id, \"5\", \"text\", \"a\", \"test_sS\", \"25\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }));              //  9\n    index(id, \"6\", \"text\", \"c\", \"test_sS\", \"26\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }));  //  3\n    index(id, \"7\", \"text\", \"c\", \"test_sS\", \"27\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }));                    //  1\n    index(id, \"8\", \"text\", \"c\", \"test_sS\", \"28\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }));                    // 11\n    index(id, \"9\", \"text\", \"a\", \"test_sS\", \"29\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }));                    // 10\n    index(id, \"10\", \"text\", \"b\", \"test_sS\", \"30\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));                   //  6\n    index(id, \"11\", \"text\", \"d\", \"test_sS\", \"31\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })); // 13\n    index(id, \"12\", \"text\", \"d\", \"test_sS\", \"32\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }));             //  7\n    index(id, \"13\", \"text\", \"d\", \"test_sS\", \"33\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));             // 12\n    commit();\n\n    QueryResponse rsp;\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    assertFieldValues(rsp.getResults(), \"test_sS\", \"27\", \"21\", \"26\", \"24\", \"22\", \"30\", \"32\", \"23\", \"25\", \"29\", \"28\", \"33\", \"31\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n    // works with just fl=id as well\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    assertFieldValues(rsp.getResults(), \"test_sS\", \"27\", \"21\", \"26\", \"24\", \"22\", \"30\", \"32\", \"23\", \"25\", \"29\", \"28\", \"33\", \"31\");\n\n    QueryResponse nonDistribRsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    compareResponses(rsp, nonDistribRsp); // make sure distrib and distrib.singlePass return the same thing\n\n    nonDistribRsp = query(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n    compareResponses(rsp, nonDistribRsp); // make sure distrib and distrib.singlePass return the same thing\n\n    // verify that the optimization actually works\n    verifySinglePass(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\"); // id only is optimized by default\n    verifySinglePass(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload desc\", \"rows\", \"20\"); // id,score only is optimized by default\n    verifySinglePass(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n\n    // SOLR-6545, wild card field list\n    index(id, \"19\", \"text\", \"d\", \"cat_a_sS\", \"1\" ,\"dynamic\", \"2\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));\n    commit();\n\n    nonDistribRsp = query(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\");\n    rsp = query(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n\n    assertFieldValues(nonDistribRsp.getResults(), \"id\", 19);\n    assertFieldValues(rsp.getResults(), \"id\", 19);\n\n    nonDistribRsp = query(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\");\n    rsp = query(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n    assertFieldValues(nonDistribRsp.getResults(), \"id\", 19);\n    assertFieldValues(rsp.getResults(), \"id\", 19);\n\n    verifySinglePass(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n    verifySinglePass(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n\n    // see SOLR-6795, distrib.singlePass=true would return score even when not asked for\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"_version_\", SKIPVAL);\n    // we don't to compare maxScore because most distributed requests return it anyway (just because they have score already)\n    handle.put(\"maxScore\", SKIPVAL);\n    query(\"q\", \"{!func}id\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n\n    // fix for a bug where not all fields are returned if using multiple fl parameters, see SOLR-6796\n    query(\"q\",\"*:*\", \"fl\", \"id\", \"fl\",\"dynamic\",\"sort\",\"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05704e317032f0bcc6bc978b6c6c5af1cba5cd9","date":1424933272,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentOptimizationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentOptimizationTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    waitForThingsToLevelOut(30);\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"test_sS\", \"21\", \"payload\", ByteBuffer.wrap(new byte[]{0x12, 0x62, 0x15}),                     //  2\n        // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n        \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"test_sS\", \"22\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x16}));                    //  5\n    index(id, \"3\", \"text\", \"a\", \"test_sS\", \"23\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x32, 0x58}));                    //  8\n    index(id, \"4\", \"text\", \"b\", \"test_sS\", \"24\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x15}));                    //  4\n    index(id, \"5\", \"text\", \"a\", \"test_sS\", \"25\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x35, 0x10, 0x00}));              //  9\n    index(id, \"6\", \"text\", \"c\", \"test_sS\", \"26\", \"payload\", ByteBuffer.wrap(new byte[]{0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03}));  //  3\n    index(id, \"7\", \"text\", \"c\", \"test_sS\", \"27\", \"payload\", ByteBuffer.wrap(new byte[]{0x00, 0x3c, 0x73}));                    //  1\n    index(id, \"8\", \"text\", \"c\", \"test_sS\", \"28\", \"payload\", ByteBuffer.wrap(new byte[]{0x59, 0x2d, 0x4d}));                    // 11\n    index(id, \"9\", \"text\", \"a\", \"test_sS\", \"29\", \"payload\", ByteBuffer.wrap(new byte[]{0x39, 0x79, 0x7a}));                    // 10\n    index(id, \"10\", \"text\", \"b\", \"test_sS\", \"30\", \"payload\", ByteBuffer.wrap(new byte[]{0x31, 0x39, 0x7c}));                   //  6\n    index(id, \"11\", \"text\", \"d\", \"test_sS\", \"31\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0xff, (byte) 0xaf, (byte) 0x9c})); // 13\n    index(id, \"12\", \"text\", \"d\", \"test_sS\", \"32\", \"payload\", ByteBuffer.wrap(new byte[]{0x34, (byte) 0xdd, 0x4d}));             //  7\n    index(id, \"13\", \"text\", \"d\", \"test_sS\", \"33\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x33}));             // 12\n    commit();\n\n    QueryResponse rsp;\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    assertFieldValues(rsp.getResults(), \"test_sS\", \"27\", \"21\", \"26\", \"24\", \"22\", \"30\", \"32\", \"23\", \"25\", \"29\", \"28\", \"33\", \"31\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n    // works with just fl=id as well\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    assertFieldValues(rsp.getResults(), \"test_sS\", \"27\", \"21\", \"26\", \"24\", \"22\", \"30\", \"32\", \"23\", \"25\", \"29\", \"28\", \"33\", \"31\");\n\n    QueryResponse nonDistribRsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    compareResponses(rsp, nonDistribRsp); // make sure distrib and distrib.singlePass return the same thing\n\n    nonDistribRsp = query(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n    compareResponses(rsp, nonDistribRsp); // make sure distrib and distrib.singlePass return the same thing\n\n    // verify that the optimization actually works\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\"); // id only is optimized by default\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload desc\", \"rows\", \"20\"); // id,score only is optimized by default\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n\n    // SOLR-6545, wild card field list\n    index(id, \"19\", \"text\", \"d\", \"cat_a_sS\", \"1\", \"dynamic\", \"2\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x34}));\n    commit();\n\n    nonDistribRsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\");\n    rsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n\n    assertFieldValues(nonDistribRsp.getResults(), \"id\", 19);\n    assertFieldValues(rsp.getResults(), \"id\", 19);\n\n    nonDistribRsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\");\n    rsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n    assertFieldValues(nonDistribRsp.getResults(), \"id\", 19);\n    assertFieldValues(rsp.getResults(), \"id\", 19);\n\n    queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n    queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n\n    // see SOLR-6795, distrib.singlePass=true would return score even when not asked for\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"_version_\", SKIPVAL);\n    // we don't to compare maxScore because most distributed requests return it anyway (just because they have score already)\n    handle.put(\"maxScore\", SKIPVAL);\n    // this trips the queryWithAsserts function because it uses a custom parser, so just query directly\n    query(\"q\", \"{!func}id\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n\n    // fix for a bug where not all fields are returned if using multiple fl parameters, see SOLR-6796\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"id\", \"fl\", \"dynamic\", \"sort\", \"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"test_sS\", \"21\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }),                     //  2\n          // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n          \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"test_sS\", \"22\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }));                    //  5\n    index(id, \"3\", \"text\", \"a\", \"test_sS\", \"23\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }));                    //  8\n    index(id, \"4\", \"text\", \"b\", \"test_sS\", \"24\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }));                    //  4\n    index(id, \"5\", \"text\", \"a\", \"test_sS\", \"25\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }));              //  9\n    index(id, \"6\", \"text\", \"c\", \"test_sS\", \"26\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }));  //  3\n    index(id, \"7\", \"text\", \"c\", \"test_sS\", \"27\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }));                    //  1\n    index(id, \"8\", \"text\", \"c\", \"test_sS\", \"28\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }));                    // 11\n    index(id, \"9\", \"text\", \"a\", \"test_sS\", \"29\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }));                    // 10\n    index(id, \"10\", \"text\", \"b\", \"test_sS\", \"30\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));                   //  6\n    index(id, \"11\", \"text\", \"d\", \"test_sS\", \"31\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })); // 13\n    index(id, \"12\", \"text\", \"d\", \"test_sS\", \"32\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }));             //  7\n    index(id, \"13\", \"text\", \"d\", \"test_sS\", \"33\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));             // 12\n    commit();\n\n    QueryResponse rsp;\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    assertFieldValues(rsp.getResults(), \"test_sS\", \"27\", \"21\", \"26\", \"24\", \"22\", \"30\", \"32\", \"23\", \"25\", \"29\", \"28\", \"33\", \"31\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n    // works with just fl=id as well\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    assertFieldValues(rsp.getResults(), \"test_sS\", \"27\", \"21\", \"26\", \"24\", \"22\", \"30\", \"32\", \"23\", \"25\", \"29\", \"28\", \"33\", \"31\");\n\n    QueryResponse nonDistribRsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    compareResponses(rsp, nonDistribRsp); // make sure distrib and distrib.singlePass return the same thing\n\n    nonDistribRsp = query(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n    compareResponses(rsp, nonDistribRsp); // make sure distrib and distrib.singlePass return the same thing\n\n    // verify that the optimization actually works\n    verifySinglePass(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\"); // id only is optimized by default\n    verifySinglePass(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload desc\", \"rows\", \"20\"); // id,score only is optimized by default\n    verifySinglePass(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n\n    // SOLR-6545, wild card field list\n    index(id, \"19\", \"text\", \"d\", \"cat_a_sS\", \"1\" ,\"dynamic\", \"2\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));\n    commit();\n\n    nonDistribRsp = query(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\");\n    rsp = query(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n\n    assertFieldValues(nonDistribRsp.getResults(), \"id\", 19);\n    assertFieldValues(rsp.getResults(), \"id\", 19);\n\n    nonDistribRsp = query(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\");\n    rsp = query(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n    assertFieldValues(nonDistribRsp.getResults(), \"id\", 19);\n    assertFieldValues(rsp.getResults(), \"id\", 19);\n\n    verifySinglePass(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n    verifySinglePass(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n\n    // see SOLR-6795, distrib.singlePass=true would return score even when not asked for\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"_version_\", SKIPVAL);\n    // we don't to compare maxScore because most distributed requests return it anyway (just because they have score already)\n    handle.put(\"maxScore\", SKIPVAL);\n    query(\"q\", \"{!func}id\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n\n    // fix for a bug where not all fields are returned if using multiple fl parameters, see SOLR-6796\n    query(\"q\",\"*:*\", \"fl\", \"id\", \"fl\",\"dynamic\",\"sort\",\"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575cbc4cfd0766ac94f3329777fc87ad16bace2f","date":1425052207,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentOptimizationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentOptimizationTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    waitForThingsToLevelOut(30);\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"test_sS\", \"21\", \"payload\", ByteBuffer.wrap(new byte[]{0x12, 0x62, 0x15}),                     //  2\n        // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n        \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"test_sS\", \"22\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x16}));                    //  5\n    index(id, \"3\", \"text\", \"a\", \"test_sS\", \"23\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x32, 0x58}));                    //  8\n    index(id, \"4\", \"text\", \"b\", \"test_sS\", \"24\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x15}));                    //  4\n    index(id, \"5\", \"text\", \"a\", \"test_sS\", \"25\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x35, 0x10, 0x00}));              //  9\n    index(id, \"6\", \"text\", \"c\", \"test_sS\", \"26\", \"payload\", ByteBuffer.wrap(new byte[]{0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03}));  //  3\n    index(id, \"7\", \"text\", \"c\", \"test_sS\", \"27\", \"payload\", ByteBuffer.wrap(new byte[]{0x00, 0x3c, 0x73}));                    //  1\n    index(id, \"8\", \"text\", \"c\", \"test_sS\", \"28\", \"payload\", ByteBuffer.wrap(new byte[]{0x59, 0x2d, 0x4d}));                    // 11\n    index(id, \"9\", \"text\", \"a\", \"test_sS\", \"29\", \"payload\", ByteBuffer.wrap(new byte[]{0x39, 0x79, 0x7a}));                    // 10\n    index(id, \"10\", \"text\", \"b\", \"test_sS\", \"30\", \"payload\", ByteBuffer.wrap(new byte[]{0x31, 0x39, 0x7c}));                   //  6\n    index(id, \"11\", \"text\", \"d\", \"test_sS\", \"31\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0xff, (byte) 0xaf, (byte) 0x9c})); // 13\n    index(id, \"12\", \"text\", \"d\", \"test_sS\", \"32\", \"payload\", ByteBuffer.wrap(new byte[]{0x34, (byte) 0xdd, 0x4d}));             //  7\n    index(id, \"13\", \"text\", \"d\", \"test_sS\", \"33\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x33}));             // 12\n    commit();\n\n    QueryResponse rsp;\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    assertFieldValues(rsp.getResults(), \"test_sS\", \"27\", \"21\", \"26\", \"24\", \"22\", \"30\", \"32\", \"23\", \"25\", \"29\", \"28\", \"33\", \"31\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n    // works with just fl=id as well\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    assertFieldValues(rsp.getResults(), \"test_sS\", \"27\", \"21\", \"26\", \"24\", \"22\", \"30\", \"32\", \"23\", \"25\", \"29\", \"28\", \"33\", \"31\");\n\n    QueryResponse nonDistribRsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    compareResponses(rsp, nonDistribRsp); // make sure distrib and distrib.singlePass return the same thing\n\n    nonDistribRsp = query(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n    compareResponses(rsp, nonDistribRsp); // make sure distrib and distrib.singlePass return the same thing\n\n    // verify that the optimization actually works\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\"); // id only is optimized by default\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload desc\", \"rows\", \"20\"); // id,score only is optimized by default\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n\n    // SOLR-6545, wild card field list\n    index(id, \"19\", \"text\", \"d\", \"cat_a_sS\", \"1\", \"dynamic\", \"2\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x34}));\n    commit();\n\n    nonDistribRsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\");\n    rsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n\n    assertFieldValues(nonDistribRsp.getResults(), \"id\", 19);\n    assertFieldValues(rsp.getResults(), \"id\", 19);\n\n    nonDistribRsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\");\n    rsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n    assertFieldValues(nonDistribRsp.getResults(), \"id\", 19);\n    assertFieldValues(rsp.getResults(), \"id\", 19);\n\n    queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n    queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n\n    // see SOLR-6795, distrib.singlePass=true would return score even when not asked for\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"_version_\", SKIPVAL);\n    // we don't to compare maxScore because most distributed requests return it anyway (just because they have score already)\n    handle.put(\"maxScore\", SKIPVAL);\n    // this trips the queryWithAsserts function because it uses a custom parser, so just query directly\n    query(\"q\", \"{!func}id\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n\n    // fix for a bug where not all fields are returned if using multiple fl parameters, see SOLR-6796\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"id\", \"fl\", \"dynamic\", \"sort\", \"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n\n    // missing fl with sort\n    queryWithAsserts(\"q\", \"*:*\", \"sort\", \"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n    queryWithAsserts(\"q\", \"*:*\", \"sort\", \"payload desc\");\n\n    // fl=*\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"*\", \"sort\", \"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"*\", \"sort\", \"payload desc\");\n\n    // fl=*,score\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"*,score\", \"sort\", \"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"*,score\", \"sort\", \"payload desc\");\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    waitForThingsToLevelOut(30);\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"test_sS\", \"21\", \"payload\", ByteBuffer.wrap(new byte[]{0x12, 0x62, 0x15}),                     //  2\n        // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n        \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"test_sS\", \"22\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x16}));                    //  5\n    index(id, \"3\", \"text\", \"a\", \"test_sS\", \"23\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x32, 0x58}));                    //  8\n    index(id, \"4\", \"text\", \"b\", \"test_sS\", \"24\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x15}));                    //  4\n    index(id, \"5\", \"text\", \"a\", \"test_sS\", \"25\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x35, 0x10, 0x00}));              //  9\n    index(id, \"6\", \"text\", \"c\", \"test_sS\", \"26\", \"payload\", ByteBuffer.wrap(new byte[]{0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03}));  //  3\n    index(id, \"7\", \"text\", \"c\", \"test_sS\", \"27\", \"payload\", ByteBuffer.wrap(new byte[]{0x00, 0x3c, 0x73}));                    //  1\n    index(id, \"8\", \"text\", \"c\", \"test_sS\", \"28\", \"payload\", ByteBuffer.wrap(new byte[]{0x59, 0x2d, 0x4d}));                    // 11\n    index(id, \"9\", \"text\", \"a\", \"test_sS\", \"29\", \"payload\", ByteBuffer.wrap(new byte[]{0x39, 0x79, 0x7a}));                    // 10\n    index(id, \"10\", \"text\", \"b\", \"test_sS\", \"30\", \"payload\", ByteBuffer.wrap(new byte[]{0x31, 0x39, 0x7c}));                   //  6\n    index(id, \"11\", \"text\", \"d\", \"test_sS\", \"31\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0xff, (byte) 0xaf, (byte) 0x9c})); // 13\n    index(id, \"12\", \"text\", \"d\", \"test_sS\", \"32\", \"payload\", ByteBuffer.wrap(new byte[]{0x34, (byte) 0xdd, 0x4d}));             //  7\n    index(id, \"13\", \"text\", \"d\", \"test_sS\", \"33\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x33}));             // 12\n    commit();\n\n    QueryResponse rsp;\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    assertFieldValues(rsp.getResults(), \"test_sS\", \"27\", \"21\", \"26\", \"24\", \"22\", \"30\", \"32\", \"23\", \"25\", \"29\", \"28\", \"33\", \"31\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n    // works with just fl=id as well\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    assertFieldValues(rsp.getResults(), \"test_sS\", \"27\", \"21\", \"26\", \"24\", \"22\", \"30\", \"32\", \"23\", \"25\", \"29\", \"28\", \"33\", \"31\");\n\n    QueryResponse nonDistribRsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    compareResponses(rsp, nonDistribRsp); // make sure distrib and distrib.singlePass return the same thing\n\n    nonDistribRsp = query(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n    compareResponses(rsp, nonDistribRsp); // make sure distrib and distrib.singlePass return the same thing\n\n    // verify that the optimization actually works\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\"); // id only is optimized by default\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload desc\", \"rows\", \"20\"); // id,score only is optimized by default\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n\n    // SOLR-6545, wild card field list\n    index(id, \"19\", \"text\", \"d\", \"cat_a_sS\", \"1\", \"dynamic\", \"2\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x34}));\n    commit();\n\n    nonDistribRsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\");\n    rsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n\n    assertFieldValues(nonDistribRsp.getResults(), \"id\", 19);\n    assertFieldValues(rsp.getResults(), \"id\", 19);\n\n    nonDistribRsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\");\n    rsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n    assertFieldValues(nonDistribRsp.getResults(), \"id\", 19);\n    assertFieldValues(rsp.getResults(), \"id\", 19);\n\n    queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n    queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n\n    // see SOLR-6795, distrib.singlePass=true would return score even when not asked for\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"_version_\", SKIPVAL);\n    // we don't to compare maxScore because most distributed requests return it anyway (just because they have score already)\n    handle.put(\"maxScore\", SKIPVAL);\n    // this trips the queryWithAsserts function because it uses a custom parser, so just query directly\n    query(\"q\", \"{!func}id\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n\n    // fix for a bug where not all fields are returned if using multiple fl parameters, see SOLR-6796\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"id\", \"fl\", \"dynamic\", \"sort\", \"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentOptimizationTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentOptimizationTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    waitForThingsToLevelOut(30);\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"test_sS\", \"21\", \"payload\", ByteBuffer.wrap(new byte[]{0x12, 0x62, 0x15}),                     //  2\n        // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n        \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"test_sS\", \"22\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x16}));                    //  5\n    index(id, \"3\", \"text\", \"a\", \"test_sS\", \"23\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x32, 0x58}));                    //  8\n    index(id, \"4\", \"text\", \"b\", \"test_sS\", \"24\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x15}));                    //  4\n    index(id, \"5\", \"text\", \"a\", \"test_sS\", \"25\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x35, 0x10, 0x00}));              //  9\n    index(id, \"6\", \"text\", \"c\", \"test_sS\", \"26\", \"payload\", ByteBuffer.wrap(new byte[]{0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03}));  //  3\n    index(id, \"7\", \"text\", \"c\", \"test_sS\", \"27\", \"payload\", ByteBuffer.wrap(new byte[]{0x00, 0x3c, 0x73}));                    //  1\n    index(id, \"8\", \"text\", \"c\", \"test_sS\", \"28\", \"payload\", ByteBuffer.wrap(new byte[]{0x59, 0x2d, 0x4d}));                    // 11\n    index(id, \"9\", \"text\", \"a\", \"test_sS\", \"29\", \"payload\", ByteBuffer.wrap(new byte[]{0x39, 0x79, 0x7a}));                    // 10\n    index(id, \"10\", \"text\", \"b\", \"test_sS\", \"30\", \"payload\", ByteBuffer.wrap(new byte[]{0x31, 0x39, 0x7c}));                   //  6\n    index(id, \"11\", \"text\", \"d\", \"test_sS\", \"31\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0xff, (byte) 0xaf, (byte) 0x9c})); // 13\n    index(id, \"12\", \"text\", \"d\", \"test_sS\", \"32\", \"payload\", ByteBuffer.wrap(new byte[]{0x34, (byte) 0xdd, 0x4d}));             //  7\n    index(id, \"13\", \"text\", \"d\", \"test_sS\", \"33\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x33}));             // 12\n    commit();\n\n    QueryResponse rsp;\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    assertFieldValues(rsp.getResults(), \"test_sS\", \"27\", \"21\", \"26\", \"24\", \"22\", \"30\", \"32\", \"23\", \"25\", \"29\", \"28\", \"33\", \"31\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n    // works with just fl=id as well\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    assertFieldValues(rsp.getResults(), \"test_sS\", \"27\", \"21\", \"26\", \"24\", \"22\", \"30\", \"32\", \"23\", \"25\", \"29\", \"28\", \"33\", \"31\");\n\n    QueryResponse nonDistribRsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    compareResponses(rsp, nonDistribRsp); // make sure distrib and distrib.singlePass return the same thing\n\n    nonDistribRsp = query(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n    compareResponses(rsp, nonDistribRsp); // make sure distrib and distrib.singlePass return the same thing\n\n    // verify that the optimization actually works\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\"); // id only is optimized by default\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload desc\", \"rows\", \"20\"); // id,score only is optimized by default\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n\n    // SOLR-6545, wild card field list\n    index(id, \"19\", \"text\", \"d\", \"cat_a_sS\", \"1\", \"dynamic\", \"2\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x34}));\n    commit();\n\n    nonDistribRsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\");\n    rsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n\n    assertFieldValues(nonDistribRsp.getResults(), \"id\", 19);\n    assertFieldValues(rsp.getResults(), \"id\", 19);\n\n    nonDistribRsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\");\n    rsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n    assertFieldValues(nonDistribRsp.getResults(), \"id\", 19);\n    assertFieldValues(rsp.getResults(), \"id\", 19);\n\n    queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n    queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n\n    // see SOLR-6795, distrib.singlePass=true would return score even when not asked for\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"_version_\", SKIPVAL);\n    // we don't to compare maxScore because most distributed requests return it anyway (just because they have score already)\n    handle.put(\"maxScore\", SKIPVAL);\n    // this trips the queryWithAsserts function because it uses a custom parser, so just query directly\n    query(\"q\", \"{!func}id\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n\n    // fix for a bug where not all fields are returned if using multiple fl parameters, see SOLR-6796\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"id\", \"fl\", \"dynamic\", \"sort\", \"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n\n    // missing fl with sort\n    queryWithAsserts(\"q\", \"*:*\", \"sort\", \"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n    queryWithAsserts(\"q\", \"*:*\", \"sort\", \"payload desc\");\n\n    // fl=*\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"*\", \"sort\", \"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"*\", \"sort\", \"payload desc\");\n\n    // fl=*,score\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"*,score\", \"sort\", \"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"*,score\", \"sort\", \"payload desc\");\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"test_sS\", \"21\", \"payload\", ByteBuffer.wrap(new byte[] { 0x12, 0x62, 0x15 }),                     //  2\n          // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n          \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"test_sS\", \"22\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x16 }));                    //  5\n    index(id, \"3\", \"text\", \"a\", \"test_sS\", \"23\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x32, 0x58 }));                    //  8\n    index(id, \"4\", \"text\", \"b\", \"test_sS\", \"24\", \"payload\", ByteBuffer.wrap(new byte[] { 0x25, 0x21, 0x15 }));                    //  4\n    index(id, \"5\", \"text\", \"a\", \"test_sS\", \"25\", \"payload\", ByteBuffer.wrap(new byte[] { 0x35, 0x35, 0x10, 0x00 }));              //  9\n    index(id, \"6\", \"text\", \"c\", \"test_sS\", \"26\", \"payload\", ByteBuffer.wrap(new byte[] { 0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03 }));  //  3\n    index(id, \"7\", \"text\", \"c\", \"test_sS\", \"27\", \"payload\", ByteBuffer.wrap(new byte[] { 0x00, 0x3c, 0x73 }));                    //  1\n    index(id, \"8\", \"text\", \"c\", \"test_sS\", \"28\", \"payload\", ByteBuffer.wrap(new byte[] { 0x59, 0x2d, 0x4d }));                    // 11\n    index(id, \"9\", \"text\", \"a\", \"test_sS\", \"29\", \"payload\", ByteBuffer.wrap(new byte[] { 0x39, 0x79, 0x7a }));                    // 10\n    index(id, \"10\", \"text\", \"b\", \"test_sS\", \"30\", \"payload\", ByteBuffer.wrap(new byte[] { 0x31, 0x39, 0x7c }));                   //  6\n    index(id, \"11\", \"text\", \"d\", \"test_sS\", \"31\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0xff, (byte)0xaf, (byte)0x9c })); // 13\n    index(id, \"12\", \"text\", \"d\", \"test_sS\", \"32\", \"payload\", ByteBuffer.wrap(new byte[] { 0x34, (byte)0xdd, 0x4d }));             //  7\n    index(id, \"13\", \"text\", \"d\", \"test_sS\", \"33\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));             // 12\n    commit();\n\n    QueryResponse rsp;\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    assertFieldValues(rsp.getResults(), \"test_sS\", \"27\", \"21\", \"26\", \"24\", \"22\", \"30\", \"32\", \"23\", \"25\", \"29\", \"28\", \"33\", \"31\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n    // works with just fl=id as well\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    assertFieldValues(rsp.getResults(), \"test_sS\", \"27\", \"21\", \"26\", \"24\", \"22\", \"30\", \"32\", \"23\", \"25\", \"29\", \"28\", \"33\", \"31\");\n\n    QueryResponse nonDistribRsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    compareResponses(rsp, nonDistribRsp); // make sure distrib and distrib.singlePass return the same thing\n\n    nonDistribRsp = query(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n    compareResponses(rsp, nonDistribRsp); // make sure distrib and distrib.singlePass return the same thing\n\n    // verify that the optimization actually works\n    verifySinglePass(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\"); // id only is optimized by default\n    verifySinglePass(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload desc\", \"rows\", \"20\"); // id,score only is optimized by default\n    verifySinglePass(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n\n    // SOLR-6545, wild card field list\n    index(id, \"19\", \"text\", \"d\", \"cat_a_sS\", \"1\" ,\"dynamic\", \"2\", \"payload\", ByteBuffer.wrap(new byte[] { (byte)0x80, 0x11, 0x33 }));\n    commit();\n\n    nonDistribRsp = query(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\");\n    rsp = query(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n\n    assertFieldValues(nonDistribRsp.getResults(), \"id\", 19);\n    assertFieldValues(rsp.getResults(), \"id\", 19);\n\n    nonDistribRsp = query(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\");\n    rsp = query(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n    assertFieldValues(nonDistribRsp.getResults(), \"id\", 19);\n    assertFieldValues(rsp.getResults(), \"id\", 19);\n\n    verifySinglePass(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n    verifySinglePass(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n\n    // see SOLR-6795, distrib.singlePass=true would return score even when not asked for\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"_version_\", SKIPVAL);\n    // we don't to compare maxScore because most distributed requests return it anyway (just because they have score already)\n    handle.put(\"maxScore\", SKIPVAL);\n    query(\"q\", \"{!func}id\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n\n    // fix for a bug where not all fields are returned if using multiple fl parameters, see SOLR-6796\n    query(\"q\",\"*:*\", \"fl\", \"id\", \"fl\",\"dynamic\",\"sort\",\"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ebf70dabe6279454c5ff460bdea3f0dc2814a86","date":1463672611,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentOptimizationTest#test().mjava","sourceNew":null,"sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    waitForThingsToLevelOut(30);\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"test_sS\", \"21\", \"payload\", ByteBuffer.wrap(new byte[]{0x12, 0x62, 0x15}),                     //  2\n        // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n        \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"test_sS\", \"22\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x16}));                    //  5\n    index(id, \"3\", \"text\", \"a\", \"test_sS\", \"23\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x32, 0x58}));                    //  8\n    index(id, \"4\", \"text\", \"b\", \"test_sS\", \"24\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x15}));                    //  4\n    index(id, \"5\", \"text\", \"a\", \"test_sS\", \"25\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x35, 0x10, 0x00}));              //  9\n    index(id, \"6\", \"text\", \"c\", \"test_sS\", \"26\", \"payload\", ByteBuffer.wrap(new byte[]{0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03}));  //  3\n    index(id, \"7\", \"text\", \"c\", \"test_sS\", \"27\", \"payload\", ByteBuffer.wrap(new byte[]{0x00, 0x3c, 0x73}));                    //  1\n    index(id, \"8\", \"text\", \"c\", \"test_sS\", \"28\", \"payload\", ByteBuffer.wrap(new byte[]{0x59, 0x2d, 0x4d}));                    // 11\n    index(id, \"9\", \"text\", \"a\", \"test_sS\", \"29\", \"payload\", ByteBuffer.wrap(new byte[]{0x39, 0x79, 0x7a}));                    // 10\n    index(id, \"10\", \"text\", \"b\", \"test_sS\", \"30\", \"payload\", ByteBuffer.wrap(new byte[]{0x31, 0x39, 0x7c}));                   //  6\n    index(id, \"11\", \"text\", \"d\", \"test_sS\", \"31\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0xff, (byte) 0xaf, (byte) 0x9c})); // 13\n    index(id, \"12\", \"text\", \"d\", \"test_sS\", \"32\", \"payload\", ByteBuffer.wrap(new byte[]{0x34, (byte) 0xdd, 0x4d}));             //  7\n    index(id, \"13\", \"text\", \"d\", \"test_sS\", \"33\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x33}));             // 12\n    commit();\n\n    QueryResponse rsp;\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    assertFieldValues(rsp.getResults(), \"test_sS\", \"27\", \"21\", \"26\", \"24\", \"22\", \"30\", \"32\", \"23\", \"25\", \"29\", \"28\", \"33\", \"31\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n    // works with just fl=id as well\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    assertFieldValues(rsp.getResults(), \"test_sS\", \"27\", \"21\", \"26\", \"24\", \"22\", \"30\", \"32\", \"23\", \"25\", \"29\", \"28\", \"33\", \"31\");\n\n    QueryResponse nonDistribRsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    compareResponses(rsp, nonDistribRsp); // make sure distrib and distrib.singlePass return the same thing\n\n    nonDistribRsp = query(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n    compareResponses(rsp, nonDistribRsp); // make sure distrib and distrib.singlePass return the same thing\n\n    // verify that the optimization actually works\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\"); // id only is optimized by default\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload desc\", \"rows\", \"20\"); // id,score only is optimized by default\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n\n    // SOLR-6545, wild card field list\n    index(id, \"19\", \"text\", \"d\", \"cat_a_sS\", \"1\", \"dynamic\", \"2\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x34}));\n    commit();\n\n    nonDistribRsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\");\n    rsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n\n    assertFieldValues(nonDistribRsp.getResults(), \"id\", 19);\n    assertFieldValues(rsp.getResults(), \"id\", 19);\n\n    nonDistribRsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\");\n    rsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n    assertFieldValues(nonDistribRsp.getResults(), \"id\", 19);\n    assertFieldValues(rsp.getResults(), \"id\", 19);\n\n    queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n    queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n\n    // see SOLR-6795, distrib.singlePass=true would return score even when not asked for\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"_version_\", SKIPVAL);\n    // we don't to compare maxScore because most distributed requests return it anyway (just because they have score already)\n    handle.put(\"maxScore\", SKIPVAL);\n    // this trips the queryWithAsserts function because it uses a custom parser, so just query directly\n    query(\"q\", \"{!func}id\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n\n    // fix for a bug where not all fields are returned if using multiple fl parameters, see SOLR-6796\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"id\", \"fl\", \"dynamic\", \"sort\", \"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n\n    // missing fl with sort\n    queryWithAsserts(\"q\", \"*:*\", \"sort\", \"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n    queryWithAsserts(\"q\", \"*:*\", \"sort\", \"payload desc\");\n\n    // fl=*\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"*\", \"sort\", \"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"*\", \"sort\", \"payload desc\");\n\n    // fl=*,score\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"*,score\", \"sort\", \"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"*,score\", \"sort\", \"payload desc\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentOptimizationTest#test().mjava","sourceNew":null,"sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    waitForThingsToLevelOut(30);\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"test_sS\", \"21\", \"payload\", ByteBuffer.wrap(new byte[]{0x12, 0x62, 0x15}),                     //  2\n        // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n        \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"test_sS\", \"22\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x16}));                    //  5\n    index(id, \"3\", \"text\", \"a\", \"test_sS\", \"23\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x32, 0x58}));                    //  8\n    index(id, \"4\", \"text\", \"b\", \"test_sS\", \"24\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x15}));                    //  4\n    index(id, \"5\", \"text\", \"a\", \"test_sS\", \"25\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x35, 0x10, 0x00}));              //  9\n    index(id, \"6\", \"text\", \"c\", \"test_sS\", \"26\", \"payload\", ByteBuffer.wrap(new byte[]{0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03}));  //  3\n    index(id, \"7\", \"text\", \"c\", \"test_sS\", \"27\", \"payload\", ByteBuffer.wrap(new byte[]{0x00, 0x3c, 0x73}));                    //  1\n    index(id, \"8\", \"text\", \"c\", \"test_sS\", \"28\", \"payload\", ByteBuffer.wrap(new byte[]{0x59, 0x2d, 0x4d}));                    // 11\n    index(id, \"9\", \"text\", \"a\", \"test_sS\", \"29\", \"payload\", ByteBuffer.wrap(new byte[]{0x39, 0x79, 0x7a}));                    // 10\n    index(id, \"10\", \"text\", \"b\", \"test_sS\", \"30\", \"payload\", ByteBuffer.wrap(new byte[]{0x31, 0x39, 0x7c}));                   //  6\n    index(id, \"11\", \"text\", \"d\", \"test_sS\", \"31\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0xff, (byte) 0xaf, (byte) 0x9c})); // 13\n    index(id, \"12\", \"text\", \"d\", \"test_sS\", \"32\", \"payload\", ByteBuffer.wrap(new byte[]{0x34, (byte) 0xdd, 0x4d}));             //  7\n    index(id, \"13\", \"text\", \"d\", \"test_sS\", \"33\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x33}));             // 12\n    commit();\n\n    QueryResponse rsp;\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    assertFieldValues(rsp.getResults(), \"test_sS\", \"27\", \"21\", \"26\", \"24\", \"22\", \"30\", \"32\", \"23\", \"25\", \"29\", \"28\", \"33\", \"31\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n    // works with just fl=id as well\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    assertFieldValues(rsp.getResults(), \"test_sS\", \"27\", \"21\", \"26\", \"24\", \"22\", \"30\", \"32\", \"23\", \"25\", \"29\", \"28\", \"33\", \"31\");\n\n    QueryResponse nonDistribRsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    compareResponses(rsp, nonDistribRsp); // make sure distrib and distrib.singlePass return the same thing\n\n    nonDistribRsp = query(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n    compareResponses(rsp, nonDistribRsp); // make sure distrib and distrib.singlePass return the same thing\n\n    // verify that the optimization actually works\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\"); // id only is optimized by default\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload desc\", \"rows\", \"20\"); // id,score only is optimized by default\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n\n    // SOLR-6545, wild card field list\n    index(id, \"19\", \"text\", \"d\", \"cat_a_sS\", \"1\", \"dynamic\", \"2\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x34}));\n    commit();\n\n    nonDistribRsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\");\n    rsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n\n    assertFieldValues(nonDistribRsp.getResults(), \"id\", 19);\n    assertFieldValues(rsp.getResults(), \"id\", 19);\n\n    nonDistribRsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\");\n    rsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n    assertFieldValues(nonDistribRsp.getResults(), \"id\", 19);\n    assertFieldValues(rsp.getResults(), \"id\", 19);\n\n    queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n    queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n\n    // see SOLR-6795, distrib.singlePass=true would return score even when not asked for\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"_version_\", SKIPVAL);\n    // we don't to compare maxScore because most distributed requests return it anyway (just because they have score already)\n    handle.put(\"maxScore\", SKIPVAL);\n    // this trips the queryWithAsserts function because it uses a custom parser, so just query directly\n    query(\"q\", \"{!func}id\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n\n    // fix for a bug where not all fields are returned if using multiple fl parameters, see SOLR-6796\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"id\", \"fl\", \"dynamic\", \"sort\", \"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n\n    // missing fl with sort\n    queryWithAsserts(\"q\", \"*:*\", \"sort\", \"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n    queryWithAsserts(\"q\", \"*:*\", \"sort\", \"payload desc\");\n\n    // fl=*\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"*\", \"sort\", \"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"*\", \"sort\", \"payload desc\");\n\n    // fl=*,score\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"*,score\", \"sort\", \"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"*,score\", \"sort\", \"payload desc\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedQueryComponentOptimizationTest#test().mjava","sourceNew":null,"sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    waitForThingsToLevelOut(30);\n    del(\"*:*\");\n\n    index(id, \"1\", \"text\", \"a\", \"test_sS\", \"21\", \"payload\", ByteBuffer.wrap(new byte[]{0x12, 0x62, 0x15}),                     //  2\n        // quick check to prove \"*\" dynamicField hasn't been broken by somebody mucking with schema\n        \"asdfasdf_field_should_match_catchall_dynamic_field_adsfasdf\", \"value\");\n    index(id, \"2\", \"text\", \"b\", \"test_sS\", \"22\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x16}));                    //  5\n    index(id, \"3\", \"text\", \"a\", \"test_sS\", \"23\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x32, 0x58}));                    //  8\n    index(id, \"4\", \"text\", \"b\", \"test_sS\", \"24\", \"payload\", ByteBuffer.wrap(new byte[]{0x25, 0x21, 0x15}));                    //  4\n    index(id, \"5\", \"text\", \"a\", \"test_sS\", \"25\", \"payload\", ByteBuffer.wrap(new byte[]{0x35, 0x35, 0x10, 0x00}));              //  9\n    index(id, \"6\", \"text\", \"c\", \"test_sS\", \"26\", \"payload\", ByteBuffer.wrap(new byte[]{0x1a, 0x2b, 0x3c, 0x00, 0x00, 0x03}));  //  3\n    index(id, \"7\", \"text\", \"c\", \"test_sS\", \"27\", \"payload\", ByteBuffer.wrap(new byte[]{0x00, 0x3c, 0x73}));                    //  1\n    index(id, \"8\", \"text\", \"c\", \"test_sS\", \"28\", \"payload\", ByteBuffer.wrap(new byte[]{0x59, 0x2d, 0x4d}));                    // 11\n    index(id, \"9\", \"text\", \"a\", \"test_sS\", \"29\", \"payload\", ByteBuffer.wrap(new byte[]{0x39, 0x79, 0x7a}));                    // 10\n    index(id, \"10\", \"text\", \"b\", \"test_sS\", \"30\", \"payload\", ByteBuffer.wrap(new byte[]{0x31, 0x39, 0x7c}));                   //  6\n    index(id, \"11\", \"text\", \"d\", \"test_sS\", \"31\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0xff, (byte) 0xaf, (byte) 0x9c})); // 13\n    index(id, \"12\", \"text\", \"d\", \"test_sS\", \"32\", \"payload\", ByteBuffer.wrap(new byte[]{0x34, (byte) 0xdd, 0x4d}));             //  7\n    index(id, \"13\", \"text\", \"d\", \"test_sS\", \"33\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x33}));             // 12\n    commit();\n\n    QueryResponse rsp;\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    assertFieldValues(rsp.getResults(), \"test_sS\", \"27\", \"21\", \"26\", \"24\", \"22\", \"30\", \"32\", \"23\", \"25\", \"29\", \"28\", \"33\", \"31\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n    // works with just fl=id as well\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 11, 13, 8, 9, 5, 3, 12, 10, 2, 4, 6, 1, 7);\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n\n    rsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n    assertFieldValues(rsp.getResults(), id, 7, 1, 6, 4, 2, 10, 12, 3, 5, 9, 8, 13, 11);\n    assertFieldValues(rsp.getResults(), \"test_sS\", \"27\", \"21\", \"26\", \"24\", \"22\", \"30\", \"32\", \"23\", \"25\", \"29\", \"28\", \"33\", \"31\");\n\n    QueryResponse nonDistribRsp = query(\"q\", \"*:*\", \"fl\", \"id,test_sS,score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    compareResponses(rsp, nonDistribRsp); // make sure distrib and distrib.singlePass return the same thing\n\n    nonDistribRsp = query(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\");\n    rsp = query(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n    compareResponses(rsp, nonDistribRsp); // make sure distrib and distrib.singlePass return the same thing\n\n    // verify that the optimization actually works\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"id\", \"sort\", \"payload desc\", \"rows\", \"20\"); // id only is optimized by default\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"id,score\", \"sort\", \"payload desc\", \"rows\", \"20\"); // id,score only is optimized by default\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"score\", \"sort\", \"payload asc\", \"rows\", \"20\", \"distrib.singlePass\", \"true\");\n\n    // SOLR-6545, wild card field list\n    index(id, \"19\", \"text\", \"d\", \"cat_a_sS\", \"1\", \"dynamic\", \"2\", \"payload\", ByteBuffer.wrap(new byte[]{(byte) 0x80, 0x11, 0x34}));\n    commit();\n\n    nonDistribRsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\");\n    rsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n\n    assertFieldValues(nonDistribRsp.getResults(), \"id\", 19);\n    assertFieldValues(rsp.getResults(), \"id\", 19);\n\n    nonDistribRsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\");\n    rsp = queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n    assertFieldValues(nonDistribRsp.getResults(), \"id\", 19);\n    assertFieldValues(rsp.getResults(), \"id\", 19);\n\n    queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,*a_sS\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n    queryWithAsserts(\"q\", \"id:19\", \"fl\", \"id,dynamic,cat*\", \"sort\", \"payload asc\", \"distrib.singlePass\", \"true\");\n\n    // see SOLR-6795, distrib.singlePass=true would return score even when not asked for\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"_version_\", SKIPVAL);\n    // we don't to compare maxScore because most distributed requests return it anyway (just because they have score already)\n    handle.put(\"maxScore\", SKIPVAL);\n    // this trips the queryWithAsserts function because it uses a custom parser, so just query directly\n    query(\"q\", \"{!func}id\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n\n    // fix for a bug where not all fields are returned if using multiple fl parameters, see SOLR-6796\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"id\", \"fl\", \"dynamic\", \"sort\", \"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n\n    // missing fl with sort\n    queryWithAsserts(\"q\", \"*:*\", \"sort\", \"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n    queryWithAsserts(\"q\", \"*:*\", \"sort\", \"payload desc\");\n\n    // fl=*\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"*\", \"sort\", \"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"*\", \"sort\", \"payload desc\");\n\n    // fl=*,score\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"*,score\", \"sort\", \"payload desc\", ShardParams.DISTRIB_SINGLE_PASS, \"true\");\n    queryWithAsserts(\"q\", \"*:*\", \"fl\", \"*,score\", \"sort\", \"payload desc\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a05704e317032f0bcc6bc978b6c6c5af1cba5cd9":["abb23fcc2461782ab204e61213240feb77d355aa"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["abb23fcc2461782ab204e61213240feb77d355aa","575cbc4cfd0766ac94f3329777fc87ad16bace2f"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"575cbc4cfd0766ac94f3329777fc87ad16bace2f":["a05704e317032f0bcc6bc978b6c6c5af1cba5cd9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["575cbc4cfd0766ac94f3329777fc87ad16bace2f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["575cbc4cfd0766ac94f3329777fc87ad16bace2f","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["575cbc4cfd0766ac94f3329777fc87ad16bace2f","5ebf70dabe6279454c5ff460bdea3f0dc2814a86"]},"commit2Childs":{"a05704e317032f0bcc6bc978b6c6c5af1cba5cd9":["575cbc4cfd0766ac94f3329777fc87ad16bace2f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"abb23fcc2461782ab204e61213240feb77d355aa":["a05704e317032f0bcc6bc978b6c6c5af1cba5cd9","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"575cbc4cfd0766ac94f3329777fc87ad16bace2f":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5ebf70dabe6279454c5ff460bdea3f0dc2814a86","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}