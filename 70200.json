{"path":"solr/core/src/test/org/apache/solr/search/TestCaffeineCache#testTimeDecay().mjava","commits":[{"id":"87f0484c38f986062889ed50f3bf3bd462848c26","date":1570108628,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCaffeineCache#testTimeDecay().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTimeDecay() {\n    Cache<Integer, String> cacheDecay = Caffeine.newBuilder()\n        .executor(Runnable::run)\n        .maximumSize(20)\n        .build();\n    for (int i = 1; i < 21; i++) {\n      cacheDecay.put(i, Integer.toString(i));\n    }\n    Map<Integer, String> itemsDecay;\n\n    // Now increase the freq count for 5 items\n    for (int i = 0; i < 5; ++i) {\n      for (int j = 0; j < 10; ++j) {\n        cacheDecay.getIfPresent(i + 13);\n      }\n    }\n    // OK, 13 - 17 should have larger counts and should stick past next few collections\n    cacheDecay.put(22, \"22\");\n    cacheDecay.put(23, \"23\");\n    cacheDecay.put(24, \"24\");\n    cacheDecay.put(25, \"25\");\n    itemsDecay = cacheDecay.policy().eviction().get().hottest(10);\n    // 13 - 17 should be in cache, but 11 and 18 (among others) should not. Testing that elements before and\n    // after the ones with increased counts are removed, and all the increased count ones are still in the cache\n    assertNull(itemsDecay.get(11));\n    assertNull(itemsDecay.get(18));\n    assertNotNull(itemsDecay.get(13));\n    assertNotNull(itemsDecay.get(14));\n    assertNotNull(itemsDecay.get(15));\n    assertNotNull(itemsDecay.get(16));\n    assertNotNull(itemsDecay.get(17));\n\n\n    // Testing that all the elements in front of the ones with increased counts are gone\n    for (int idx = 26; idx < 32; ++idx) {\n      cacheDecay.put(idx, Integer.toString(idx));\n    }\n    //Surplus count should be at 0\n    itemsDecay = cacheDecay.policy().eviction().get().hottest(10);\n    assertNull(itemsDecay.get(20));\n    assertNull(itemsDecay.get(24));\n    assertNotNull(itemsDecay.get(13));\n    assertNotNull(itemsDecay.get(14));\n    assertNotNull(itemsDecay.get(15));\n    assertNotNull(itemsDecay.get(16));\n    assertNotNull(itemsDecay.get(17));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCaffeineCache#testTimeDecay().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTimeDecay() {\n    Cache<Integer, String> cacheDecay = Caffeine.newBuilder()\n        .executor(Runnable::run)\n        .maximumSize(20)\n        .build();\n    for (int i = 1; i < 21; i++) {\n      cacheDecay.put(i, Integer.toString(i));\n    }\n    Map<Integer, String> itemsDecay;\n\n    // Now increase the freq count for 5 items\n    for (int i = 0; i < 5; ++i) {\n      for (int j = 0; j < 10; ++j) {\n        cacheDecay.getIfPresent(i + 13);\n      }\n    }\n    // OK, 13 - 17 should have larger counts and should stick past next few collections\n    cacheDecay.put(22, \"22\");\n    cacheDecay.put(23, \"23\");\n    cacheDecay.put(24, \"24\");\n    cacheDecay.put(25, \"25\");\n    itemsDecay = cacheDecay.policy().eviction().get().hottest(10);\n    // 13 - 17 should be in cache, but 11 and 18 (among others) should not. Testing that elements before and\n    // after the ones with increased counts are removed, and all the increased count ones are still in the cache\n    assertNull(itemsDecay.get(11));\n    assertNull(itemsDecay.get(18));\n    assertNotNull(itemsDecay.get(13));\n    assertNotNull(itemsDecay.get(14));\n    assertNotNull(itemsDecay.get(15));\n    assertNotNull(itemsDecay.get(16));\n    assertNotNull(itemsDecay.get(17));\n\n\n    // Testing that all the elements in front of the ones with increased counts are gone\n    for (int idx = 26; idx < 32; ++idx) {\n      cacheDecay.put(idx, Integer.toString(idx));\n    }\n    //Surplus count should be at 0\n    itemsDecay = cacheDecay.policy().eviction().get().hottest(10);\n    assertNull(itemsDecay.get(20));\n    assertNull(itemsDecay.get(24));\n    assertNotNull(itemsDecay.get(13));\n    assertNotNull(itemsDecay.get(14));\n    assertNotNull(itemsDecay.get(15));\n    assertNotNull(itemsDecay.get(16));\n    assertNotNull(itemsDecay.get(17));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87f0484c38f986062889ed50f3bf3bd462848c26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87f0484c38f986062889ed50f3bf3bd462848c26"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","87f0484c38f986062889ed50f3bf3bd462848c26"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87f0484c38f986062889ed50f3bf3bd462848c26","b0b597c65628ca9e73913a07e81691f8229bae35"],"87f0484c38f986062889ed50f3bf3bd462848c26":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}