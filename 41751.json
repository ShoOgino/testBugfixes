{"path":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG.TermFacet#buildRandomFacets(AtomicInteger,int).mjava","commits":[{"id":"92910727264a23a47b7a6c94b0f75d655537b9ea","date":1540414655,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG.TermFacet#buildRandomFacets(AtomicInteger,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG.TermFacet#buildRandomFacets(AtomicInteger,int).mjava","sourceNew":"    /** \n     * recursive helper method for building random facets\n     *\n     * @param keyCounter used to ensure every generated facet has a unique key name\n     * @param maxDepth max possible depth allowed for the recusion, a lower value may be used depending on how many facets are returned at the current level. \n     */\n    private static Map<String,TermFacet> buildRandomFacets(AtomicInteger keyCounter, int maxDepth) {\n      final int numFacets = Math.max(1, TestUtil.nextInt(random(), -1, 3)); // 3/5th chance of being '1'\n      Map<String,TermFacet> results = new LinkedHashMap<>();\n      for (int i = 0; i < numFacets; i++) {\n        if (keyCounter.get() < 3) { // a hard limit on the total number of facets (regardless of depth) to reduce OOM risk\n          \n          final String sort = randomSortParam(random());\n          final Integer limit = randomLimitParam(random(), sort);\n          final Integer overrequest = randomOverrequestParam(random());\n          final TermFacet facet =  new TermFacet(field((random().nextBoolean()\n                                                        ? STR_FIELD_SUFFIXES : INT_FIELD_SUFFIXES),\n                                                       random().nextInt(MAX_FIELD_NUM)),\n                                                 limit, overrequest, sort);\n          results.put(\"facet_\" + keyCounter.incrementAndGet(), facet);\n          if (0 < maxDepth) {\n            // if we're going wide, don't go deep\n            final int nextMaxDepth = Math.max(0, maxDepth - numFacets);\n            facet.subFacets.putAll(buildRandomFacets(keyCounter, TestUtil.nextInt(random(), 0, nextMaxDepth)));\n          }\n        }\n      }\n      return results;\n    }\n\n","sourceOld":"    /** \n     * recursive helper method for building random facets\n     *\n     * @param keyCounter used to ensure every generated facet has a unique key name\n     * @param maxDepth max possible depth allowed for the recusion, a lower value may be used depending on how many facets are returned at the current level. \n     */\n    private static Map<String,TermFacet> buildRandomFacets(AtomicInteger keyCounter, int maxDepth) {\n      final int numFacets = Math.max(1, TestUtil.nextInt(random(), -1, 3)); // 3/5th chance of being '1'\n      Map<String,TermFacet> results = new LinkedHashMap<>();\n      for (int i = 0; i < numFacets; i++) {\n        if (keyCounter.get() < 3) { // a hard limit on the total number of facets (regardless of depth) to reduce OOM risk\n          \n          final String sort = randomSortParam(random());\n          final Integer limit = randomLimitParam(random(), sort);\n          final Integer overrequest = randomOverrequestParam(random());\n          final TermFacet facet =  new TermFacet(field((random().nextBoolean()\n                                                        ? STR_FIELD_SUFFIXES : INT_FIELD_SUFFIXES),\n                                                       random().nextInt(MAX_FIELD_NUM)),\n                                                 limit, overrequest, sort);\n          results.put(\"facet_\" + keyCounter.incrementAndGet(), facet);\n          if (0 < maxDepth) {\n            // if we're going wide, don't go deep\n            final int nextMaxDepth = Math.max(0, maxDepth - numFacets);\n            facet.subFacets.putAll(buildRandomFacets(keyCounter, TestUtil.nextInt(random(), 0, nextMaxDepth)));\n          }\n        }\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5ec3c464e62e57df598ba20e010313bf6d5d7b4","date":1589998565,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG.TermFacet#buildRandomFacets(AtomicInteger,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG.TermFacet#buildRandomFacets(AtomicInteger,int).mjava","sourceNew":"    /** \n     * recursive helper method for building random facets\n     *\n     * @param keyCounter used to ensure every generated facet has a unique key name\n     * @param maxDepth max possible depth allowed for the recusion, a lower value may be used depending on how many facets are returned at the current level. \n     */\n    private static Map<String,TermFacet> buildRandomFacets(AtomicInteger keyCounter, int maxDepth) {\n      final int numFacets = Math.max(1, TestUtil.nextInt(random(), -1, 3)); // 3/5th chance of being '1'\n      Map<String,TermFacet> results = new LinkedHashMap<>();\n      for (int i = 0; i < numFacets; i++) {\n        if (keyCounter.get() < 3) { // a hard limit on the total number of facets (regardless of depth) to reduce OOM risk\n          \n          final String sort = randomSortParam(random());\n          final String facetField = randomFacetField(random());\n          final TermFacet facet =  new TermFacet(facetField,\n                                                 map(\"sort\", sort,\n                                                     \"prelim_sort\", randomPrelimSortParam(random(), sort),\n                                                     \"limit\", randomLimitParam(random(), sort),\n                                                     \"overrequest\", randomOverrequestParam(random()),\n                                                     \"prefix\", randomPrefixParam(random(), facetField),\n                                                     \"perSeg\", randomPerSegParam(random())));\n                                                     \n\n                                                 \n          results.put(\"facet_\" + keyCounter.incrementAndGet(), facet);\n          if (0 < maxDepth) {\n            // if we're going wide, don't go deep\n            final int nextMaxDepth = Math.max(0, maxDepth - numFacets);\n            facet.subFacets.putAll(buildRandomFacets(keyCounter, TestUtil.nextInt(random(), 0, nextMaxDepth)));\n          }\n        }\n      }\n      return results;\n    }\n\n","sourceOld":"    /** \n     * recursive helper method for building random facets\n     *\n     * @param keyCounter used to ensure every generated facet has a unique key name\n     * @param maxDepth max possible depth allowed for the recusion, a lower value may be used depending on how many facets are returned at the current level. \n     */\n    private static Map<String,TermFacet> buildRandomFacets(AtomicInteger keyCounter, int maxDepth) {\n      final int numFacets = Math.max(1, TestUtil.nextInt(random(), -1, 3)); // 3/5th chance of being '1'\n      Map<String,TermFacet> results = new LinkedHashMap<>();\n      for (int i = 0; i < numFacets; i++) {\n        if (keyCounter.get() < 3) { // a hard limit on the total number of facets (regardless of depth) to reduce OOM risk\n          \n          final String sort = randomSortParam(random());\n          final Integer limit = randomLimitParam(random(), sort);\n          final Integer overrequest = randomOverrequestParam(random());\n          final TermFacet facet =  new TermFacet(field((random().nextBoolean()\n                                                        ? STR_FIELD_SUFFIXES : INT_FIELD_SUFFIXES),\n                                                       random().nextInt(MAX_FIELD_NUM)),\n                                                 limit, overrequest, sort);\n          results.put(\"facet_\" + keyCounter.incrementAndGet(), facet);\n          if (0 < maxDepth) {\n            // if we're going wide, don't go deep\n            final int nextMaxDepth = Math.max(0, maxDepth - numFacets);\n            facet.subFacets.putAll(buildRandomFacets(keyCounter, TestUtil.nextInt(random(), 0, nextMaxDepth)));\n          }\n        }\n      }\n      return results;\n    }\n\n","bugFix":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22d2c45da6e47ff0ada29a8f98566b76f0b278de","date":1591372739,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG.TermFacet#buildRandomFacets(AtomicInteger,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG.TermFacet#buildRandomFacets(AtomicInteger,int).mjava","sourceNew":"    /** \n     * recursive helper method for building random facets\n     *\n     * @param keyCounter used to ensure every generated facet has a unique key name\n     * @param maxDepth max possible depth allowed for the recusion, a lower value may be used depending on how many facets are returned at the current level. \n     */\n    private static Map<String,TermFacet> buildRandomFacets(AtomicInteger keyCounter, int maxDepth) {\n      final int numFacets = Math.max(1, TestUtil.nextInt(random(), -1, 3)); // 3/5th chance of being '1'\n      Map<String,TermFacet> results = new LinkedHashMap<>();\n      for (int i = 0; i < numFacets; i++) {\n        if (keyCounter.get() < 3) { // a hard limit on the total number of facets (regardless of depth) to reduce OOM risk\n          \n          final String sort = randomSortParam(random());\n          final String facetField = randomFacetField(random());\n          final TermFacet facet =  new TermFacet(facetField,\n                                                 map(\"sort\", sort,\n                                                     \"prelim_sort\", randomPrelimSortParam(random(), sort),\n                                                     \"limit\", randomLimitParam(random(), sort),\n                                                     \"overrequest\", randomOverrequestParam(random()),\n                                                     \"prefix\", randomPrefixParam(random(), facetField),\n                                                     \"allBuckets\", randomAllBucketsParam(random(), sort),\n                                                     \"perSeg\", randomPerSegParam(random())));\n                                                     \n\n                                                 \n          results.put(\"facet_\" + keyCounter.incrementAndGet(), facet);\n          if (0 < maxDepth) {\n            // if we're going wide, don't go deep\n            final int nextMaxDepth = Math.max(0, maxDepth - numFacets);\n            facet.subFacets.putAll(buildRandomFacets(keyCounter, TestUtil.nextInt(random(), 0, nextMaxDepth)));\n          }\n        }\n      }\n      return results;\n    }\n\n","sourceOld":"    /** \n     * recursive helper method for building random facets\n     *\n     * @param keyCounter used to ensure every generated facet has a unique key name\n     * @param maxDepth max possible depth allowed for the recusion, a lower value may be used depending on how many facets are returned at the current level. \n     */\n    private static Map<String,TermFacet> buildRandomFacets(AtomicInteger keyCounter, int maxDepth) {\n      final int numFacets = Math.max(1, TestUtil.nextInt(random(), -1, 3)); // 3/5th chance of being '1'\n      Map<String,TermFacet> results = new LinkedHashMap<>();\n      for (int i = 0; i < numFacets; i++) {\n        if (keyCounter.get() < 3) { // a hard limit on the total number of facets (regardless of depth) to reduce OOM risk\n          \n          final String sort = randomSortParam(random());\n          final String facetField = randomFacetField(random());\n          final TermFacet facet =  new TermFacet(facetField,\n                                                 map(\"sort\", sort,\n                                                     \"prelim_sort\", randomPrelimSortParam(random(), sort),\n                                                     \"limit\", randomLimitParam(random(), sort),\n                                                     \"overrequest\", randomOverrequestParam(random()),\n                                                     \"prefix\", randomPrefixParam(random(), facetField),\n                                                     \"perSeg\", randomPerSegParam(random())));\n                                                     \n\n                                                 \n          results.put(\"facet_\" + keyCounter.incrementAndGet(), facet);\n          if (0 < maxDepth) {\n            // if we're going wide, don't go deep\n            final int nextMaxDepth = Math.max(0, maxDepth - numFacets);\n            facet.subFacets.putAll(buildRandomFacets(keyCounter, TestUtil.nextInt(random(), 0, nextMaxDepth)));\n          }\n        }\n      }\n      return results;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5ec3c464e62e57df598ba20e010313bf6d5d7b4":["92910727264a23a47b7a6c94b0f75d655537b9ea"],"22d2c45da6e47ff0ada29a8f98566b76f0b278de":["c5ec3c464e62e57df598ba20e010313bf6d5d7b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92910727264a23a47b7a6c94b0f75d655537b9ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22d2c45da6e47ff0ada29a8f98566b76f0b278de"]},"commit2Childs":{"c5ec3c464e62e57df598ba20e010313bf6d5d7b4":["22d2c45da6e47ff0ada29a8f98566b76f0b278de"],"22d2c45da6e47ff0ada29a8f98566b76f0b278de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92910727264a23a47b7a6c94b0f75d655537b9ea"],"92910727264a23a47b7a6c94b0f75d655537b9ea":["c5ec3c464e62e57df598ba20e010313bf6d5d7b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}