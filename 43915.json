{"path":"modules/queries/src/java/org/apache/lucene/queries/ChainedFilter#initialResult(AtomicReaderContext,int,int[]).mjava","commits":[{"id":"1f9f2355d68aab1348539f7a1603279405e566a4","date":1313634992,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/ChainedFilter#initialResult(AtomicReaderContext,int,int[]).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/ChainedFilter#initialResult(AtomicReaderContext,int,int[]).mjava","sourceNew":"  private OpenBitSetDISI initialResult(AtomicReaderContext context, int logic, int[] index)\n      throws IOException {\n    IndexReader reader = context.reader;\n    OpenBitSetDISI result;\n    /**\n     * First AND operation takes place against a completely false\n     * bitset and will always return zero results.\n     */\n    if (logic == AND) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      ++index[0];\n    } else if (logic == ANDNOT) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      result.flip(0, reader.maxDoc()); // NOTE: may set bits for deleted docs.\n      ++index[0];\n    } else {\n      result = new OpenBitSetDISI(reader.maxDoc());\n    }\n    return result;\n  }\n\n","sourceOld":"  private OpenBitSetDISI initialResult(AtomicReaderContext context, int logic, int[] index)\n      throws IOException {\n    IndexReader reader = context.reader;\n    OpenBitSetDISI result;\n    /**\n     * First AND operation takes place against a completely false\n     * bitset and will always return zero results.\n     */\n    if (logic == AND) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      ++index[0];\n    } else if (logic == ANDNOT) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      result.flip(0, reader.maxDoc()); // NOTE: may set bits for deleted docs.\n      ++index[0];\n    } else {\n      result = new OpenBitSetDISI(reader.maxDoc());\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61e20f33ce8ff701576366fdb03955eded5f209b","date":1327852832,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/ChainedFilter#initialResult(AtomicReaderContext,int,int[]).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/ChainedFilter#initialResult(AtomicReaderContext,int,int[]).mjava","sourceNew":"  private OpenBitSetDISI initialResult(AtomicReaderContext context, int logic, int[] index)\n      throws IOException {\n    AtomicIndexReader reader = context.reader();\n    OpenBitSetDISI result;\n    /**\n     * First AND operation takes place against a completely false\n     * bitset and will always return zero results.\n     */\n    if (logic == AND) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      ++index[0];\n    } else if (logic == ANDNOT) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      result.flip(0, reader.maxDoc()); // NOTE: may set bits for deleted docs.\n      ++index[0];\n    } else {\n      result = new OpenBitSetDISI(reader.maxDoc());\n    }\n    return result;\n  }\n\n","sourceOld":"  private OpenBitSetDISI initialResult(AtomicReaderContext context, int logic, int[] index)\n      throws IOException {\n    IndexReader reader = context.reader;\n    OpenBitSetDISI result;\n    /**\n     * First AND operation takes place against a completely false\n     * bitset and will always return zero results.\n     */\n    if (logic == AND) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      ++index[0];\n    } else if (logic == ANDNOT) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      result.flip(0, reader.maxDoc()); // NOTE: may set bits for deleted docs.\n      ++index[0];\n    } else {\n      result = new OpenBitSetDISI(reader.maxDoc());\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/ChainedFilter#initialResult(AtomicReaderContext,int,int[]).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/ChainedFilter#initialResult(AtomicReaderContext,int,int[]).mjava","sourceNew":"  private OpenBitSetDISI initialResult(AtomicReaderContext context, int logic, int[] index)\n      throws IOException {\n    AtomicReader reader = context.reader();\n    OpenBitSetDISI result;\n    /**\n     * First AND operation takes place against a completely false\n     * bitset and will always return zero results.\n     */\n    if (logic == AND) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      ++index[0];\n    } else if (logic == ANDNOT) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      result.flip(0, reader.maxDoc()); // NOTE: may set bits for deleted docs.\n      ++index[0];\n    } else {\n      result = new OpenBitSetDISI(reader.maxDoc());\n    }\n    return result;\n  }\n\n","sourceOld":"  private OpenBitSetDISI initialResult(AtomicReaderContext context, int logic, int[] index)\n      throws IOException {\n    AtomicIndexReader reader = context.reader();\n    OpenBitSetDISI result;\n    /**\n     * First AND operation takes place against a completely false\n     * bitset and will always return zero results.\n     */\n    if (logic == AND) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      ++index[0];\n    } else if (logic == ANDNOT) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      result.flip(0, reader.maxDoc()); // NOTE: may set bits for deleted docs.\n      ++index[0];\n    } else {\n      result = new OpenBitSetDISI(reader.maxDoc());\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/ChainedFilter#initialResult(AtomicReaderContext,int,int[]).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/ChainedFilter#initialResult(AtomicReaderContext,int,int[]).mjava","sourceNew":"  private OpenBitSetDISI initialResult(AtomicReaderContext context, int logic, int[] index)\n      throws IOException {\n    AtomicReader reader = context.reader();\n    OpenBitSetDISI result;\n    /**\n     * First AND operation takes place against a completely false\n     * bitset and will always return zero results.\n     */\n    if (logic == AND) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      ++index[0];\n    } else if (logic == ANDNOT) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      result.flip(0, reader.maxDoc()); // NOTE: may set bits for deleted docs.\n      ++index[0];\n    } else {\n      result = new OpenBitSetDISI(reader.maxDoc());\n    }\n    return result;\n  }\n\n","sourceOld":"  private OpenBitSetDISI initialResult(AtomicReaderContext context, int logic, int[] index)\n      throws IOException {\n    IndexReader reader = context.reader;\n    OpenBitSetDISI result;\n    /**\n     * First AND operation takes place against a completely false\n     * bitset and will always return zero results.\n     */\n    if (logic == AND) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      ++index[0];\n    } else if (logic == ANDNOT) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      result.flip(0, reader.maxDoc()); // NOTE: may set bits for deleted docs.\n      ++index[0];\n    } else {\n      result = new OpenBitSetDISI(reader.maxDoc());\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/ChainedFilter#initialResult(AtomicReaderContext,int,int[]).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/ChainedFilter#initialResult(AtomicReaderContext,int,int[]).mjava","sourceNew":"  private OpenBitSetDISI initialResult(AtomicReaderContext context, int logic, int[] index)\n      throws IOException {\n    AtomicReader reader = context.reader();\n    OpenBitSetDISI result;\n    /**\n     * First AND operation takes place against a completely false\n     * bitset and will always return zero results.\n     */\n    if (logic == AND) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      ++index[0];\n    } else if (logic == ANDNOT) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      result.flip(0, reader.maxDoc()); // NOTE: may set bits for deleted docs.\n      ++index[0];\n    } else {\n      result = new OpenBitSetDISI(reader.maxDoc());\n    }\n    return result;\n  }\n\n","sourceOld":"  private OpenBitSetDISI initialResult(AtomicReaderContext context, int logic, int[] index)\n      throws IOException {\n    AtomicReader reader = context.reader();\n    OpenBitSetDISI result;\n    /**\n     * First AND operation takes place against a completely false\n     * bitset and will always return zero results.\n     */\n    if (logic == AND) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      ++index[0];\n    } else if (logic == ANDNOT) {\n      result = new OpenBitSetDISI(getDISI(chain[index[0]], context), reader.maxDoc());\n      result.flip(0, reader.maxDoc()); // NOTE: may set bits for deleted docs.\n      ++index[0];\n    } else {\n      result = new OpenBitSetDISI(reader.maxDoc());\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["61e20f33ce8ff701576366fdb03955eded5f209b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61e20f33ce8ff701576366fdb03955eded5f209b":["1f9f2355d68aab1348539f7a1603279405e566a4"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["1f9f2355d68aab1348539f7a1603279405e566a4","da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1f9f2355d68aab1348539f7a1603279405e566a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f9f2355d68aab1348539f7a1603279405e566a4"],"61e20f33ce8ff701576366fdb03955eded5f209b":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1f9f2355d68aab1348539f7a1603279405e566a4":["61e20f33ce8ff701576366fdb03955eded5f209b","5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}