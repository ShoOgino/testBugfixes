{"path":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration,int).mjava","commits":[{"id":"61c6fb105d0ce095d846502a1d7a2a4bbf8fdecd","date":1466528770,"type":1,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration).mjava","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, LockFactory lockFactory, Configuration configuration, int bufferSize)\n      throws IOException {\n    super(lockFactory);\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    this.bufferSize = bufferSize;\n    fileSystem = FileSystem.get(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    if (fileSystem instanceof DistributedFileSystem) {\n      // Make sure dfs is not in safe mode\n      while (((DistributedFileSystem) fileSystem).setSafeMode(SafeModeAction.SAFEMODE_GET, true)) {\n        LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n        try {\n          Thread.sleep(5000);\n        } catch (InterruptedException e) {\n          Thread.interrupted();\n          // continue\n        }\n      }\n    }\n    \n    try {\n      if (!fileSystem.exists(hdfsDirPath)) {\n        boolean success = fileSystem.mkdirs(hdfsDirPath);\n        if (!success) {\n          throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n        }\n      }\n    } catch (Exception e) {\n      org.apache.solr.common.util.IOUtils.closeQuietly(fileSystem);\n      throw new RuntimeException(\"Problem creating directory: \" + hdfsDirPath, e);\n    }\n  }\n\n","sourceOld":"  public HdfsDirectory(Path hdfsDirPath, LockFactory lockFactory, Configuration configuration)\n      throws IOException {\n    super(lockFactory);\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.get(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    if (fileSystem instanceof DistributedFileSystem) {\n      // Make sure dfs is not in safe mode\n      while (((DistributedFileSystem) fileSystem).setSafeMode(SafeModeAction.SAFEMODE_GET, true)) {\n        LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n        try {\n          Thread.sleep(5000);\n        } catch (InterruptedException e) {\n          Thread.interrupted();\n          // continue\n        }\n      }\n    }\n    \n    try {\n      if (!fileSystem.exists(hdfsDirPath)) {\n        boolean success = fileSystem.mkdirs(hdfsDirPath);\n        if (!success) {\n          throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n        }\n      }\n    } catch (Exception e) {\n      org.apache.solr.common.util.IOUtils.closeQuietly(fileSystem);\n      throw new RuntimeException(\"Problem creating directory: \" + hdfsDirPath, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration,int).mjava","pathOld":"/dev/null","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, LockFactory lockFactory, Configuration configuration, int bufferSize)\n      throws IOException {\n    super(lockFactory);\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    this.bufferSize = bufferSize;\n    fileSystem = FileSystem.get(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    if (fileSystem instanceof DistributedFileSystem) {\n      // Make sure dfs is not in safe mode\n      while (((DistributedFileSystem) fileSystem).setSafeMode(SafeModeAction.SAFEMODE_GET, true)) {\n        LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n        try {\n          Thread.sleep(5000);\n        } catch (InterruptedException e) {\n          Thread.interrupted();\n          // continue\n        }\n      }\n    }\n    \n    try {\n      if (!fileSystem.exists(hdfsDirPath)) {\n        boolean success = fileSystem.mkdirs(hdfsDirPath);\n        if (!success) {\n          throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n        }\n      }\n    } catch (Exception e) {\n      org.apache.solr.common.util.IOUtils.closeQuietly(fileSystem);\n      throw new RuntimeException(\"Problem creating directory: \" + hdfsDirPath, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration,int).mjava","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, LockFactory lockFactory, Configuration configuration, int bufferSize)\n      throws IOException {\n    super(lockFactory);\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    this.bufferSize = bufferSize;\n    fileSystem = FileSystem.get(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    if (fileSystem instanceof DistributedFileSystem) {\n      // Make sure dfs is not in safe mode\n      while (((DistributedFileSystem) fileSystem).setSafeMode(SafeModeAction.SAFEMODE_GET, true)) {\n        log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n        try {\n          Thread.sleep(5000);\n        } catch (InterruptedException e) {\n          Thread.interrupted();\n          // continue\n        }\n      }\n    }\n    \n    try {\n      if (!fileSystem.exists(hdfsDirPath)) {\n        boolean success = fileSystem.mkdirs(hdfsDirPath);\n        if (!success) {\n          throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n        }\n      }\n    } catch (Exception e) {\n      org.apache.solr.common.util.IOUtils.closeQuietly(fileSystem);\n      throw new RuntimeException(\"Problem creating directory: \" + hdfsDirPath, e);\n    }\n  }\n\n","sourceOld":"  public HdfsDirectory(Path hdfsDirPath, LockFactory lockFactory, Configuration configuration, int bufferSize)\n      throws IOException {\n    super(lockFactory);\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    this.bufferSize = bufferSize;\n    fileSystem = FileSystem.get(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    if (fileSystem instanceof DistributedFileSystem) {\n      // Make sure dfs is not in safe mode\n      while (((DistributedFileSystem) fileSystem).setSafeMode(SafeModeAction.SAFEMODE_GET, true)) {\n        LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n        try {\n          Thread.sleep(5000);\n        } catch (InterruptedException e) {\n          Thread.interrupted();\n          // continue\n        }\n      }\n    }\n    \n    try {\n      if (!fileSystem.exists(hdfsDirPath)) {\n        boolean success = fileSystem.mkdirs(hdfsDirPath);\n        if (!success) {\n          throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n        }\n      }\n    } catch (Exception e) {\n      org.apache.solr.common.util.IOUtils.closeQuietly(fileSystem);\n      throw new RuntimeException(\"Problem creating directory: \" + hdfsDirPath, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e94b0e7e777364e296aacf369177bb0175c06a85","date":1593867585,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration,int).mjava","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, LockFactory lockFactory, Configuration configuration, int bufferSize)\n      throws IOException {\n    super(lockFactory);\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    this.bufferSize = bufferSize;\n    fileSystem = FileSystem.get(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    if (fileSystem instanceof DistributedFileSystem) {\n      // Make sure dfs is not in safe mode\n      while (((DistributedFileSystem) fileSystem).setSafeMode(SafeModeAction.SAFEMODE_GET, true)) {\n        log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n        try {\n          Thread.sleep(5000);\n        } catch (InterruptedException e) {\n          Thread.interrupted();\n          // continue\n        }\n      }\n    }\n    \n    try {\n      if (!fileSystem.exists(hdfsDirPath)) {\n        boolean success = fileSystem.mkdirs(hdfsDirPath);\n        if (!success) {\n          throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n        }\n      }\n    } catch (Exception e) {\n      org.apache.solr.common.util.IOUtils.closeQuietly(fileSystem);\n      throw new RuntimeException(\"Problem creating directory: \" + hdfsDirPath, e);\n    }\n    log.warn(\"HDFS support in Solr has been deprecated as of 8.6. See SOLR-14021 for details.\");\n  }\n\n","sourceOld":"  public HdfsDirectory(Path hdfsDirPath, LockFactory lockFactory, Configuration configuration, int bufferSize)\n      throws IOException {\n    super(lockFactory);\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    this.bufferSize = bufferSize;\n    fileSystem = FileSystem.get(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    if (fileSystem instanceof DistributedFileSystem) {\n      // Make sure dfs is not in safe mode\n      while (((DistributedFileSystem) fileSystem).setSafeMode(SafeModeAction.SAFEMODE_GET, true)) {\n        log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n        try {\n          Thread.sleep(5000);\n        } catch (InterruptedException e) {\n          Thread.interrupted();\n          // continue\n        }\n      }\n    }\n    \n    try {\n      if (!fileSystem.exists(hdfsDirPath)) {\n        boolean success = fileSystem.mkdirs(hdfsDirPath);\n        if (!success) {\n          throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n        }\n      }\n    } catch (Exception e) {\n      org.apache.solr.common.util.IOUtils.closeQuietly(fileSystem);\n      throw new RuntimeException(\"Problem creating directory: \" + hdfsDirPath, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61c6fb105d0ce095d846502a1d7a2a4bbf8fdecd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e94b0e7e777364e296aacf369177bb0175c06a85":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c6fb105d0ce095d846502a1d7a2a4bbf8fdecd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e94b0e7e777364e296aacf369177bb0175c06a85"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["61c6fb105d0ce095d846502a1d7a2a4bbf8fdecd"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61c6fb105d0ce095d846502a1d7a2a4bbf8fdecd","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"61c6fb105d0ce095d846502a1d7a2a4bbf8fdecd":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e94b0e7e777364e296aacf369177bb0175c06a85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["e94b0e7e777364e296aacf369177bb0175c06a85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}