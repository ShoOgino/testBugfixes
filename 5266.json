{"path":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","pathOld":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","sourceNew":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\")));\n    String line = reader.readLine();\n    reader.close();\n    \n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n      ts.reset();\n      while(ts.incrementToken());\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(sentence));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","sourceOld":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\")));\n    String line = reader.readLine();\n    reader.close();\n    \n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n      ts.reset();\n      while(ts.incrementToken());\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(sentence));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68f4ad0129ad3f60268f3df42c238366082da936","date":1341666620,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","sourceNew":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\"), \"UTF-8\"));\n    String line = reader.readLine();\n    reader.close();\n    \n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n      ts.reset();\n      while(ts.incrementToken());\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(sentence));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","sourceOld":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\")));\n    String line = reader.readLine();\n    reader.close();\n    \n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n      ts.reset();\n      while(ts.incrementToken());\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(sentence));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","sourceNew":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\"), \"UTF-8\"));\n    String line = reader.readLine();\n    reader.close();\n    \n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n      ts.reset();\n      while(ts.incrementToken());\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(sentence));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","sourceOld":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\")));\n    String line = reader.readLine();\n    reader.close();\n    \n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n      ts.reset();\n      while(ts.incrementToken());\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(sentence));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","sourceNew":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\"), \"UTF-8\"));\n    String line = reader.readLine();\n    reader.close();\n    \n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n      ts.reset();\n      while(ts.incrementToken());\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(sentence));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","sourceOld":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\")));\n    String line = reader.readLine();\n    reader.close();\n    \n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n      ts.reset();\n      while(ts.incrementToken());\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(sentence));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","sourceNew":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\"), \"UTF-8\"));\n    String line = reader.readLine();\n    reader.close();\n    \n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n      ts.reset();\n      while(ts.incrementToken());\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(sentence));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","sourceOld":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\")));\n    String line = reader.readLine();\n    reader.close();\n    \n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n      ts.reset();\n      while(ts.incrementToken());\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(sentence));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","sourceNew":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\"), \"UTF-8\"));\n    String line = reader.readLine();\n    reader.close();\n    \n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", line);\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      final TokenStream ts = analyzer.tokenStream(\"ignored\", line);\n      ts.reset();\n      while(ts.incrementToken());\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", sentence);\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","sourceOld":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\"), \"UTF-8\"));\n    String line = reader.readLine();\n    reader.close();\n    \n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n      ts.reset();\n      while(ts.incrementToken());\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(sentence));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","bugFix":["0984ad47974c2d5d354519ddb2aa8358973a6271"],"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","sourceNew":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\"), \"UTF-8\"));\n    String line = reader.readLine();\n    reader.close();\n    \n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", line);\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      final TokenStream ts = analyzer.tokenStream(\"ignored\", line);\n      ts.reset();\n      while(ts.incrementToken());\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", sentence);\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","sourceOld":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\"), \"UTF-8\"));\n    String line = reader.readLine();\n    reader.close();\n    \n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(line));\n      ts.reset();\n      while(ts.incrementToken());\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", new StringReader(sentence));\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99c9d8533c954f661481ae44273622957dbf572f","date":1380991288,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","sourceNew":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\"), \"UTF-8\"));\n    String line = reader.readLine();\n    reader.close();\n    \n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", line);\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      final TokenStream ts = analyzer.tokenStream(\"ignored\", line);\n      ts.reset();\n      while(ts.incrementToken());\n      ts.end();\n      ts.close();\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", sentence);\n        ts.reset();\n        while(ts.incrementToken());\n        ts.end();\n        ts.close();\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","sourceOld":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\"), \"UTF-8\"));\n    String line = reader.readLine();\n    reader.close();\n    \n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", line);\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      final TokenStream ts = analyzer.tokenStream(\"ignored\", line);\n      ts.reset();\n      while(ts.incrementToken());\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", sentence);\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"782ed6a4b4ba50ec19734fc8db4e570ee193d627","date":1381127065,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","sourceNew":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\"), \"UTF-8\"));\n    String line = reader.readLine();\n    reader.close();\n    \n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", line);\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      try (TokenStream ts = analyzer.tokenStream(\"ignored\", line)) {\n        ts.reset();\n        while(ts.incrementToken());\n        ts.end();\n      }\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        try (TokenStream ts = analyzer.tokenStream(\"ignored\", sentence)) {\n          ts.reset();\n          while(ts.incrementToken());\n          ts.end();\n        }\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","sourceOld":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\"), \"UTF-8\"));\n    String line = reader.readLine();\n    reader.close();\n    \n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", line);\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      final TokenStream ts = analyzer.tokenStream(\"ignored\", line);\n      ts.reset();\n      while(ts.incrementToken());\n      ts.end();\n      ts.close();\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", sentence);\n        ts.reset();\n        while(ts.incrementToken());\n        ts.end();\n        ts.close();\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","bugFix":["0984ad47974c2d5d354519ddb2aa8358973a6271","99c9d8533c954f661481ae44273622957dbf572f","c83d6c4335f31cae14f625a222bc842f20073dcd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","sourceNew":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\"), StandardCharsets.UTF_8));\n    String line = reader.readLine();\n    reader.close();\n    \n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", line);\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      try (TokenStream ts = analyzer.tokenStream(\"ignored\", line)) {\n        ts.reset();\n        while(ts.incrementToken());\n        ts.end();\n      }\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        try (TokenStream ts = analyzer.tokenStream(\"ignored\", sentence)) {\n          ts.reset();\n          while(ts.incrementToken());\n          ts.end();\n        }\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","sourceOld":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\"), \"UTF-8\"));\n    String line = reader.readLine();\n    reader.close();\n    \n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", line);\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      try (TokenStream ts = analyzer.tokenStream(\"ignored\", line)) {\n        ts.reset();\n        while(ts.incrementToken());\n        ts.end();\n      }\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        try (TokenStream ts = analyzer.tokenStream(\"ignored\", sentence)) {\n          ts.reset();\n          while(ts.incrementToken());\n          ts.end();\n        }\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","sourceNew":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\"), StandardCharsets.UTF_8));\n    String line = reader.readLine();\n    reader.close();\n    \n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", line);\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      try (TokenStream ts = analyzer.tokenStream(\"ignored\", line)) {\n        ts.reset();\n        while(ts.incrementToken());\n        ts.end();\n      }\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        try (TokenStream ts = analyzer.tokenStream(\"ignored\", sentence)) {\n          ts.reset();\n          while(ts.incrementToken());\n          ts.end();\n        }\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","sourceOld":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\"), \"UTF-8\"));\n    String line = reader.readLine();\n    reader.close();\n    \n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", line);\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      try (TokenStream ts = analyzer.tokenStream(\"ignored\", line)) {\n        ts.reset();\n        while(ts.incrementToken());\n        ts.end();\n      }\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        try (TokenStream ts = analyzer.tokenStream(\"ignored\", sentence)) {\n          ts.reset();\n          while(ts.incrementToken());\n          ts.end();\n        }\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4","date":1449124064,"type":3,"author":"Christian Moen","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#doTestBocchan(int).mjava","sourceNew":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\"), StandardCharsets.UTF_8));\n    String line = reader.readLine();\n    reader.close();\n\n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", line);\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      try (TokenStream ts = analyzer.tokenStream(\"ignored\", line)) {\n        ts.reset();\n        while(ts.incrementToken());\n        ts.end();\n      }\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        try (TokenStream ts = analyzer.tokenStream(\"ignored\", sentence)) {\n          ts.reset();\n          while(ts.incrementToken());\n          ts.end();\n        }\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","sourceOld":"  private void doTestBocchan(int numIterations) throws Exception {\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(\n        this.getClass().getResourceAsStream(\"bocchan.utf-8\"), StandardCharsets.UTF_8));\n    String line = reader.readLine();\n    reader.close();\n    \n    if (VERBOSE) {\n      System.out.println(\"Test for Bocchan without pre-splitting sentences\");\n    }\n\n    /*\n    if (numIterations > 1) {\n      // warmup\n      for (int i = 0; i < numIterations; i++) {\n        final TokenStream ts = analyzer.tokenStream(\"ignored\", line);\n        ts.reset();\n        while(ts.incrementToken());\n      }\n    }\n    */\n\n    long totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      try (TokenStream ts = analyzer.tokenStream(\"ignored\", line)) {\n        ts.reset();\n        while(ts.incrementToken());\n        ts.end();\n      }\n    }\n    String[] sentences = line.split(\"、|。\");\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n      System.out.println(\"Test for Bocchan with pre-splitting sentences (\" + sentences.length + \" sentences)\");\n    }\n    totalStart = System.currentTimeMillis();\n    for (int i = 0; i < numIterations; i++) {\n      for (String sentence: sentences) {\n        try (TokenStream ts = analyzer.tokenStream(\"ignored\", sentence)) {\n          ts.reset();\n          while(ts.incrementToken());\n          ts.end();\n        }\n      }\n    }\n    if (VERBOSE) {\n      System.out.println(\"Total time : \" + (System.currentTimeMillis() - totalStart));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99c9d8533c954f661481ae44273622957dbf572f":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"5eb2511ababf862ea11e10761c70ee560cd84510":["782ed6a4b4ba50ec19734fc8db4e570ee193d627","7d89d7e4e5101347833eea558851bf4209218619"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["2acf500f78aa12b92e371fd89c719291986b6b90","c83d6c4335f31cae14f625a222bc842f20073dcd"],"68f4ad0129ad3f60268f3df42c238366082da936":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["99c9d8533c954f661481ae44273622957dbf572f"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","68f4ad0129ad3f60268f3df42c238366082da936"],"7d89d7e4e5101347833eea558851bf4209218619":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4":["7d89d7e4e5101347833eea558851bf4209218619"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4"]},"commit2Childs":{"99c9d8533c954f661481ae44273622957dbf572f":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"68f4ad0129ad3f60268f3df42c238366082da936":["2acf500f78aa12b92e371fd89c719291986b6b90"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"2acf500f78aa12b92e371fd89c719291986b6b90":["37a0f60745e53927c4c876cfe5b5a58170f0646c","46d8ada1fff8d18cb197c38c7983225162599948","c83d6c4335f31cae14f625a222bc842f20073dcd","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4"],"f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["68f4ad0129ad3f60268f3df42c238366082da936","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["99c9d8533c954f661481ae44273622957dbf572f","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","37a0f60745e53927c4c876cfe5b5a58170f0646c","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}