{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/NumericQueryNodeProcessor#postProcessNode(QueryNode).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/NumericQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/NumericQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof FieldQueryNode\n        && !(node.getParent() instanceof RangeQueryNode)) {\n      \n      QueryConfigHandler config = getQueryConfigHandler();\n      \n      if (config != null) {\n        FieldQueryNode fieldNode = (FieldQueryNode) node;\n        FieldConfig fieldConfig = config.getFieldConfig(fieldNode\n            .getFieldAsString());\n        \n        if (fieldConfig != null) {\n          NumericConfig numericConfig = fieldConfig\n              .get(ConfigurationKeys.NUMERIC_CONFIG);\n          \n          if (numericConfig != null) {\n            \n            NumberFormat numberFormat = numericConfig.getNumberFormat();\n            String text = fieldNode.getTextAsString();\n            Number number = null;\n            \n            if (text.length() > 0) {\n              \n              try {\n                number = numberFormat.parse(text);\n                \n              } catch (ParseException e) {\n                throw new QueryNodeParseException(new MessageImpl(\n                    QueryParserMessages.COULD_NOT_PARSE_NUMBER, fieldNode\n                        .getTextAsString(), numberFormat.getClass()\n                        .getCanonicalName()), e);\n              }\n              \n              switch (numericConfig.getType()) {\n                case LONG:\n                  number = number.longValue();\n                  break;\n                case INT:\n                  number = number.intValue();\n                  break;\n                case DOUBLE:\n                  number = number.doubleValue();\n                  break;\n                case FLOAT:\n                  number = number.floatValue();\n              }\n              \n            } else {\n              throw new QueryNodeParseException(new MessageImpl(\n                  QueryParserMessages.NUMERIC_CANNOT_BE_EMPTY, fieldNode.getFieldAsString()));\n            }\n            \n            NumericQueryNode lowerNode = new NumericQueryNode(fieldNode\n                .getField(), number, numberFormat);\n            NumericQueryNode upperNode = new NumericQueryNode(fieldNode\n                .getField(), number, numberFormat);\n            \n            return new NumericRangeQueryNode(lowerNode, upperNode, true, true,\n                numericConfig);\n            \n          }\n          \n        }\n        \n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof FieldQueryNode\n        && !(node.getParent() instanceof RangeQueryNode)) {\n      \n      QueryConfigHandler config = getQueryConfigHandler();\n      \n      if (config != null) {\n        FieldQueryNode fieldNode = (FieldQueryNode) node;\n        FieldConfig fieldConfig = config.getFieldConfig(fieldNode\n            .getFieldAsString());\n        \n        if (fieldConfig != null) {\n          NumericConfig numericConfig = fieldConfig\n              .get(ConfigurationKeys.NUMERIC_CONFIG);\n          \n          if (numericConfig != null) {\n            \n            NumberFormat numberFormat = numericConfig.getNumberFormat();\n            String text = fieldNode.getTextAsString();\n            Number number = null;\n            \n            if (text.length() > 0) {\n              \n              try {\n                number = numberFormat.parse(text);\n                \n              } catch (ParseException e) {\n                throw new QueryNodeParseException(new MessageImpl(\n                    QueryParserMessages.COULD_NOT_PARSE_NUMBER, fieldNode\n                        .getTextAsString(), numberFormat.getClass()\n                        .getCanonicalName()), e);\n              }\n              \n              switch (numericConfig.getType()) {\n                case LONG:\n                  number = number.longValue();\n                  break;\n                case INT:\n                  number = number.intValue();\n                  break;\n                case DOUBLE:\n                  number = number.doubleValue();\n                  break;\n                case FLOAT:\n                  number = number.floatValue();\n              }\n              \n            } else {\n              throw new QueryNodeParseException(new MessageImpl(\n                  QueryParserMessages.NUMERIC_CANNOT_BE_EMPTY, fieldNode.getFieldAsString()));\n            }\n            \n            NumericQueryNode lowerNode = new NumericQueryNode(fieldNode\n                .getField(), number, numberFormat);\n            NumericQueryNode upperNode = new NumericQueryNode(fieldNode\n                .getField(), number, numberFormat);\n            \n            return new NumericRangeQueryNode(lowerNode, upperNode, true, true,\n                numericConfig);\n            \n          }\n          \n        }\n        \n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"683242c67a3f6086bae8b1354748fcaa38edfbd5","date":1457575601,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/LegacyNumericQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/NumericQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof FieldQueryNode\n        && !(node.getParent() instanceof RangeQueryNode)) {\n      \n      QueryConfigHandler config = getQueryConfigHandler();\n      \n      if (config != null) {\n        FieldQueryNode fieldNode = (FieldQueryNode) node;\n        FieldConfig fieldConfig = config.getFieldConfig(fieldNode\n            .getFieldAsString());\n        \n        if (fieldConfig != null) {\n          LegacyNumericConfig numericConfig = fieldConfig\n              .get(ConfigurationKeys.LEGACY_NUMERIC_CONFIG);\n          \n          if (numericConfig != null) {\n            \n            NumberFormat numberFormat = numericConfig.getNumberFormat();\n            String text = fieldNode.getTextAsString();\n            Number number = null;\n            \n            if (text.length() > 0) {\n              \n              try {\n                number = numberFormat.parse(text);\n                \n              } catch (ParseException e) {\n                throw new QueryNodeParseException(new MessageImpl(\n                    QueryParserMessages.COULD_NOT_PARSE_NUMBER, fieldNode\n                        .getTextAsString(), numberFormat.getClass()\n                        .getCanonicalName()), e);\n              }\n              \n              switch (numericConfig.getType()) {\n                case LONG:\n                  number = number.longValue();\n                  break;\n                case INT:\n                  number = number.intValue();\n                  break;\n                case DOUBLE:\n                  number = number.doubleValue();\n                  break;\n                case FLOAT:\n                  number = number.floatValue();\n              }\n              \n            } else {\n              throw new QueryNodeParseException(new MessageImpl(\n                  QueryParserMessages.NUMERIC_CANNOT_BE_EMPTY, fieldNode.getFieldAsString()));\n            }\n            \n            LegacyNumericQueryNode lowerNode = new LegacyNumericQueryNode(fieldNode\n                .getField(), number, numberFormat);\n            LegacyNumericQueryNode upperNode = new LegacyNumericQueryNode(fieldNode\n                .getField(), number, numberFormat);\n            \n            return new LegacyNumericRangeQueryNode(lowerNode, upperNode, true, true,\n                numericConfig);\n            \n          }\n          \n        }\n        \n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof FieldQueryNode\n        && !(node.getParent() instanceof RangeQueryNode)) {\n      \n      QueryConfigHandler config = getQueryConfigHandler();\n      \n      if (config != null) {\n        FieldQueryNode fieldNode = (FieldQueryNode) node;\n        FieldConfig fieldConfig = config.getFieldConfig(fieldNode\n            .getFieldAsString());\n        \n        if (fieldConfig != null) {\n          NumericConfig numericConfig = fieldConfig\n              .get(ConfigurationKeys.NUMERIC_CONFIG);\n          \n          if (numericConfig != null) {\n            \n            NumberFormat numberFormat = numericConfig.getNumberFormat();\n            String text = fieldNode.getTextAsString();\n            Number number = null;\n            \n            if (text.length() > 0) {\n              \n              try {\n                number = numberFormat.parse(text);\n                \n              } catch (ParseException e) {\n                throw new QueryNodeParseException(new MessageImpl(\n                    QueryParserMessages.COULD_NOT_PARSE_NUMBER, fieldNode\n                        .getTextAsString(), numberFormat.getClass()\n                        .getCanonicalName()), e);\n              }\n              \n              switch (numericConfig.getType()) {\n                case LONG:\n                  number = number.longValue();\n                  break;\n                case INT:\n                  number = number.intValue();\n                  break;\n                case DOUBLE:\n                  number = number.doubleValue();\n                  break;\n                case FLOAT:\n                  number = number.floatValue();\n              }\n              \n            } else {\n              throw new QueryNodeParseException(new MessageImpl(\n                  QueryParserMessages.NUMERIC_CANNOT_BE_EMPTY, fieldNode.getFieldAsString()));\n            }\n            \n            NumericQueryNode lowerNode = new NumericQueryNode(fieldNode\n                .getField(), number, numberFormat);\n            NumericQueryNode upperNode = new NumericQueryNode(fieldNode\n                .getField(), number, numberFormat);\n            \n            return new NumericRangeQueryNode(lowerNode, upperNode, true, true,\n                numericConfig);\n            \n          }\n          \n        }\n        \n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"683242c67a3f6086bae8b1354748fcaa38edfbd5","date":1457575601,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/PointQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/NumericQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof FieldQueryNode\n        && !(node.getParent() instanceof RangeQueryNode)) {\n      \n      QueryConfigHandler config = getQueryConfigHandler();\n      \n      if (config != null) {\n        FieldQueryNode fieldNode = (FieldQueryNode) node;\n        FieldConfig fieldConfig = config.getFieldConfig(fieldNode\n            .getFieldAsString());\n        \n        if (fieldConfig != null) {\n          PointsConfig numericConfig = fieldConfig.get(ConfigurationKeys.POINTS_CONFIG);\n          \n          if (numericConfig != null) {\n            \n            NumberFormat numberFormat = numericConfig.getNumberFormat();\n            String text = fieldNode.getTextAsString();\n            Number number = null;\n            \n            if (text.length() > 0) {\n              \n              try {\n                number = numberFormat.parse(text);\n                \n              } catch (ParseException e) {\n                throw new QueryNodeParseException(new MessageImpl(\n                    QueryParserMessages.COULD_NOT_PARSE_NUMBER, fieldNode\n                        .getTextAsString(), numberFormat.getClass()\n                        .getCanonicalName()), e);\n              }\n              \n              if (Integer.class.equals(numericConfig.getType())) {\n                number = number.intValue();\n              } else if (Long.class.equals(numericConfig.getType())) {\n                number = number.longValue();\n              } else if (Double.class.equals(numericConfig.getType())) {\n                number = number.doubleValue();\n              } else if (Float.class.equals(numericConfig.getType())) {\n                number = number.floatValue();\n              }\n              \n            } else {\n              throw new QueryNodeParseException(new MessageImpl(\n                  QueryParserMessages.NUMERIC_CANNOT_BE_EMPTY, fieldNode.getFieldAsString()));\n            }\n            \n            PointQueryNode lowerNode = new PointQueryNode(fieldNode.getField(), number, numberFormat);\n            PointQueryNode upperNode = new PointQueryNode(fieldNode.getField(), number, numberFormat);\n            \n            return new PointRangeQueryNode(lowerNode, upperNode, true, true, numericConfig);\n          }\n        }\n      }\n    }\n    return node;\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n    \n    if (node instanceof FieldQueryNode\n        && !(node.getParent() instanceof RangeQueryNode)) {\n      \n      QueryConfigHandler config = getQueryConfigHandler();\n      \n      if (config != null) {\n        FieldQueryNode fieldNode = (FieldQueryNode) node;\n        FieldConfig fieldConfig = config.getFieldConfig(fieldNode\n            .getFieldAsString());\n        \n        if (fieldConfig != null) {\n          NumericConfig numericConfig = fieldConfig\n              .get(ConfigurationKeys.NUMERIC_CONFIG);\n          \n          if (numericConfig != null) {\n            \n            NumberFormat numberFormat = numericConfig.getNumberFormat();\n            String text = fieldNode.getTextAsString();\n            Number number = null;\n            \n            if (text.length() > 0) {\n              \n              try {\n                number = numberFormat.parse(text);\n                \n              } catch (ParseException e) {\n                throw new QueryNodeParseException(new MessageImpl(\n                    QueryParserMessages.COULD_NOT_PARSE_NUMBER, fieldNode\n                        .getTextAsString(), numberFormat.getClass()\n                        .getCanonicalName()), e);\n              }\n              \n              switch (numericConfig.getType()) {\n                case LONG:\n                  number = number.longValue();\n                  break;\n                case INT:\n                  number = number.intValue();\n                  break;\n                case DOUBLE:\n                  number = number.doubleValue();\n                  break;\n                case FLOAT:\n                  number = number.floatValue();\n              }\n              \n            } else {\n              throw new QueryNodeParseException(new MessageImpl(\n                  QueryParserMessages.NUMERIC_CANNOT_BE_EMPTY, fieldNode.getFieldAsString()));\n            }\n            \n            NumericQueryNode lowerNode = new NumericQueryNode(fieldNode\n                .getField(), number, numberFormat);\n            NumericQueryNode upperNode = new NumericQueryNode(fieldNode\n                .getField(), number, numberFormat);\n            \n            return new NumericRangeQueryNode(lowerNode, upperNode, true, true,\n                numericConfig);\n            \n          }\n          \n        }\n        \n      }\n      \n    }\n    \n    return node;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["683242c67a3f6086bae8b1354748fcaa38edfbd5"]},"commit2Childs":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["683242c67a3f6086bae8b1354748fcaa38edfbd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}