{"path":"contrib/lucli/src/lucli/LuceneMethods#getFieldInfo().mjava","commits":[{"id":"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a","date":1107704112,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/lucli/src/lucli/LuceneMethods#getFieldInfo().mjava","pathOld":"sandbox/contributions/lucli/src/lucli/LuceneMethods#getFieldInfo().mjava","sourceNew":"  private void getFieldInfo() throws IOException {\n    IndexReader indexReader = IndexReader.open(indexName);\n    fields = new Vector();\n    indexedFields = new Vector();\n\n    //get the list of all field names\n    fieldIterator = indexReader.getFieldNames().iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        fields.add(field.toString());\n    }\n    //\n    //get the list of indexed field names\n    fieldIterator = indexReader.getFieldNames(true).iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        indexedFields.add(field.toString());\n    }\n    indexReader.close();\n  }\n\n","sourceOld":"  private void getFieldInfo() throws IOException {\n    IndexReader indexReader = IndexReader.open(indexName);\n    fields = new Vector();\n    indexedFields = new Vector();\n\n    //get the list of all field names\n    fieldIterator = indexReader.getFieldNames().iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        fields.add(field.toString());\n    }\n    //\n    //get the list of indexed field names\n    fieldIterator = indexReader.getFieldNames(true).iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        indexedFields.add(field.toString());\n    }\n    indexReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4df60738409662c962b4ed3201d830cd3c14530","date":1114991851,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/LuceneMethods#getFieldInfo().mjava","pathOld":"contrib/lucli/src/lucli/LuceneMethods#getFieldInfo().mjava","sourceNew":"  private void getFieldInfo() throws IOException {\n    IndexReader indexReader = IndexReader.open(indexName);\n    fields = new Vector();\n    indexedFields = new Vector();\n\n    //get the list of all field names\n    fieldIterator = indexReader.getFieldNames().iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        fields.add(field.toString());\n    }\n    //\n    //get the list of indexed field names\n    fieldIterator = indexReader.getFieldNames(true).iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        indexedFields.add(field.toString());\n    }\n    indexReader.close();\n  }\n\n","sourceOld":"  private void getFieldInfo() throws IOException {\n    IndexReader indexReader = IndexReader.open(indexName);\n    fields = new Vector();\n    indexedFields = new Vector();\n\n    //get the list of all field names\n    fieldIterator = indexReader.getFieldNames().iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        fields.add(field.toString());\n    }\n    //\n    //get the list of indexed field names\n    fieldIterator = indexReader.getFieldNames(true).iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        indexedFields.add(field.toString());\n    }\n    indexReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a4df60738409662c962b4ed3201d830cd3c14530"],"a4df60738409662c962b4ed3201d830cd3c14530":["a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a"],"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a":["a4df60738409662c962b4ed3201d830cd3c14530"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a4df60738409662c962b4ed3201d830cd3c14530":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}