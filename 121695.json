{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#AnalysisOffsetStrategy(String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer).mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#AnalysisOffsetStrategy(String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  public AnalysisOffsetStrategy(String field, BytesRef[] extractedTerms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata, Analyzer analyzer) {\n    super(field, extractedTerms, phraseHelper, automata);\n    this.analyzer = analyzer;\n    // Automata (Wildcards / MultiTermQuery):\n    this.automata = automata;\n\n    if (terms.length > 0 && !strictPhrases.hasPositionSensitivity()) {\n      this.automata = convertTermsToAutomata(terms, automata);\n      // clear the terms array now that we've moved them to be expressed as automata\n      terms = ZERO_LEN_BYTES_REF_ARRAY;\n    }\n\n    if (terms.length > 0 || strictPhrases.willRewrite()) { //needs MemoryIndex\n      // init MemoryIndex\n      boolean storePayloads = strictPhrases.hasPositionSensitivity(); // might be needed\n      memoryIndex = new MemoryIndex(true, storePayloads);//true==store offsets\n      leafReader = (LeafReader) memoryIndex.createSearcher().getIndexReader();\n      // preFilter for MemoryIndex\n      preMemIndexFilterAutomaton = buildCombinedAutomaton(field, terms, this.automata, strictPhrases);\n    } else {\n      memoryIndex = null;\n      leafReader = null;\n      preMemIndexFilterAutomaton = null;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#AnalysisOffsetStrategy(String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  public AnalysisOffsetStrategy(String field, BytesRef[] extractedTerms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata, Analyzer analyzer) {\n    super(field, extractedTerms, phraseHelper, automata);\n    this.analyzer = analyzer;\n    // Automata (Wildcards / MultiTermQuery):\n    this.automata = automata;\n\n    if (terms.length > 0 && !strictPhrases.hasPositionSensitivity()) {\n      this.automata = convertTermsToAutomata(terms, automata);\n      // clear the terms array now that we've moved them to be expressed as automata\n      terms = ZERO_LEN_BYTES_REF_ARRAY;\n    }\n\n    if (terms.length > 0 || strictPhrases.willRewrite()) { //needs MemoryIndex\n      // init MemoryIndex\n      boolean storePayloads = strictPhrases.hasPositionSensitivity(); // might be needed\n      memoryIndex = new MemoryIndex(true, storePayloads);//true==store offsets\n      leafReader = (LeafReader) memoryIndex.createSearcher().getIndexReader();\n      // preFilter for MemoryIndex\n      preMemIndexFilterAutomaton = buildCombinedAutomaton(field, terms, this.automata, strictPhrases);\n    } else {\n      memoryIndex = null;\n      leafReader = null;\n      preMemIndexFilterAutomaton = null;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc650d323b3ed43d314ef27d4a586c37b4773f7e","date":1478639612,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#AnalysisOffsetStrategy(String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#AnalysisOffsetStrategy(String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer).mjava","sourceNew":"  public AnalysisOffsetStrategy(String field, BytesRef[] extractedTerms, PhraseHelper phraseHelper,\n                                CharacterRunAutomaton[] automata, Analyzer analyzer,\n                                Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    super(field, extractedTerms, phraseHelper, automata);\n    this.analyzer = analyzer;\n    // Automata (Wildcards / MultiTermQuery):\n    this.automata = automata;\n\n    if (terms.length > 0 && !strictPhrases.hasPositionSensitivity()) {\n      this.automata = convertTermsToAutomata(terms, automata);\n      // clear the terms array now that we've moved them to be expressed as automata\n      terms = ZERO_LEN_BYTES_REF_ARRAY;\n    }\n\n    if (terms.length > 0 || strictPhrases.willRewrite()) { //needs MemoryIndex\n      // init MemoryIndex\n      boolean storePayloads = strictPhrases.hasPositionSensitivity(); // might be needed\n      memoryIndex = new MemoryIndex(true, storePayloads);//true==store offsets\n      leafReader = (LeafReader) memoryIndex.createSearcher().getIndexReader();\n      // preFilter for MemoryIndex\n      preMemIndexFilterAutomaton = buildCombinedAutomaton(field, terms, this.automata, strictPhrases,\n          multiTermQueryRewrite);\n    } else {\n      memoryIndex = null;\n      leafReader = null;\n      preMemIndexFilterAutomaton = null;\n    }\n\n  }\n\n","sourceOld":"  public AnalysisOffsetStrategy(String field, BytesRef[] extractedTerms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata, Analyzer analyzer) {\n    super(field, extractedTerms, phraseHelper, automata);\n    this.analyzer = analyzer;\n    // Automata (Wildcards / MultiTermQuery):\n    this.automata = automata;\n\n    if (terms.length > 0 && !strictPhrases.hasPositionSensitivity()) {\n      this.automata = convertTermsToAutomata(terms, automata);\n      // clear the terms array now that we've moved them to be expressed as automata\n      terms = ZERO_LEN_BYTES_REF_ARRAY;\n    }\n\n    if (terms.length > 0 || strictPhrases.willRewrite()) { //needs MemoryIndex\n      // init MemoryIndex\n      boolean storePayloads = strictPhrases.hasPositionSensitivity(); // might be needed\n      memoryIndex = new MemoryIndex(true, storePayloads);//true==store offsets\n      leafReader = (LeafReader) memoryIndex.createSearcher().getIndexReader();\n      // preFilter for MemoryIndex\n      preMemIndexFilterAutomaton = buildCombinedAutomaton(field, terms, this.automata, strictPhrases);\n    } else {\n      memoryIndex = null;\n      leafReader = null;\n      preMemIndexFilterAutomaton = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#AnalysisOffsetStrategy(String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer,Function[Query,Collection[Query]]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#AnalysisOffsetStrategy(String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer).mjava","sourceNew":"  public AnalysisOffsetStrategy(String field, BytesRef[] extractedTerms, PhraseHelper phraseHelper,\n                                CharacterRunAutomaton[] automata, Analyzer analyzer,\n                                Function<Query, Collection<Query>> multiTermQueryRewrite) {\n    super(field, extractedTerms, phraseHelper, automata);\n    this.analyzer = analyzer;\n    // Automata (Wildcards / MultiTermQuery):\n    this.automata = automata;\n\n    if (terms.length > 0 && !strictPhrases.hasPositionSensitivity()) {\n      this.automata = convertTermsToAutomata(terms, automata);\n      // clear the terms array now that we've moved them to be expressed as automata\n      terms = ZERO_LEN_BYTES_REF_ARRAY;\n    }\n\n    if (terms.length > 0 || strictPhrases.willRewrite()) { //needs MemoryIndex\n      // init MemoryIndex\n      boolean storePayloads = strictPhrases.hasPositionSensitivity(); // might be needed\n      memoryIndex = new MemoryIndex(true, storePayloads);//true==store offsets\n      leafReader = (LeafReader) memoryIndex.createSearcher().getIndexReader();\n      // preFilter for MemoryIndex\n      preMemIndexFilterAutomaton = buildCombinedAutomaton(field, terms, this.automata, strictPhrases,\n          multiTermQueryRewrite);\n    } else {\n      memoryIndex = null;\n      leafReader = null;\n      preMemIndexFilterAutomaton = null;\n    }\n\n  }\n\n","sourceOld":"  public AnalysisOffsetStrategy(String field, BytesRef[] extractedTerms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata, Analyzer analyzer) {\n    super(field, extractedTerms, phraseHelper, automata);\n    this.analyzer = analyzer;\n    // Automata (Wildcards / MultiTermQuery):\n    this.automata = automata;\n\n    if (terms.length > 0 && !strictPhrases.hasPositionSensitivity()) {\n      this.automata = convertTermsToAutomata(terms, automata);\n      // clear the terms array now that we've moved them to be expressed as automata\n      terms = ZERO_LEN_BYTES_REF_ARRAY;\n    }\n\n    if (terms.length > 0 || strictPhrases.willRewrite()) { //needs MemoryIndex\n      // init MemoryIndex\n      boolean storePayloads = strictPhrases.hasPositionSensitivity(); // might be needed\n      memoryIndex = new MemoryIndex(true, storePayloads);//true==store offsets\n      leafReader = (LeafReader) memoryIndex.createSearcher().getIndexReader();\n      // preFilter for MemoryIndex\n      preMemIndexFilterAutomaton = buildCombinedAutomaton(field, terms, this.automata, strictPhrases);\n    } else {\n      memoryIndex = null;\n      leafReader = null;\n      preMemIndexFilterAutomaton = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2e9861e4a2b724d9fc51b618714c579491b78d7","date":1479244606,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#AnalysisOffsetStrategy(String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  public AnalysisOffsetStrategy(String field, BytesRef[] queryTerms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata, Analyzer analyzer) {\n    super(field, queryTerms, phraseHelper, automata);\n    this.analyzer = analyzer;\n    if (analyzer.getOffsetGap(field) != 1) { // note: 1 is the default. It is RARELY changed.\n      throw new IllegalArgumentException(\n          \"offset gap of the provided analyzer should be 1 (field \" + field + \")\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#AnalysisOffsetStrategy(String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  public AnalysisOffsetStrategy(String field, BytesRef[] queryTerms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata, Analyzer analyzer) {\n    super(field, queryTerms, phraseHelper, automata);\n    this.analyzer = analyzer;\n    if (analyzer.getOffsetGap(field) != 1) { // note: 1 is the default. It is RARELY changed.\n      throw new IllegalArgumentException(\n          \"offset gap of the provided analyzer should be 1 (field \" + field + \")\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"795822cce6616d4035b5a4bdbb6c113ea2f715ba","date":1535599765,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#AnalysisOffsetStrategy(UHComponents,Analyzer).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/AnalysisOffsetStrategy#AnalysisOffsetStrategy(String,BytesRef[],PhraseHelper,CharacterRunAutomaton[],Analyzer).mjava","sourceNew":"  public AnalysisOffsetStrategy(UHComponents components, Analyzer analyzer) {\n    super(components);\n    this.analyzer = analyzer;\n    if (analyzer.getOffsetGap(getField()) != 1) { // note: 1 is the default. It is RARELY changed.\n      throw new IllegalArgumentException(\n          \"offset gap of the provided analyzer should be 1 (field \" + getField() + \")\");\n    }\n  }\n\n","sourceOld":"  public AnalysisOffsetStrategy(String field, BytesRef[] queryTerms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata, Analyzer analyzer) {\n    super(field, queryTerms, phraseHelper, automata);\n    this.analyzer = analyzer;\n    if (analyzer.getOffsetGap(field) != 1) { // note: 1 is the default. It is RARELY changed.\n      throw new IllegalArgumentException(\n          \"offset gap of the provided analyzer should be 1 (field \" + field + \")\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2e9861e4a2b724d9fc51b618714c579491b78d7":["cc650d323b3ed43d314ef27d4a586c37b4773f7e"],"cc650d323b3ed43d314ef27d4a586c37b4773f7e":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["199dfa410f1fdbfd3294106b04096cce5ed34b21","f2e9861e4a2b724d9fc51b618714c579491b78d7"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cc650d323b3ed43d314ef27d4a586c37b4773f7e"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["f2e9861e4a2b724d9fc51b618714c579491b78d7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"]},"commit2Childs":{"f2e9861e4a2b724d9fc51b618714c579491b78d7":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","795822cce6616d4035b5a4bdbb6c113ea2f715ba"],"cc650d323b3ed43d314ef27d4a586c37b4773f7e":["f2e9861e4a2b724d9fc51b618714c579491b78d7","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["cc650d323b3ed43d314ef27d4a586c37b4773f7e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}