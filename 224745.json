{"path":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testTermQuery().mjava","commits":[{"id":"657704b225b01c6ff4bada5b6667f1f60aaaad0f","date":1523436207,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testTermQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermQuery() throws IOException {\n    Query q = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w1\"));\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0, 0, 0, 0, 2 },\n        { 1, 0, 0, 0, 2 },\n        { 2, 0, 0, 0, 2 },\n        { 3, 0, 0, 0, 2, 2, 2, 6, 8 },\n        { 4 }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testTermQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermQuery() throws IOException {\n    Query q = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w1\"));\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0, 0, 0, 0, 2 },\n        { 1, 0, 0, 0, 2 },\n        { 2, 0, 0, 0, 2 },\n        { 3, 0, 0, 0, 2, 2, 2, 6, 8 },\n        { 4 }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"165c3432cb3c4fcfc8e859af24323bbbd12084af","date":1532292166,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testTermQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testTermQuery().mjava","sourceNew":"  public void testTermQuery() throws IOException {\n    Term t = new Term(FIELD_WITH_OFFSETS, \"w1\");\n    Query q = new TermQuery(t);\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0, 0, 0, 0, 2 },\n        { 1, 0, 0, 0, 2 },\n        { 2, 0, 0, 0, 2 },\n        { 3, 0, 0, 0, 2, 2, 2, 6, 8 },\n        { 4 }\n    });\n    checkTermMatches(q, FIELD_WITH_OFFSETS, new TermMatch[][][]{\n        { { new TermMatch(0, 0, 2) } },\n        { { new TermMatch(0, 0, 2) } },\n        { { new TermMatch(0, 0, 2) } },\n        { { new TermMatch(0, 0, 2) }, { new TermMatch(2, 6, 8) } },\n        {}\n    });\n    checkLabelCount(q, FIELD_WITH_OFFSETS, new int[]{ 1, 1, 1, 1, 0, 0 });\n  }\n\n","sourceOld":"  public void testTermQuery() throws IOException {\n    Query q = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w1\"));\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0, 0, 0, 0, 2 },\n        { 1, 0, 0, 0, 2 },\n        { 2, 0, 0, 0, 2 },\n        { 3, 0, 0, 0, 2, 2, 2, 6, 8 },\n        { 4 }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62ba8124694976baa3b03705351de238ec5d4352","date":1532295406,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testTermQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testTermQuery().mjava","sourceNew":"  public void testTermQuery() throws IOException {\n    Query q = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w1\"));\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0, 0, 0, 0, 2 },\n        { 1, 0, 0, 0, 2 },\n        { 2, 0, 0, 0, 2 },\n        { 3, 0, 0, 0, 2, 2, 2, 6, 8 },\n        { 4 }\n    });\n  }\n\n","sourceOld":"  public void testTermQuery() throws IOException {\n    Term t = new Term(FIELD_WITH_OFFSETS, \"w1\");\n    Query q = new TermQuery(t);\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0, 0, 0, 0, 2 },\n        { 1, 0, 0, 0, 2 },\n        { 2, 0, 0, 0, 2 },\n        { 3, 0, 0, 0, 2, 2, 2, 6, 8 },\n        { 4 }\n    });\n    checkTermMatches(q, FIELD_WITH_OFFSETS, new TermMatch[][][]{\n        { { new TermMatch(0, 0, 2) } },\n        { { new TermMatch(0, 0, 2) } },\n        { { new TermMatch(0, 0, 2) } },\n        { { new TermMatch(0, 0, 2) }, { new TermMatch(2, 6, 8) } },\n        {}\n    });\n    checkLabelCount(q, FIELD_WITH_OFFSETS, new int[]{ 1, 1, 1, 1, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ebc07bccf12a902ca6a0077910d18ee38b695f","date":1532336521,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testTermQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testTermQuery().mjava","sourceNew":"  public void testTermQuery() throws IOException {\n    Term t = new Term(FIELD_WITH_OFFSETS, \"w1\");\n    Query q = new TermQuery(t);\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0, 0, 0, 0, 2 },\n        { 1, 0, 0, 0, 2 },\n        { 2, 0, 0, 0, 2 },\n        { 3, 0, 0, 0, 2, 2, 2, 6, 8 },\n        { 4 }\n    });\n    checkLabelCount(q, FIELD_WITH_OFFSETS, new int[]{ 1, 1, 1, 1, 0, 0 });\n    assertIsLeafMatch(q, FIELD_WITH_OFFSETS);\n  }\n\n","sourceOld":"  public void testTermQuery() throws IOException {\n    Query q = new TermQuery(new Term(FIELD_WITH_OFFSETS, \"w1\"));\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0, 0, 0, 0, 2 },\n        { 1, 0, 0, 0, 2 },\n        { 2, 0, 0, 0, 2 },\n        { 3, 0, 0, 0, 2, 2, 2, 6, 8 },\n        { 4 }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69d70ba91a4999a5387559a9ad50e3cfe9cfd970","date":1565173681,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testTermQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testTermQuery().mjava","sourceNew":"  public void testTermQuery() throws IOException {\n    Term t = new Term(FIELD_WITH_OFFSETS, \"w1\");\n    Query q = NamedMatches.wrapQuery(\"q\", new TermQuery(t));\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0, 0, 0, 0, 2 },\n        { 1, 0, 0, 0, 2 },\n        { 2, 0, 0, 0, 2 },\n        { 3, 0, 0, 0, 2, 2, 2, 6, 8 },\n        { 4 }\n    });\n    checkLabelCount(q, FIELD_WITH_OFFSETS, new int[]{ 1, 1, 1, 1, 0, 0 });\n    assertIsLeafMatch(q, FIELD_WITH_OFFSETS);\n    checkSubMatches(q, new String[][]{ {\"q\"}, {\"q\"}, {\"q\"}, {\"q\"}, {}, {}});\n  }\n\n","sourceOld":"  public void testTermQuery() throws IOException {\n    Term t = new Term(FIELD_WITH_OFFSETS, \"w1\");\n    Query q = new TermQuery(t);\n    checkMatches(q, FIELD_WITH_OFFSETS, new int[][]{\n        { 0, 0, 0, 0, 2 },\n        { 1, 0, 0, 0, 2 },\n        { 2, 0, 0, 0, 2 },\n        { 3, 0, 0, 0, 2, 2, 2, 6, 8 },\n        { 4 }\n    });\n    checkLabelCount(q, FIELD_WITH_OFFSETS, new int[]{ 1, 1, 1, 1, 0, 0 });\n    assertIsLeafMatch(q, FIELD_WITH_OFFSETS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"165c3432cb3c4fcfc8e859af24323bbbd12084af":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"69d70ba91a4999a5387559a9ad50e3cfe9cfd970":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"62ba8124694976baa3b03705351de238ec5d4352":["165c3432cb3c4fcfc8e859af24323bbbd12084af"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","657704b225b01c6ff4bada5b6667f1f60aaaad0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["69d70ba91a4999a5387559a9ad50e3cfe9cfd970"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["62ba8124694976baa3b03705351de238ec5d4352"]},"commit2Childs":{"165c3432cb3c4fcfc8e859af24323bbbd12084af":["62ba8124694976baa3b03705351de238ec5d4352"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["657704b225b01c6ff4bada5b6667f1f60aaaad0f","43345f1452f9510f8aaadae6156fe0c834e7d957"],"69d70ba91a4999a5387559a9ad50e3cfe9cfd970":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["165c3432cb3c4fcfc8e859af24323bbbd12084af"],"62ba8124694976baa3b03705351de238ec5d4352":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["69d70ba91a4999a5387559a9ad50e3cfe9cfd970"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}