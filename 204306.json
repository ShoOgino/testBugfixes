{"path":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","sourceNew":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random, reader, term.field, term.bytes, null, null, false);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random, reader, term.field, term.bytes, null, null, false);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","sourceNew":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random(), reader, term.field, term.bytes, null, null, false);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random, reader, term.field, term.bytes, null, null, false);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","sourceNew":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = DirectoryReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random(), reader, term.field, term.bytes, null, null, false);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random(), reader, term.field, term.bytes, null, null, false);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","sourceNew":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = DirectoryReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random(), reader, term.field, term.bytes, null, null, 0);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = DirectoryReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random(), reader, term.field, term.bytes, null, null, false);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","sourceNew":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = DirectoryReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random(), reader, term.field, term.bytes, null, null, 0);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = DirectoryReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random(), reader, term.field, term.bytes, null, null, false);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","sourceNew":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = DirectoryReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random(), reader, term.field, term.bytes, null, null, 0);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = DirectoryReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random(), reader, term.field, term.bytes, null, null, false);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15250ca94ba8ab3bcdd476daf6bf3f3febb92640","date":1355200097,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","sourceNew":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = DirectoryReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random(), reader, term.field, term.bytes, null, null, DocsEnum.FLAG_NONE);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = DirectoryReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random(), reader, term.field, term.bytes, null, null, 0);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","sourceNew":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = DirectoryReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random(), reader, term.field, term.bytes, null, null, DocsEnum.FLAG_NONE);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = DirectoryReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random(), reader, term.field, term.bytes, null, null, 0);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","sourceNew":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = DirectoryReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random(), reader, term.field, term.bytes, null, null, DocsEnum.FLAG_NONE);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = DirectoryReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random(), reader, term.field, term.bytes, null, null, DocsEnum.FLAG_NONE);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","sourceNew":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = DirectoryReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random(), reader, term.field, term.bytes, null, null, DocsEnum.FLAG_NONE);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = DirectoryReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random(), reader, term.field, term.bytes, null, null, DocsEnum.FLAG_NONE);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","sourceNew":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = DirectoryReader.open(dir);\n    DocsEnum docsEnum = TestUtil.docs(random(), reader, term.field, term.bytes, null, null, DocsEnum.FLAG_NONE);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = DirectoryReader.open(dir);\n    DocsEnum docsEnum = _TestUtil.docs(random(), reader, term.field, term.bytes, null, null, DocsEnum.FLAG_NONE);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","sourceNew":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = DirectoryReader.open(dir);\n    PostingsEnum postingsEnum = TestUtil.docs(random(), reader, term.field, term.bytes, null, null, PostingsEnum.FLAG_NONE);\n    int count = 0;\n    while (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = DirectoryReader.open(dir);\n    DocsEnum docsEnum = TestUtil.docs(random(), reader, term.field, term.bytes, null, null, DocsEnum.FLAG_NONE);\n    int count = 0;\n    while (docsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","sourceNew":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = DirectoryReader.open(dir);\n    PostingsEnum postingsEnum = TestUtil.docs(random(), reader, term.field, term.bytes, null, null, PostingsEnum.NONE);\n    int count = 0;\n    while (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = DirectoryReader.open(dir);\n    PostingsEnum postingsEnum = TestUtil.docs(random(), reader, term.field, term.bytes, null, null, PostingsEnum.FLAG_NONE);\n    int count = 0;\n    while (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes#verifyTermDocs(Directory,Term,int).mjava","sourceNew":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = DirectoryReader.open(dir);\n    PostingsEnum postingsEnum = TestUtil.docs(random(), reader, term.field, term.bytes, null, PostingsEnum.NONE);\n    int count = 0;\n    while (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyTermDocs(Directory dir, Term term, int numDocs)\n      throws IOException {\n    IndexReader reader = DirectoryReader.open(dir);\n    PostingsEnum postingsEnum = TestUtil.docs(random(), reader, term.field, term.bytes, null, null, PostingsEnum.NONE);\n    int count = 0;\n    while (postingsEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS)\n      count++;\n    assertEquals(numDocs, count);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["02331260bb246364779cb6f04919ca47900d01bb","15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"6613659748fe4411a7dcf85266e55db1f95f7315":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"51f5280f31484820499077f41fcdfe92d527d9dc":["6613659748fe4411a7dcf85266e55db1f95f7315"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["02331260bb246364779cb6f04919ca47900d01bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","02331260bb246364779cb6f04919ca47900d01bb"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["15250ca94ba8ab3bcdd476daf6bf3f3febb92640"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","02331260bb246364779cb6f04919ca47900d01bb"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"02331260bb246364779cb6f04919ca47900d01bb":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["51f5280f31484820499077f41fcdfe92d527d9dc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"15250ca94ba8ab3bcdd476daf6bf3f3febb92640":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","19275ba31e621f6da1b83bf13af75233876fd3d4","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"02331260bb246364779cb6f04919ca47900d01bb":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15250ca94ba8ab3bcdd476daf6bf3f3febb92640","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}