{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest#testSparsePhrase().mjava","commits":[{"id":"fafd002a407d38098f1f0edf4365f971102ae0ef","date":1262804916,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest#testSparsePhrase().mjava","pathOld":"/dev/null","sourceNew":"  public void testSparsePhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = new RAMDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        new WhitespaceAnalyzer(), MaxFieldLength.UNLIMITED);\n    try {\n      final Document document = new Document();\n      document.add(new Field(FIELD, new TokenStreamSparse(),\n          TermVector.WITH_POSITIONS_OFFSETS));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n      try {\n        final PhraseQuery phraseQuery = new PhraseQuery();\n        phraseQuery.add(new Term(FIELD, \"did\"));\n        phraseQuery.add(new Term(FIELD, \"jump\"));\n        phraseQuery.setSlop(0);\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(0, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream((TermPositionVector) indexReader.getTermFreqVector(\n                0, FIELD), false);\n        assertEquals(\n            highlighter.getBestFragment(new TokenStreamSparse(), TEXT),\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6ced3401b9c4e7ed2be67711dbc83e48b81aa736","date":1265394056,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest#testSparsePhrase().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest#testSparsePhrase().mjava","sourceNew":"  public void testSparsePhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = new RAMDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        new WhitespaceAnalyzer(Version.LUCENE_CURRENT), MaxFieldLength.UNLIMITED);\n    try {\n      final Document document = new Document();\n      document.add(new Field(FIELD, new TokenStreamSparse(),\n          TermVector.WITH_POSITIONS_OFFSETS));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n      try {\n        final PhraseQuery phraseQuery = new PhraseQuery();\n        phraseQuery.add(new Term(FIELD, \"did\"));\n        phraseQuery.add(new Term(FIELD, \"jump\"));\n        phraseQuery.setSlop(0);\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(0, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream((TermPositionVector) indexReader.getTermFreqVector(\n                0, FIELD), false);\n        assertEquals(\n            highlighter.getBestFragment(new TokenStreamSparse(), TEXT),\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n    }\n  }\n\n","sourceOld":"  public void testSparsePhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = new RAMDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        new WhitespaceAnalyzer(), MaxFieldLength.UNLIMITED);\n    try {\n      final Document document = new Document();\n      document.add(new Field(FIELD, new TokenStreamSparse(),\n          TermVector.WITH_POSITIONS_OFFSETS));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n      try {\n        final PhraseQuery phraseQuery = new PhraseQuery();\n        phraseQuery.add(new Term(FIELD, \"did\"));\n        phraseQuery.add(new Term(FIELD, \"jump\"));\n        phraseQuery.setSlop(0);\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(0, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream((TermPositionVector) indexReader.getTermFreqVector(\n                0, FIELD), false);\n        assertEquals(\n            highlighter.getBestFragment(new TokenStreamSparse(), TEXT),\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest#testSparsePhrase().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest#testSparsePhrase().mjava","sourceNew":"  public void testSparsePhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = new RAMDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        new WhitespaceAnalyzer(TEST_VERSION_CURRENT), MaxFieldLength.UNLIMITED);\n    try {\n      final Document document = new Document();\n      document.add(new Field(FIELD, new TokenStreamSparse(),\n          TermVector.WITH_POSITIONS_OFFSETS));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n      try {\n        final PhraseQuery phraseQuery = new PhraseQuery();\n        phraseQuery.add(new Term(FIELD, \"did\"));\n        phraseQuery.add(new Term(FIELD, \"jump\"));\n        phraseQuery.setSlop(0);\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(0, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream((TermPositionVector) indexReader.getTermFreqVector(\n                0, FIELD), false);\n        assertEquals(\n            highlighter.getBestFragment(new TokenStreamSparse(), TEXT),\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n    }\n  }\n\n","sourceOld":"  public void testSparsePhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = new RAMDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        new WhitespaceAnalyzer(Version.LUCENE_CURRENT), MaxFieldLength.UNLIMITED);\n    try {\n      final Document document = new Document();\n      document.add(new Field(FIELD, new TokenStreamSparse(),\n          TermVector.WITH_POSITIONS_OFFSETS));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n      try {\n        final PhraseQuery phraseQuery = new PhraseQuery();\n        phraseQuery.add(new Term(FIELD, \"did\"));\n        phraseQuery.add(new Term(FIELD, \"jump\"));\n        phraseQuery.setSlop(0);\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(0, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream((TermPositionVector) indexReader.getTermFreqVector(\n                0, FIELD), false);\n        assertEquals(\n            highlighter.getBestFragment(new TokenStreamSparse(), TEXT),\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest#testSparsePhrase().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest#testSparsePhrase().mjava","sourceNew":"  public void testSparsePhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = new RAMDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        new IndexWriterConfig(TEST_VERSION_CURRENT));\n    try {\n      final Document document = new Document();\n      document.add(new Field(FIELD, new TokenStreamSparse(),\n          TermVector.WITH_POSITIONS_OFFSETS));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n      try {\n        final PhraseQuery phraseQuery = new PhraseQuery();\n        phraseQuery.add(new Term(FIELD, \"did\"));\n        phraseQuery.add(new Term(FIELD, \"jump\"));\n        phraseQuery.setSlop(0);\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(0, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream((TermPositionVector) indexReader.getTermFreqVector(\n                0, FIELD), false);\n        assertEquals(\n            highlighter.getBestFragment(new TokenStreamSparse(), TEXT),\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n    }\n  }\n\n","sourceOld":"  public void testSparsePhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = new RAMDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        new WhitespaceAnalyzer(TEST_VERSION_CURRENT), MaxFieldLength.UNLIMITED);\n    try {\n      final Document document = new Document();\n      document.add(new Field(FIELD, new TokenStreamSparse(),\n          TermVector.WITH_POSITIONS_OFFSETS));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n      try {\n        final PhraseQuery phraseQuery = new PhraseQuery();\n        phraseQuery.add(new Term(FIELD, \"did\"));\n        phraseQuery.add(new Term(FIELD, \"jump\"));\n        phraseQuery.setSlop(0);\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(0, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream((TermPositionVector) indexReader.getTermFreqVector(\n                0, FIELD), false);\n        assertEquals(\n            highlighter.getBestFragment(new TokenStreamSparse(), TEXT),\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest#testSparsePhrase().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest#testSparsePhrase().mjava","sourceNew":"  public void testSparsePhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = new RAMDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        new WhitespaceAnalyzer(TEST_VERSION_CURRENT), MaxFieldLength.UNLIMITED);\n    try {\n      final Document document = new Document();\n      document.add(new Field(FIELD, new TokenStreamSparse(),\n          TermVector.WITH_POSITIONS_OFFSETS));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n      try {\n        final PhraseQuery phraseQuery = new PhraseQuery();\n        phraseQuery.add(new Term(FIELD, \"did\"));\n        phraseQuery.add(new Term(FIELD, \"jump\"));\n        phraseQuery.setSlop(0);\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(0, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream((TermPositionVector) indexReader.getTermFreqVector(\n                0, FIELD), false);\n        assertEquals(\n            highlighter.getBestFragment(new TokenStreamSparse(), TEXT),\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n    }\n  }\n\n","sourceOld":"  public void testSparsePhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = new RAMDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        new IndexWriterConfig(TEST_VERSION_CURRENT));\n    try {\n      final Document document = new Document();\n      document.add(new Field(FIELD, new TokenStreamSparse(),\n          TermVector.WITH_POSITIONS_OFFSETS));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n      try {\n        final PhraseQuery phraseQuery = new PhraseQuery();\n        phraseQuery.add(new Term(FIELD, \"did\"));\n        phraseQuery.add(new Term(FIELD, \"jump\"));\n        phraseQuery.setSlop(0);\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(0, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream((TermPositionVector) indexReader.getTermFreqVector(\n                0, FIELD), false);\n        assertEquals(\n            highlighter.getBestFragment(new TokenStreamSparse(), TEXT),\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest#testSparsePhrase().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest#testSparsePhrase().mjava","sourceNew":"  public void testSparsePhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = new RAMDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    try {\n      final Document document = new Document();\n      document.add(new Field(FIELD, new TokenStreamSparse(),\n          TermVector.WITH_POSITIONS_OFFSETS));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n      try {\n        final PhraseQuery phraseQuery = new PhraseQuery();\n        phraseQuery.add(new Term(FIELD, \"did\"));\n        phraseQuery.add(new Term(FIELD, \"jump\"));\n        phraseQuery.setSlop(0);\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(0, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream((TermPositionVector) indexReader.getTermFreqVector(\n                0, FIELD), false);\n        assertEquals(\n            highlighter.getBestFragment(new TokenStreamSparse(), TEXT),\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n    }\n  }\n\n","sourceOld":"  public void testSparsePhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = new RAMDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        new WhitespaceAnalyzer(TEST_VERSION_CURRENT), MaxFieldLength.UNLIMITED);\n    try {\n      final Document document = new Document();\n      document.add(new Field(FIELD, new TokenStreamSparse(),\n          TermVector.WITH_POSITIONS_OFFSETS));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n      try {\n        final PhraseQuery phraseQuery = new PhraseQuery();\n        phraseQuery.add(new Term(FIELD, \"did\"));\n        phraseQuery.add(new Term(FIELD, \"jump\"));\n        phraseQuery.setSlop(0);\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(0, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream((TermPositionVector) indexReader.getTermFreqVector(\n                0, FIELD), false);\n        assertEquals(\n            highlighter.getBestFragment(new TokenStreamSparse(), TEXT),\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest#testSparsePhrase().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterPhraseTest#testSparsePhrase().mjava","sourceNew":"  public void testSparsePhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = new RAMDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    try {\n      final Document document = new Document();\n      document.add(new Field(FIELD, new TokenStreamSparse(),\n          TermVector.WITH_POSITIONS_OFFSETS));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n      try {\n        final PhraseQuery phraseQuery = new PhraseQuery();\n        phraseQuery.add(new Term(FIELD, \"did\"));\n        phraseQuery.add(new Term(FIELD, \"jump\"));\n        phraseQuery.setSlop(0);\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(0, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream((TermPositionVector) indexReader.getTermFreqVector(\n                0, FIELD), false);\n        assertEquals(\n            highlighter.getBestFragment(new TokenStreamSparse(), TEXT),\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n    }\n  }\n\n","sourceOld":"  public void testSparsePhrase() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InvalidTokenOffsetsException {\n    final String TEXT = \"the fox did not jump\";\n    final Directory directory = new RAMDirectory();\n    final IndexWriter indexWriter = new IndexWriter(directory,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    try {\n      final Document document = new Document();\n      document.add(new Field(FIELD, new TokenStreamSparse(),\n          TermVector.WITH_POSITIONS_OFFSETS));\n      indexWriter.addDocument(document);\n    } finally {\n      indexWriter.close();\n    }\n    final IndexReader indexReader = IndexReader.open(directory, true);\n    try {\n      assertEquals(1, indexReader.numDocs());\n      final IndexSearcher indexSearcher = new IndexSearcher(indexReader);\n      try {\n        final PhraseQuery phraseQuery = new PhraseQuery();\n        phraseQuery.add(new Term(FIELD, \"did\"));\n        phraseQuery.add(new Term(FIELD, \"jump\"));\n        phraseQuery.setSlop(0);\n        TopDocs hits = indexSearcher.search(phraseQuery, 1);\n        assertEquals(0, hits.totalHits);\n        final Highlighter highlighter = new Highlighter(\n            new SimpleHTMLFormatter(), new SimpleHTMLEncoder(),\n            new QueryScorer(phraseQuery));\n        final TokenStream tokenStream = TokenSources\n            .getTokenStream((TermPositionVector) indexReader.getTermFreqVector(\n                0, FIELD), false);\n        assertEquals(\n            highlighter.getBestFragment(new TokenStreamSparse(), TEXT),\n            highlighter.getBestFragment(tokenStream, TEXT));\n      } finally {\n        indexSearcher.close();\n      }\n    } finally {\n      indexReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fafd002a407d38098f1f0edf4365f971102ae0ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["fafd002a407d38098f1f0edf4365f971102ae0ef"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fafd002a407d38098f1f0edf4365f971102ae0ef":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fafd002a407d38098f1f0edf4365f971102ae0ef"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}