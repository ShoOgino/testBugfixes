{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertHits(int,String,IndexSearcher).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertHits(int,String,IndexSearcher).mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertHits(int,String,IndexSearcher).mjava","sourceNew":"  private void assertHits(int expected, String query, IndexSearcher is) throws ParseException, IOException {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"date\", new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    qp.setLocale(Locale.ENGLISH);\n    Query q = qp.parse(query);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(expected, hits.length);\n  }\n\n","sourceOld":"  private void assertHits(int expected, String query, IndexSearcher is) throws ParseException, IOException {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"date\", new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    qp.setLocale(Locale.ENGLISH);\n    Query q = qp.parse(query);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(expected, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee76d213d935c68932ca13b55fa0a8a32bf6af1a","date":1343572717,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertHits(int,String,IndexSearcher).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertHits(int,String,IndexSearcher).mjava","sourceNew":"  private void assertHits(int expected, String query, IndexSearcher is) throws Exception {\n    String oldDefaultField = getDefaultField();\n    setDefaultField(\"date\");\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    qp.setLocale(Locale.ENGLISH);\n    Query q = getQuery(query,qp);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(expected, hits.length);\n    setDefaultField( oldDefaultField );\n  }\n\n","sourceOld":"  private void assertHits(int expected, String query, IndexSearcher is) throws ParseException, IOException {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"date\", new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    qp.setLocale(Locale.ENGLISH);\n    Query q = qp.parse(query);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(expected, hits.length);\n  }\n\n","bugFix":["ce48e56956c287f0fdb295c2c2f5b7c68ae8798b","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertHits(int,String,IndexSearcher).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertHits(int,String,IndexSearcher).mjava","sourceNew":"  private void assertHits(int expected, String query, IndexSearcher is) throws Exception {\n    String oldDefaultField = getDefaultField();\n    setDefaultField(\"date\");\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    qp.setLocale(Locale.ENGLISH);\n    Query q = getQuery(query,qp);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(expected, hits.length);\n    setDefaultField( oldDefaultField );\n  }\n\n","sourceOld":"  private void assertHits(int expected, String query, IndexSearcher is) throws ParseException, IOException {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"date\", new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    qp.setLocale(Locale.ENGLISH);\n    Query q = qp.parse(query);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(expected, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertHits(int,String,IndexSearcher).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertHits(int,String,IndexSearcher).mjava","sourceNew":"  private void assertHits(int expected, String query, IndexSearcher is) throws Exception {\n    String oldDefaultField = getDefaultField();\n    setDefaultField(\"date\");\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    qp.setLocale(Locale.ENGLISH);\n    Query q = getQuery(query,qp);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(expected, hits.length);\n    setDefaultField( oldDefaultField );\n  }\n\n","sourceOld":"  private void assertHits(int expected, String query, IndexSearcher is) throws ParseException, IOException {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"date\", new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    qp.setLocale(Locale.ENGLISH);\n    Query q = qp.parse(query);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(expected, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"917ebe9ddaf53995b52117fefb375be692579d63","date":1390362584,"type":3,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertHits(int,String,IndexSearcher).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertHits(int,String,IndexSearcher).mjava","sourceNew":"  @SuppressWarnings(\"unused\")\n  private void assertHits(int expected, String query, IndexSearcher is) throws Exception {\n    String oldDefaultField = getDefaultField();\n    setDefaultField(\"date\");\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    qp.setLocale(Locale.ENGLISH);\n    Query q = getQuery(query,qp);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(expected, hits.length);\n    setDefaultField( oldDefaultField );\n  }\n\n","sourceOld":"  private void assertHits(int expected, String query, IndexSearcher is) throws Exception {\n    String oldDefaultField = getDefaultField();\n    setDefaultField(\"date\");\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    qp.setLocale(Locale.ENGLISH);\n    Query q = getQuery(query,qp);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(expected, hits.length);\n    setDefaultField( oldDefaultField );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertHits(int,String,IndexSearcher).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertHits(int,String,IndexSearcher).mjava","sourceNew":"  @SuppressWarnings(\"unused\")\n  private void assertHits(int expected, String query, IndexSearcher is) throws Exception {\n    String oldDefaultField = getDefaultField();\n    setDefaultField(\"date\");\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    qp.setLocale(Locale.ENGLISH);\n    Query q = getQuery(query,qp);\n    ScoreDoc[] hits = is.search(q, 1000).scoreDocs;\n    assertEquals(expected, hits.length);\n    setDefaultField( oldDefaultField );\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unused\")\n  private void assertHits(int expected, String query, IndexSearcher is) throws Exception {\n    String oldDefaultField = getDefaultField();\n    setDefaultField(\"date\");\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    qp.setLocale(Locale.ENGLISH);\n    Query q = getQuery(query,qp);\n    ScoreDoc[] hits = is.search(q, null, 1000).scoreDocs;\n    assertEquals(expected, hits.length);\n    setDefaultField( oldDefaultField );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["917ebe9ddaf53995b52117fefb375be692579d63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"917ebe9ddaf53995b52117fefb375be692579d63":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","917ebe9ddaf53995b52117fefb375be692579d63"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"917ebe9ddaf53995b52117fefb375be692579d63":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}