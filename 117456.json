{"path":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","pathOld":"src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","sourceNew":"    @Override\n    public synchronized IndexInput openInput(String id, int readBufferSize)\n    throws IOException\n    {\n        if (stream == null)\n            throw new IOException(\"Stream closed\");\n\n        FileEntry entry = entries.get(id);\n        if (entry == null)\n            throw new IOException(\"No sub-file with id \" + id + \" found\");\n\n        return new CSIndexInput(stream, entry.offset, entry.length, readBufferSize);\n    }\n\n","sourceOld":"    @Override\n    public synchronized IndexInput openInput(String id, int readBufferSize)\n    throws IOException\n    {\n        if (stream == null)\n            throw new IOException(\"Stream closed\");\n\n        FileEntry entry = entries.get(id);\n        if (entry == null)\n            throw new IOException(\"No sub-file with id \" + id + \" found\");\n\n        return new CSIndexInput(stream, entry.offset, entry.length, readBufferSize);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","sourceNew":"    @Override\n    public synchronized IndexInput openInput(String id, int readBufferSize)\n    throws IOException\n    {\n        if (stream == null)\n            throw new IOException(\"Stream closed\");\n        \n        id = IndexFileNames.stripSegmentName(id);\n        FileEntry entry = entries.get(id);\n        if (entry == null)\n            throw new IOException(\"No sub-file with id \" + id + \" found\");\n\n        return new CSIndexInput(stream, entry.offset, entry.length, readBufferSize);\n    }\n\n","sourceOld":"    @Override\n    public synchronized IndexInput openInput(String id, int readBufferSize)\n    throws IOException\n    {\n        if (stream == null)\n            throw new IOException(\"Stream closed\");\n\n        FileEntry entry = entries.get(id);\n        if (entry == null)\n            throw new IOException(\"No sub-file with id \" + id + \" found\");\n\n        return new CSIndexInput(stream, entry.offset, entry.length, readBufferSize);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","sourceNew":"    @Override\n    public synchronized IndexInput openInput(String id, int readBufferSize)\n    throws IOException\n    {\n        if (stream == null)\n            throw new IOException(\"Stream closed\");\n        \n        id = IndexFileNames.stripSegmentName(id);\n        final FileEntry entry = entries.get(id);\n        if (entry == null)\n            throw new IOException(\"No sub-file with id \" + id + \" found\");\n\n        return new CSIndexInput(stream, entry.offset, entry.length, readBufferSize);\n    }\n\n","sourceOld":"    @Override\n    public synchronized IndexInput openInput(String id, int readBufferSize)\n    throws IOException\n    {\n        if (stream == null)\n            throw new IOException(\"Stream closed\");\n        \n        id = IndexFileNames.stripSegmentName(id);\n        FileEntry entry = entries.get(id);\n        if (entry == null)\n            throw new IOException(\"No sub-file with id \" + id + \" found\");\n\n        return new CSIndexInput(stream, entry.offset, entry.length, readBufferSize);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","sourceNew":"    @Override\n    public synchronized IndexInput openInput(String id, int readBufferSize)\n    throws IOException\n    {\n        if (stream == null)\n            throw new IOException(\"Stream closed\");\n        \n        id = IndexFileNames.stripSegmentName(id);\n        FileEntry entry = entries.get(id);\n        if (entry == null)\n          throw new IOException(\"No sub-file with id \" + id + \" found (files: \" + entries.keySet() + \")\");\n\n        return new CSIndexInput(stream, entry.offset, entry.length, readBufferSize);\n    }\n\n","sourceOld":"    @Override\n    public synchronized IndexInput openInput(String id, int readBufferSize)\n    throws IOException\n    {\n        if (stream == null)\n            throw new IOException(\"Stream closed\");\n        \n        id = IndexFileNames.stripSegmentName(id);\n        FileEntry entry = entries.get(id);\n        if (entry == null)\n            throw new IOException(\"No sub-file with id \" + id + \" found\");\n\n        return new CSIndexInput(stream, entry.offset, entry.length, readBufferSize);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","sourceNew":"    @Override\n    public synchronized IndexInput openInput(String id, int readBufferSize)\n    throws IOException\n    {\n        if (stream == null)\n            throw new IOException(\"Stream closed\");\n        \n        id = IndexFileNames.stripSegmentName(id);\n        final FileEntry entry = entries.get(id);\n        if (entry == null)\n          throw new IOException(\"No sub-file with id \" + id + \" found (files: \" + entries.keySet() + \")\");\n\n        return new CSIndexInput(stream, entry.offset, entry.length, readBufferSize);\n    }\n\n","sourceOld":"    @Override\n    public synchronized IndexInput openInput(String id, int readBufferSize)\n    throws IOException\n    {\n        if (stream == null)\n            throw new IOException(\"Stream closed\");\n        \n        id = IndexFileNames.stripSegmentName(id);\n        final FileEntry entry = entries.get(id);\n        if (entry == null)\n            throw new IOException(\"No sub-file with id \" + id + \" found\");\n\n        return new CSIndexInput(stream, entry.offset, entry.length, readBufferSize);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","sourceNew":"    @Override\n    public synchronized IndexInput openInput(String id, int readBufferSize)\n    throws IOException\n    {\n        if (stream == null)\n            throw new IOException(\"Stream closed\");\n        \n        id = IndexFileNames.stripSegmentName(id);\n        FileEntry entry = entries.get(id);\n        if (entry == null)\n          throw new IOException(\"No sub-file with id \" + id + \" found (files: \" + entries.keySet() + \")\");\n\n        return new CSIndexInput(stream, entry.offset, entry.length, readBufferSize);\n    }\n\n","sourceOld":"    @Override\n    public synchronized IndexInput openInput(String id, int readBufferSize)\n    throws IOException\n    {\n        if (stream == null)\n            throw new IOException(\"Stream closed\");\n        \n        id = IndexFileNames.stripSegmentName(id);\n        FileEntry entry = entries.get(id);\n        if (entry == null)\n            throw new IOException(\"No sub-file with id \" + id + \" found\");\n\n        return new CSIndexInput(stream, entry.offset, entry.length, readBufferSize);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","sourceNew":"    @Override\n    public synchronized IndexInput openInput(String id, int readBufferSize)\n    throws IOException\n    {\n        if (stream == null)\n            throw new IOException(\"Stream closed\");\n        \n        id = IndexFileNames.stripSegmentName(id);\n        final FileEntry entry = entries.get(id);\n        if (entry == null)\n          throw new IOException(\"No sub-file with id \" + id + \" found (files: \" + entries.keySet() + \")\");\n\n        return new CSIndexInput(stream, entry.offset, entry.length, readBufferSize);\n    }\n\n","sourceOld":"    @Override\n    public synchronized IndexInput openInput(String id, int readBufferSize)\n    throws IOException\n    {\n        if (stream == null)\n            throw new IOException(\"Stream closed\");\n        \n        id = IndexFileNames.stripSegmentName(id);\n        FileEntry entry = entries.get(id);\n        if (entry == null)\n          throw new IOException(\"No sub-file with id \" + id + \" found (files: \" + entries.keySet() + \")\");\n\n        return new CSIndexInput(stream, entry.offset, entry.length, readBufferSize);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","sourceNew":"    @Override\n    public synchronized IndexInput openInput(String id, int readBufferSize)\n    throws IOException\n    {\n        if (stream == null)\n            throw new IOException(\"Stream closed\");\n        \n        id = IndexFileNames.stripSegmentName(id);\n        final FileEntry entry = entries.get(id);\n        if (entry == null)\n          throw new IOException(\"No sub-file with id \" + id + \" found (files: \" + entries.keySet() + \")\");\n\n        return new CSIndexInput(stream, entry.offset, entry.length, readBufferSize);\n    }\n\n","sourceOld":"    @Override\n    public synchronized IndexInput openInput(String id, int readBufferSize)\n    throws IOException\n    {\n        if (stream == null)\n            throw new IOException(\"Stream closed\");\n        \n        id = IndexFileNames.stripSegmentName(id);\n        FileEntry entry = entries.get(id);\n        if (entry == null)\n          throw new IOException(\"No sub-file with id \" + id + \" found (files: \" + entries.keySet() + \")\");\n\n        return new CSIndexInput(stream, entry.offset, entry.length, readBufferSize);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4162a1cda4082030c3dd849ade21f33fb5e6f09","date":1308020263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String id, int readBufferSize) throws IOException {\n    if (stream == null)\n      throw new IOException(\"Stream closed\");\n    \n    id = IndexFileNames.stripSegmentName(id);\n    final FileEntry entry = entries.get(id);\n    if (entry == null)\n      throw new IOException(\"No sub-file with id \" + id + \" found (files: \" + entries.keySet() + \")\");\n    \n    return new CSIndexInput(stream, entry.offset, entry.length, readBufferSize);\n  }\n\n","sourceOld":"    @Override\n    public synchronized IndexInput openInput(String id, int readBufferSize)\n    throws IOException\n    {\n        if (stream == null)\n            throw new IOException(\"Stream closed\");\n        \n        id = IndexFileNames.stripSegmentName(id);\n        final FileEntry entry = entries.get(id);\n        if (entry == null)\n          throw new IOException(\"No sub-file with id \" + id + \" found (files: \" + entries.keySet() + \")\");\n\n        return new CSIndexInput(stream, entry.offset, entry.length, readBufferSize);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String id, int readBufferSize) throws IOException {\n    if (stream == null)\n      throw new IOException(\"Stream closed\");\n    \n    id = IndexFileNames.stripSegmentName(id);\n    final FileEntry entry = entries.get(id);\n    if (entry == null)\n      throw new IOException(\"No sub-file with id \" + id + \" found (files: \" + entries.keySet() + \")\");\n    \n    return new CSIndexInput(stream, entry.offset, entry.length, readBufferSize);\n  }\n\n","sourceOld":"    @Override\n    public synchronized IndexInput openInput(String id, int readBufferSize)\n    throws IOException\n    {\n        if (stream == null)\n            throw new IOException(\"Stream closed\");\n        \n        id = IndexFileNames.stripSegmentName(id);\n        final FileEntry entry = entries.get(id);\n        if (entry == null)\n          throw new IOException(\"No sub-file with id \" + id + \" found (files: \" + entries.keySet() + \")\");\n\n        return new CSIndexInput(stream, entry.offset, entry.length, readBufferSize);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String id, IOContext context) throws IOException {\n    if (stream == null)\n      throw new IOException(\"Stream closed\");\n    \n    id = IndexFileNames.stripSegmentName(id);\n    final FileEntry entry = entries.get(id);\n    if (entry == null)\n      throw new IOException(\"No sub-file with id \" + id + \" found (files: \" + entries.keySet() + \")\");\n    // nocommit set read buffer size based on IOContext\n    return new CSIndexInput(stream, entry.offset, entry.length, BufferedIndexInput.BUFFER_SIZE);\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String id, int readBufferSize) throws IOException {\n    if (stream == null)\n      throw new IOException(\"Stream closed\");\n    \n    id = IndexFileNames.stripSegmentName(id);\n    final FileEntry entry = entries.get(id);\n    if (entry == null)\n      throw new IOException(\"No sub-file with id \" + id + \" found (files: \" + entries.keySet() + \")\");\n    \n    return new CSIndexInput(stream, entry.offset, entry.length, readBufferSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0aab6e810b4b0d3743d6a048be0602801f4b3920","date":1308671625,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#openInput(String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String id, int readBufferSize) throws IOException {\n    ensureOpen();\n    assert !openForWrite;\n    id = IndexFileNames.stripSegmentName(id);\n    final FileEntry entry = entries.get(id);\n    if (entry == null)\n      throw new IOException(\"No sub-file with id \" + id + \" found (files: \" + entries.keySet() + \")\");\n    \n    return openInputSlice(id, entry.offset, entry.length, readBufferSize);\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String id, int readBufferSize) throws IOException {\n    if (stream == null)\n      throw new IOException(\"Stream closed\");\n    \n    id = IndexFileNames.stripSegmentName(id);\n    final FileEntry entry = entries.get(id);\n    if (entry == null)\n      throw new IOException(\"No sub-file with id \" + id + \" found (files: \" + entries.keySet() + \")\");\n    \n    return new CSIndexInput(stream, entry.offset, entry.length, readBufferSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#openInput(String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#openInput(String,int).mjava","sourceNew":"  @Override\n  public synchronized IndexInput openInput(String id, int readBufferSize) throws IOException {\n    ensureOpen();\n    assert !openForWrite;\n    id = IndexFileNames.stripSegmentName(id);\n    final FileEntry entry = entries.get(id);\n    if (entry == null)\n      throw new IOException(\"No sub-file with id \" + id + \" found (files: \" + entries.keySet() + \")\");\n    \n    return openInputSlice(id, entry.offset, entry.length, readBufferSize);\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexInput openInput(String id, int readBufferSize) throws IOException {\n    if (stream == null)\n      throw new IOException(\"Stream closed\");\n    \n    id = IndexFileNames.stripSegmentName(id);\n    final FileEntry entry = entries.get(id);\n    if (entry == null)\n      throw new IOException(\"No sub-file with id \" + id + \" found (files: \" + entries.keySet() + \")\");\n    \n    return new CSIndexInput(stream, entry.offset, entry.length, readBufferSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","2e8d7ba2175f47e280231533f7d3016249cea88b"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"f4162a1cda4082030c3dd849ade21f33fb5e6f09":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["f4162a1cda4082030c3dd849ade21f33fb5e6f09"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["01f60198ece724a6e96cd0b45f289cf42ff83d4f","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["f4162a1cda4082030c3dd849ade21f33fb5e6f09"],"2553b00f699380c64959ccb27991289aae87be2e":["9ed208afa1e7aa98899ddb1dedfddedddf898253","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","f4162a1cda4082030c3dd849ade21f33fb5e6f09"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0aab6e810b4b0d3743d6a048be0602801f4b3920"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["9ed208afa1e7aa98899ddb1dedfddedddf898253"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2e8d7ba2175f47e280231533f7d3016249cea88b"],"f4162a1cda4082030c3dd849ade21f33fb5e6f09":["0aab6e810b4b0d3743d6a048be0602801f4b3920","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["2553b00f699380c64959ccb27991289aae87be2e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":[],"2553b00f699380c64959ccb27991289aae87be2e":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["2553b00f699380c64959ccb27991289aae87be2e"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","f4162a1cda4082030c3dd849ade21f33fb5e6f09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}