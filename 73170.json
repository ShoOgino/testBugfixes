{"path":"lucene/core/src/java/org/apache/lucene/index/IndexFileNames#stripSegmentName(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileNames#stripSegmentName(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileNames#stripSegmentName(String).mjava","sourceNew":"  /**\n   * Strips the segment name out of the given file name. If you used\n   * {@link #segmentFileName} or {@link #fileNameFromGeneration} to create your\n   * files, then this method simply removes whatever comes before the first '.',\n   * or the second '_' (excluding both).\n   * \n   * @return the filename with the segment name removed, or the given filename\n   *         if it does not contain a '.' and '_'.\n   */\n  public static String stripSegmentName(String filename) {\n    // If it is a .del file, there's an '_' after the first character\n    int idx = filename.indexOf('_', 1);\n    if (idx == -1) {\n      // If it's not, strip everything that's before the '.'\n      idx = filename.indexOf('.');\n    }\n    if (idx != -1) {\n      filename = filename.substring(idx);\n    }\n    return filename;\n  }\n\n","sourceOld":"  /**\n   * Strips the segment name out of the given file name. If you used\n   * {@link #segmentFileName} or {@link #fileNameFromGeneration} to create your\n   * files, then this method simply removes whatever comes before the first '.',\n   * or the second '_' (excluding both).\n   * \n   * @return the filename with the segment name removed, or the given filename\n   *         if it does not contain a '.' and '_'.\n   */\n  public static String stripSegmentName(String filename) {\n    // If it is a .del file, there's an '_' after the first character\n    int idx = filename.indexOf('_', 1);\n    if (idx == -1) {\n      // If it's not, strip everything that's before the '.'\n      idx = filename.indexOf('.');\n    }\n    if (idx != -1) {\n      filename = filename.substring(idx);\n    }\n    return filename;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03288de96c3666aa5583cc4dce079f6894fb3b31","date":1339438313,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileNames#stripSegmentName(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileNames#stripSegmentName(String).mjava","sourceNew":"  /**\n   * Strips the segment name out of the given file name. If you used\n   * {@link #segmentFileName} or {@link #fileNameFromGeneration} to create your\n   * files, then this method simply removes whatever comes before the first '.',\n   * or the second '_' (excluding both).\n   * \n   * @return the filename with the segment name removed, or the given filename\n   *         if it does not contain a '.' and '_'.\n   */\n  public static String stripSegmentName(String filename) {\n    int idx = indexOfSegmentName(filename);\n    if (idx != -1) {\n      filename = filename.substring(idx);\n    }\n    return filename;\n  }\n\n","sourceOld":"  /**\n   * Strips the segment name out of the given file name. If you used\n   * {@link #segmentFileName} or {@link #fileNameFromGeneration} to create your\n   * files, then this method simply removes whatever comes before the first '.',\n   * or the second '_' (excluding both).\n   * \n   * @return the filename with the segment name removed, or the given filename\n   *         if it does not contain a '.' and '_'.\n   */\n  public static String stripSegmentName(String filename) {\n    // If it is a .del file, there's an '_' after the first character\n    int idx = filename.indexOf('_', 1);\n    if (idx == -1) {\n      // If it's not, strip everything that's before the '.'\n      idx = filename.indexOf('.');\n    }\n    if (idx != -1) {\n      filename = filename.substring(idx);\n    }\n    return filename;\n  }\n\n","bugFix":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03288de96c3666aa5583cc4dce079f6894fb3b31":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03288de96c3666aa5583cc4dce079f6894fb3b31"]},"commit2Childs":{"03288de96c3666aa5583cc4dce079f6894fb3b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["03288de96c3666aa5583cc4dce079f6894fb3b31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}