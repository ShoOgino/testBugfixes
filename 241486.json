{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRandom().mjava","commits":[{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRandom().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = _TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = getTaxonomyFacetCounts(tr, config, fc);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Integer>[] expectedCounts = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedCounts[i] = new HashMap<String,Integer>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Integer v = expectedCounts[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedCounts[j].put(doc.dims[j], 1);\n              } else {\n                expectedCounts[j].put(doc.dims[j], v.intValue() + 1);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<FacetResult>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<LabelAndValue>();\n        int totCount = 0;\n        for(Map.Entry<String,Integer> ent : expectedCounts[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totCount += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totCount > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totCount, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      assertEquals(expected, actual);\n    }\n\n    IOUtils.close(w, tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = _TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      TopDocs hits = FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = getTaxonomyFacetCounts(tr, config, fc);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Integer>[] expectedCounts = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedCounts[i] = new HashMap<String,Integer>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Integer v = expectedCounts[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedCounts[j].put(doc.dims[j], 1);\n              } else {\n                expectedCounts[j].put(doc.dims[j], v.intValue() + 1);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<FacetResult>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<LabelAndValue>();\n        int totCount = 0;\n        for(Map.Entry<String,Integer> ent : expectedCounts[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totCount += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totCount > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totCount, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      assertEquals(expected, actual);\n    }\n\n    IOUtils.close(w, tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = _TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = getTaxonomyFacetCounts(tr, config, fc);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Integer>[] expectedCounts = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedCounts[i] = new HashMap<String,Integer>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Integer v = expectedCounts[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedCounts[j].put(doc.dims[j], 1);\n              } else {\n                expectedCounts[j].put(doc.dims[j], v.intValue() + 1);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<FacetResult>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<LabelAndValue>();\n        int totCount = 0;\n        for(Map.Entry<String,Integer> ent : expectedCounts[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totCount += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totCount > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totCount, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      assertEquals(expected, actual);\n    }\n\n    IOUtils.close(w, tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRandom().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = getTaxonomyFacetCounts(tr, config, fc);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Integer>[] expectedCounts = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedCounts[i] = new HashMap<String,Integer>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Integer v = expectedCounts[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedCounts[j].put(doc.dims[j], 1);\n              } else {\n                expectedCounts[j].put(doc.dims[j], v.intValue() + 1);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<FacetResult>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<LabelAndValue>();\n        int totCount = 0;\n        for(Map.Entry<String,Integer> ent : expectedCounts[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totCount += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totCount > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totCount, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      assertEquals(expected, actual);\n    }\n\n    IOUtils.close(w, tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = _TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = getTaxonomyFacetCounts(tr, config, fc);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Integer>[] expectedCounts = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedCounts[i] = new HashMap<String,Integer>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Integer v = expectedCounts[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedCounts[j].put(doc.dims[j], 1);\n              } else {\n                expectedCounts[j].put(doc.dims[j], v.intValue() + 1);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<FacetResult>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<LabelAndValue>();\n        int totCount = 0;\n        for(Map.Entry<String,Integer> ent : expectedCounts[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totCount += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totCount > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totCount, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      assertEquals(expected, actual);\n    }\n\n    IOUtils.close(w, tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRandom().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = getTaxonomyFacetCounts(tr, config, fc);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Integer>[] expectedCounts = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedCounts[i] = new HashMap<>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Integer v = expectedCounts[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedCounts[j].put(doc.dims[j], 1);\n              } else {\n                expectedCounts[j].put(doc.dims[j], v.intValue() + 1);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<>();\n        int totCount = 0;\n        for(Map.Entry<String,Integer> ent : expectedCounts[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totCount += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totCount > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totCount, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      assertEquals(expected, actual);\n    }\n\n    IOUtils.close(w, tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = getTaxonomyFacetCounts(tr, config, fc);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Integer>[] expectedCounts = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedCounts[i] = new HashMap<String,Integer>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Integer v = expectedCounts[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedCounts[j].put(doc.dims[j], 1);\n              } else {\n                expectedCounts[j].put(doc.dims[j], v.intValue() + 1);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<FacetResult>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<LabelAndValue>();\n        int totCount = 0;\n        for(Map.Entry<String,Integer> ent : expectedCounts[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totCount += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totCount > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totCount, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      assertEquals(expected, actual);\n    }\n\n    IOUtils.close(w, tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRandom().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = getTaxonomyFacetCounts(tr, config, fc);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Integer>[] expectedCounts = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedCounts[i] = new HashMap<>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Integer v = expectedCounts[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedCounts[j].put(doc.dims[j], 1);\n              } else {\n                expectedCounts[j].put(doc.dims[j], v.intValue() + 1);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<>();\n        int totCount = 0;\n        for(Map.Entry<String,Integer> ent : expectedCounts[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totCount += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totCount > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totCount, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      assertEquals(expected, actual);\n    }\n\n    w.shutdown();\n    IOUtils.close(tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = getTaxonomyFacetCounts(tr, config, fc);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Integer>[] expectedCounts = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedCounts[i] = new HashMap<>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Integer v = expectedCounts[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedCounts[j].put(doc.dims[j], 1);\n              } else {\n                expectedCounts[j].put(doc.dims[j], v.intValue() + 1);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<>();\n        int totCount = 0;\n        for(Map.Entry<String,Integer> ent : expectedCounts[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totCount += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totCount > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totCount, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      assertEquals(expected, actual);\n    }\n\n    IOUtils.close(w, tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRandom().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = getTaxonomyFacetCounts(tr, config, fc);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Integer>[] expectedCounts = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedCounts[i] = new HashMap<>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Integer v = expectedCounts[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedCounts[j].put(doc.dims[j], 1);\n              } else {\n                expectedCounts[j].put(doc.dims[j], v.intValue() + 1);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<>();\n        int totCount = 0;\n        for(Map.Entry<String,Integer> ent : expectedCounts[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totCount += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totCount > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totCount, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      assertEquals(expected, actual);\n    }\n\n    w.close();\n    IOUtils.close(tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = getTaxonomyFacetCounts(tr, config, fc);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Integer>[] expectedCounts = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedCounts[i] = new HashMap<>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Integer v = expectedCounts[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedCounts[j].put(doc.dims[j], 1);\n              } else {\n                expectedCounts[j].put(doc.dims[j], v.intValue() + 1);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<>();\n        int totCount = 0;\n        for(Map.Entry<String,Integer> ent : expectedCounts[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totCount += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totCount > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totCount, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      assertEquals(expected, actual);\n    }\n\n    w.shutdown();\n    IOUtils.close(tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b0ae449d456c3d95466275e466ca402ce36f52b","date":1601304937,"type":3,"author":"goankur","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRandom().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = getTaxonomyFacetCounts(tr, config, fc);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Integer>[] expectedCounts = new HashMap[numDims];\n      List<List<FacetLabel>> expectedLabels = new ArrayList<>();\n\n      for(int i=0;i<numDims;i++) {\n        expectedCounts[i] = new HashMap<>();\n      }\n\n      for (TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          List<FacetLabel> facetLabels = new ArrayList<>();\n          for (int j = 0; j < numDims; j++) {\n            if (doc.dims[j] != null) {\n              Integer v = expectedCounts[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedCounts[j].put(doc.dims[j], 1);\n              } else {\n                expectedCounts[j].put(doc.dims[j], v.intValue() + 1);\n              }\n\n              // Add document facet labels\n              facetLabels.add(new FacetLabel(\"dim\" + j, doc.dims[j]));\n            }\n          }\n          expectedLabels.add(facetLabels);\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<>();\n        int totCount = 0;\n        for(Map.Entry<String,Integer> ent : expectedCounts[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totCount += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totCount > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totCount, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Test facet labels for each matching test doc\n      List<List<FacetLabel>> actualLabels = getAllTaxonomyFacetLabels(tr, fc);\n      assertEquals(expectedLabels.size(), actualLabels.size());\n      assertTrue(sortedFacetLabels(expectedLabels).equals(sortedFacetLabels(actualLabels)));\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      assertEquals(expected, actual);\n    }\n\n    w.close();\n    IOUtils.close(tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = getTaxonomyFacetCounts(tr, config, fc);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Integer>[] expectedCounts = new HashMap[numDims];\n      for(int i=0;i<numDims;i++) {\n        expectedCounts[i] = new HashMap<>();\n      }\n\n      for(TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          for(int j=0;j<numDims;j++) {\n            if (doc.dims[j] != null) {\n              Integer v = expectedCounts[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedCounts[j].put(doc.dims[j], 1);\n              } else {\n                expectedCounts[j].put(doc.dims[j], v.intValue() + 1);\n              }\n            }\n          }\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<>();\n        int totCount = 0;\n        for(Map.Entry<String,Integer> ent : expectedCounts[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totCount += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totCount > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totCount, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      assertEquals(expected, actual);\n    }\n\n    w.close();\n    IOUtils.close(tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd0530170c04ef91ee4e20f01089697adb70a98d","date":1601486478,"type":3,"author":"goankur","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRandom().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyFacetCounts#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = getTaxonomyFacetCounts(tr, config, fc);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Integer>[] expectedCounts = new HashMap[numDims];\n      List<List<FacetLabel>> expectedLabels = new ArrayList<>();\n\n      for(int i=0;i<numDims;i++) {\n        expectedCounts[i] = new HashMap<>();\n      }\n\n      for (TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          List<FacetLabel> facetLabels = new ArrayList<>();\n          for (int j = 0; j < numDims; j++) {\n            if (doc.dims[j] != null) {\n              Integer v = expectedCounts[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedCounts[j].put(doc.dims[j], 1);\n              } else {\n                expectedCounts[j].put(doc.dims[j], v.intValue() + 1);\n              }\n              // Add document facet labels\n              facetLabels.add(new FacetLabel(\"dim\" + j, doc.dims[j]));\n            }\n          }\n          expectedLabels.add(facetLabels);\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<>();\n        int totCount = 0;\n        for(Map.Entry<String,Integer> ent : expectedCounts[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totCount += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totCount > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totCount, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      assertEquals(expected, actual);\n\n      // Test facet labels for each matching test doc\n      List<List<FacetLabel>> actualLabels = getAllTaxonomyFacetLabels(null, tr, fc);\n      assertEquals(expectedLabels.size(), actualLabels.size());\n      assertTrue(sortedFacetLabels(expectedLabels).equals(sortedFacetLabels(actualLabels)));\n\n      // Test facet labels for each matching test doc, given a specific dimension chosen randomly\n      final String dimension = \"dim\" + random().nextInt(numDims);\n      expectedLabels.forEach(list -> list.removeIf(f -> f.components[0].equals(dimension) == false));\n\n      actualLabels = getAllTaxonomyFacetLabels(dimension, tr, fc);\n      assertTrue(sortedFacetLabels(expectedLabels).equals(sortedFacetLabels(actualLabels)));\n    }\n\n    w.close();\n    IOUtils.close(tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    String[] tokens = getRandomTokens(10);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), indexDir);\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\n    FacetsConfig config = new FacetsConfig();\n    int numDocs = atLeast(1000);\n    int numDims = TestUtil.nextInt(random(), 1, 7);\n    List<TestDoc> testDocs = getRandomDocs(tokens, numDocs, numDims);\n    for(TestDoc testDoc : testDocs) {\n      Document doc = new Document();\n      doc.add(newStringField(\"content\", testDoc.content, Field.Store.NO));\n      for(int j=0;j<numDims;j++) {\n        if (testDoc.dims[j] != null) {\n          doc.add(new FacetField(\"dim\" + j, testDoc.dims[j]));\n        }\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(w.getReader());\n    \n    // NRT open\n    TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    int iters = atLeast(100);\n    for(int iter=0;iter<iters;iter++) {\n      String searchToken = tokens[random().nextInt(tokens.length)];\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter content=\" + searchToken);\n      }\n      FacetsCollector fc = new FacetsCollector();\n      FacetsCollector.search(searcher, new TermQuery(new Term(\"content\", searchToken)), 10, fc);\n      Facets facets = getTaxonomyFacetCounts(tr, config, fc);\n\n      // Slow, yet hopefully bug-free, faceting:\n      @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Map<String,Integer>[] expectedCounts = new HashMap[numDims];\n      List<List<FacetLabel>> expectedLabels = new ArrayList<>();\n\n      for(int i=0;i<numDims;i++) {\n        expectedCounts[i] = new HashMap<>();\n      }\n\n      for (TestDoc doc : testDocs) {\n        if (doc.content.equals(searchToken)) {\n          List<FacetLabel> facetLabels = new ArrayList<>();\n          for (int j = 0; j < numDims; j++) {\n            if (doc.dims[j] != null) {\n              Integer v = expectedCounts[j].get(doc.dims[j]);\n              if (v == null) {\n                expectedCounts[j].put(doc.dims[j], 1);\n              } else {\n                expectedCounts[j].put(doc.dims[j], v.intValue() + 1);\n              }\n\n              // Add document facet labels\n              facetLabels.add(new FacetLabel(\"dim\" + j, doc.dims[j]));\n            }\n          }\n          expectedLabels.add(facetLabels);\n        }\n      }\n\n      List<FacetResult> expected = new ArrayList<>();\n      for(int i=0;i<numDims;i++) {\n        List<LabelAndValue> labelValues = new ArrayList<>();\n        int totCount = 0;\n        for(Map.Entry<String,Integer> ent : expectedCounts[i].entrySet()) {\n          labelValues.add(new LabelAndValue(ent.getKey(), ent.getValue()));\n          totCount += ent.getValue();\n        }\n        sortLabelValues(labelValues);\n        if (totCount > 0) {\n          expected.add(new FacetResult(\"dim\" + i, new String[0], totCount, labelValues.toArray(new LabelAndValue[labelValues.size()]), labelValues.size()));\n        }\n      }\n\n      // Test facet labels for each matching test doc\n      List<List<FacetLabel>> actualLabels = getAllTaxonomyFacetLabels(tr, fc);\n      assertEquals(expectedLabels.size(), actualLabels.size());\n      assertTrue(sortedFacetLabels(expectedLabels).equals(sortedFacetLabels(actualLabels)));\n\n      // Sort by highest value, tie break by value:\n      sortFacetResults(expected);\n\n      List<FacetResult> actual = facets.getAllDims(10);\n\n      // Messy: fixup ties\n      sortTies(actual);\n\n      assertEquals(expected, actual);\n    }\n\n    w.close();\n    IOUtils.close(tw, searcher.getIndexReader(), tr, indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4edc984f0f4ac77c37e48ace2932f780f888453c"],"bd0530170c04ef91ee4e20f01089697adb70a98d":["2b0ae449d456c3d95466275e466ca402ce36f52b"],"2b0ae449d456c3d95466275e466ca402ce36f52b":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd0530170c04ef91ee4e20f01089697adb70a98d"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4edc984f0f4ac77c37e48ace2932f780f888453c","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["2b0ae449d456c3d95466275e466ca402ce36f52b"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["6613659748fe4411a7dcf85266e55db1f95f7315"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"bd0530170c04ef91ee4e20f01089697adb70a98d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2b0ae449d456c3d95466275e466ca402ce36f52b":["bd0530170c04ef91ee4e20f01089697adb70a98d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}