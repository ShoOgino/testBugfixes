{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#uniqueValueSets(Iterable[Number],Iterable[Number]).mjava","commits":[{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":2,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#uniqueValueSets(Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesConsumer#uniqueValueSets(Iterable[Number],Iterable[Number]).mjava","sourceNew":"  private SortedSet<LongsRef> uniqueValueSets(Iterable<Number> docToValueCount, Iterable<Number> values) {\n    Set<LongsRef> uniqueValueSet = new HashSet<>();\n    LongsRef docValues = new LongsRef(256);\n\n    Iterator<Number> valueCountIterator = docToValueCount.iterator();\n    Iterator<Number> valueIterator = values.iterator();\n    int totalDictSize = 0;\n    while (valueCountIterator.hasNext()) {\n      docValues.length = valueCountIterator.next().intValue();\n      if (docValues.length > 256) {\n        return null;\n      }\n      for (int i = 0; i < docValues.length; ++i) {\n        docValues.longs[i] = valueIterator.next().longValue();\n      }\n      if (uniqueValueSet.contains(docValues)) {\n        continue;\n      }\n      totalDictSize += docValues.length;\n      if (totalDictSize > 256) {\n        return null;\n      }\n      uniqueValueSet.add(new LongsRef(Arrays.copyOf(docValues.longs, docValues.length), 0, docValues.length));\n    }\n    assert valueIterator.hasNext() == false;\n    return new TreeSet<>(uniqueValueSet);\n  }\n\n","sourceOld":"  private SortedSet<LongsRef> uniqueValueSets(Iterable<Number> docToValueCount, Iterable<Number> values) {\n    Set<LongsRef> uniqueValueSet = new HashSet<>();\n    LongsRef docValues = new LongsRef(256);\n\n    Iterator<Number> valueCountIterator = docToValueCount.iterator();\n    Iterator<Number> valueIterator = values.iterator();\n    int totalDictSize = 0;\n    while (valueCountIterator.hasNext()) {\n      docValues.length = valueCountIterator.next().intValue();\n      if (docValues.length > 256) {\n        return null;\n      }\n      for (int i = 0; i < docValues.length; ++i) {\n        docValues.longs[i] = valueIterator.next().longValue();\n      }\n      if (uniqueValueSet.contains(docValues)) {\n        continue;\n      }\n      totalDictSize += docValues.length;\n      if (totalDictSize > 256) {\n        return null;\n      }\n      uniqueValueSet.add(new LongsRef(Arrays.copyOf(docValues.longs, docValues.length), 0, docValues.length));\n    }\n    assert valueIterator.hasNext() == false;\n    return new TreeSet<>(uniqueValueSet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#uniqueValueSets(Iterable[Number],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#uniqueValueSets(Iterable[Number],Iterable[Number]).mjava","sourceNew":"  private SortedSet<LongsRef> uniqueValueSets(Iterable<Number> docToValueCount, Iterable<Number> values) {\n    Set<LongsRef> uniqueValueSet = new HashSet<>();\n    LongsRef docValues = new LongsRef(256);\n\n    Iterator<Number> valueCountIterator = docToValueCount.iterator();\n    Iterator<Number> valueIterator = values.iterator();\n    int totalDictSize = 0;\n    while (valueCountIterator.hasNext()) {\n      docValues.length = valueCountIterator.next().intValue();\n      if (docValues.length > 256) {\n        return null;\n      }\n      for (int i = 0; i < docValues.length; ++i) {\n        docValues.longs[i] = valueIterator.next().longValue();\n      }\n      if (uniqueValueSet.contains(docValues)) {\n        continue;\n      }\n      totalDictSize += docValues.length;\n      if (totalDictSize > 256) {\n        return null;\n      }\n      uniqueValueSet.add(new LongsRef(Arrays.copyOf(docValues.longs, docValues.length), 0, docValues.length));\n    }\n    assert valueIterator.hasNext() == false;\n    return new TreeSet<>(uniqueValueSet);\n  }\n\n","sourceOld":"  private SortedSet<LongsRef> uniqueValueSets(Iterable<Number> docToValueCount, Iterable<Number> values) {\n    Set<LongsRef> uniqueValueSet = new HashSet<>();\n    LongsRef docValues = new LongsRef(256);\n\n    Iterator<Number> valueCountIterator = docToValueCount.iterator();\n    Iterator<Number> valueIterator = values.iterator();\n    int totalDictSize = 0;\n    while (valueCountIterator.hasNext()) {\n      docValues.length = valueCountIterator.next().intValue();\n      if (docValues.length > 256) {\n        return null;\n      }\n      for (int i = 0; i < docValues.length; ++i) {\n        docValues.longs[i] = valueIterator.next().longValue();\n      }\n      if (uniqueValueSet.contains(docValues)) {\n        continue;\n      }\n      totalDictSize += docValues.length;\n      if (totalDictSize > 256) {\n        return null;\n      }\n      uniqueValueSet.add(new LongsRef(Arrays.copyOf(docValues.longs, docValues.length), 0, docValues.length));\n    }\n    assert valueIterator.hasNext() == false;\n    return new TreeSet<>(uniqueValueSet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesConsumer#uniqueValueSets(Iterable[Number],Iterable[Number]).mjava","sourceNew":null,"sourceOld":"  private SortedSet<LongsRef> uniqueValueSets(Iterable<Number> docToValueCount, Iterable<Number> values) {\n    Set<LongsRef> uniqueValueSet = new HashSet<>();\n    LongsRef docValues = new LongsRef(256);\n\n    Iterator<Number> valueCountIterator = docToValueCount.iterator();\n    Iterator<Number> valueIterator = values.iterator();\n    int totalDictSize = 0;\n    while (valueCountIterator.hasNext()) {\n      docValues.length = valueCountIterator.next().intValue();\n      if (docValues.length > 256) {\n        return null;\n      }\n      for (int i = 0; i < docValues.length; ++i) {\n        docValues.longs[i] = valueIterator.next().longValue();\n      }\n      if (uniqueValueSet.contains(docValues)) {\n        continue;\n      }\n      totalDictSize += docValues.length;\n      if (totalDictSize > 256) {\n        return null;\n      }\n      uniqueValueSet.add(new LongsRef(Arrays.copyOf(docValues.longs, docValues.length), 0, docValues.length));\n    }\n    assert valueIterator.hasNext() == false;\n    return new TreeSet<>(uniqueValueSet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["a870f9917149dc600c4ad4417d615c1795de5864"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a870f9917149dc600c4ad4417d615c1795de5864":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a870f9917149dc600c4ad4417d615c1795de5864","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a870f9917149dc600c4ad4417d615c1795de5864"],"a870f9917149dc600c4ad4417d615c1795de5864":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}