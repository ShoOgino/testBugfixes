{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(SegmentReader,Directory,SegmentCommitInfo,IOContext).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(SegmentReader,Directory,SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(SegmentReader,Directory,SegmentInfoPerCommit,IOContext).mjava","sourceNew":"  SegmentCoreReaders(SegmentReader owner, Directory dir, SegmentCommitInfo si, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) its the cfsdir, otherwise its the segment's directory.\n\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = new CompoundFileDirectory(dir, IndexFileNames.segmentFileName(si.info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), context, false);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      final FieldInfos fieldInfos = owner.fieldInfos;\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, fieldInfos, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (fieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, fieldInfos, context);\n\n      if (fieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, fieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","sourceOld":"  SegmentCoreReaders(SegmentReader owner, Directory dir, SegmentInfoPerCommit si, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) its the cfsdir, otherwise its the segment's directory.\n\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = new CompoundFileDirectory(dir, IndexFileNames.segmentFileName(si.info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), context, false);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      final FieldInfos fieldInfos = owner.fieldInfos;\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, fieldInfos, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (fieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, fieldInfos, context);\n\n      if (fieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, fieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","date":1412231650,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(SegmentReader,Directory,SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(SegmentReader,Directory,SegmentCommitInfo,IOContext).mjava","sourceNew":"  SegmentCoreReaders(SegmentReader owner, Directory dir, SegmentCommitInfo si, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) its the cfsdir, otherwise its the segment's directory.\n\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = new CompoundFileDirectory(si.info.getId(), dir, IndexFileNames.segmentFileName(si.info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), context, false);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      final FieldInfos fieldInfos = owner.fieldInfos;\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, fieldInfos, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (fieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, fieldInfos, context);\n\n      if (fieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, fieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","sourceOld":"  SegmentCoreReaders(SegmentReader owner, Directory dir, SegmentCommitInfo si, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) its the cfsdir, otherwise its the segment's directory.\n\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = new CompoundFileDirectory(dir, IndexFileNames.segmentFileName(si.info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), context, false);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      final FieldInfos fieldInfos = owner.fieldInfos;\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, fieldInfos, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (fieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, fieldInfos, context);\n\n      if (fieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, fieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(SegmentReader,Directory,SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(SegmentReader,Directory,SegmentCommitInfo,IOContext).mjava","sourceNew":"  SegmentCoreReaders(SegmentReader owner, Directory dir, SegmentCommitInfo si, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) its the cfsdir, otherwise its the segment's directory.\n\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = codec.compoundFormat().getCompoundReader(dir, si.info, context);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      final FieldInfos fieldInfos = owner.fieldInfos;\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, fieldInfos, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (fieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, fieldInfos, context);\n\n      if (fieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, fieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","sourceOld":"  SegmentCoreReaders(SegmentReader owner, Directory dir, SegmentCommitInfo si, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) its the cfsdir, otherwise its the segment's directory.\n\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = new CompoundFileDirectory(si.info.getId(), dir, IndexFileNames.segmentFileName(si.info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), context, false);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      final FieldInfos fieldInfos = owner.fieldInfos;\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, fieldInfos, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (fieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, fieldInfos, context);\n\n      if (fieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, fieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"256a0e54e76f18e115a43e7fe793b54d4e9a3005","date":1412426514,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(SegmentReader,Directory,SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(SegmentReader,Directory,SegmentCommitInfo,IOContext).mjava","sourceNew":"  SegmentCoreReaders(SegmentReader owner, Directory dir, SegmentCommitInfo si, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) its the cfsdir, otherwise its the segment's directory.\n\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = codec.compoundFormat().getCompoundReader(dir, si.info, context);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      coreFieldInfos = codec.fieldInfosFormat().getFieldInfosReader().read(cfsDir, si.info, \"\", context);\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, coreFieldInfos, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (coreFieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, coreFieldInfos, context);\n\n      if (coreFieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, coreFieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","sourceOld":"  SegmentCoreReaders(SegmentReader owner, Directory dir, SegmentCommitInfo si, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) its the cfsdir, otherwise its the segment's directory.\n\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = codec.compoundFormat().getCompoundReader(dir, si.info, context);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      final FieldInfos fieldInfos = owner.fieldInfos;\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, fieldInfos, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (fieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, fieldInfos, context);\n\n      if (fieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, fieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(SegmentReader,Directory,SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(SegmentReader,Directory,SegmentCommitInfo,IOContext).mjava","sourceNew":"  SegmentCoreReaders(SegmentReader owner, Directory dir, SegmentCommitInfo si, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) its the cfsdir, otherwise its the segment's directory.\n\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = codec.compoundFormat().getCompoundReader(dir, si.info, context);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      coreFieldInfos = codec.fieldInfosFormat().getFieldInfosReader().read(cfsDir, si.info, \"\", context);\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, coreFieldInfos, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (coreFieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, coreFieldInfos, context);\n\n      if (coreFieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, coreFieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","sourceOld":"  SegmentCoreReaders(SegmentReader owner, Directory dir, SegmentCommitInfo si, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) its the cfsdir, otherwise its the segment's directory.\n\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = new CompoundFileDirectory(dir, IndexFileNames.segmentFileName(si.info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), context, false);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      final FieldInfos fieldInfos = owner.fieldInfos;\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, fieldInfos, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (fieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, fieldInfos, context);\n\n      if (fieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, fieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2fe60a17a7a0cfd101b1169acf089221bc6c166","date":1412767493,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(SegmentReader,Directory,SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(SegmentReader,Directory,SegmentCommitInfo,IOContext).mjava","sourceNew":"  SegmentCoreReaders(SegmentReader owner, Directory dir, SegmentCommitInfo si, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) its the cfsdir, otherwise its the segment's directory.\n\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = codec.compoundFormat().getCompoundReader(dir, si.info, context);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      coreFieldInfos = codec.fieldInfosFormat().read(cfsDir, si.info, \"\", context);\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, coreFieldInfos, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (coreFieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, coreFieldInfos, context);\n\n      if (coreFieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, coreFieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","sourceOld":"  SegmentCoreReaders(SegmentReader owner, Directory dir, SegmentCommitInfo si, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) its the cfsdir, otherwise its the segment's directory.\n\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = codec.compoundFormat().getCompoundReader(dir, si.info, context);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      coreFieldInfos = codec.fieldInfosFormat().getFieldInfosReader().read(cfsDir, si.info, \"\", context);\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, coreFieldInfos, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (coreFieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, coreFieldInfos, context);\n\n      if (coreFieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, coreFieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(SegmentReader,Directory,SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(SegmentReader,Directory,SegmentCommitInfo,IOContext).mjava","sourceNew":"  SegmentCoreReaders(SegmentReader owner, Directory dir, SegmentCommitInfo si, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) its the cfsdir, otherwise its the segment's directory.\n\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = codec.compoundFormat().getCompoundReader(dir, si.info, context);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      coreFieldInfos = codec.fieldInfosFormat().read(cfsDir, si.info, \"\", context);\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, coreFieldInfos, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (coreFieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, coreFieldInfos, context);\n\n      if (coreFieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, coreFieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","sourceOld":"  SegmentCoreReaders(SegmentReader owner, Directory dir, SegmentCommitInfo si, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) its the cfsdir, otherwise its the segment's directory.\n\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = codec.compoundFormat().getCompoundReader(dir, si.info, context);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      coreFieldInfos = codec.fieldInfosFormat().getFieldInfosReader().read(cfsDir, si.info, \"\", context);\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, coreFieldInfos, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (coreFieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, coreFieldInfos, context);\n\n      if (coreFieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, coreFieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(SegmentReader,Directory,SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(SegmentReader,Directory,SegmentCommitInfo,IOContext).mjava","sourceNew":"  SegmentCoreReaders(SegmentReader owner, Directory dir, SegmentCommitInfo si, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) it's the cfsdir, otherwise it's the segment's directory.\n\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = codec.compoundFormat().getCompoundReader(dir, si.info, context);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      coreFieldInfos = codec.fieldInfosFormat().read(cfsDir, si.info, \"\", context);\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, coreFieldInfos, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (coreFieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, coreFieldInfos, context);\n\n      if (coreFieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, coreFieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","sourceOld":"  SegmentCoreReaders(SegmentReader owner, Directory dir, SegmentCommitInfo si, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) its the cfsdir, otherwise its the segment's directory.\n\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = codec.compoundFormat().getCompoundReader(dir, si.info, context);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      coreFieldInfos = codec.fieldInfosFormat().read(cfsDir, si.info, \"\", context);\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, coreFieldInfos, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (coreFieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, coreFieldInfos, context);\n\n      if (coreFieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, coreFieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(Directory,SegmentCommitInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentCoreReaders#SegmentCoreReaders(SegmentReader,Directory,SegmentCommitInfo,IOContext).mjava","sourceNew":"  SegmentCoreReaders(Directory dir, SegmentCommitInfo si, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) it's the cfsdir, otherwise it's the segment's directory.\n\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = codec.compoundFormat().getCompoundReader(dir, si.info, context);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      coreFieldInfos = codec.fieldInfosFormat().read(cfsDir, si.info, \"\", context);\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, coreFieldInfos, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (coreFieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, coreFieldInfos, context);\n\n      if (coreFieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, coreFieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      if (coreFieldInfos.hasDimensionalValues()) {\n        dimensionalReader = codec.dimensionalFormat().fieldsReader(segmentReadState);\n      } else {\n        dimensionalReader = null;\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","sourceOld":"  SegmentCoreReaders(SegmentReader owner, Directory dir, SegmentCommitInfo si, IOContext context) throws IOException {\n\n    final Codec codec = si.info.getCodec();\n    final Directory cfsDir; // confusing name: if (cfs) it's the cfsdir, otherwise it's the segment's directory.\n\n    boolean success = false;\n    \n    try {\n      if (si.info.getUseCompoundFile()) {\n        cfsDir = cfsReader = codec.compoundFormat().getCompoundReader(dir, si.info, context);\n      } else {\n        cfsReader = null;\n        cfsDir = dir;\n      }\n\n      coreFieldInfos = codec.fieldInfosFormat().read(cfsDir, si.info, \"\", context);\n      \n      final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si.info, coreFieldInfos, context);\n      final PostingsFormat format = codec.postingsFormat();\n      // Ask codec for its Fields\n      fields = format.fieldsProducer(segmentReadState);\n      assert fields != null;\n      // ask codec for its Norms: \n      // TODO: since we don't write any norms file if there are no norms,\n      // kinda jaky to assume the codec handles the case of no norms file at all gracefully?!\n\n      if (coreFieldInfos.hasNorms()) {\n        normsProducer = codec.normsFormat().normsProducer(segmentReadState);\n        assert normsProducer != null;\n      } else {\n        normsProducer = null;\n      }\n  \n      fieldsReaderOrig = si.info.getCodec().storedFieldsFormat().fieldsReader(cfsDir, si.info, coreFieldInfos, context);\n\n      if (coreFieldInfos.hasVectors()) { // open term vector files only as needed\n        termVectorsReaderOrig = si.info.getCodec().termVectorsFormat().vectorsReader(cfsDir, si.info, coreFieldInfos, context);\n      } else {\n        termVectorsReaderOrig = null;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        decRef();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["9bb9a29a5e71a90295f175df8919802993142c9a"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55980207f1977bd1463465de1659b821347e2fa8":["256a0e54e76f18e115a43e7fe793b54d4e9a3005","e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"256a0e54e76f18e115a43e7fe793b54d4e9a3005":["989d940c4bf402188f4f0ae13736836885227383"],"989d940c4bf402188f4f0ae13736836885227383":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"9bb9a29a5e71a90295f175df8919802993142c9a":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","256a0e54e76f18e115a43e7fe793b54d4e9a3005"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"]},"commit2Childs":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","55980207f1977bd1463465de1659b821347e2fa8"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","9bb9a29a5e71a90295f175df8919802993142c9a"],"55980207f1977bd1463465de1659b821347e2fa8":[],"256a0e54e76f18e115a43e7fe793b54d4e9a3005":["55980207f1977bd1463465de1659b821347e2fa8","9bb9a29a5e71a90295f175df8919802993142c9a"],"989d940c4bf402188f4f0ae13736836885227383":["256a0e54e76f18e115a43e7fe793b54d4e9a3005"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["989d940c4bf402188f4f0ae13736836885227383"],"9bb9a29a5e71a90295f175df8919802993142c9a":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}