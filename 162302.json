{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#checkAndCompleteShardSplit(ClusterState,String,String,String,Map[String,Object]).mjava","commits":[{"id":"bc841231667f1f315bae6799c068f9aad6543967","date":1381415189,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#checkAndCompleteShardSplit(ClusterState,String,String,String,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"    private ClusterState checkAndCompleteShardSplit(ClusterState state, String collection, String coreNodeName, String sliceName, Map<String,Object> replicaProps) {\n      Slice slice = state.getSlice(collection, sliceName);\n      Map<String, Object> sliceProps = slice.getProperties();\n      String sliceState = slice.getState();\n      if (Slice.RECOVERY.equals(sliceState))  {\n        log.info(\"Shard: {} is in recovery state\", sliceName);\n        // is this replica active?\n        if (ZkStateReader.ACTIVE.equals(replicaProps.get(ZkStateReader.STATE_PROP))) {\n          log.info(\"Shard: {} is in recovery state and coreNodeName: {} is active\", sliceName, coreNodeName);\n          // are all other replicas also active?\n          boolean allActive = true;\n          for (Entry<String, Replica> entry : slice.getReplicasMap().entrySet()) {\n            if (coreNodeName.equals(entry.getKey()))  continue;\n            if (!Slice.ACTIVE.equals(entry.getValue().getStr(Slice.STATE))) {\n              allActive = false;\n              break;\n            }\n          }\n          if (allActive)  {\n            log.info(\"Shard: {} - all replicas are active. Finding status of fellow sub-shards\", sliceName);\n            // find out about other sub shards\n            Map<String, Slice> allSlicesCopy = new HashMap<String, Slice>(state.getSlicesMap(collection));\n            List<Slice> subShardSlices = new ArrayList<Slice>();\n            outer:\n            for (Entry<String, Slice> entry : allSlicesCopy.entrySet()) {\n              if (sliceName.equals(entry.getKey()))\n                continue;\n              Slice otherSlice = entry.getValue();\n              if (Slice.RECOVERY.equals(otherSlice.getState())) {\n                if (slice.getParent() != null && slice.getParent().equals(otherSlice.getParent()))  {\n                  log.info(\"Shard: {} - Fellow sub-shard: {} found\", sliceName, otherSlice.getName());\n                  // this is a fellow sub shard so check if all replicas are active\n                  for (Entry<String, Replica> sliceEntry : otherSlice.getReplicasMap().entrySet()) {\n                    if (!ZkStateReader.ACTIVE.equals(sliceEntry.getValue().getStr(ZkStateReader.STATE_PROP)))  {\n                      allActive = false;\n                      break outer;\n                    }\n                  }\n                  log.info(\"Shard: {} - Fellow sub-shard: {} has all replicas active\", sliceName, otherSlice.getName());\n                  subShardSlices.add(otherSlice);\n                }\n              }\n            }\n            if (allActive)  {\n              // hurray, all sub shard replicas are active\n              log.info(\"Shard: {} - All replicas across all fellow sub-shards are now ACTIVE. Preparing to switch shard states.\", sliceName);\n              String parentSliceName = (String) sliceProps.remove(Slice.PARENT);\n\n              Map<String, Object> propMap = new HashMap<String, Object>();\n              propMap.put(Overseer.QUEUE_OPERATION, \"updateshardstate\");\n              propMap.put(parentSliceName, Slice.INACTIVE);\n              propMap.put(sliceName, Slice.ACTIVE);\n              for (Slice subShardSlice : subShardSlices) {\n                propMap.put(subShardSlice.getName(), Slice.ACTIVE);\n              }\n              propMap.put(ZkStateReader.COLLECTION_PROP, collection);\n              ZkNodeProps m = new ZkNodeProps(propMap);\n              state = updateShardState(state, m);\n            }\n          }\n        }\n      }\n      return state;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#checkAndCompleteShardSplit(ClusterState,String,String,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#checkAndCompleteShardSplit(ClusterState,String,String,String,Map[String,Object]).mjava","sourceNew":"    private ClusterState checkAndCompleteShardSplit(ClusterState state, String collection, String coreNodeName, String sliceName, Map<String,Object> replicaProps) {\n      Slice slice = state.getSlice(collection, sliceName);\n      Map<String, Object> sliceProps = slice.getProperties();\n      String sliceState = slice.getState();\n      if (Slice.RECOVERY.equals(sliceState))  {\n        log.info(\"Shard: {} is in recovery state\", sliceName);\n        // is this replica active?\n        if (ZkStateReader.ACTIVE.equals(replicaProps.get(ZkStateReader.STATE_PROP))) {\n          log.info(\"Shard: {} is in recovery state and coreNodeName: {} is active\", sliceName, coreNodeName);\n          // are all other replicas also active?\n          boolean allActive = true;\n          for (Entry<String, Replica> entry : slice.getReplicasMap().entrySet()) {\n            if (coreNodeName.equals(entry.getKey()))  continue;\n            if (!Slice.ACTIVE.equals(entry.getValue().getStr(Slice.STATE))) {\n              allActive = false;\n              break;\n            }\n          }\n          if (allActive)  {\n            log.info(\"Shard: {} - all replicas are active. Finding status of fellow sub-shards\", sliceName);\n            // find out about other sub shards\n            Map<String, Slice> allSlicesCopy = new HashMap<>(state.getSlicesMap(collection));\n            List<Slice> subShardSlices = new ArrayList<>();\n            outer:\n            for (Entry<String, Slice> entry : allSlicesCopy.entrySet()) {\n              if (sliceName.equals(entry.getKey()))\n                continue;\n              Slice otherSlice = entry.getValue();\n              if (Slice.RECOVERY.equals(otherSlice.getState())) {\n                if (slice.getParent() != null && slice.getParent().equals(otherSlice.getParent()))  {\n                  log.info(\"Shard: {} - Fellow sub-shard: {} found\", sliceName, otherSlice.getName());\n                  // this is a fellow sub shard so check if all replicas are active\n                  for (Entry<String, Replica> sliceEntry : otherSlice.getReplicasMap().entrySet()) {\n                    if (!ZkStateReader.ACTIVE.equals(sliceEntry.getValue().getStr(ZkStateReader.STATE_PROP)))  {\n                      allActive = false;\n                      break outer;\n                    }\n                  }\n                  log.info(\"Shard: {} - Fellow sub-shard: {} has all replicas active\", sliceName, otherSlice.getName());\n                  subShardSlices.add(otherSlice);\n                }\n              }\n            }\n            if (allActive)  {\n              // hurray, all sub shard replicas are active\n              log.info(\"Shard: {} - All replicas across all fellow sub-shards are now ACTIVE. Preparing to switch shard states.\", sliceName);\n              String parentSliceName = (String) sliceProps.remove(Slice.PARENT);\n\n              Map<String, Object> propMap = new HashMap<>();\n              propMap.put(Overseer.QUEUE_OPERATION, \"updateshardstate\");\n              propMap.put(parentSliceName, Slice.INACTIVE);\n              propMap.put(sliceName, Slice.ACTIVE);\n              for (Slice subShardSlice : subShardSlices) {\n                propMap.put(subShardSlice.getName(), Slice.ACTIVE);\n              }\n              propMap.put(ZkStateReader.COLLECTION_PROP, collection);\n              ZkNodeProps m = new ZkNodeProps(propMap);\n              state = updateShardState(state, m);\n            }\n          }\n        }\n      }\n      return state;\n    }\n\n","sourceOld":"    private ClusterState checkAndCompleteShardSplit(ClusterState state, String collection, String coreNodeName, String sliceName, Map<String,Object> replicaProps) {\n      Slice slice = state.getSlice(collection, sliceName);\n      Map<String, Object> sliceProps = slice.getProperties();\n      String sliceState = slice.getState();\n      if (Slice.RECOVERY.equals(sliceState))  {\n        log.info(\"Shard: {} is in recovery state\", sliceName);\n        // is this replica active?\n        if (ZkStateReader.ACTIVE.equals(replicaProps.get(ZkStateReader.STATE_PROP))) {\n          log.info(\"Shard: {} is in recovery state and coreNodeName: {} is active\", sliceName, coreNodeName);\n          // are all other replicas also active?\n          boolean allActive = true;\n          for (Entry<String, Replica> entry : slice.getReplicasMap().entrySet()) {\n            if (coreNodeName.equals(entry.getKey()))  continue;\n            if (!Slice.ACTIVE.equals(entry.getValue().getStr(Slice.STATE))) {\n              allActive = false;\n              break;\n            }\n          }\n          if (allActive)  {\n            log.info(\"Shard: {} - all replicas are active. Finding status of fellow sub-shards\", sliceName);\n            // find out about other sub shards\n            Map<String, Slice> allSlicesCopy = new HashMap<String, Slice>(state.getSlicesMap(collection));\n            List<Slice> subShardSlices = new ArrayList<Slice>();\n            outer:\n            for (Entry<String, Slice> entry : allSlicesCopy.entrySet()) {\n              if (sliceName.equals(entry.getKey()))\n                continue;\n              Slice otherSlice = entry.getValue();\n              if (Slice.RECOVERY.equals(otherSlice.getState())) {\n                if (slice.getParent() != null && slice.getParent().equals(otherSlice.getParent()))  {\n                  log.info(\"Shard: {} - Fellow sub-shard: {} found\", sliceName, otherSlice.getName());\n                  // this is a fellow sub shard so check if all replicas are active\n                  for (Entry<String, Replica> sliceEntry : otherSlice.getReplicasMap().entrySet()) {\n                    if (!ZkStateReader.ACTIVE.equals(sliceEntry.getValue().getStr(ZkStateReader.STATE_PROP)))  {\n                      allActive = false;\n                      break outer;\n                    }\n                  }\n                  log.info(\"Shard: {} - Fellow sub-shard: {} has all replicas active\", sliceName, otherSlice.getName());\n                  subShardSlices.add(otherSlice);\n                }\n              }\n            }\n            if (allActive)  {\n              // hurray, all sub shard replicas are active\n              log.info(\"Shard: {} - All replicas across all fellow sub-shards are now ACTIVE. Preparing to switch shard states.\", sliceName);\n              String parentSliceName = (String) sliceProps.remove(Slice.PARENT);\n\n              Map<String, Object> propMap = new HashMap<String, Object>();\n              propMap.put(Overseer.QUEUE_OPERATION, \"updateshardstate\");\n              propMap.put(parentSliceName, Slice.INACTIVE);\n              propMap.put(sliceName, Slice.ACTIVE);\n              for (Slice subShardSlice : subShardSlices) {\n                propMap.put(subShardSlice.getName(), Slice.ACTIVE);\n              }\n              propMap.put(ZkStateReader.COLLECTION_PROP, collection);\n              ZkNodeProps m = new ZkNodeProps(propMap);\n              state = updateShardState(state, m);\n            }\n          }\n        }\n      }\n      return state;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#checkAndCompleteShardSplit(ClusterState,String,String,String,Map[String,Object]).mjava","sourceNew":null,"sourceOld":"    private ClusterState checkAndCompleteShardSplit(ClusterState state, String collection, String coreNodeName, String sliceName, Map<String,Object> replicaProps) {\n      Slice slice = state.getSlice(collection, sliceName);\n      Map<String, Object> sliceProps = slice.getProperties();\n      String sliceState = slice.getState();\n      if (Slice.RECOVERY.equals(sliceState))  {\n        log.info(\"Shard: {} is in recovery state\", sliceName);\n        // is this replica active?\n        if (ZkStateReader.ACTIVE.equals(replicaProps.get(ZkStateReader.STATE_PROP))) {\n          log.info(\"Shard: {} is in recovery state and coreNodeName: {} is active\", sliceName, coreNodeName);\n          // are all other replicas also active?\n          boolean allActive = true;\n          for (Entry<String, Replica> entry : slice.getReplicasMap().entrySet()) {\n            if (coreNodeName.equals(entry.getKey()))  continue;\n            if (!Slice.ACTIVE.equals(entry.getValue().getStr(Slice.STATE))) {\n              allActive = false;\n              break;\n            }\n          }\n          if (allActive)  {\n            log.info(\"Shard: {} - all replicas are active. Finding status of fellow sub-shards\", sliceName);\n            // find out about other sub shards\n            Map<String, Slice> allSlicesCopy = new HashMap<>(state.getSlicesMap(collection));\n            List<Slice> subShardSlices = new ArrayList<>();\n            outer:\n            for (Entry<String, Slice> entry : allSlicesCopy.entrySet()) {\n              if (sliceName.equals(entry.getKey()))\n                continue;\n              Slice otherSlice = entry.getValue();\n              if (Slice.RECOVERY.equals(otherSlice.getState())) {\n                if (slice.getParent() != null && slice.getParent().equals(otherSlice.getParent()))  {\n                  log.info(\"Shard: {} - Fellow sub-shard: {} found\", sliceName, otherSlice.getName());\n                  // this is a fellow sub shard so check if all replicas are active\n                  for (Entry<String, Replica> sliceEntry : otherSlice.getReplicasMap().entrySet()) {\n                    if (!ZkStateReader.ACTIVE.equals(sliceEntry.getValue().getStr(ZkStateReader.STATE_PROP)))  {\n                      allActive = false;\n                      break outer;\n                    }\n                  }\n                  log.info(\"Shard: {} - Fellow sub-shard: {} has all replicas active\", sliceName, otherSlice.getName());\n                  subShardSlices.add(otherSlice);\n                }\n              }\n            }\n            if (allActive)  {\n              // hurray, all sub shard replicas are active\n              log.info(\"Shard: {} - All replicas across all fellow sub-shards are now ACTIVE. Preparing to switch shard states.\", sliceName);\n              String parentSliceName = (String) sliceProps.remove(Slice.PARENT);\n\n              Map<String, Object> propMap = new HashMap<>();\n              propMap.put(Overseer.QUEUE_OPERATION, \"updateshardstate\");\n              propMap.put(parentSliceName, Slice.INACTIVE);\n              propMap.put(sliceName, Slice.ACTIVE);\n              for (Slice subShardSlice : subShardSlices) {\n                propMap.put(subShardSlice.getName(), Slice.ACTIVE);\n              }\n              propMap.put(ZkStateReader.COLLECTION_PROP, collection);\n              ZkNodeProps m = new ZkNodeProps(propMap);\n              state = updateShardState(state, m);\n            }\n          }\n        }\n      }\n      return state;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bc841231667f1f315bae6799c068f9aad6543967"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"bc841231667f1f315bae6799c068f9aad6543967":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bc841231667f1f315bae6799c068f9aad6543967":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc841231667f1f315bae6799c068f9aad6543967"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}