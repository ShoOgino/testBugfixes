{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasUncommittedChanges().mjava","commits":[{"id":"d793cb4fa803a8c1df6052bc96094cfaae7d86bb","date":1372272532,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasUncommittedChanges().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns true if there are changes that have not been committed */\n  public final boolean hasUncommittedChanges() {\n    return changeCount != lastCommitChangeCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["43551e9096501f3700f7aa202ba12192990b43e8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasUncommittedChanges().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns true if there are changes that have not been committed */\n  public final boolean hasUncommittedChanges() {\n    return changeCount != lastCommitChangeCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43551e9096501f3700f7aa202ba12192990b43e8","date":1382029838,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasUncommittedChanges().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasUncommittedChanges().mjava","sourceNew":"  /** Returns true if there are changes that have not been committed */\n  public final boolean hasUncommittedChanges() {\n    return changeCount != lastCommitChangeCount || docWriter.anyChanges() || bufferedDeletesStream.any();\n  }\n\n","sourceOld":"  /** Returns true if there are changes that have not been committed */\n  public final boolean hasUncommittedChanges() {\n    return changeCount != lastCommitChangeCount;\n  }\n\n","bugFix":["d793cb4fa803a8c1df6052bc96094cfaae7d86bb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a1948845635c8e8973b1dc1f274cf4974c027c7","date":1382044707,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasUncommittedChanges().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasUncommittedChanges().mjava","sourceNew":"  /** Returns true if there are changes that have not been\n   *  committed.  Note that if a merge kicked off as a\n   *  result of flushing a new segment during {@link\n   *  #commit}, or a concurrent merged finished,\n   *  this method may return true right after you\n   *  had just called {@link #commit}. */\n  public final boolean hasUncommittedChanges() {\n    return changeCount != lastCommitChangeCount || docWriter.anyChanges() || bufferedDeletesStream.any();\n  }\n\n","sourceOld":"  /** Returns true if there are changes that have not been committed */\n  public final boolean hasUncommittedChanges() {\n    return changeCount != lastCommitChangeCount || docWriter.anyChanges() || bufferedDeletesStream.any();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasUncommittedChanges().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasUncommittedChanges().mjava","sourceNew":"  /** Returns true if there are changes that have not been\n   *  committed.  Note that if a merge kicked off as a\n   *  result of flushing a new segment during {@link\n   *  #commit}, or a concurrent merged finished,\n   *  this method may return true right after you\n   *  had just called {@link #commit}. */\n  public final boolean hasUncommittedChanges() {\n    return changeCount != lastCommitChangeCount || docWriter.anyChanges() || bufferedUpdatesStream.any();\n  }\n\n","sourceOld":"  /** Returns true if there are changes that have not been\n   *  committed.  Note that if a merge kicked off as a\n   *  result of flushing a new segment during {@link\n   *  #commit}, or a concurrent merged finished,\n   *  this method may return true right after you\n   *  had just called {@link #commit}. */\n  public final boolean hasUncommittedChanges() {\n    return changeCount != lastCommitChangeCount || docWriter.anyChanges() || bufferedDeletesStream.any();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a096817b3d3d58eea4747031d6f7a0ff58690d0","date":1389965834,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasUncommittedChanges().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasUncommittedChanges().mjava","sourceNew":"  /** Returns true if there may be changes that have not been\n   *  committed.  There are cases where this may return true\n   *  when there are no actual \"real\" changes to the index,\n   *  for example if you've deleted by Term or Query but\n   *  that Term or Query does not match any documents.\n   *  Also, if a merge kicked off as a result of flushing a\n   *  new segment during {@link #commit}, or a concurrent\n   *  merged finished, this method may return true right\n   *  after you had just called {@link #commit}. */\n  public final boolean hasUncommittedChanges() {\n    return changeCount != lastCommitChangeCount || docWriter.anyChanges() || bufferedUpdatesStream.any();\n  }\n\n","sourceOld":"  /** Returns true if there are changes that have not been\n   *  committed.  Note that if a merge kicked off as a\n   *  result of flushing a new segment during {@link\n   *  #commit}, or a concurrent merged finished,\n   *  this method may return true right after you\n   *  had just called {@link #commit}. */\n  public final boolean hasUncommittedChanges() {\n    return changeCount != lastCommitChangeCount || docWriter.anyChanges() || bufferedUpdatesStream.any();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869e42fbd9c52c4728652ba51faf7266b239a6f","date":1428140988,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasUncommittedChanges().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasUncommittedChanges().mjava","sourceNew":"  /** Returns true if there may be changes that have not been\n   *  committed.  There are cases where this may return true\n   *  when there are no actual \"real\" changes to the index,\n   *  for example if you've deleted by Term or Query but\n   *  that Term or Query does not match any documents.\n   *  Also, if a merge kicked off as a result of flushing a\n   *  new segment during {@link #commit}, or a concurrent\n   *  merged finished, this method may return true right\n   *  after you had just called {@link #commit}. */\n  public final boolean hasUncommittedChanges() {\n    return changeCount.get() != lastCommitChangeCount || docWriter.anyChanges() || bufferedUpdatesStream.any();\n  }\n\n","sourceOld":"  /** Returns true if there may be changes that have not been\n   *  committed.  There are cases where this may return true\n   *  when there are no actual \"real\" changes to the index,\n   *  for example if you've deleted by Term or Query but\n   *  that Term or Query does not match any documents.\n   *  Also, if a merge kicked off as a result of flushing a\n   *  new segment during {@link #commit}, or a concurrent\n   *  merged finished, this method may return true right\n   *  after you had just called {@link #commit}. */\n  public final boolean hasUncommittedChanges() {\n    return changeCount != lastCommitChangeCount || docWriter.anyChanges() || bufferedUpdatesStream.any();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2","date":1588002560,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasUncommittedChanges().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#hasUncommittedChanges().mjava","sourceNew":"  /** Returns true if there may be changes that have not been\n   *  committed.  There are cases where this may return true\n   *  when there are no actual \"real\" changes to the index,\n   *  for example if you've deleted by Term or Query but\n   *  that Term or Query does not match any documents.\n   *  Also, if a merge kicked off as a result of flushing a\n   *  new segment during {@link #commit}, or a concurrent\n   *  merged finished, this method may return true right\n   *  after you had just called {@link #commit}. */\n  public final boolean hasUncommittedChanges() {\n    return changeCount.get() != lastCommitChangeCount || hasChangesInRam();\n  }\n\n","sourceOld":"  /** Returns true if there may be changes that have not been\n   *  committed.  There are cases where this may return true\n   *  when there are no actual \"real\" changes to the index,\n   *  for example if you've deleted by Term or Query but\n   *  that Term or Query does not match any documents.\n   *  Also, if a merge kicked off as a result of flushing a\n   *  new segment during {@link #commit}, or a concurrent\n   *  merged finished, this method may return true right\n   *  after you had just called {@link #commit}. */\n  public final boolean hasUncommittedChanges() {\n    return changeCount.get() != lastCommitChangeCount || docWriter.anyChanges() || bufferedUpdatesStream.any();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b869e42fbd9c52c4728652ba51faf7266b239a6f":["6a096817b3d3d58eea4747031d6f7a0ff58690d0"],"d793cb4fa803a8c1df6052bc96094cfaae7d86bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["4a1948845635c8e8973b1dc1f274cf4974c027c7"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d793cb4fa803a8c1df6052bc96094cfaae7d86bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["b869e42fbd9c52c4728652ba51faf7266b239a6f"],"43551e9096501f3700f7aa202ba12192990b43e8":["d793cb4fa803a8c1df6052bc96094cfaae7d86bb"],"6a096817b3d3d58eea4747031d6f7a0ff58690d0":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"4a1948845635c8e8973b1dc1f274cf4974c027c7":["43551e9096501f3700f7aa202ba12192990b43e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"]},"commit2Childs":{"b869e42fbd9c52c4728652ba51faf7266b239a6f":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"d793cb4fa803a8c1df6052bc96094cfaae7d86bb":["37a0f60745e53927c4c876cfe5b5a58170f0646c","43551e9096501f3700f7aa202ba12192990b43e8"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["6a096817b3d3d58eea4747031d6f7a0ff58690d0"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d793cb4fa803a8c1df6052bc96094cfaae7d86bb","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43551e9096501f3700f7aa202ba12192990b43e8":["4a1948845635c8e8973b1dc1f274cf4974c027c7"],"6a096817b3d3d58eea4747031d6f7a0ff58690d0":["b869e42fbd9c52c4728652ba51faf7266b239a6f"],"4a1948845635c8e8973b1dc1f274cf4974c027c7":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}