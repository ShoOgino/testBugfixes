{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.FLAG_ALL),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.FLAG_ALL));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.FLAG_ALL),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.FLAG_ALL));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.FLAG_ALL),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.FLAG_ALL));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.FLAG_ALL),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.FLAG_ALL));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.FLAG_POSITIONS),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.FLAG_POSITIONS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.FLAG_POSITIONS),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.FLAG_POSITIONS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.FLAG_POSITIONS),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.FLAG_POSITIONS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.FLAG_POSITIONS),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.FLAG_POSITIONS));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.FLAG_NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.FLAG_NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.FLAG_NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    DocsAndPositionsEnum leftPositions = null;\n    DocsAndPositionsEnum rightPositions = null;\n    DocsEnum leftDocs = null;\n    DocsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsAndPositionsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsAndPositionsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, DocsEnum.FLAG_NONE));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, DocsEnum.FLAG_NONE),\n                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs),\n            rightDocs = rightTermsEnum.docs(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(null, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(null, rightDocs, DocsEnum.FLAG_NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, DocsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, DocsEnum.FLAG_NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.FLAG_ALL),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.FLAG_ALL));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.FLAG_ALL),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.FLAG_ALL));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.FLAG_ALL),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.FLAG_ALL));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.FLAG_ALL),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.FLAG_ALL));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.FLAG_PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.FLAG_PAYLOADS),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.FLAG_PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.FLAG_PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.FLAG_PAYLOADS),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.FLAG_PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.FLAG_OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.FLAG_OFFSETS),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.FLAG_OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.FLAG_OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.FLAG_OFFSETS),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.FLAG_OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.FLAG_POSITIONS),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.FLAG_POSITIONS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.FLAG_POSITIONS),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.FLAG_POSITIONS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.FLAG_POSITIONS),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.FLAG_POSITIONS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.FLAG_POSITIONS),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.FLAG_POSITIONS));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.FLAG_NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.FLAG_NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.FLAG_NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.FLAG_NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.FLAG_NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35626481458234c265343dd28af158e8b0099068","date":1427831707,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep, boolean hasPositions) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        if (hasPositions) {\n          // with payloads + off\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n          // with payloads only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),\n                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),\n                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),\n                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),\n                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));\n\n          // with offsets only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),\n                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),\n                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),\n                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),\n                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));\n\n          // with positions only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),\n                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),\n                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),\n                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),\n                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));\n        }\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b4e3cd382d0d075a0f1725649c084bb6510c483","date":1428096423,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsEnum(TermsEnum,TermsEnum,boolean).mjava","sourceNew":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep, boolean hasPositions) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        if (hasPositions) {\n          // with payloads + off\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n          // with payloads only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),\n                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),\n                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),\n                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),\n                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));\n\n          // with offsets only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),\n                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),\n                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),\n                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),\n                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));\n\n          // with positions only\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),\n                                     rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));\n          assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),\n                                     rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));\n\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),\n                                  rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));\n          assertPositionsSkipping(leftTermsEnum.docFreq(),\n                                  leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),\n                                  rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));\n        }\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","sourceOld":"  /** \n   * checks the terms enum sequentially\n   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums\n   */\n  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {\n    BytesRef term;\n    Bits randomBits = new RandomBits(MAXDOC, random().nextDouble(), random());\n    PostingsEnum leftPositions = null;\n    PostingsEnum rightPositions = null;\n    PostingsEnum leftDocs = null;\n    PostingsEnum rightDocs = null;\n    \n    while ((term = leftTermsEnum.next()) != null) {\n      assertEquals(term, rightTermsEnum.next());\n      assertTermStats(leftTermsEnum, rightTermsEnum);\n      if (deep) {\n        // with payloads + off\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));\n        // with payloads only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.PAYLOADS),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.PAYLOADS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.PAYLOADS),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.PAYLOADS));\n\n        // with offsets only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.OFFSETS),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.OFFSETS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.OFFSETS),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.OFFSETS));\n        \n        // with positions only\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),\n                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));\n        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),\n                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));\n\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.POSITIONS),\n                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.POSITIONS));\n        assertPositionsSkipping(leftTermsEnum.docFreq(), \n                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.POSITIONS),\n                                rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.POSITIONS));\n        \n        // with freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE));\n        assertDocsEnum(leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE));\n        \n        // with freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs),\n            rightDocs = rightTermsEnum.postings(null, rightDocs));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs));\n\n        // w/o freqs:\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE));\n        assertDocsSkipping(leftTermsEnum.docFreq(), \n            leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),\n            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE));\n      }\n    }\n    assertNull(rightTermsEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4","35626481458234c265343dd28af158e8b0099068"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"35626481458234c265343dd28af158e8b0099068":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"51f5280f31484820499077f41fcdfe92d527d9dc":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6b4e3cd382d0d075a0f1725649c084bb6510c483"]},"commit2Childs":{"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["6b4e3cd382d0d075a0f1725649c084bb6510c483","35626481458234c265343dd28af158e8b0099068"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["51f5280f31484820499077f41fcdfe92d527d9dc"],"35626481458234c265343dd28af158e8b0099068":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}