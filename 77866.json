{"path":"src/java/org/apache/lucene/analysis/StopFilter#next().mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/StopFilter#next().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the next input Token whose termText() is not a stop word. */\n  public final Token next() throws IOException {\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next())\n      if (table.get(token.termText) == null)\n\treturn token;\n    // reached EOS -- return null\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01c60152412ff32dee98e5db0fc15d22d0d47c5e","date":1069984994,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/StopFilter#next().mjava","pathOld":"src/java/org/apache/lucene/analysis/StopFilter#next().mjava","sourceNew":"  /** Returns the next input Token whose termText() is not a stop word. */\n  public final Token next() throws IOException {\n    int position = 1;\n\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next()) {\n      if (table.get(token.termText) == null) {\n        token.setPositionIncrement(position);\n        position = 1;\n        return token;\n      }\n\n      position++;\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","sourceOld":"  /** Returns the next input Token whose termText() is not a stop word. */\n  public final Token next() throws IOException {\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next())\n      if (table.get(token.termText) == null)\n\treturn token;\n    // reached EOS -- return null\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a9335d7433deae34b70c8f3aa9dfd51eafadf6d","date":1070303027,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/StopFilter#next().mjava","pathOld":"src/java/org/apache/lucene/analysis/StopFilter#next().mjava","sourceNew":"  /** Returns the next input Token whose termText() is not a stop word. */\n  public final Token next() throws IOException {\n    int position = 1;\n\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next()) {\n      if (table.get(token.termText) == null) {\n        token.setPositionIncrement(position);\n        return token;\n      }\n\n      position++;\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","sourceOld":"  /** Returns the next input Token whose termText() is not a stop word. */\n  public final Token next() throws IOException {\n    int position = 1;\n\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next()) {\n      if (table.get(token.termText) == null) {\n        token.setPositionIncrement(position);\n        position = 1;\n        return token;\n      }\n\n      position++;\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc36517f0d31fce8db70054234f0fa4a480b72a4","date":1070634612,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/StopFilter#next().mjava","pathOld":"src/java/org/apache/lucene/analysis/StopFilter#next().mjava","sourceNew":"  /** Returns the next input Token whose termText() is not a stop word. */\n  public final Token next() throws IOException {\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next())\n      if (table.get(token.termText) == null)\n        return token;\n    // reached EOS -- return null\n    return null;\n  }\n\n","sourceOld":"  /** Returns the next input Token whose termText() is not a stop word. */\n  public final Token next() throws IOException {\n    int position = 1;\n\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next()) {\n      if (table.get(token.termText) == null) {\n        token.setPositionIncrement(position);\n        return token;\n      }\n\n      position++;\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da84b655ba7795af0018633fd31fba21fb61e9c1","date":1078877882,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/StopFilter#next().mjava","pathOld":"src/java/org/apache/lucene/analysis/StopFilter#next().mjava","sourceNew":"  /**\n   * Returns the next input Token whose termText() is not a stop word.\n   */\n  public final Token next() throws IOException {\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next())\n      if (!table.contains(token.termText))\n        return token;\n    // reached EOS -- return null\n    return null;\n  }\n\n","sourceOld":"  /** Returns the next input Token whose termText() is not a stop word. */\n  public final Token next() throws IOException {\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next())\n      if (table.get(token.termText) == null)\n        return token;\n    // reached EOS -- return null\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"525347fbeb76cbad395ad4f365bf97e2fadd4434","date":1078912797,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/StopFilter#next().mjava","pathOld":"src/java/org/apache/lucene/analysis/StopFilter#next().mjava","sourceNew":"  /**\n   * Returns the next input Token whose termText() is not a stop word.\n   */\n  public final Token next() throws IOException {\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next())\n      if (!stopWords.contains(token.termText))\n        return token;\n    // reached EOS -- return null\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the next input Token whose termText() is not a stop word.\n   */\n  public final Token next() throws IOException {\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next())\n      if (!table.contains(token.termText))\n        return token;\n    // reached EOS -- return null\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"286cb6c31750c5add63b4db2aa26094a3572747f","date":1133833013,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/StopFilter#next().mjava","pathOld":"src/java/org/apache/lucene/analysis/StopFilter#next().mjava","sourceNew":"  /**\n   * Returns the next input Token whose termText() is not a stop word.\n   */\n  public final Token next() throws IOException {\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next())\n    {\n        String termText = ignoreCase ? token.termText.toLowerCase() : token.termText;\n        if (!stopWords.contains(termText))\n          return token;\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the next input Token whose termText() is not a stop word.\n   */\n  public final Token next() throws IOException {\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next())\n      if (!stopWords.contains(token.termText))\n        return token;\n    // reached EOS -- return null\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6864413dbc0c12104c978c05456f3da1d45adb03","date":1186770873,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/StopFilter#next(Token).mjava","pathOld":"src/java/org/apache/lucene/analysis/StopFilter#next().mjava","sourceNew":"  /**\n   * Returns the next input Token whose termText() is not a stop word.\n   */\n  public final Token next(Token result) throws IOException {\n    // return the first non-stop word found\n    while((result = input.next(result)) != null) {\n      if (!stopWords.contains(result.termBuffer(), result.termLength))\n        return result;\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the next input Token whose termText() is not a stop word.\n   */\n  public final Token next() throws IOException {\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next())\n    {\n        String termText = ignoreCase ? token.termText.toLowerCase() : token.termText;\n        if (!stopWords.contains(termText))\n          return token;\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6864413dbc0c12104c978c05456f3da1d45adb03":["286cb6c31750c5add63b4db2aa26094a3572747f"],"525347fbeb76cbad395ad4f365bf97e2fadd4434":["da84b655ba7795af0018633fd31fba21fb61e9c1"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a9335d7433deae34b70c8f3aa9dfd51eafadf6d":["01c60152412ff32dee98e5db0fc15d22d0d47c5e"],"01c60152412ff32dee98e5db0fc15d22d0d47c5e":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"286cb6c31750c5add63b4db2aa26094a3572747f":["525347fbeb76cbad395ad4f365bf97e2fadd4434"],"da84b655ba7795af0018633fd31fba21fb61e9c1":["dc36517f0d31fce8db70054234f0fa4a480b72a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dc36517f0d31fce8db70054234f0fa4a480b72a4":["2a9335d7433deae34b70c8f3aa9dfd51eafadf6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6864413dbc0c12104c978c05456f3da1d45adb03"]},"commit2Childs":{"6864413dbc0c12104c978c05456f3da1d45adb03":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"525347fbeb76cbad395ad4f365bf97e2fadd4434":["286cb6c31750c5add63b4db2aa26094a3572747f"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["01c60152412ff32dee98e5db0fc15d22d0d47c5e"],"2a9335d7433deae34b70c8f3aa9dfd51eafadf6d":["dc36517f0d31fce8db70054234f0fa4a480b72a4"],"01c60152412ff32dee98e5db0fc15d22d0d47c5e":["2a9335d7433deae34b70c8f3aa9dfd51eafadf6d"],"286cb6c31750c5add63b4db2aa26094a3572747f":["6864413dbc0c12104c978c05456f3da1d45adb03"],"da84b655ba7795af0018633fd31fba21fb61e9c1":["525347fbeb76cbad395ad4f365bf97e2fadd4434"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"dc36517f0d31fce8db70054234f0fa4a480b72a4":["da84b655ba7795af0018633fd31fba21fb61e9c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}