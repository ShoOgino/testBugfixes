{"path":"lucene/core/src/java/org/apache/lucene/util/AttributeImpl#reflectWith(AttributeReflector).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeImpl#reflectWith(AttributeReflector).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/AttributeImpl#reflectWith(AttributeReflector).mjava","sourceNew":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this attribute holds to the given {@link AttributeReflector}.\n   *\n   * <p>The default implementation calls {@link AttributeReflector#reflect} for all\n   * non-static fields from the implementing class, using the field name as key\n   * and the field value as value. The Attribute class is also determined by reflection.\n   * Please note that the default implementation can only handle single-Attribute\n   * implementations.\n   *\n   * <p>Custom implementations look like this (e.g. for a combined attribute implementation):\n   * <pre>\n   *   public void reflectWith(AttributeReflector reflector) {\n   *     reflector.reflect(CharTermAttribute.class, \"term\", term());\n   *     reflector.reflect(PositionIncrementAttribute.class, \"positionIncrement\", getPositionIncrement());\n   *   }\n   * </pre>\n   *\n   * <p>If you implement this method, make sure that for each invocation, the same set of {@link Attribute}\n   * interfaces and keys are passed to {@link AttributeReflector#reflect} in the same order, but possibly\n   * different values. So don't automatically exclude e.g. {@code null} properties!\n   *\n   * @see #reflectAsString(boolean)\n   */\n  public void reflectWith(AttributeReflector reflector) {\n    final Class<? extends AttributeImpl> clazz = this.getClass();\n    final LinkedList<WeakReference<Class<? extends Attribute>>> interfaces = AttributeSource.getAttributeInterfaces(clazz);\n    if (interfaces.size() != 1) {\n      throw new UnsupportedOperationException(clazz.getName() +\n        \" implements more than one Attribute interface, the default reflectWith() implementation cannot handle this.\");\n    }\n    final Class<? extends Attribute> interf = interfaces.getFirst().get();\n    final Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        final Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        reflector.reflect(interf, f.getName(), f.get(this));\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this attribute holds to the given {@link AttributeReflector}.\n   *\n   * <p>The default implementation calls {@link AttributeReflector#reflect} for all\n   * non-static fields from the implementing class, using the field name as key\n   * and the field value as value. The Attribute class is also determined by reflection.\n   * Please note that the default implementation can only handle single-Attribute\n   * implementations.\n   *\n   * <p>Custom implementations look like this (e.g. for a combined attribute implementation):\n   * <pre>\n   *   public void reflectWith(AttributeReflector reflector) {\n   *     reflector.reflect(CharTermAttribute.class, \"term\", term());\n   *     reflector.reflect(PositionIncrementAttribute.class, \"positionIncrement\", getPositionIncrement());\n   *   }\n   * </pre>\n   *\n   * <p>If you implement this method, make sure that for each invocation, the same set of {@link Attribute}\n   * interfaces and keys are passed to {@link AttributeReflector#reflect} in the same order, but possibly\n   * different values. So don't automatically exclude e.g. {@code null} properties!\n   *\n   * @see #reflectAsString(boolean)\n   */\n  public void reflectWith(AttributeReflector reflector) {\n    final Class<? extends AttributeImpl> clazz = this.getClass();\n    final LinkedList<WeakReference<Class<? extends Attribute>>> interfaces = AttributeSource.getAttributeInterfaces(clazz);\n    if (interfaces.size() != 1) {\n      throw new UnsupportedOperationException(clazz.getName() +\n        \" implements more than one Attribute interface, the default reflectWith() implementation cannot handle this.\");\n    }\n    final Class<? extends Attribute> interf = interfaces.getFirst().get();\n    final Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        final Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        reflector.reflect(interf, f.getName(), f.get(this));\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8471c0f357621e859602d44e1af230581b739319","date":1347468766,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeImpl#reflectWith(AttributeReflector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeImpl#reflectWith(AttributeReflector).mjava","sourceNew":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this attribute holds to the given {@link AttributeReflector}.\n   *\n   * <p>The default implementation calls {@link AttributeReflector#reflect} for all\n   * non-static fields from the implementing class, using the field name as key\n   * and the field value as value. The Attribute class is also determined by reflection.\n   * Please note that the default implementation can only handle single-Attribute\n   * implementations.\n   *\n   * <p>Custom implementations look like this (e.g. for a combined attribute implementation):\n   * <pre class=\"prettyprint\">\n   *   public void reflectWith(AttributeReflector reflector) {\n   *     reflector.reflect(CharTermAttribute.class, \"term\", term());\n   *     reflector.reflect(PositionIncrementAttribute.class, \"positionIncrement\", getPositionIncrement());\n   *   }\n   * </pre>\n   *\n   * <p>If you implement this method, make sure that for each invocation, the same set of {@link Attribute}\n   * interfaces and keys are passed to {@link AttributeReflector#reflect} in the same order, but possibly\n   * different values. So don't automatically exclude e.g. {@code null} properties!\n   *\n   * @see #reflectAsString(boolean)\n   */\n  public void reflectWith(AttributeReflector reflector) {\n    final Class<? extends AttributeImpl> clazz = this.getClass();\n    final LinkedList<WeakReference<Class<? extends Attribute>>> interfaces = AttributeSource.getAttributeInterfaces(clazz);\n    if (interfaces.size() != 1) {\n      throw new UnsupportedOperationException(clazz.getName() +\n        \" implements more than one Attribute interface, the default reflectWith() implementation cannot handle this.\");\n    }\n    final Class<? extends Attribute> interf = interfaces.getFirst().get();\n    final Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        final Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        reflector.reflect(interf, f.getName(), f.get(this));\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this attribute holds to the given {@link AttributeReflector}.\n   *\n   * <p>The default implementation calls {@link AttributeReflector#reflect} for all\n   * non-static fields from the implementing class, using the field name as key\n   * and the field value as value. The Attribute class is also determined by reflection.\n   * Please note that the default implementation can only handle single-Attribute\n   * implementations.\n   *\n   * <p>Custom implementations look like this (e.g. for a combined attribute implementation):\n   * <pre>\n   *   public void reflectWith(AttributeReflector reflector) {\n   *     reflector.reflect(CharTermAttribute.class, \"term\", term());\n   *     reflector.reflect(PositionIncrementAttribute.class, \"positionIncrement\", getPositionIncrement());\n   *   }\n   * </pre>\n   *\n   * <p>If you implement this method, make sure that for each invocation, the same set of {@link Attribute}\n   * interfaces and keys are passed to {@link AttributeReflector#reflect} in the same order, but possibly\n   * different values. So don't automatically exclude e.g. {@code null} properties!\n   *\n   * @see #reflectAsString(boolean)\n   */\n  public void reflectWith(AttributeReflector reflector) {\n    final Class<? extends AttributeImpl> clazz = this.getClass();\n    final LinkedList<WeakReference<Class<? extends Attribute>>> interfaces = AttributeSource.getAttributeInterfaces(clazz);\n    if (interfaces.size() != 1) {\n      throw new UnsupportedOperationException(clazz.getName() +\n        \" implements more than one Attribute interface, the default reflectWith() implementation cannot handle this.\");\n    }\n    final Class<? extends Attribute> interf = interfaces.getFirst().get();\n    final Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        final Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        reflector.reflect(interf, f.getName(), f.get(this));\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93124590c6e2a8b45898cbae46f96c3a05d9bce0","date":1399415098,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeImpl#reflectWith(AttributeReflector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeImpl#reflectWith(AttributeReflector).mjava","sourceNew":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this attribute holds to the given {@link AttributeReflector}.\n   *\n   * <p>The default implementation calls {@link AttributeReflector#reflect} for all\n   * non-static fields from the implementing class, using the field name as key\n   * and the field value as value. The Attribute class is also determined by reflection.\n   * Please note that the default implementation can only handle single-Attribute\n   * implementations.\n   *\n   * <p>Custom implementations look like this (e.g. for a combined attribute implementation):\n   * <pre class=\"prettyprint\">\n   *   public void reflectWith(AttributeReflector reflector) {\n   *     reflector.reflect(CharTermAttribute.class, \"term\", term());\n   *     reflector.reflect(PositionIncrementAttribute.class, \"positionIncrement\", getPositionIncrement());\n   *   }\n   * </pre>\n   *\n   * <p>If you implement this method, make sure that for each invocation, the same set of {@link Attribute}\n   * interfaces and keys are passed to {@link AttributeReflector#reflect} in the same order, but possibly\n   * different values. So don't automatically exclude e.g. {@code null} properties!\n   *\n   * @see #reflectAsString(boolean)\n   */\n  public void reflectWith(AttributeReflector reflector) {\n    final Class<? extends AttributeImpl> clazz = this.getClass();\n    final Reference<Class<? extends Attribute>>[] interfaces = AttributeSource.getAttributeInterfaces(clazz);\n    if (interfaces.length != 1) {\n      throw new UnsupportedOperationException(clazz.getName() +\n        \" implements more than one Attribute interface, the default reflectWith() implementation cannot handle this.\");\n    }\n    final Class<? extends Attribute> interf = interfaces[0].get();\n    assert (interf != null) :\n      \"We have a strong reference on the class holding the interfaces, so they should never get evicted\";\n    final Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        final Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        reflector.reflect(interf, f.getName(), f.get(this));\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this attribute holds to the given {@link AttributeReflector}.\n   *\n   * <p>The default implementation calls {@link AttributeReflector#reflect} for all\n   * non-static fields from the implementing class, using the field name as key\n   * and the field value as value. The Attribute class is also determined by reflection.\n   * Please note that the default implementation can only handle single-Attribute\n   * implementations.\n   *\n   * <p>Custom implementations look like this (e.g. for a combined attribute implementation):\n   * <pre class=\"prettyprint\">\n   *   public void reflectWith(AttributeReflector reflector) {\n   *     reflector.reflect(CharTermAttribute.class, \"term\", term());\n   *     reflector.reflect(PositionIncrementAttribute.class, \"positionIncrement\", getPositionIncrement());\n   *   }\n   * </pre>\n   *\n   * <p>If you implement this method, make sure that for each invocation, the same set of {@link Attribute}\n   * interfaces and keys are passed to {@link AttributeReflector#reflect} in the same order, but possibly\n   * different values. So don't automatically exclude e.g. {@code null} properties!\n   *\n   * @see #reflectAsString(boolean)\n   */\n  public void reflectWith(AttributeReflector reflector) {\n    final Class<? extends AttributeImpl> clazz = this.getClass();\n    final LinkedList<WeakReference<Class<? extends Attribute>>> interfaces = AttributeSource.getAttributeInterfaces(clazz);\n    if (interfaces.size() != 1) {\n      throw new UnsupportedOperationException(clazz.getName() +\n        \" implements more than one Attribute interface, the default reflectWith() implementation cannot handle this.\");\n    }\n    final Class<? extends Attribute> interf = interfaces.getFirst().get();\n    final Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        final Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        reflector.reflect(interf, f.getName(), f.get(this));\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38fce186d877ee988f82c708a92d9e21343e3bfe","date":1408099813,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeImpl#reflectWith(AttributeReflector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeImpl#reflectWith(AttributeReflector).mjava","sourceNew":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this attribute holds to the given {@link AttributeReflector}.\n   *\n   * <p>The default implementation calls {@link AttributeReflector#reflect} for all\n   * non-static fields from the implementing class, using the field name as key\n   * and the field value as value. The Attribute class is also determined by reflection.\n   * Please note that the default implementation can only handle single-Attribute\n   * implementations.\n   *\n   * <p>Custom implementations look like this (e.g. for a combined attribute implementation):\n   * <pre class=\"prettyprint\">\n   *   public void reflectWith(AttributeReflector reflector) {\n   *     reflector.reflect(CharTermAttribute.class, \"term\", term());\n   *     reflector.reflect(PositionIncrementAttribute.class, \"positionIncrement\", getPositionIncrement());\n   *   }\n   * </pre>\n   *\n   * <p>If you implement this method, make sure that for each invocation, the same set of {@link Attribute}\n   * interfaces and keys are passed to {@link AttributeReflector#reflect} in the same order, but possibly\n   * different values. So don't automatically exclude e.g. {@code null} properties!\n   *\n   * @see #reflectAsString(boolean)\n   */\n  public void reflectWith(AttributeReflector reflector) {\n    final Class<? extends AttributeImpl> clazz = this.getClass();\n    final Class<? extends Attribute>[] interfaces = AttributeSource.getAttributeInterfaces(clazz);\n    if (interfaces.length != 1) {\n      throw new UnsupportedOperationException(clazz.getName() +\n        \" implements more than one Attribute interface, the default reflectWith() implementation cannot handle this.\");\n    }\n    final Class<? extends Attribute> interf = interfaces[0];\n    final Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        final Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        reflector.reflect(interf, f.getName(), f.get(this));\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this attribute holds to the given {@link AttributeReflector}.\n   *\n   * <p>The default implementation calls {@link AttributeReflector#reflect} for all\n   * non-static fields from the implementing class, using the field name as key\n   * and the field value as value. The Attribute class is also determined by reflection.\n   * Please note that the default implementation can only handle single-Attribute\n   * implementations.\n   *\n   * <p>Custom implementations look like this (e.g. for a combined attribute implementation):\n   * <pre class=\"prettyprint\">\n   *   public void reflectWith(AttributeReflector reflector) {\n   *     reflector.reflect(CharTermAttribute.class, \"term\", term());\n   *     reflector.reflect(PositionIncrementAttribute.class, \"positionIncrement\", getPositionIncrement());\n   *   }\n   * </pre>\n   *\n   * <p>If you implement this method, make sure that for each invocation, the same set of {@link Attribute}\n   * interfaces and keys are passed to {@link AttributeReflector#reflect} in the same order, but possibly\n   * different values. So don't automatically exclude e.g. {@code null} properties!\n   *\n   * @see #reflectAsString(boolean)\n   */\n  public void reflectWith(AttributeReflector reflector) {\n    final Class<? extends AttributeImpl> clazz = this.getClass();\n    final Reference<Class<? extends Attribute>>[] interfaces = AttributeSource.getAttributeInterfaces(clazz);\n    if (interfaces.length != 1) {\n      throw new UnsupportedOperationException(clazz.getName() +\n        \" implements more than one Attribute interface, the default reflectWith() implementation cannot handle this.\");\n    }\n    final Class<? extends Attribute> interf = interfaces[0].get();\n    assert (interf != null) :\n      \"We have a strong reference on the class holding the interfaces, so they should never get evicted\";\n    final Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        final Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        reflector.reflect(interf, f.getName(), f.get(this));\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e33d2d3ce83ad0c915dd37e097059dd85ff99126","date":1435853931,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeImpl#reflectWith(AttributeReflector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeImpl#reflectWith(AttributeReflector).mjava","sourceNew":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this attribute holds to the given {@link AttributeReflector}.\n   *\n   * <p>Implementations look like this (e.g. for a combined attribute implementation):\n   * <pre class=\"prettyprint\">\n   *   public void reflectWith(AttributeReflector reflector) {\n   *     reflector.reflect(CharTermAttribute.class, \"term\", term());\n   *     reflector.reflect(PositionIncrementAttribute.class, \"positionIncrement\", getPositionIncrement());\n   *   }\n   * </pre>\n   *\n   * <p>If you implement this method, make sure that for each invocation, the same set of {@link Attribute}\n   * interfaces and keys are passed to {@link AttributeReflector#reflect} in the same order, but possibly\n   * different values. So don't automatically exclude e.g. {@code null} properties!\n   *\n   * @see #reflectAsString(boolean)\n   */\n  public abstract void reflectWith(AttributeReflector reflector);\n\n","sourceOld":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this attribute holds to the given {@link AttributeReflector}.\n   *\n   * <p>The default implementation calls {@link AttributeReflector#reflect} for all\n   * non-static fields from the implementing class, using the field name as key\n   * and the field value as value. The Attribute class is also determined by reflection.\n   * Please note that the default implementation can only handle single-Attribute\n   * implementations.\n   *\n   * <p>Custom implementations look like this (e.g. for a combined attribute implementation):\n   * <pre class=\"prettyprint\">\n   *   public void reflectWith(AttributeReflector reflector) {\n   *     reflector.reflect(CharTermAttribute.class, \"term\", term());\n   *     reflector.reflect(PositionIncrementAttribute.class, \"positionIncrement\", getPositionIncrement());\n   *   }\n   * </pre>\n   *\n   * <p>If you implement this method, make sure that for each invocation, the same set of {@link Attribute}\n   * interfaces and keys are passed to {@link AttributeReflector#reflect} in the same order, but possibly\n   * different values. So don't automatically exclude e.g. {@code null} properties!\n   *\n   * @see #reflectAsString(boolean)\n   */\n  public void reflectWith(AttributeReflector reflector) {\n    final Class<? extends AttributeImpl> clazz = this.getClass();\n    final Class<? extends Attribute>[] interfaces = AttributeSource.getAttributeInterfaces(clazz);\n    if (interfaces.length != 1) {\n      throw new UnsupportedOperationException(clazz.getName() +\n        \" implements more than one Attribute interface, the default reflectWith() implementation cannot handle this.\");\n    }\n    final Class<? extends Attribute> interf = interfaces[0];\n    final Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        final Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        reflector.reflect(interf, f.getName(), f.get(this));\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93124590c6e2a8b45898cbae46f96c3a05d9bce0":["8471c0f357621e859602d44e1af230581b739319"],"8471c0f357621e859602d44e1af230581b739319":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38fce186d877ee988f82c708a92d9e21343e3bfe":["93124590c6e2a8b45898cbae46f96c3a05d9bce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e33d2d3ce83ad0c915dd37e097059dd85ff99126"],"e33d2d3ce83ad0c915dd37e097059dd85ff99126":["38fce186d877ee988f82c708a92d9e21343e3bfe"]},"commit2Childs":{"93124590c6e2a8b45898cbae46f96c3a05d9bce0":["38fce186d877ee988f82c708a92d9e21343e3bfe"],"8471c0f357621e859602d44e1af230581b739319":["93124590c6e2a8b45898cbae46f96c3a05d9bce0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8471c0f357621e859602d44e1af230581b739319"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"38fce186d877ee988f82c708a92d9e21343e3bfe":["e33d2d3ce83ad0c915dd37e097059dd85ff99126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e33d2d3ce83ad0c915dd37e097059dd85ff99126":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}