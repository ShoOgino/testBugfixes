{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","commits":[{"id":"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9","date":1420028708,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#checkStale(SolrZkClient,String,int).mjava","sourceNew":"  private static boolean checkStale(SolrZkClient zkClient,  String zkPath, int currentVersion)  {\n    if(zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if(stat == null){\n        if(currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() >  currentVersion) {\n        log.info(zkPath+\" is stale will need an update from {} to {}\", currentVersion,stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne){\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().isInterrupted();\n    }\n    return false;\n  }\n\n","sourceOld":"  private static boolean checkStale(SolrZkClient zkClient,  String zkPath, int currentVersion)  {\n    if(zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if(stat == null){\n        if(currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() >  currentVersion) {\n        log.info(zkPath+\" is stale will need an update from {} to {}\", currentVersion,stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne){\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().isInterrupted();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b450082a183f77a08a778bcd9ca4663286387004","date":1442585049,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","sourceNew":"  private static boolean checkStale(SolrZkClient zkClient,  String zkPath, int currentVersion)  {\n    if(zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if(stat == null){\n        if(currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() >  currentVersion) {\n        log.info(zkPath+\" is stale will need an update from {} to {}\", currentVersion,stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne){\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    return false;\n  }\n\n","sourceOld":"  private static boolean checkStale(SolrZkClient zkClient,  String zkPath, int currentVersion)  {\n    if(zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if(stat == null){\n        if(currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() >  currentVersion) {\n        log.info(zkPath+\" is stale will need an update from {} to {}\", currentVersion,stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne){\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().isInterrupted();\n    }\n    return false;\n  }\n\n","bugFix":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","sourceNew":"  private static boolean checkStale(SolrZkClient zkClient,  String zkPath, int currentVersion)  {\n    if(zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if(stat == null){\n        if(currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() >  currentVersion) {\n        log.debug(zkPath+\" is stale will need an update from {} to {}\", currentVersion,stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne){\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    return false;\n  }\n\n","sourceOld":"  private static boolean checkStale(SolrZkClient zkClient,  String zkPath, int currentVersion)  {\n    if(zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if(stat == null){\n        if(currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() >  currentVersion) {\n        log.info(zkPath+\" is stale will need an update from {} to {}\", currentVersion,stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne){\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","sourceNew":"  private static boolean checkStale(SolrZkClient zkClient,  String zkPath, int currentVersion)  {\n    if(zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if(stat == null){\n        if(currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() >  currentVersion) {\n        log.debug(zkPath+\" is stale will need an update from {} to {}\", currentVersion,stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne){\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    return false;\n  }\n\n","sourceOld":"  private static boolean checkStale(SolrZkClient zkClient,  String zkPath, int currentVersion)  {\n    if(zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if(stat == null){\n        if(currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() >  currentVersion) {\n        log.info(zkPath+\" is stale will need an update from {} to {}\", currentVersion,stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne){\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","sourceNew":"  private static boolean checkStale(SolrZkClient zkClient,  String zkPath, int currentVersion)  {\n    if(zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if(stat == null){\n        if(currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() >  currentVersion) {\n        log.debug(zkPath+\" is stale will need an update from {} to {}\", currentVersion,stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne){\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    return false;\n  }\n\n","sourceOld":"  private static boolean checkStale(SolrZkClient zkClient,  String zkPath, int currentVersion)  {\n    if(zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if(stat == null){\n        if(currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() >  currentVersion) {\n        log.info(zkPath+\" is stale will need an update from {} to {}\", currentVersion,stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne){\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","sourceNew":"  private static boolean checkStale(SolrZkClient zkClient,  String zkPath, int currentVersion)  {\n    if(zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if(stat == null){\n        if(currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() >  currentVersion) {\n        log.debug(zkPath+\" is stale will need an update from {} to {}\", currentVersion,stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne){\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    return false;\n  }\n\n","sourceOld":"  private static boolean checkStale(SolrZkClient zkClient,  String zkPath, int currentVersion)  {\n    if(zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if(stat == null){\n        if(currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() >  currentVersion) {\n        log.info(zkPath+\" is stale will need an update from {} to {}\", currentVersion,stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne){\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24792720c893049d53a1807bd0ae9b64d1cd7be5","date":1527536585,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","sourceNew":"  private static boolean checkStale(SolrZkClient zkClient,  String zkPath, int currentVersion)  {\n    if(zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if(stat == null){\n        if(currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() >  currentVersion) {\n        log.debug(\"{} is stale will need an update from {} to {}\", zkPath, currentVersion,stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne){\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    return false;\n  }\n\n","sourceOld":"  private static boolean checkStale(SolrZkClient zkClient,  String zkPath, int currentVersion)  {\n    if(zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if(stat == null){\n        if(currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() >  currentVersion) {\n        log.debug(zkPath+\" is stale will need an update from {} to {}\", currentVersion,stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne){\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","sourceNew":"  private static boolean checkStale(SolrZkClient zkClient, String zkPath, int currentVersion) {\n    if (zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if (stat == null) {\n        if (currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() > currentVersion) {\n        log.debug(\"{} is stale will need an update from {} to {}\", zkPath, currentVersion, stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne) {\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    return false;\n  }\n\n","sourceOld":"  private static boolean checkStale(SolrZkClient zkClient,  String zkPath, int currentVersion)  {\n    if(zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if(stat == null){\n        if(currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() >  currentVersion) {\n        log.debug(\"{} is stale will need an update from {} to {}\", zkPath, currentVersion,stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne){\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","date":1566455239,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","sourceNew":"  private static boolean checkStale(SolrZkClient zkClient, String zkPath, int currentVersion) {\n    if (zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if (stat == null) {\n        return currentVersion > -1;\n      }\n      if (stat.getVersion() > currentVersion) {\n        log.debug(\"{} is stale will need an update from {} to {}\", zkPath, currentVersion, stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne) {\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    return false;\n  }\n\n","sourceOld":"  private static boolean checkStale(SolrZkClient zkClient, String zkPath, int currentVersion) {\n    if (zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if (stat == null) {\n        if (currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() > currentVersion) {\n        log.debug(\"{} is stale will need an update from {} to {}\", zkPath, currentVersion, stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne) {\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","sourceNew":"  private static boolean checkStale(SolrZkClient zkClient, String zkPath, int currentVersion) {\n    if (zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if (stat == null) {\n        if (currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() > currentVersion) {\n        log.debug(\"{} is stale will need an update from {} to {}\", zkPath, currentVersion, stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne) {\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    return false;\n  }\n\n","sourceOld":"  private static boolean checkStale(SolrZkClient zkClient, String zkPath, int currentVersion) {\n    if (zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if (stat == null) {\n        return currentVersion > -1;\n      }\n      if (stat.getVersion() > currentVersion) {\n        log.debug(\"{} is stale will need an update from {} to {}\", zkPath, currentVersion, stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne) {\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","sourceNew":"  private static boolean checkStale(SolrZkClient zkClient, String zkPath, int currentVersion) {\n    if (zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if (stat == null) {\n        if (currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() > currentVersion) {\n        log.debug(\"{} is stale will need an update from {} to {}\", zkPath, currentVersion, stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne) {\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    return false;\n  }\n\n","sourceOld":"  private static boolean checkStale(SolrZkClient zkClient, String zkPath, int currentVersion) {\n    if (zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if (stat == null) {\n        return currentVersion > -1;\n      }\n      if (stat.getVersion() > currentVersion) {\n        log.debug(\"{} is stale will need an update from {} to {}\", zkPath, currentVersion, stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne) {\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","sourceNew":"  private static boolean checkStale(SolrZkClient zkClient, String zkPath, int currentVersion) {\n    if (zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if (stat == null) {\n        if (currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() > currentVersion) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"{} is stale will need an update from {} to {}\", zkPath, currentVersion, stat.getVersion());\n        }\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne) {\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    return false;\n  }\n\n","sourceOld":"  private static boolean checkStale(SolrZkClient zkClient, String zkPath, int currentVersion) {\n    if (zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if (stat == null) {\n        if (currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() > currentVersion) {\n        log.debug(\"{} is stale will need an update from {} to {}\", zkPath, currentVersion, stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne) {\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24792720c893049d53a1807bd0ae9b64d1cd7be5":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c44cc06c26e456fe9c215072b79fce30babe3975":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["b450082a183f77a08a778bcd9ca4663286387004"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b450082a183f77a08a778bcd9ca4663286387004","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"126d6ad24eed13163ba0959435d5a80e5672837c":["b450082a183f77a08a778bcd9ca4663286387004","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["24792720c893049d53a1807bd0ae9b64d1cd7be5"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"140be51d03394488536f4aacedace29f9b318347":["c44cc06c26e456fe9c215072b79fce30babe3975"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b450082a183f77a08a778bcd9ca4663286387004","126d6ad24eed13163ba0959435d5a80e5672837c"],"b450082a183f77a08a778bcd9ca4663286387004":["b5a70f7ff0756e3668447bffbbf8bce8e7c361b9"],"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140be51d03394488536f4aacedace29f9b318347"],"b0b597c65628ca9e73913a07e81691f8229bae35":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"24792720c893049d53a1807bd0ae9b64d1cd7be5":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"c44cc06c26e456fe9c215072b79fce30babe3975":["140be51d03394488536f4aacedace29f9b318347","b0b597c65628ca9e73913a07e81691f8229bae35"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["24792720c893049d53a1807bd0ae9b64d1cd7be5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"140be51d03394488536f4aacedace29f9b318347":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5a70f7ff0756e3668447bffbbf8bce8e7c361b9"],"b450082a183f77a08a778bcd9ca4663286387004":["7f0c8426396c925de8db3ed3f8ff40fd73670a5c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","126d6ad24eed13163ba0959435d5a80e5672837c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9":["b450082a183f77a08a778bcd9ca4663286387004"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}