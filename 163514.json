{"path":"src/test/org/apache/lucene/search/TestRemoteSearchable#search(Query).mjava","commits":[{"id":"69539241801d9f0a99eb92805e8bdcde63d692f1","date":1029455040,"type":1,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRemoteSearchable#search(Query).mjava","pathOld":"src/test/org/apache/lucene/search/TestRemoteSearchable#search().mjava","sourceNew":"  public static void search(Query query) throws Exception {\n    // try to search the published index\n    Searchable[] searchables = { getRemote() };\n    Searcher searcher = new MultiSearcher(searchables);\n    Hits result = searcher.search(query);\n\n    assertEquals(1, result.length());\n    assertEquals(\"test text\", result.doc(0).get(\"test\"));\n  }\n\n","sourceOld":"  public static void search() throws Exception {\n    // try to search the published index\n    Searchable remote = (Searchable)Naming.lookup(\"//localhost/Searchable\");\n    Searchable[] searchables = {remote};\n    Searcher searcher = new MultiSearcher(searchables);\n    Query query = new TermQuery(new Term(\"test\", \"test\"));\n    Hits result = searcher.search(query);\n\n    assertEquals(1, result.length());\n    assertEquals(\"test\", result.doc(0).get(\"test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71dfd9e23c6d92d6a9f3813800e0fde251692924","date":1063716570,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRemoteSearchable#search(Query).mjava","pathOld":"src/test/org/apache/lucene/search/TestRemoteSearchable#search(Query).mjava","sourceNew":"  private static void search(Query query) throws Exception {\n    // try to search the published index\n    Searchable[] searchables = { getRemote() };\n    Searcher searcher = new MultiSearcher(searchables);\n    Hits result = searcher.search(query);\n\n    assertEquals(1, result.length());\n    assertEquals(\"test text\", result.doc(0).get(\"test\"));\n  }\n\n","sourceOld":"  public static void search(Query query) throws Exception {\n    // try to search the published index\n    Searchable[] searchables = { getRemote() };\n    Searcher searcher = new MultiSearcher(searchables);\n    Hits result = searcher.search(query);\n\n    assertEquals(1, result.length());\n    assertEquals(\"test text\", result.doc(0).get(\"test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"919a3357bb0067f5ab89ed1d06598d1688444ff5","date":1173104881,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRemoteSearchable#search(Query).mjava","pathOld":"src/test/org/apache/lucene/search/TestRemoteSearchable#search(Query).mjava","sourceNew":"  private static void search(Query query) throws Exception {\n    // try to search the published index\n    Searchable[] searchables = { getRemote() };\n    Searcher searcher = new MultiSearcher(searchables);\n    Hits result = searcher.search(query);\n\n    assertEquals(1, result.length());\n    Document document = result.doc(0);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertEquals(\"test text\", document.get(\"test\"));\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    Set ftl = new HashSet();\n    ftl.add(\"other\");\n    FieldSelector fs = new SetBasedFieldSelector(ftl, Collections.EMPTY_SET);\n    document = searcher.doc(0, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    fs = new MapFieldSelector(new String[]{\"other\"});\n    document = searcher.doc(0, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n  }\n\n","sourceOld":"  private static void search(Query query) throws Exception {\n    // try to search the published index\n    Searchable[] searchables = { getRemote() };\n    Searcher searcher = new MultiSearcher(searchables);\n    Hits result = searcher.search(query);\n\n    assertEquals(1, result.length());\n    assertEquals(\"test text\", result.doc(0).get(\"test\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRemoteSearchable#search(Query).mjava","pathOld":"src/test/org/apache/lucene/search/TestRemoteSearchable#search(Query).mjava","sourceNew":"  private static void search(Query query) throws Exception {\n    // try to search the published index\n    Searchable[] searchables = { getRemote() };\n    Searcher searcher = new MultiSearcher(searchables);\n    ScoreDoc[] result = searcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(1, result.length);\n    Document document = searcher.doc(result[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertEquals(\"test text\", document.get(\"test\"));\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    Set ftl = new HashSet();\n    ftl.add(\"other\");\n    FieldSelector fs = new SetBasedFieldSelector(ftl, Collections.EMPTY_SET);\n    document = searcher.doc(0, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    fs = new MapFieldSelector(new String[]{\"other\"});\n    document = searcher.doc(0, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n  }\n\n","sourceOld":"  private static void search(Query query) throws Exception {\n    // try to search the published index\n    Searchable[] searchables = { getRemote() };\n    Searcher searcher = new MultiSearcher(searchables);\n    Hits result = searcher.search(query);\n\n    assertEquals(1, result.length());\n    Document document = result.doc(0);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertEquals(\"test text\", document.get(\"test\"));\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    Set ftl = new HashSet();\n    ftl.add(\"other\");\n    FieldSelector fs = new SetBasedFieldSelector(ftl, Collections.EMPTY_SET);\n    document = searcher.doc(0, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    fs = new MapFieldSelector(new String[]{\"other\"});\n    document = searcher.doc(0, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02","date":1244977984,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSearchable#search(Query).mjava","pathOld":"src/test/org/apache/lucene/search/TestRemoteSearchable#search(Query).mjava","sourceNew":"  private static void search(Query query) throws Exception {\n    // try to search the published index\n    Searchable[] searchables = { getRemote() };\n    Searcher searcher = new MultiSearcher(searchables);\n    ScoreDoc[] result = searcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(1, result.length);\n    Document document = searcher.doc(result[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertEquals(\"test text\", document.get(\"test\"));\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    Set ftl = new HashSet();\n    ftl.add(\"other\");\n    FieldSelector fs = new SetBasedFieldSelector(ftl, Collections.EMPTY_SET);\n    document = searcher.doc(0, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    fs = new MapFieldSelector(new String[]{\"other\"});\n    document = searcher.doc(0, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n  }\n\n","sourceOld":"  private static void search(Query query) throws Exception {\n    // try to search the published index\n    Searchable[] searchables = { getRemote() };\n    Searcher searcher = new MultiSearcher(searchables);\n    ScoreDoc[] result = searcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(1, result.length);\n    Document document = searcher.doc(result[0].doc);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertEquals(\"test text\", document.get(\"test\"));\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 2, document.getFields().size() == 2);\n    Set ftl = new HashSet();\n    ftl.add(\"other\");\n    FieldSelector fs = new SetBasedFieldSelector(ftl, Collections.EMPTY_SET);\n    document = searcher.doc(0, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n    fs = new MapFieldSelector(new String[]{\"other\"});\n    document = searcher.doc(0, fs);\n    assertTrue(\"document is null and it shouldn't be\", document != null);\n    assertTrue(\"document.getFields() Size: \" + document.getFields().size() + \" is not: \" + 1, document.getFields().size() == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"71dfd9e23c6d92d6a9f3813800e0fde251692924":["69539241801d9f0a99eb92805e8bdcde63d692f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["919a3357bb0067f5ab89ed1d06598d1688444ff5"],"919a3357bb0067f5ab89ed1d06598d1688444ff5":["71dfd9e23c6d92d6a9f3813800e0fde251692924"],"69539241801d9f0a99eb92805e8bdcde63d692f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1474a58d42cdf3b9e16ffe07bce31e4abffe5e02"]},"commit2Childs":{"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"71dfd9e23c6d92d6a9f3813800e0fde251692924":["919a3357bb0067f5ab89ed1d06598d1688444ff5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["69539241801d9f0a99eb92805e8bdcde63d692f1"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["1474a58d42cdf3b9e16ffe07bce31e4abffe5e02"],"919a3357bb0067f5ab89ed1d06598d1688444ff5":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"69539241801d9f0a99eb92805e8bdcde63d692f1":["71dfd9e23c6d92d6a9f3813800e0fde251692924"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}