{"path":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","commits":[{"id":"dd6be878365e339c75cc43ad7d5df95ab4ea21e5","date":1435762101,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxFilter(double,double,double).mjava","sourceNew":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(NumericRangeQuery.newDoubleRange(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat), true, true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), null, true, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", null, Math.toDegrees(maxLng), true, true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(NumericRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng), true, true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","sourceOld":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Filter getBoundingBoxFilter(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(NumericRangeQuery.newDoubleRange(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat), true, true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), null, true, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", null, Math.toDegrees(maxLng), true, true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(NumericRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng), true, true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return new QueryWrapperFilter(f.build());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","sourceNew":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(DimensionalRangeQuery.new1DDoubleRange(\"latitude\", Math.toDegrees(minLat), true, Math.toDegrees(maxLat), true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(DimensionalRangeQuery.new1DDoubleRange(\"longitude\", Math.toDegrees(minLng), true, null,  true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(DimensionalRangeQuery.new1DDoubleRange(\"longitude\", null, true, Math.toDegrees(maxLng), true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(DimensionalRangeQuery.new1DDoubleRange(\"longitude\", Math.toDegrees(minLng), true, Math.toDegrees(maxLng), true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","sourceOld":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(NumericRangeQuery.newDoubleRange(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat), true, true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), null, true, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(NumericRangeQuery.newDoubleRange(\"longitude\", null, Math.toDegrees(maxLng), true, true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(NumericRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng), true, true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","sourceNew":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(PointRangeQuery.new1DDoubleRange(\"latitude\", Math.toDegrees(minLat), true, Math.toDegrees(maxLat), true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(PointRangeQuery.new1DDoubleRange(\"longitude\", Math.toDegrees(minLng), true, null, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(PointRangeQuery.new1DDoubleRange(\"longitude\", null, true, Math.toDegrees(maxLng), true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(PointRangeQuery.new1DDoubleRange(\"longitude\", Math.toDegrees(minLng), true, Math.toDegrees(maxLng), true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","sourceOld":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(DimensionalRangeQuery.new1DDoubleRange(\"latitude\", Math.toDegrees(minLat), true, Math.toDegrees(maxLat), true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(DimensionalRangeQuery.new1DDoubleRange(\"longitude\", Math.toDegrees(minLng), true, null,  true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(DimensionalRangeQuery.new1DDoubleRange(\"longitude\", null, true, Math.toDegrees(maxLng), true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(DimensionalRangeQuery.new1DDoubleRange(\"longitude\", Math.toDegrees(minLng), true, Math.toDegrees(maxLng), true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"86cab68ee900a31d093b114182b488ea8e85c59d","date":1456171815,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","sourceNew":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(PointRangeQuery.newDoubleRange(\"latitude\", Math.toDegrees(minLat), true, Math.toDegrees(maxLat), true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(PointRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), true, null, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(PointRangeQuery.newDoubleRange(\"longitude\", null, true, Math.toDegrees(maxLng), true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(PointRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), true, Math.toDegrees(maxLng), true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","sourceOld":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(PointRangeQuery.new1DDoubleRange(\"latitude\", Math.toDegrees(minLat), true, Math.toDegrees(maxLat), true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(PointRangeQuery.new1DDoubleRange(\"longitude\", Math.toDegrees(minLng), true, null, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(PointRangeQuery.new1DDoubleRange(\"longitude\", null, true, Math.toDegrees(maxLng), true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(PointRangeQuery.new1DDoubleRange(\"longitude\", Math.toDegrees(minLng), true, Math.toDegrees(maxLng), true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","sourceNew":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(PointRangeQuery.newDoubleRange(\"latitude\", Math.toDegrees(minLat), true, Math.toDegrees(maxLat), true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(PointRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), true, null, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(PointRangeQuery.newDoubleRange(\"longitude\", null, true, Math.toDegrees(maxLng), true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(PointRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), true, Math.toDegrees(maxLng), true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","sourceOld":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(PointRangeQuery.new1DDoubleRange(\"latitude\", Math.toDegrees(minLat), true, Math.toDegrees(maxLat), true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(PointRangeQuery.new1DDoubleRange(\"longitude\", Math.toDegrees(minLng), true, null, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(PointRangeQuery.new1DDoubleRange(\"longitude\", null, true, Math.toDegrees(maxLng), true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(PointRangeQuery.new1DDoubleRange(\"longitude\", Math.toDegrees(minLng), true, Math.toDegrees(maxLng), true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3104a6ba367dfb690806b227c5ef17c42c6107b","date":1456265035,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","sourceNew":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(DoublePoint.newRangeQuery(\"latitude\", Math.toDegrees(minLat), true, Math.toDegrees(maxLat), true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), true, null, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", null, true, Math.toDegrees(maxLng), true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), true, Math.toDegrees(maxLng), true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","sourceOld":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(PointRangeQuery.newDoubleRange(\"latitude\", Math.toDegrees(minLat), true, Math.toDegrees(maxLat), true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(PointRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), true, null, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(PointRangeQuery.newDoubleRange(\"longitude\", null, true, Math.toDegrees(maxLng), true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(PointRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), true, Math.toDegrees(maxLng), true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","bugFix":null,"bugIntro":["1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","date":1456265720,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","sourceNew":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(DoublePoint.newRangeQuery(\"latitude\", Math.toDegrees(minLat), true, Math.toDegrees(maxLat), true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), true, null, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", null, true, Math.toDegrees(maxLng), true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), true, Math.toDegrees(maxLng), true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","sourceOld":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(PointRangeQuery.newDoubleRange(\"latitude\", Math.toDegrees(minLat), true, Math.toDegrees(maxLat), true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(PointRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), true, null, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(PointRangeQuery.newDoubleRange(\"longitude\", null, true, Math.toDegrees(maxLng), true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(PointRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), true, Math.toDegrees(maxLng), true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","sourceNew":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(DoublePoint.newRangeQuery(\"latitude\", Math.toDegrees(minLat), true, Math.toDegrees(maxLat), true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), true, null, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", null, true, Math.toDegrees(maxLng), true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), true, Math.toDegrees(maxLng), true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","sourceOld":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(PointRangeQuery.newDoubleRange(\"latitude\", Math.toDegrees(minLat), true, Math.toDegrees(maxLat), true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(PointRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), true, null, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(PointRangeQuery.newDoubleRange(\"longitude\", null, true, Math.toDegrees(maxLng), true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(PointRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), true, Math.toDegrees(maxLng), true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","date":1456306182,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","sourceNew":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(DoublePoint.newRangeQuery(\"latitude\", Math.toDegrees(minLat), true, Math.toDegrees(maxLat), true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), true, null, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", null, true, Math.toDegrees(maxLng), true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), true, Math.toDegrees(maxLng), true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","sourceOld":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(PointRangeQuery.newDoubleRange(\"latitude\", Math.toDegrees(minLat), true, Math.toDegrees(maxLat), true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(PointRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), true, null, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(PointRangeQuery.newDoubleRange(\"longitude\", null, true, Math.toDegrees(maxLng), true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(PointRangeQuery.newDoubleRange(\"longitude\", Math.toDegrees(minLng), true, Math.toDegrees(maxLng), true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","sourceNew":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(DoublePoint.newRangeQuery(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat)),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), Double.POSITIVE_INFINITY),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Double.NEGATIVE_INFINITY, Math.toDegrees(maxLng)),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng)),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","sourceOld":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(DoublePoint.newRangeQuery(\"latitude\", Math.toDegrees(minLat), true, Math.toDegrees(maxLat), true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), true, null, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", null, true, Math.toDegrees(maxLng), true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), true, Math.toDegrees(maxLng), true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","bugFix":["d3104a6ba367dfb690806b227c5ef17c42c6107b"],"bugIntro":["c7e72caffc799b265e17158ff9b0aad014849ad8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","sourceNew":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(DoublePoint.newRangeQuery(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat)),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), Double.POSITIVE_INFINITY),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Double.NEGATIVE_INFINITY, Math.toDegrees(maxLng)),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng)),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","sourceOld":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(DoublePoint.newRangeQuery(\"latitude\", Math.toDegrees(minLat), true, Math.toDegrees(maxLat), true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), true, null, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", null, true, Math.toDegrees(maxLng), true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), true, Math.toDegrees(maxLng), true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","sourceNew":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(DoublePoint.newRangeQuery(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat)),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), Double.POSITIVE_INFINITY),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Double.NEGATIVE_INFINITY, Math.toDegrees(maxLng)),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng)),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","sourceOld":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(DoublePoint.newRangeQuery(\"latitude\", Math.toDegrees(minLat), true, Math.toDegrees(maxLat), true),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), true, null, true),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", null, true, Math.toDegrees(maxLng), true),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), true, Math.toDegrees(maxLng), true),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","sourceNew":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / EARTH_RADIUS_KM;\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(DoublePoint.newRangeQuery(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat)),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), Double.POSITIVE_INFINITY),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Double.NEGATIVE_INFINITY, Math.toDegrees(maxLng)),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng)),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","sourceOld":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / (SloppyMath.earthDiameter(originLat) / 2.0);\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(DoublePoint.newRangeQuery(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat)),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), Double.POSITIVE_INFINITY),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Double.NEGATIVE_INFINITY, Math.toDegrees(maxLng)),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng)),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","bugFix":["e422c83fa76f222b42571ac39b5e38a721a6c032"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7e72caffc799b265e17158ff9b0aad014849ad8","date":1466582027,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","sourceNew":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = SloppyMath.toRadians(originLat);\n    double originLngRadians = SloppyMath.toRadians(originLng);\n\n    double angle = maxDistanceKM / EARTH_RADIUS_KM;\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > SloppyMath.toRadians(-90) && maxLat < SloppyMath.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < SloppyMath.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > SloppyMath.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, SloppyMath.toRadians(-90));\n      maxLat = Math.min(maxLat, SloppyMath.toRadians(90));\n      minLng = SloppyMath.toRadians(-180);\n      maxLng = SloppyMath.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(DoublePoint.newRangeQuery(\"latitude\", SloppyMath.toDegrees(minLat), SloppyMath.toDegrees(maxLat)),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", SloppyMath.toDegrees(minLng), Double.POSITIVE_INFINITY),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Double.NEGATIVE_INFINITY, SloppyMath.toDegrees(maxLng)),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(DoublePoint.newRangeQuery(\"longitude\", SloppyMath.toDegrees(minLng), SloppyMath.toDegrees(maxLng)),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","sourceOld":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / EARTH_RADIUS_KM;\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(DoublePoint.newRangeQuery(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat)),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), Double.POSITIVE_INFINITY),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Double.NEGATIVE_INFINITY, Math.toDegrees(maxLng)),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng)),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","bugFix":["40640359164f629dd440a47df2e145d084ce9645","1800b996d8677670482a071dcb7a48b08c423ace"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","sourceNew":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = SloppyMath.toRadians(originLat);\n    double originLngRadians = SloppyMath.toRadians(originLng);\n\n    double angle = maxDistanceKM / EARTH_RADIUS_KM;\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > SloppyMath.toRadians(-90) && maxLat < SloppyMath.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < SloppyMath.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > SloppyMath.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, SloppyMath.toRadians(-90));\n      maxLat = Math.min(maxLat, SloppyMath.toRadians(90));\n      minLng = SloppyMath.toRadians(-180);\n      maxLng = SloppyMath.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(DoublePoint.newRangeQuery(\"latitude\", SloppyMath.toDegrees(minLat), SloppyMath.toDegrees(maxLat)),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", SloppyMath.toDegrees(minLng), Double.POSITIVE_INFINITY),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Double.NEGATIVE_INFINITY, SloppyMath.toDegrees(maxLng)),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(DoublePoint.newRangeQuery(\"longitude\", SloppyMath.toDegrees(minLng), SloppyMath.toDegrees(maxLng)),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","sourceOld":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / EARTH_RADIUS_KM;\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(DoublePoint.newRangeQuery(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat)),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), Double.POSITIVE_INFINITY),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Double.NEGATIVE_INFINITY, Math.toDegrees(maxLng)),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng)),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71a92b21a4564a0dd5e0559cebf435a5fe34542e","date":1573666298,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/facet/DistanceFacetsExample#getBoundingBoxQuery(double,double,double).mjava","sourceNew":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = Math.toRadians(originLat);\n    double originLngRadians = Math.toRadians(originLng);\n\n    double angle = maxDistanceKM / EARTH_RADIUS_KM;\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > Math.toRadians(-90) && maxLat < Math.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < Math.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > Math.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, Math.toRadians(-90));\n      maxLat = Math.min(maxLat, Math.toRadians(90));\n      minLng = Math.toRadians(-180);\n      maxLng = Math.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(DoublePoint.newRangeQuery(\"latitude\", Math.toDegrees(minLat), Math.toDegrees(maxLat)),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), Double.POSITIVE_INFINITY),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Double.NEGATIVE_INFINITY, Math.toDegrees(maxLng)),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(DoublePoint.newRangeQuery(\"longitude\", Math.toDegrees(minLng), Math.toDegrees(maxLng)),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","sourceOld":"  /** Given a latitude and longitude (in degrees) and the\n   *  maximum great circle (surface of the earth) distance,\n   *  returns a simple Filter bounding box to \"fast match\"\n   *  candidates. */\n  public static Query getBoundingBoxQuery(double originLat, double originLng, double maxDistanceKM) {\n\n    // Basic bounding box geo math from\n    // http://JanMatuschek.de/LatitudeLongitudeBoundingCoordinates,\n    // licensed under creative commons 3.0:\n    // http://creativecommons.org/licenses/by/3.0\n\n    // TODO: maybe switch to recursive prefix tree instead\n    // (in lucene/spatial)?  It should be more efficient\n    // since it's a 2D trie...\n\n    // Degrees -> Radians:\n    double originLatRadians = SloppyMath.toRadians(originLat);\n    double originLngRadians = SloppyMath.toRadians(originLng);\n\n    double angle = maxDistanceKM / EARTH_RADIUS_KM;\n\n    double minLat = originLatRadians - angle;\n    double maxLat = originLatRadians + angle;\n\n    double minLng;\n    double maxLng;\n    if (minLat > SloppyMath.toRadians(-90) && maxLat < SloppyMath.toRadians(90)) {\n      double delta = Math.asin(Math.sin(angle)/Math.cos(originLatRadians));\n      minLng = originLngRadians - delta;\n      if (minLng < SloppyMath.toRadians(-180)) {\n        minLng += 2 * Math.PI;\n      }\n      maxLng = originLngRadians + delta;\n      if (maxLng > SloppyMath.toRadians(180)) {\n        maxLng -= 2 * Math.PI;\n      }\n    } else {\n      // The query includes a pole!\n      minLat = Math.max(minLat, SloppyMath.toRadians(-90));\n      maxLat = Math.min(maxLat, SloppyMath.toRadians(90));\n      minLng = SloppyMath.toRadians(-180);\n      maxLng = SloppyMath.toRadians(180);\n    }\n\n    BooleanQuery.Builder f = new BooleanQuery.Builder();\n\n    // Add latitude range filter:\n    f.add(DoublePoint.newRangeQuery(\"latitude\", SloppyMath.toDegrees(minLat), SloppyMath.toDegrees(maxLat)),\n          BooleanClause.Occur.FILTER);\n\n    // Add longitude range filter:\n    if (minLng > maxLng) {\n      // The bounding box crosses the international date\n      // line:\n      BooleanQuery.Builder lonF = new BooleanQuery.Builder();\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", SloppyMath.toDegrees(minLng), Double.POSITIVE_INFINITY),\n               BooleanClause.Occur.SHOULD);\n      lonF.add(DoublePoint.newRangeQuery(\"longitude\", Double.NEGATIVE_INFINITY, SloppyMath.toDegrees(maxLng)),\n               BooleanClause.Occur.SHOULD);\n      f.add(lonF.build(), BooleanClause.Occur.MUST);\n    } else {\n      f.add(DoublePoint.newRangeQuery(\"longitude\", SloppyMath.toDegrees(minLng), SloppyMath.toDegrees(maxLng)),\n            BooleanClause.Occur.FILTER);\n    }\n\n    return f.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["770342641f7b505eaa8dccdc666158bff2419109"],"419a8f52c6635419beb951255cacbbb281044c57":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","86cab68ee900a31d093b114182b488ea8e85c59d"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["419a8f52c6635419beb951255cacbbb281044c57","a5296efc4b319f5647b606629c093a94b23692c6"],"c7e72caffc799b265e17158ff9b0aad014849ad8":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"71a92b21a4564a0dd5e0559cebf435a5fe34542e":["c7e72caffc799b265e17158ff9b0aad014849ad8"],"770342641f7b505eaa8dccdc666158bff2419109":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c422e924212367b334b4938f1fd3e44438e88c40":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ec60431d008a694828dacb4bc3cda775b6c44a9f","c7e72caffc799b265e17158ff9b0aad014849ad8"],"ec60431d008a694828dacb4bc3cda775b6c44a9f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["419a8f52c6635419beb951255cacbbb281044c57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["419a8f52c6635419beb951255cacbbb281044c57","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"a5296efc4b319f5647b606629c093a94b23692c6":["419a8f52c6635419beb951255cacbbb281044c57","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","c422e924212367b334b4938f1fd3e44438e88c40"],"86cab68ee900a31d093b114182b488ea8e85c59d":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71a92b21a4564a0dd5e0559cebf435a5fe34542e"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["419a8f52c6635419beb951255cacbbb281044c57","86cab68ee900a31d093b114182b488ea8e85c59d"],"419a8f52c6635419beb951255cacbbb281044c57":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","d3104a6ba367dfb690806b227c5ef17c42c6107b","7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"c7e72caffc799b265e17158ff9b0aad014849ad8":["71a92b21a4564a0dd5e0559cebf435a5fe34542e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"71a92b21a4564a0dd5e0559cebf435a5fe34542e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"770342641f7b505eaa8dccdc666158bff2419109":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["770342641f7b505eaa8dccdc666158bff2419109"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"ec60431d008a694828dacb4bc3cda775b6c44a9f":["c7e72caffc799b265e17158ff9b0aad014849ad8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":[],"a5296efc4b319f5647b606629c093a94b23692c6":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"86cab68ee900a31d093b114182b488ea8e85c59d":["419a8f52c6635419beb951255cacbbb281044c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}