{"path":"solr/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","commits":[{"id":"1774e2854ef0f77de7f31ba1d9586139928e06fe","date":1285965652,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    field = (String) config.get(FIELD);\n    \n    float minAccuracy = DEFAULT_ACCURACY;\n    String accuracy = (String) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = Float.parseFloat(accuracy);\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    String edits = (String) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = Integer.parseInt(edits);\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    String prefix = (String) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = Integer.parseInt(prefix);\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    String inspections = (String) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = Integer.parseInt(inspections);\n    \n    float minThreshold = DEFAULT_THRESHOLD;\n    String threshold = (String) config.get(THRESHOLD);\n    if (threshold != null)\n      minThreshold = Float.parseFloat(threshold);\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    String queryLength = (String) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = Integer.parseInt(queryLength);\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    String queryFreq = (String) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = Float.parseFloat(queryFreq);\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ef7724982540101e7fe429e8eb67b97f3dcac862","ef7724982540101e7fe429e8eb67b97f3dcac862","ef7724982540101e7fe429e8eb67b97f3dcac862"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    field = (String) config.get(FIELD);\n    \n    float minAccuracy = DEFAULT_ACCURACY;\n    String accuracy = (String) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = Float.parseFloat(accuracy);\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    String edits = (String) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = Integer.parseInt(edits);\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    String prefix = (String) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = Integer.parseInt(prefix);\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    String inspections = (String) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = Integer.parseInt(inspections);\n    \n    float minThreshold = DEFAULT_THRESHOLD;\n    String threshold = (String) config.get(THRESHOLD);\n    if (threshold != null)\n      minThreshold = Float.parseFloat(threshold);\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    String queryLength = (String) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = Integer.parseInt(queryLength);\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    String queryFreq = (String) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = Float.parseFloat(queryFreq);\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1f73d659ca2ba1a1656881663797f0e5b61f3fc","date":1307414322,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    field = (String) config.get(FIELD);\n    \n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    field = (String) config.get(FIELD);\n    \n    float minAccuracy = DEFAULT_ACCURACY;\n    String accuracy = (String) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = Float.parseFloat(accuracy);\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    String edits = (String) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = Integer.parseInt(edits);\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    String prefix = (String) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = Integer.parseInt(prefix);\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    String inspections = (String) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = Integer.parseInt(inspections);\n    \n    float minThreshold = DEFAULT_THRESHOLD;\n    String threshold = (String) config.get(THRESHOLD);\n    if (threshold != null)\n      minThreshold = Float.parseFloat(threshold);\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    String queryLength = (String) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = Integer.parseInt(queryLength);\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    String queryFreq = (String) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = Float.parseFloat(queryFreq);\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","bugFix":null,"bugIntro":["6e665d0b783c489bf77410a97d94a92cea421df3","6e665d0b783c489bf77410a97d94a92cea421df3","6e665d0b783c489bf77410a97d94a92cea421df3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    field = (String) config.get(FIELD);\n    \n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    field = (String) config.get(FIELD);\n    \n    float minAccuracy = DEFAULT_ACCURACY;\n    String accuracy = (String) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = Float.parseFloat(accuracy);\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    String edits = (String) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = Integer.parseInt(edits);\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    String prefix = (String) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = Integer.parseInt(prefix);\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    String inspections = (String) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = Integer.parseInt(inspections);\n    \n    float minThreshold = DEFAULT_THRESHOLD;\n    String threshold = (String) config.get(THRESHOLD);\n    if (threshold != null)\n      minThreshold = Float.parseFloat(threshold);\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    String queryLength = (String) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = Integer.parseInt(queryLength);\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    String queryFreq = (String) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = Float.parseFloat(queryFreq);\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    field = (String) config.get(FIELD);\n    \n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    field = (String) config.get(FIELD);\n    \n    float minAccuracy = DEFAULT_ACCURACY;\n    String accuracy = (String) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = Float.parseFloat(accuracy);\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    String edits = (String) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = Integer.parseInt(edits);\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    String prefix = (String) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = Integer.parseInt(prefix);\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    String inspections = (String) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = Integer.parseInt(inspections);\n    \n    float minThreshold = DEFAULT_THRESHOLD;\n    String threshold = (String) config.get(THRESHOLD);\n    if (threshold != null)\n      minThreshold = Float.parseFloat(threshold);\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    String queryLength = (String) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = Integer.parseInt(queryLength);\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    String queryFreq = (String) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = Float.parseFloat(queryFreq);\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    field = (String) config.get(FIELD);\n    \n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    field = (String) config.get(FIELD);\n    \n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    field = (String) config.get(FIELD);\n    \n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    field = (String) config.get(FIELD);\n    \n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/DirectSolrSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    field = (String) config.get(FIELD);\n    \n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    LOG.info(\"init: \" + config);\n    String name = super.init(config, core);\n    \n    Comparator<SuggestWord> comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    if (compClass != null) {\n      if (compClass.equalsIgnoreCase(SCORE_COMP))\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      else if (compClass.equalsIgnoreCase(FREQ_COMP))\n        comp = new SuggestWordFrequencyComparator();\n      else //must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n    }\n    \n    StringDistance sd = DirectSpellChecker.INTERNAL_LEVENSHTEIN;\n    String distClass = (String) config.get(STRING_DISTANCE);\n    if (distClass != null && !distClass.equalsIgnoreCase(INTERNAL_DISTANCE))\n      sd = (StringDistance) core.getResourceLoader().newInstance(distClass);\n\n    field = (String) config.get(FIELD);\n    \n    float minAccuracy = DEFAULT_ACCURACY;\n    Float accuracy = (Float) config.get(ACCURACY);\n    if (accuracy != null)\n      minAccuracy = accuracy;\n    \n    int maxEdits = DEFAULT_MAXEDITS;\n    Integer edits = (Integer) config.get(MAXEDITS);\n    if (edits != null)\n      maxEdits = edits;\n    \n    int minPrefix = DEFAULT_MINPREFIX;\n    Integer prefix = (Integer) config.get(MINPREFIX);\n    if (prefix != null)\n      minPrefix = prefix;\n    \n    int maxInspections = DEFAULT_MAXINSPECTIONS;\n    Integer inspections = (Integer) config.get(MAXINSPECTIONS);\n    if (inspections != null)\n      maxInspections = inspections;\n    \n    float minThreshold = DEFAULT_THRESHOLD_TOKEN_FREQUENCY;\n    Float threshold = (Float) config.get(THRESHOLD_TOKEN_FREQUENCY);\n    if (threshold != null)\n      minThreshold = threshold;\n    \n    int minQueryLength = DEFAULT_MINQUERYLENGTH;\n    Integer queryLength = (Integer) config.get(MINQUERYLENGTH);\n    if (queryLength != null)\n      minQueryLength = queryLength;\n    \n    float maxQueryFrequency = DEFAULT_MAXQUERYFREQUENCY;\n    Float queryFreq = (Float) config.get(MAXQUERYFREQUENCY);\n    if (queryFreq != null)\n      maxQueryFrequency = queryFreq;\n    \n    checker.setComparator(comp);\n    checker.setDistance(sd);\n    checker.setMaxEdits(maxEdits);\n    checker.setMinPrefix(minPrefix);\n    checker.setAccuracy(minAccuracy);\n    checker.setThresholdFrequency(minThreshold);\n    checker.setMaxInspections(maxInspections);\n    checker.setMinQueryLength(minQueryLength);\n    checker.setMaxQueryFrequency(maxQueryFrequency);\n    checker.setLowerCaseTerms(false);\n    \n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["1774e2854ef0f77de7f31ba1d9586139928e06fe","b1f73d659ca2ba1a1656881663797f0e5b61f3fc"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"c26f00b574427b55127e869b935845554afde1fa":["b1f73d659ca2ba1a1656881663797f0e5b61f3fc","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1774e2854ef0f77de7f31ba1d9586139928e06fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["1774e2854ef0f77de7f31ba1d9586139928e06fe","b1f73d659ca2ba1a1656881663797f0e5b61f3fc"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["b1f73d659ca2ba1a1656881663797f0e5b61f3fc"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1774e2854ef0f77de7f31ba1d9586139928e06fe"],"b1f73d659ca2ba1a1656881663797f0e5b61f3fc":["1774e2854ef0f77de7f31ba1d9586139928e06fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1774e2854ef0f77de7f31ba1d9586139928e06fe","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1774e2854ef0f77de7f31ba1d9586139928e06fe":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b1f73d659ca2ba1a1656881663797f0e5b61f3fc"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b1f73d659ca2ba1a1656881663797f0e5b61f3fc":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c26f00b574427b55127e869b935845554afde1fa","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}