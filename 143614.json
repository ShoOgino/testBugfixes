{"path":"src/java/org/apache/lucene/search/BooleanScorer#nextDoc().mjava","commits":[{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"  public int nextDoc() throws IOException {\n    boolean more;\n    do {\n      while (bucketTable.first != null) {         // more queued\n        current = bucketTable.first;\n        bucketTable.first = current.next;         // pop the queue\n\n        // check prohibited & required, and minNrShouldMatch\n        if ((current.bits & prohibitedMask) == 0 &&\n            (current.bits & requiredMask) == requiredMask &&\n            current.coord >= minNrShouldMatch) {\n          return doc = current.doc;\n        }\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        Scorer scorer = sub.scorer;\n        sub.collector.setScorer(scorer);\n        int doc = scorer.docID();\n        while (doc < end) {\n          sub.collector.collect(doc);\n          doc = scorer.nextDoc();\n        }\n        more |= (doc != NO_MORE_DOCS);\n      }\n    } while (bucketTable.first != null || more);\n\n    return doc = NO_MORE_DOCS;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"486cfd5a3f7481938475c113415d896f7a74a4a9","date":1256682581,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer#nextDoc().mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer#nextDoc().mjava","sourceNew":"  @Override\n  public int nextDoc() throws IOException {\n    boolean more;\n    do {\n      while (bucketTable.first != null) {         // more queued\n        current = bucketTable.first;\n        bucketTable.first = current.next;         // pop the queue\n\n        // check prohibited & required, and minNrShouldMatch\n        if ((current.bits & prohibitedMask) == 0 &&\n            (current.bits & requiredMask) == requiredMask &&\n            current.coord >= minNrShouldMatch) {\n          return doc = current.doc;\n        }\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        Scorer scorer = sub.scorer;\n        sub.collector.setScorer(scorer);\n        int doc = scorer.docID();\n        while (doc < end) {\n          sub.collector.collect(doc);\n          doc = scorer.nextDoc();\n        }\n        more |= (doc != NO_MORE_DOCS);\n      }\n    } while (bucketTable.first != null || more);\n\n    return doc = NO_MORE_DOCS;\n  }\n\n","sourceOld":"  public int nextDoc() throws IOException {\n    boolean more;\n    do {\n      while (bucketTable.first != null) {         // more queued\n        current = bucketTable.first;\n        bucketTable.first = current.next;         // pop the queue\n\n        // check prohibited & required, and minNrShouldMatch\n        if ((current.bits & prohibitedMask) == 0 &&\n            (current.bits & requiredMask) == requiredMask &&\n            current.coord >= minNrShouldMatch) {\n          return doc = current.doc;\n        }\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        Scorer scorer = sub.scorer;\n        sub.collector.setScorer(scorer);\n        int doc = scorer.docID();\n        while (doc < end) {\n          sub.collector.collect(doc);\n          doc = scorer.nextDoc();\n        }\n        more |= (doc != NO_MORE_DOCS);\n      }\n    } while (bucketTable.first != null || more);\n\n    return doc = NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer#nextDoc().mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer#nextDoc().mjava","sourceNew":"  @Override\n  public int nextDoc() throws IOException {\n    boolean more;\n    do {\n      while (bucketTable.first != null) {         // more queued\n        current = bucketTable.first;\n        bucketTable.first = current.next;         // pop the queue\n\n        // check prohibited & required, and minNrShouldMatch\n        if ((current.bits & prohibitedMask) == 0 &&\n            (current.bits & requiredMask) == requiredMask &&\n            current.coord >= minNrShouldMatch) {\n          return doc = current.doc;\n        }\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        Scorer scorer = sub.scorer;\n        sub.collector.setScorer(scorer);\n        int doc = scorer.docID();\n        while (doc < end) {\n          sub.collector.collect(doc);\n          doc = scorer.nextDoc();\n        }\n        more |= (doc != NO_MORE_DOCS);\n      }\n    } while (bucketTable.first != null || more);\n\n    return doc = NO_MORE_DOCS;\n  }\n\n","sourceOld":"  @Override\n  public int nextDoc() throws IOException {\n    boolean more;\n    do {\n      while (bucketTable.first != null) {         // more queued\n        current = bucketTable.first;\n        bucketTable.first = current.next;         // pop the queue\n\n        // check prohibited & required, and minNrShouldMatch\n        if ((current.bits & prohibitedMask) == 0 &&\n            (current.bits & requiredMask) == requiredMask &&\n            current.coord >= minNrShouldMatch) {\n          return doc = current.doc;\n        }\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        Scorer scorer = sub.scorer;\n        sub.collector.setScorer(scorer);\n        int doc = scorer.docID();\n        while (doc < end) {\n          sub.collector.collect(doc);\n          doc = scorer.nextDoc();\n        }\n        more |= (doc != NO_MORE_DOCS);\n      }\n    } while (bucketTable.first != null || more);\n\n    return doc = NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["30a558487f2298c2c19ceca9103c1b6865d64708"],"30a558487f2298c2c19ceca9103c1b6865d64708":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["486cfd5a3f7481938475c113415d896f7a74a4a9"]},"commit2Childs":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"30a558487f2298c2c19ceca9103c1b6865d64708":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30a558487f2298c2c19ceca9103c1b6865d64708"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}