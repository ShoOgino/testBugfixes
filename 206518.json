{"path":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","commits":[{"id":"d9d5abf772262a05c74afddcadc95c4bdab07f1f","date":1381747682,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range]).mjava","sourceNew":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrServer) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrServer baseServer = new HttpSolrServer(baseUrl);\n    baseServer.setConnectionTimeout(15000);\n    baseServer.setSoTimeout((int) (CollectionsHandler.DEFAULT_ZK_TIMEOUT * 5));\n    baseServer.request(request);\n  }\n\n","sourceOld":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    params.set(\"shard\", shardId);\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrServer) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrServer baseServer = new HttpSolrServer(baseUrl);\n    baseServer.setConnectionTimeout(15000);\n    baseServer.setSoTimeout((int) (CollectionsHandler.DEFAULT_ZK_TIMEOUT * 5));\n    baseServer.request(request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c3e46d3417c353d7be14509cfab11b315927fe","date":1382292560,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","sourceNew":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrServer) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrServer baseServer = new HttpSolrServer(baseUrl);\n    baseServer.setConnectionTimeout(15000);\n    baseServer.setSoTimeout(60000);\n    baseServer.request(request);\n  }\n\n","sourceOld":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrServer) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrServer baseServer = new HttpSolrServer(baseUrl);\n    baseServer.setConnectionTimeout(15000);\n    baseServer.setSoTimeout((int) (CollectionsHandler.DEFAULT_ZK_TIMEOUT * 5));\n    baseServer.request(request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c14483654729a6875492f3eb2efbfb706e73de77","date":1382340285,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","sourceNew":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrServer) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrServer baseServer = new HttpSolrServer(baseUrl);\n    baseServer.setConnectionTimeout(15000);\n    baseServer.setSoTimeout(60000 * 5);\n    baseServer.request(request);\n  }\n\n","sourceOld":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrServer) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrServer baseServer = new HttpSolrServer(baseUrl);\n    baseServer.setConnectionTimeout(15000);\n    baseServer.setSoTimeout(60000);\n    baseServer.request(request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c7856260bc28f285ae7bfefa99b28db4dca6daf","date":1395253500,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","sourceNew":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrServer) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrServer baseServer = new HttpSolrServer(baseUrl);\n    baseServer.setConnectionTimeout(15000);\n    baseServer.setSoTimeout(60000 * 5);\n    baseServer.request(request);\n    baseServer.shutdown();\n  }\n\n","sourceOld":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrServer) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrServer baseServer = new HttpSolrServer(baseUrl);\n    baseServer.setConnectionTimeout(15000);\n    baseServer.setSoTimeout(60000 * 5);\n    baseServer.request(request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6405051870d2ecb1a3a70a4814c30820ee24a08d","date":1408917473,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","sourceNew":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrServer) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrServer baseServer = new HttpSolrServer(baseUrl);\n    baseServer.setConnectionTimeout(30000);\n    baseServer.setSoTimeout(60000 * 5);\n    baseServer.request(request);\n    baseServer.shutdown();\n  }\n\n","sourceOld":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrServer) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrServer baseServer = new HttpSolrServer(baseUrl);\n    baseServer.setConnectionTimeout(15000);\n    baseServer.setSoTimeout(60000 * 5);\n    baseServer.request(request);\n    baseServer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","sourceNew":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrClient baseClient = new HttpSolrClient(baseUrl);\n    baseClient.setConnectionTimeout(30000);\n    baseClient.setSoTimeout(60000 * 5);\n    baseClient.request(request);\n    baseClient.shutdown();\n  }\n\n","sourceOld":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrServer) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrServer baseServer = new HttpSolrServer(baseUrl);\n    baseServer.setConnectionTimeout(30000);\n    baseServer.setSoTimeout(60000 * 5);\n    baseServer.request(request);\n    baseServer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","sourceNew":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrClient baseServer = new HttpSolrClient(baseUrl);\n    try {\n      baseServer.setConnectionTimeout(30000);\n      baseServer.setSoTimeout(60000 * 5);\n      baseServer.request(request);\n    } finally {\n      baseServer.shutdown();\n    }\n  }\n\n","sourceOld":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrClient baseClient = new HttpSolrClient(baseUrl);\n    baseClient.setConnectionTimeout(30000);\n    baseClient.setSoTimeout(60000 * 5);\n    baseClient.request(request);\n    baseClient.shutdown();\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","sourceNew":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = new HttpSolrClient(baseUrl)) {\n      baseServer.setConnectionTimeout(30000);\n      baseServer.setSoTimeout(60000 * 5);\n      baseServer.request(request);\n    }\n  }\n\n","sourceOld":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    HttpSolrClient baseServer = new HttpSolrClient(baseUrl);\n    try {\n      baseServer.setConnectionTimeout(30000);\n      baseServer.setSoTimeout(60000 * 5);\n      baseServer.request(request);\n    } finally {\n      baseServer.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","sourceNew":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl)) {\n      baseServer.setConnectionTimeout(30000);\n      baseServer.setSoTimeout(60000 * 5);\n      baseServer.request(request);\n    }\n  }\n\n","sourceOld":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = new HttpSolrClient(baseUrl)) {\n      baseServer.setConnectionTimeout(30000);\n      baseServer.setSoTimeout(60000 * 5);\n      baseServer.request(request);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","sourceNew":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl)) {\n      baseServer.setConnectionTimeout(30000);\n      baseServer.setSoTimeout(60000 * 5);\n      baseServer.request(request);\n    }\n  }\n\n","sourceOld":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = new HttpSolrClient(baseUrl)) {\n      baseServer.setConnectionTimeout(30000);\n      baseServer.setSoTimeout(60000 * 5);\n      baseServer.request(request);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","sourceNew":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl, 30000, 60000 * 5)) {\n      baseServer.request(request);\n    }\n  }\n\n","sourceOld":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl)) {\n      baseServer.setConnectionTimeout(30000);\n      baseServer.setSoTimeout(60000 * 5);\n      baseServer.request(request);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","sourceNew":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl, 30000, 60000 * 5)) {\n      baseServer.request(request);\n    }\n  }\n\n","sourceOld":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl)) {\n      baseServer.setConnectionTimeout(30000);\n      baseServer.setSoTimeout(60000 * 5);\n      baseServer.request(request);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","sourceNew":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.getSolrClient()).getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl, 30000, 60000 * 5)) {\n      baseServer.request(request);\n    }\n  }\n\n","sourceOld":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl, 30000, 60000 * 5)) {\n      baseServer.request(request);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#splitShard(String,String,List[DocRouter.Range],String).mjava","sourceNew":null,"sourceOld":"  protected void splitShard(String collection, String shardId, List<DocRouter.Range> subRanges, String splitKey) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionParams.CollectionAction.SPLITSHARD.toString());\n    params.set(\"collection\", collection);\n    if (shardId != null)  {\n      params.set(\"shard\", shardId);\n    }\n    if (subRanges != null)  {\n      StringBuilder ranges = new StringBuilder();\n      for (int i = 0; i < subRanges.size(); i++) {\n        DocRouter.Range subRange = subRanges.get(i);\n        ranges.append(subRange.toString());\n        if (i < subRanges.size() - 1)\n          ranges.append(\",\");\n      }\n      params.set(\"ranges\", ranges.toString());\n    }\n    if (splitKey != null) {\n      params.set(\"split.key\", splitKey);\n    }\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    String baseUrl = ((HttpSolrClient) shardToJetty.get(SHARD1).get(0).client.solrClient)\n        .getBaseURL();\n    baseUrl = baseUrl.substring(0, baseUrl.length() - \"collection1\".length());\n\n    try (HttpSolrClient baseServer = getHttpSolrClient(baseUrl, 30000, 60000 * 5)) {\n      baseServer.request(request);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["43d1e498704edd2bba13548a189eed4dfccff11b","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["43d1e498704edd2bba13548a189eed4dfccff11b"],"bafca15d8e408346a67f4282ad1143b88023893b":["6405051870d2ecb1a3a70a4814c30820ee24a08d"],"a3c3e46d3417c353d7be14509cfab11b315927fe":["d9d5abf772262a05c74afddcadc95c4bdab07f1f"],"43d1e498704edd2bba13548a189eed4dfccff11b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","43d1e498704edd2bba13548a189eed4dfccff11b"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["c14483654729a6875492f3eb2efbfb706e73de77"],"c14483654729a6875492f3eb2efbfb706e73de77":["a3c3e46d3417c353d7be14509cfab11b315927fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9d5abf772262a05c74afddcadc95c4bdab07f1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cc3b13b430571c2e169f98fe38e1e7666f88522d","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"6405051870d2ecb1a3a70a4814c30820ee24a08d":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"bafca15d8e408346a67f4282ad1143b88023893b":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"a3c3e46d3417c353d7be14509cfab11b315927fe":["c14483654729a6875492f3eb2efbfb706e73de77"],"43d1e498704edd2bba13548a189eed4dfccff11b":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["6405051870d2ecb1a3a70a4814c30820ee24a08d"],"c14483654729a6875492f3eb2efbfb706e73de77":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9d5abf772262a05c74afddcadc95c4bdab07f1f"],"d9d5abf772262a05c74afddcadc95c4bdab07f1f":["a3c3e46d3417c353d7be14509cfab11b315927fe"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["43d1e498704edd2bba13548a189eed4dfccff11b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"6405051870d2ecb1a3a70a4814c30820ee24a08d":["bafca15d8e408346a67f4282ad1143b88023893b"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}