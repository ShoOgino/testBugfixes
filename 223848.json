{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(SolrCore,String,String,String,String,boolean).mjava","commits":[{"id":"a7035935aa89f6951286e9005cbeb16e89a082a2","date":1385258396,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(SolrCore,String,String,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(String,String,String,String,boolean).mjava","sourceNew":"  private static HttpClient createHttpClient(SolrCore core, String connTimeout, String readTimeout, String httpBasicAuthUser, String httpBasicAuthPassword, boolean useCompression) {\n    final ModifiableSolrParams httpClientParams = new ModifiableSolrParams();\n    httpClientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, connTimeout != null ? connTimeout : \"5000\");\n    httpClientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, readTimeout != null ? readTimeout : \"20000\");\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_USER, httpBasicAuthUser);\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_PASS, httpBasicAuthPassword);\n    httpClientParams.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, useCompression);\n\n    HttpClient httpClient = HttpClientUtil.createClient(httpClientParams, core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getConnectionManager());\n\n    return httpClient;\n  }\n\n","sourceOld":"  private static synchronized HttpClient createHttpClient(String connTimeout, String readTimeout, String httpBasicAuthUser, String httpBasicAuthPassword, boolean useCompression) {\n    if (connTimeout == null && readTimeout == null && client != null)  return client;\n    final ModifiableSolrParams httpClientParams = new ModifiableSolrParams();\n    httpClientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, connTimeout != null ? connTimeout : \"5000\");\n    httpClientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, readTimeout != null ? readTimeout : \"20000\");\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_USER, httpBasicAuthUser);\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_PASS, httpBasicAuthPassword);\n    httpClientParams.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, useCompression);\n    // Keeping a very high number so that if you have a large number of cores\n    // no requests are kept waiting for an idle connection.\n    httpClientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, 10000);\n    httpClientParams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, 10000);\n    HttpClient httpClient = HttpClientUtil.createClient(httpClientParams);\n    if (client == null && connTimeout == null && readTimeout == null) client = httpClient;\n    return httpClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(SolrCore,String,String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static HttpClient createHttpClient(SolrCore core, String connTimeout, String readTimeout, String httpBasicAuthUser, String httpBasicAuthPassword, boolean useCompression) {\n    final ModifiableSolrParams httpClientParams = new ModifiableSolrParams();\n    httpClientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, connTimeout != null ? connTimeout : \"5000\");\n    httpClientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, readTimeout != null ? readTimeout : \"20000\");\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_USER, httpBasicAuthUser);\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_PASS, httpBasicAuthPassword);\n    httpClientParams.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, useCompression);\n\n    HttpClient httpClient = HttpClientUtil.createClient(httpClientParams, core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getConnectionManager());\n\n    return httpClient;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dea8e36e8c36d610840396c282a5affe3f722f4e","date":1422297045,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(SolrCore,String,String,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(SolrCore,String,String,String,String,boolean).mjava","sourceNew":"  private static HttpClient createHttpClient(SolrCore core, String connTimeout, String readTimeout, String httpBasicAuthUser, String httpBasicAuthPassword, boolean useCompression) {\n    final ModifiableSolrParams httpClientParams = new ModifiableSolrParams();\n    httpClientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, connTimeout != null ? connTimeout : \"5000\");\n    httpClientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, readTimeout != null ? readTimeout : \"20000\");\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_USER, httpBasicAuthUser);\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_PASS, httpBasicAuthPassword);\n    httpClientParams.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, useCompression);\n\n    return HttpClientUtil.createClient(httpClientParams, core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getConnectionManager());\n  }\n\n","sourceOld":"  private static HttpClient createHttpClient(SolrCore core, String connTimeout, String readTimeout, String httpBasicAuthUser, String httpBasicAuthPassword, boolean useCompression) {\n    final ModifiableSolrParams httpClientParams = new ModifiableSolrParams();\n    httpClientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, connTimeout != null ? connTimeout : \"5000\");\n    httpClientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, readTimeout != null ? readTimeout : \"20000\");\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_USER, httpBasicAuthUser);\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_PASS, httpBasicAuthPassword);\n    httpClientParams.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, useCompression);\n\n    HttpClient httpClient = HttpClientUtil.createClient(httpClientParams, core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getConnectionManager());\n\n    return httpClient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":5,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#createHttpClient(SolrCore,String,String,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(SolrCore,String,String,String,String,boolean).mjava","sourceNew":"  private static HttpClient createHttpClient(SolrCore core, String connTimeout, String readTimeout, String httpBasicAuthUser, String httpBasicAuthPassword, boolean useCompression) {\n    final ModifiableSolrParams httpClientParams = new ModifiableSolrParams();\n    httpClientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, connTimeout != null ? connTimeout : \"5000\");\n    httpClientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, readTimeout != null ? readTimeout : \"20000\");\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_USER, httpBasicAuthUser);\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_PASS, httpBasicAuthPassword);\n    httpClientParams.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, useCompression);\n\n    return HttpClientUtil.createClient(httpClientParams, core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getConnectionManager());\n  }\n\n","sourceOld":"  private static HttpClient createHttpClient(SolrCore core, String connTimeout, String readTimeout, String httpBasicAuthUser, String httpBasicAuthPassword, boolean useCompression) {\n    final ModifiableSolrParams httpClientParams = new ModifiableSolrParams();\n    httpClientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, connTimeout != null ? connTimeout : \"5000\");\n    httpClientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, readTimeout != null ? readTimeout : \"20000\");\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_USER, httpBasicAuthUser);\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_PASS, httpBasicAuthPassword);\n    httpClientParams.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, useCompression);\n\n    return HttpClientUtil.createClient(httpClientParams, core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getConnectionManager());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":5,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#createHttpClient(SolrCore,String,String,String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#createHttpClient(SolrCore,String,String,String,String,boolean).mjava","sourceNew":"  private static HttpClient createHttpClient(SolrCore core, String connTimeout, String readTimeout, String httpBasicAuthUser, String httpBasicAuthPassword, boolean useCompression) {\n    final ModifiableSolrParams httpClientParams = new ModifiableSolrParams();\n    httpClientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, connTimeout != null ? connTimeout : \"5000\");\n    httpClientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, readTimeout != null ? readTimeout : \"20000\");\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_USER, httpBasicAuthUser);\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_PASS, httpBasicAuthPassword);\n    httpClientParams.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, useCompression);\n\n    return HttpClientUtil.createClient(httpClientParams, core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getConnectionManager());\n  }\n\n","sourceOld":"  private static HttpClient createHttpClient(SolrCore core, String connTimeout, String readTimeout, String httpBasicAuthUser, String httpBasicAuthPassword, boolean useCompression) {\n    final ModifiableSolrParams httpClientParams = new ModifiableSolrParams();\n    httpClientParams.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, connTimeout != null ? connTimeout : \"5000\");\n    httpClientParams.set(HttpClientUtil.PROP_SO_TIMEOUT, readTimeout != null ? readTimeout : \"20000\");\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_USER, httpBasicAuthUser);\n    httpClientParams.set(HttpClientUtil.PROP_BASIC_AUTH_PASS, httpBasicAuthPassword);\n    httpClientParams.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, useCompression);\n\n    return HttpClientUtil.createClient(httpClientParams, core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getConnectionManager());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["dea8e36e8c36d610840396c282a5affe3f722f4e","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["dea8e36e8c36d610840396c282a5affe3f722f4e"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["a7035935aa89f6951286e9005cbeb16e89a082a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a7035935aa89f6951286e9005cbeb16e89a082a2"],"a7035935aa89f6951286e9005cbeb16e89a082a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20f6b7cff3771384f27af0f059795d7e64aff6b9"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","a7035935aa89f6951286e9005cbeb16e89a082a2"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a7035935aa89f6951286e9005cbeb16e89a082a2":["dea8e36e8c36d610840396c282a5affe3f722f4e","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}