{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#partition(int,int,int,int,MutablePointsReader,int,int,int,byte[],byte[]).mjava","commits":[{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#partition(int,int,int,int,MutablePointsReader,int,int,int,byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Partition points around {@code mid}. All values on the left must be less\n   *  than or equal to it and all values on the right must be greater than or\n   *  equal to it. */\n  static void partition(int maxDoc, int splitDim, int bytesPerDim, int commonPrefixLen,\n      MutablePointsReader reader, int from, int to, int mid,\n      byte[] scratch1, byte[] scratch2) {\n    final int offset = splitDim * bytesPerDim + commonPrefixLen;\n    final int cmpBytes = bytesPerDim - commonPrefixLen;\n    final int bitsPerDocId = PackedInts.bitsRequired(maxDoc - 1);\n    new RadixSelector(cmpBytes + (bitsPerDocId + 7) / 8) {\n\n      @Override\n      protected Selector getFallbackSelector(int k) {\n        return new IntroSelector() {\n\n          final byte[] pivot = scratch1;\n          int pivotDoc;\n\n          @Override\n          protected void swap(int i, int j) {\n            reader.swap(i, j);\n          }\n\n          @Override\n          protected void setPivot(int i) {\n            reader.getValue(i, pivot);\n            pivotDoc = reader.getDocID(i);\n          }\n\n          @Override\n          protected int comparePivot(int j) {\n            if (k < cmpBytes) {\n              reader.getValue(j, scratch2);\n              int cmp = StringHelper.compare(cmpBytes - k, pivot, offset + k, scratch2, offset + k);\n              if (cmp != 0) {\n                return cmp;\n              }\n            }\n            return pivotDoc - reader.getDocID(j);\n          }\n        };\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected int byteAt(int i, int k) {\n        if (k < cmpBytes) {\n          return Byte.toUnsignedInt(reader.getByteAt(i, offset + k));\n        } else {\n          final int shift = bitsPerDocId - ((k - cmpBytes + 1) << 3);\n          return (reader.getDocID(i) >>> Math.max(0, shift)) & 0xff;\n        }\n      }\n    }.select(from, to, mid);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a20457919db052812998f60294d17daa883ff972","date":1470227748,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#partition(int,int,int,int,MutablePointsReader,int,int,int,BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#partition(int,int,int,int,MutablePointsReader,int,int,int,byte[],byte[]).mjava","sourceNew":"  /** Partition points around {@code mid}. All values on the left must be less\n   *  than or equal to it and all values on the right must be greater than or\n   *  equal to it. */\n  static void partition(int maxDoc, int splitDim, int bytesPerDim, int commonPrefixLen,\n      MutablePointsReader reader, int from, int to, int mid,\n      BytesRef scratch1, BytesRef scratch2) {\n    final int offset = splitDim * bytesPerDim + commonPrefixLen;\n    final int cmpBytes = bytesPerDim - commonPrefixLen;\n    final int bitsPerDocId = PackedInts.bitsRequired(maxDoc - 1);\n    new RadixSelector(cmpBytes + (bitsPerDocId + 7) / 8) {\n\n      @Override\n      protected Selector getFallbackSelector(int k) {\n        return new IntroSelector() {\n\n          final BytesRef pivot = scratch1;\n          int pivotDoc;\n\n          @Override\n          protected void swap(int i, int j) {\n            reader.swap(i, j);\n          }\n\n          @Override\n          protected void setPivot(int i) {\n            reader.getValue(i, pivot);\n            pivotDoc = reader.getDocID(i);\n          }\n\n          @Override\n          protected int comparePivot(int j) {\n            if (k < cmpBytes) {\n              reader.getValue(j, scratch2);\n              int cmp = StringHelper.compare(cmpBytes - k, pivot.bytes, pivot.offset + offset + k, scratch2.bytes, scratch2.offset + offset + k);\n              if (cmp != 0) {\n                return cmp;\n              }\n            }\n            return pivotDoc - reader.getDocID(j);\n          }\n        };\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected int byteAt(int i, int k) {\n        if (k < cmpBytes) {\n          return Byte.toUnsignedInt(reader.getByteAt(i, offset + k));\n        } else {\n          final int shift = bitsPerDocId - ((k - cmpBytes + 1) << 3);\n          return (reader.getDocID(i) >>> Math.max(0, shift)) & 0xff;\n        }\n      }\n    }.select(from, to, mid);\n  }\n\n","sourceOld":"  /** Partition points around {@code mid}. All values on the left must be less\n   *  than or equal to it and all values on the right must be greater than or\n   *  equal to it. */\n  static void partition(int maxDoc, int splitDim, int bytesPerDim, int commonPrefixLen,\n      MutablePointsReader reader, int from, int to, int mid,\n      byte[] scratch1, byte[] scratch2) {\n    final int offset = splitDim * bytesPerDim + commonPrefixLen;\n    final int cmpBytes = bytesPerDim - commonPrefixLen;\n    final int bitsPerDocId = PackedInts.bitsRequired(maxDoc - 1);\n    new RadixSelector(cmpBytes + (bitsPerDocId + 7) / 8) {\n\n      @Override\n      protected Selector getFallbackSelector(int k) {\n        return new IntroSelector() {\n\n          final byte[] pivot = scratch1;\n          int pivotDoc;\n\n          @Override\n          protected void swap(int i, int j) {\n            reader.swap(i, j);\n          }\n\n          @Override\n          protected void setPivot(int i) {\n            reader.getValue(i, pivot);\n            pivotDoc = reader.getDocID(i);\n          }\n\n          @Override\n          protected int comparePivot(int j) {\n            if (k < cmpBytes) {\n              reader.getValue(j, scratch2);\n              int cmp = StringHelper.compare(cmpBytes - k, pivot, offset + k, scratch2, offset + k);\n              if (cmp != 0) {\n                return cmp;\n              }\n            }\n            return pivotDoc - reader.getDocID(j);\n          }\n        };\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected int byteAt(int i, int k) {\n        if (k < cmpBytes) {\n          return Byte.toUnsignedInt(reader.getByteAt(i, offset + k));\n        } else {\n          final int shift = bitsPerDocId - ((k - cmpBytes + 1) << 3);\n          return (reader.getDocID(i) >>> Math.max(0, shift)) & 0xff;\n        }\n      }\n    }.select(from, to, mid);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a20457919db052812998f60294d17daa883ff972":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a20457919db052812998f60294d17daa883ff972"]},"commit2Childs":{"a20457919db052812998f60294d17daa883ff972":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["a20457919db052812998f60294d17daa883ff972"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}