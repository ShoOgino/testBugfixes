{"path":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testBasic().mjava","commits":[{"id":"4d9aa91d3fdd25528bac3b2e6115d54fc2f28753","date":1416999434,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasic() throws Exception {\n    ReindexingReader reindexer = getReindexer(createTempDir());\n\n    // Start with initial empty commit:\n    reindexer.commit();\n\n    Document doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 1 doc\");\n    reindexer.mgr.maybeRefresh();\n    DirectoryReader r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testNumericRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n    //reindexer.printRefCounts();\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 2 docs\");\n    reindexer.mgr.maybeRefresh();\n    //reindexer.printRefCounts();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testNumericRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: forceMerge\");\n    reindexer.w.forceMerge(1);\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    if (DEBUG) System.out.println(\"TEST: refresh after forceMerge\");\n    reindexer.mgr.maybeRefresh();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testNumericRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: close writer\");\n    reindexer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    ReindexingReader reindexer = getReindexer(createTempDir());\n\n    // Start with initial empty commit:\n    reindexer.commit();\n\n    Document doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 1 doc\");\n    reindexer.mgr.maybeRefresh();\n    DirectoryReader r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testDimensionalRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n    //reindexer.printRefCounts();\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 2 docs\");\n    reindexer.mgr.maybeRefresh();\n    //reindexer.printRefCounts();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testDimensionalRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: forceMerge\");\n    reindexer.w.forceMerge(1);\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    if (DEBUG) System.out.println(\"TEST: refresh after forceMerge\");\n    reindexer.mgr.maybeRefresh();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testDimensionalRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: close writer\");\n    reindexer.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    ReindexingReader reindexer = getReindexer(createTempDir());\n\n    // Start with initial empty commit:\n    reindexer.commit();\n\n    Document doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 1 doc\");\n    reindexer.mgr.maybeRefresh();\n    DirectoryReader r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testNumericRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n    //reindexer.printRefCounts();\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 2 docs\");\n    reindexer.mgr.maybeRefresh();\n    //reindexer.printRefCounts();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testNumericRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: forceMerge\");\n    reindexer.w.forceMerge(1);\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    if (DEBUG) System.out.println(\"TEST: refresh after forceMerge\");\n    reindexer.mgr.maybeRefresh();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testNumericRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: close writer\");\n    reindexer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    ReindexingReader reindexer = getReindexer(createTempDir());\n\n    // Start with initial empty commit:\n    reindexer.commit();\n\n    Document doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 1 doc\");\n    reindexer.mgr.maybeRefresh();\n    DirectoryReader r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n    //reindexer.printRefCounts();\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 2 docs\");\n    reindexer.mgr.maybeRefresh();\n    //reindexer.printRefCounts();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: forceMerge\");\n    reindexer.w.forceMerge(1);\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    if (DEBUG) System.out.println(\"TEST: refresh after forceMerge\");\n    reindexer.mgr.maybeRefresh();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: close writer\");\n    reindexer.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    ReindexingReader reindexer = getReindexer(createTempDir());\n\n    // Start with initial empty commit:\n    reindexer.commit();\n\n    Document doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 1 doc\");\n    reindexer.mgr.maybeRefresh();\n    DirectoryReader r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testDimensionalRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n    //reindexer.printRefCounts();\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 2 docs\");\n    reindexer.mgr.maybeRefresh();\n    //reindexer.printRefCounts();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testDimensionalRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: forceMerge\");\n    reindexer.w.forceMerge(1);\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    if (DEBUG) System.out.println(\"TEST: refresh after forceMerge\");\n    reindexer.mgr.maybeRefresh();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testDimensionalRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: close writer\");\n    reindexer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Path tempPath = createTempDir();\n    assumeFalse(\"we directly delete files\", TestUtil.hasVirusChecker(tempPath));\n    ReindexingReader reindexer = getReindexer(tempPath);\n\n    // Start with initial empty commit:\n    reindexer.commit();\n\n    Document doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 1 doc\");\n    reindexer.mgr.maybeRefresh();\n    DirectoryReader r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n    //reindexer.printRefCounts();\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 2 docs\");\n    reindexer.mgr.maybeRefresh();\n    //reindexer.printRefCounts();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: forceMerge\");\n    reindexer.w.forceMerge(1);\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    if (DEBUG) System.out.println(\"TEST: refresh after forceMerge\");\n    reindexer.mgr.maybeRefresh();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: close writer\");\n    reindexer.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    ReindexingReader reindexer = getReindexer(createTempDir());\n\n    // Start with initial empty commit:\n    reindexer.commit();\n\n    Document doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 1 doc\");\n    reindexer.mgr.maybeRefresh();\n    DirectoryReader r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n    //reindexer.printRefCounts();\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 2 docs\");\n    reindexer.mgr.maybeRefresh();\n    //reindexer.printRefCounts();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: forceMerge\");\n    reindexer.w.forceMerge(1);\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    if (DEBUG) System.out.println(\"TEST: refresh after forceMerge\");\n    reindexer.mgr.maybeRefresh();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: close writer\");\n    reindexer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34d6426cef006e0c3625cabe7a7ec1c2b08bc501","date":1454683374,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Path tempPath = createTempDir();\n    ReindexingReader reindexer = getReindexer(tempPath);\n\n    // Start with initial empty commit:\n    reindexer.commit();\n\n    Document doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 1 doc\");\n    reindexer.mgr.maybeRefresh();\n    DirectoryReader r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n    //reindexer.printRefCounts();\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 2 docs\");\n    reindexer.mgr.maybeRefresh();\n    //reindexer.printRefCounts();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: forceMerge\");\n    reindexer.w.forceMerge(1);\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    if (DEBUG) System.out.println(\"TEST: refresh after forceMerge\");\n    reindexer.mgr.maybeRefresh();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: close writer\");\n    reindexer.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    Path tempPath = createTempDir();\n    assumeFalse(\"we directly delete files\", TestUtil.hasVirusChecker(tempPath));\n    ReindexingReader reindexer = getReindexer(tempPath);\n\n    // Start with initial empty commit:\n    reindexer.commit();\n\n    Document doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 1 doc\");\n    reindexer.mgr.maybeRefresh();\n    DirectoryReader r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n    //reindexer.printRefCounts();\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 2 docs\");\n    reindexer.mgr.maybeRefresh();\n    //reindexer.printRefCounts();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: forceMerge\");\n    reindexer.w.forceMerge(1);\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    if (DEBUG) System.out.println(\"TEST: refresh after forceMerge\");\n    reindexer.mgr.maybeRefresh();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: close writer\");\n    reindexer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Path tempPath = createTempDir();\n    ReindexingReader reindexer = getReindexer(tempPath);\n\n    // Start with initial empty commit:\n    reindexer.commit();\n\n    Document doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 1 doc\");\n    reindexer.mgr.maybeRefresh();\n    DirectoryReader r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n    //reindexer.printRefCounts();\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 2 docs\");\n    reindexer.mgr.maybeRefresh();\n    //reindexer.printRefCounts();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: forceMerge\");\n    reindexer.w.forceMerge(1);\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    if (DEBUG) System.out.println(\"TEST: refresh after forceMerge\");\n    reindexer.mgr.maybeRefresh();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: close writer\");\n    reindexer.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    ReindexingReader reindexer = getReindexer(createTempDir());\n\n    // Start with initial empty commit:\n    reindexer.commit();\n\n    Document doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 1 doc\");\n    reindexer.mgr.maybeRefresh();\n    DirectoryReader r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n    //reindexer.printRefCounts();\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 2 docs\");\n    reindexer.mgr.maybeRefresh();\n    //reindexer.printRefCounts();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: forceMerge\");\n    reindexer.w.forceMerge(1);\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    if (DEBUG) System.out.println(\"TEST: refresh after forceMerge\");\n    reindexer.mgr.maybeRefresh();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: close writer\");\n    reindexer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Path tempPath = createTempDir();\n    ReindexingReader reindexer = getReindexer(tempPath);\n\n    // Start with initial empty commit:\n    reindexer.commit();\n\n    Document doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 1 doc\");\n    reindexer.mgr.maybeRefresh();\n    DirectoryReader r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n    //reindexer.printRefCounts();\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 2 docs\");\n    reindexer.mgr.maybeRefresh();\n    //reindexer.printRefCounts();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: forceMerge\");\n    reindexer.w.forceMerge(1);\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    if (DEBUG) System.out.println(\"TEST: refresh after forceMerge\");\n    reindexer.mgr.maybeRefresh();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: close writer\");\n    reindexer.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    ReindexingReader reindexer = getReindexer(createTempDir());\n\n    // Start with initial empty commit:\n    reindexer.commit();\n\n    Document doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 1 doc\");\n    reindexer.mgr.maybeRefresh();\n    DirectoryReader r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n    //reindexer.printRefCounts();\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 2 docs\");\n    reindexer.mgr.maybeRefresh();\n    //reindexer.printRefCounts();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: forceMerge\");\n    reindexer.w.forceMerge(1);\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    if (DEBUG) System.out.println(\"TEST: refresh after forceMerge\");\n    reindexer.mgr.maybeRefresh();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: close writer\");\n    reindexer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDemoParallelLeafReader#testBasic().mjava","sourceNew":"  public void testBasic() throws Exception {\n    Path tempPath = createTempDir();\n    ReindexingReader reindexer = getReindexer(tempPath);\n\n    // Start with initial empty commit:\n    reindexer.commit();\n\n    Document doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 1 doc\");\n    reindexer.mgr.maybeRefresh();\n    DirectoryReader r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n    //reindexer.printRefCounts();\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 2 docs\");\n    reindexer.mgr.maybeRefresh();\n    //reindexer.printRefCounts();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: forceMerge\");\n    reindexer.w.forceMerge(1);\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    if (DEBUG) System.out.println(\"TEST: refresh after forceMerge\");\n    reindexer.mgr.maybeRefresh();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: close writer\");\n    reindexer.close();\n  }\n\n","sourceOld":"  public void testBasic() throws Exception {\n    ReindexingReader reindexer = getReindexer(createTempDir());\n\n    // Start with initial empty commit:\n    reindexer.commit();\n\n    Document doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 1 doc\");\n    reindexer.mgr.maybeRefresh();\n    DirectoryReader r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n    //reindexer.printRefCounts();\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    doc = new Document();\n    doc.add(newTextField(\"text\", \"number \" + random().nextLong(), Field.Store.YES));\n    reindexer.w.addDocument(doc);\n\n    if (DEBUG) System.out.println(\"TEST: refresh @ 2 docs\");\n    reindexer.mgr.maybeRefresh();\n    //reindexer.printRefCounts();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: forceMerge\");\n    reindexer.w.forceMerge(1);\n\n    if (DEBUG) System.out.println(\"TEST: commit\");\n    reindexer.commit();\n\n    if (DEBUG) System.out.println(\"TEST: refresh after forceMerge\");\n    reindexer.mgr.maybeRefresh();\n    r = reindexer.mgr.acquire();\n    if (DEBUG) System.out.println(\"TEST: got reader=\" + r);\n    try {\n      checkAllNumberDVs(r);\n      IndexSearcher s = newSearcher(r);\n      testNumericDVSort(s);\n      testPointRangeQuery(s);\n    } finally {\n      reindexer.mgr.release(r);\n    }\n\n    if (DEBUG) System.out.println(\"TEST: close writer\");\n    reindexer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["770342641f7b505eaa8dccdc666158bff2419109"],"4d9aa91d3fdd25528bac3b2e6115d54fc2f28753":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","b470f36a9372c97283360b1304eacbde22df6c0d"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"770342641f7b505eaa8dccdc666158bff2419109":["4d9aa91d3fdd25528bac3b2e6115d54fc2f28753"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["b470f36a9372c97283360b1304eacbde22df6c0d"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"4d9aa91d3fdd25528bac3b2e6115d54fc2f28753":["770342641f7b505eaa8dccdc666158bff2419109"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d9aa91d3fdd25528bac3b2e6115d54fc2f28753"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"770342641f7b505eaa8dccdc666158bff2419109":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}