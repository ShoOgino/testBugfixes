{"path":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertTrue(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertTrue(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertTrue(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertTrue(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertTrue(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertTrue(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0088660bdc1c051f58fbc38626d61ccf22dfd3e0","date":1427444574,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertTrue(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertTrue(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms) instanceof PrefixTermsEnum);\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testPrefixTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiTerms.getTerms(searcher.getIndexReader(), \"field\");\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery that has only a trailing * in the term is\n   * rewritten to a single PrefixQuery. The boost and rewriteMethod should be\n   * preserved.\n   */\n  public void testPrefixTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"prefix\", \"prefixx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"prefix*\"));\n    assertMatches(searcher, wq, 2);\n    \n    wq = new WildcardQuery(new Term(\"field\", \"*\"));\n    assertMatches(searcher, wq, 2);\n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), \"field\");\n    assertFalse(wq.getTermsEnum(terms).getClass().getSimpleName().contains(\"AutomatonTermsEnum\"));\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3e8715d826e588419327562287d5d6a8040d63d6"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d2638f781be724518ff6c2263d14a48cf6e68017"],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3e8715d826e588419327562287d5d6a8040d63d6"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","04e775de416dd2d8067b10db1c8af975a1d5017e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}