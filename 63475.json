{"path":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/FileUtils#cleanDirectory(File).mjava","commits":[{"id":"c170e9d4c93c47801b611c5f124a91c5d27e0d73","date":1392824784,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/FileUtils#cleanDirectory(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Cleans a directory without deleting it.\n   *\n   * @param directory directory to clean\n   * @throws IOException in case cleaning is unsuccessful\n   */\n  public static void cleanDirectory(File directory) throws IOException {\n      if (!directory.exists()) {\n          String message = directory + \" does not exist\";\n          throw new IllegalArgumentException(message);\n      }\n\n      if (!directory.isDirectory()) {\n          String message = directory + \" is not a directory\";\n          throw new IllegalArgumentException(message);\n      }\n\n      File[] files = directory.listFiles();\n      if (files == null) {  // null if security restricted\n          throw new IOException(\"Failed to list contents of \" + directory);\n      }\n\n      IOException exception = null;\n      for (File file : files) {\n          try {\n              forceDelete(file);\n          } catch (IOException ioe) {\n              exception = ioe;\n          }\n      }\n\n      if (null != exception) {\n          throw exception;\n      }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/FileUtils#cleanDirectory(File).mjava","sourceNew":null,"sourceOld":"  /**\n   * Cleans a directory without deleting it.\n   *\n   * @param directory directory to clean\n   * @throws IOException in case cleaning is unsuccessful\n   */\n  public static void cleanDirectory(File directory) throws IOException {\n      if (!directory.exists()) {\n          String message = directory + \" does not exist\";\n          throw new IllegalArgumentException(message);\n      }\n\n      if (!directory.isDirectory()) {\n          String message = directory + \" is not a directory\";\n          throw new IllegalArgumentException(message);\n      }\n\n      File[] files = directory.listFiles();\n      if (files == null) {  // null if security restricted\n          throw new IOException(\"Failed to list contents of \" + directory);\n      }\n\n      IOException exception = null;\n      for (File file : files) {\n          try {\n              forceDelete(file);\n          } catch (IOException ioe) {\n              exception = ioe;\n          }\n      }\n\n      if (null != exception) {\n          throw exception;\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/FileUtils#cleanDirectory(File).mjava","sourceNew":null,"sourceOld":"  /**\n   * Cleans a directory without deleting it.\n   *\n   * @param directory directory to clean\n   * @throws IOException in case cleaning is unsuccessful\n   */\n  public static void cleanDirectory(File directory) throws IOException {\n      if (!directory.exists()) {\n          String message = directory + \" does not exist\";\n          throw new IllegalArgumentException(message);\n      }\n\n      if (!directory.isDirectory()) {\n          String message = directory + \" is not a directory\";\n          throw new IllegalArgumentException(message);\n      }\n\n      File[] files = directory.listFiles();\n      if (files == null) {  // null if security restricted\n          throw new IOException(\"Failed to list contents of \" + directory);\n      }\n\n      IOException exception = null;\n      for (File file : files) {\n          try {\n              forceDelete(file);\n          } catch (IOException ioe) {\n              exception = ioe;\n          }\n      }\n\n      if (null != exception) {\n          throw exception;\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c170e9d4c93c47801b611c5f124a91c5d27e0d73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["c170e9d4c93c47801b611c5f124a91c5d27e0d73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":["c170e9d4c93c47801b611c5f124a91c5d27e0d73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"c170e9d4c93c47801b611c5f124a91c5d27e0d73":["12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c170e9d4c93c47801b611c5f124a91c5d27e0d73"],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}