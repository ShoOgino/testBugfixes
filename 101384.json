{"path":"solr/core/src/java/org/apache/solr/api/ApiBag.IntrospectApi#call(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/ApiBag.IntrospectApi#call(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"    public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n\n      String cmd = req.getParams().get(\"command\");\n      ValidatingJsonMap result = null;\n      if (cmd == null) {\n        result = isCoreSpecific ? ValidatingJsonMap.getDeepCopy(baseApi.getSpec(), 5, true) : baseApi.getSpec();\n      } else {\n        ValidatingJsonMap specCopy = ValidatingJsonMap.getDeepCopy(baseApi.getSpec(), 5, true);\n        ValidatingJsonMap commands = specCopy.getMap(\"commands\", null);\n        if (commands != null) {\n          ValidatingJsonMap m = commands.getMap(cmd, null);\n          specCopy.put(\"commands\", Collections.singletonMap(cmd, m));\n        }\n        result = specCopy;\n      }\n      if (isCoreSpecific) {\n        List<String> pieces = req.getHttpSolrCall() == null ? null : ((V2HttpCall) req.getHttpSolrCall()).pieces;\n        if (pieces != null) {\n          String prefix = \"/\" + pieces.get(0) + \"/\" + pieces.get(1);\n          List<String> paths = result.getMap(\"url\", NOT_NULL).getList(\"paths\", NOT_NULL);\n          result.getMap(\"url\", NOT_NULL).put(\"paths\",\n              paths.stream()\n                  .map(s -> prefix + s)\n                  .collect(Collectors.toList()));\n        }\n      }\n      List l = (List) rsp.getValues().get(\"spec\");\n      if (l == null) rsp.getValues().add(\"spec\", l = new ArrayList());\n      l.add(result);\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c3554c8d20a765b4e932a8363f142fdf86374b99","f4b6426685f93b04e5988c93597c4d199e210fdb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/api/ApiBag.IntrospectApi#call(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"    public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n\n      String cmd = req.getParams().get(\"command\");\n      ValidatingJsonMap result = null;\n      if (cmd == null) {\n        result = isCoreSpecific ? ValidatingJsonMap.getDeepCopy(baseApi.getSpec(), 5, true) : baseApi.getSpec();\n      } else {\n        ValidatingJsonMap specCopy = ValidatingJsonMap.getDeepCopy(baseApi.getSpec(), 5, true);\n        ValidatingJsonMap commands = specCopy.getMap(\"commands\", null);\n        if (commands != null) {\n          ValidatingJsonMap m = commands.getMap(cmd, null);\n          specCopy.put(\"commands\", Collections.singletonMap(cmd, m));\n        }\n        result = specCopy;\n      }\n      if (isCoreSpecific) {\n        List<String> pieces = req.getHttpSolrCall() == null ? null : ((V2HttpCall) req.getHttpSolrCall()).pieces;\n        if (pieces != null) {\n          String prefix = \"/\" + pieces.get(0) + \"/\" + pieces.get(1);\n          List<String> paths = result.getMap(\"url\", NOT_NULL).getList(\"paths\", NOT_NULL);\n          result.getMap(\"url\", NOT_NULL).put(\"paths\",\n              paths.stream()\n                  .map(s -> prefix + s)\n                  .collect(Collectors.toList()));\n        }\n      }\n      List l = (List) rsp.getValues().get(\"spec\");\n      if (l == null) rsp.getValues().add(\"spec\", l = new ArrayList());\n      l.add(result);\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3554c8d20a765b4e932a8363f142fdf86374b99","date":1494557659,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/ApiBag.IntrospectApi#call(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/ApiBag.IntrospectApi#call(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"    public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n\n      String cmd = req.getParams().get(\"command\");\n      ValidatingJsonMap result = null;\n      if (cmd == null) {\n        result = isCoreSpecific ? ValidatingJsonMap.getDeepCopy(baseApi.getSpec(), 5, true) : baseApi.getSpec();\n      } else {\n        ValidatingJsonMap specCopy = ValidatingJsonMap.getDeepCopy(baseApi.getSpec(), 5, true);\n        ValidatingJsonMap commands = specCopy.getMap(\"commands\", null);\n        if (commands != null) {\n          ValidatingJsonMap m = commands.getMap(cmd, null);\n          if (m == null) {\n            specCopy.put(\"commands\", Collections.singletonMap(cmd, \"Command not found!\"));\n          } else {\n            specCopy.put(\"commands\", Collections.singletonMap(cmd, m));\n          }\n\n        }\n        result = specCopy;\n      }\n      if (isCoreSpecific) {\n        List<String> pieces = req.getHttpSolrCall() == null ? null : ((V2HttpCall) req.getHttpSolrCall()).pieces;\n        if (pieces != null) {\n          String prefix = \"/\" + pieces.get(0) + \"/\" + pieces.get(1);\n          List<String> paths = result.getMap(\"url\", NOT_NULL).getList(\"paths\", NOT_NULL);\n          result.getMap(\"url\", NOT_NULL).put(\"paths\",\n              paths.stream()\n                  .map(s -> prefix + s)\n                  .collect(Collectors.toList()));\n        }\n      }\n      List l = (List) rsp.getValues().get(\"spec\");\n      if (l == null) rsp.getValues().add(\"spec\", l = new ArrayList());\n      l.add(result);\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n\n","sourceOld":"    public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n\n      String cmd = req.getParams().get(\"command\");\n      ValidatingJsonMap result = null;\n      if (cmd == null) {\n        result = isCoreSpecific ? ValidatingJsonMap.getDeepCopy(baseApi.getSpec(), 5, true) : baseApi.getSpec();\n      } else {\n        ValidatingJsonMap specCopy = ValidatingJsonMap.getDeepCopy(baseApi.getSpec(), 5, true);\n        ValidatingJsonMap commands = specCopy.getMap(\"commands\", null);\n        if (commands != null) {\n          ValidatingJsonMap m = commands.getMap(cmd, null);\n          specCopy.put(\"commands\", Collections.singletonMap(cmd, m));\n        }\n        result = specCopy;\n      }\n      if (isCoreSpecific) {\n        List<String> pieces = req.getHttpSolrCall() == null ? null : ((V2HttpCall) req.getHttpSolrCall()).pieces;\n        if (pieces != null) {\n          String prefix = \"/\" + pieces.get(0) + \"/\" + pieces.get(1);\n          List<String> paths = result.getMap(\"url\", NOT_NULL).getList(\"paths\", NOT_NULL);\n          result.getMap(\"url\", NOT_NULL).put(\"paths\",\n              paths.stream()\n                  .map(s -> prefix + s)\n                  .collect(Collectors.toList()));\n        }\n      }\n      List l = (List) rsp.getValues().get(\"spec\");\n      if (l == null) rsp.getValues().add(\"spec\", l = new ArrayList());\n      l.add(result);\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n\n","bugFix":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4b6426685f93b04e5988c93597c4d199e210fdb","date":1494663116,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/ApiBag.IntrospectApi#call(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/ApiBag.IntrospectApi#call(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"    public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n\n      String cmd = req.getParams().get(\"command\");\n      ValidatingJsonMap result = null;\n      if (cmd == null) {\n        result = isCoreSpecific ? ValidatingJsonMap.getDeepCopy(baseApi.getSpec(), 5, true) : baseApi.getSpec();\n      } else {\n        ValidatingJsonMap specCopy = ValidatingJsonMap.getDeepCopy(baseApi.getSpec(), 5, true);\n        ValidatingJsonMap commands = specCopy.getMap(\"commands\", null);\n        if (commands != null) {\n          ValidatingJsonMap m = commands.getMap(cmd, null);\n          if (m == null) {\n            specCopy.put(\"commands\", Collections.singletonMap(cmd, \"Command not found!\"));\n          } else {\n            specCopy.put(\"commands\", Collections.singletonMap(cmd, m));\n          }\n\n        }\n        result = specCopy;\n      }\n      if (isCoreSpecific) {\n        List<String> pieces = req.getHttpSolrCall() == null ? null : ((V2HttpCall) req.getHttpSolrCall()).pieces;\n        if (pieces != null) {\n          String prefix = \"/\" + pieces.get(0) + \"/\" + pieces.get(1);\n          List<String> paths = result.getMap(\"url\", NOT_NULL).getList(\"paths\", NOT_NULL);\n          result.getMap(\"url\", NOT_NULL).put(\"paths\",\n              paths.stream()\n                  .map(s -> prefix + s)\n                  .collect(Collectors.toList()));\n        }\n      }\n      List l = (List) rsp.getValues().get(\"spec\");\n      if (l == null) rsp.getValues().add(\"spec\", l = new ArrayList());\n      l.add(result);\n    }\n\n","sourceOld":"    public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n\n      String cmd = req.getParams().get(\"command\");\n      ValidatingJsonMap result = null;\n      if (cmd == null) {\n        result = isCoreSpecific ? ValidatingJsonMap.getDeepCopy(baseApi.getSpec(), 5, true) : baseApi.getSpec();\n      } else {\n        ValidatingJsonMap specCopy = ValidatingJsonMap.getDeepCopy(baseApi.getSpec(), 5, true);\n        ValidatingJsonMap commands = specCopy.getMap(\"commands\", null);\n        if (commands != null) {\n          ValidatingJsonMap m = commands.getMap(cmd, null);\n          if (m == null) {\n            specCopy.put(\"commands\", Collections.singletonMap(cmd, \"Command not found!\"));\n          } else {\n            specCopy.put(\"commands\", Collections.singletonMap(cmd, m));\n          }\n\n        }\n        result = specCopy;\n      }\n      if (isCoreSpecific) {\n        List<String> pieces = req.getHttpSolrCall() == null ? null : ((V2HttpCall) req.getHttpSolrCall()).pieces;\n        if (pieces != null) {\n          String prefix = \"/\" + pieces.get(0) + \"/\" + pieces.get(1);\n          List<String> paths = result.getMap(\"url\", NOT_NULL).getList(\"paths\", NOT_NULL);\n          result.getMap(\"url\", NOT_NULL).put(\"paths\",\n              paths.stream()\n                  .map(s -> prefix + s)\n                  .collect(Collectors.toList()));\n        }\n      }\n      List l = (List) rsp.getValues().get(\"spec\");\n      if (l == null) rsp.getValues().add(\"spec\", l = new ArrayList());\n      l.add(result);\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n\n","bugFix":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/api/ApiBag.IntrospectApi#call(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/ApiBag.IntrospectApi#call(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"    public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n\n      String cmd = req.getParams().get(\"command\");\n      ValidatingJsonMap result = null;\n      if (cmd == null) {\n        result = isCoreSpecific ? ValidatingJsonMap.getDeepCopy(baseApi.getSpec(), 5, true) : baseApi.getSpec();\n      } else {\n        ValidatingJsonMap specCopy = ValidatingJsonMap.getDeepCopy(baseApi.getSpec(), 5, true);\n        ValidatingJsonMap commands = specCopy.getMap(\"commands\", null);\n        if (commands != null) {\n          ValidatingJsonMap m = commands.getMap(cmd, null);\n          if (m == null) {\n            specCopy.put(\"commands\", Collections.singletonMap(cmd, \"Command not found!\"));\n          } else {\n            specCopy.put(\"commands\", Collections.singletonMap(cmd, m));\n          }\n\n        }\n        result = specCopy;\n      }\n      if (isCoreSpecific) {\n        List<String> pieces = req.getHttpSolrCall() == null ? null : ((V2HttpCall) req.getHttpSolrCall()).pieces;\n        if (pieces != null) {\n          String prefix = \"/\" + pieces.get(0) + \"/\" + pieces.get(1);\n          List<String> paths = result.getMap(\"url\", NOT_NULL).getList(\"paths\", NOT_NULL);\n          result.getMap(\"url\", NOT_NULL).put(\"paths\",\n              paths.stream()\n                  .map(s -> prefix + s)\n                  .collect(Collectors.toList()));\n        }\n      }\n      List l = (List) rsp.getValues().get(\"spec\");\n      if (l == null) rsp.getValues().add(\"spec\", l = new ArrayList());\n      l.add(result);\n    }\n\n","sourceOld":"    public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n\n      String cmd = req.getParams().get(\"command\");\n      ValidatingJsonMap result = null;\n      if (cmd == null) {\n        result = isCoreSpecific ? ValidatingJsonMap.getDeepCopy(baseApi.getSpec(), 5, true) : baseApi.getSpec();\n      } else {\n        ValidatingJsonMap specCopy = ValidatingJsonMap.getDeepCopy(baseApi.getSpec(), 5, true);\n        ValidatingJsonMap commands = specCopy.getMap(\"commands\", null);\n        if (commands != null) {\n          ValidatingJsonMap m = commands.getMap(cmd, null);\n          specCopy.put(\"commands\", Collections.singletonMap(cmd, m));\n        }\n        result = specCopy;\n      }\n      if (isCoreSpecific) {\n        List<String> pieces = req.getHttpSolrCall() == null ? null : ((V2HttpCall) req.getHttpSolrCall()).pieces;\n        if (pieces != null) {\n          String prefix = \"/\" + pieces.get(0) + \"/\" + pieces.get(1);\n          List<String> paths = result.getMap(\"url\", NOT_NULL).getList(\"paths\", NOT_NULL);\n          result.getMap(\"url\", NOT_NULL).put(\"paths\",\n              paths.stream()\n                  .map(s -> prefix + s)\n                  .collect(Collectors.toList()));\n        }\n      }\n      List l = (List) rsp.getValues().get(\"spec\");\n      if (l == null) rsp.getValues().add(\"spec\", l = new ArrayList());\n      l.add(result);\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/ApiBag.IntrospectApi#call(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/ApiBag.IntrospectApi#call(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n\n      String cmd = req.getParams().get(\"command\");\n      ValidatingJsonMap result = null;\n      if (cmd == null) {\n        result = isCoreSpecific ? ValidatingJsonMap.getDeepCopy(baseApi.getSpec(), 5, true) : baseApi.getSpec();\n      } else {\n        ValidatingJsonMap specCopy = ValidatingJsonMap.getDeepCopy(baseApi.getSpec(), 5, true);\n        ValidatingJsonMap commands = specCopy.getMap(\"commands\", null);\n        if (commands != null) {\n          ValidatingJsonMap m = commands.getMap(cmd, null);\n          if (m == null) {\n            specCopy.put(\"commands\", Collections.singletonMap(cmd, \"Command not found!\"));\n          } else {\n            specCopy.put(\"commands\", Collections.singletonMap(cmd, m));\n          }\n\n        }\n        result = specCopy;\n      }\n      if (isCoreSpecific) {\n        List<String> pieces = req.getHttpSolrCall() == null ? null : ((V2HttpCall) req.getHttpSolrCall()).pieces;\n        if (pieces != null) {\n          String prefix = \"/\" + pieces.get(0) + \"/\" + pieces.get(1);\n          List<String> paths = result.getMap(\"url\", NOT_NULL).getList(\"paths\", NOT_NULL);\n          result.getMap(\"url\", NOT_NULL).put(\"paths\",\n              paths.stream()\n                  .map(s -> prefix + s)\n                  .collect(Collectors.toList()));\n        }\n      }\n      List l = (List) rsp.getValues().get(\"spec\");\n      if (l == null) rsp.getValues().add(\"spec\", l = new ArrayList());\n      l.add(result);\n    }\n\n","sourceOld":"    public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n\n      String cmd = req.getParams().get(\"command\");\n      ValidatingJsonMap result = null;\n      if (cmd == null) {\n        result = isCoreSpecific ? ValidatingJsonMap.getDeepCopy(baseApi.getSpec(), 5, true) : baseApi.getSpec();\n      } else {\n        ValidatingJsonMap specCopy = ValidatingJsonMap.getDeepCopy(baseApi.getSpec(), 5, true);\n        ValidatingJsonMap commands = specCopy.getMap(\"commands\", null);\n        if (commands != null) {\n          ValidatingJsonMap m = commands.getMap(cmd, null);\n          if (m == null) {\n            specCopy.put(\"commands\", Collections.singletonMap(cmd, \"Command not found!\"));\n          } else {\n            specCopy.put(\"commands\", Collections.singletonMap(cmd, m));\n          }\n\n        }\n        result = specCopy;\n      }\n      if (isCoreSpecific) {\n        List<String> pieces = req.getHttpSolrCall() == null ? null : ((V2HttpCall) req.getHttpSolrCall()).pieces;\n        if (pieces != null) {\n          String prefix = \"/\" + pieces.get(0) + \"/\" + pieces.get(1);\n          List<String> paths = result.getMap(\"url\", NOT_NULL).getList(\"paths\", NOT_NULL);\n          result.getMap(\"url\", NOT_NULL).put(\"paths\",\n              paths.stream()\n                  .map(s -> prefix + s)\n                  .collect(Collectors.toList()));\n        }\n      }\n      List l = (List) rsp.getValues().get(\"spec\");\n      if (l == null) rsp.getValues().add(\"spec\", l = new ArrayList());\n      l.add(result);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","f4b6426685f93b04e5988c93597c4d199e210fdb"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["f4b6426685f93b04e5988c93597c4d199e210fdb"],"c3554c8d20a765b4e932a8363f142fdf86374b99":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"f4b6426685f93b04e5988c93597c4d199e210fdb":["c3554c8d20a765b4e932a8363f142fdf86374b99"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["e9017cf144952056066919f1ebc7897ff9bd71b1","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","c3554c8d20a765b4e932a8363f142fdf86374b99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3554c8d20a765b4e932a8363f142fdf86374b99":["f4b6426685f93b04e5988c93597c4d199e210fdb"],"f4b6426685f93b04e5988c93597c4d199e210fdb":["e9017cf144952056066919f1ebc7897ff9bd71b1","06a8891f085f71282bb3ece1b1732b68f07813a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}