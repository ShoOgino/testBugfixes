{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].UserFields#UserFields(Map[String,Float]).mjava","commits":[{"id":"245c71087515ed70d4fb9d9484f9dcbd79eebdfc","date":1331372561,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].UserFields#UserFields(Map[String,Float]).mjava","pathOld":"/dev/null","sourceNew":"    UserFields(Map<String,Float> ufm) {\n      userFieldsMap = ufm;\n      if (0 == userFieldsMap.size()) {\n        userFieldsMap.put(\"*\", null);\n      }\n      \n      // Process dynamic patterns in userFields\n      ArrayList<DynamicField> dynUserFields = new ArrayList<DynamicField>();\n      ArrayList<DynamicField> negDynUserFields = new ArrayList<DynamicField>();\n      for(String f : userFieldsMap.keySet()) {\n        if(f.contains(\"*\")) {\n          if(f.startsWith(\"-\"))\n            negDynUserFields.add(new DynamicField(f.substring(1)));\n          else\n            dynUserFields.add(new DynamicField(f));\n        }\n      }\n      Collections.sort(dynUserFields);\n      dynamicUserFields = dynUserFields.toArray(new DynamicField[dynUserFields.size()]);\n      Collections.sort(negDynUserFields);\n      negativeDynamicUserFields = negDynUserFields.toArray(new DynamicField[negDynUserFields.size()]);\n//      System.out.println(\"** userF=\"+userFieldsMap+\", dynUF=\"+Arrays.toString(dynamicUserFields)+\", negDynUF=\"+Arrays.toString(negativeDynamicUserFields));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].UserFields#UserFields(Map[String,Float]).mjava","pathOld":"/dev/null","sourceNew":"    UserFields(Map<String,Float> ufm) {\n      userFieldsMap = ufm;\n      if (0 == userFieldsMap.size()) {\n        userFieldsMap.put(\"*\", null);\n      }\n      \n      // Process dynamic patterns in userFields\n      ArrayList<DynamicField> dynUserFields = new ArrayList<DynamicField>();\n      ArrayList<DynamicField> negDynUserFields = new ArrayList<DynamicField>();\n      for(String f : userFieldsMap.keySet()) {\n        if(f.contains(\"*\")) {\n          if(f.startsWith(\"-\"))\n            negDynUserFields.add(new DynamicField(f.substring(1)));\n          else\n            dynUserFields.add(new DynamicField(f));\n        }\n      }\n      Collections.sort(dynUserFields);\n      dynamicUserFields = dynUserFields.toArray(new DynamicField[dynUserFields.size()]);\n      Collections.sort(negDynUserFields);\n      negativeDynamicUserFields = negDynUserFields.toArray(new DynamicField[negDynUserFields.size()]);\n//      System.out.println(\"** userF=\"+userFieldsMap+\", dynUF=\"+Arrays.toString(dynamicUserFields)+\", negDynUF=\"+Arrays.toString(negativeDynamicUserFields));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7e79e31f55cbb444e3023d430a340658755aa31","date":1357666399,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.UserFields#UserFields(Map[String,Float]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].UserFields#UserFields(Map[String,Float]).mjava","sourceNew":"    UserFields(Map<String,Float> ufm) {\n      userFieldsMap = ufm;\n      if (0 == userFieldsMap.size()) {\n        userFieldsMap.put(\"*\", null);\n      }\n      \n      // Process dynamic patterns in userFields\n      ArrayList<DynamicField> dynUserFields = new ArrayList<DynamicField>();\n      ArrayList<DynamicField> negDynUserFields = new ArrayList<DynamicField>();\n      for(String f : userFieldsMap.keySet()) {\n        if(f.contains(\"*\")) {\n          if(f.startsWith(\"-\"))\n            negDynUserFields.add(new DynamicField(f.substring(1)));\n          else\n            dynUserFields.add(new DynamicField(f));\n        }\n      }\n      Collections.sort(dynUserFields);\n      dynamicUserFields = dynUserFields.toArray(new DynamicField[dynUserFields.size()]);\n      Collections.sort(negDynUserFields);\n      negativeDynamicUserFields = negDynUserFields.toArray(new DynamicField[negDynUserFields.size()]);\n    }\n\n","sourceOld":"    UserFields(Map<String,Float> ufm) {\n      userFieldsMap = ufm;\n      if (0 == userFieldsMap.size()) {\n        userFieldsMap.put(\"*\", null);\n      }\n      \n      // Process dynamic patterns in userFields\n      ArrayList<DynamicField> dynUserFields = new ArrayList<DynamicField>();\n      ArrayList<DynamicField> negDynUserFields = new ArrayList<DynamicField>();\n      for(String f : userFieldsMap.keySet()) {\n        if(f.contains(\"*\")) {\n          if(f.startsWith(\"-\"))\n            negDynUserFields.add(new DynamicField(f.substring(1)));\n          else\n            dynUserFields.add(new DynamicField(f));\n        }\n      }\n      Collections.sort(dynUserFields);\n      dynamicUserFields = dynUserFields.toArray(new DynamicField[dynUserFields.size()]);\n      Collections.sort(negDynUserFields);\n      negativeDynamicUserFields = negDynUserFields.toArray(new DynamicField[negDynUserFields.size()]);\n//      System.out.println(\"** userF=\"+userFieldsMap+\", dynUF=\"+Arrays.toString(dynamicUserFields)+\", negDynUF=\"+Arrays.toString(negativeDynamicUserFields));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.UserFields#UserFields(Map[String,Float]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].UserFields#UserFields(Map[String,Float]).mjava","sourceNew":"    UserFields(Map<String,Float> ufm) {\n      userFieldsMap = ufm;\n      if (0 == userFieldsMap.size()) {\n        userFieldsMap.put(\"*\", null);\n      }\n      \n      // Process dynamic patterns in userFields\n      ArrayList<DynamicField> dynUserFields = new ArrayList<DynamicField>();\n      ArrayList<DynamicField> negDynUserFields = new ArrayList<DynamicField>();\n      for(String f : userFieldsMap.keySet()) {\n        if(f.contains(\"*\")) {\n          if(f.startsWith(\"-\"))\n            negDynUserFields.add(new DynamicField(f.substring(1)));\n          else\n            dynUserFields.add(new DynamicField(f));\n        }\n      }\n      Collections.sort(dynUserFields);\n      dynamicUserFields = dynUserFields.toArray(new DynamicField[dynUserFields.size()]);\n      Collections.sort(negDynUserFields);\n      negativeDynamicUserFields = negDynUserFields.toArray(new DynamicField[negDynUserFields.size()]);\n    }\n\n","sourceOld":"    UserFields(Map<String,Float> ufm) {\n      userFieldsMap = ufm;\n      if (0 == userFieldsMap.size()) {\n        userFieldsMap.put(\"*\", null);\n      }\n      \n      // Process dynamic patterns in userFields\n      ArrayList<DynamicField> dynUserFields = new ArrayList<DynamicField>();\n      ArrayList<DynamicField> negDynUserFields = new ArrayList<DynamicField>();\n      for(String f : userFieldsMap.keySet()) {\n        if(f.contains(\"*\")) {\n          if(f.startsWith(\"-\"))\n            negDynUserFields.add(new DynamicField(f.substring(1)));\n          else\n            dynUserFields.add(new DynamicField(f));\n        }\n      }\n      Collections.sort(dynUserFields);\n      dynamicUserFields = dynUserFields.toArray(new DynamicField[dynUserFields.size()]);\n      Collections.sort(negDynUserFields);\n      negativeDynamicUserFields = negDynUserFields.toArray(new DynamicField[negDynUserFields.size()]);\n//      System.out.println(\"** userF=\"+userFieldsMap+\", dynUF=\"+Arrays.toString(dynamicUserFields)+\", negDynUF=\"+Arrays.toString(negativeDynamicUserFields));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7e79e31f55cbb444e3023d430a340658755aa31":["245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"245c71087515ed70d4fb9d9484f9dcbd79eebdfc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["245c71087515ed70d4fb9d9484f9dcbd79eebdfc","c7e79e31f55cbb444e3023d430a340658755aa31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7e79e31f55cbb444e3023d430a340658755aa31"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"c7e79e31f55cbb444e3023d430a340658755aa31":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"245c71087515ed70d4fb9d9484f9dcbd79eebdfc":["38e3b736c7ca086d61b7dbb841c905ee115490da","c7e79e31f55cbb444e3023d430a340658755aa31","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}