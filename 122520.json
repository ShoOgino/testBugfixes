{"path":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#runTestFloats(int,double).mjava","commits":[{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#runTestFloats(int,double).mjava","pathOld":"/dev/null","sourceNew":"  private void runTestFloats(int precision, double delta)\n      throws IOException {\n    Directory dir = newDirectory();\n    Writer w = Floats.getWriter(dir, \"test\", precision);\n    final int NUM_VALUES = 1000;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random.nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n\n    Reader r = Floats.getReader(dir, \"test\", NUM_VALUES\n        + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = r.load();\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.floats(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      ValuesAttribute attr = fEnum.addAttribute(ValuesAttribute.class);\n      FloatsRef floats = attr.floats();\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for(int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(0.0, floats.get(), delta);\n      }\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      ValuesAttribute attr = fEnum.addAttribute(ValuesAttribute.class);\n      FloatsRef floats = attr.floats();\n      for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for(int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(0.0, floats.get(), delta);\n      }\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e28c49f1fb6215a550fdadcf3805aa629b63ec0","date":1288081775,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#runTestFloats(int,double).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#runTestFloats(int,double).mjava","sourceNew":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    Writer w = Floats.getWriter(dir, \"test\", precision);\n    final int NUM_VALUES = 1000;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = r.load();\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.floats(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      ValuesAttribute attr = fEnum.addAttribute(ValuesAttribute.class);\n      FloatsRef floats = attr.floats();\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(0.0, floats.get(), delta);\n      }\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      ValuesAttribute attr = fEnum.addAttribute(ValuesAttribute.class);\n      FloatsRef floats = attr.floats();\n      for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(0.0, floats.get(), delta);\n      }\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void runTestFloats(int precision, double delta)\n      throws IOException {\n    Directory dir = newDirectory();\n    Writer w = Floats.getWriter(dir, \"test\", precision);\n    final int NUM_VALUES = 1000;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random.nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n\n    Reader r = Floats.getReader(dir, \"test\", NUM_VALUES\n        + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = r.load();\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.floats(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      ValuesAttribute attr = fEnum.addAttribute(ValuesAttribute.class);\n      FloatsRef floats = attr.floats();\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for(int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(0.0, floats.get(), delta);\n      }\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      ValuesAttribute attr = fEnum.addAttribute(ValuesAttribute.class);\n      FloatsRef floats = attr.floats();\n      for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for(int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(0.0, floats.get(), delta);\n      }\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39f3757037aa8f710c0cbf9a76a332de735f58b0","date":1288384416,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#runTestFloats(int,double).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#runTestFloats(int,double).mjava","sourceNew":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    Writer w = Floats.getWriter(dir, \"test\", precision);\n    final int NUM_VALUES = 1000;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      ValuesAttribute attr = fEnum.addAttribute(ValuesAttribute.class);\n      FloatsRef floats = attr.floats();\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(0.0, floats.get(), delta);\n      }\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      ValuesAttribute attr = fEnum.addAttribute(ValuesAttribute.class);\n      FloatsRef floats = attr.floats();\n      for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(0.0, floats.get(), delta);\n      }\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    Writer w = Floats.getWriter(dir, \"test\", precision);\n    final int NUM_VALUES = 1000;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = r.load();\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.floats(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      ValuesAttribute attr = fEnum.addAttribute(ValuesAttribute.class);\n      FloatsRef floats = attr.floats();\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(0.0, floats.get(), delta);\n      }\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      ValuesAttribute attr = fEnum.addAttribute(ValuesAttribute.class);\n      FloatsRef floats = attr.floats();\n      for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(0.0, floats.get(), delta);\n      }\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5c559c875836474bafae7243263d93b1b1965db","date":1289581659,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValues#runTestFloats(int,double).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#runTestFloats(int,double).mjava","sourceNew":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    Writer w = Floats.getWriter(dir, \"test\", precision);\n    final int NUM_VALUES = 1000;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      ValuesAttribute attr = fEnum.addAttribute(ValuesAttribute.class);\n      FloatsRef floats = attr.floats();\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(0.0, floats.get(), delta);\n      }\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      ValuesAttribute attr = fEnum.addAttribute(ValuesAttribute.class);\n      FloatsRef floats = attr.floats();\n      for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(0.0, floats.get(), delta);\n      }\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void runTestFloats(int precision, double delta) throws IOException {\n    Directory dir = newDirectory();\n    Writer w = Floats.getWriter(dir, \"test\", precision);\n    final int NUM_VALUES = 1000;\n    final double[] values = new double[NUM_VALUES];\n    for (int i = 0; i < NUM_VALUES; i++) {\n      final double v = precision == 4 ? random.nextFloat() : random\n          .nextDouble();\n      values[i] = v;\n      w.add(i, v);\n    }\n    final int additionalValues = 1 + random.nextInt(10);\n    w.finish(NUM_VALUES + additionalValues);\n\n    DocValues r = Floats.getValues(dir, \"test\", NUM_VALUES + additionalValues);\n    for (int iter = 0; iter < 2; iter++) {\n      Source s = getSource(r);\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(values[i], s.getFloat(i), 0.0f);\n      }\n    }\n\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      ValuesAttribute attr = fEnum.addAttribute(ValuesAttribute.class);\n      FloatsRef floats = attr.floats();\n      for (int i = 0; i < NUM_VALUES; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.nextDoc());\n        assertEquals(0.0, floats.get(), delta);\n      }\n      fEnum.close();\n    }\n    for (int iter = 0; iter < 2; iter++) {\n      ValuesEnum fEnum = r.getEnum();\n      ValuesAttribute attr = fEnum.addAttribute(ValuesAttribute.class);\n      FloatsRef floats = attr.floats();\n      for (int i = 0; i < NUM_VALUES; i += 1 + random.nextInt(25)) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(values[i], floats.get(), delta);\n      }\n      for (int i = NUM_VALUES; i < NUM_VALUES + additionalValues; i++) {\n        assertEquals(i, fEnum.advance(i));\n        assertEquals(0.0, floats.get(), delta);\n      }\n      fEnum.close();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39f3757037aa8f710c0cbf9a76a332de735f58b0":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b5c559c875836474bafae7243263d93b1b1965db":["39f3757037aa8f710c0cbf9a76a332de735f58b0"]},"commit2Childs":{"39f3757037aa8f710c0cbf9a76a332de735f58b0":["b5c559c875836474bafae7243263d93b1b1965db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01f60198ece724a6e96cd0b45f289cf42ff83d4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["39f3757037aa8f710c0cbf9a76a332de735f58b0"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b5c559c875836474bafae7243263d93b1b1965db":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b5c559c875836474bafae7243263d93b1b1965db"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}