{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b68df8b95f3ea758a8dc21cb20a50a01db973e8e","date":1321650433,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    EditorialMarkerFactory factory = new EditorialMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true){\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, factory);\n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    \n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19e21d98da803ac6174cb50a880e6289139756ca","date":1323342587,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    EditorialMarkerFactory factory = new EditorialMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true){\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, factory);\n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex, false );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    EditorialMarkerFactory factory = new EditorialMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true){\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, factory);\n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efc85580874d26ca9617f9ad61628d56f6859762","date":1323367273,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    EditorialMarkerFactory factory = new EditorialMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true){\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, factory);\n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex, false );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    EditorialMarkerFactory factory = new EditorialMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true){\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, factory);\n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    EditorialMarkerFactory factory = new EditorialMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true){\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, factory);\n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex, false );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    EditorialMarkerFactory factory = new EditorialMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true){\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, factory);\n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        \n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66e339aeeefbb0f94800c9777e747a22e43c64cc","date":1323800559,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || sf.getType().isTokenized() == true) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using a non-tokenized field\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    EditorialMarkerFactory factory = new EditorialMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true){\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, factory);\n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex, false );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || !(sf.getType() instanceof StrField)) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField\" );\n    }\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    EditorialMarkerFactory factory = new EditorialMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true){\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, factory);\n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex, false );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9e5be1ddf2a174c0c306a089b858c872d7e1f50","date":1323978951,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    EditorialMarkerFactory factory = new EditorialMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true){\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, factory);\n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex, false );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || sf.getType().isTokenized() == true) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using a non-tokenized field\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    EditorialMarkerFactory factory = new EditorialMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true){\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, factory);\n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex, false );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1905b98850d35e230d57c77f3a9b292136159f20","date":1323993698,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || sf.getType().isTokenized() == true) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using a non-tokenized field\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    EditorialMarkerFactory factory = new EditorialMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true){\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, factory);\n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex, false );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    EditorialMarkerFactory factory = new EditorialMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true){\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, factory);\n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex, false );\n    }\n  }\n\n","bugFix":null,"bugIntro":["cc1b4a18fa5d9c6036a0a3b5d5ad7ac5bafc4f63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc1b4a18fa5d9c6036a0a3b5d5ad7ac5bafc4f63","date":1324079472,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    EditorialMarkerFactory factory = new EditorialMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true){\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, factory);\n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex, false );\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null || sf.getType().isTokenized() == true) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField implemented using a non-tokenized field\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    EditorialMarkerFactory factory = new EditorialMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true){\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, factory);\n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex, false );\n    }\n  }\n\n","bugFix":["1905b98850d35e230d57c77f3a9b292136159f20"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d0561cea94adff1867218e77bb763c7583be279","date":1324334341,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = core.getSchema().getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    EditorialMarkerFactory factory = new EditorialMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, factory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n    try {\n      synchronized (elevationCache) {\n        elevationCache.clear();\n        String f = initArgs.get(CONFIG_FILE);\n        if (f == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\" + CONFIG_FILE\n                  + \"' -- path to elevate.xml\");\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if (zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File(core.getResourceLoader().getConfigDir(), f);\n          File fD = new File(core.getDataDir(), f);\n          if (fC.exists() == fD.exists()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                    + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n          }\n          if (fC.exists()) {\n            exists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), f);\n            elevationCache.put(null, loadElevationMap(cfg));\n          }\n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists) {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap(reader, core);\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex, false);\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core)\n  {\n    String a = initArgs.get( FIELD_TYPE );\n    if( a != null ) {\n      FieldType ft = core.getSchema().getFieldTypes().get( a );\n      if( ft == null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\"+a+\"' used in QueryElevationComponent\" );\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    EditorialMarkerFactory factory = new EditorialMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true){\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, factory);\n    forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );\n    try {\n      synchronized( elevationCache ) {\n        elevationCache.clear();\n        String f = initArgs.get( CONFIG_FILE );\n        if( f == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\"+CONFIG_FILE\n              +\"' -- path to elevate.xml\" );\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if(zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File( core.getResourceLoader().getConfigDir(), f );\n          File fD = new File( core.getDataDir(), f );\n          if( fC.exists() == fD.exists() ) {\n            throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\"+f + \"\\n\"\n                +\"either: \"+fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\" );\n          }\n          if( fC.exists() ) {\n            exists = true;\n            log.info( \"Loading QueryElevation from: \"+ fC.getAbsolutePath() );\n            Config cfg = new Config( core.getResourceLoader(), f );\n            elevationCache.put(null, loadElevationMap( cfg ));\n          } \n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists){\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap( reader, core );\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    }\n    catch( Exception ex ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex, false );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fb0c241e2a5e80dcaf41e354c7003520fcb777d","date":1324562351,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = core.getSchema().getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n    try {\n      synchronized (elevationCache) {\n        elevationCache.clear();\n        String f = initArgs.get(CONFIG_FILE);\n        if (f == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\" + CONFIG_FILE\n                  + \"' -- path to elevate.xml\");\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if (zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File(core.getResourceLoader().getConfigDir(), f);\n          File fD = new File(core.getDataDir(), f);\n          if (fC.exists() == fD.exists()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                    + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n          }\n          if (fC.exists()) {\n            exists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), f);\n            elevationCache.put(null, loadElevationMap(cfg));\n          }\n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists) {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap(reader, core);\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex, false);\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = core.getSchema().getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    EditorialMarkerFactory factory = new EditorialMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, factory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n    try {\n      synchronized (elevationCache) {\n        elevationCache.clear();\n        String f = initArgs.get(CONFIG_FILE);\n        if (f == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\" + CONFIG_FILE\n                  + \"' -- path to elevate.xml\");\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if (zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File(core.getResourceLoader().getConfigDir(), f);\n          File fD = new File(core.getDataDir(), f);\n          if (fC.exists() == fD.exists()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                    + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n          }\n          if (fC.exists()) {\n            exists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), f);\n            elevationCache.put(null, loadElevationMap(cfg));\n          }\n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists) {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap(reader, core);\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b1605dda5afabdc06fd136fa0dd14ad326e3001","date":1326751633,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = core.getSchema().getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n    try {\n      synchronized (elevationCache) {\n        elevationCache.clear();\n        String f = initArgs.get(CONFIG_FILE);\n        if (f == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\" + CONFIG_FILE\n                  + \"' -- path to elevate.xml\");\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if (zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File(core.getResourceLoader().getConfigDir(), f);\n          File fD = new File(core.getDataDir(), f);\n          if (fC.exists() == fD.exists()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                    + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n          }\n          if (fC.exists()) {\n            exists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), f);\n            elevationCache.put(null, loadElevationMap(cfg));\n          }\n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists) {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap(reader, core);\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex);\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = core.getSchema().getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n    try {\n      synchronized (elevationCache) {\n        elevationCache.clear();\n        String f = initArgs.get(CONFIG_FILE);\n        if (f == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\" + CONFIG_FILE\n                  + \"' -- path to elevate.xml\");\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if (zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File(core.getResourceLoader().getConfigDir(), f);\n          File fD = new File(core.getDataDir(), f);\n          if (fC.exists() == fD.exists()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                    + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n          }\n          if (fC.exists()) {\n            exists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), f);\n            elevationCache.put(null, loadElevationMap(cfg));\n          }\n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists) {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap(reader, core);\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = core.getSchema().getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n    try {\n      synchronized (elevationCache) {\n        elevationCache.clear();\n        String f = initArgs.get(CONFIG_FILE);\n        if (f == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\" + CONFIG_FILE\n                  + \"' -- path to elevate.xml\");\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if (zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File(core.getResourceLoader().getConfigDir(), f);\n          File fD = new File(core.getDataDir(), f);\n          if (fC.exists() == fD.exists()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                    + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n          }\n          if (fC.exists()) {\n            exists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), f);\n            elevationCache.put(null, loadElevationMap(cfg));\n          }\n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists) {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap(reader, core);\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex);\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = core.getSchema().getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n    try {\n      synchronized (elevationCache) {\n        elevationCache.clear();\n        String f = initArgs.get(CONFIG_FILE);\n        if (f == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\" + CONFIG_FILE\n                  + \"' -- path to elevate.xml\");\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if (zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File(core.getResourceLoader().getConfigDir(), f);\n          File fD = new File(core.getDataDir(), f);\n          if (fC.exists() == fD.exists()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                    + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n          }\n          if (fC.exists()) {\n            exists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), f);\n            elevationCache.put(null, loadElevationMap(cfg));\n          }\n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists) {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap(reader, core);\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = core.getSchema().getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n    try {\n      synchronized (elevationCache) {\n        elevationCache.clear();\n        String f = initArgs.get(CONFIG_FILE);\n        if (f == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\" + CONFIG_FILE\n                  + \"' -- path to elevate.xml\");\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if (zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File(core.getResourceLoader().getConfigDir(), f);\n          File fD = new File(core.getDataDir(), f);\n          if (fC.exists() == fD.exists()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                    + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n          }\n          if (fC.exists()) {\n            exists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), f);\n            elevationCache.put(null, loadElevationMap(cfg));\n          }\n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists) {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap(reader, core);\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex);\n    }\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = core.getSchema().getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n    try {\n      synchronized (elevationCache) {\n        elevationCache.clear();\n        String f = initArgs.get(CONFIG_FILE);\n        if (f == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\" + CONFIG_FILE\n                  + \"' -- path to elevate.xml\");\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if (zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File(core.getResourceLoader().getConfigDir(), f);\n          File fD = new File(core.getDataDir(), f);\n          if (fC.exists() == fD.exists()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                    + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n          }\n          if (fC.exists()) {\n            exists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), f);\n            elevationCache.put(null, loadElevationMap(cfg));\n          }\n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists) {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap(reader, core);\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = schema.getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = schema.getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n    try {\n      synchronized (elevationCache) {\n        elevationCache.clear();\n        String f = initArgs.get(CONFIG_FILE);\n        if (f == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\" + CONFIG_FILE\n                  + \"' -- path to elevate.xml\");\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if (zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File(core.getResourceLoader().getConfigDir(), f);\n          File fD = new File(core.getDataDir(), f);\n          if (fC.exists() == fD.exists()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                    + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n          }\n          if (fC.exists()) {\n            exists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), f);\n            elevationCache.put(null, loadElevationMap(cfg));\n          }\n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists) {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap(reader, core);\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = core.getSchema().getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = core.getSchema().getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n    try {\n      synchronized (elevationCache) {\n        elevationCache.clear();\n        String f = initArgs.get(CONFIG_FILE);\n        if (f == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\" + CONFIG_FILE\n                  + \"' -- path to elevate.xml\");\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if (zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File(core.getResourceLoader().getConfigDir(), f);\n          File fD = new File(core.getDataDir(), f);\n          if (fC.exists() == fD.exists()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                    + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n          }\n          if (fC.exists()) {\n            exists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), f);\n            elevationCache.put(null, loadElevationMap(cfg));\n          }\n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists) {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap(reader, core);\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1dca57049fb75fd60d90723d142769094a0402be","date":1385096736,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = schema.getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = schema.getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n    try {\n      synchronized (elevationCache) {\n        elevationCache.clear();\n        String f = initArgs.get(CONFIG_FILE);\n        if (f == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\" + CONFIG_FILE\n                  + \"' -- path to elevate.xml\");\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if (zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File(core.getResourceLoader().getConfigDir(), f);\n          File fD = new File(core.getDataDir(), f);\n          if (fC.exists() == fD.exists()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                    + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n          }\n          if (fC.exists()) {\n            exists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), f);\n            elevationCache.put(null, loadElevationMap(cfg));\n          }\n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists) {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap(reader, core);\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = schema.getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = schema.getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n    try {\n      synchronized (elevationCache) {\n        elevationCache.clear();\n        String f = initArgs.get(CONFIG_FILE);\n        if (f == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\" + CONFIG_FILE\n                  + \"' -- path to elevate.xml\");\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if (zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File(core.getResourceLoader().getConfigDir(), f);\n          File fD = new File(core.getDataDir(), f);\n          if (fC.exists() == fD.exists()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                    + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n          }\n          if (fC.exists()) {\n            exists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), f);\n            elevationCache.put(null, loadElevationMap(cfg));\n          }\n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists) {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap(reader, core);\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = schema.getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = schema.getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n    try {\n      synchronized (elevationCache) {\n        elevationCache.clear();\n        String f = initArgs.get(CONFIG_FILE);\n        if (f == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\" + CONFIG_FILE\n                  + \"' -- path to elevate.xml\");\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if (zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File(core.getResourceLoader().getConfigDir(), f);\n          File fD = new File(core.getDataDir(), f);\n          if (fC.exists() == fD.exists()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                    + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n          }\n          if (fC.exists()) {\n            exists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), f);\n            elevationCache.put(null, loadElevationMap(cfg));\n          }\n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists) {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap(reader, core);\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = schema.getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = schema.getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n    try {\n      synchronized (elevationCache) {\n        elevationCache.clear();\n        String f = initArgs.get(CONFIG_FILE);\n        if (f == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\" + CONFIG_FILE\n                  + \"' -- path to elevate.xml\");\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if (zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File(core.getResourceLoader().getConfigDir(), f);\n          File fD = new File(core.getDataDir(), f);\n          if (fC.exists() == fD.exists()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                    + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n          }\n          if (fC.exists()) {\n            exists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), f);\n            elevationCache.put(null, loadElevationMap(cfg));\n          }\n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists) {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap(reader, core);\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = schema.getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = schema.getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n    try {\n      synchronized (elevationCache) {\n        elevationCache.clear();\n        String f = initArgs.get(CONFIG_FILE);\n        if (f == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\" + CONFIG_FILE\n                  + \"' -- path to elevate.xml\");\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreContainer().getZkController();\n        if (zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File(core.getResourceLoader().getConfigDir(), f);\n          File fD = new File(core.getDataDir(), f);\n          if (fC.exists() == fD.exists()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                    + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n          }\n          if (fC.exists()) {\n            exists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), f);\n            elevationCache.put(null, loadElevationMap(cfg));\n          }\n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists) {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap(reader, core);\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = schema.getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = schema.getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n    try {\n      synchronized (elevationCache) {\n        elevationCache.clear();\n        String f = initArgs.get(CONFIG_FILE);\n        if (f == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\" + CONFIG_FILE\n                  + \"' -- path to elevate.xml\");\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if (zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File(core.getResourceLoader().getConfigDir(), f);\n          File fD = new File(core.getDataDir(), f);\n          if (fC.exists() == fD.exists()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                    + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n          }\n          if (fC.exists()) {\n            exists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), f);\n            elevationCache.put(null, loadElevationMap(cfg));\n          }\n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists) {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap(reader, core);\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = schema.getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = schema.getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n    try {\n      synchronized (elevationCache) {\n        elevationCache.clear();\n        String f = initArgs.get(CONFIG_FILE);\n        if (f == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\" + CONFIG_FILE\n                  + \"' -- path to elevate.xml\");\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreContainer().getZkController();\n        if (zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File(core.getResourceLoader().getConfigDir(), f);\n          File fD = new File(core.getDataDir(), f);\n          if (fC.exists() == fD.exists()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                    + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n          }\n          if (fC.exists()) {\n            exists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), f);\n            elevationCache.put(null, loadElevationMap(cfg));\n          }\n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists) {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap(reader, core);\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = schema.getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = schema.getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n    try {\n      synchronized (elevationCache) {\n        elevationCache.clear();\n        String f = initArgs.get(CONFIG_FILE);\n        if (f == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\" + CONFIG_FILE\n                  + \"' -- path to elevate.xml\");\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n        if (zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File(core.getResourceLoader().getConfigDir(), f);\n          File fD = new File(core.getDataDir(), f);\n          if (fC.exists() == fD.exists()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                    + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n          }\n          if (fC.exists()) {\n            exists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), f);\n            elevationCache.put(null, loadElevationMap(cfg));\n          }\n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists) {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap(reader, core);\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0fa90192f49e1ad4b54d58b4809abf538cf5ad0","date":1499456569,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = schema.getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = schema.getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n\n    String f = initArgs.get(CONFIG_FILE);\n    if (f != null) {\n      try {\n        synchronized (elevationCache) {\n          elevationCache.clear();\n          boolean exists = false;\n\n          // check if using ZooKeeper\n          ZkController zkController = core.getCoreContainer().getZkController();\n          if (zkController != null) {\n            // TODO : shouldn't have to keep reading the config name when it has been read before\n            exists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n          } else {\n            File fC = new File(core.getResourceLoader().getConfigDir(), f);\n            File fD = new File(core.getDataDir(), f);\n            if (fC.exists() == fD.exists()) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                      + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n            }\n            if (fC.exists()) {\n              exists = true;\n              log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n              Config cfg = new Config(core.getResourceLoader(), f);\n              elevationCache.put(null, loadElevationMap(cfg));\n            }\n          }\n          //in other words, we think this is in the data dir, not the conf dir\n          if (!exists) {\n            // preload the first data\n            RefCounted<SolrIndexSearcher> searchHolder = null;\n            try {\n              searchHolder = core.getNewestSearcher(false);\n              IndexReader reader = searchHolder.get().getIndexReader();\n              getElevationMap(reader, core);\n            } finally {\n              if (searchHolder != null) searchHolder.decref();\n            }\n          }\n        }\n      } catch (Exception ex) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error initializing QueryElevationComponent.\", ex);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = schema.getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = schema.getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n    try {\n      synchronized (elevationCache) {\n        elevationCache.clear();\n        String f = initArgs.get(CONFIG_FILE);\n        if (f == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\" + CONFIG_FILE\n                  + \"' -- path to elevate.xml\");\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreContainer().getZkController();\n        if (zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File(core.getResourceLoader().getConfigDir(), f);\n          File fD = new File(core.getDataDir(), f);\n          if (fC.exists() == fD.exists()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                    + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n          }\n          if (fC.exists()) {\n            exists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), f);\n            elevationCache.put(null, loadElevationMap(cfg));\n          }\n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists) {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap(reader, core);\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = schema.getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = schema.getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n\n    String f = initArgs.get(CONFIG_FILE);\n    if (f != null) {\n      try {\n        synchronized (elevationCache) {\n          elevationCache.clear();\n          boolean exists = false;\n\n          // check if using ZooKeeper\n          ZkController zkController = core.getCoreContainer().getZkController();\n          if (zkController != null) {\n            // TODO : shouldn't have to keep reading the config name when it has been read before\n            exists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n          } else {\n            File fC = new File(core.getResourceLoader().getConfigDir(), f);\n            File fD = new File(core.getDataDir(), f);\n            if (fC.exists() == fD.exists()) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                      + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n            }\n            if (fC.exists()) {\n              exists = true;\n              log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n              Config cfg = new Config(core.getResourceLoader(), f);\n              elevationCache.put(null, loadElevationMap(cfg));\n            }\n          }\n          //in other words, we think this is in the data dir, not the conf dir\n          if (!exists) {\n            // preload the first data\n            RefCounted<SolrIndexSearcher> searchHolder = null;\n            try {\n              searchHolder = core.getNewestSearcher(false);\n              IndexReader reader = searchHolder.get().getIndexReader();\n              getElevationMap(reader, core);\n            } finally {\n              if (searchHolder != null) searchHolder.decref();\n            }\n          }\n        }\n      } catch (Exception ex) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error initializing QueryElevationComponent.\", ex);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = schema.getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = schema.getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n    try {\n      synchronized (elevationCache) {\n        elevationCache.clear();\n        String f = initArgs.get(CONFIG_FILE);\n        if (f == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\" + CONFIG_FILE\n                  + \"' -- path to elevate.xml\");\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreContainer().getZkController();\n        if (zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File(core.getResourceLoader().getConfigDir(), f);\n          File fD = new File(core.getDataDir(), f);\n          if (fC.exists() == fD.exists()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                    + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n          }\n          if (fC.exists()) {\n            exists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), f);\n            elevationCache.put(null, loadElevationMap(cfg));\n          }\n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists) {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap(reader, core);\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = schema.getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = schema.getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n\n    String f = initArgs.get(CONFIG_FILE);\n    if (f != null) {\n      try {\n        synchronized (elevationCache) {\n          elevationCache.clear();\n          boolean exists = false;\n\n          // check if using ZooKeeper\n          ZkController zkController = core.getCoreContainer().getZkController();\n          if (zkController != null) {\n            // TODO : shouldn't have to keep reading the config name when it has been read before\n            exists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n          } else {\n            File fC = new File(core.getResourceLoader().getConfigDir(), f);\n            File fD = new File(core.getDataDir(), f);\n            if (fC.exists() == fD.exists()) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                      + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n            }\n            if (fC.exists()) {\n              exists = true;\n              log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n              Config cfg = new Config(core.getResourceLoader(), f);\n              elevationCache.put(null, loadElevationMap(cfg));\n            }\n          }\n          //in other words, we think this is in the data dir, not the conf dir\n          if (!exists) {\n            // preload the first data\n            RefCounted<SolrIndexSearcher> searchHolder = null;\n            try {\n              searchHolder = core.getNewestSearcher(false);\n              IndexReader reader = searchHolder.get().getIndexReader();\n              getElevationMap(reader, core);\n            } finally {\n              if (searchHolder != null) searchHolder.decref();\n            }\n          }\n        }\n      } catch (Exception ex) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error initializing QueryElevationComponent.\", ex);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = schema.getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = schema.getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n    try {\n      synchronized (elevationCache) {\n        elevationCache.clear();\n        String f = initArgs.get(CONFIG_FILE);\n        if (f == null) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"QueryElevationComponent must specify argument: '\" + CONFIG_FILE\n                  + \"' -- path to elevate.xml\");\n        }\n        boolean exists = false;\n\n        // check if using ZooKeeper\n        ZkController zkController = core.getCoreContainer().getZkController();\n        if (zkController != null) {\n          // TODO : shouldn't have to keep reading the config name when it has been read before\n          exists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n        } else {\n          File fC = new File(core.getResourceLoader().getConfigDir(), f);\n          File fD = new File(core.getDataDir(), f);\n          if (fC.exists() == fD.exists()) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                    + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n          }\n          if (fC.exists()) {\n            exists = true;\n            log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n            Config cfg = new Config(core.getResourceLoader(), f);\n            elevationCache.put(null, loadElevationMap(cfg));\n          }\n        }\n        //in other words, we think this is in the data dir, not the conf dir\n        if (!exists) {\n          // preload the first data\n          RefCounted<SolrIndexSearcher> searchHolder = null;\n          try {\n            searchHolder = core.getNewestSearcher(false);\n            IndexReader reader = searchHolder.get().getIndexReader();\n            getElevationMap(reader, core);\n          } finally {\n            if (searchHolder != null) searchHolder.decref();\n          }\n        }\n      }\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error initializing QueryElevationComponent.\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ad458affd82a1d762eb506003907d9363a333cb","date":1528558344,"type":3,"author":"broustant","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    initialized = false;\n    try {\n      parseFieldType(core);\n      setUniqueKeyField(core);\n      parseExcludedMarkerFieldName(core);\n      parseEditorialMarkerFieldName(core);\n      parseForceElevation();\n      parseUseConfiguredOrderForElevations();\n      loadElevationConfiguration(core);\n      initialized = true;\n    } catch (InitializationException e) {\n      assert !initialized;\n      handleInitializationException(e, e.exceptionCause);\n    } catch (Exception e) {\n      assert !initialized;\n      handleInitializationException(e, InitializationExceptionCause.OTHER);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = schema.getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = schema.getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n\n    String f = initArgs.get(CONFIG_FILE);\n    if (f != null) {\n      try {\n        synchronized (elevationCache) {\n          elevationCache.clear();\n          boolean exists = false;\n\n          // check if using ZooKeeper\n          ZkController zkController = core.getCoreContainer().getZkController();\n          if (zkController != null) {\n            // TODO : shouldn't have to keep reading the config name when it has been read before\n            exists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n          } else {\n            File fC = new File(core.getResourceLoader().getConfigDir(), f);\n            File fD = new File(core.getDataDir(), f);\n            if (fC.exists() == fD.exists()) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                      + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n            }\n            if (fC.exists()) {\n              exists = true;\n              log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n              Config cfg = new Config(core.getResourceLoader(), f);\n              elevationCache.put(null, loadElevationMap(cfg));\n            }\n          }\n          //in other words, we think this is in the data dir, not the conf dir\n          if (!exists) {\n            // preload the first data\n            RefCounted<SolrIndexSearcher> searchHolder = null;\n            try {\n              searchHolder = core.getNewestSearcher(false);\n              IndexReader reader = searchHolder.get().getIndexReader();\n              getElevationMap(reader, core);\n            } finally {\n              if (searchHolder != null) searchHolder.decref();\n            }\n          }\n        }\n      } catch (Exception ex) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error initializing QueryElevationComponent.\", ex);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    initialized = false;\n    try {\n      parseFieldType(core);\n      setUniqueKeyField(core);\n      parseExcludedMarkerFieldName(core);\n      parseEditorialMarkerFieldName(core);\n      parseForceElevation();\n      parseUseConfiguredOrderForElevations();\n      loadElevationConfiguration(core);\n      initialized = true;\n    } catch (InitializationException e) {\n      assert !initialized;\n      handleInitializationException(e, e.exceptionCause);\n    } catch (Exception e) {\n      assert !initialized;\n      handleInitializationException(e, InitializationExceptionCause.OTHER);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = schema.getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = schema.getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n\n    String f = initArgs.get(CONFIG_FILE);\n    if (f != null) {\n      try {\n        synchronized (elevationCache) {\n          elevationCache.clear();\n          boolean exists = false;\n\n          // check if using ZooKeeper\n          ZkController zkController = core.getCoreContainer().getZkController();\n          if (zkController != null) {\n            // TODO : shouldn't have to keep reading the config name when it has been read before\n            exists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n          } else {\n            File fC = new File(core.getResourceLoader().getConfigDir(), f);\n            File fD = new File(core.getDataDir(), f);\n            if (fC.exists() == fD.exists()) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                      + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n            }\n            if (fC.exists()) {\n              exists = true;\n              log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n              Config cfg = new Config(core.getResourceLoader(), f);\n              elevationCache.put(null, loadElevationMap(cfg));\n            }\n          }\n          //in other words, we think this is in the data dir, not the conf dir\n          if (!exists) {\n            // preload the first data\n            RefCounted<SolrIndexSearcher> searchHolder = null;\n            try {\n              searchHolder = core.getNewestSearcher(false);\n              IndexReader reader = searchHolder.get().getIndexReader();\n              getElevationMap(reader, core);\n            } finally {\n              if (searchHolder != null) searchHolder.decref();\n            }\n          }\n        }\n      } catch (Exception ex) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error initializing QueryElevationComponent.\", ex);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    initialized = false;\n    try {\n      parseFieldType(core);\n      setUniqueKeyField(core);\n      parseExcludedMarkerFieldName(core);\n      parseEditorialMarkerFieldName(core);\n      parseForceElevation();\n      parseUseConfiguredOrderForElevations();\n      loadElevationConfiguration(core);\n      initialized = true;\n    } catch (InitializationException e) {\n      assert !initialized;\n      handleInitializationException(e, e.exceptionCause);\n    } catch (Exception e) {\n      assert !initialized;\n      handleInitializationException(e, InitializationExceptionCause.OTHER);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(SolrCore core) {\n    IndexSchema schema = core.getLatestSchema();\n    String a = initArgs.get(FIELD_TYPE);\n    if (a != null) {\n      FieldType ft = schema.getFieldTypes().get(a);\n      if (ft == null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown FieldType: '\" + a + \"' used in QueryElevationComponent\");\n      }\n      analyzer = ft.getQueryAnalyzer();\n    }\n\n    SchemaField sf = schema.getUniqueKeyField();\n    if( sf == null) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n          \"QueryElevationComponent requires the schema to have a uniqueKeyField.\" );\n    }\n    idSchemaFT = sf.getType();\n    idField = sf.getName();\n    //register the EditorialMarkerFactory\n    String excludeName = initArgs.get(QueryElevationParams.EXCLUDE_MARKER_FIELD_NAME, \"excluded\");\n    if (excludeName == null || excludeName.equals(\"\") == true){\n      excludeName = \"excluded\";\n    }\n    ExcludedMarkerFactory excludedMarkerFactory = new ExcludedMarkerFactory();\n    core.addTransformerFactory(excludeName, excludedMarkerFactory);\n    ElevatedMarkerFactory elevatedMarkerFactory = new ElevatedMarkerFactory();\n    String markerName = initArgs.get(QueryElevationParams.EDITORIAL_MARKER_FIELD_NAME, \"elevated\");\n    if (markerName == null || markerName.equals(\"\") == true) {\n      markerName = \"elevated\";\n    }\n    core.addTransformerFactory(markerName, elevatedMarkerFactory);\n    forceElevation = initArgs.getBool(QueryElevationParams.FORCE_ELEVATION, forceElevation);\n\n    String f = initArgs.get(CONFIG_FILE);\n    if (f != null) {\n      try {\n        synchronized (elevationCache) {\n          elevationCache.clear();\n          boolean exists = false;\n\n          // check if using ZooKeeper\n          ZkController zkController = core.getCoreContainer().getZkController();\n          if (zkController != null) {\n            // TODO : shouldn't have to keep reading the config name when it has been read before\n            exists = zkController.configFileExists(zkController.getZkStateReader().readConfigName(core.getCoreDescriptor().getCloudDescriptor().getCollectionName()), f);\n          } else {\n            File fC = new File(core.getResourceLoader().getConfigDir(), f);\n            File fD = new File(core.getDataDir(), f);\n            if (fC.exists() == fD.exists()) {\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"QueryElevationComponent missing config file: '\" + f + \"\\n\"\n                      + \"either: \" + fC.getAbsolutePath() + \" or \" + fD.getAbsolutePath() + \" must exist, but not both.\");\n            }\n            if (fC.exists()) {\n              exists = true;\n              log.info(\"Loading QueryElevation from: \" + fC.getAbsolutePath());\n              Config cfg = new Config(core.getResourceLoader(), f);\n              elevationCache.put(null, loadElevationMap(cfg));\n            }\n          }\n          //in other words, we think this is in the data dir, not the conf dir\n          if (!exists) {\n            // preload the first data\n            RefCounted<SolrIndexSearcher> searchHolder = null;\n            try {\n              searchHolder = core.getNewestSearcher(false);\n              IndexReader reader = searchHolder.get().getIndexReader();\n              getElevationMap(reader, core);\n            } finally {\n              if (searchHolder != null) searchHolder.decref();\n            }\n          }\n        }\n      } catch (Exception ex) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Error initializing QueryElevationComponent.\", ex);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["1dca57049fb75fd60d90723d142769094a0402be"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["7b1605dda5afabdc06fd136fa0dd14ad326e3001","7530de27b87b961b51f01bd1299b7004d46e8823"],"b9e5be1ddf2a174c0c306a089b858c872d7e1f50":["66e339aeeefbb0f94800c9777e747a22e43c64cc"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["b68df8b95f3ea758a8dc21cb20a50a01db973e8e","19e21d98da803ac6174cb50a880e6289139756ca"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"e0fa90192f49e1ad4b54d58b4809abf538cf5ad0":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"1d0561cea94adff1867218e77bb763c7583be279":["cc1b4a18fa5d9c6036a0a3b5d5ad7ac5bafc4f63"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","e0fa90192f49e1ad4b54d58b4809abf538cf5ad0"],"08970e5b8411182a29412c177eff67ec1110095b":["7530de27b87b961b51f01bd1299b7004d46e8823"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["e0fa90192f49e1ad4b54d58b4809abf538cf5ad0","2ad458affd82a1d762eb506003907d9363a333cb"],"3fb0c241e2a5e80dcaf41e354c7003520fcb777d":["1d0561cea94adff1867218e77bb763c7583be279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ad458affd82a1d762eb506003907d9363a333cb":["e0fa90192f49e1ad4b54d58b4809abf538cf5ad0"],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["3fb0c241e2a5e80dcaf41e354c7003520fcb777d"],"efc85580874d26ca9617f9ad61628d56f6859762":["b68df8b95f3ea758a8dc21cb20a50a01db973e8e","19e21d98da803ac6174cb50a880e6289139756ca"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["e0fa90192f49e1ad4b54d58b4809abf538cf5ad0","2ad458affd82a1d762eb506003907d9363a333cb"],"1905b98850d35e230d57c77f3a9b292136159f20":["b9e5be1ddf2a174c0c306a089b858c872d7e1f50"],"cc1b4a18fa5d9c6036a0a3b5d5ad7ac5bafc4f63":["1905b98850d35e230d57c77f3a9b292136159f20"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"66e339aeeefbb0f94800c9777e747a22e43c64cc":["19e21d98da803ac6174cb50a880e6289139756ca"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["1dca57049fb75fd60d90723d142769094a0402be"],"b68df8b95f3ea758a8dc21cb20a50a01db973e8e":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19e21d98da803ac6174cb50a880e6289139756ca":["b68df8b95f3ea758a8dc21cb20a50a01db973e8e"],"1dca57049fb75fd60d90723d142769094a0402be":["08970e5b8411182a29412c177eff67ec1110095b"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["08970e5b8411182a29412c177eff67ec1110095b","1dca57049fb75fd60d90723d142769094a0402be"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ad458affd82a1d762eb506003907d9363a333cb"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["f9a989a32a073c55e3aef6f807a3474184bbcf49","fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b9e5be1ddf2a174c0c306a089b858c872d7e1f50":["1905b98850d35e230d57c77f3a9b292136159f20"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"c26f00b574427b55127e869b935845554afde1fa":["b68df8b95f3ea758a8dc21cb20a50a01db973e8e"],"e0fa90192f49e1ad4b54d58b4809abf538cf5ad0":["f9a989a32a073c55e3aef6f807a3474184bbcf49","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2ad458affd82a1d762eb506003907d9363a333cb","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"1d0561cea94adff1867218e77bb763c7583be279":["3fb0c241e2a5e80dcaf41e354c7003520fcb777d"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"08970e5b8411182a29412c177eff67ec1110095b":["1dca57049fb75fd60d90723d142769094a0402be","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"3fb0c241e2a5e80dcaf41e354c7003520fcb777d":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2ad458affd82a1d762eb506003907d9363a333cb":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"efc85580874d26ca9617f9ad61628d56f6859762":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[],"1905b98850d35e230d57c77f3a9b292136159f20":["cc1b4a18fa5d9c6036a0a3b5d5ad7ac5bafc4f63"],"cc1b4a18fa5d9c6036a0a3b5d5ad7ac5bafc4f63":["1d0561cea94adff1867218e77bb763c7583be279"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":[],"66e339aeeefbb0f94800c9777e747a22e43c64cc":["b9e5be1ddf2a174c0c306a089b858c872d7e1f50"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["e0fa90192f49e1ad4b54d58b4809abf538cf5ad0"],"b68df8b95f3ea758a8dc21cb20a50a01db973e8e":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","efc85580874d26ca9617f9ad61628d56f6859762","19e21d98da803ac6174cb50a880e6289139756ca"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"19e21d98da803ac6174cb50a880e6289139756ca":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","efc85580874d26ca9617f9ad61628d56f6859762","66e339aeeefbb0f94800c9777e747a22e43c64cc"],"1dca57049fb75fd60d90723d142769094a0402be":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","08970e5b8411182a29412c177eff67ec1110095b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","efc85580874d26ca9617f9ad61628d56f6859762","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","fb569fd721c41eafc2a2d788499a7df490c7f1a5","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}