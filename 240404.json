{"path":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e, false);\n    }\n    if (val==null) return null;\n\n    return createField(field.getName(), val, getFieldStore(field, val),\n            getFieldIndex(field, val), getFieldTermVec(field, val), field.omitNorms(),\n            field.omitTf(), boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e, false);\n    }\n    if (val==null) return null;\n\n    return createField(field.getName(), val, getFieldStore(field, val),\n            getFieldIndex(field, val), getFieldTermVec(field, val), field.omitNorms(),\n            field.omitTf(), boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e, false);\n    }\n    if (val==null) return null;\n\n    return createField(field.getName(), val, getFieldStore(field, val),\n            getFieldIndex(field, val), getFieldTermVec(field, val), field.omitNorms(),\n            field.omitTf(), boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e, false);\n    }\n    if (val==null) return null;\n\n    return createField(field.getName(), val, getFieldStore(field, val),\n            getFieldIndex(field, val), getFieldTermVec(field, val), field.omitNorms(),\n            field.omitTf(), boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e, false);\n    }\n    if (val==null) return null;\n\n    return createField(field.getName(), val, getFieldStore(field, val),\n            getFieldIndex(field, val), getFieldTermVec(field, val), field.omitNorms(),\n            field.omitTf(), boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e, false);\n    }\n    if (val==null) return null;\n\n    return createField(field.getName(), val, getFieldStore(field, val),\n            getFieldIndex(field, val), getFieldTermVec(field, val), field.omitNorms(),\n            field.omitTf(), boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e, false);\n    }\n    if (val==null) return null;\n\n    return createField(field.getName(), val, getFieldStore(field, val),\n            getFieldIndex(field, val), getFieldTermVec(field, val), field.omitNorms(),\n            field.indexOptions(), boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e, false);\n    }\n    if (val==null) return null;\n\n    return createField(field.getName(), val, getFieldStore(field, val),\n            getFieldIndex(field, val), getFieldTermVec(field, val), field.omitNorms(),\n            field.omitTf(), boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e8c18828cd7c43a8460d7f4046d8138278a7eaa","date":1311619509,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e, false);\n    }\n    if (val==null) return null;\n\n    return createField(field.getName(), val, \n                       getFieldStore(field, val), getFieldIndex(field, val), \n                       getFieldTermVec(field, val), field.omitNorms(),\n                       getIndexOptions(field, val), boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e, false);\n    }\n    if (val==null) return null;\n\n    return createField(field.getName(), val, getFieldStore(field, val),\n            getFieldIndex(field, val), getFieldTermVec(field, val), field.omitNorms(),\n            field.indexOptions(), boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e, false);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setIndexed(field.indexed());\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(getIndexOptions(field, val));\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    \n    return createField(field.getName(), val, newType, boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public Fieldable createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e, false);\n    }\n    if (val==null) return null;\n\n    return createField(field.getName(), val, \n                       getFieldStore(field, val), getFieldIndex(field, val), \n                       getFieldTermVec(field, val), field.omitNorms(),\n                       getIndexOptions(field, val), boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b1605dda5afabdc06fd136fa0dd14ad326e3001","date":1326751633,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setIndexed(field.indexed());\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(getIndexOptions(field, val));\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    \n    return createField(field.getName(), val, newType, boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e, false);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setIndexed(field.indexed());\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(getIndexOptions(field, val));\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    \n    return createField(field.getName(), val, newType, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setIndexed(field.indexed());\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(getIndexOptions(field, val));\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    \n    return createField(field.getName(), val, newType, boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setIndexed(field.indexed());\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(getIndexOptions(field, val));\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    \n    return createField(field.getName(), val, newType, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setIndexed(field.indexed());\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(getIndexOptions(field, val));\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    \n    return createField(field.getName(), val, newType, boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setIndexed(field.indexed());\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(getIndexOptions(field, val));\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    \n    return createField(field.getName(), val, newType, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73bb5a57dc75b54a39494f99986599cae7dff417","date":1361040620,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setIndexed(field.indexed());\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(getIndexOptions(field, val));\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n\n    return createField(field.getName(), val, newType, boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setIndexed(field.indexed());\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(getIndexOptions(field, val));\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    \n    return createField(field.getName(), val, newType, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setIndexed(field.indexed());\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(getIndexOptions(field, val));\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n\n    return createField(field.getName(), val, newType, boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setIndexed(field.indexed());\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(getIndexOptions(field, val));\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    \n    return createField(field.getName(), val, newType, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : null);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n\n    return createField(field.getName(), val, newType, boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setIndexed(field.indexed());\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(getIndexOptions(field, val));\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n\n    return createField(field.getName(), val, newType, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : null);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n\n    return createField(field.getName(), val, newType, boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setIndexed(field.indexed());\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(getIndexOptions(field, val));\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n\n    return createField(field.getName(), val, newType, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : IndexOptions.NO);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n\n    return createField(field.getName(), val, newType, boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : null);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n\n    return createField(field.getName(), val, newType, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n\n    return createField(field.getName(), val, newType, boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : IndexOptions.NO);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n\n    return createField(field.getName(), val, newType, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal-&gt;indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n\n    return createField(field.getName(), val, newType, boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal->indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n\n    return createField(field.getName(), val, newType, boost);\n  }\n\n","bugFix":["2f80211c8197bb79dae092b6ea66a4a839be2add"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a76608e7f735dce831f49f9b0c6bc13f10adc5a6","date":1427421698,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal-&gt;indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n\n    return createField(field.getName(), val, newType, boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal-&gt;indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n\n    return createField(field.getName(), val, newType, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal-&gt;indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n\n    return createField(field.getName(), val, newType, boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal-&gt;indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n\n    return createField(field.getName(), val, newType, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal-&gt;indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n\n    return createField(field.getName(), val, newType, boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal-&gt;indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public StorableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n\n    return createField(field.getName(), val, newType, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeea025b4a7a8e8f70426ac4527ef481b3a86b72","date":1476199075,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal-&gt;indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n      /*org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n      newType.setTokenized(field.isTokenized());\n      newType.setStored(field.stored());\n      newType.setOmitNorms(field.omitNorms());\n      newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : IndexOptions.NONE);\n      newType.setStoreTermVectors(field.storeTermVector());\n      newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n      newType.setStoreTermVectorPositions(field.storeTermPositions());\n      newType.setStoreTermVectorPayloads(field.storeTermPayloads());*/\n    return createField(field.getName(), val, field, boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal-&gt;indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n\n    return createField(field.getName(), val, newType, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal-&gt;indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n      /*org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n      newType.setTokenized(field.isTokenized());\n      newType.setStored(field.stored());\n      newType.setOmitNorms(field.omitNorms());\n      newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : IndexOptions.NONE);\n      newType.setStoreTermVectors(field.storeTermVector());\n      newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n      newType.setStoreTermVectorPositions(field.storeTermPositions());\n      newType.setStoreTermVectorPayloads(field.storeTermPayloads());*/\n    return createField(field.getName(), val, field, boost);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal-&gt;indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n    org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : IndexOptions.NONE);\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n\n    return createField(field.getName(), val, newType, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldType#createField(SchemaField,Object,float).mjava","sourceNew":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal-&gt;indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public IndexableField createField(SchemaField field, Object value) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n      /*org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n      newType.setTokenized(field.isTokenized());\n      newType.setStored(field.stored());\n      newType.setOmitNorms(field.omitNorms());\n      newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : IndexOptions.NONE);\n      newType.setStoreTermVectors(field.storeTermVector());\n      newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n      newType.setStoreTermVectorPositions(field.storeTermPositions());\n      newType.setStoreTermVectorPayloads(field.storeTermPayloads());*/\n    return createField(field.getName(), val, field);\n  }\n\n","sourceOld":"  /**\n   * Used for adding a document when a field needs to be created from a\n   * type and a string.\n   *\n   * <p>\n   * By default, the indexed value is the same as the stored value\n   * (taken from toInternal()).   Having a different representation for\n   * external, internal, and indexed would present quite a few problems\n   * given the current Lucene architecture.  An analyzer for adding docs\n   * would need to translate internal-&gt;indexed while an analyzer for\n   * querying would need to translate external-&gt;indexed.\n   * </p>\n   * <p>\n   * The only other alternative to having internal==indexed would be to have\n   * internal==external.   In this case, toInternal should convert to\n   * the indexed representation, toExternal() should do nothing, and\n   * createField() should *not* call toInternal, but use the external\n   * value and set tokenized=true to get Lucene to convert to the\n   * internal(indexed) form.\n   * </p>\n   *\n   * :TODO: clean up and clarify this explanation.\n   *\n   * @see #toInternal\n   *\n   *\n   */\n  public IndexableField createField(SchemaField field, Object value, float boost) {\n    if (!field.indexed() && !field.stored()) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    \n    String val;\n    try {\n      val = toInternal(value.toString());\n    } catch (RuntimeException e) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error while creating field '\" + field + \"' from value '\" + value + \"'\", e);\n    }\n    if (val==null) return null;\n\n      /*org.apache.lucene.document.FieldType newType = new org.apache.lucene.document.FieldType();\n      newType.setTokenized(field.isTokenized());\n      newType.setStored(field.stored());\n      newType.setOmitNorms(field.omitNorms());\n      newType.setIndexOptions(field.indexed() ? getIndexOptions(field, val) : IndexOptions.NONE);\n      newType.setStoreTermVectors(field.storeTermVector());\n      newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n      newType.setStoreTermVectorPositions(field.storeTermPositions());\n      newType.setStoreTermVectorPayloads(field.storeTermPayloads());*/\n    return createField(field.getName(), val, field, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["c26f00b574427b55127e869b935845554afde1fa"],"409324b31a1419d7c05a38211168cf317e39be77":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"4e8c18828cd7c43a8460d7f4046d8138278a7eaa":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3184874f7f3aca850248483485b4995343066875":["73bb5a57dc75b54a39494f99986599cae7dff417"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","eeea025b4a7a8e8f70426ac4527ef481b3a86b72"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"1d028314cced5858683a1bb4741423d0f934257b":["7b1605dda5afabdc06fd136fa0dd14ad326e3001","409324b31a1419d7c05a38211168cf317e39be77"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["73bb5a57dc75b54a39494f99986599cae7dff417","3184874f7f3aca850248483485b4995343066875"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["1d028314cced5858683a1bb4741423d0f934257b","73bb5a57dc75b54a39494f99986599cae7dff417"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a76608e7f735dce831f49f9b0c6bc13f10adc5a6":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["4e8c18828cd7c43a8460d7f4046d8138278a7eaa"],"acd9883560fd89e6448b2b447302fe543040cd4f":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"73bb5a57dc75b54a39494f99986599cae7dff417":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["4e8c18828cd7c43a8460d7f4046d8138278a7eaa"],"409324b31a1419d7c05a38211168cf317e39be77":["1d028314cced5858683a1bb4741423d0f934257b"],"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","acd9883560fd89e6448b2b447302fe543040cd4f"],"c26f00b574427b55127e869b935845554afde1fa":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"4e8c18828cd7c43a8460d7f4046d8138278a7eaa":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3184874f7f3aca850248483485b4995343066875":["2bb2842e561df4e8e9ad89010605fc86ac265465","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1d028314cced5858683a1bb4741423d0f934257b":["95303ff3749680c743b9425f9cf99e6e4065e8a8","73bb5a57dc75b54a39494f99986599cae7dff417"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a76608e7f735dce831f49f9b0c6bc13f10adc5a6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["409324b31a1419d7c05a38211168cf317e39be77","1d028314cced5858683a1bb4741423d0f934257b"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"73bb5a57dc75b54a39494f99986599cae7dff417":["3184874f7f3aca850248483485b4995343066875","0a22eafe3f72a4c2945eaad9547e6c78816978f4","95303ff3749680c743b9425f9cf99e6e4065e8a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0a22eafe3f72a4c2945eaad9547e6c78816978f4","95303ff3749680c743b9425f9cf99e6e4065e8a8","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}