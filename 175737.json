{"path":"solr/core/src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","pathOld":"solr/src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","sourceNew":"  /**\n   * Handlers must be initialized before calling this function.  As soon as this is\n   * called, the handler can immediately accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    String norm = normalize( handlerName );\n    if( handler == null ) {\n      return handlers.remove( norm );\n    }\n    SolrRequestHandler old = handlers.put(norm, handler);\n    if (0 != norm.length() && handler instanceof SolrInfoMBean) {\n      core.getInfoRegistry().put(handlerName, handler);\n    }\n    return old;\n  }\n\n","sourceOld":"  /**\n   * Handlers must be initialized before calling this function.  As soon as this is\n   * called, the handler can immediately accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    String norm = normalize( handlerName );\n    if( handler == null ) {\n      return handlers.remove( norm );\n    }\n    SolrRequestHandler old = handlers.put(norm, handler);\n    if (0 != norm.length() && handler instanceof SolrInfoMBean) {\n      core.getInfoRegistry().put(handlerName, handler);\n    }\n    return old;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","pathOld":"solr/src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","sourceNew":"  /**\n   * Handlers must be initialized before calling this function.  As soon as this is\n   * called, the handler can immediately accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    String norm = normalize( handlerName );\n    if( handler == null ) {\n      return handlers.remove( norm );\n    }\n    SolrRequestHandler old = handlers.put(norm, handler);\n    if (0 != norm.length() && handler instanceof SolrInfoMBean) {\n      core.getInfoRegistry().put(handlerName, handler);\n    }\n    return old;\n  }\n\n","sourceOld":"  /**\n   * Handlers must be initialized before calling this function.  As soon as this is\n   * called, the handler can immediately accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    String norm = normalize( handlerName );\n    if( handler == null ) {\n      return handlers.remove( norm );\n    }\n    SolrRequestHandler old = handlers.put(norm, handler);\n    if (0 != norm.length() && handler instanceof SolrInfoMBean) {\n      core.getInfoRegistry().put(handlerName, handler);\n    }\n    return old;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","pathOld":"solr/src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","sourceNew":"  /**\n   * Handlers must be initialized before calling this function.  As soon as this is\n   * called, the handler can immediately accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    String norm = normalize( handlerName );\n    if( handler == null ) {\n      return handlers.remove( norm );\n    }\n    SolrRequestHandler old = handlers.put(norm, handler);\n    if (0 != norm.length() && handler instanceof SolrInfoMBean) {\n      core.getInfoRegistry().put(handlerName, handler);\n    }\n    return old;\n  }\n\n","sourceOld":"  /**\n   * Handlers must be initialized before calling this function.  As soon as this is\n   * called, the handler can immediately accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    String norm = normalize( handlerName );\n    if( handler == null ) {\n      return handlers.remove( norm );\n    }\n    SolrRequestHandler old = handlers.put(norm, handler);\n    if (0 != norm.length() && handler instanceof SolrInfoMBean) {\n      core.getInfoRegistry().put(handlerName, handler);\n    }\n    return old;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7eea62cd13a5ddc4fb9abea3b3820ff3128cb26","date":1419094190,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","sourceNew":"  /**\n   * Handlers must be initialized before calling this function.  As soon as this is\n   * called, the handler can immediately accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    String norm = normalize( handlerName );\n    if (handler == null) {\n      return handlers.remove(norm);\n    }\n    SolrRequestHandler old = handlers.put(norm, handler);\n    if (0 != norm.length() && handler instanceof SolrInfoMBean) {\n      core.getInfoRegistry().put(handlerName, handler);\n    }\n    return old;\n  }\n\n","sourceOld":"  /**\n   * Handlers must be initialized before calling this function.  As soon as this is\n   * called, the handler can immediately accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    String norm = normalize( handlerName );\n    if( handler == null ) {\n      return handlers.remove( norm );\n    }\n    SolrRequestHandler old = handlers.put(norm, handler);\n    if (0 != norm.length() && handler instanceof SolrInfoMBean) {\n      core.getInfoRegistry().put(handlerName, handler);\n    }\n    return old;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","sourceNew":"  /**\n   * Handlers must be initialized before calling this function.  As soon as this is\n   * called, the handler can immediately accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    String norm = normalize(handlerName);\n    if (handler == null) {\n      return handlers.remove(norm);\n    }\n    return handlers.put(norm, handler);\n//    return register(handlerName, new PluginRegistry.PluginHolder<>(null, handler));\n  }\n\n","sourceOld":"  /**\n   * Handlers must be initialized before calling this function.  As soon as this is\n   * called, the handler can immediately accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    String norm = normalize( handlerName );\n    if (handler == null) {\n      return handlers.remove(norm);\n    }\n    SolrRequestHandler old = handlers.put(norm, handler);\n    if (0 != norm.length() && handler instanceof SolrInfoMBean) {\n      core.getInfoRegistry().put(handlerName, handler);\n    }\n    return old;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestHandlers#register(String,SolrRequestHandler).mjava","sourceNew":"  /**\n   * Handlers must be initialized before calling this function.  As soon as this is\n   * called, the handler can immediately accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    String norm = normalize(handlerName);\n    if (handler == null) {\n      return handlers.remove(norm);\n    }\n    return handlers.put(norm, handler);\n//    return register(handlerName, new PluginRegistry.PluginHolder<>(null, handler));\n  }\n\n","sourceOld":"  /**\n   * Handlers must be initialized before calling this function.  As soon as this is\n   * called, the handler can immediately accept requests.\n   * \n   * This call is thread safe.\n   * \n   * @return the previous handler at the given path or null\n   */\n  public SolrRequestHandler register( String handlerName, SolrRequestHandler handler ) {\n    String norm = normalize( handlerName );\n    if (handler == null) {\n      return handlers.remove(norm);\n    }\n    SolrRequestHandler old = handlers.put(norm, handler);\n    if (0 != norm.length() && handler instanceof SolrInfoMBean) {\n      core.getInfoRegistry().put(handlerName, handler);\n    }\n    return old;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["b7eea62cd13a5ddc4fb9abea3b3820ff3128cb26","9aea0485ecacb6734c17da2d02569816c23a69c1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["b7eea62cd13a5ddc4fb9abea3b3820ff3128cb26"],"b7eea62cd13a5ddc4fb9abea3b3820ff3128cb26":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9aea0485ecacb6734c17da2d02569816c23a69c1"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["b7eea62cd13a5ddc4fb9abea3b3820ff3128cb26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7eea62cd13a5ddc4fb9abea3b3820ff3128cb26":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}