{"path":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","commits":[{"id":"2d5979567a033cd4cdf6534532afb2bcab456bc8","date":1172604417,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(field, new WhitespaceAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"abcdefg1\",\n        \"hijklmn1\",\n        \"opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\",\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\"}, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer());\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.UN_TOKENIZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      Hits hits = searcher.search(q);\n      assertEquals(docs.length,hits.length());\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      Hits hits = searcher.search(q);\n      assertEquals(0,hits.length());\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        Hits hits = searcher.search(q);\n        assertEquals(1,hits.length());\n        assertEquals(i,hits.id(0));\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        Hits hits = searcher.search(q);\n        assertEquals(1,hits.length());\n        assertEquals(i,hits.id(0));\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fbcf664c4a91dfd6d32c0ab0a8ac13298fcfc0e6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbcf664c4a91dfd6d32c0ab0a8ac13298fcfc0e6","date":1173325032,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(field, new WhitespaceAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer());\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.TOKENIZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      Hits hits = searcher.search(q);\n      assertEquals(docs.length,hits.length());\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      Hits hits = searcher.search(q);\n      assertEquals(0,hits.length());\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        Hits hits = searcher.search(q);\n        assertEquals(1,hits.length());\n        assertEquals(i,hits.id(0));\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        Hits hits = searcher.search(q);\n        assertEquals(1,hits.length());\n        assertEquals(i,hits.id(0));\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(field, new WhitespaceAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"abcdefg1\",\n        \"hijklmn1\",\n        \"opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\",\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\"}, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer());\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.UN_TOKENIZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      Hits hits = searcher.search(q);\n      assertEquals(docs.length,hits.length());\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      Hits hits = searcher.search(q);\n      assertEquals(0,hits.length());\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        Hits hits = searcher.search(q);\n        assertEquals(1,hits.length());\n        assertEquals(i,hits.id(0));\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        Hits hits = searcher.search(q);\n        assertEquals(1,hits.length());\n        assertEquals(i,hits.id(0));\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":["2d5979567a033cd4cdf6534532afb2bcab456bc8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(field, new WhitespaceAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.TOKENIZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      Hits hits = searcher.search(q);\n      assertEquals(docs.length,hits.length());\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      Hits hits = searcher.search(q);\n      assertEquals(0,hits.length());\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        Hits hits = searcher.search(q);\n        assertEquals(1,hits.length());\n        assertEquals(i,hits.id(0));\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        Hits hits = searcher.search(q);\n        assertEquals(1,hits.length());\n        assertEquals(i,hits.id(0));\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(field, new WhitespaceAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer());\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.TOKENIZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      Hits hits = searcher.search(q);\n      assertEquals(docs.length,hits.length());\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      Hits hits = searcher.search(q);\n      assertEquals(0,hits.length());\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        Hits hits = searcher.search(q);\n        assertEquals(1,hits.length());\n        assertEquals(i,hits.id(0));\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        Hits hits = searcher.search(q);\n        assertEquals(1,hits.length());\n        assertEquals(i,hits.id(0));\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(field, new WhitespaceAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.TOKENIZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(field, new WhitespaceAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.TOKENIZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      Hits hits = searcher.search(q);\n      assertEquals(docs.length,hits.length());\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      Hits hits = searcher.search(q);\n      assertEquals(0,hits.length());\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        Hits hits = searcher.search(q);\n        assertEquals(1,hits.length());\n        assertEquals(i,hits.id(0));\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        Hits hits = searcher.search(q);\n        assertEquals(1,hits.length());\n        assertEquals(i,hits.id(0));\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(field, new WhitespaceAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(field, new WhitespaceAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.TOKENIZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(field, new WhitespaceAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(field, new WhitespaceAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(field, new WhitespaceAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(field, new WhitespaceAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, field, new WhitespaceAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(field, new WhitespaceAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, field, new WhitespaceAnalyzer(Version.LUCENE_CURRENT));\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, field, new WhitespaceAnalyzer());\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, field, new WhitespaceAnalyzer(Version.LUCENE_CURRENT));\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    boolean dbg = false;\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (dbg) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (dbg) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","pathOld":"src/test/org/apache/lucene/search/TestWildcard#testParsingAndSearching().mjava","sourceNew":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","sourceOld":"  /**\n   * Test that wild card queries are parsed to the correct type and are searched correctly.\n   * This test looks at both parsing and execution of wildcard queries.\n   * Although placed here, it also tests prefix queries, verifying that\n   * prefix queries are not parsed into wild card queries, and viceversa.\n   * @throws Exception\n   */\n  public void testParsingAndSearching() throws Exception {\n    String field = \"content\";\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, field, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    qp.setAllowLeadingWildcard(true);\n    String docs[] = {\n        \"\\\\ abcdefg1\",\n        \"\\\\79 hijklmn1\",\n        \"\\\\\\\\ opqrstu1\",\n    };\n    // queries that should find all docs\n    String matchAll[] = {\n        \"*\", \"*1\", \"**1\", \"*?\", \"*?1\", \"?*1\", \"**\", \"***\", \"\\\\\\\\*\"\n    };\n    // queries that should find no docs\n    String matchNone[] = {\n        \"a*h\", \"a?h\", \"*a*h\", \"?a\", \"a?\",\n    };\n    // queries that should be parsed to prefix queries\n    String matchOneDocPrefix[][] = {\n        {\"a*\", \"ab*\", \"abc*\", }, // these should find only doc 0 \n        {\"h*\", \"hi*\", \"hij*\", \"\\\\\\\\7*\"}, // these should find only doc 1\n        {\"o*\", \"op*\", \"opq*\", \"\\\\\\\\\\\\\\\\*\"}, // these should find only doc 2\n    };\n    // queries that should be parsed to wildcard queries\n    String matchOneDocWild[][] = {\n        {\"*a*\", \"*ab*\", \"*abc**\", \"ab*e*\", \"*g?\", \"*f?1\", \"abc**\"}, // these should find only doc 0\n        {\"*h*\", \"*hi*\", \"*hij**\", \"hi*k*\", \"*n?\", \"*m?1\", \"hij**\"}, // these should find only doc 1\n        {\"*o*\", \"*op*\", \"*opq**\", \"op*q*\", \"*u?\", \"*t?1\", \"opq**\"}, // these should find only doc 2\n    };\n\n    // prepare the index\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    for (int i = 0; i < docs.length; i++) {\n      Document doc = new Document();\n      doc.add(new Field(field,docs[i],Store.NO,Index.ANALYZED));\n      iw.addDocument(doc);\n    }\n    iw.close();\n    \n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    // test queries that must find all\n    for (int i = 0; i < matchAll.length; i++) {\n      String qtxt = matchAll[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchAll: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(docs.length,hits.length);\n    }\n    \n    // test queries that must find none\n    for (int i = 0; i < matchNone.length; i++) {\n      String qtxt = matchNone[i];\n      Query q = qp.parse(qtxt);\n      if (VERBOSE) System.out.println(\"matchNone: qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n      ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n      assertEquals(0,hits.length);\n    }\n\n    // test queries that must be prefix queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocPrefix[i].length; j++) {\n        String qtxt = matchOneDocPrefix[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 prefix: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(PrefixQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    // test queries that must be wildcard queries and must find only one doc\n    for (int i = 0; i < matchOneDocPrefix.length; i++) {\n      for (int j = 0; j < matchOneDocWild[i].length; j++) {\n        String qtxt = matchOneDocWild[i][j];\n        Query q = qp.parse(qtxt);\n        if (VERBOSE) System.out.println(\"match 1 wild: doc=\"+docs[i]+\" qtxt=\"+qtxt+\" q=\"+q+\" \"+q.getClass().getName());\n        assertEquals(WildcardQuery.class, q.getClass());\n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1,hits.length);\n        assertEquals(i,hits[0].doc);\n      }\n    }\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["fbcf664c4a91dfd6d32c0ab0a8ac13298fcfc0e6"],"ba1116b3450a9c1642c89445d131b37344055245":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fbcf664c4a91dfd6d32c0ab0a8ac13298fcfc0e6":["2d5979567a033cd4cdf6534532afb2bcab456bc8"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["ba1116b3450a9c1642c89445d131b37344055245"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"2d5979567a033cd4cdf6534532afb2bcab456bc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["ba1116b3450a9c1642c89445d131b37344055245"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"ba1116b3450a9c1642c89445d131b37344055245":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"fbcf664c4a91dfd6d32c0ab0a8ac13298fcfc0e6":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d5979567a033cd4cdf6534532afb2bcab456bc8"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2d5979567a033cd4cdf6534532afb2bcab456bc8":["fbcf664c4a91dfd6d32c0ab0a8ac13298fcfc0e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}