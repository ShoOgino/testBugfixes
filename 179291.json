{"path":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,SortField.Type,FieldComparatorSource).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,SortField.Type,FieldComparatorSource).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,SortField.Type,FieldComparatorSource).mjava","sourceNew":"  Comparator getCachedComparator(String fieldname, SortField.Type type, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case STRING:\n      comparator = comparatorNatural(fieldname);\n      break;\n    case CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","sourceOld":"  Comparator getCachedComparator(String fieldname, SortField.Type type, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case STRING:\n      comparator = comparatorNatural(fieldname);\n      break;\n    case CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,SortField.Type,FieldComparatorSource).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,SortField.Type,FieldComparatorSource).mjava","sourceNew":"  Comparator getCachedComparator(String fieldname, SortField.Type type, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case STRING:\n      comparator = comparatorNatural(fieldname);\n      break;\n    case CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","sourceOld":"  Comparator getCachedComparator(String fieldname, SortField.Type type, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case STRING:\n      comparator = comparatorNatural(fieldname);\n      break;\n    case CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,SortField.Type,FieldComparatorSource).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,SortField.Type,FieldComparatorSource).mjava","sourceNew":"  Comparator getCachedComparator(String fieldname, SortField.Type type, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case STRING:\n      comparator = comparatorNatural(fieldname);\n      break;\n    case CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","sourceOld":"  Comparator getCachedComparator(String fieldname, SortField.Type type, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case STRING:\n      comparator = comparatorNatural(fieldname);\n      break;\n    case CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,SortField.Type,FieldComparatorSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,SortField.Type,FieldComparatorSource).mjava","sourceNew":"  Comparator getCachedComparator(String fieldname, SortField.Type type, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case STRING:\n      comparator = comparatorNatural(fieldname);\n      break;\n    case CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","sourceOld":"  Comparator getCachedComparator(String fieldname, SortField.Type type, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case STRING:\n      comparator = comparatorNatural(fieldname);\n      break;\n    case CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,SortField.Type,FieldComparatorSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,SortField.Type,FieldComparatorSource).mjava","sourceNew":"  Comparator getCachedComparator(String fieldname, SortField.Type type, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case STRING:\n      comparator = comparatorNatural(fieldname);\n      break;\n    case CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","sourceOld":"  Comparator getCachedComparator(String fieldname, SortField.Type type, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case STRING:\n      comparator = comparatorNatural(fieldname);\n      break;\n    case CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"faff74992839549208db29d95b9ad4a1d3846c79","date":1385672428,"type":4,"author":"Steven Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,SortField.Type,FieldComparatorSource).mjava","sourceNew":null,"sourceOld":"  Comparator getCachedComparator(String fieldname, SortField.Type type, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case STRING:\n      comparator = comparatorNatural(fieldname);\n      break;\n    case CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,SortField.Type,FieldComparatorSource).mjava","sourceNew":null,"sourceOld":"  Comparator getCachedComparator(String fieldname, SortField.Type type, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case STRING:\n      comparator = comparatorNatural(fieldname);\n      break;\n    case CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["19275ba31e621f6da1b83bf13af75233876fd3d4","faff74992839549208db29d95b9ad4a1d3846c79"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"faff74992839549208db29d95b9ad4a1d3846c79":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["faff74992839549208db29d95b9ad4a1d3846c79"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","74f45af4339b0daf7a95c820ab88c1aea74fbce0","faff74992839549208db29d95b9ad4a1d3846c79"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"faff74992839549208db29d95b9ad4a1d3846c79":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}