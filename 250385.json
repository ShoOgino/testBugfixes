{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertXmlFile(File,String...).mjava","commits":[{"id":"a0cf46558b3f7708ed3a21e174b9e11cd30e26be","date":1365551184,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertXmlFile(File,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreContainer#assertXmlFile(File,String...).mjava","sourceNew":"  public void assertXmlFile(final File file, String... xpath)\n      throws IOException, SAXException {\n\n    try {\n      String xml = FileUtils.readFileToString(file, \"UTF-8\");\n      String results = h.validateXPath(xml, xpath);\n      if (null != results) {\n        String msg = \"File XPath failure: file=\" + file.getPath() + \" xpath=\"\n            + results + \"\\n\\nxml was: \" + xml;\n        fail(msg);\n      }\n    } catch (XPathExpressionException e2) {\n      throw new RuntimeException(\"XPath is invalid\", e2);\n    }\n  }\n\n","sourceOld":"  public void assertXmlFile(final File file, String... xpath)\n      throws IOException, SAXException {\n    \n    try {\n      String xml = FileUtils.readFileToString(file, \"UTF-8\");\n      String results = h.validateXPath(xml, xpath);\n      if (null != results) {\n        String msg = \"File XPath failure: file=\" + file.getPath() + \" xpath=\"\n            + results + \"\\n\\nxml was: \" + xml;\n        fail(msg);\n      }\n    } catch (XPathExpressionException e2) {\n      throw new RuntimeException(\"XPath is invalid\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d264f386d864b5751209060e8886ca9845f70469","date":1372172126,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertXmlFile(File,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertXmlFile(File,String...).mjava","sourceNew":"  public static void assertXmlFile(final File file, String... xpath)\n      throws IOException, SAXException {\n\n    try {\n      String xml = FileUtils.readFileToString(file, \"UTF-8\");\n      String results = TestHarness.validateXPath(xml, xpath);\n      if (null != results) {\n        String msg = \"File XPath failure: file=\" + file.getPath() + \" xpath=\"\n            + results + \"\\n\\nxml was: \" + xml;\n        fail(msg);\n      }\n    } catch (XPathExpressionException e2) {\n      throw new RuntimeException(\"XPath is invalid\", e2);\n    }\n  }\n\n","sourceOld":"  public void assertXmlFile(final File file, String... xpath)\n      throws IOException, SAXException {\n\n    try {\n      String xml = FileUtils.readFileToString(file, \"UTF-8\");\n      String results = h.validateXPath(xml, xpath);\n      if (null != results) {\n        String msg = \"File XPath failure: file=\" + file.getPath() + \" xpath=\"\n            + results + \"\\n\\nxml was: \" + xml;\n        fail(msg);\n      }\n    } catch (XPathExpressionException e2) {\n      throw new RuntimeException(\"XPath is invalid\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"354983dcdf70c800bf2573d10b54a7391b1dc167","date":1372183171,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertXmlFile(File,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertXmlFile(File,String...).mjava","sourceNew":"  public void assertXmlFile(final File file, String... xpath)\n      throws IOException, SAXException {\n\n    try {\n      String xml = FileUtils.readFileToString(file, \"UTF-8\");\n      String results = h.validateXPath(xml, xpath);\n      if (null != results) {\n        String msg = \"File XPath failure: file=\" + file.getPath() + \" xpath=\"\n            + results + \"\\n\\nxml was: \" + xml;\n        fail(msg);\n      }\n    } catch (XPathExpressionException e2) {\n      throw new RuntimeException(\"XPath is invalid\", e2);\n    }\n  }\n\n","sourceOld":"  public static void assertXmlFile(final File file, String... xpath)\n      throws IOException, SAXException {\n\n    try {\n      String xml = FileUtils.readFileToString(file, \"UTF-8\");\n      String results = TestHarness.validateXPath(xml, xpath);\n      if (null != results) {\n        String msg = \"File XPath failure: file=\" + file.getPath() + \" xpath=\"\n            + results + \"\\n\\nxml was: \" + xml;\n        fail(msg);\n      }\n    } catch (XPathExpressionException e2) {\n      throw new RuntimeException(\"XPath is invalid\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertXmlFile(File,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertXmlFile(File,String...).mjava","sourceNew":"  public static void assertXmlFile(final File file, String... xpath)\n      throws IOException, SAXException {\n\n    try {\n      String xml = FileUtils.readFileToString(file, \"UTF-8\");\n      String results = TestHarness.validateXPath(xml, xpath);\n      if (null != results) {\n        String msg = \"File XPath failure: file=\" + file.getPath() + \" xpath=\"\n            + results + \"\\n\\nxml was: \" + xml;\n        fail(msg);\n      }\n    } catch (XPathExpressionException e2) {\n      throw new RuntimeException(\"XPath is invalid\", e2);\n    }\n  }\n\n","sourceOld":"  public void assertXmlFile(final File file, String... xpath)\n      throws IOException, SAXException {\n\n    try {\n      String xml = FileUtils.readFileToString(file, \"UTF-8\");\n      String results = h.validateXPath(xml, xpath);\n      if (null != results) {\n        String msg = \"File XPath failure: file=\" + file.getPath() + \" xpath=\"\n            + results + \"\\n\\nxml was: \" + xml;\n        fail(msg);\n      }\n    } catch (XPathExpressionException e2) {\n      throw new RuntimeException(\"XPath is invalid\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertXmlFile(File,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertXmlFile(File,String...).mjava","sourceNew":"  public static void assertXmlFile(final File file, String... xpath)\n      throws IOException, SAXException {\n\n    try {\n      String xml = FileUtils.readFileToString(file, \"UTF-8\");\n      String results = TestHarness.validateXPath(xml, xpath);\n      if (null != results) {\n        String msg = \"File XPath failure: file=\" + file.getPath() + \" xpath=\"\n            + results + \"\\n\\nxml was: \" + xml;\n        fail(msg);\n      }\n    } catch (XPathExpressionException e2) {\n      throw new RuntimeException(\"XPath is invalid\", e2);\n    }\n  }\n\n","sourceOld":"  public void assertXmlFile(final File file, String... xpath)\n      throws IOException, SAXException {\n\n    try {\n      String xml = FileUtils.readFileToString(file, \"UTF-8\");\n      String results = h.validateXPath(xml, xpath);\n      if (null != results) {\n        String msg = \"File XPath failure: file=\" + file.getPath() + \" xpath=\"\n            + results + \"\\n\\nxml was: \" + xml;\n        fail(msg);\n      }\n    } catch (XPathExpressionException e2) {\n      throw new RuntimeException(\"XPath is invalid\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertXmlFile(File,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertXmlFile(File,String...).mjava","sourceNew":"  public static void assertXmlFile(final File file, String... xpath)\n      throws IOException, SAXException {\n\n    try {\n      String xml = FileUtils.readFileToString(file, \"UTF-8\");\n      String results = TestHarness.validateXPath(xml, xpath);\n      if (null != results) {\n        String msg = \"File XPath failure: file=\" + file.getPath() + \" xpath=\"\n            + results + \"\\n\\nxml was: \" + xml;\n        fail(msg);\n      }\n    } catch (XPathExpressionException e2) {\n      throw new RuntimeException(\"XPath is invalid\", e2);\n    }\n  }\n\n","sourceOld":"  public static void assertXmlFile(final File file, String... xpath)\n      throws IOException, SAXException {\n\n    try {\n      String xml = FileUtils.readFileToString(file, \"UTF-8\");\n      String results = TestHarness.validateXPath(xml, xpath);\n      if (null != results) {\n        String msg = \"File XPath failure: file=\" + file.getPath() + \" xpath=\"\n            + results + \"\\n\\nxml was: \" + xml;\n        fail(msg);\n      }\n    } catch (XPathExpressionException e2) {\n      throw new RuntimeException(\"XPath is invalid\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertXmlFile(File,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertXmlFile(File,String...).mjava","sourceNew":"  public static void assertXmlFile(final File file, String... xpath)\n      throws IOException, SAXException {\n\n    try {\n      String xml = FileUtils.readFileToString(file, \"UTF-8\");\n      String results = TestHarness.validateXPath(xml, xpath);\n      if (null != results) {\n        String msg = \"File XPath failure: file=\" + file.getPath() + \" xpath=\"\n            + results + \"\\n\\nxml was: \" + xml;\n        fail(msg);\n      }\n    } catch (XPathExpressionException e2) {\n      throw new RuntimeException(\"XPath is invalid\", e2);\n    }\n  }\n\n","sourceOld":"  public static void assertXmlFile(final File file, String... xpath)\n      throws IOException, SAXException {\n\n    try {\n      String xml = FileUtils.readFileToString(file, \"UTF-8\");\n      String results = TestHarness.validateXPath(xml, xpath);\n      if (null != results) {\n        String msg = \"File XPath failure: file=\" + file.getPath() + \" xpath=\"\n            + results + \"\\n\\nxml was: \" + xml;\n        fail(msg);\n      }\n    } catch (XPathExpressionException e2) {\n      throw new RuntimeException(\"XPath is invalid\", e2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7116474e2e390259937401cf928323e0cbc75e60":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["37a0f60745e53927c4c876cfe5b5a58170f0646c","19275ba31e621f6da1b83bf13af75233876fd3d4"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be","7116474e2e390259937401cf928323e0cbc75e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"354983dcdf70c800bf2573d10b54a7391b1dc167":["d264f386d864b5751209060e8886ca9845f70469"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["7116474e2e390259937401cf928323e0cbc75e60"],"d264f386d864b5751209060e8886ca9845f70469":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d264f386d864b5751209060e8886ca9845f70469"],"7116474e2e390259937401cf928323e0cbc75e60":["37a0f60745e53927c4c876cfe5b5a58170f0646c","19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["7116474e2e390259937401cf928323e0cbc75e60"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d264f386d864b5751209060e8886ca9845f70469":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}