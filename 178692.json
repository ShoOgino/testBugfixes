{"path":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testQueryWrapperFilterPropagatesApproximations().mjava","commits":[{"id":"bcf6334db27a9662c6121404be1f1da2598c58a8","date":1424866078,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testQueryWrapperFilterPropagatesApproximations().mjava","pathOld":"/dev/null","sourceNew":"  public void testQueryWrapperFilterPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n    final IndexReader reader = writer.getReader();\n    writer.close();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    final Query query = new QueryWrapperFilter(new RandomApproximationQuery(new TermQuery(new Term(\"foo\", \"bar\")), random()));\n    final Weight weight = searcher.createNormalizedWeight(query, random().nextBoolean());\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertNotNull(scorer.asTwoPhaseIterator());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51a6c45b517e7699dc1e378c609477edb3bc7e7d","date":1425218350,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testQueryWrapperFilterPropagatesApproximations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testQueryWrapperFilterPropagatesApproximations().mjava","sourceNew":"  public void testQueryWrapperFilterPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n    final IndexReader reader = writer.getReader();\n    writer.close();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n    final Query query = new QueryWrapperFilter(new RandomApproximationQuery(new TermQuery(new Term(\"foo\", \"bar\")), random()));\n    final Weight weight = searcher.createNormalizedWeight(query, random().nextBoolean());\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertNotNull(scorer.asTwoPhaseIterator());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQueryWrapperFilterPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n    final IndexReader reader = writer.getReader();\n    writer.close();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    final Query query = new QueryWrapperFilter(new RandomApproximationQuery(new TermQuery(new Term(\"foo\", \"bar\")), random()));\n    final Weight weight = searcher.createNormalizedWeight(query, random().nextBoolean());\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertNotNull(scorer.asTwoPhaseIterator());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testQueryWrapperFilterPropagatesApproximations().mjava","pathOld":"/dev/null","sourceNew":"  public void testQueryWrapperFilterPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n    final IndexReader reader = writer.getReader();\n    writer.close();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n    final Query query = new QueryWrapperFilter(new RandomApproximationQuery(new TermQuery(new Term(\"foo\", \"bar\")), random()));\n    final Weight weight = searcher.createNormalizedWeight(query, random().nextBoolean());\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertNotNull(scorer.asTwoPhaseIterator());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testQueryWrapperFilterPropagatesApproximations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testQueryWrapperFilterPropagatesApproximations().mjava","sourceNew":"  public void testQueryWrapperFilterPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n    final IndexReader reader = writer.getReader();\n    writer.close();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n    final Query query = new QueryWrapperFilter(new RandomApproximationQuery(new TermQuery(new Term(\"foo\", \"bar\")), random()));\n    final Weight weight = searcher.createNormalizedWeight(query, random().nextBoolean());\n    final Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertNotNull(scorer.asTwoPhaseIterator());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQueryWrapperFilterPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n    final IndexReader reader = writer.getReader();\n    writer.close();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n    final Query query = new QueryWrapperFilter(new RandomApproximationQuery(new TermQuery(new Term(\"foo\", \"bar\")), random()));\n    final Weight weight = searcher.createNormalizedWeight(query, random().nextBoolean());\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertNotNull(scorer.asTwoPhaseIterator());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestQueryWrapperFilter#testQueryWrapperFilterPropagatesApproximations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryWrapperFilter#testQueryWrapperFilterPropagatesApproximations().mjava","sourceNew":"  public void testQueryWrapperFilterPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n    final IndexReader reader = writer.getReader();\n    writer.close();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n    final Query query = new QueryWrapperFilter(new RandomApproximationQuery(new TermQuery(new Term(\"foo\", \"bar\")), random()));\n    final Weight weight = searcher.createNormalizedWeight(query, random().nextBoolean());\n    final Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertNotNull(scorer.asTwoPhaseIterator());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQueryWrapperFilterPropagatesApproximations() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    writer.addDocument(doc);\n    writer.commit();\n    final IndexReader reader = writer.getReader();\n    writer.close();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // to still have approximations\n    final Query query = new QueryWrapperFilter(new RandomApproximationQuery(new TermQuery(new Term(\"foo\", \"bar\")), random()));\n    final Weight weight = searcher.createNormalizedWeight(query, random().nextBoolean());\n    final Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertNotNull(scorer.asTwoPhaseIterator());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"51a6c45b517e7699dc1e378c609477edb3bc7e7d":["bcf6334db27a9662c6121404be1f1da2598c58a8"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","51a6c45b517e7699dc1e378c609477edb3bc7e7d"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["51a6c45b517e7699dc1e378c609477edb3bc7e7d"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bcf6334db27a9662c6121404be1f1da2598c58a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d52e48927ca4ef3655a261f2230b968b6fdf3608"]},"commit2Childs":{"51a6c45b517e7699dc1e378c609477edb3bc7e7d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0f4464508ee83288c8c4585b533f9faaa93aa314":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","bcf6334db27a9662c6121404be1f1da2598c58a8"],"bcf6334db27a9662c6121404be1f1da2598c58a8":["51a6c45b517e7699dc1e378c609477edb3bc7e7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}