{"path":"lucene/backwards/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod1().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod1().mjava","pathOld":"backwards/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod1().mjava","sourceNew":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries2, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries3, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries4, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries5, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","sourceOld":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries2, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries3, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries4, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries5, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod1().mjava","sourceNew":null,"sourceOld":"  public void testStaticMethod1() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    String[] queries = {\"one\", \"two\"};\n    Query q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"b:one t:two\", q.toString());\n\n    String[] queries2 = {\"+one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries2, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"(+b:one) (+t:two)\", q.toString());\n\n    String[] queries3 = {\"one\", \"+two\"};\n    q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries3, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"b:one (+t:two)\", q.toString());\n\n    String[] queries4 = {\"one +more\", \"+two\"};\n    q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries4, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n    String[] queries5 = {\"blah\"};\n    try {\n      q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries5, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n    \n    // check also with stop words for this static form (qtxts[], fields[]).\n    TestQueryParser.QPTestAnalyzer stopA = new TestQueryParser.QPTestAnalyzer();\n    \n    String[] queries6 = {\"((+stop))\", \"+((stop))\"};\n    q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries6, fields, stopA);\n    assertEquals(\"\", q.toString());\n    \n    String[] queries7 = {\"one ((+stop)) +more\", \"+((stop)) +two\"};\n    q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, queries7, fields, stopA);\n    assertEquals(\"(b:one +b:more) (+t:two)\", q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}