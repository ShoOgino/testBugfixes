{"path":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter.ExportWriterStream#parseComp(String).mjava","commits":[{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter.ExportWriterStream#parseComp(String).mjava","pathOld":"/dev/null","sourceNew":"    private StreamComparator parseComp(String sort) throws IOException {\n\n      String[] sorts = sort.split(\",\");\n      StreamComparator[] comps = new StreamComparator[sorts.length];\n      for(int i=0; i<sorts.length; i++) {\n        String s = sorts[i];\n\n        String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n\n        if (spec.length != 2) {\n          throw new IOException(\"Invalid sort spec:\" + s);\n        }\n\n        String fieldName = spec[0].trim();\n        String order = spec[1].trim();\n\n        comps[i] = new FieldComparator(fieldName, order.equalsIgnoreCase(\"asc\") ? ComparatorOrder.ASCENDING : ComparatorOrder.DESCENDING);\n      }\n\n      if(comps.length > 1) {\n        return new MultipleFieldComparator(comps);\n      } else {\n        return comps[0];\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee","date":1593704090,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter.ExportWriterStream#parseComp(String).mjava","sourceNew":null,"sourceOld":"    private StreamComparator parseComp(String sort) throws IOException {\n\n      String[] sorts = sort.split(\",\");\n      StreamComparator[] comps = new StreamComparator[sorts.length];\n      for(int i=0; i<sorts.length; i++) {\n        String s = sorts[i];\n\n        String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n\n        if (spec.length != 2) {\n          throw new IOException(\"Invalid sort spec:\" + s);\n        }\n\n        String fieldName = spec[0].trim();\n        String order = spec[1].trim();\n\n        comps[i] = new FieldComparator(fieldName, order.equalsIgnoreCase(\"asc\") ? ComparatorOrder.ASCENDING : ComparatorOrder.DESCENDING);\n      }\n\n      if(comps.length > 1) {\n        return new MultipleFieldComparator(comps);\n      } else {\n        return comps[0];\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["804a8d5358fe7b7563b85ee7838714d720b89272"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"804a8d5358fe7b7563b85ee7838714d720b89272":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"]},"commit2Childs":{"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["804a8d5358fe7b7563b85ee7838714d720b89272"],"804a8d5358fe7b7563b85ee7838714d720b89272":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}