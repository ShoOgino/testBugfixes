{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#test().mjava","commits":[{"id":"8c146731a64debc22c115bbf11ee1a060aa7ea02","date":1457616596,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    NumericDocValues doubles = cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", doubles, cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Double.doubleToLongBits(Double.MAX_VALUE - i), doubles.get(i));\n    }\n    \n    NumericDocValues longs = cache.getNumerics(reader, \"theLong\", FieldCache.LEGACY_LONG_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", longs, cache.getNumerics(reader, \"theLong\", FieldCache.LEGACY_LONG_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Long.MAX_VALUE - i, longs.get(i));\n    }\n\n    NumericDocValues ints = cache.getNumerics(reader, \"theInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", ints, cache.getNumerics(reader, \"theInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Integer.MAX_VALUE - i, ints.get(i));\n    }\n    \n    NumericDocValues floats = cache.getNumerics(reader, \"theFloat\", FieldCache.LEGACY_FLOAT_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", floats, cache.getNumerics(reader, \"theFloat\", FieldCache.LEGACY_FLOAT_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Float.floatToIntBits(Float.MAX_VALUE - i), floats.get(i));\n    }\n\n    Bits docsWithField = cache.getDocsWithField(reader, \"theLong\", null);\n    assertSame(\"Second request to cache return same array\", docsWithField, cache.getDocsWithField(reader, \"theLong\", null));\n    assertTrue(\"docsWithField(theLong) must be class Bits.MatchAllBits\", docsWithField instanceof Bits.MatchAllBits);\n    assertTrue(\"docsWithField(theLong) Size: \" + docsWithField.length() + \" is not: \" + NUM_DOCS, docsWithField.length() == NUM_DOCS);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      assertTrue(docsWithField.get(i));\n    }\n    \n    docsWithField = cache.getDocsWithField(reader, \"sparse\", null);\n    assertSame(\"Second request to cache return same array\", docsWithField, cache.getDocsWithField(reader, \"sparse\", null));\n    assertFalse(\"docsWithField(sparse) must not be class Bits.MatchAllBits\", docsWithField instanceof Bits.MatchAllBits);\n    assertTrue(\"docsWithField(sparse) Size: \" + docsWithField.length() + \" is not: \" + NUM_DOCS, docsWithField.length() == NUM_DOCS);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      assertEquals(i%2 == 0, docsWithField.get(i));\n    }\n\n    FieldCache.DEFAULT.purgeByCacheKey(reader.getCoreCacheKey());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#test().mjava","sourceNew":"  public void test() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    NumericDocValues doubles = cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", doubles, cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Double.doubleToLongBits(Double.MAX_VALUE - i), doubles.get(i));\n    }\n    \n    NumericDocValues longs = cache.getNumerics(reader, \"theLong\", FieldCache.LEGACY_LONG_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", longs, cache.getNumerics(reader, \"theLong\", FieldCache.LEGACY_LONG_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Long.MAX_VALUE - i, longs.get(i));\n    }\n\n    NumericDocValues ints = cache.getNumerics(reader, \"theInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", ints, cache.getNumerics(reader, \"theInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Integer.MAX_VALUE - i, ints.get(i));\n    }\n    \n    NumericDocValues floats = cache.getNumerics(reader, \"theFloat\", FieldCache.LEGACY_FLOAT_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", floats, cache.getNumerics(reader, \"theFloat\", FieldCache.LEGACY_FLOAT_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Float.floatToIntBits(Float.MAX_VALUE - i), floats.get(i));\n    }\n\n    Bits docsWithField = cache.getDocsWithField(reader, \"theLong\", null);\n    assertSame(\"Second request to cache return same array\", docsWithField, cache.getDocsWithField(reader, \"theLong\", null));\n    assertTrue(\"docsWithField(theLong) must be class Bits.MatchAllBits\", docsWithField instanceof Bits.MatchAllBits);\n    assertTrue(\"docsWithField(theLong) Size: \" + docsWithField.length() + \" is not: \" + NUM_DOCS, docsWithField.length() == NUM_DOCS);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      assertTrue(docsWithField.get(i));\n    }\n    \n    docsWithField = cache.getDocsWithField(reader, \"sparse\", null);\n    assertSame(\"Second request to cache return same array\", docsWithField, cache.getDocsWithField(reader, \"sparse\", null));\n    assertFalse(\"docsWithField(sparse) must not be class Bits.MatchAllBits\", docsWithField instanceof Bits.MatchAllBits);\n    assertTrue(\"docsWithField(sparse) Size: \" + docsWithField.length() + \" is not: \" + NUM_DOCS, docsWithField.length() == NUM_DOCS);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      assertEquals(i%2 == 0, docsWithField.get(i));\n    }\n\n    FieldCache.DEFAULT.purgeByCacheKey(reader.getCoreCacheKey());\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    NumericDocValues doubles = cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", doubles, cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Double.doubleToLongBits(Double.MAX_VALUE - i), doubles.get(i));\n    }\n    \n    NumericDocValues longs = cache.getNumerics(reader, \"theLong\", FieldCache.LEGACY_LONG_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", longs, cache.getNumerics(reader, \"theLong\", FieldCache.LEGACY_LONG_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Long.MAX_VALUE - i, longs.get(i));\n    }\n\n    NumericDocValues ints = cache.getNumerics(reader, \"theInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", ints, cache.getNumerics(reader, \"theInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Integer.MAX_VALUE - i, ints.get(i));\n    }\n    \n    NumericDocValues floats = cache.getNumerics(reader, \"theFloat\", FieldCache.LEGACY_FLOAT_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", floats, cache.getNumerics(reader, \"theFloat\", FieldCache.LEGACY_FLOAT_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Float.floatToIntBits(Float.MAX_VALUE - i), floats.get(i));\n    }\n\n    Bits docsWithField = cache.getDocsWithField(reader, \"theLong\", null);\n    assertSame(\"Second request to cache return same array\", docsWithField, cache.getDocsWithField(reader, \"theLong\", null));\n    assertTrue(\"docsWithField(theLong) must be class Bits.MatchAllBits\", docsWithField instanceof Bits.MatchAllBits);\n    assertTrue(\"docsWithField(theLong) Size: \" + docsWithField.length() + \" is not: \" + NUM_DOCS, docsWithField.length() == NUM_DOCS);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      assertTrue(docsWithField.get(i));\n    }\n    \n    docsWithField = cache.getDocsWithField(reader, \"sparse\", null);\n    assertSame(\"Second request to cache return same array\", docsWithField, cache.getDocsWithField(reader, \"sparse\", null));\n    assertFalse(\"docsWithField(sparse) must not be class Bits.MatchAllBits\", docsWithField instanceof Bits.MatchAllBits);\n    assertTrue(\"docsWithField(sparse) Size: \" + docsWithField.length() + \" is not: \" + NUM_DOCS, docsWithField.length() == NUM_DOCS);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      assertEquals(i%2 == 0, docsWithField.get(i));\n    }\n\n    FieldCache.DEFAULT.purgeByCacheKey(reader.getCoreCacheKey());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#test().mjava","sourceNew":"  public void test() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    NumericDocValues doubles = cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", doubles, cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Double.doubleToLongBits(Double.MAX_VALUE - i), doubles.get(i));\n    }\n    \n    NumericDocValues longs = cache.getNumerics(reader, \"theLong\", FieldCache.LEGACY_LONG_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", longs, cache.getNumerics(reader, \"theLong\", FieldCache.LEGACY_LONG_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Long.MAX_VALUE - i, longs.get(i));\n    }\n\n    NumericDocValues ints = cache.getNumerics(reader, \"theInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", ints, cache.getNumerics(reader, \"theInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Integer.MAX_VALUE - i, ints.get(i));\n    }\n    \n    NumericDocValues floats = cache.getNumerics(reader, \"theFloat\", FieldCache.LEGACY_FLOAT_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", floats, cache.getNumerics(reader, \"theFloat\", FieldCache.LEGACY_FLOAT_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Float.floatToIntBits(Float.MAX_VALUE - i), floats.get(i));\n    }\n\n    Bits docsWithField = cache.getDocsWithField(reader, \"theLong\", null);\n    assertSame(\"Second request to cache return same array\", docsWithField, cache.getDocsWithField(reader, \"theLong\", null));\n    assertTrue(\"docsWithField(theLong) must be class Bits.MatchAllBits\", docsWithField instanceof Bits.MatchAllBits);\n    assertTrue(\"docsWithField(theLong) Size: \" + docsWithField.length() + \" is not: \" + NUM_DOCS, docsWithField.length() == NUM_DOCS);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      assertTrue(docsWithField.get(i));\n    }\n    \n    docsWithField = cache.getDocsWithField(reader, \"sparse\", null);\n    assertSame(\"Second request to cache return same array\", docsWithField, cache.getDocsWithField(reader, \"sparse\", null));\n    assertFalse(\"docsWithField(sparse) must not be class Bits.MatchAllBits\", docsWithField instanceof Bits.MatchAllBits);\n    assertTrue(\"docsWithField(sparse) Size: \" + docsWithField.length() + \" is not: \" + NUM_DOCS, docsWithField.length() == NUM_DOCS);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      assertEquals(i%2 == 0, docsWithField.get(i));\n    }\n\n    FieldCache.DEFAULT.purgeByCacheKey(reader.getCoreCacheKey());\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    NumericDocValues doubles = cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", doubles, cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Double.doubleToLongBits(Double.MAX_VALUE - i), doubles.get(i));\n    }\n    \n    NumericDocValues longs = cache.getNumerics(reader, \"theLong\", FieldCache.LEGACY_LONG_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", longs, cache.getNumerics(reader, \"theLong\", FieldCache.LEGACY_LONG_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Long.MAX_VALUE - i, longs.get(i));\n    }\n\n    NumericDocValues ints = cache.getNumerics(reader, \"theInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", ints, cache.getNumerics(reader, \"theInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Integer.MAX_VALUE - i, ints.get(i));\n    }\n    \n    NumericDocValues floats = cache.getNumerics(reader, \"theFloat\", FieldCache.LEGACY_FLOAT_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", floats, cache.getNumerics(reader, \"theFloat\", FieldCache.LEGACY_FLOAT_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Float.floatToIntBits(Float.MAX_VALUE - i), floats.get(i));\n    }\n\n    Bits docsWithField = cache.getDocsWithField(reader, \"theLong\", null);\n    assertSame(\"Second request to cache return same array\", docsWithField, cache.getDocsWithField(reader, \"theLong\", null));\n    assertTrue(\"docsWithField(theLong) must be class Bits.MatchAllBits\", docsWithField instanceof Bits.MatchAllBits);\n    assertTrue(\"docsWithField(theLong) Size: \" + docsWithField.length() + \" is not: \" + NUM_DOCS, docsWithField.length() == NUM_DOCS);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      assertTrue(docsWithField.get(i));\n    }\n    \n    docsWithField = cache.getDocsWithField(reader, \"sparse\", null);\n    assertSame(\"Second request to cache return same array\", docsWithField, cache.getDocsWithField(reader, \"sparse\", null));\n    assertFalse(\"docsWithField(sparse) must not be class Bits.MatchAllBits\", docsWithField instanceof Bits.MatchAllBits);\n    assertTrue(\"docsWithField(sparse) Size: \" + docsWithField.length() + \" is not: \" + NUM_DOCS, docsWithField.length() == NUM_DOCS);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      assertEquals(i%2 == 0, docsWithField.get(i));\n    }\n\n    FieldCache.DEFAULT.purgeByCacheKey(reader.getCoreCacheKey());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache#test().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#test().mjava","sourceNew":"  public void test() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    NumericDocValues doubles = cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", doubles, cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Double.doubleToLongBits(Double.MAX_VALUE - i), doubles.get(i));\n    }\n    \n    NumericDocValues longs = cache.getNumerics(reader, \"theLong\", FieldCache.LEGACY_LONG_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", longs, cache.getNumerics(reader, \"theLong\", FieldCache.LEGACY_LONG_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Long.MAX_VALUE - i, longs.get(i));\n    }\n\n    NumericDocValues ints = cache.getNumerics(reader, \"theInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", ints, cache.getNumerics(reader, \"theInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Integer.MAX_VALUE - i, ints.get(i));\n    }\n    \n    NumericDocValues floats = cache.getNumerics(reader, \"theFloat\", FieldCache.LEGACY_FLOAT_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", floats, cache.getNumerics(reader, \"theFloat\", FieldCache.LEGACY_FLOAT_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Float.floatToIntBits(Float.MAX_VALUE - i), floats.get(i));\n    }\n\n    Bits docsWithField = cache.getDocsWithField(reader, \"theLong\", null);\n    assertSame(\"Second request to cache return same array\", docsWithField, cache.getDocsWithField(reader, \"theLong\", null));\n    assertTrue(\"docsWithField(theLong) must be class Bits.MatchAllBits\", docsWithField instanceof Bits.MatchAllBits);\n    assertTrue(\"docsWithField(theLong) Size: \" + docsWithField.length() + \" is not: \" + NUM_DOCS, docsWithField.length() == NUM_DOCS);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      assertTrue(docsWithField.get(i));\n    }\n    \n    docsWithField = cache.getDocsWithField(reader, \"sparse\", null);\n    assertSame(\"Second request to cache return same array\", docsWithField, cache.getDocsWithField(reader, \"sparse\", null));\n    assertFalse(\"docsWithField(sparse) must not be class Bits.MatchAllBits\", docsWithField instanceof Bits.MatchAllBits);\n    assertTrue(\"docsWithField(sparse) Size: \" + docsWithField.length() + \" is not: \" + NUM_DOCS, docsWithField.length() == NUM_DOCS);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      assertEquals(i%2 == 0, docsWithField.get(i));\n    }\n\n    FieldCache.DEFAULT.purgeByCacheKey(reader.getCoreCacheKey());\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    NumericDocValues doubles = cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", doubles, cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Double.doubleToLongBits(Double.MAX_VALUE - i), doubles.get(i));\n    }\n    \n    NumericDocValues longs = cache.getNumerics(reader, \"theLong\", FieldCache.LEGACY_LONG_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", longs, cache.getNumerics(reader, \"theLong\", FieldCache.LEGACY_LONG_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Long.MAX_VALUE - i, longs.get(i));\n    }\n\n    NumericDocValues ints = cache.getNumerics(reader, \"theInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", ints, cache.getNumerics(reader, \"theInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Integer.MAX_VALUE - i, ints.get(i));\n    }\n    \n    NumericDocValues floats = cache.getNumerics(reader, \"theFloat\", FieldCache.LEGACY_FLOAT_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", floats, cache.getNumerics(reader, \"theFloat\", FieldCache.LEGACY_FLOAT_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Float.floatToIntBits(Float.MAX_VALUE - i), floats.get(i));\n    }\n\n    Bits docsWithField = cache.getDocsWithField(reader, \"theLong\", null);\n    assertSame(\"Second request to cache return same array\", docsWithField, cache.getDocsWithField(reader, \"theLong\", null));\n    assertTrue(\"docsWithField(theLong) must be class Bits.MatchAllBits\", docsWithField instanceof Bits.MatchAllBits);\n    assertTrue(\"docsWithField(theLong) Size: \" + docsWithField.length() + \" is not: \" + NUM_DOCS, docsWithField.length() == NUM_DOCS);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      assertTrue(docsWithField.get(i));\n    }\n    \n    docsWithField = cache.getDocsWithField(reader, \"sparse\", null);\n    assertSame(\"Second request to cache return same array\", docsWithField, cache.getDocsWithField(reader, \"sparse\", null));\n    assertFalse(\"docsWithField(sparse) must not be class Bits.MatchAllBits\", docsWithField instanceof Bits.MatchAllBits);\n    assertTrue(\"docsWithField(sparse) Size: \" + docsWithField.length() + \" is not: \" + NUM_DOCS, docsWithField.length() == NUM_DOCS);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      assertEquals(i%2 == 0, docsWithField.get(i));\n    }\n\n    FieldCache.DEFAULT.purgeByCacheKey(reader.getCoreCacheKey());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#test().mjava","sourceNew":null,"sourceOld":"  public void test() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    NumericDocValues doubles = cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", doubles, cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Double.doubleToLongBits(Double.MAX_VALUE - i), doubles.get(i));\n    }\n    \n    NumericDocValues longs = cache.getNumerics(reader, \"theLong\", FieldCache.LEGACY_LONG_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", longs, cache.getNumerics(reader, \"theLong\", FieldCache.LEGACY_LONG_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Long.MAX_VALUE - i, longs.get(i));\n    }\n\n    NumericDocValues ints = cache.getNumerics(reader, \"theInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", ints, cache.getNumerics(reader, \"theInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Integer.MAX_VALUE - i, ints.get(i));\n    }\n    \n    NumericDocValues floats = cache.getNumerics(reader, \"theFloat\", FieldCache.LEGACY_FLOAT_PARSER, random().nextBoolean());\n    assertSame(\"Second request to cache return same array\", floats, cache.getNumerics(reader, \"theFloat\", FieldCache.LEGACY_FLOAT_PARSER, random().nextBoolean()));\n    for (int i = 0; i < NUM_DOCS; i++) {\n      assertEquals(Float.floatToIntBits(Float.MAX_VALUE - i), floats.get(i));\n    }\n\n    Bits docsWithField = cache.getDocsWithField(reader, \"theLong\", null);\n    assertSame(\"Second request to cache return same array\", docsWithField, cache.getDocsWithField(reader, \"theLong\", null));\n    assertTrue(\"docsWithField(theLong) must be class Bits.MatchAllBits\", docsWithField instanceof Bits.MatchAllBits);\n    assertTrue(\"docsWithField(theLong) Size: \" + docsWithField.length() + \" is not: \" + NUM_DOCS, docsWithField.length() == NUM_DOCS);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      assertTrue(docsWithField.get(i));\n    }\n    \n    docsWithField = cache.getDocsWithField(reader, \"sparse\", null);\n    assertSame(\"Second request to cache return same array\", docsWithField, cache.getDocsWithField(reader, \"sparse\", null));\n    assertFalse(\"docsWithField(sparse) must not be class Bits.MatchAllBits\", docsWithField instanceof Bits.MatchAllBits);\n    assertTrue(\"docsWithField(sparse) Size: \" + docsWithField.length() + \" is not: \" + NUM_DOCS, docsWithField.length() == NUM_DOCS);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      assertEquals(i%2 == 0, docsWithField.get(i));\n    }\n\n    FieldCache.DEFAULT.purgeByCacheKey(reader.getCoreCacheKey());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["8c146731a64debc22c115bbf11ee1a060aa7ea02","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["8c146731a64debc22c115bbf11ee1a060aa7ea02","0e121d43b5a10f2df530f406f935102656e9c4e8"],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8c146731a64debc22c115bbf11ee1a060aa7ea02","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}