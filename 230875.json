{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LegacyFieldsIndexReader#LegacyFieldsIndexReader(IndexInput,SegmentInfo).mjava","commits":[{"id":"70a4487b07c49a1861c05720e04624826ecbe9fa","date":1580924108,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/LegacyFieldsIndexReader#LegacyFieldsIndexReader(IndexInput,SegmentInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader#CompressingStoredFieldsIndexReader(IndexInput,SegmentInfo).mjava","sourceNew":"  // It is the responsibility of the caller to close fieldsIndexIn after this constructor\n  // has been called\n  LegacyFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    maxDoc = si.maxDoc();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = ArrayUtil.growExact(docBases, newSize);\n        startPointers = ArrayUtil.growExact(startPointers, newSize);\n        avgChunkDocs = ArrayUtil.growExact(avgChunkDocs, newSize);\n        avgChunkSizes = ArrayUtil.growExact(avgChunkSizes, newSize);\n        docBasesDeltas = ArrayUtil.growExact(docBasesDeltas, newSize);\n        startPointersDeltas = ArrayUtil.growExact(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted bitsPerDocBase: \" + bitsPerDocBase, fieldsIndexIn);\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted bitsPerStartPointer: \" + bitsPerStartPointer, fieldsIndexIn);\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = ArrayUtil.copyOfSubArray(docBases, 0, blockCount);\n    this.startPointers = ArrayUtil.copyOfSubArray(startPointers, 0, blockCount);\n    this.avgChunkDocs = ArrayUtil.copyOfSubArray(avgChunkDocs, 0, blockCount);\n    this.avgChunkSizes = ArrayUtil.copyOfSubArray(avgChunkSizes, 0, blockCount);\n    this.docBasesDeltas = ArrayUtil.copyOfSubArray(docBasesDeltas, 0, blockCount);\n    this.startPointersDeltas = ArrayUtil.copyOfSubArray(startPointersDeltas, 0, blockCount);\n  }\n\n","sourceOld":"  // It is the responsibility of the caller to close fieldsIndexIn after this constructor\n  // has been called\n  CompressingStoredFieldsIndexReader(IndexInput fieldsIndexIn, SegmentInfo si) throws IOException {\n    maxDoc = si.maxDoc();\n    int[] docBases = new int[16];\n    long[] startPointers = new long[16];\n    int[] avgChunkDocs = new int[16];\n    long[] avgChunkSizes = new long[16];\n    PackedInts.Reader[] docBasesDeltas = new PackedInts.Reader[16];\n    PackedInts.Reader[] startPointersDeltas = new PackedInts.Reader[16];\n\n    final int packedIntsVersion = fieldsIndexIn.readVInt();\n\n    int blockCount = 0;\n\n    for (;;) {\n      final int numChunks = fieldsIndexIn.readVInt();\n      if (numChunks == 0) {\n        break;\n      }\n      if (blockCount == docBases.length) {\n        final int newSize = ArrayUtil.oversize(blockCount + 1, 8);\n        docBases = ArrayUtil.growExact(docBases, newSize);\n        startPointers = ArrayUtil.growExact(startPointers, newSize);\n        avgChunkDocs = ArrayUtil.growExact(avgChunkDocs, newSize);\n        avgChunkSizes = ArrayUtil.growExact(avgChunkSizes, newSize);\n        docBasesDeltas = ArrayUtil.growExact(docBasesDeltas, newSize);\n        startPointersDeltas = ArrayUtil.growExact(startPointersDeltas, newSize);\n      }\n\n      // doc bases\n      docBases[blockCount] = fieldsIndexIn.readVInt();\n      avgChunkDocs[blockCount] = fieldsIndexIn.readVInt();\n      final int bitsPerDocBase = fieldsIndexIn.readVInt();\n      if (bitsPerDocBase > 32) {\n        throw new CorruptIndexException(\"Corrupted bitsPerDocBase: \" + bitsPerDocBase, fieldsIndexIn);\n      }\n      docBasesDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerDocBase);\n\n      // start pointers\n      startPointers[blockCount] = fieldsIndexIn.readVLong();\n      avgChunkSizes[blockCount] = fieldsIndexIn.readVLong();\n      final int bitsPerStartPointer = fieldsIndexIn.readVInt();\n      if (bitsPerStartPointer > 64) {\n        throw new CorruptIndexException(\"Corrupted bitsPerStartPointer: \" + bitsPerStartPointer, fieldsIndexIn);\n      }\n      startPointersDeltas[blockCount] = PackedInts.getReaderNoHeader(fieldsIndexIn, PackedInts.Format.PACKED, packedIntsVersion, numChunks, bitsPerStartPointer);\n\n      ++blockCount;\n    }\n\n    this.docBases = ArrayUtil.copyOfSubArray(docBases, 0, blockCount);\n    this.startPointers = ArrayUtil.copyOfSubArray(startPointers, 0, blockCount);\n    this.avgChunkDocs = ArrayUtil.copyOfSubArray(avgChunkDocs, 0, blockCount);\n    this.avgChunkSizes = ArrayUtil.copyOfSubArray(avgChunkSizes, 0, blockCount);\n    this.docBasesDeltas = ArrayUtil.copyOfSubArray(docBasesDeltas, 0, blockCount);\n    this.startPointersDeltas = ArrayUtil.copyOfSubArray(startPointersDeltas, 0, blockCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70a4487b07c49a1861c05720e04624826ecbe9fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70a4487b07c49a1861c05720e04624826ecbe9fa"]},"commit2Childs":{"70a4487b07c49a1861c05720e04624826ecbe9fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70a4487b07c49a1861c05720e04624826ecbe9fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}