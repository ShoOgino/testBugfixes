{"path":"lucene/src/java/org/apache/lucene/util/BytesRef#hashCode().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRef#hashCode().mjava","pathOld":"/dev/null","sourceNew":"  /** Calculates the hash code as required by TermsHash during indexing.\n   * <p>It is defined as:\n   * <pre>\n   *  int hash = 0;\n   *  for (int i = offset; i &lt; offset + length; i++) {\n   *    hash = 31*hash + bytes[i];\n   *  }\n   * </pre>\n   */\n  @Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = 0;\n    final int end = offset + length;\n    for(int i=offset;i<end;i++) {\n      result = prime * result + bytes[i];\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRef#hashCode().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRef#hashCode().mjava","sourceNew":"  /** Calculates the hash code as required by TermsHash during indexing.\n   * <p>It is defined as:\n   * <pre>\n   *  int hash = 0;\n   *  for (int i = offset; i &lt; offset + length; i++) {\n   *    hash = 31*hash + bytes[i];\n   *  }\n   * </pre>\n   */\n  @Override\n  public int hashCode() {\n    int result = 0;\n    final int end = offset + length;\n    for(int i=offset;i<end;i++) {\n      result = HASH_PRIME * result + bytes[i];\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Calculates the hash code as required by TermsHash during indexing.\n   * <p>It is defined as:\n   * <pre>\n   *  int hash = 0;\n   *  for (int i = offset; i &lt; offset + length; i++) {\n   *    hash = 31*hash + bytes[i];\n   *  }\n   * </pre>\n   */\n  @Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = 0;\n    final int end = offset + length;\n    for(int i=offset;i<end;i++) {\n      result = prime * result + bytes[i];\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRef#hashCode().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRef#hashCode().mjava","sourceNew":"  /** Calculates the hash code as required by TermsHash during indexing.\n   * <p>It is defined as:\n   * <pre>\n   *  int hash = 0;\n   *  for (int i = offset; i &lt; offset + length; i++) {\n   *    hash = 31*hash + bytes[i];\n   *  }\n   * </pre>\n   */\n  @Override\n  public int hashCode() {\n    int result = 0;\n    final int end = offset + length;\n    for(int i=offset;i<end;i++) {\n      result = HASH_PRIME * result + bytes[i];\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Calculates the hash code as required by TermsHash during indexing.\n   * <p>It is defined as:\n   * <pre>\n   *  int hash = 0;\n   *  for (int i = offset; i &lt; offset + length; i++) {\n   *    hash = 31*hash + bytes[i];\n   *  }\n   * </pre>\n   */\n  @Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = 0;\n    final int end = offset + length;\n    for(int i=offset;i<end;i++) {\n      result = prime * result + bytes[i];\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e115952d3c9f23ec56add53355123cc50f5d67e","date":1322315783,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRef#hashCode().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRef#hashCode().mjava","sourceNew":"  /** Calculates the hash code as required by TermsHash during indexing.\n   * <p>It is defined as:\n   * <pre>\n   *  int hash = 0;\n   *  for (int i = offset; i &lt; offset + length; i++) {\n   *    hash = 31*hash + bytes[i];\n   *  }\n   * </pre>\n   */\n  @Override\n  public int hashCode() {\n    int hash = 0;\n    final int end = offset + length;\n    for(int i=offset;i<end;i++) {\n      hash = 31 * hash + bytes[i];\n    }\n    return hash;\n  }\n\n","sourceOld":"  /** Calculates the hash code as required by TermsHash during indexing.\n   * <p>It is defined as:\n   * <pre>\n   *  int hash = 0;\n   *  for (int i = offset; i &lt; offset + length; i++) {\n   *    hash = 31*hash + bytes[i];\n   *  }\n   * </pre>\n   */\n  @Override\n  public int hashCode() {\n    int result = 0;\n    final int end = offset + length;\n    for(int i=offset;i<end;i++) {\n      result = HASH_PRIME * result + bytes[i];\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRef#hashCode().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRef#hashCode().mjava","sourceNew":"  /** Calculates the hash code as required by TermsHash during indexing.\n   * <p>It is defined as:\n   * <pre>\n   *  int hash = 0;\n   *  for (int i = offset; i &lt; offset + length; i++) {\n   *    hash = 31*hash + bytes[i];\n   *  }\n   * </pre>\n   */\n  @Override\n  public int hashCode() {\n    int hash = 0;\n    final int end = offset + length;\n    for(int i=offset;i<end;i++) {\n      hash = 31 * hash + bytes[i];\n    }\n    return hash;\n  }\n\n","sourceOld":"  /** Calculates the hash code as required by TermsHash during indexing.\n   * <p>It is defined as:\n   * <pre>\n   *  int hash = 0;\n   *  for (int i = offset; i &lt; offset + length; i++) {\n   *    hash = 31*hash + bytes[i];\n   *  }\n   * </pre>\n   */\n  @Override\n  public int hashCode() {\n    int hash = 0;\n    final int end = offset + length;\n    for(int i=offset;i<end;i++) {\n      hash = 31 * hash + bytes[i];\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1e115952d3c9f23ec56add53355123cc50f5d67e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"1e115952d3c9f23ec56add53355123cc50f5d67e":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1e115952d3c9f23ec56add53355123cc50f5d67e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1e115952d3c9f23ec56add53355123cc50f5d67e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}