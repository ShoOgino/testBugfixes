{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   * <br>Collector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * IndexSearcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(wrapFilter(query, filter)), results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   * <br>Collector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * IndexSearcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(wrapFilter(query, filter)), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c461bb2c9e7d6d7309c180dc77d98e0fd15f5f6","date":1339237657,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(wrapFilter(query, filter)), results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   * <br>Collector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * IndexSearcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(wrapFilter(query, filter)), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(wrapFilter(query, filter)), results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(wrapFilter(query, filter)), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link LeafCollector#collect(int)} is called for every matching\n   * document.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(wrapFilter(query, filter)), results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(wrapFilter(query, filter)), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link LeafCollector#collect(int)} is called for every matching\n   * document.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(wrapFilter(query, filter)), results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(wrapFilter(query, filter)), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link LeafCollector#collect(int)} is called for every matching\n   * document.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(wrapFilter(query, filter), results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link LeafCollector#collect(int)} is called for every matching\n   * document.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(wrapFilter(query, filter)), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","sourceNew":null,"sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link LeafCollector#collect(int)} is called for every matching\n   * document.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(wrapFilter(query, filter), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3c461bb2c9e7d6d7309c180dc77d98e0fd15f5f6"],"fb17639909a369c1e64866842e5c213440acc17e":["ae73da626f97850c922c42736f808d0378e165f0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","ae73da626f97850c922c42736f808d0378e165f0"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["fb17639909a369c1e64866842e5c213440acc17e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"3c461bb2c9e7d6d7309c180dc77d98e0fd15f5f6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"fb17639909a369c1e64866842e5c213440acc17e":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3c461bb2c9e7d6d7309c180dc77d98e0fd15f5f6"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae73da626f97850c922c42736f808d0378e165f0":["fb17639909a369c1e64866842e5c213440acc17e","15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"3c461bb2c9e7d6d7309c180dc77d98e0fd15f5f6":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}