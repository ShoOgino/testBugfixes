{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#seekExact(long).mjava","commits":[{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#seekExact(long).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void seekExact(long targetOrd) throws IOException {\n    // System.out.println(\"seekExact targetOrd=\" + targetOrd);\n    if (targetOrd < 0 || targetOrd >= fr.numTerms) {\n      throw new IllegalArgumentException(\"targetOrd out of bounds (got: \" + targetOrd + \", numTerms=\" + fr.numTerms + \")\");\n    }\n\n    assert clearEOF();\n\n    // First do reverse lookup in the index to find the block that holds this term:\n    InputOutput io = getByOutput(targetOrd);\n    if (term.bytes.length < io.input.length) {\n      term.bytes = ArrayUtil.grow(term.bytes, io.input.length);\n    }\n\n    Util.toBytesRef(io.input, term);\n    if (io.input.length == 0) {\n      currentFrame = staticFrame;\n    } else {\n      currentFrame = getFrame(io.input.length-1);\n    }\n    FST.Arc<Output> arc = getArc(io.input.length);\n\n    // Don't force rewind based on term length; we rewind below based on ord:\n    targetBeforeCurrentLength = Integer.MAX_VALUE;\n    currentFrame = pushFrame(arc, io.output, io.input.length);\n    if (currentFrame.termOrd > targetOrd) {\n      //System.out.println(\"  do rewind: \" + currentFrame.termOrd);\n      currentFrame.rewind();\n    }\n\n    currentFrame.scanToFloorFrame(targetOrd);\n    currentFrame.loadBlock();\n    // System.out.println(\"  after loadBlock termOrd=\" + currentFrame.termOrd + \" vs \" + targetOrd);\n\n    while (currentFrame.termOrd <= targetOrd) {\n      currentFrame.next();\n    }\n\n    assert currentFrame.termOrd == targetOrd+1: \"currentFrame.termOrd=\" + currentFrame.termOrd + \" vs ord=\" + targetOrd;\n    assert termExists;\n\n    // Leave enum fully unpositioned, because we didn't set frames for each byte leading up to current term:\n    validIndexPrefix = 0;\n    positioned = false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#seekExact(long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnum#seekExact(long).mjava","sourceNew":"  @Override\n  public void seekExact(long targetOrd) throws IOException {\n    // System.out.println(\"seekExact targetOrd=\" + targetOrd);\n    if (targetOrd < 0 || targetOrd >= fr.numTerms) {\n      throw new IllegalArgumentException(\"targetOrd out of bounds (got: \" + targetOrd + \", numTerms=\" + fr.numTerms + \")\");\n    }\n\n    assert clearEOF();\n\n    // First do reverse lookup in the index to find the block that holds this term:\n    InputOutput io = getByOutput(targetOrd);\n    term.grow(io.input.length);\n\n    Util.toBytesRef(io.input, term);\n    if (io.input.length == 0) {\n      currentFrame = staticFrame;\n    } else {\n      currentFrame = getFrame(io.input.length-1);\n    }\n    FST.Arc<Output> arc = getArc(io.input.length);\n\n    // Don't force rewind based on term length; we rewind below based on ord:\n    targetBeforeCurrentLength = Integer.MAX_VALUE;\n    currentFrame = pushFrame(arc, io.output, io.input.length);\n    if (currentFrame.termOrd > targetOrd) {\n      //System.out.println(\"  do rewind: \" + currentFrame.termOrd);\n      currentFrame.rewind();\n    }\n\n    currentFrame.scanToFloorFrame(targetOrd);\n    currentFrame.loadBlock();\n    // System.out.println(\"  after loadBlock termOrd=\" + currentFrame.termOrd + \" vs \" + targetOrd);\n\n    while (currentFrame.termOrd <= targetOrd) {\n      currentFrame.next();\n    }\n\n    assert currentFrame.termOrd == targetOrd+1: \"currentFrame.termOrd=\" + currentFrame.termOrd + \" vs ord=\" + targetOrd;\n    assert termExists;\n\n    // Leave enum fully unpositioned, because we didn't set frames for each byte leading up to current term:\n    validIndexPrefix = 0;\n    positioned = false;\n  }\n\n","sourceOld":"  @Override\n  public void seekExact(long targetOrd) throws IOException {\n    // System.out.println(\"seekExact targetOrd=\" + targetOrd);\n    if (targetOrd < 0 || targetOrd >= fr.numTerms) {\n      throw new IllegalArgumentException(\"targetOrd out of bounds (got: \" + targetOrd + \", numTerms=\" + fr.numTerms + \")\");\n    }\n\n    assert clearEOF();\n\n    // First do reverse lookup in the index to find the block that holds this term:\n    InputOutput io = getByOutput(targetOrd);\n    if (term.bytes.length < io.input.length) {\n      term.bytes = ArrayUtil.grow(term.bytes, io.input.length);\n    }\n\n    Util.toBytesRef(io.input, term);\n    if (io.input.length == 0) {\n      currentFrame = staticFrame;\n    } else {\n      currentFrame = getFrame(io.input.length-1);\n    }\n    FST.Arc<Output> arc = getArc(io.input.length);\n\n    // Don't force rewind based on term length; we rewind below based on ord:\n    targetBeforeCurrentLength = Integer.MAX_VALUE;\n    currentFrame = pushFrame(arc, io.output, io.input.length);\n    if (currentFrame.termOrd > targetOrd) {\n      //System.out.println(\"  do rewind: \" + currentFrame.termOrd);\n      currentFrame.rewind();\n    }\n\n    currentFrame.scanToFloorFrame(targetOrd);\n    currentFrame.loadBlock();\n    // System.out.println(\"  after loadBlock termOrd=\" + currentFrame.termOrd + \" vs \" + targetOrd);\n\n    while (currentFrame.termOrd <= targetOrd) {\n      currentFrame.next();\n    }\n\n    assert currentFrame.termOrd == targetOrd+1: \"currentFrame.termOrd=\" + currentFrame.termOrd + \" vs ord=\" + targetOrd;\n    assert termExists;\n\n    // Leave enum fully unpositioned, because we didn't set frames for each byte leading up to current term:\n    validIndexPrefix = 0;\n    positioned = false;\n  }\n\n","bugFix":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}