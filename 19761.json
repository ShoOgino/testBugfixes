{"path":"modules/facet/src/java/org/apache/lucene/facet/index/CategoryDocumentBuilder#setCategories(Iterable[CategoryAttribute]).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/index/CategoryDocumentBuilder#setCategories(Iterable[CategoryAttribute]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set the categories of the document builder from an {@link Iterable} of\n   * {@link CategoryAttribute} objects.\n   * \n   * @param categories\n   *            An iterable of {@link CategoryAttribute} objects which holds\n   *            the categories (facets) which will be added to the document at\n   *            {@link #build(Document)}\n   * @return This CategoryDocumentBuilder, to enable this one line call:\n   *         {@code new} {@link #CategoryDocumentBuilder(TaxonomyWriter)}.\n   *         {@link #setCategories(Iterable)}.{@link #build(Document)}.\n   * @throws IOException\n   */\n  public CategoryDocumentBuilder setCategories(\n      Iterable<CategoryAttribute> categories) throws IOException {\n    fieldList.clear();\n    if (categories == null) {\n      return this;\n    }\n\n    // get field-name to a list of facets mapping as different facets could\n    // be added to different category-lists on different fields\n    fillCategoriesMap(categories);\n\n    // creates a different stream for each different field\n    for (Entry<String, List<CategoryAttribute>> e : categoriesMap\n        .entrySet()) {\n      // create a category attributes stream for the array of facets\n      CategoryAttributesStream categoryAttributesStream = new CategoryAttributesStream(\n          e.getValue());\n\n      // Set a suitable {@link TokenStream} using\n      // CategoryParentsStream, followed by CategoryListTokenizer and\n      // CategoryTokenizer composition (the ordering of the last two is\n      // not mandatory).\n      CategoryParentsStream parentsStream = (CategoryParentsStream) getParentsStream(categoryAttributesStream);\n      CategoryListTokenizer categoryListTokenizer = getCategoryListTokenizer(parentsStream);\n      CategoryTokenizer stream = getCategoryTokenizer(categoryListTokenizer);\n\n      // Finally creating a suitable field with stream and adding it to a\n      // master field-list, used during the build process (see\n      // super.build())\n      fieldList.add(new Field(e.getKey(), stream));\n    }\n\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/index/CategoryDocumentBuilder#setCategories(Iterable[CategoryAttribute]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set the categories of the document builder from an {@link Iterable} of\n   * {@link CategoryAttribute} objects.\n   * \n   * @param categories\n   *            An iterable of {@link CategoryAttribute} objects which holds\n   *            the categories (facets) which will be added to the document at\n   *            {@link #build(Document)}\n   * @return This CategoryDocumentBuilder, to enable this one line call:\n   *         {@code new} {@link #CategoryDocumentBuilder(TaxonomyWriter)}.\n   *         {@link #setCategories(Iterable)}.{@link #build(Document)}.\n   * @throws IOException\n   */\n  public CategoryDocumentBuilder setCategories(\n      Iterable<CategoryAttribute> categories) throws IOException {\n    fieldList.clear();\n    if (categories == null) {\n      return this;\n    }\n\n    // get field-name to a list of facets mapping as different facets could\n    // be added to different category-lists on different fields\n    fillCategoriesMap(categories);\n\n    // creates a different stream for each different field\n    for (Entry<String, List<CategoryAttribute>> e : categoriesMap\n        .entrySet()) {\n      // create a category attributes stream for the array of facets\n      CategoryAttributesStream categoryAttributesStream = new CategoryAttributesStream(\n          e.getValue());\n\n      // Set a suitable {@link TokenStream} using\n      // CategoryParentsStream, followed by CategoryListTokenizer and\n      // CategoryTokenizer composition (the ordering of the last two is\n      // not mandatory).\n      CategoryParentsStream parentsStream = (CategoryParentsStream) getParentsStream(categoryAttributesStream);\n      CategoryListTokenizer categoryListTokenizer = getCategoryListTokenizer(parentsStream);\n      CategoryTokenizer stream = getCategoryTokenizer(categoryListTokenizer);\n\n      // Finally creating a suitable field with stream and adding it to a\n      // master field-list, used during the build process (see\n      // super.build())\n      fieldList.add(new Field(e.getKey(), stream));\n    }\n\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/index/CategoryDocumentBuilder#setCategories(Iterable[CategoryAttribute]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set the categories of the document builder from an {@link Iterable} of\n   * {@link CategoryAttribute} objects.\n   * \n   * @param categories\n   *            An iterable of {@link CategoryAttribute} objects which holds\n   *            the categories (facets) which will be added to the document at\n   *            {@link #build(Document)}\n   * @return This CategoryDocumentBuilder, to enable this one line call:\n   *         {@code new} {@link #CategoryDocumentBuilder(TaxonomyWriter)}.\n   *         {@link #setCategories(Iterable)}.{@link #build(Document)}.\n   * @throws IOException\n   */\n  public CategoryDocumentBuilder setCategories(\n      Iterable<CategoryAttribute> categories) throws IOException {\n    fieldList.clear();\n    if (categories == null) {\n      return this;\n    }\n\n    // get field-name to a list of facets mapping as different facets could\n    // be added to different category-lists on different fields\n    fillCategoriesMap(categories);\n\n    // creates a different stream for each different field\n    for (Entry<String, List<CategoryAttribute>> e : categoriesMap\n        .entrySet()) {\n      // create a category attributes stream for the array of facets\n      CategoryAttributesStream categoryAttributesStream = new CategoryAttributesStream(\n          e.getValue());\n\n      // Set a suitable {@link TokenStream} using\n      // CategoryParentsStream, followed by CategoryListTokenizer and\n      // CategoryTokenizer composition (the ordering of the last two is\n      // not mandatory).\n      CategoryParentsStream parentsStream = (CategoryParentsStream) getParentsStream(categoryAttributesStream);\n      CategoryListTokenizer categoryListTokenizer = getCategoryListTokenizer(parentsStream);\n      CategoryTokenizer stream = getCategoryTokenizer(categoryListTokenizer);\n\n      // Finally creating a suitable field with stream and adding it to a\n      // master field-list, used during the build process (see\n      // super.build())\n      fieldList.add(new Field(e.getKey(), stream));\n    }\n\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/index/CategoryDocumentBuilder#setCategories(Iterable[CategoryAttribute]).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/index/CategoryDocumentBuilder#setCategories(Iterable[CategoryAttribute]).mjava","sourceNew":"  /**\n   * Set the categories of the document builder from an {@link Iterable} of\n   * {@link CategoryAttribute} objects.\n   * \n   * @param categories\n   *            An iterable of {@link CategoryAttribute} objects which holds\n   *            the categories (facets) which will be added to the document at\n   *            {@link #build(Document)}\n   * @return This CategoryDocumentBuilder, to enable this one line call:\n   *         {@code new} {@link #CategoryDocumentBuilder(TaxonomyWriter)}.\n   *         {@link #setCategories(Iterable)}.{@link #build(Document)}.\n   * @throws IOException\n   */\n  public CategoryDocumentBuilder setCategories(\n      Iterable<CategoryAttribute> categories) throws IOException {\n    fieldList.clear();\n    if (categories == null) {\n      return this;\n    }\n\n    // get field-name to a list of facets mapping as different facets could\n    // be added to different category-lists on different fields\n    fillCategoriesMap(categories);\n\n    // creates a different stream for each different field\n    for (Entry<String, List<CategoryAttribute>> e : categoriesMap\n        .entrySet()) {\n      // create a category attributes stream for the array of facets\n      CategoryAttributesStream categoryAttributesStream = new CategoryAttributesStream(\n          e.getValue());\n\n      // Set a suitable {@link TokenStream} using\n      // CategoryParentsStream, followed by CategoryListTokenizer and\n      // CategoryTokenizer composition (the ordering of the last two is\n      // not mandatory).\n      CategoryParentsStream parentsStream = (CategoryParentsStream) getParentsStream(categoryAttributesStream);\n      CategoryListTokenizer categoryListTokenizer = getCategoryListTokenizer(parentsStream);\n      CategoryTokenizer stream = getCategoryTokenizer(categoryListTokenizer);\n\n      // Finally creating a suitable field with stream and adding it to a\n      // master field-list, used during the build process (see\n      // super.build())\n      FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n      ft.setOmitNorms(true);\n      fieldList.add(new Field(e.getKey(), ft, stream));\n    }\n\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Set the categories of the document builder from an {@link Iterable} of\n   * {@link CategoryAttribute} objects.\n   * \n   * @param categories\n   *            An iterable of {@link CategoryAttribute} objects which holds\n   *            the categories (facets) which will be added to the document at\n   *            {@link #build(Document)}\n   * @return This CategoryDocumentBuilder, to enable this one line call:\n   *         {@code new} {@link #CategoryDocumentBuilder(TaxonomyWriter)}.\n   *         {@link #setCategories(Iterable)}.{@link #build(Document)}.\n   * @throws IOException\n   */\n  public CategoryDocumentBuilder setCategories(\n      Iterable<CategoryAttribute> categories) throws IOException {\n    fieldList.clear();\n    if (categories == null) {\n      return this;\n    }\n\n    // get field-name to a list of facets mapping as different facets could\n    // be added to different category-lists on different fields\n    fillCategoriesMap(categories);\n\n    // creates a different stream for each different field\n    for (Entry<String, List<CategoryAttribute>> e : categoriesMap\n        .entrySet()) {\n      // create a category attributes stream for the array of facets\n      CategoryAttributesStream categoryAttributesStream = new CategoryAttributesStream(\n          e.getValue());\n\n      // Set a suitable {@link TokenStream} using\n      // CategoryParentsStream, followed by CategoryListTokenizer and\n      // CategoryTokenizer composition (the ordering of the last two is\n      // not mandatory).\n      CategoryParentsStream parentsStream = (CategoryParentsStream) getParentsStream(categoryAttributesStream);\n      CategoryListTokenizer categoryListTokenizer = getCategoryListTokenizer(parentsStream);\n      CategoryTokenizer stream = getCategoryTokenizer(categoryListTokenizer);\n\n      // Finally creating a suitable field with stream and adding it to a\n      // master field-list, used during the build process (see\n      // super.build())\n      fieldList.add(new Field(e.getKey(), stream));\n    }\n\n    return this;\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/index/CategoryDocumentBuilder#setCategories(Iterable[CategoryAttribute]).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/index/CategoryDocumentBuilder#setCategories(Iterable[CategoryAttribute]).mjava","sourceNew":"  /**\n   * Set the categories of the document builder from an {@link Iterable} of\n   * {@link CategoryAttribute} objects.\n   * \n   * @param categories\n   *            An iterable of {@link CategoryAttribute} objects which holds\n   *            the categories (facets) which will be added to the document at\n   *            {@link #build(Document)}\n   * @return This CategoryDocumentBuilder, to enable this one line call:\n   *         {@code new} {@link #CategoryDocumentBuilder(TaxonomyWriter)}.\n   *         {@link #setCategories(Iterable)}.{@link #build(Document)}.\n   * @throws IOException\n   */\n  public CategoryDocumentBuilder setCategories(\n      Iterable<CategoryAttribute> categories) throws IOException {\n    fieldList.clear();\n    if (categories == null) {\n      return this;\n    }\n\n    // get field-name to a list of facets mapping as different facets could\n    // be added to different category-lists on different fields\n    fillCategoriesMap(categories);\n\n    // creates a different stream for each different field\n    for (Entry<String, List<CategoryAttribute>> e : categoriesMap\n        .entrySet()) {\n      // create a category attributes stream for the array of facets\n      CategoryAttributesStream categoryAttributesStream = new CategoryAttributesStream(\n          e.getValue());\n\n      // Set a suitable {@link TokenStream} using\n      // CategoryParentsStream, followed by CategoryListTokenizer and\n      // CategoryTokenizer composition (the ordering of the last two is\n      // not mandatory).\n      CategoryParentsStream parentsStream = (CategoryParentsStream) getParentsStream(categoryAttributesStream);\n      CategoryListTokenizer categoryListTokenizer = getCategoryListTokenizer(parentsStream);\n      CategoryTokenizer stream = getCategoryTokenizer(categoryListTokenizer);\n\n      // Finally creating a suitable field with stream and adding it to a\n      // master field-list, used during the build process (see\n      // super.build())\n      FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n      ft.setOmitNorms(true);\n      fieldList.add(new Field(e.getKey(), stream, ft));\n    }\n\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Set the categories of the document builder from an {@link Iterable} of\n   * {@link CategoryAttribute} objects.\n   * \n   * @param categories\n   *            An iterable of {@link CategoryAttribute} objects which holds\n   *            the categories (facets) which will be added to the document at\n   *            {@link #build(Document)}\n   * @return This CategoryDocumentBuilder, to enable this one line call:\n   *         {@code new} {@link #CategoryDocumentBuilder(TaxonomyWriter)}.\n   *         {@link #setCategories(Iterable)}.{@link #build(Document)}.\n   * @throws IOException\n   */\n  public CategoryDocumentBuilder setCategories(\n      Iterable<CategoryAttribute> categories) throws IOException {\n    fieldList.clear();\n    if (categories == null) {\n      return this;\n    }\n\n    // get field-name to a list of facets mapping as different facets could\n    // be added to different category-lists on different fields\n    fillCategoriesMap(categories);\n\n    // creates a different stream for each different field\n    for (Entry<String, List<CategoryAttribute>> e : categoriesMap\n        .entrySet()) {\n      // create a category attributes stream for the array of facets\n      CategoryAttributesStream categoryAttributesStream = new CategoryAttributesStream(\n          e.getValue());\n\n      // Set a suitable {@link TokenStream} using\n      // CategoryParentsStream, followed by CategoryListTokenizer and\n      // CategoryTokenizer composition (the ordering of the last two is\n      // not mandatory).\n      CategoryParentsStream parentsStream = (CategoryParentsStream) getParentsStream(categoryAttributesStream);\n      CategoryListTokenizer categoryListTokenizer = getCategoryListTokenizer(parentsStream);\n      CategoryTokenizer stream = getCategoryTokenizer(categoryListTokenizer);\n\n      // Finally creating a suitable field with stream and adding it to a\n      // master field-list, used during the build process (see\n      // super.build())\n      FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n      ft.setOmitNorms(true);\n      fieldList.add(new Field(e.getKey(), ft, stream));\n    }\n\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/CategoryDocumentBuilder#setCategories(Iterable[CategoryAttribute]).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/index/CategoryDocumentBuilder#setCategories(Iterable[CategoryAttribute]).mjava","sourceNew":"  /**\n   * Set the categories of the document builder from an {@link Iterable} of\n   * {@link CategoryAttribute} objects.\n   * \n   * @param categories\n   *            An iterable of {@link CategoryAttribute} objects which holds\n   *            the categories (facets) which will be added to the document at\n   *            {@link #build(Document)}\n   * @return This CategoryDocumentBuilder, to enable this one line call:\n   *         {@code new} {@link #CategoryDocumentBuilder(TaxonomyWriter)}.\n   *         {@link #setCategories(Iterable)}.{@link #build(Document)}.\n   * @throws IOException\n   */\n  public CategoryDocumentBuilder setCategories(\n      Iterable<CategoryAttribute> categories) throws IOException {\n    fieldList.clear();\n    if (categories == null) {\n      return this;\n    }\n\n    // get field-name to a list of facets mapping as different facets could\n    // be added to different category-lists on different fields\n    fillCategoriesMap(categories);\n\n    // creates a different stream for each different field\n    for (Entry<String, List<CategoryAttribute>> e : categoriesMap\n        .entrySet()) {\n      // create a category attributes stream for the array of facets\n      CategoryAttributesStream categoryAttributesStream = new CategoryAttributesStream(\n          e.getValue());\n\n      // Set a suitable {@link TokenStream} using\n      // CategoryParentsStream, followed by CategoryListTokenizer and\n      // CategoryTokenizer composition (the ordering of the last two is\n      // not mandatory).\n      CategoryParentsStream parentsStream = (CategoryParentsStream) getParentsStream(categoryAttributesStream);\n      CategoryListTokenizer categoryListTokenizer = getCategoryListTokenizer(parentsStream);\n      CategoryTokenizer stream = getCategoryTokenizer(categoryListTokenizer);\n\n      // Finally creating a suitable field with stream and adding it to a\n      // master field-list, used during the build process (see\n      // super.build())\n      FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n      ft.setOmitNorms(true);\n      fieldList.add(new Field(e.getKey(), stream, ft));\n    }\n\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Set the categories of the document builder from an {@link Iterable} of\n   * {@link CategoryAttribute} objects.\n   * \n   * @param categories\n   *            An iterable of {@link CategoryAttribute} objects which holds\n   *            the categories (facets) which will be added to the document at\n   *            {@link #build(Document)}\n   * @return This CategoryDocumentBuilder, to enable this one line call:\n   *         {@code new} {@link #CategoryDocumentBuilder(TaxonomyWriter)}.\n   *         {@link #setCategories(Iterable)}.{@link #build(Document)}.\n   * @throws IOException\n   */\n  public CategoryDocumentBuilder setCategories(\n      Iterable<CategoryAttribute> categories) throws IOException {\n    fieldList.clear();\n    if (categories == null) {\n      return this;\n    }\n\n    // get field-name to a list of facets mapping as different facets could\n    // be added to different category-lists on different fields\n    fillCategoriesMap(categories);\n\n    // creates a different stream for each different field\n    for (Entry<String, List<CategoryAttribute>> e : categoriesMap\n        .entrySet()) {\n      // create a category attributes stream for the array of facets\n      CategoryAttributesStream categoryAttributesStream = new CategoryAttributesStream(\n          e.getValue());\n\n      // Set a suitable {@link TokenStream} using\n      // CategoryParentsStream, followed by CategoryListTokenizer and\n      // CategoryTokenizer composition (the ordering of the last two is\n      // not mandatory).\n      CategoryParentsStream parentsStream = (CategoryParentsStream) getParentsStream(categoryAttributesStream);\n      CategoryListTokenizer categoryListTokenizer = getCategoryListTokenizer(parentsStream);\n      CategoryTokenizer stream = getCategoryTokenizer(categoryListTokenizer);\n\n      // Finally creating a suitable field with stream and adding it to a\n      // master field-list, used during the build process (see\n      // super.build())\n      FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n      ft.setOmitNorms(true);\n      fieldList.add(new Field(e.getKey(), stream, ft));\n    }\n\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["1509f151d7692d84fae414b2b799ac06ba60fcb4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}