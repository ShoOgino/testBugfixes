{"path":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#bigIntToBytes(BigInteger,byte[],int,int).mjava","commits":[{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#bigIntToBytes(BigInteger,byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDUtil#bigIntToBytes(BigInteger,byte[],int,int).mjava","sourceNew":"  public static void bigIntToBytes(BigInteger bigInt, byte[] result, int dim, int numBytesPerDim) {\n    byte[] bigIntBytes = bigInt.toByteArray();\n    byte[] fullBigIntBytes;\n\n    if (bigIntBytes.length < numBytesPerDim) {\n      fullBigIntBytes = new byte[numBytesPerDim];\n      System.arraycopy(bigIntBytes, 0, fullBigIntBytes, numBytesPerDim-bigIntBytes.length, bigIntBytes.length);\n      if ((bigIntBytes[0] & 0x80) != 0) {\n        // sign extend\n        Arrays.fill(fullBigIntBytes, 0, numBytesPerDim-bigIntBytes.length, (byte) 0xff);\n      }\n    } else {\n      assert bigIntBytes.length == numBytesPerDim;\n      fullBigIntBytes = bigIntBytes;\n    }\n    sortableBigIntBytes(fullBigIntBytes);\n\n    System.arraycopy(fullBigIntBytes, 0, result, dim * numBytesPerDim, numBytesPerDim);\n\n    assert bytesToBigInt(result, dim, numBytesPerDim).equals(bigInt): \"bigInt=\" + bigInt + \" converted=\" + bytesToBigInt(result, dim, numBytesPerDim);\n  }\n\n","sourceOld":"  public static void bigIntToBytes(BigInteger bigInt, byte[] result, int dim, int numBytesPerDim) {\n    byte[] bigIntBytes = bigInt.toByteArray();\n    byte[] fullBigIntBytes;\n\n    if (bigIntBytes.length < numBytesPerDim) {\n      fullBigIntBytes = new byte[numBytesPerDim];\n      System.arraycopy(bigIntBytes, 0, fullBigIntBytes, numBytesPerDim-bigIntBytes.length, bigIntBytes.length);\n      if ((bigIntBytes[0] & 0x80) != 0) {\n        // sign extend\n        Arrays.fill(fullBigIntBytes, 0, numBytesPerDim-bigIntBytes.length, (byte) 0xff);\n      }\n    } else {\n      assert bigIntBytes.length == numBytesPerDim;\n      fullBigIntBytes = bigIntBytes;\n    }\n    sortableBigIntBytes(fullBigIntBytes);\n\n    System.arraycopy(fullBigIntBytes, 0, result, dim * numBytesPerDim, numBytesPerDim);\n\n    assert bytesToBigInt(result, dim, numBytesPerDim).equals(bigInt): \"bigInt=\" + bigInt + \" converted=\" + bytesToBigInt(result, dim, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd4aa10c3623b9da92a555b8d04677af8fe86877","date":1456230278,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#bigIntToBytes(BigInteger,byte[],int,int).mjava","sourceNew":null,"sourceOld":"  public static void bigIntToBytes(BigInteger bigInt, byte[] result, int dim, int numBytesPerDim) {\n    byte[] bigIntBytes = bigInt.toByteArray();\n    byte[] fullBigIntBytes;\n\n    if (bigIntBytes.length < numBytesPerDim) {\n      fullBigIntBytes = new byte[numBytesPerDim];\n      System.arraycopy(bigIntBytes, 0, fullBigIntBytes, numBytesPerDim-bigIntBytes.length, bigIntBytes.length);\n      if ((bigIntBytes[0] & 0x80) != 0) {\n        // sign extend\n        Arrays.fill(fullBigIntBytes, 0, numBytesPerDim-bigIntBytes.length, (byte) 0xff);\n      }\n    } else {\n      assert bigIntBytes.length == numBytesPerDim;\n      fullBigIntBytes = bigIntBytes;\n    }\n    sortableBigIntBytes(fullBigIntBytes);\n\n    System.arraycopy(fullBigIntBytes, 0, result, dim * numBytesPerDim, numBytesPerDim);\n\n    assert bytesToBigInt(result, dim, numBytesPerDim).equals(bigInt): \"bigInt=\" + bigInt + \" converted=\" + bytesToBigInt(result, dim, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#bigIntToBytes(BigInteger,byte[],int,int).mjava","sourceNew":null,"sourceOld":"  public static void bigIntToBytes(BigInteger bigInt, byte[] result, int dim, int numBytesPerDim) {\n    byte[] bigIntBytes = bigInt.toByteArray();\n    byte[] fullBigIntBytes;\n\n    if (bigIntBytes.length < numBytesPerDim) {\n      fullBigIntBytes = new byte[numBytesPerDim];\n      System.arraycopy(bigIntBytes, 0, fullBigIntBytes, numBytesPerDim-bigIntBytes.length, bigIntBytes.length);\n      if ((bigIntBytes[0] & 0x80) != 0) {\n        // sign extend\n        Arrays.fill(fullBigIntBytes, 0, numBytesPerDim-bigIntBytes.length, (byte) 0xff);\n      }\n    } else {\n      assert bigIntBytes.length == numBytesPerDim;\n      fullBigIntBytes = bigIntBytes;\n    }\n    sortableBigIntBytes(fullBigIntBytes);\n\n    System.arraycopy(fullBigIntBytes, 0, result, dim * numBytesPerDim, numBytesPerDim);\n\n    assert bytesToBigInt(result, dim, numBytesPerDim).equals(bigInt): \"bigInt=\" + bigInt + \" converted=\" + bytesToBigInt(result, dim, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","date":1456306182,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#bigIntToBytes(BigInteger,byte[],int,int).mjava","sourceNew":null,"sourceOld":"  public static void bigIntToBytes(BigInteger bigInt, byte[] result, int dim, int numBytesPerDim) {\n    byte[] bigIntBytes = bigInt.toByteArray();\n    byte[] fullBigIntBytes;\n\n    if (bigIntBytes.length < numBytesPerDim) {\n      fullBigIntBytes = new byte[numBytesPerDim];\n      System.arraycopy(bigIntBytes, 0, fullBigIntBytes, numBytesPerDim-bigIntBytes.length, bigIntBytes.length);\n      if ((bigIntBytes[0] & 0x80) != 0) {\n        // sign extend\n        Arrays.fill(fullBigIntBytes, 0, numBytesPerDim-bigIntBytes.length, (byte) 0xff);\n      }\n    } else {\n      assert bigIntBytes.length == numBytesPerDim;\n      fullBigIntBytes = bigIntBytes;\n    }\n    sortableBigIntBytes(fullBigIntBytes);\n\n    System.arraycopy(fullBigIntBytes, 0, result, dim * numBytesPerDim, numBytesPerDim);\n\n    assert bytesToBigInt(result, dim, numBytesPerDim).equals(bigInt): \"bigInt=\" + bigInt + \" converted=\" + bytesToBigInt(result, dim, numBytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd4aa10c3623b9da92a555b8d04677af8fe86877":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["770342641f7b505eaa8dccdc666158bff2419109","a5296efc4b319f5647b606629c093a94b23692c6"],"a5296efc4b319f5647b606629c093a94b23692c6":["770342641f7b505eaa8dccdc666158bff2419109","dd4aa10c3623b9da92a555b8d04677af8fe86877"],"770342641f7b505eaa8dccdc666158bff2419109":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"]},"commit2Childs":{"dd4aa10c3623b9da92a555b8d04677af8fe86877":["a5296efc4b319f5647b606629c093a94b23692c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770342641f7b505eaa8dccdc666158bff2419109"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5296efc4b319f5647b606629c093a94b23692c6":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"770342641f7b505eaa8dccdc666158bff2419109":["dd4aa10c3623b9da92a555b8d04677af8fe86877","1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","a5296efc4b319f5647b606629c093a94b23692c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}