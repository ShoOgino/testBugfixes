{"path":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#skipTo(int).mjava","commits":[{"id":"98bc22650ab0fe51f9c00513397bfa42a64fc663","date":1161986633,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#skipTo(int).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpans#skipTo(int).mjava","sourceNew":"  public boolean skipTo(int target) throws IOException {\n    if (firstTime) {                              // initialize\n      initList(false);\n      for (SpansCell cell = first; more && cell!=null; cell=cell.next) {\n        more = cell.skipTo(target);               // skip all\n      }\n      if (more) {\n        listToQueue();\n      }\n      firstTime = false;\n    } else {                                      // normal case\n      while (more && min().doc() < target) {      // skip as needed\n        if (min().skipTo(target)) {\n          queue.adjustTop();\n        } else {\n          more = false;\n        }\n      }\n    }\n    return more && (atMatch() ||  next());\n  }\n\n","sourceOld":"  public boolean skipTo(int target) throws IOException {\n    if (firstTime) {                              // initialize\n      initList(false);\n      for (SpansCell cell = first; more && cell!=null; cell=cell.next) {\n        more = cell.skipTo(target);               // skip all\n      }\n      if (more) {\n        listToQueue();\n      }\n      firstTime = false;\n    } else {                                      // normal case\n      while (more && min().doc() < target) {      // skip as needed\n        more = min().skipTo(target);\n        if (more)\n          queue.adjustTop();\n      }\n    }\n    if (more) {\n\n      if (atMatch())                              // at a match?\n        return true;\n\n      return next();                              // no, scan\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0731e137bcbb58121034de6ddaa67332fbe6e5d1","date":1255233265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#skipTo(int).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#skipTo(int).mjava","sourceNew":"  public boolean skipTo(int target) throws IOException {\n    if (firstTime) {                              // initialize\n      initList(false);\n      for (SpansCell cell = first; more && cell!=null; cell=cell.next) {\n        more = cell.skipTo(target);               // skip all\n      }\n      if (more) {\n        listToQueue();\n      }\n      firstTime = false;\n    } else {                                      // normal case\n      while (more && min().doc() < target) {      // skip as needed\n        if (min().skipTo(target)) {\n          queue.updateTop();\n        } else {\n          more = false;\n        }\n      }\n    }\n    return more && (atMatch() ||  next());\n  }\n\n","sourceOld":"  public boolean skipTo(int target) throws IOException {\n    if (firstTime) {                              // initialize\n      initList(false);\n      for (SpansCell cell = first; more && cell!=null; cell=cell.next) {\n        more = cell.skipTo(target);               // skip all\n      }\n      if (more) {\n        listToQueue();\n      }\n      firstTime = false;\n    } else {                                      // normal case\n      while (more && min().doc() < target) {      // skip as needed\n        if (min().skipTo(target)) {\n          queue.adjustTop();\n        } else {\n          more = false;\n        }\n      }\n    }\n    return more && (atMatch() ||  next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#skipTo(int).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#skipTo(int).mjava","sourceNew":"  @Override\n  public boolean skipTo(int target) throws IOException {\n    if (firstTime) {                              // initialize\n      initList(false);\n      for (SpansCell cell = first; more && cell!=null; cell=cell.next) {\n        more = cell.skipTo(target);               // skip all\n      }\n      if (more) {\n        listToQueue();\n      }\n      firstTime = false;\n    } else {                                      // normal case\n      while (more && min().doc() < target) {      // skip as needed\n        if (min().skipTo(target)) {\n          queue.updateTop();\n        } else {\n          more = false;\n        }\n      }\n    }\n    return more && (atMatch() ||  next());\n  }\n\n","sourceOld":"  public boolean skipTo(int target) throws IOException {\n    if (firstTime) {                              // initialize\n      initList(false);\n      for (SpansCell cell = first; more && cell!=null; cell=cell.next) {\n        more = cell.skipTo(target);               // skip all\n      }\n      if (more) {\n        listToQueue();\n      }\n      firstTime = false;\n    } else {                                      // normal case\n      while (more && min().doc() < target) {      // skip as needed\n        if (min().skipTo(target)) {\n          queue.updateTop();\n        } else {\n          more = false;\n        }\n      }\n    }\n    return more && (atMatch() ||  next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/NearSpansUnordered#skipTo(int).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#skipTo(int).mjava","sourceNew":"  @Override\n  public boolean skipTo(int target) throws IOException {\n    if (firstTime) {                              // initialize\n      initList(false);\n      for (SpansCell cell = first; more && cell!=null; cell=cell.next) {\n        more = cell.skipTo(target);               // skip all\n      }\n      if (more) {\n        listToQueue();\n      }\n      firstTime = false;\n    } else {                                      // normal case\n      while (more && min().doc() < target) {      // skip as needed\n        if (min().skipTo(target)) {\n          queue.updateTop();\n        } else {\n          more = false;\n        }\n      }\n    }\n    return more && (atMatch() ||  next());\n  }\n\n","sourceOld":"  @Override\n  public boolean skipTo(int target) throws IOException {\n    if (firstTime) {                              // initialize\n      initList(false);\n      for (SpansCell cell = first; more && cell!=null; cell=cell.next) {\n        more = cell.skipTo(target);               // skip all\n      }\n      if (more) {\n        listToQueue();\n      }\n      firstTime = false;\n    } else {                                      // normal case\n      while (more && min().doc() < target) {      // skip as needed\n        if (min().skipTo(target)) {\n          queue.updateTop();\n        } else {\n          more = false;\n        }\n      }\n    }\n    return more && (atMatch() ||  next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"98bc22650ab0fe51f9c00513397bfa42a64fc663":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"98bc22650ab0fe51f9c00513397bfa42a64fc663":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}