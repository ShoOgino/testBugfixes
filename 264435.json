{"path":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","commits":[{"id":"02f9424edb9eccc558626693e4a4cd43f8ce2622","date":1288987640,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"/dev/null","sourceNew":"    private void loadTerms() throws IOException {\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            allTerms.put(new BytesRef(lastTerm),\n                         new TermData(lastDocsStart, docFreq));\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            allTerms.put(new BytesRef(lastTerm),\n                         new TermData(lastDocsStart, docFreq));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7d6f751de577f829f8bdc897d050c728075723a","date":1288988093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":null,"sourceOld":"    private void loadTerms() throws IOException {\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            allTerms.put(new BytesRef(lastTerm),\n                         new TermData(lastDocsStart, docFreq));\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            allTerms.put(new BytesRef(lastTerm),\n                         new TermData(lastDocsStart, docFreq));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b2d719eaefc9684ff00084555da5f61a7f32aef","date":1288993916,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"/dev/null","sourceNew":"    private void loadTerms() throws IOException {\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            allTerms.put(new BytesRef(lastTerm),\n                         new TermData(lastDocsStart, docFreq));\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            allTerms.put(new BytesRef(lastTerm),\n                         new TermData(lastDocsStart, docFreq));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"/dev/null","sourceNew":"    private void loadTerms() throws IOException {\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            allTerms.put(new BytesRef(lastTerm),\n                         new TermData(lastDocsStart, docFreq));\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            allTerms.put(new BytesRef(lastTerm),\n                         new TermData(lastDocsStart, docFreq));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      Builder<PairOutputs.Pair<Long,Long>> b = new Builder<PairOutputs.Pair<Long,Long>>(FST.INPUT_TYPE.BYTE1, 0, 0, true, new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,Long>(lastDocsStart, Long.valueOf(docFreq)));\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,Long>(lastDocsStart, Long.valueOf(docFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n        }\n      }\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            allTerms.put(new BytesRef(lastTerm),\n                         new TermData(lastDocsStart, docFreq));\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            allTerms.put(new BytesRef(lastTerm),\n                         new TermData(lastDocsStart, docFreq));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      Builder<PairOutputs.Pair<Long,Long>> b = new Builder<PairOutputs.Pair<Long,Long>>(FST.INPUT_TYPE.BYTE1, 0, 0, true, new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,Long>(lastDocsStart, Long.valueOf(docFreq)));\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,Long>(lastDocsStart, Long.valueOf(docFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n        }\n      }\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            allTerms.put(new BytesRef(lastTerm),\n                         new TermData(lastDocsStart, docFreq));\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            allTerms.put(new BytesRef(lastTerm),\n                         new TermData(lastDocsStart, docFreq));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"/dev/null","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      Builder<PairOutputs.Pair<Long,Long>> b = new Builder<PairOutputs.Pair<Long,Long>>(FST.INPUT_TYPE.BYTE1, 0, 0, true, new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,Long>(lastDocsStart, Long.valueOf(docFreq)));\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,Long>(lastDocsStart, Long.valueOf(docFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n        }\n      }\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecd298fdc085e7eba27afa7fae58df1ba1a2808","date":1295102557,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          0,\n                                                                          0,\n                                                                          true,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n        } else if (scratch.startsWith(POS)) {\n          totalTermFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      Builder<PairOutputs.Pair<Long,Long>> b = new Builder<PairOutputs.Pair<Long,Long>>(FST.INPUT_TYPE.BYTE1, 0, 0, true, new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,Long>(lastDocsStart, Long.valueOf(docFreq)));\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,Long>(lastDocsStart, Long.valueOf(docFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n        }\n      }\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":["a0c458270f1e988872a1a65df55c5ec6ee0dab78","1ec890fad2ea96317f4429e0aa0085bb25673641"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          0,\n                                                                          0,\n                                                                          true,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n        } else if (scratch.startsWith(POS)) {\n          totalTermFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      Builder<PairOutputs.Pair<Long,Long>> b = new Builder<PairOutputs.Pair<Long,Long>>(FST.INPUT_TYPE.BYTE1, 0, 0, true, new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,Long>(lastDocsStart, Long.valueOf(docFreq)));\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,Long>(lastDocsStart, Long.valueOf(docFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n        }\n      }\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          0,\n                                                                          0,\n                                                                          true,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n        } else if (scratch.startsWith(POS)) {\n          totalTermFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      Builder<PairOutputs.Pair<Long,Long>> b = new Builder<PairOutputs.Pair<Long,Long>>(FST.INPUT_TYPE.BYTE1, 0, 0, true, new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,Long>(lastDocsStart, Long.valueOf(docFreq)));\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,Long>(lastDocsStart, Long.valueOf(docFreq)));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n        }\n      }\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94","date":1310159023,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          0,\n                                                                          0,\n                                                                          true,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n          sumDocFreq++;\n        } else if (scratch.startsWith(POS)) {\n          totalTermFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          0,\n                                                                          0,\n                                                                          true,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n        } else if (scratch.startsWith(POS)) {\n          totalTermFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          0,\n                                                                          0,\n                                                                          true,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n          sumDocFreq++;\n        } else if (scratch.startsWith(POS)) {\n          totalTermFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          0,\n                                                                          0,\n                                                                          true,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n        } else if (scratch.startsWith(POS)) {\n          totalTermFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f2bf10c11daad40c1e46fabd0d414c19a3e605b","date":1310410393,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n          sumDocFreq++;\n        } else if (scratch.startsWith(POS)) {\n          totalTermFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          0,\n                                                                          0,\n                                                                          true,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n          sumDocFreq++;\n        } else if (scratch.startsWith(POS)) {\n          totalTermFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"25433c5cacacb7a2055d62d4d36b0daf210e0a10","date":1315747522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (scratch.startsWith(POS)) {\n          totalTermFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n          sumDocFreq++;\n        } else if (scratch.startsWith(POS)) {\n          totalTermFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (scratch.startsWith(POS)) {\n          totalTermFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      while(true) {\n        readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (scratch.startsWith(POS)) {\n          totalTermFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15","date":1322511317,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, POS)) {\n          totalTermFreq++;\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || scratch.startsWith(FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (scratch.startsWith(DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (scratch.startsWith(POS)) {\n          totalTermFreq++;\n        } else if (scratch.startsWith(TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":["a0c458270f1e988872a1a65df55c5ec6ee0dab78","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextFieldsReader.SimpleTextTerms#loadTerms().mjava","sourceNew":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, POS)) {\n          totalTermFreq++;\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","sourceOld":"    private void loadTerms() throws IOException {\n      PositiveIntOutputs posIntOutputs = PositiveIntOutputs.getSingleton(false);\n      final Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>> b;\n      b = new Builder<PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>>(FST.INPUT_TYPE.BYTE1,\n                                                                          new PairOutputs<Long,PairOutputs.Pair<Long,Long>>(posIntOutputs,\n                                                                                                                            new PairOutputs<Long,Long>(posIntOutputs, posIntOutputs)));\n      IndexInput in = (IndexInput) SimpleTextFieldsReader.this.in.clone();\n      in.seek(termsStart);\n      final BytesRef lastTerm = new BytesRef(10);\n      long lastDocsStart = -1;\n      int docFreq = 0;\n      long totalTermFreq = 0;\n      OpenBitSet visitedDocs = new OpenBitSet();\n      while(true) {\n        SimpleTextUtil.readLine(in, scratch);\n        if (scratch.equals(END) || StringHelper.startsWith(scratch, FIELD)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n            sumTotalTermFreq += totalTermFreq;\n          }\n          break;\n        } else if (StringHelper.startsWith(scratch, DOC)) {\n          docFreq++;\n          sumDocFreq++;\n          UnicodeUtil.UTF8toUTF16(scratch.bytes, scratch.offset+DOC.length, scratch.length-DOC.length, scratchUTF16);\n          int docID = ArrayUtil.parseInt(scratchUTF16.chars, 0, scratchUTF16.length);\n          visitedDocs.set(docID);\n        } else if (StringHelper.startsWith(scratch, POS)) {\n          totalTermFreq++;\n        } else if (StringHelper.startsWith(scratch, TERM)) {\n          if (lastDocsStart != -1) {\n            b.add(lastTerm, new PairOutputs.Pair<Long,PairOutputs.Pair<Long,Long>>(lastDocsStart,\n                                                                                   new PairOutputs.Pair<Long,Long>((long) docFreq,\n                                                                                                                   posIntOutputs.get(totalTermFreq))));\n          }\n          lastDocsStart = in.getFilePointer();\n          final int len = scratch.length - TERM.length;\n          if (len > lastTerm.length) {\n            lastTerm.grow(len);\n          }\n          System.arraycopy(scratch.bytes, TERM.length, lastTerm.bytes, 0, len);\n          lastTerm.length = len;\n          docFreq = 0;\n          sumTotalTermFreq += totalTermFreq;\n          totalTermFreq = 0;\n          termCount++;\n        }\n      }\n      docCount = (int) visitedDocs.cardinality();\n      fst = b.finish();\n      /*\n      PrintStream ps = new PrintStream(\"out.dot\");\n      fst.toDot(ps);\n      ps.close();\n      System.out.println(\"SAVED out.dot\");\n      */\n      //System.out.println(\"FST \" + fst.sizeInBytes());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"25433c5cacacb7a2055d62d4d36b0daf210e0a10":["4f2bf10c11daad40c1e46fabd0d414c19a3e605b"],"06584e6e98d592b34e1329b384182f368d2025e8":["25433c5cacacb7a2055d62d4d36b0daf210e0a10"],"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["06584e6e98d592b34e1329b384182f368d2025e8"],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2b2d719eaefc9684ff00084555da5f61a7f32aef"],"16843358872ed92ba92888ab99df297550b9a36a":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["85a883878c0af761245ab048babc63d099f835f3","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"2b2d719eaefc9684ff00084555da5f61a7f32aef":["f7d6f751de577f829f8bdc897d050c728075723a"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808","f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["2b2d719eaefc9684ff00084555da5f61a7f32aef"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f2bf10c11daad40c1e46fabd0d414c19a3e605b":["f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94"],"02f9424edb9eccc558626693e4a4cd43f8ce2622":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"f7d6f751de577f829f8bdc897d050c728075723a":["02f9424edb9eccc558626693e4a4cd43f8ce2622"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"25433c5cacacb7a2055d62d4d36b0daf210e0a10":["06584e6e98d592b34e1329b384182f368d2025e8"],"06584e6e98d592b34e1329b384182f368d2025e8":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"85a883878c0af761245ab048babc63d099f835f3":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"16843358872ed92ba92888ab99df297550b9a36a":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4","4f2bf10c11daad40c1e46fabd0d414c19a3e605b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["16843358872ed92ba92888ab99df297550b9a36a"],"2b2d719eaefc9684ff00084555da5f61a7f32aef":["85a883878c0af761245ab048babc63d099f835f3","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","02f9424edb9eccc558626693e4a4cd43f8ce2622"],"4f2bf10c11daad40c1e46fabd0d414c19a3e605b":["25433c5cacacb7a2055d62d4d36b0daf210e0a10"],"02f9424edb9eccc558626693e4a4cd43f8ce2622":["f7d6f751de577f829f8bdc897d050c728075723a"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["16843358872ed92ba92888ab99df297550b9a36a","f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94","63639dd66fd5bd9b90bc24dd596ae01575f27cc4","29ef99d61cda9641b6250bf9567329a6e65f901d"],"f7d6f751de577f829f8bdc897d050c728075723a":["2b2d719eaefc9684ff00084555da5f61a7f32aef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["16843358872ed92ba92888ab99df297550b9a36a","63639dd66fd5bd9b90bc24dd596ae01575f27cc4","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}