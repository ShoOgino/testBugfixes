{"path":"lucene/tools/src/java/org/apache/lucene/validation/LicenseCheckTask#processJars().mjava","commits":[{"id":"be658e3695ce5dfe92a3ad3d6531cfc987ae8935","date":1329142379,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LicenseCheckTask#processJars().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Process all JARs.\n   */\n  private void processJars() {\n    log(\"Starting scan.\", verboseLevel);\n    long start = System.currentTimeMillis();\n\n    @SuppressWarnings(\"unchecked\")\n    Iterator<Resource> iter = (Iterator<Resource>) jarResources.iterator();\n    int checked = 0;\n    int errors = 0;\n    while (iter.hasNext()) {\n      final Resource r = iter.next();\n      if (!r.isExists()) { \n        throw new BuildException(\"JAR resource does not exist: \" + r.getName());\n      }\n      if (!(r instanceof FileResource)) {\n        throw new BuildException(\"Only filesystem resource are supported: \" + r.getName()\n            + \", was: \" + r.getClass().getName());\n      }\n\n      File jarFile = ((FileResource) r).getFile();\n      if (!checkJarFile(jarFile)) {\n        errors++;\n      }\n      checked++;\n    }\n\n    log(String.format(Locale.ENGLISH, \n        \"Scanned %d JAR file(s) for licenses (in %.2fs.), %d error(s).\",\n        checked, (System.currentTimeMillis() - start) / 1000.0, errors),\n        errors > 0 ? Project.MSG_ERR : Project.MSG_INFO);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dc336cf0d57e7e3a9fb0de2d61bb4563940c29d","date":1333562012,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LicenseCheckTask#processJars().mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LicenseCheckTask#processJars().mjava","sourceNew":"  /**\n   * Process all JARs.\n   */\n  private void processJars() {\n    log(\"Starting scan.\", verboseLevel);\n    long start = System.currentTimeMillis();\n\n    @SuppressWarnings(\"unchecked\")\n    Iterator<Resource> iter = (Iterator<Resource>) jarResources.iterator();\n    int checked = 0;\n    int errors = 0;\n    while (iter.hasNext()) {\n      final Resource r = iter.next();\n      if (!r.isExists()) { \n        throw new BuildException(\"JAR resource does not exist: \" + r.getName());\n      }\n      if (!(r instanceof FileResource)) {\n        throw new BuildException(\"Only filesystem resource are supported: \" + r.getName()\n            + \", was: \" + r.getClass().getName());\n      }\n\n      File jarFile = ((FileResource) r).getFile();\n      if (! checkJarFile(jarFile) ) {\n        errors++;\n      }\n      checked++;\n    }\n\n    log(String.format(Locale.ENGLISH, \n        \"Scanned %d JAR file(s) for licenses (in %.2fs.), %d error(s).\",\n        checked, (System.currentTimeMillis() - start) / 1000.0, errors),\n        errors > 0 ? Project.MSG_ERR : Project.MSG_INFO);\n  }\n\n","sourceOld":"  /**\n   * Process all JARs.\n   */\n  private void processJars() {\n    log(\"Starting scan.\", verboseLevel);\n    long start = System.currentTimeMillis();\n\n    @SuppressWarnings(\"unchecked\")\n    Iterator<Resource> iter = (Iterator<Resource>) jarResources.iterator();\n    int checked = 0;\n    int errors = 0;\n    while (iter.hasNext()) {\n      final Resource r = iter.next();\n      if (!r.isExists()) { \n        throw new BuildException(\"JAR resource does not exist: \" + r.getName());\n      }\n      if (!(r instanceof FileResource)) {\n        throw new BuildException(\"Only filesystem resource are supported: \" + r.getName()\n            + \", was: \" + r.getClass().getName());\n      }\n\n      File jarFile = ((FileResource) r).getFile();\n      if (!checkJarFile(jarFile)) {\n        errors++;\n      }\n      checked++;\n    }\n\n    log(String.format(Locale.ENGLISH, \n        \"Scanned %d JAR file(s) for licenses (in %.2fs.), %d error(s).\",\n        checked, (System.currentTimeMillis() - start) / 1000.0, errors),\n        errors > 0 ? Project.MSG_ERR : Project.MSG_INFO);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LicenseCheckTask#processJars().mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LicenseCheckTask#processJars().mjava","sourceNew":"  /**\n   * Process all JARs.\n   */\n  private void processJars() {\n    log(\"Starting scan.\", verboseLevel);\n    long start = System.currentTimeMillis();\n\n    @SuppressWarnings(\"unchecked\")\n    Iterator<Resource> iter = (Iterator<Resource>) jarResources.iterator();\n    int checked = 0;\n    int errors = 0;\n    while (iter.hasNext()) {\n      final Resource r = iter.next();\n      if (!r.isExists()) { \n        throw new BuildException(\"JAR resource does not exist: \" + r.getName());\n      }\n      if (!(r instanceof FileResource)) {\n        throw new BuildException(\"Only filesystem resource are supported: \" + r.getName()\n            + \", was: \" + r.getClass().getName());\n      }\n\n      File jarFile = ((FileResource) r).getFile();\n      if (! checkJarFile(jarFile) ) {\n        errors++;\n      }\n      checked++;\n    }\n\n    log(String.format(Locale.ROOT, \n        \"Scanned %d JAR file(s) for licenses (in %.2fs.), %d error(s).\",\n        checked, (System.currentTimeMillis() - start) / 1000.0, errors),\n        errors > 0 ? Project.MSG_ERR : Project.MSG_INFO);\n  }\n\n","sourceOld":"  /**\n   * Process all JARs.\n   */\n  private void processJars() {\n    log(\"Starting scan.\", verboseLevel);\n    long start = System.currentTimeMillis();\n\n    @SuppressWarnings(\"unchecked\")\n    Iterator<Resource> iter = (Iterator<Resource>) jarResources.iterator();\n    int checked = 0;\n    int errors = 0;\n    while (iter.hasNext()) {\n      final Resource r = iter.next();\n      if (!r.isExists()) { \n        throw new BuildException(\"JAR resource does not exist: \" + r.getName());\n      }\n      if (!(r instanceof FileResource)) {\n        throw new BuildException(\"Only filesystem resource are supported: \" + r.getName()\n            + \", was: \" + r.getClass().getName());\n      }\n\n      File jarFile = ((FileResource) r).getFile();\n      if (! checkJarFile(jarFile) ) {\n        errors++;\n      }\n      checked++;\n    }\n\n    log(String.format(Locale.ENGLISH, \n        \"Scanned %d JAR file(s) for licenses (in %.2fs.), %d error(s).\",\n        checked, (System.currentTimeMillis() - start) / 1000.0, errors),\n        errors > 0 ? Project.MSG_ERR : Project.MSG_INFO);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LicenseCheckTask#processJars().mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LicenseCheckTask#processJars().mjava","sourceNew":"  /**\n   * Process all JARs.\n   */\n  private void processJars() {\n    log(\"Starting scan.\", verboseLevel);\n    long start = System.currentTimeMillis();\n\n    @SuppressWarnings(\"unchecked\")\n    Iterator<Resource> iter = (Iterator<Resource>) jarResources.iterator();\n    int checked = 0;\n    int errors = 0;\n    while (iter.hasNext()) {\n      final Resource r = iter.next();\n      if (!r.isExists()) { \n        throw new BuildException(\"JAR resource does not exist: \" + r.getName());\n      }\n      if (!(r instanceof FileResource)) {\n        throw new BuildException(\"Only filesystem resource are supported: \" + r.getName()\n            + \", was: \" + r.getClass().getName());\n      }\n\n      File jarFile = ((FileResource) r).getFile();\n      if (! checkJarFile(jarFile) ) {\n        errors++;\n      }\n      checked++;\n    }\n\n    log(String.format(Locale.ROOT, \n        \"Scanned %d JAR file(s) for licenses (in %.2fs.), %d error(s).\",\n        checked, (System.currentTimeMillis() - start) / 1000.0, errors),\n        errors > 0 ? Project.MSG_ERR : Project.MSG_INFO);\n  }\n\n","sourceOld":"  /**\n   * Process all JARs.\n   */\n  private void processJars() {\n    log(\"Starting scan.\", verboseLevel);\n    long start = System.currentTimeMillis();\n\n    @SuppressWarnings(\"unchecked\")\n    Iterator<Resource> iter = (Iterator<Resource>) jarResources.iterator();\n    int checked = 0;\n    int errors = 0;\n    while (iter.hasNext()) {\n      final Resource r = iter.next();\n      if (!r.isExists()) { \n        throw new BuildException(\"JAR resource does not exist: \" + r.getName());\n      }\n      if (!(r instanceof FileResource)) {\n        throw new BuildException(\"Only filesystem resource are supported: \" + r.getName()\n            + \", was: \" + r.getClass().getName());\n      }\n\n      File jarFile = ((FileResource) r).getFile();\n      if (! checkJarFile(jarFile) ) {\n        errors++;\n      }\n      checked++;\n    }\n\n    log(String.format(Locale.ENGLISH, \n        \"Scanned %d JAR file(s) for licenses (in %.2fs.), %d error(s).\",\n        checked, (System.currentTimeMillis() - start) / 1000.0, errors),\n        errors > 0 ? Project.MSG_ERR : Project.MSG_INFO);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LicenseCheckTask#processJars().mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LicenseCheckTask#processJars().mjava","sourceNew":"  /**\n   * Process all JARs.\n   */\n  private void processJars() {\n    log(\"Starting scan.\", verboseLevel);\n    long start = System.currentTimeMillis();\n\n    @SuppressWarnings(\"unchecked\")\n    Iterator<Resource> iter = (Iterator<Resource>) jarResources.iterator();\n    int checked = 0;\n    int errors = 0;\n    while (iter.hasNext()) {\n      final Resource r = iter.next();\n      if (!r.isExists()) { \n        throw new BuildException(\"JAR resource does not exist: \" + r.getName());\n      }\n      if (!(r instanceof FileResource)) {\n        throw new BuildException(\"Only filesystem resource are supported: \" + r.getName()\n            + \", was: \" + r.getClass().getName());\n      }\n\n      File jarFile = ((FileResource) r).getFile();\n      if (! checkJarFile(jarFile) ) {\n        errors++;\n      }\n      checked++;\n    }\n\n    log(String.format(Locale.ROOT, \n        \"Scanned %d JAR file(s) for licenses (in %.2fs.), %d error(s).\",\n        checked, (System.currentTimeMillis() - start) / 1000.0, errors),\n        errors > 0 ? Project.MSG_ERR : Project.MSG_INFO);\n  }\n\n","sourceOld":"  /**\n   * Process all JARs.\n   */\n  private void processJars() {\n    log(\"Starting scan.\", verboseLevel);\n    long start = System.currentTimeMillis();\n\n    @SuppressWarnings(\"unchecked\")\n    Iterator<Resource> iter = (Iterator<Resource>) jarResources.iterator();\n    int checked = 0;\n    int errors = 0;\n    while (iter.hasNext()) {\n      final Resource r = iter.next();\n      if (!r.isExists()) { \n        throw new BuildException(\"JAR resource does not exist: \" + r.getName());\n      }\n      if (!(r instanceof FileResource)) {\n        throw new BuildException(\"Only filesystem resource are supported: \" + r.getName()\n            + \", was: \" + r.getClass().getName());\n      }\n\n      File jarFile = ((FileResource) r).getFile();\n      if (! checkJarFile(jarFile) ) {\n        errors++;\n      }\n      checked++;\n    }\n\n    log(String.format(Locale.ENGLISH, \n        \"Scanned %d JAR file(s) for licenses (in %.2fs.), %d error(s).\",\n        checked, (System.currentTimeMillis() - start) / 1000.0, errors),\n        errors > 0 ? Project.MSG_ERR : Project.MSG_INFO);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/tools/src/java/org/apache/lucene/validation/LicenseCheckTask#processJars().mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LicenseCheckTask#processJars().mjava","sourceNew":"  /**\n   * Process all JARs.\n   */\n  private void processJars() {\n    log(\"Starting scan.\", verboseLevel);\n    long start = System.currentTimeMillis();\n\n    @SuppressWarnings(\"unchecked\")\n    Iterator<Resource> iter = (Iterator<Resource>) jarResources.iterator();\n    int checked = 0;\n    int errors = 0;\n    while (iter.hasNext()) {\n      final Resource r = iter.next();\n      if (!r.isExists()) { \n        throw new BuildException(\"JAR resource does not exist: \" + r.getName());\n      }\n      if (!(r instanceof FileResource)) {\n        throw new BuildException(\"Only filesystem resource are supported: \" + r.getName()\n            + \", was: \" + r.getClass().getName());\n      }\n\n      File jarFile = ((FileResource) r).getFile();\n      if (! checkJarFile(jarFile) ) {\n        errors++;\n      }\n      checked++;\n    }\n\n    log(String.format(Locale.ROOT, \n        \"Scanned %d JAR file(s) for licenses (in %.2fs.), %d error(s).\",\n        checked, (System.currentTimeMillis() - start) / 1000.0, errors),\n        errors > 0 ? Project.MSG_ERR : Project.MSG_INFO);\n  }\n\n","sourceOld":"  /**\n   * Process all JARs.\n   */\n  private void processJars() {\n    log(\"Starting scan.\", verboseLevel);\n    long start = System.currentTimeMillis();\n\n    @SuppressWarnings(\"unchecked\")\n    Iterator<Resource> iter = (Iterator<Resource>) jarResources.iterator();\n    int checked = 0;\n    int errors = 0;\n    while (iter.hasNext()) {\n      final Resource r = iter.next();\n      if (!r.isExists()) { \n        throw new BuildException(\"JAR resource does not exist: \" + r.getName());\n      }\n      if (!(r instanceof FileResource)) {\n        throw new BuildException(\"Only filesystem resource are supported: \" + r.getName()\n            + \", was: \" + r.getClass().getName());\n      }\n\n      File jarFile = ((FileResource) r).getFile();\n      if (! checkJarFile(jarFile) ) {\n        errors++;\n      }\n      checked++;\n    }\n\n    log(String.format(Locale.ENGLISH, \n        \"Scanned %d JAR file(s) for licenses (in %.2fs.), %d error(s).\",\n        checked, (System.currentTimeMillis() - start) / 1000.0, errors),\n        errors > 0 ? Project.MSG_ERR : Project.MSG_INFO);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e025cf1c07150c8db28879d785db17eb3a66ca9f","date":1598788864,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/validation/LicenseCheckTask#processJars().mjava","sourceNew":null,"sourceOld":"  /**\n   * Process all JARs.\n   */\n  private void processJars() {\n    log(\"Starting scan.\", verboseLevel);\n    long start = System.currentTimeMillis();\n\n    @SuppressWarnings(\"unchecked\")\n    Iterator<Resource> iter = (Iterator<Resource>) jarResources.iterator();\n    int checked = 0;\n    int errors = 0;\n    while (iter.hasNext()) {\n      final Resource r = iter.next();\n      if (!r.isExists()) { \n        throw new BuildException(\"JAR resource does not exist: \" + r.getName());\n      }\n      if (!(r instanceof FileResource)) {\n        throw new BuildException(\"Only filesystem resource are supported: \" + r.getName()\n            + \", was: \" + r.getClass().getName());\n      }\n\n      File jarFile = ((FileResource) r).getFile();\n      if (! checkJarFile(jarFile) ) {\n        errors++;\n      }\n      checked++;\n    }\n\n    log(String.format(Locale.ROOT, \n        \"Scanned %d JAR file(s) for licenses (in %.2fs.), %d error(s).\",\n        checked, (System.currentTimeMillis() - start) / 1000.0, errors),\n        errors > 0 ? Project.MSG_ERR : Project.MSG_INFO);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0dc336cf0d57e7e3a9fb0de2d61bb4563940c29d":["be658e3695ce5dfe92a3ad3d6531cfc987ae8935"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["0dc336cf0d57e7e3a9fb0de2d61bb4563940c29d","2acf500f78aa12b92e371fd89c719291986b6b90"],"e025cf1c07150c8db28879d785db17eb3a66ca9f":["2acf500f78aa12b92e371fd89c719291986b6b90"],"be658e3695ce5dfe92a3ad3d6531cfc987ae8935":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["0dc336cf0d57e7e3a9fb0de2d61bb4563940c29d"],"2acf500f78aa12b92e371fd89c719291986b6b90":["0dc336cf0d57e7e3a9fb0de2d61bb4563940c29d","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e025cf1c07150c8db28879d785db17eb3a66ca9f"],"46d8ada1fff8d18cb197c38c7983225162599948":["0dc336cf0d57e7e3a9fb0de2d61bb4563940c29d","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"0dc336cf0d57e7e3a9fb0de2d61bb4563940c29d":["fe33227f6805edab2036cbb80645cc4e2d1fa424","9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"be658e3695ce5dfe92a3ad3d6531cfc987ae8935":["0dc336cf0d57e7e3a9fb0de2d61bb4563940c29d"],"e025cf1c07150c8db28879d785db17eb3a66ca9f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be658e3695ce5dfe92a3ad3d6531cfc987ae8935"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["fe33227f6805edab2036cbb80645cc4e2d1fa424","e025cf1c07150c8db28879d785db17eb3a66ca9f","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}