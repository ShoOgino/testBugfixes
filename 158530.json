{"path":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customScore(int,float,float).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customScore(int,float,float).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customScore(int,float,float).mjava","sourceNew":"  /**\n   * Compute a custom score by the subQuery score and the ValueSourceQuery score.\n   * <p> \n   * Subclasses can override this method to modify the custom score.\n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override this customScore() method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of the two scores:\n   * <pre>\n   *     ModifiedScore = subQueryScore * valSrcScore\n   * </pre>\n   *\n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScore score of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScore) throws IOException {\n    return subQueryScore * valSrcScore;\n  }\n\n","sourceOld":"  /**\n   * Compute a custom score by the subQuery score and the ValueSourceQuery score.\n   * <p> \n   * Subclasses can override this method to modify the custom score.\n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override this customScore() method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of the two scores:\n   * <pre>\n   *     ModifiedScore = subQueryScore * valSrcScore\n   * </pre>\n   *\n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScore score of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScore) throws IOException {\n    return subQueryScore * valSrcScore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87778e49fc2a9683c4dc9217a451004dc7edf6da","date":1361489436,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customScore(int,float,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customScore(int,float,float).mjava","sourceNew":"  /**\n   * Compute a custom score by the subQuery score and the {@link FunctionQuery} score.\n   * <p> \n   * Subclasses can override this method to modify the custom score.\n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of {@link FunctionQuery function queries} is always &lt; 2 it is \n   * sufficient to override this customScore() method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of the two scores:\n   * <pre>\n   *     ModifiedScore = subQueryScore * valSrcScore\n   * </pre>\n   *\n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScore score of that doc by the {@link FunctionQuery}.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScore) throws IOException {\n    return subQueryScore * valSrcScore;\n  }\n\n","sourceOld":"  /**\n   * Compute a custom score by the subQuery score and the ValueSourceQuery score.\n   * <p> \n   * Subclasses can override this method to modify the custom score.\n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override this customScore() method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of the two scores:\n   * <pre>\n   *     ModifiedScore = subQueryScore * valSrcScore\n   * </pre>\n   *\n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScore score of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScore) throws IOException {\n    return subQueryScore * valSrcScore;\n  }\n\n","bugFix":["3f74570911bfdb9f7b01948745dcd67c69676c0e","89fe79450a321df64750e98df6442d2c4d30da52"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a82662cae660e76ded4de1e9b451633e523d83e1","date":1513619223,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customScore(int,float,float).mjava","sourceNew":null,"sourceOld":"  /**\n   * Compute a custom score by the subQuery score and the {@link FunctionQuery} score.\n   * <p> \n   * Subclasses can override this method to modify the custom score.\n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of {@link FunctionQuery function queries} is always &lt; 2 it is \n   * sufficient to override this customScore() method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of the two scores:\n   * <pre>\n   *     ModifiedScore = subQueryScore * valSrcScore\n   * </pre>\n   *\n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScore score of that doc by the {@link FunctionQuery}.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScore) throws IOException {\n    return subQueryScore * valSrcScore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a82662cae660e76ded4de1e9b451633e523d83e1":["87778e49fc2a9683c4dc9217a451004dc7edf6da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87778e49fc2a9683c4dc9217a451004dc7edf6da":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a82662cae660e76ded4de1e9b451633e523d83e1"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["87778e49fc2a9683c4dc9217a451004dc7edf6da"],"a82662cae660e76ded4de1e9b451633e523d83e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"87778e49fc2a9683c4dc9217a451004dc7edf6da":["a82662cae660e76ded4de1e9b451633e523d83e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}