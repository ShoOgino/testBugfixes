{"path":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#createShardQuery(SolrParams).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#createShardQuery(SolrParams).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermsComponent#createShardQuery(SolrParams).mjava","sourceNew":"  private ShardRequest createShardQuery(SolrParams params) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TERMS;\n\n    // base shard request on original parameters\n    sreq.params = new ModifiableSolrParams(params);\n\n    // remove any limits for shards, we want them to return all possible\n    // responses\n    // we want this so we can calculate the correct counts\n    // dont sort by count to avoid that unnecessary overhead on the shards\n    sreq.params.remove(TermsParams.TERMS_MAXCOUNT);\n    sreq.params.remove(TermsParams.TERMS_MINCOUNT);\n    sreq.params.set(TermsParams.TERMS_LIMIT, -1);\n    sreq.params.set(TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_INDEX);\n\n    return sreq;\n  }\n\n","sourceOld":"  private ShardRequest createShardQuery(SolrParams params) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TERMS;\n\n    // base shard request on original parameters\n    sreq.params = new ModifiableSolrParams(params);\n\n    // remove any limits for shards, we want them to return all possible\n    // responses\n    // we want this so we can calculate the correct counts\n    // dont sort by count to avoid that unnecessary overhead on the shards\n    sreq.params.remove(TermsParams.TERMS_MAXCOUNT);\n    sreq.params.remove(TermsParams.TERMS_MINCOUNT);\n    sreq.params.set(TermsParams.TERMS_LIMIT, -1);\n    sreq.params.set(TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_INDEX);\n\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#createShardQuery(SolrParams).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermsComponent#createShardQuery(SolrParams).mjava","sourceNew":"  private ShardRequest createShardQuery(SolrParams params) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TERMS;\n\n    // base shard request on original parameters\n    sreq.params = new ModifiableSolrParams(params);\n\n    // remove any limits for shards, we want them to return all possible\n    // responses\n    // we want this so we can calculate the correct counts\n    // dont sort by count to avoid that unnecessary overhead on the shards\n    sreq.params.remove(TermsParams.TERMS_MAXCOUNT);\n    sreq.params.remove(TermsParams.TERMS_MINCOUNT);\n    sreq.params.set(TermsParams.TERMS_LIMIT, -1);\n    sreq.params.set(TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_INDEX);\n\n    return sreq;\n  }\n\n","sourceOld":"  private ShardRequest createShardQuery(SolrParams params) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TERMS;\n\n    // base shard request on original parameters\n    sreq.params = new ModifiableSolrParams(params);\n\n    // remove any limits for shards, we want them to return all possible\n    // responses\n    // we want this so we can calculate the correct counts\n    // dont sort by count to avoid that unnecessary overhead on the shards\n    sreq.params.remove(TermsParams.TERMS_MAXCOUNT);\n    sreq.params.remove(TermsParams.TERMS_MINCOUNT);\n    sreq.params.set(TermsParams.TERMS_LIMIT, -1);\n    sreq.params.set(TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_INDEX);\n\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#createShardQuery(SolrParams).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermsComponent#createShardQuery(SolrParams).mjava","sourceNew":"  private ShardRequest createShardQuery(SolrParams params) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TERMS;\n\n    // base shard request on original parameters\n    sreq.params = new ModifiableSolrParams(params);\n\n    // remove any limits for shards, we want them to return all possible\n    // responses\n    // we want this so we can calculate the correct counts\n    // dont sort by count to avoid that unnecessary overhead on the shards\n    sreq.params.remove(TermsParams.TERMS_MAXCOUNT);\n    sreq.params.remove(TermsParams.TERMS_MINCOUNT);\n    sreq.params.set(TermsParams.TERMS_LIMIT, -1);\n    sreq.params.set(TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_INDEX);\n\n    return sreq;\n  }\n\n","sourceOld":"  private ShardRequest createShardQuery(SolrParams params) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TERMS;\n\n    // base shard request on original parameters\n    sreq.params = new ModifiableSolrParams(params);\n\n    // remove any limits for shards, we want them to return all possible\n    // responses\n    // we want this so we can calculate the correct counts\n    // dont sort by count to avoid that unnecessary overhead on the shards\n    sreq.params.remove(TermsParams.TERMS_MAXCOUNT);\n    sreq.params.remove(TermsParams.TERMS_MINCOUNT);\n    sreq.params.set(TermsParams.TERMS_LIMIT, -1);\n    sreq.params.set(TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_INDEX);\n\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb88a28fb92adce0607c5b28f8f1cce9e3171639","date":1492689807,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#createShardQuery(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#createShardQuery(SolrParams).mjava","sourceNew":"  private static ShardRequest createShardQuery(SolrParams params) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TERMS;\n\n    // base shard request on original parameters\n    sreq.params = new ModifiableSolrParams(params);\n\n    // remove any limits for shards, we want them to return all possible\n    // responses\n    // we want this so we can calculate the correct counts\n    // dont sort by count to avoid that unnecessary overhead on the shards\n    sreq.params.remove(TermsParams.TERMS_MAXCOUNT);\n    sreq.params.remove(TermsParams.TERMS_MINCOUNT);\n    sreq.params.set(TermsParams.TERMS_LIMIT, -1);\n    sreq.params.set(TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_INDEX);\n\n    return sreq;\n  }\n\n","sourceOld":"  private ShardRequest createShardQuery(SolrParams params) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TERMS;\n\n    // base shard request on original parameters\n    sreq.params = new ModifiableSolrParams(params);\n\n    // remove any limits for shards, we want them to return all possible\n    // responses\n    // we want this so we can calculate the correct counts\n    // dont sort by count to avoid that unnecessary overhead on the shards\n    sreq.params.remove(TermsParams.TERMS_MAXCOUNT);\n    sreq.params.remove(TermsParams.TERMS_MINCOUNT);\n    sreq.params.set(TermsParams.TERMS_LIMIT, -1);\n    sreq.params.set(TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_INDEX);\n\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#createShardQuery(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#createShardQuery(SolrParams).mjava","sourceNew":"  private static ShardRequest createShardQuery(SolrParams params) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TERMS;\n\n    // base shard request on original parameters\n    sreq.params = new ModifiableSolrParams(params);\n\n    // remove any limits for shards, we want them to return all possible\n    // responses\n    // we want this so we can calculate the correct counts\n    // dont sort by count to avoid that unnecessary overhead on the shards\n    sreq.params.remove(TermsParams.TERMS_MAXCOUNT);\n    sreq.params.remove(TermsParams.TERMS_MINCOUNT);\n    sreq.params.set(TermsParams.TERMS_LIMIT, -1);\n    sreq.params.set(TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_INDEX);\n\n    return sreq;\n  }\n\n","sourceOld":"  private ShardRequest createShardQuery(SolrParams params) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TERMS;\n\n    // base shard request on original parameters\n    sreq.params = new ModifiableSolrParams(params);\n\n    // remove any limits for shards, we want them to return all possible\n    // responses\n    // we want this so we can calculate the correct counts\n    // dont sort by count to avoid that unnecessary overhead on the shards\n    sreq.params.remove(TermsParams.TERMS_MAXCOUNT);\n    sreq.params.remove(TermsParams.TERMS_MINCOUNT);\n    sreq.params.set(TermsParams.TERMS_LIMIT, -1);\n    sreq.params.set(TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_INDEX);\n\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"732612b6dfa6c27159008ab835dd5d39db3f7ef8","date":1555964772,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#createShardQuery(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#createShardQuery(SolrParams).mjava","sourceNew":"  static ShardRequest createShardQuery(SolrParams params) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TERMS;\n\n    // base shard request on original parameters\n    sreq.params = new ModifiableSolrParams(params);\n\n    // if using index-order, we can send all parameters to all shards\n    // since all required data are returned within the first n rows\n    String actualSort = sreq.params.get(TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_COUNT);\n    \n    boolean fast = actualSort.equals(TermsParams.TERMS_SORT_INDEX) &&\n        sreq.params.getLong(TermsParams.TERMS_MINCOUNT, 0) <= 1 &&\n        sreq.params.getLong(TermsParams.TERMS_MAXCOUNT, -1) <=0;\n    \n    if (!fast) {\n      // remove any limits for shards, we want them to return all possible\n      // responses\n      // we want this so we can calculate the correct counts\n      // dont sort by count to avoid that unnecessary overhead on the shards\n      sreq.params.remove(TermsParams.TERMS_MAXCOUNT);\n      sreq.params.remove(TermsParams.TERMS_MINCOUNT);\n      sreq.params.set(TermsParams.TERMS_LIMIT, -1);\n      sreq.params.set(TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_INDEX);\n    }\n    return sreq;\n  }\n\n","sourceOld":"  private static ShardRequest createShardQuery(SolrParams params) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TERMS;\n\n    // base shard request on original parameters\n    sreq.params = new ModifiableSolrParams(params);\n\n    // remove any limits for shards, we want them to return all possible\n    // responses\n    // we want this so we can calculate the correct counts\n    // dont sort by count to avoid that unnecessary overhead on the shards\n    sreq.params.remove(TermsParams.TERMS_MAXCOUNT);\n    sreq.params.remove(TermsParams.TERMS_MINCOUNT);\n    sreq.params.set(TermsParams.TERMS_LIMIT, -1);\n    sreq.params.set(TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_INDEX);\n\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["c26f00b574427b55127e869b935845554afde1fa","cb88a28fb92adce0607c5b28f8f1cce9e3171639"],"732612b6dfa6c27159008ab835dd5d39db3f7ef8":["cb88a28fb92adce0607c5b28f8f1cce9e3171639"],"cb88a28fb92adce0607c5b28f8f1cce9e3171639":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["732612b6dfa6c27159008ab835dd5d39db3f7ef8"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"cb88a28fb92adce0607c5b28f8f1cce9e3171639":["e9017cf144952056066919f1ebc7897ff9bd71b1","732612b6dfa6c27159008ab835dd5d39db3f7ef8"],"732612b6dfa6c27159008ab835dd5d39db3f7ef8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["e9017cf144952056066919f1ebc7897ff9bd71b1","cb88a28fb92adce0607c5b28f8f1cce9e3171639"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}