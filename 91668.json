{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetVectorHighlightTask#setParams(String).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetVectorHighlightTask#setParams(String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetVectorHighlightTask#setParams(String).mjava","sourceNew":"  @Override\n  public void setParams(String params) {\n    // can't call super because super doesn't understand our\n    // params syntax\n    final String [] splits = params.split(\",\");\n    for (int i = 0; i < splits.length; i++) {\n      if (splits[i].startsWith(\"size[\") == true){\n        traversalSize = (int)Float.parseFloat(splits[i].substring(\"size[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"highlight[\") == true){\n        numToHighlight = (int)Float.parseFloat(splits[i].substring(\"highlight[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"maxFrags[\") == true){\n        maxFrags = (int)Float.parseFloat(splits[i].substring(\"maxFrags[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"fragSize[\") == true){\n        fragSize = (int)Float.parseFloat(splits[i].substring(\"fragSize[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"fields[\") == true){\n        paramFields = new HashSet<String>();\n        String fieldNames = splits[i].substring(\"fields[\".length(), splits[i].length() - 1);\n        String [] fieldSplits = fieldNames.split(\";\");\n        for (int j = 0; j < fieldSplits.length; j++) {\n          paramFields.add(fieldSplits[j]);          \n        }\n\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setParams(String params) {\n    // can't call super because super doesn't understand our\n    // params syntax\n    final String [] splits = params.split(\",\");\n    for (int i = 0; i < splits.length; i++) {\n      if (splits[i].startsWith(\"size[\") == true){\n        traversalSize = (int)Float.parseFloat(splits[i].substring(\"size[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"highlight[\") == true){\n        numToHighlight = (int)Float.parseFloat(splits[i].substring(\"highlight[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"maxFrags[\") == true){\n        maxFrags = (int)Float.parseFloat(splits[i].substring(\"maxFrags[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"fragSize[\") == true){\n        fragSize = (int)Float.parseFloat(splits[i].substring(\"fragSize[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"fields[\") == true){\n        paramFields = new HashSet<String>();\n        String fieldNames = splits[i].substring(\"fields[\".length(), splits[i].length() - 1);\n        String [] fieldSplits = fieldNames.split(\";\");\n        for (int j = 0; j < fieldSplits.length; j++) {\n          paramFields.add(fieldSplits[j]);          \n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetVectorHighlightTask#setParams(String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetVectorHighlightTask#setParams(String).mjava","sourceNew":"  @Override\n  public void setParams(String params) {\n    // can't call super because super doesn't understand our\n    // params syntax\n    final String [] splits = params.split(\",\");\n    for (int i = 0; i < splits.length; i++) {\n      if (splits[i].startsWith(\"size[\") == true){\n        traversalSize = (int)Float.parseFloat(splits[i].substring(\"size[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"highlight[\") == true){\n        numToHighlight = (int)Float.parseFloat(splits[i].substring(\"highlight[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"maxFrags[\") == true){\n        maxFrags = (int)Float.parseFloat(splits[i].substring(\"maxFrags[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"fragSize[\") == true){\n        fragSize = (int)Float.parseFloat(splits[i].substring(\"fragSize[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"fields[\") == true){\n        paramFields = new HashSet<String>();\n        String fieldNames = splits[i].substring(\"fields[\".length(), splits[i].length() - 1);\n        String [] fieldSplits = fieldNames.split(\";\");\n        for (int j = 0; j < fieldSplits.length; j++) {\n          paramFields.add(fieldSplits[j]);          \n        }\n\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setParams(String params) {\n    // can't call super because super doesn't understand our\n    // params syntax\n    final String [] splits = params.split(\",\");\n    for (int i = 0; i < splits.length; i++) {\n      if (splits[i].startsWith(\"size[\") == true){\n        traversalSize = (int)Float.parseFloat(splits[i].substring(\"size[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"highlight[\") == true){\n        numToHighlight = (int)Float.parseFloat(splits[i].substring(\"highlight[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"maxFrags[\") == true){\n        maxFrags = (int)Float.parseFloat(splits[i].substring(\"maxFrags[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"fragSize[\") == true){\n        fragSize = (int)Float.parseFloat(splits[i].substring(\"fragSize[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"fields[\") == true){\n        paramFields = new HashSet<String>();\n        String fieldNames = splits[i].substring(\"fields[\".length(), splits[i].length() - 1);\n        String [] fieldSplits = fieldNames.split(\";\");\n        for (int j = 0; j < fieldSplits.length; j++) {\n          paramFields.add(fieldSplits[j]);          \n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetVectorHighlightTask#setParams(String).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetVectorHighlightTask#setParams(String).mjava","sourceNew":"  @Override\n  public void setParams(String params) {\n    // can't call super because super doesn't understand our\n    // params syntax\n    final String [] splits = params.split(\",\");\n    for (int i = 0; i < splits.length; i++) {\n      if (splits[i].startsWith(\"size[\") == true){\n        traversalSize = (int)Float.parseFloat(splits[i].substring(\"size[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"highlight[\") == true){\n        numToHighlight = (int)Float.parseFloat(splits[i].substring(\"highlight[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"maxFrags[\") == true){\n        maxFrags = (int)Float.parseFloat(splits[i].substring(\"maxFrags[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"fragSize[\") == true){\n        fragSize = (int)Float.parseFloat(splits[i].substring(\"fragSize[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"fields[\") == true){\n        paramFields = new HashSet<String>();\n        String fieldNames = splits[i].substring(\"fields[\".length(), splits[i].length() - 1);\n        String [] fieldSplits = fieldNames.split(\";\");\n        for (int j = 0; j < fieldSplits.length; j++) {\n          paramFields.add(fieldSplits[j]);          \n        }\n\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setParams(String params) {\n    // can't call super because super doesn't understand our\n    // params syntax\n    final String [] splits = params.split(\",\");\n    for (int i = 0; i < splits.length; i++) {\n      if (splits[i].startsWith(\"size[\") == true){\n        traversalSize = (int)Float.parseFloat(splits[i].substring(\"size[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"highlight[\") == true){\n        numToHighlight = (int)Float.parseFloat(splits[i].substring(\"highlight[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"maxFrags[\") == true){\n        maxFrags = (int)Float.parseFloat(splits[i].substring(\"maxFrags[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"fragSize[\") == true){\n        fragSize = (int)Float.parseFloat(splits[i].substring(\"fragSize[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"fields[\") == true){\n        paramFields = new HashSet<String>();\n        String fieldNames = splits[i].substring(\"fields[\".length(), splits[i].length() - 1);\n        String [] fieldSplits = fieldNames.split(\";\");\n        for (int j = 0; j < fieldSplits.length; j++) {\n          paramFields.add(fieldSplits[j]);          \n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetVectorHighlightTask#setParams(String).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetVectorHighlightTask#setParams(String).mjava","sourceNew":"  @Override\n  public void setParams(String params) {\n    // can't call super because super doesn't understand our\n    // params syntax\n    final String [] splits = params.split(\",\");\n    for (int i = 0; i < splits.length; i++) {\n      if (splits[i].startsWith(\"size[\") == true){\n        traversalSize = (int)Float.parseFloat(splits[i].substring(\"size[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"highlight[\") == true){\n        numToHighlight = (int)Float.parseFloat(splits[i].substring(\"highlight[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"maxFrags[\") == true){\n        maxFrags = (int)Float.parseFloat(splits[i].substring(\"maxFrags[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"fragSize[\") == true){\n        fragSize = (int)Float.parseFloat(splits[i].substring(\"fragSize[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"fields[\") == true){\n        paramFields = new HashSet<String>();\n        String fieldNames = splits[i].substring(\"fields[\".length(), splits[i].length() - 1);\n        String [] fieldSplits = fieldNames.split(\";\");\n        for (int j = 0; j < fieldSplits.length; j++) {\n          paramFields.add(fieldSplits[j]);          \n        }\n\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setParams(String params) {\n    // can't call super because super doesn't understand our\n    // params syntax\n    final String [] splits = params.split(\",\");\n    for (int i = 0; i < splits.length; i++) {\n      if (splits[i].startsWith(\"size[\") == true){\n        traversalSize = (int)Float.parseFloat(splits[i].substring(\"size[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"highlight[\") == true){\n        numToHighlight = (int)Float.parseFloat(splits[i].substring(\"highlight[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"maxFrags[\") == true){\n        maxFrags = (int)Float.parseFloat(splits[i].substring(\"maxFrags[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"fragSize[\") == true){\n        fragSize = (int)Float.parseFloat(splits[i].substring(\"fragSize[\".length(),splits[i].length() - 1));\n      } else if (splits[i].startsWith(\"fields[\") == true){\n        paramFields = new HashSet<String>();\n        String fieldNames = splits[i].substring(\"fields[\".length(), splits[i].length() - 1);\n        String [] fieldSplits = fieldNames.split(\";\");\n        for (int j = 0; j < fieldSplits.length; j++) {\n          paramFields.add(fieldSplits[j]);          \n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","b89678825b68eccaf09e6ab71675fc0b0af1e099","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}