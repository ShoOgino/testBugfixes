{"path":"src/test/org/apache/solr/client/solrj/response/FieldAnalysisResponseTest#testSetResponse().mjava","commits":[{"id":"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a","date":1240390408,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/response/FieldAnalysisResponseTest#testSetResponse().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisResponse#setResponse(org.apache.solr.common.util.NamedList)} method.\n   */\n  @Test\n  public void testSetResponse() throws Exception {\n\n    // the parsing of the analysis phases is already tested in the AnalysisResponseBaseTest. So we can just fake\n    // the phases list here and use it.\n    final List<AnalysisResponseBase.AnalysisPhase> phases = new ArrayList<AnalysisResponseBase.AnalysisPhase>(1);\n    AnalysisResponseBase.AnalysisPhase expectedPhase = new AnalysisResponseBase.AnalysisPhase(\"Tokenizer\");\n    phases.add(expectedPhase);\n\n    NamedList responseNL = buildResponse();\n    FieldAnalysisResponse response = new FieldAnalysisResponse() {\n      @Override\n      protected List<AnalysisPhase> buildPhases(NamedList<Object> phaseNL) {\n        return phases;\n      }\n    };\n\n    response.setResponse(responseNL);\n\n    assertEquals(1, response.getFieldNameAnalysisCount());\n    FieldAnalysisResponse.Analysis analysis = response.getFieldNameAnalysis(\"name\");\n    Iterator<AnalysisResponseBase.AnalysisPhase> iter = analysis.getIndexPhases().iterator();\n    assertTrue(iter.hasNext());\n    assertSame(expectedPhase, iter.next());\n    assertFalse(iter.hasNext());\n    iter = analysis.getQueryPhases().iterator();\n    assertTrue(iter.hasNext());\n    assertSame(expectedPhase, iter.next());\n    assertFalse(iter.hasNext());\n\n    analysis = response.getFieldTypeAnalysis(\"text\");\n    iter = analysis.getIndexPhases().iterator();\n    assertTrue(iter.hasNext());\n    assertSame(expectedPhase, iter.next());\n    assertFalse(iter.hasNext());\n    iter = analysis.getQueryPhases().iterator();\n    assertTrue(iter.hasNext());\n    assertSame(expectedPhase, iter.next());\n    assertFalse(iter.hasNext());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/response/FieldAnalysisResponseTest#testSetResponse().mjava","pathOld":"src/test/org/apache/solr/client/solrj/response/FieldAnalysisResponseTest#testSetResponse().mjava","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisResponse#setResponse(org.apache.solr.common.util.NamedList)} method.\n   */\n  @Test\n  public void testSetResponse() throws Exception {\n\n    // the parsing of the analysis phases is already tested in the AnalysisResponseBaseTest. So we can just fake\n    // the phases list here and use it.\n    final List<AnalysisResponseBase.AnalysisPhase> phases = new ArrayList<AnalysisResponseBase.AnalysisPhase>(1);\n    AnalysisResponseBase.AnalysisPhase expectedPhase = new AnalysisResponseBase.AnalysisPhase(\"Tokenizer\");\n    phases.add(expectedPhase);\n\n    NamedList responseNL = buildResponse();\n    FieldAnalysisResponse response = new FieldAnalysisResponse() {\n      @Override\n      protected List<AnalysisPhase> buildPhases(NamedList<Object> phaseNL) {\n        return phases;\n      }\n    };\n\n    response.setResponse(responseNL);\n\n    assertEquals(1, response.getFieldNameAnalysisCount());\n    FieldAnalysisResponse.Analysis analysis = response.getFieldNameAnalysis(\"name\");\n    Iterator<AnalysisResponseBase.AnalysisPhase> iter = analysis.getIndexPhases().iterator();\n    assertTrue(iter.hasNext());\n    assertSame(expectedPhase, iter.next());\n    assertFalse(iter.hasNext());\n    iter = analysis.getQueryPhases().iterator();\n    assertTrue(iter.hasNext());\n    assertSame(expectedPhase, iter.next());\n    assertFalse(iter.hasNext());\n\n    analysis = response.getFieldTypeAnalysis(\"text\");\n    iter = analysis.getIndexPhases().iterator();\n    assertTrue(iter.hasNext());\n    assertSame(expectedPhase, iter.next());\n    assertFalse(iter.hasNext());\n    iter = analysis.getQueryPhases().iterator();\n    assertTrue(iter.hasNext());\n    assertSame(expectedPhase, iter.next());\n    assertFalse(iter.hasNext());\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link FieldAnalysisResponse#setResponse(org.apache.solr.common.util.NamedList)} method.\n   */\n  @Test\n  public void testSetResponse() throws Exception {\n\n    // the parsing of the analysis phases is already tested in the AnalysisResponseBaseTest. So we can just fake\n    // the phases list here and use it.\n    final List<AnalysisResponseBase.AnalysisPhase> phases = new ArrayList<AnalysisResponseBase.AnalysisPhase>(1);\n    AnalysisResponseBase.AnalysisPhase expectedPhase = new AnalysisResponseBase.AnalysisPhase(\"Tokenizer\");\n    phases.add(expectedPhase);\n\n    NamedList responseNL = buildResponse();\n    FieldAnalysisResponse response = new FieldAnalysisResponse() {\n      @Override\n      protected List<AnalysisPhase> buildPhases(NamedList<Object> phaseNL) {\n        return phases;\n      }\n    };\n\n    response.setResponse(responseNL);\n\n    assertEquals(1, response.getFieldNameAnalysisCount());\n    FieldAnalysisResponse.Analysis analysis = response.getFieldNameAnalysis(\"name\");\n    Iterator<AnalysisResponseBase.AnalysisPhase> iter = analysis.getIndexPhases().iterator();\n    assertTrue(iter.hasNext());\n    assertSame(expectedPhase, iter.next());\n    assertFalse(iter.hasNext());\n    iter = analysis.getQueryPhases().iterator();\n    assertTrue(iter.hasNext());\n    assertSame(expectedPhase, iter.next());\n    assertFalse(iter.hasNext());\n\n    analysis = response.getFieldTypeAnalysis(\"text\");\n    iter = analysis.getIndexPhases().iterator();\n    assertTrue(iter.hasNext());\n    assertSame(expectedPhase, iter.next());\n    assertFalse(iter.hasNext());\n    iter = analysis.getQueryPhases().iterator();\n    assertTrue(iter.hasNext());\n    assertSame(expectedPhase, iter.next());\n    assertFalse(iter.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}