{"path":"lucene/core/src/java/org/apache/lucene/index/MultiFields#terms(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#terms(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#terms(String).mjava","sourceNew":"  @Override\n  public Terms terms(String field) throws IOException {\n\n    Terms result = terms.get(field);\n    if (result != null)\n      return result;\n\n\n    // Lazy init: first time this field is requested, we\n    // create & add to terms:\n    final List<Terms> subs2 = new ArrayList<Terms>();\n    final List<ReaderUtil.Slice> slices2 = new ArrayList<ReaderUtil.Slice>();\n\n    // Gather all sub-readers that share this field\n    for(int i=0;i<subs.length;i++) {\n      final Terms terms = subs[i].terms(field);\n      if (terms != null) {\n        subs2.add(terms);\n        slices2.add(subSlices[i]);\n      }\n    }\n    if (subs2.size() == 0) {\n      result = null;\n      // don't cache this case with an unbounded cache, since the number of fields that don't exist\n      // is unbounded.\n    } else {\n      result = new MultiTerms(subs2.toArray(Terms.EMPTY_ARRAY),\n          slices2.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n      terms.put(field, result);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Terms terms(String field) throws IOException {\n\n    Terms result = terms.get(field);\n    if (result != null)\n      return result;\n\n\n    // Lazy init: first time this field is requested, we\n    // create & add to terms:\n    final List<Terms> subs2 = new ArrayList<Terms>();\n    final List<ReaderUtil.Slice> slices2 = new ArrayList<ReaderUtil.Slice>();\n\n    // Gather all sub-readers that share this field\n    for(int i=0;i<subs.length;i++) {\n      final Terms terms = subs[i].terms(field);\n      if (terms != null) {\n        subs2.add(terms);\n        slices2.add(subSlices[i]);\n      }\n    }\n    if (subs2.size() == 0) {\n      result = null;\n      // don't cache this case with an unbounded cache, since the number of fields that don't exist\n      // is unbounded.\n    } else {\n      result = new MultiTerms(subs2.toArray(Terms.EMPTY_ARRAY),\n          slices2.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n      terms.put(field, result);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#terms(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#terms(String).mjava","sourceNew":"  @Override\n  public Terms terms(String field) throws IOException {\n    Terms result = terms.get(field);\n    if (result != null)\n      return result;\n\n\n    // Lazy init: first time this field is requested, we\n    // create & add to terms:\n    final List<Terms> subs2 = new ArrayList<Terms>();\n    final List<ReaderSlice> slices2 = new ArrayList<ReaderSlice>();\n\n    // Gather all sub-readers that share this field\n    for(int i=0;i<subs.length;i++) {\n      final Terms terms = subs[i].terms(field);\n      if (terms != null) {\n        subs2.add(terms);\n        slices2.add(subSlices[i]);\n      }\n    }\n    if (subs2.size() == 0) {\n      result = null;\n      // don't cache this case with an unbounded cache, since the number of fields that don't exist\n      // is unbounded.\n    } else {\n      result = new MultiTerms(subs2.toArray(Terms.EMPTY_ARRAY),\n          slices2.toArray(ReaderSlice.EMPTY_ARRAY));\n      terms.put(field, result);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Terms terms(String field) throws IOException {\n\n    Terms result = terms.get(field);\n    if (result != null)\n      return result;\n\n\n    // Lazy init: first time this field is requested, we\n    // create & add to terms:\n    final List<Terms> subs2 = new ArrayList<Terms>();\n    final List<ReaderUtil.Slice> slices2 = new ArrayList<ReaderUtil.Slice>();\n\n    // Gather all sub-readers that share this field\n    for(int i=0;i<subs.length;i++) {\n      final Terms terms = subs[i].terms(field);\n      if (terms != null) {\n        subs2.add(terms);\n        slices2.add(subSlices[i]);\n      }\n    }\n    if (subs2.size() == 0) {\n      result = null;\n      // don't cache this case with an unbounded cache, since the number of fields that don't exist\n      // is unbounded.\n    } else {\n      result = new MultiTerms(subs2.toArray(Terms.EMPTY_ARRAY),\n          slices2.toArray(ReaderUtil.Slice.EMPTY_ARRAY));\n      terms.put(field, result);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#terms(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiFields#terms(String).mjava","sourceNew":"  @Override\n  public Terms terms(String field) throws IOException {\n    Terms result = terms.get(field);\n    if (result != null)\n      return result;\n\n\n    // Lazy init: first time this field is requested, we\n    // create & add to terms:\n    final List<Terms> subs2 = new ArrayList<>();\n    final List<ReaderSlice> slices2 = new ArrayList<>();\n\n    // Gather all sub-readers that share this field\n    for(int i=0;i<subs.length;i++) {\n      final Terms terms = subs[i].terms(field);\n      if (terms != null) {\n        subs2.add(terms);\n        slices2.add(subSlices[i]);\n      }\n    }\n    if (subs2.size() == 0) {\n      result = null;\n      // don't cache this case with an unbounded cache, since the number of fields that don't exist\n      // is unbounded.\n    } else {\n      result = new MultiTerms(subs2.toArray(Terms.EMPTY_ARRAY),\n          slices2.toArray(ReaderSlice.EMPTY_ARRAY));\n      terms.put(field, result);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Terms terms(String field) throws IOException {\n    Terms result = terms.get(field);\n    if (result != null)\n      return result;\n\n\n    // Lazy init: first time this field is requested, we\n    // create & add to terms:\n    final List<Terms> subs2 = new ArrayList<Terms>();\n    final List<ReaderSlice> slices2 = new ArrayList<ReaderSlice>();\n\n    // Gather all sub-readers that share this field\n    for(int i=0;i<subs.length;i++) {\n      final Terms terms = subs[i].terms(field);\n      if (terms != null) {\n        subs2.add(terms);\n        slices2.add(subSlices[i]);\n      }\n    }\n    if (subs2.size() == 0) {\n      result = null;\n      // don't cache this case with an unbounded cache, since the number of fields that don't exist\n      // is unbounded.\n    } else {\n      result = new MultiTerms(subs2.toArray(Terms.EMPTY_ARRAY),\n          slices2.toArray(ReaderSlice.EMPTY_ARRAY));\n      terms.put(field, result);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}