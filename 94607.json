{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testMerge().mjava","commits":[{"id":"5f5dc35fbd7ac2608de542ac2947ff8ab7b20b5a","date":1359818469,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testMerge().mjava","pathOld":"/dev/null","sourceNew":"  public void testMerge() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = _TestUtil.nextInt(random(), 100, 500);\n    final int numDeletes = random().nextInt(numDocs);\n    final Set<Integer> deletes = new HashSet<Integer>();\n    while (deletes.size() < numDeletes) {\n      deletes.add(random().nextInt(numDocs));\n    }\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(_TestUtil.nextInt(random(), 1, 3), _TestUtil.nextInt(random(), 10, 50), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      for (int delete : deletes) {\n        writer.deleteDocuments(new Term(\"id\", \"\" + delete));\n      }\n      // merge with deletes\n      writer.forceMerge(1);\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        if (!deletes.contains(i)) {\n          final int docID = docID(reader, \"\"+i);\n          assertEquals(docs[i], reader.getTermVectors(docID));\n        }\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb97a913498e2387924cb19fb8be9a95daf6f38a","date":1359823388,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testMerge().mjava","pathOld":"/dev/null","sourceNew":"  public void testMerge() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = _TestUtil.nextInt(random(), 100, 500);\n    final int numDeletes = random().nextInt(numDocs);\n    final Set<Integer> deletes = new HashSet<Integer>();\n    while (deletes.size() < numDeletes) {\n      deletes.add(random().nextInt(numDocs));\n    }\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(_TestUtil.nextInt(random(), 1, 3), _TestUtil.nextInt(random(), 10, 50), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      for (int delete : deletes) {\n        writer.deleteDocuments(new Term(\"id\", \"\" + delete));\n      }\n      // merge with deletes\n      writer.forceMerge(1);\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        if (!deletes.contains(i)) {\n          final int docID = docID(reader, \"\"+i);\n          assertEquals(docs[i], reader.getTermVectors(docID));\n        }\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86658da8ce1e761bc0f5a05cf8795d1f78c388e2","date":1365796110,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testMerge().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testMerge().mjava","sourceNew":"  public void testMerge() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    final int numDeletes = random().nextInt(numDocs);\n    final Set<Integer> deletes = new HashSet<Integer>();\n    while (deletes.size() < numDeletes) {\n      deletes.add(random().nextInt(numDocs));\n    }\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(_TestUtil.nextInt(random(), 1, 3), atLeast(10), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      for (int delete : deletes) {\n        writer.deleteDocuments(new Term(\"id\", \"\" + delete));\n      }\n      // merge with deletes\n      writer.forceMerge(1);\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        if (!deletes.contains(i)) {\n          final int docID = docID(reader, \"\"+i);\n          assertEquals(docs[i], reader.getTermVectors(docID));\n        }\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testMerge() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = _TestUtil.nextInt(random(), 100, 500);\n    final int numDeletes = random().nextInt(numDocs);\n    final Set<Integer> deletes = new HashSet<Integer>();\n    while (deletes.size() < numDeletes) {\n      deletes.add(random().nextInt(numDocs));\n    }\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(_TestUtil.nextInt(random(), 1, 3), _TestUtil.nextInt(random(), 10, 50), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      for (int delete : deletes) {\n        writer.deleteDocuments(new Term(\"id\", \"\" + delete));\n      }\n      // merge with deletes\n      writer.forceMerge(1);\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        if (!deletes.contains(i)) {\n          final int docID = docID(reader, \"\"+i);\n          assertEquals(docs[i], reader.getTermVectors(docID));\n        }\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testMerge().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testMerge().mjava","sourceNew":"  public void testMerge() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    final int numDeletes = random().nextInt(numDocs);\n    final Set<Integer> deletes = new HashSet<Integer>();\n    while (deletes.size() < numDeletes) {\n      deletes.add(random().nextInt(numDocs));\n    }\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(TestUtil.nextInt(random(), 1, 3), atLeast(10), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      for (int delete : deletes) {\n        writer.deleteDocuments(new Term(\"id\", \"\" + delete));\n      }\n      // merge with deletes\n      writer.forceMerge(1);\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        if (!deletes.contains(i)) {\n          final int docID = docID(reader, \"\"+i);\n          assertEquals(docs[i], reader.getTermVectors(docID));\n        }\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testMerge() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    final int numDeletes = random().nextInt(numDocs);\n    final Set<Integer> deletes = new HashSet<Integer>();\n    while (deletes.size() < numDeletes) {\n      deletes.add(random().nextInt(numDocs));\n    }\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(_TestUtil.nextInt(random(), 1, 3), atLeast(10), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      for (int delete : deletes) {\n        writer.deleteDocuments(new Term(\"id\", \"\" + delete));\n      }\n      // merge with deletes\n      writer.forceMerge(1);\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        if (!deletes.contains(i)) {\n          final int docID = docID(reader, \"\"+i);\n          assertEquals(docs[i], reader.getTermVectors(docID));\n        }\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testMerge().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testMerge().mjava","sourceNew":"  public void testMerge() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    final int numDeletes = random().nextInt(numDocs);\n    final Set<Integer> deletes = new HashSet<>();\n    while (deletes.size() < numDeletes) {\n      deletes.add(random().nextInt(numDocs));\n    }\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(TestUtil.nextInt(random(), 1, 3), atLeast(10), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      for (int delete : deletes) {\n        writer.deleteDocuments(new Term(\"id\", \"\" + delete));\n      }\n      // merge with deletes\n      writer.forceMerge(1);\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        if (!deletes.contains(i)) {\n          final int docID = docID(reader, \"\"+i);\n          assertEquals(docs[i], reader.getTermVectors(docID));\n        }\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testMerge() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    final int numDeletes = random().nextInt(numDocs);\n    final Set<Integer> deletes = new HashSet<Integer>();\n    while (deletes.size() < numDeletes) {\n      deletes.add(random().nextInt(numDocs));\n    }\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(TestUtil.nextInt(random(), 1, 3), atLeast(10), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      for (int delete : deletes) {\n        writer.deleteDocuments(new Term(\"id\", \"\" + delete));\n      }\n      // merge with deletes\n      writer.forceMerge(1);\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        if (!deletes.contains(i)) {\n          final int docID = docID(reader, \"\"+i);\n          assertEquals(docs[i], reader.getTermVectors(docID));\n        }\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testMerge().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testMerge().mjava","sourceNew":"  public void testMerge() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    final int numDeletes = random().nextInt(numDocs);\n    final Set<Integer> deletes = new HashSet<>();\n    while (deletes.size() < numDeletes) {\n      deletes.add(random().nextInt(numDocs));\n    }\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(TestUtil.nextInt(random(), 1, 3), atLeast(10), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      for (int delete : deletes) {\n        writer.deleteDocuments(new Term(\"id\", \"\" + delete));\n      }\n      // merge with deletes\n      writer.forceMerge(1);\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        if (!deletes.contains(i)) {\n          final int docID = docID(reader, \"\"+i);\n          assertEquals(docs[i], reader.getTermVectors(docID));\n        }\n      }\n      reader.close();\n      writer.shutdown();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testMerge() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    final int numDeletes = random().nextInt(numDocs);\n    final Set<Integer> deletes = new HashSet<>();\n    while (deletes.size() < numDeletes) {\n      deletes.add(random().nextInt(numDocs));\n    }\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(TestUtil.nextInt(random(), 1, 3), atLeast(10), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      for (int delete : deletes) {\n        writer.deleteDocuments(new Term(\"id\", \"\" + delete));\n      }\n      // merge with deletes\n      writer.forceMerge(1);\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        if (!deletes.contains(i)) {\n          final int docID = docID(reader, \"\"+i);\n          assertEquals(docs[i], reader.getTermVectors(docID));\n        }\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testMerge().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseTermVectorsFormatTestCase#testMerge().mjava","sourceNew":"  public void testMerge() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    final int numDeletes = random().nextInt(numDocs);\n    final Set<Integer> deletes = new HashSet<>();\n    while (deletes.size() < numDeletes) {\n      deletes.add(random().nextInt(numDocs));\n    }\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(TestUtil.nextInt(random(), 1, 3), atLeast(10), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      for (int delete : deletes) {\n        writer.deleteDocuments(new Term(\"id\", \"\" + delete));\n      }\n      // merge with deletes\n      writer.forceMerge(1);\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        if (!deletes.contains(i)) {\n          final int docID = docID(reader, \"\"+i);\n          assertEquals(docs[i], reader.getTermVectors(docID));\n        }\n      }\n      reader.close();\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testMerge() throws IOException {\n    final RandomDocumentFactory docFactory = new RandomDocumentFactory(5, 20);\n    final int numDocs = atLeast(100);\n    final int numDeletes = random().nextInt(numDocs);\n    final Set<Integer> deletes = new HashSet<>();\n    while (deletes.size() < numDeletes) {\n      deletes.add(random().nextInt(numDocs));\n    }\n    for (Options options : validOptions()) {\n      final RandomDocument[] docs = new RandomDocument[numDocs];\n      for (int i = 0; i < numDocs; ++i) {\n        docs[i] = docFactory.newDocument(TestUtil.nextInt(random(), 1, 3), atLeast(10), options);\n      }\n      final Directory dir = newDirectory();\n      final RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < numDocs; ++i) {\n        writer.addDocument(addId(docs[i].toDocument(), \"\"+i));\n        if (rarely()) {\n          writer.commit();\n        }\n      }\n      for (int delete : deletes) {\n        writer.deleteDocuments(new Term(\"id\", \"\" + delete));\n      }\n      // merge with deletes\n      writer.forceMerge(1);\n      final IndexReader reader = writer.getReader();\n      for (int i = 0; i < numDocs; ++i) {\n        if (!deletes.contains(i)) {\n          final int docID = docID(reader, \"\"+i);\n          assertEquals(docs[i], reader.getTermVectors(docID));\n        }\n      }\n      reader.close();\n      writer.shutdown();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"eb97a913498e2387924cb19fb8be9a95daf6f38a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f5dc35fbd7ac2608de542ac2947ff8ab7b20b5a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["86658da8ce1e761bc0f5a05cf8795d1f78c388e2"],"5f5dc35fbd7ac2608de542ac2947ff8ab7b20b5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"86658da8ce1e761bc0f5a05cf8795d1f78c388e2":["5f5dc35fbd7ac2608de542ac2947ff8ab7b20b5a"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"eb97a913498e2387924cb19fb8be9a95daf6f38a":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5f5dc35fbd7ac2608de542ac2947ff8ab7b20b5a":["eb97a913498e2387924cb19fb8be9a95daf6f38a","86658da8ce1e761bc0f5a05cf8795d1f78c388e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eb97a913498e2387924cb19fb8be9a95daf6f38a","5f5dc35fbd7ac2608de542ac2947ff8ab7b20b5a"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"86658da8ce1e761bc0f5a05cf8795d1f78c388e2":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["eb97a913498e2387924cb19fb8be9a95daf6f38a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}