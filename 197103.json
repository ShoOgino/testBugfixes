{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#preDecorateResponse(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#preDecorateResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public static void preDecorateResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the response\n    NamedList<Object> toLog = rsp.getToLog();\n\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e20eb505c4fd61a8fd1b129859868ceb700d224","date":1391663291,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#preDecorateResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#preDecorateResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public static void preDecorateResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the response\n    NamedList<Object> toLog = rsp.getToLog();\n\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n\n    final SolrParams params = req.getParams();\n    final String lpList = params.get(CommonParams.LOG_PARAMS_LIST);\n    if (lpList == null) {\n      toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    } else if (lpList.length() > 0) {\n      toLog.add(\"params\", \"{\" + params.toFilteredSolrParams(Arrays.asList(lpList.split(\",\"))).toString() + \"}\");\n    }\n  }\n\n","sourceOld":"  public static void preDecorateResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the response\n    NamedList<Object> toLog = rsp.getToLog();\n\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n    toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#preDecorateResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#preDecorateResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public static void preDecorateResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the response\n    NamedList<Object> toLog = rsp.getToLog();\n\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n\n    final SolrParams params = req.getParams();\n    final String lpList = params.get(CommonParams.LOG_PARAMS_LIST);\n    if (lpList == null) {\n      toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    } else if (lpList.length() > 0) {\n      toLog.add(\"params\", \"{\" + params.toFilteredSolrParams(Arrays.asList(lpList.split(\",\"))).toString() + \"}\");\n    }\n  }\n\n","sourceOld":"  public static void preDecorateResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<Object>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the response\n    NamedList<Object> toLog = rsp.getToLog();\n\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n\n    final SolrParams params = req.getParams();\n    final String lpList = params.get(CommonParams.LOG_PARAMS_LIST);\n    if (lpList == null) {\n      toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    } else if (lpList.length() > 0) {\n      toLog.add(\"params\", \"{\" + params.toFilteredSolrParams(Arrays.asList(lpList.split(\",\"))).toString() + \"}\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#preDecorateResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#preDecorateResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public static void preDecorateResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the response\n    NamedList<Object> toLog = rsp.getToLog();\n\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(PATH, req.getContext().get(PATH));\n\n    final SolrParams params = req.getParams();\n    final String lpList = params.get(CommonParams.LOG_PARAMS_LIST);\n    if (lpList == null) {\n      toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    } else if (lpList.length() > 0) {\n      toLog.add(\"params\", \"{\" + params.toFilteredSolrParams(Arrays.asList(lpList.split(\",\"))).toString() + \"}\");\n    }\n  }\n\n","sourceOld":"  public static void preDecorateResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the response\n    NamedList<Object> toLog = rsp.getToLog();\n\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n\n    final SolrParams params = req.getParams();\n    final String lpList = params.get(CommonParams.LOG_PARAMS_LIST);\n    if (lpList == null) {\n      toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    } else if (lpList.length() > 0) {\n      toLog.add(\"params\", \"{\" + params.toFilteredSolrParams(Arrays.asList(lpList.split(\",\"))).toString() + \"}\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#preDecorateResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#preDecorateResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public static void preDecorateResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the response\n    NamedList<Object> toLog = rsp.getToLog();\n\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(PATH, req.getContext().get(PATH));\n\n    final SolrParams params = req.getParams();\n    final String lpList = params.get(CommonParams.LOG_PARAMS_LIST);\n    if (lpList == null) {\n      toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    } else if (lpList.length() > 0) {\n      toLog.add(\"params\", \"{\" + params.toFilteredSolrParams(Arrays.asList(lpList.split(\",\"))).toString() + \"}\");\n    }\n  }\n\n","sourceOld":"  public static void preDecorateResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the response\n    NamedList<Object> toLog = rsp.getToLog();\n\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(\"path\", req.getContext().get(\"path\"));\n\n    final SolrParams params = req.getParams();\n    final String lpList = params.get(CommonParams.LOG_PARAMS_LIST);\n    if (lpList == null) {\n      toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    } else if (lpList.length() > 0) {\n      toLog.add(\"params\", \"{\" + params.toFilteredSolrParams(Arrays.asList(lpList.split(\",\"))).toString() + \"}\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecd75942508378ccc92c3a26f71db6cba9f25784","date":1450708761,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#preDecorateResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#preDecorateResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public static void preDecorateResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<>();\n    rsp.addResponseHeader(responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the response\n    NamedList<Object> toLog = rsp.getToLog();\n\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(PATH, req.getContext().get(PATH));\n\n    final SolrParams params = req.getParams();\n    final String lpList = params.get(CommonParams.LOG_PARAMS_LIST);\n    if (lpList == null) {\n      toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    } else if (lpList.length() > 0) {\n      toLog.add(\"params\", \"{\" + params.toFilteredSolrParams(Arrays.asList(lpList.split(\",\"))).toString() + \"}\");\n    }\n  }\n\n","sourceOld":"  public static void preDecorateResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<>();\n    rsp.add(\"responseHeader\", responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the response\n    NamedList<Object> toLog = rsp.getToLog();\n\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(PATH, req.getContext().get(PATH));\n\n    final SolrParams params = req.getParams();\n    final String lpList = params.get(CommonParams.LOG_PARAMS_LIST);\n    if (lpList == null) {\n      toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    } else if (lpList.length() > 0) {\n      toLog.add(\"params\", \"{\" + params.toFilteredSolrParams(Arrays.asList(lpList.split(\",\"))).toString() + \"}\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129e5b874f99ae4e04f39c337c940dda690f2d38","date":1524504409,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#preDecorateResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#preDecorateResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public static void preDecorateResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<>();\n    rsp.addResponseHeader(responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the response\n    NamedList<Object> toLog = rsp.getToLog();\n\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(PATH, req.getContext().get(PATH));\n\n    final SolrParams params = req.getParams();\n    final String lpList = params.get(CommonParams.LOG_PARAMS_LIST);\n    if (lpList == null) {\n      toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    } else if (lpList.length() > 0) {\n\n      // Filter params by those in LOG_PARAMS_LIST so that we can then call toString\n      HashSet<String> lpSet = new HashSet<>(Arrays.asList(lpList.split(\",\")));\n      SolrParams filteredParams = new SolrParams() {\n        @Override\n        public Iterator<String> getParameterNamesIterator() {\n          return Iterators.filter(params.getParameterNamesIterator(), lpSet::contains);\n        }\n\n        @Override\n        public String get(String param) { // assume param is in lpSet\n          return params.get(param);\n        } //assume in lpSet\n\n        @Override\n        public String[] getParams(String param) { // assume param is in lpSet\n          return params.getParams(param);\n        } // assume in lpSet\n      };\n\n      toLog.add(\"params\", \"{\" + filteredParams + \"}\");\n    }\n  }\n\n","sourceOld":"  public static void preDecorateResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<>();\n    rsp.addResponseHeader(responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the response\n    NamedList<Object> toLog = rsp.getToLog();\n\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(PATH, req.getContext().get(PATH));\n\n    final SolrParams params = req.getParams();\n    final String lpList = params.get(CommonParams.LOG_PARAMS_LIST);\n    if (lpList == null) {\n      toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    } else if (lpList.length() > 0) {\n      toLog.add(\"params\", \"{\" + params.toFilteredSolrParams(Arrays.asList(lpList.split(\",\"))).toString() + \"}\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24792720c893049d53a1807bd0ae9b64d1cd7be5","date":1527536585,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#preDecorateResponse(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#preDecorateResponse(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public static void preDecorateResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<>();\n    rsp.addResponseHeader(responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the response\n    NamedList<Object> toLog = rsp.getToLog();\n\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(PATH, req.getContext().get(PATH));\n\n    final SolrParams params = req.getParams();\n    final String lpList = params.get(CommonParams.LOG_PARAMS_LIST);\n    if (lpList == null) {\n      toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    } else if (lpList.length() > 0) {\n\n      // Filter params by those in LOG_PARAMS_LIST so that we can then call toString\n      HashSet<String> lpSet = new HashSet<>(Arrays.asList(lpList.split(\",\")));\n      SolrParams filteredParams = new SolrParams() {\n        private static final long serialVersionUID = -643991638344314066L;\n\n        @Override\n        public Iterator<String> getParameterNamesIterator() {\n          return Iterators.filter(params.getParameterNamesIterator(), lpSet::contains);\n        }\n\n        @Override\n        public String get(String param) { // assume param is in lpSet\n          return params.get(param);\n        } //assume in lpSet\n\n        @Override\n        public String[] getParams(String param) { // assume param is in lpSet\n          return params.getParams(param);\n        } // assume in lpSet\n      };\n\n      toLog.add(\"params\", \"{\" + filteredParams + \"}\");\n    }\n  }\n\n","sourceOld":"  public static void preDecorateResponse(SolrQueryRequest req, SolrQueryResponse rsp) {\n    // setup response header\n    final NamedList<Object> responseHeader = new SimpleOrderedMap<>();\n    rsp.addResponseHeader(responseHeader);\n\n    // toLog is a local ref to the same NamedList used by the response\n    NamedList<Object> toLog = rsp.getToLog();\n\n    // for back compat, we set these now just in case other code\n    // are expecting them during handleRequest\n    toLog.add(\"webapp\", req.getContext().get(\"webapp\"));\n    toLog.add(PATH, req.getContext().get(PATH));\n\n    final SolrParams params = req.getParams();\n    final String lpList = params.get(CommonParams.LOG_PARAMS_LIST);\n    if (lpList == null) {\n      toLog.add(\"params\", \"{\" + req.getParamString() + \"}\");\n    } else if (lpList.length() > 0) {\n\n      // Filter params by those in LOG_PARAMS_LIST so that we can then call toString\n      HashSet<String> lpSet = new HashSet<>(Arrays.asList(lpList.split(\",\")));\n      SolrParams filteredParams = new SolrParams() {\n        @Override\n        public Iterator<String> getParameterNamesIterator() {\n          return Iterators.filter(params.getParameterNamesIterator(), lpSet::contains);\n        }\n\n        @Override\n        public String get(String param) { // assume param is in lpSet\n          return params.get(param);\n        } //assume in lpSet\n\n        @Override\n        public String[] getParams(String param) { // assume param is in lpSet\n          return params.getParams(param);\n        } // assume in lpSet\n      };\n\n      toLog.add(\"params\", \"{\" + filteredParams + \"}\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0e20eb505c4fd61a8fd1b129859868ceb700d224"],"0e20eb505c4fd61a8fd1b129859868ceb700d224":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"129e5b874f99ae4e04f39c337c940dda690f2d38":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","1390137e395d2f07f9ba5b8c43d293befe84d563"],"24792720c893049d53a1807bd0ae9b64d1cd7be5":["129e5b874f99ae4e04f39c337c940dda690f2d38"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24792720c893049d53a1807bd0ae9b64d1cd7be5"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017"],"0e20eb505c4fd61a8fd1b129859868ceb700d224":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"129e5b874f99ae4e04f39c337c940dda690f2d38":["24792720c893049d53a1807bd0ae9b64d1cd7be5"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["d2638f781be724518ff6c2263d14a48cf6e68017","ecd75942508378ccc92c3a26f71db6cba9f25784"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"24792720c893049d53a1807bd0ae9b64d1cd7be5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["0e20eb505c4fd61a8fd1b129859868ceb700d224"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["129e5b874f99ae4e04f39c337c940dda690f2d38"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}