{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testEnableGraphQueries().mjava","commits":[{"id":"70a5a9d222a882b030ff4a1d87e44b75403b893a","date":1487758607,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testEnableGraphQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testEnableGraphQueries() throws Exception {\n    QueryParser dumb = new QueryParser(\"field\", new Analyzer1());\n    dumb.setSplitOnWhitespace(false);\n    dumb.setEnableGraphQueries(false);\n    \n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will just form a boolean query when graph queries are disabled:\n    Query inner = new SynonymQuery(new Term[] {new Term(\"field\", \"cavy\"), new Term(\"field\", \"guinea\")});\n    BooleanQuery.Builder b = new BooleanQuery.Builder();\n    b.add(inner, BooleanClause.Occur.SHOULD);\n    b.add(pig, BooleanClause.Occur.SHOULD);\n    BooleanQuery query = b.build();\n    assertEquals(query, dumb.parse(\"guinea pig\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df25592b82060bc1c800e87bf019444bf0ddf9d4","date":1552296011,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testEnableGraphQueries().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testEnableGraphQueries().mjava","sourceNew":"  public void testEnableGraphQueries() throws Exception {\n    QueryParser dumb = new QueryParser(\"field\", new Analyzer1());\n    dumb.setSplitOnWhitespace(false);\n    dumb.setEnableGraphQueries(false);\n    \n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n\n    // A multi-word synonym source will just form a boolean query when graph queries are disabled:\n    Query inner = new SynonymQuery.Builder(\"field\")\n        .addTerm(new Term(\"field\", \"cavy\"))\n        .addTerm(new Term(\"field\", \"guinea\"))\n        .build();\n    BooleanQuery.Builder b = new BooleanQuery.Builder();\n    b.add(inner, BooleanClause.Occur.SHOULD);\n    b.add(pig, BooleanClause.Occur.SHOULD);\n    BooleanQuery query = b.build();\n    assertEquals(query, dumb.parse(\"guinea pig\"));\n  }\n\n","sourceOld":"  public void testEnableGraphQueries() throws Exception {\n    QueryParser dumb = new QueryParser(\"field\", new Analyzer1());\n    dumb.setSplitOnWhitespace(false);\n    dumb.setEnableGraphQueries(false);\n    \n    TermQuery guinea = new TermQuery(new Term(\"field\", \"guinea\"));\n    TermQuery pig = new TermQuery(new Term(\"field\", \"pig\"));\n    TermQuery cavy = new TermQuery(new Term(\"field\", \"cavy\"));\n\n    // A multi-word synonym source will just form a boolean query when graph queries are disabled:\n    Query inner = new SynonymQuery(new Term[] {new Term(\"field\", \"cavy\"), new Term(\"field\", \"guinea\")});\n    BooleanQuery.Builder b = new BooleanQuery.Builder();\n    b.add(inner, BooleanClause.Occur.SHOULD);\n    b.add(pig, BooleanClause.Occur.SHOULD);\n    BooleanQuery query = b.build();\n    assertEquals(query, dumb.parse(\"guinea pig\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["70a5a9d222a882b030ff4a1d87e44b75403b893a"],"70a5a9d222a882b030ff4a1d87e44b75403b893a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df25592b82060bc1c800e87bf019444bf0ddf9d4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70a5a9d222a882b030ff4a1d87e44b75403b893a"],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"70a5a9d222a882b030ff4a1d87e44b75403b893a":["df25592b82060bc1c800e87bf019444bf0ddf9d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}