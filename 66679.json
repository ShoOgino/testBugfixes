{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/custom/TestCustomAnalyzer#testStopWordsFromClasspathWithMap().mjava","commits":[{"id":"150b2fdbce4a521aa43abb6402c9b878786e4bd6","date":1421245951,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/custom/TestCustomAnalyzer#testStopWordsFromClasspathWithMap().mjava","pathOld":"/dev/null","sourceNew":"  public void testStopWordsFromClasspathWithMap() throws Exception {\n    Map<String,String> stopConfig1 = new HashMap<>();\n    stopConfig1.put(\"ignoreCase\", \"true\");\n    stopConfig1.put(\"words\", \"org/apache/lucene/analysis/custom/teststop.txt\");\n    stopConfig1.put(\"format\", \"wordset\");\n    \n    Map<String,String> stopConfig2 = Collections.unmodifiableMap(new HashMap<>(stopConfig1));\n\n    CustomAnalyzer a = CustomAnalyzer.builder()\n        .withTokenizer(\"whitespace\")\n        .addTokenFilter(\"stop\", stopConfig1)\n        .build();\n    assertTrue(stopConfig1.isEmpty());\n    assertAnalyzesTo(a, \"foo Foo Bar\", new String[0]);\n    \n    // try with unmodifiableMap, should fail\n    try {\n      CustomAnalyzer.builder()\n          .withTokenizer(\"whitespace\")\n          .addTokenFilter(\"stop\", stopConfig2)\n          .build();\n      fail();\n    } catch (IllegalArgumentException | UnsupportedOperationException e) {\n      // pass\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/custom/TestCustomAnalyzer#testStopWordsFromClasspathWithMap().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/custom/TestCustomAnalyzer#testStopWordsFromClasspathWithMap().mjava","sourceNew":"  public void testStopWordsFromClasspathWithMap() throws Exception {\n    Map<String,String> stopConfig1 = new HashMap<>();\n    stopConfig1.put(\"ignoreCase\", \"true\");\n    stopConfig1.put(\"words\", \"org/apache/lucene/analysis/custom/teststop.txt\");\n    stopConfig1.put(\"format\", \"wordset\");\n    \n    Map<String,String> stopConfig2 = Collections.unmodifiableMap(new HashMap<>(stopConfig1));\n\n    CustomAnalyzer a = CustomAnalyzer.builder()\n        .withTokenizer(\"whitespace\")\n        .addTokenFilter(\"stop\", stopConfig1)\n        .build();\n    assertTrue(stopConfig1.isEmpty());\n    assertAnalyzesTo(a, \"foo Foo Bar\", new String[0]);\n    \n    // try with unmodifiableMap, should fail\n    try {\n      CustomAnalyzer.builder()\n          .withTokenizer(\"whitespace\")\n          .addTokenFilter(\"stop\", stopConfig2)\n          .build();\n      fail();\n    } catch (IllegalArgumentException | UnsupportedOperationException e) {\n      // pass\n    }\n    a.close();\n  }\n\n","sourceOld":"  public void testStopWordsFromClasspathWithMap() throws Exception {\n    Map<String,String> stopConfig1 = new HashMap<>();\n    stopConfig1.put(\"ignoreCase\", \"true\");\n    stopConfig1.put(\"words\", \"org/apache/lucene/analysis/custom/teststop.txt\");\n    stopConfig1.put(\"format\", \"wordset\");\n    \n    Map<String,String> stopConfig2 = Collections.unmodifiableMap(new HashMap<>(stopConfig1));\n\n    CustomAnalyzer a = CustomAnalyzer.builder()\n        .withTokenizer(\"whitespace\")\n        .addTokenFilter(\"stop\", stopConfig1)\n        .build();\n    assertTrue(stopConfig1.isEmpty());\n    assertAnalyzesTo(a, \"foo Foo Bar\", new String[0]);\n    \n    // try with unmodifiableMap, should fail\n    try {\n      CustomAnalyzer.builder()\n          .withTokenizer(\"whitespace\")\n          .addTokenFilter(\"stop\", stopConfig2)\n          .build();\n      fail();\n    } catch (IllegalArgumentException | UnsupportedOperationException e) {\n      // pass\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/custom/TestCustomAnalyzer#testStopWordsFromClasspathWithMap().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/custom/TestCustomAnalyzer#testStopWordsFromClasspathWithMap().mjava","sourceNew":"  public void testStopWordsFromClasspathWithMap() throws Exception {\n    Map<String,String> stopConfig1 = new HashMap<>();\n    stopConfig1.put(\"ignoreCase\", \"true\");\n    stopConfig1.put(\"words\", \"org/apache/lucene/analysis/custom/teststop.txt\");\n    stopConfig1.put(\"format\", \"wordset\");\n    \n    Map<String,String> stopConfig2 = Collections.unmodifiableMap(new HashMap<>(stopConfig1));\n\n    CustomAnalyzer a = CustomAnalyzer.builder()\n        .withTokenizer(\"whitespace\")\n        .addTokenFilter(\"stop\", stopConfig1)\n        .build();\n    assertTrue(stopConfig1.isEmpty());\n    assertAnalyzesTo(a, \"foo Foo Bar\", new String[0]);\n    \n    // try with unmodifiableMap, should fail\n    try {\n      CustomAnalyzer.builder()\n          .withTokenizer(\"whitespace\")\n          .addTokenFilter(\"stop\", stopConfig2)\n          .build();\n      fail();\n    } catch (IllegalArgumentException | UnsupportedOperationException e) {\n      // pass\n    }\n    a.close();\n  }\n\n","sourceOld":"  public void testStopWordsFromClasspathWithMap() throws Exception {\n    Map<String,String> stopConfig1 = new HashMap<>();\n    stopConfig1.put(\"ignoreCase\", \"true\");\n    stopConfig1.put(\"words\", \"org/apache/lucene/analysis/custom/teststop.txt\");\n    stopConfig1.put(\"format\", \"wordset\");\n    \n    Map<String,String> stopConfig2 = Collections.unmodifiableMap(new HashMap<>(stopConfig1));\n\n    CustomAnalyzer a = CustomAnalyzer.builder()\n        .withTokenizer(\"whitespace\")\n        .addTokenFilter(\"stop\", stopConfig1)\n        .build();\n    assertTrue(stopConfig1.isEmpty());\n    assertAnalyzesTo(a, \"foo Foo Bar\", new String[0]);\n    \n    // try with unmodifiableMap, should fail\n    try {\n      CustomAnalyzer.builder()\n          .withTokenizer(\"whitespace\")\n          .addTokenFilter(\"stop\", stopConfig2)\n          .build();\n      fail();\n    } catch (IllegalArgumentException | UnsupportedOperationException e) {\n      // pass\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475693cad374d888e9513c658c7457962de0e3fa","date":1451987067,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/custom/TestCustomAnalyzer#testStopWordsFromClasspathWithMap().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/custom/TestCustomAnalyzer#testStopWordsFromClasspathWithMap().mjava","sourceNew":"  public void testStopWordsFromClasspathWithMap() throws Exception {\n    Map<String,String> stopConfig1 = new HashMap<>();\n    stopConfig1.put(\"ignoreCase\", \"true\");\n    stopConfig1.put(\"words\", \"org/apache/lucene/analysis/custom/teststop.txt\");\n    stopConfig1.put(\"format\", \"wordset\");\n    \n    Map<String,String> stopConfig2 = new HashMap<>(stopConfig1);\n    Map<String,String> stopConfigImmutable = Collections.unmodifiableMap(new HashMap<>(stopConfig1));\n\n    CustomAnalyzer a = CustomAnalyzer.builder()\n        .withTokenizer(\"whitespace\")\n        .addTokenFilter(\"stop\", stopConfig1)\n        .build();\n    assertTrue(stopConfig1.isEmpty());\n    assertAnalyzesTo(a, \"foo Foo Bar\", new String[0]);\n    \n    a = CustomAnalyzer.builder()\n        .withTokenizer(WhitespaceTokenizerFactory.class)\n        .addTokenFilter(StopFilterFactory.class, stopConfig2)\n        .build();\n    assertTrue(stopConfig2.isEmpty());\n    assertAnalyzesTo(a, \"foo Foo Bar\", new String[0]);\n    \n    // try with unmodifiableMap, should fail\n    try {\n      CustomAnalyzer.builder()\n          .withTokenizer(\"whitespace\")\n          .addTokenFilter(\"stop\", stopConfigImmutable)\n          .build();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // pass\n    }\n    a.close();\n  }\n\n","sourceOld":"  public void testStopWordsFromClasspathWithMap() throws Exception {\n    Map<String,String> stopConfig1 = new HashMap<>();\n    stopConfig1.put(\"ignoreCase\", \"true\");\n    stopConfig1.put(\"words\", \"org/apache/lucene/analysis/custom/teststop.txt\");\n    stopConfig1.put(\"format\", \"wordset\");\n    \n    Map<String,String> stopConfig2 = Collections.unmodifiableMap(new HashMap<>(stopConfig1));\n\n    CustomAnalyzer a = CustomAnalyzer.builder()\n        .withTokenizer(\"whitespace\")\n        .addTokenFilter(\"stop\", stopConfig1)\n        .build();\n    assertTrue(stopConfig1.isEmpty());\n    assertAnalyzesTo(a, \"foo Foo Bar\", new String[0]);\n    \n    // try with unmodifiableMap, should fail\n    try {\n      CustomAnalyzer.builder()\n          .withTokenizer(\"whitespace\")\n          .addTokenFilter(\"stop\", stopConfig2)\n          .build();\n      fail();\n    } catch (IllegalArgumentException | UnsupportedOperationException e) {\n      // pass\n    }\n    a.close();\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/custom/TestCustomAnalyzer#testStopWordsFromClasspathWithMap().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/custom/TestCustomAnalyzer#testStopWordsFromClasspathWithMap().mjava","sourceNew":"  public void testStopWordsFromClasspathWithMap() throws Exception {\n    Map<String,String> stopConfig1 = new HashMap<>();\n    stopConfig1.put(\"ignoreCase\", \"true\");\n    stopConfig1.put(\"words\", \"org/apache/lucene/analysis/custom/teststop.txt\");\n    stopConfig1.put(\"format\", \"wordset\");\n    \n    Map<String,String> stopConfig2 = new HashMap<>(stopConfig1);\n    Map<String,String> stopConfigImmutable = Collections.unmodifiableMap(new HashMap<>(stopConfig1));\n\n    CustomAnalyzer a = CustomAnalyzer.builder()\n        .withTokenizer(\"whitespace\")\n        .addTokenFilter(\"stop\", stopConfig1)\n        .build();\n    assertTrue(stopConfig1.isEmpty());\n    assertAnalyzesTo(a, \"foo Foo Bar\", new String[0]);\n    \n    a = CustomAnalyzer.builder()\n        .withTokenizer(WhitespaceTokenizerFactory.class)\n        .addTokenFilter(StopFilterFactory.class, stopConfig2)\n        .build();\n    assertTrue(stopConfig2.isEmpty());\n    assertAnalyzesTo(a, \"foo Foo Bar\", new String[0]);\n    \n    // try with unmodifiableMap, should fail\n    expectThrows(UnsupportedOperationException.class, () -> {\n      CustomAnalyzer.builder()\n          .withTokenizer(\"whitespace\")\n          .addTokenFilter(\"stop\", stopConfigImmutable)\n          .build();\n    });\n    a.close();\n  }\n\n","sourceOld":"  public void testStopWordsFromClasspathWithMap() throws Exception {\n    Map<String,String> stopConfig1 = new HashMap<>();\n    stopConfig1.put(\"ignoreCase\", \"true\");\n    stopConfig1.put(\"words\", \"org/apache/lucene/analysis/custom/teststop.txt\");\n    stopConfig1.put(\"format\", \"wordset\");\n    \n    Map<String,String> stopConfig2 = new HashMap<>(stopConfig1);\n    Map<String,String> stopConfigImmutable = Collections.unmodifiableMap(new HashMap<>(stopConfig1));\n\n    CustomAnalyzer a = CustomAnalyzer.builder()\n        .withTokenizer(\"whitespace\")\n        .addTokenFilter(\"stop\", stopConfig1)\n        .build();\n    assertTrue(stopConfig1.isEmpty());\n    assertAnalyzesTo(a, \"foo Foo Bar\", new String[0]);\n    \n    a = CustomAnalyzer.builder()\n        .withTokenizer(WhitespaceTokenizerFactory.class)\n        .addTokenFilter(StopFilterFactory.class, stopConfig2)\n        .build();\n    assertTrue(stopConfig2.isEmpty());\n    assertAnalyzesTo(a, \"foo Foo Bar\", new String[0]);\n    \n    // try with unmodifiableMap, should fail\n    try {\n      CustomAnalyzer.builder()\n          .withTokenizer(\"whitespace\")\n          .addTokenFilter(\"stop\", stopConfigImmutable)\n          .build();\n      fail();\n    } catch (UnsupportedOperationException e) {\n      // pass\n    }\n    a.close();\n  }\n\n","bugFix":["150b2fdbce4a521aa43abb6402c9b878786e4bd6","475693cad374d888e9513c658c7457962de0e3fa"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["150b2fdbce4a521aa43abb6402c9b878786e4bd6","a56958d7f71a28824f20031ffbb2e13502a0274e"],"475693cad374d888e9513c658c7457962de0e3fa":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["475693cad374d888e9513c658c7457962de0e3fa"],"150b2fdbce4a521aa43abb6402c9b878786e4bd6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["150b2fdbce4a521aa43abb6402c9b878786e4bd6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"475693cad374d888e9513c658c7457962de0e3fa":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["150b2fdbce4a521aa43abb6402c9b878786e4bd6"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"150b2fdbce4a521aa43abb6402c9b878786e4bd6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","475693cad374d888e9513c658c7457962de0e3fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}