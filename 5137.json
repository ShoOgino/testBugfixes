{"path":"solr/core/src/test/org/apache/solr/search/TestPayloadCheckQParserPlugin#test().mjava","commits":[{"id":"03d1c7f08294f7d7e9ecf082aa1459f38d77f277","date":1493688929,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestPayloadCheckQParserPlugin#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() {\n    clearIndex();\n\n    String[] should_matches = new String[] {\n        \"{!payload_check f=vals_dpi v=A payloads=1}\",\n        \"{!payload_check f=vals_dpi v=B payloads=2}\",\n        \"{!payload_check f=vals_dpi v=C payloads=3}\",\n        \"{!payload_check f=vals_dpi payloads='1 2'}A B\",\n        // \"{!payload_check f=vals_dpi payloads='1 2.0'}A B\",  // ideally this should pass, but IntegerEncoder can't handle \"2.0\"\n        \"{!payload_check f=vals_dpi payloads='1 2 3'}A B C\",\n\n        \"{!payload_check f=vals_dpf payloads='1 2'}one two\",\n        \"{!payload_check f=vals_dpf payloads='1 2.0'}one two\", // shows that FloatEncoder can handle \"1\"\n\n        \"{!payload_check f=vals_dps payloads='NOUN VERB'}cat jumped\"\n    };\n\n    String[] should_not_matches = new String[] {\n        \"{!payload_check f=vals_dpi v=A payloads=2}\",\n        \"{!payload_check f=vals_dpi payloads='1 2'}B C\",\n        \"{!payload_check f=vals_dpi payloads='1 2 3'}A B\",\n        \"{!payload_check f=vals_dpi payloads='1 2'}A B C\",\n        \"{!payload_check f=vals_dpf payloads='1 2.0'}two three\",\n        \"{!payload_check f=vals_dps payloads='VERB NOUN'}cat jumped\"\n    };\n\n    for(String should_match : should_matches) {\n      assertQ(should_match, req(\"fl\",\"*,score\", \"q\", should_match), \"//result[@numFound='1']\");\n    }\n\n    for(String should_not_match : should_not_matches) {\n      assertQ(should_not_match, req(\"fl\",\"*,score\", \"q\", should_not_match), \"//result[@numFound='0']\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestPayloadCheckQParserPlugin#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() {\n    clearIndex();\n\n    String[] should_matches = new String[] {\n        \"{!payload_check f=vals_dpi v=A payloads=1}\",\n        \"{!payload_check f=vals_dpi v=B payloads=2}\",\n        \"{!payload_check f=vals_dpi v=C payloads=3}\",\n        \"{!payload_check f=vals_dpi payloads='1 2'}A B\",\n        // \"{!payload_check f=vals_dpi payloads='1 2.0'}A B\",  // ideally this should pass, but IntegerEncoder can't handle \"2.0\"\n        \"{!payload_check f=vals_dpi payloads='1 2 3'}A B C\",\n\n        \"{!payload_check f=vals_dpf payloads='1 2'}one two\",\n        \"{!payload_check f=vals_dpf payloads='1 2.0'}one two\", // shows that FloatEncoder can handle \"1\"\n\n        \"{!payload_check f=vals_dps payloads='NOUN VERB'}cat jumped\"\n    };\n\n    String[] should_not_matches = new String[] {\n        \"{!payload_check f=vals_dpi v=A payloads=2}\",\n        \"{!payload_check f=vals_dpi payloads='1 2'}B C\",\n        \"{!payload_check f=vals_dpi payloads='1 2 3'}A B\",\n        \"{!payload_check f=vals_dpi payloads='1 2'}A B C\",\n        \"{!payload_check f=vals_dpf payloads='1 2.0'}two three\",\n        \"{!payload_check f=vals_dps payloads='VERB NOUN'}cat jumped\"\n    };\n\n    for(String should_match : should_matches) {\n      assertQ(should_match, req(\"fl\",\"*,score\", \"q\", should_match), \"//result[@numFound='1']\");\n    }\n\n    for(String should_not_match : should_not_matches) {\n      assertQ(should_not_match, req(\"fl\",\"*,score\", \"q\", should_not_match), \"//result[@numFound='0']\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03d1c7f08294f7d7e9ecf082aa1459f38d77f277"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03d1c7f08294f7d7e9ecf082aa1459f38d77f277"],"03d1c7f08294f7d7e9ecf082aa1459f38d77f277":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","03d1c7f08294f7d7e9ecf082aa1459f38d77f277"],"03d1c7f08294f7d7e9ecf082aa1459f38d77f277":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}