{"path":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testNumTerms().mjava","commits":[{"id":"df0329608a289015ef0887f776679127cbbfe71e","date":1375813587,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testNumTerms().mjava","pathOld":"/dev/null","sourceNew":"  public void testNumTerms() throws Exception {\n    final String f = \"name\";\n    for (String n : new String[] {\"2\", \"3\", \"100\", \"99999\"}) {\n      assertQ(req(\"qt\", \"/admin/luke\", \"fl\", f, \"numTerms\", n),\n              field(f) + \"lst[@name='topTerms']/int[@name='Apache']\",\n              field(f) + \"lst[@name='topTerms']/int[@name='Solr']\",\n              \"count(\"+field(f)+\"lst[@name='topTerms']/int)=2\");\n    }\n    \n    assertQ(req(\"qt\", \"/admin/luke\", \"fl\", f, \"numTerms\", \"1\"),\n            // no garuntee which one we find\n            \"count(\"+field(f)+\"lst[@name='topTerms']/int)=1\");\n\n    assertQ(req(\"qt\", \"/admin/luke\", \"fl\", f, \"numTerms\", \"0\"),\n            \"count(\"+field(f)+\"lst[@name='topTerms']/int)=0\");\n\n    // field with no terms shouldn't error\n    for (String n : new String[] {\"0\", \"1\", \"2\", \"100\", \"99999\"}) {\n      assertQ(req(\"qt\", \"/admin/luke\", \"fl\", \"bogus_s\", \"numTerms\", n),\n              \"count(\"+field(f)+\"lst[@name='topTerms']/int)=0\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testNumTerms().mjava","pathOld":"/dev/null","sourceNew":"  public void testNumTerms() throws Exception {\n    final String f = \"name\";\n    for (String n : new String[] {\"2\", \"3\", \"100\", \"99999\"}) {\n      assertQ(req(\"qt\", \"/admin/luke\", \"fl\", f, \"numTerms\", n),\n              field(f) + \"lst[@name='topTerms']/int[@name='Apache']\",\n              field(f) + \"lst[@name='topTerms']/int[@name='Solr']\",\n              \"count(\"+field(f)+\"lst[@name='topTerms']/int)=2\");\n    }\n    \n    assertQ(req(\"qt\", \"/admin/luke\", \"fl\", f, \"numTerms\", \"1\"),\n            // no garuntee which one we find\n            \"count(\"+field(f)+\"lst[@name='topTerms']/int)=1\");\n\n    assertQ(req(\"qt\", \"/admin/luke\", \"fl\", f, \"numTerms\", \"0\"),\n            \"count(\"+field(f)+\"lst[@name='topTerms']/int)=0\");\n\n    // field with no terms shouldn't error\n    for (String n : new String[] {\"0\", \"1\", \"2\", \"100\", \"99999\"}) {\n      assertQ(req(\"qt\", \"/admin/luke\", \"fl\", \"bogus_s\", \"numTerms\", n),\n              \"count(\"+field(f)+\"lst[@name='topTerms']/int)=0\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","df0329608a289015ef0887f776679127cbbfe71e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df0329608a289015ef0887f776679127cbbfe71e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df0329608a289015ef0887f776679127cbbfe71e"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","df0329608a289015ef0887f776679127cbbfe71e"],"df0329608a289015ef0887f776679127cbbfe71e":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}