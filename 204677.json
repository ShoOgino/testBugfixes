{"path":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/BeiderMorseFilter#incrementToken().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/BeiderMorseFilter#incrementToken().mjava","pathOld":"modules/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/BeiderMorseFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (matcher.find()) {\n      clearAttributes();\n      termAtt.setEmpty().append(encoded, matcher.start(1), matcher.end(1));\n      posIncAtt.setPositionIncrement(0);\n      offsetAtt.setOffset(startOffset, endOffset);\n      return true;\n    }\n    \n    if (input.incrementToken()) {\n      encoded = (languages == null) \n          ? engine.encode(termAtt.toString())\n          : engine.encode(termAtt.toString(), languages);\n      startOffset = offsetAtt.startOffset();\n      endOffset = offsetAtt.endOffset();\n      matcher.reset(encoded);\n      if (matcher.find()) {\n        termAtt.setEmpty().append(encoded, matcher.start(1), matcher.end(1));\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (matcher.find()) {\n      clearAttributes();\n      termAtt.setEmpty().append(encoded, matcher.start(1), matcher.end(1));\n      posIncAtt.setPositionIncrement(0);\n      offsetAtt.setOffset(startOffset, endOffset);\n      return true;\n    }\n    \n    if (input.incrementToken()) {\n      encoded = (languages == null) \n          ? engine.encode(termAtt.toString())\n          : engine.encode(termAtt.toString(), languages);\n      startOffset = offsetAtt.startOffset();\n      endOffset = offsetAtt.endOffset();\n      matcher.reset(encoded);\n      if (matcher.find()) {\n        termAtt.setEmpty().append(encoded, matcher.start(1), matcher.end(1));\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bfd84d020e6ab739e8d9da53e96df25bacc9f88","date":1368172819,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/BeiderMorseFilter#incrementToken().mjava","pathOld":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/BeiderMorseFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (matcher.find()) {\n      assert state != null && encoded != null;\n      restoreState(state);\n      termAtt.setEmpty().append(encoded, matcher.start(1), matcher.end(1));\n      posIncAtt.setPositionIncrement(0);\n      return true;\n    }\n    \n    if (input.incrementToken()) {\n      encoded = (languages == null) \n          ? engine.encode(termAtt.toString())\n          : engine.encode(termAtt.toString(), languages);\n      state = captureState();\n      matcher.reset(encoded);\n      if (matcher.find()) {\n        termAtt.setEmpty().append(encoded, matcher.start(1), matcher.end(1));\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (matcher.find()) {\n      clearAttributes();\n      termAtt.setEmpty().append(encoded, matcher.start(1), matcher.end(1));\n      posIncAtt.setPositionIncrement(0);\n      offsetAtt.setOffset(startOffset, endOffset);\n      return true;\n    }\n    \n    if (input.incrementToken()) {\n      encoded = (languages == null) \n          ? engine.encode(termAtt.toString())\n          : engine.encode(termAtt.toString(), languages);\n      startOffset = offsetAtt.startOffset();\n      endOffset = offsetAtt.endOffset();\n      matcher.reset(encoded);\n      if (matcher.find()) {\n        termAtt.setEmpty().append(encoded, matcher.start(1), matcher.end(1));\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":["6e3cb3ab0ae0e80cf24f56515b246da9de46c0b5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1bfd84d020e6ab739e8d9da53e96df25bacc9f88":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1bfd84d020e6ab739e8d9da53e96df25bacc9f88"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1bfd84d020e6ab739e8d9da53e96df25bacc9f88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1bfd84d020e6ab739e8d9da53e96df25bacc9f88":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}