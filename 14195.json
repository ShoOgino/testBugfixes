{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    clusterStateProvider.simAddNode(nodeId);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    LOG.trace(\"-- added node \" + nodeId);\n    return nodeId;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","sourceNew":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    clusterStateProvider.simAddNode(nodeId);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    LOG.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (historyHandler == null && liveNodesSet.size() == 1) {\n      MetricsHandler metricsHandler = new MetricsHandler(metricManager);\n      historyHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, Collections.emptyMap());\n      historyHandler.initializeMetrics(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","sourceOld":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    clusterStateProvider.simAddNode(nodeId);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    LOG.trace(\"-- added node \" + nodeId);\n    return nodeId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad60b6945c360ff89899d716d9cdec8dd674e2a0","date":1528114819,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","sourceNew":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    clusterStateProvider.simAddNode(nodeId);\n    LOG.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (historyHandler == null && liveNodesSet.size() == 1) {\n      MetricsHandler metricsHandler = new MetricsHandler(metricManager);\n      historyHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, Collections.emptyMap());\n      historyHandler.initializeMetrics(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","sourceOld":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    clusterStateProvider.simAddNode(nodeId);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    LOG.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (historyHandler == null && liveNodesSet.size() == 1) {\n      MetricsHandler metricsHandler = new MetricsHandler(metricManager);\n      historyHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, Collections.emptyMap());\n      historyHandler.initializeMetrics(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","sourceNew":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    clusterStateProvider.simAddNode(nodeId);\n    LOG.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (historyHandler == null && liveNodesSet.size() == 1) {\n      MetricsHandler metricsHandler = new MetricsHandler(metricManager);\n      historyHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, Collections.emptyMap());\n      historyHandler.initializeMetrics(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","sourceOld":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    clusterStateProvider.simAddNode(nodeId);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    LOG.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (historyHandler == null && liveNodesSet.size() == 1) {\n      MetricsHandler metricsHandler = new MetricsHandler(metricManager);\n      historyHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, Collections.emptyMap());\n      historyHandler.initializeMetrics(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","sourceNew":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    clusterStateProvider.simAddNode(nodeId);\n    LOG.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (historyHandler == null && liveNodesSet.size() == 1) {\n      MetricsHandler metricsHandler = new MetricsHandler(metricManager);\n      historyHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, Collections.emptyMap());\n      historyHandler.initializeMetrics(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","sourceOld":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    clusterStateProvider.simAddNode(nodeId);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    LOG.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (historyHandler == null && liveNodesSet.size() == 1) {\n      MetricsHandler metricsHandler = new MetricsHandler(metricManager);\n      historyHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, Collections.emptyMap());\n      historyHandler.initializeMetrics(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b55cd711a129fb7fc4c3c4672d652149c9a4faa","date":1528813320,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","sourceNew":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    clusterStateProvider.simAddNode(nodeId);\n    LOG.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (metricsHistoryHandler == null && liveNodesSet.size() == 1) {\n      metricsHandler = new MetricsHandler(metricManager);\n      metricsHistoryHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, Collections.emptyMap());\n      metricsHistoryHandler.initializeMetrics(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","sourceOld":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    clusterStateProvider.simAddNode(nodeId);\n    LOG.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (historyHandler == null && liveNodesSet.size() == 1) {\n      MetricsHandler metricsHandler = new MetricsHandler(metricManager);\n      historyHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, Collections.emptyMap());\n      historyHandler.initializeMetrics(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","sourceNew":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    clusterStateProvider.simAddNode(nodeId);\n    LOG.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (metricsHistoryHandler == null && liveNodesSet.size() == 1) {\n      metricsHandler = new MetricsHandler(metricManager);\n      metricsHistoryHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, Collections.emptyMap());\n      metricsHistoryHandler.initializeMetrics(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","sourceOld":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    clusterStateProvider.simAddNode(nodeId);\n    LOG.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (historyHandler == null && liveNodesSet.size() == 1) {\n      MetricsHandler metricsHandler = new MetricsHandler(metricManager);\n      historyHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, Collections.emptyMap());\n      historyHandler.initializeMetrics(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","sourceNew":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    clusterStateProvider.simAddNode(nodeId);\n    LOG.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (metricsHistoryHandler == null && liveNodesSet.size() == 1) {\n      metricsHandler = new MetricsHandler(metricManager);\n      metricsHistoryHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, Collections.emptyMap());\n      metricsHistoryHandler.initializeMetrics(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","sourceOld":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    clusterStateProvider.simAddNode(nodeId);\n    LOG.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (historyHandler == null && liveNodesSet.size() == 1) {\n      MetricsHandler metricsHandler = new MetricsHandler(metricManager);\n      historyHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, Collections.emptyMap());\n      historyHandler.initializeMetrics(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","sourceNew":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    clusterStateProvider.simAddNode(nodeId);\n    log.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (metricsHistoryHandler == null && liveNodesSet.size() == 1) {\n      metricsHandler = new MetricsHandler(metricManager);\n      metricsHistoryHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, Collections.emptyMap());\n      metricsHistoryHandler.initializeMetrics(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","sourceOld":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    clusterStateProvider.simAddNode(nodeId);\n    LOG.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (metricsHistoryHandler == null && liveNodesSet.size() == 1) {\n      metricsHandler = new MetricsHandler(metricManager);\n      metricsHistoryHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, Collections.emptyMap());\n      metricsHistoryHandler.initializeMetrics(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c5018985f5ddacff38d20cd4b39cf3c885fa234","date":1547081878,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","sourceNew":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    clusterStateProvider.simAddNode(nodeId);\n    log.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (metricsHistoryHandler == null && liveNodesSet.size() == 1) {\n      metricsHandler = new MetricsHandler(metricManager);\n      metricsHistoryHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, new HashMap<>());\n      metricsHistoryHandler.initializeMetrics(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","sourceOld":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    clusterStateProvider.simAddNode(nodeId);\n    log.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (metricsHistoryHandler == null && liveNodesSet.size() == 1) {\n      metricsHandler = new MetricsHandler(metricManager);\n      metricsHistoryHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, Collections.emptyMap());\n      metricsHistoryHandler.initializeMetrics(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simAddNode().mjava","sourceNew":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    clusterStateProvider.simAddNode(nodeId);\n    log.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (metricsHistoryHandler == null && liveNodesSet.size() == 1) {\n      metricsHandler = new MetricsHandler(metricManager);\n      metricsHistoryHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, new HashMap<>());\n      metricsHistoryHandler.initializeMetrics(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","sourceOld":"  /**\n   * Add a new node and initialize its node values (metrics). The\n   * /live_nodes list is updated with the new node id.\n   * @return new node id\n   */\n  public String simAddNode() throws Exception {\n    Map<String, Object> values = createNodeValues(null);\n    String nodeId = (String)values.get(ImplicitSnitch.NODE);\n    nodeStateProvider.simSetNodeValues(nodeId, values);\n    clusterStateProvider.simAddNode(nodeId);\n    log.trace(\"-- added node \" + nodeId);\n    // initialize history handler if this is the first node\n    if (metricsHistoryHandler == null && liveNodesSet.size() == 1) {\n      metricsHandler = new MetricsHandler(metricManager);\n      metricsHistoryHandler = new MetricsHistoryHandler(nodeId, metricsHandler, solrClient, this, new HashMap<>());\n      metricsHistoryHandler.initializeMetrics(metricManager, SolrMetricManager.getRegistryName(SolrInfoBean.Group.node), metricTag, CommonParams.METRICS_HISTORY_PATH);\n    }\n    return nodeId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c5018985f5ddacff38d20cd4b39cf3c885fa234":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"6b55cd711a129fb7fc4c3c4672d652149c9a4faa":["ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b70042a8a492f7054d480ccdd2be9796510d4327","6b55cd711a129fb7fc4c3c4672d652149c9a4faa"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["0c5018985f5ddacff38d20cd4b39cf3c885fa234"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"f592209545c71895260367152601e9200399776d":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["6b55cd711a129fb7fc4c3c4672d652149c9a4faa"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["f592209545c71895260367152601e9200399776d","6b55cd711a129fb7fc4c3c4672d652149c9a4faa"]},"commit2Childs":{"0c5018985f5ddacff38d20cd4b39cf3c885fa234":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"6b55cd711a129fb7fc4c3c4672d652149c9a4faa":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["b70042a8a492f7054d480ccdd2be9796510d4327","ad60b6945c360ff89899d716d9cdec8dd674e2a0","f592209545c71895260367152601e9200399776d"],"b70042a8a492f7054d480ccdd2be9796510d4327":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["6b55cd711a129fb7fc4c3c4672d652149c9a4faa","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":["7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["0c5018985f5ddacff38d20cd4b39cf3c885fa234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}