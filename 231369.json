{"path":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","sourceNew":"  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    FieldCacheRangeFilter<Integer> fcrf;\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertTrue(fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","sourceOld":"  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    FieldCacheRangeFilter<Integer> fcrf;\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertTrue(fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c","date":1270671893,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","sourceNew":"  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","sourceOld":"  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    FieldCacheRangeFilter<Integer> fcrf;\n    result = search.search(q,fcrf=FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertTrue(fcrf.getDocIdSet(reader.getSequentialSubReaders()[0]).isCacheable());\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","bugFix":["e450c7d50c2fc84c963d0d7ade9d3217d868064d","3a0b8ae4ac997de7adea27f34c380588fa28d646"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","sourceNew":"  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","sourceOld":"  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","sourceNew":"  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","sourceOld":"  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"150488c1317972164a9a824be05b1ba2ba0fc68c","date":1284316090,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","sourceNew":"  @Test\n  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","sourceOld":"  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","sourceNew":"  @Test\n  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","sourceOld":"  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","sourceNew":"  @Test\n  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","sourceNew":"  @Test\n  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","sourceNew":"  @Test\n  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n    search.close();\n  }\n\n","sourceOld":"  @Test\n  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","sourceNew":"  @Test\n  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","sourceNew":"  @Test\n  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterInts().mjava","sourceNew":"  @Test\n  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testFieldCacheRangeFilterInts() throws IOException {\n\n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    int medId = ((maxId - minId) / 2);\n    Integer minIdO = Integer.valueOf(minId);\n    Integer maxIdO = Integer.valueOf(maxId);\n    Integer medIdO = Integer.valueOf(medId);\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    // test id, bounded on both ends\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n    \n    // unbounded id\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,null,F,F), numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,maxIdO,T,F), numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,medIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,F,F), numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",minIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,minIdO,F,T), numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,maxIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,null,T,F), numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",medIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T\", 1, result.length);\n    \n    // special cases\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",Integer.valueOf(Integer.MAX_VALUE),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",null,Integer.valueOf(Integer.MIN_VALUE),F,F), numDocs).scoreDocs;\n    assertEquals(\"overflow special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newIntRange(\"id\",maxIdO,minIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"inverse range\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["790e1fde4caa765b3faaad3fbcd25c6973450336","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"5f4e87790277826a2aea119328600dfb07761f32":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","150488c1317972164a9a824be05b1ba2ba0fc68c"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"c084e47df29de3330311d69dabf515ceaa989512":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["150488c1317972164a9a824be05b1ba2ba0fc68c","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"150488c1317972164a9a824be05b1ba2ba0fc68c":["c084e47df29de3330311d69dabf515ceaa989512"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c084e47df29de3330311d69dabf515ceaa989512":["5f4e87790277826a2aea119328600dfb07761f32","150488c1317972164a9a824be05b1ba2ba0fc68c"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336","29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}