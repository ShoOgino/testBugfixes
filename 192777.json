{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestReplicaProperties#test().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestReplicaProperties#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      // Mix up a bunch of different combinations of shards and replicas in order to exercise boundary cases.\n      // shards, replicationfactor, maxreplicaspernode\n      int shards = random().nextInt(7);\n      if (shards < 2) shards = 2;\n      int rFactor = random().nextInt(4);\n      if (rFactor < 2) rFactor = 2;\n      createCollection(null, COLLECTION_NAME, shards, rFactor, shards * rFactor + 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n\n    listCollection();\n\n    clusterAssignPropertyTest();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      // Mix up a bunch of different combinations of shards and replicas in order to exercise boundary cases.\n      // shards, replicationfactor, maxreplicaspernode\n      int shards = random().nextInt(7);\n      if (shards < 2) shards = 2;\n      int rFactor = random().nextInt(4);\n      if (rFactor < 2) rFactor = 2;\n      createCollection(null, COLLECTION_NAME, shards, rFactor, shards * rFactor + 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n\n    listCollection();\n\n    clusterAssignPropertyTest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestReplicaProperties#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestReplicaProperties#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      // Mix up a bunch of different combinations of shards and replicas in order to exercise boundary cases.\n      // shards, replicationfactor, maxreplicaspernode\n      int shards = random().nextInt(7);\n      if (shards < 2) shards = 2;\n      int rFactor = random().nextInt(4);\n      if (rFactor < 2) rFactor = 2;\n      createCollection(null, COLLECTION_NAME, shards, rFactor, shards * rFactor + 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n\n    listCollection();\n\n    clusterAssignPropertyTest();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      // Mix up a bunch of different combinations of shards and replicas in order to exercise boundary cases.\n      // shards, replicationfactor, maxreplicaspernode\n      int shards = random().nextInt(7);\n      if (shards < 2) shards = 2;\n      int rFactor = random().nextInt(4);\n      if (rFactor < 2) rFactor = 2;\n      createCollection(null, COLLECTION_NAME, shards, rFactor, shards * rFactor + 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n\n    listCollection();\n\n    clusterAssignPropertyTest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestReplicaProperties#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestReplicaProperties#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      // Mix up a bunch of different combinations of shards and replicas in order to exercise boundary cases.\n      // shards, replicationfactor\n      int shards = random().nextInt(7);\n      if (shards < 2) shards = 2;\n      int rFactor = random().nextInt(4);\n      if (rFactor < 2) rFactor = 2;\n      createCollection(null, COLLECTION_NAME, shards, rFactor, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n\n    listCollection();\n\n    clusterAssignPropertyTest();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 4)\n  public void test() throws Exception {\n\n    try (CloudSolrClient client = createCloudClient(null)) {\n      // Mix up a bunch of different combinations of shards and replicas in order to exercise boundary cases.\n      // shards, replicationfactor, maxreplicaspernode\n      int shards = random().nextInt(7);\n      if (shards < 2) shards = 2;\n      int rFactor = random().nextInt(4);\n      if (rFactor < 2) rFactor = 2;\n      createCollection(null, COLLECTION_NAME, shards, rFactor, shards * rFactor + 1, client, null, \"conf1\");\n    }\n\n    waitForCollection(cloudClient.getZkStateReader(), COLLECTION_NAME, 2);\n    waitForRecoveriesToFinish(COLLECTION_NAME, false);\n\n    listCollection();\n\n    clusterAssignPropertyTest();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}