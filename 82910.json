{"path":"lucene/src/test-framework/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/index/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.dir,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.context,\n                                                Lucene40PostingsFormat.TERMS_CACHE_SIZE,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.dir,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.context,\n                                                Lucene40PostingsFormat.TERMS_CACHE_SIZE,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/mockintblock/MockFixedIntBlockPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.dir,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.context,\n                                                Lucene40PostingsFormat.TERMS_CACHE_SIZE,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postingsReader = new SepPostingsReader(state.dir,\n                                                              state.segmentInfo,\n                                                              state.context,\n                                                              new MockIntFactory(blockSize), state.segmentSuffix);\n\n    TermsIndexReaderBase indexReader;\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(), state.segmentSuffix,\n                                                       IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        postingsReader.close();\n      }\n    }\n\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir,\n                                                state.fieldInfos,\n                                                state.segmentInfo.name,\n                                                postingsReader,\n                                                state.context,\n                                                Lucene40PostingsFormat.TERMS_CACHE_SIZE,\n                                                state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          postingsReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}