{"path":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#saveTerms(ShardTerms).mjava","commits":[{"id":"5b6cc501b75cbd5d0319284563cdd20aff857ee6","date":1575346594,"type":1,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#saveTerms(ShardTerms).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#saveTerms(Terms).mjava","sourceNew":"  /**\r\n   * Set new terms to ZK, the version of new terms must match the current ZK term node\r\n   * @param newTerms to be set\r\n   * @return true if terms is saved successfully to ZK, false if otherwise\r\n   * @throws KeeperException.NoNodeException correspond ZK term node is not created\r\n   */\r\n  private boolean saveTerms(ShardTerms newTerms) throws KeeperException.NoNodeException {\r\n    byte[] znodeData = Utils.toJSON(newTerms);\r\n    try {\r\n      Stat stat = zkClient.setData(znodePath, znodeData, newTerms.getVersion(), true);\r\n      setNewTerms(new ShardTerms(newTerms, stat.getVersion()));\r\n      log.info(\"Successful update of terms at {} to {}\", znodePath, newTerms);\r\n      return true;\r\n    } catch (KeeperException.BadVersionException e) {\r\n      log.info(\"Failed to save terms, version is not a match, retrying\");\r\n      refreshTerms();\r\n    } catch (KeeperException.NoNodeException e) {\r\n      throw e;\r\n    } catch (Exception e) {\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error while saving shard term for collection: \" + collection, e);\r\n    }\r\n    return false;\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Set new terms to ZK, the version of new terms must match the current ZK term node\r\n   * @param newTerms to be set\r\n   * @return true if terms is saved successfully to ZK, false if otherwise\r\n   * @throws KeeperException.NoNodeException correspond ZK term node is not created\r\n   */\r\n  private boolean saveTerms(Terms newTerms) throws KeeperException.NoNodeException {\r\n    byte[] znodeData = Utils.toJSON(newTerms.values);\r\n    try {\r\n      Stat stat = zkClient.setData(znodePath, znodeData, newTerms.version, true);\r\n      setNewTerms(new Terms(newTerms.values, stat.getVersion()));\r\n      log.info(\"Successful update of terms at {} to {}\", znodePath, newTerms);\r\n      return true;\r\n    } catch (KeeperException.BadVersionException e) {\r\n      log.info(\"Failed to save terms, version is not a match, retrying\");\r\n      refreshTerms();\r\n    } catch (KeeperException.NoNodeException e) {\r\n      throw e;\r\n    } catch (Exception e) {\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error while saving shard term for collection: \" + collection, e);\r\n    }\r\n    return false;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#saveTerms(ShardTerms).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#saveTerms(Terms).mjava","sourceNew":"  /**\r\n   * Set new terms to ZK, the version of new terms must match the current ZK term node\r\n   * @param newTerms to be set\r\n   * @return true if terms is saved successfully to ZK, false if otherwise\r\n   * @throws KeeperException.NoNodeException correspond ZK term node is not created\r\n   */\r\n  private boolean saveTerms(ShardTerms newTerms) throws KeeperException.NoNodeException {\r\n    byte[] znodeData = Utils.toJSON(newTerms);\r\n    try {\r\n      Stat stat = zkClient.setData(znodePath, znodeData, newTerms.getVersion(), true);\r\n      setNewTerms(new ShardTerms(newTerms, stat.getVersion()));\r\n      log.info(\"Successful update of terms at {} to {}\", znodePath, newTerms);\r\n      return true;\r\n    } catch (KeeperException.BadVersionException e) {\r\n      log.info(\"Failed to save terms, version is not a match, retrying\");\r\n      refreshTerms();\r\n    } catch (KeeperException.NoNodeException e) {\r\n      throw e;\r\n    } catch (Exception e) {\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error while saving shard term for collection: \" + collection, e);\r\n    }\r\n    return false;\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Set new terms to ZK, the version of new terms must match the current ZK term node\r\n   * @param newTerms to be set\r\n   * @return true if terms is saved successfully to ZK, false if otherwise\r\n   * @throws KeeperException.NoNodeException correspond ZK term node is not created\r\n   */\r\n  private boolean saveTerms(Terms newTerms) throws KeeperException.NoNodeException {\r\n    byte[] znodeData = Utils.toJSON(newTerms.values);\r\n    try {\r\n      Stat stat = zkClient.setData(znodePath, znodeData, newTerms.version, true);\r\n      setNewTerms(new Terms(newTerms.values, stat.getVersion()));\r\n      log.info(\"Successful update of terms at {} to {}\", znodePath, newTerms);\r\n      return true;\r\n    } catch (KeeperException.BadVersionException e) {\r\n      log.info(\"Failed to save terms, version is not a match, retrying\");\r\n      refreshTerms();\r\n    } catch (KeeperException.NoNodeException e) {\r\n      throw e;\r\n    } catch (Exception e) {\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error while saving shard term for collection: \" + collection, e);\r\n    }\r\n    return false;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14b990ee56c39c454f5c6bc2e645d1286e93acee","date":1579181439,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#saveTerms(ShardTerms).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkShardTerms#saveTerms(ShardTerms).mjava","sourceNew":"  /**\n   * Set new terms to ZK, the version of new terms must match the current ZK term node\n   * @param newTerms to be set\n   * @return true if terms is saved successfully to ZK, false if otherwise\n   * @throws KeeperException.NoNodeException correspond ZK term node is not created\n   */\n  private boolean saveTerms(ShardTerms newTerms) throws KeeperException.NoNodeException {\n    byte[] znodeData = Utils.toJSON(newTerms);\n    try {\n      Stat stat = zkClient.setData(znodePath, znodeData, newTerms.getVersion(), true);\n      setNewTerms(new ShardTerms(newTerms, stat.getVersion()));\n      log.info(\"Successful update of terms at {} to {}\", znodePath, newTerms);\n      return true;\n    } catch (KeeperException.BadVersionException e) {\n      log.info(\"Failed to save terms, version is not a match, retrying\");\n      refreshTerms();\n    } catch (KeeperException.NoNodeException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error while saving shard term for collection: \" + collection, e);\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\r\n   * Set new terms to ZK, the version of new terms must match the current ZK term node\r\n   * @param newTerms to be set\r\n   * @return true if terms is saved successfully to ZK, false if otherwise\r\n   * @throws KeeperException.NoNodeException correspond ZK term node is not created\r\n   */\r\n  private boolean saveTerms(ShardTerms newTerms) throws KeeperException.NoNodeException {\r\n    byte[] znodeData = Utils.toJSON(newTerms);\r\n    try {\r\n      Stat stat = zkClient.setData(znodePath, znodeData, newTerms.getVersion(), true);\r\n      setNewTerms(new ShardTerms(newTerms, stat.getVersion()));\r\n      log.info(\"Successful update of terms at {} to {}\", znodePath, newTerms);\r\n      return true;\r\n    } catch (KeeperException.BadVersionException e) {\r\n      log.info(\"Failed to save terms, version is not a match, retrying\");\r\n      refreshTerms();\r\n    } catch (KeeperException.NoNodeException e) {\r\n      throw e;\r\n    } catch (Exception e) {\r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error while saving shard term for collection: \" + collection, e);\r\n    }\r\n    return false;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"14b990ee56c39c454f5c6bc2e645d1286e93acee":["5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"5b6cc501b75cbd5d0319284563cdd20aff857ee6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14b990ee56c39c454f5c6bc2e645d1286e93acee"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"5b6cc501b75cbd5d0319284563cdd20aff857ee6":["d3aa683bba99315838c968fefedf3d74f44aa993","14b990ee56c39c454f5c6bc2e645d1286e93acee"],"14b990ee56c39c454f5c6bc2e645d1286e93acee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3aa683bba99315838c968fefedf3d74f44aa993","5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}