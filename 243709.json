{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#clone(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#clone(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#clone(boolean).mjava","sourceNew":"  /**\n   * Clones the IndexReader and optionally changes readOnly.  A readOnly \n   * reader cannot open a writeable reader.  \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","sourceOld":"  /**\n   * Clones the IndexReader and optionally changes readOnly.  A readOnly \n   * reader cannot open a writeable reader.  \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef5d5589290633d3913407e8e8320c227949ff40","date":1323041363,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#clone(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Clones the IndexReader and optionally changes readOnly.  A readOnly \n   * reader cannot open a writeable reader.  \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#clone(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Clones the IndexReader and optionally changes readOnly.  A readOnly \n   * reader cannot open a writeable reader.  \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#clone(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Clones the IndexReader and optionally changes readOnly.  A readOnly \n   * reader cannot open a writeable reader.  \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    throw new UnsupportedOperationException(\"This reader does not implement clone()\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ef5d5589290633d3913407e8e8320c227949ff40":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["9454a6510e2db155fb01faa5c049b06ece95fab9","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["9454a6510e2db155fb01faa5c049b06ece95fab9","ef5d5589290633d3913407e8e8320c227949ff40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ef5d5589290633d3913407e8e8320c227949ff40":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ef5d5589290633d3913407e8e8320c227949ff40","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}