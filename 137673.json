{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#testRandom().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#testRandom().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final int numTerms = atLeast(400);\n    final Set<String> terms = new HashSet<String>();\n    while(terms.size() != numTerms) {\n      terms.add(randomString());\n    }\n    testTerms(terms.toArray(new String[terms.size()]));\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final int numTerms = atLeast(400);\n    final Set<String> terms = new HashSet<String>();\n    while(terms.size() != numTerms) {\n      terms.add(randomString());\n    }\n    testTerms(terms.toArray(new String[terms.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final int numTerms = atLeast(400);\n    final Set<String> terms = new HashSet<>();\n    while(terms.size() != numTerms) {\n      terms.add(randomString());\n    }\n    testTerms(terms.toArray(new String[terms.size()]));\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final int numTerms = atLeast(400);\n    final Set<String> terms = new HashSet<String>();\n    while(terms.size() != numTerms) {\n      terms.add(randomString());\n    }\n    testTerms(terms.toArray(new String[terms.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#testRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestCompiledAutomaton#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    final int numTerms = atLeast(400);\n    final Set<String> terms = new HashSet<>();\n    while(terms.size() != numTerms) {\n      terms.add(randomString());\n    }\n    testTerms(numTerms * 100, terms.toArray(new String[terms.size()]));\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    final int numTerms = atLeast(400);\n    final Set<String> terms = new HashSet<>();\n    while(terms.size() != numTerms) {\n      terms.add(randomString());\n    }\n    testTerms(terms.toArray(new String[terms.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b316f82baae88f5e279893a9cb7eee51fd8902f"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}