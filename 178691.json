{"path":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#symLink(String,String).mjava","commits":[{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#symLink(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a soft link between a src and destination\n   * only on a local disk. HDFS does not support this.\n   * On Windows, when symlink creation fails due to security\n   * setting, we will log a warning. The return code in this\n   * case is 2.\n   *\n   * @param target the target for symlink\n   * @param linkname the symlink\n   * @return 0 on success\n   */\n  public static int symLink(String target, String linkname) throws IOException{\n\n    if (target == null || linkname == null) {\n      LOG.warn(\"Can not create a symLink with a target = \" + target\n          + \" and link =\" + linkname);\n      return 1;\n    }\n\n    // Run the input paths through Java's File so that they are converted to the\n    // native OS form\n    File targetFile = new File(\n        Path.getPathWithoutSchemeAndAuthority(new Path(target)).toString());\n    File linkFile = new File(\n        Path.getPathWithoutSchemeAndAuthority(new Path(linkname)).toString());\n\n    String[] cmd = Shell.getSymlinkCommand(\n        targetFile.toString(),\n        linkFile.toString());\n\n    ShellCommandExecutor shExec;\n    try {\n      if (Shell.WINDOWS &&\n          linkFile.getParentFile() != null &&\n          !new Path(target).isAbsolute()) {\n        // Relative links on Windows must be resolvable at the time of\n        // creation. To ensure this we run the shell command in the directory\n        // of the link.\n        //\n        shExec = new ShellCommandExecutor(cmd, linkFile.getParentFile());\n      } else {\n        shExec = new ShellCommandExecutor(cmd);\n      }\n      shExec.execute();\n    } catch (Shell.ExitCodeException ec) {\n      int returnVal = ec.getExitCode();\n      if (Shell.WINDOWS && returnVal == SYMLINK_NO_PRIVILEGE) {\n        LOG.warn(\"Fail to create symbolic links on Windows. \"\n            + \"The default security settings in Windows disallow non-elevated \"\n            + \"administrators and all non-administrators from creating symbolic links. \"\n            + \"This behavior can be changed in the Local Security Policy management console\");\n      } else if (returnVal != 0) {\n        LOG.warn(\"Command '\" + StringUtils.join(\" \", cmd) + \"' failed \"\n            + returnVal + \" with: \" + ec.getMessage());\n      }\n      return returnVal;\n    } catch (IOException e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Error while create symlink \" + linkname + \" to \" + target\n            + \".\" + \" Exception: \" + StringUtils.stringifyException(e));\n      }\n      throw e;\n    }\n    return shExec.getExitCode();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#symLink(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a soft link between a src and destination\n   * only on a local disk. HDFS does not support this.\n   * On Windows, when symlink creation fails due to security\n   * setting, we will log a warning. The return code in this\n   * case is 2.\n   *\n   * @param target the target for symlink\n   * @param linkname the symlink\n   * @return 0 on success\n   */\n  public static int symLink(String target, String linkname) throws IOException{\n\n    if (target == null || linkname == null) {\n      LOG.warn(\"Can not create a symLink with a target = \" + target\n          + \" and link =\" + linkname);\n      return 1;\n    }\n\n    // Run the input paths through Java's File so that they are converted to the\n    // native OS form\n    File targetFile = new File(\n        Path.getPathWithoutSchemeAndAuthority(new Path(target)).toString());\n    File linkFile = new File(\n        Path.getPathWithoutSchemeAndAuthority(new Path(linkname)).toString());\n\n    String[] cmd = Shell.getSymlinkCommand(\n        targetFile.toString(),\n        linkFile.toString());\n\n    ShellCommandExecutor shExec;\n    try {\n      if (Shell.WINDOWS &&\n          linkFile.getParentFile() != null &&\n          !new Path(target).isAbsolute()) {\n        // Relative links on Windows must be resolvable at the time of\n        // creation. To ensure this we run the shell command in the directory\n        // of the link.\n        //\n        shExec = new ShellCommandExecutor(cmd, linkFile.getParentFile());\n      } else {\n        shExec = new ShellCommandExecutor(cmd);\n      }\n      shExec.execute();\n    } catch (Shell.ExitCodeException ec) {\n      int returnVal = ec.getExitCode();\n      if (Shell.WINDOWS && returnVal == SYMLINK_NO_PRIVILEGE) {\n        LOG.warn(\"Fail to create symbolic links on Windows. \"\n            + \"The default security settings in Windows disallow non-elevated \"\n            + \"administrators and all non-administrators from creating symbolic links. \"\n            + \"This behavior can be changed in the Local Security Policy management console\");\n      } else if (returnVal != 0) {\n        LOG.warn(\"Command '\" + StringUtils.join(\" \", cmd) + \"' failed \"\n            + returnVal + \" with: \" + ec.getMessage());\n      }\n      return returnVal;\n    } catch (IOException e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Error while create symlink \" + linkname + \" to \" + target\n            + \".\" + \" Exception: \" + StringUtils.stringifyException(e));\n      }\n      throw e;\n    }\n    return shExec.getExitCode();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#symLink(String,String).mjava","pathOld":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#symLink(String,String).mjava","sourceNew":"  /**\n   * Create a soft link between a src and destination\n   * only on a local disk. HDFS does not support this.\n   * On Windows, when symlink creation fails due to security\n   * setting, we will log a warning. The return code in this\n   * case is 2.\n   *\n   * @param target the target for symlink\n   * @param linkname the symlink\n   * @return 0 on success\n   */\n  public static int symLink(String target, String linkname) throws IOException{\n\n    if (target == null || linkname == null) {\n      LOG.warn(\"Can not create a symLink with a target = {} and link = {}\", target, linkname);\n      return 1;\n    }\n\n    // Run the input paths through Java's File so that they are converted to the\n    // native OS form\n    File targetFile = new File(\n        Path.getPathWithoutSchemeAndAuthority(new Path(target)).toString());\n    File linkFile = new File(\n        Path.getPathWithoutSchemeAndAuthority(new Path(linkname)).toString());\n\n    String[] cmd = Shell.getSymlinkCommand(\n        targetFile.toString(),\n        linkFile.toString());\n\n    ShellCommandExecutor shExec;\n    try {\n      if (Shell.WINDOWS &&\n          linkFile.getParentFile() != null &&\n          !new Path(target).isAbsolute()) {\n        // Relative links on Windows must be resolvable at the time of\n        // creation. To ensure this we run the shell command in the directory\n        // of the link.\n        //\n        shExec = new ShellCommandExecutor(cmd, linkFile.getParentFile());\n      } else {\n        shExec = new ShellCommandExecutor(cmd);\n      }\n      shExec.execute();\n    } catch (Shell.ExitCodeException ec) {\n      int returnVal = ec.getExitCode();\n      if (Shell.WINDOWS && returnVal == SYMLINK_NO_PRIVILEGE) {\n        LOG.warn(\"Fail to create symbolic links on Windows. \"\n            + \"The default security settings in Windows disallow non-elevated \"\n            + \"administrators and all non-administrators from creating symbolic links. \"\n            + \"This behavior can be changed in the Local Security Policy management console\");\n      } else if (returnVal != 0) {\n        LOG.warn(\"Command '{}' failed {} with: {}\",StringUtils.join(\" \", cmd)\n            , returnVal, ec.getMessage());\n      }\n      return returnVal;\n    } catch (IOException e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Error while create symlink {} to {}. Exception: {}\", linkname, target, StringUtils.stringifyException(e));\n      }\n      throw e;\n    }\n    return shExec.getExitCode();\n  }\n\n","sourceOld":"  /**\n   * Create a soft link between a src and destination\n   * only on a local disk. HDFS does not support this.\n   * On Windows, when symlink creation fails due to security\n   * setting, we will log a warning. The return code in this\n   * case is 2.\n   *\n   * @param target the target for symlink\n   * @param linkname the symlink\n   * @return 0 on success\n   */\n  public static int symLink(String target, String linkname) throws IOException{\n\n    if (target == null || linkname == null) {\n      LOG.warn(\"Can not create a symLink with a target = \" + target\n          + \" and link =\" + linkname);\n      return 1;\n    }\n\n    // Run the input paths through Java's File so that they are converted to the\n    // native OS form\n    File targetFile = new File(\n        Path.getPathWithoutSchemeAndAuthority(new Path(target)).toString());\n    File linkFile = new File(\n        Path.getPathWithoutSchemeAndAuthority(new Path(linkname)).toString());\n\n    String[] cmd = Shell.getSymlinkCommand(\n        targetFile.toString(),\n        linkFile.toString());\n\n    ShellCommandExecutor shExec;\n    try {\n      if (Shell.WINDOWS &&\n          linkFile.getParentFile() != null &&\n          !new Path(target).isAbsolute()) {\n        // Relative links on Windows must be resolvable at the time of\n        // creation. To ensure this we run the shell command in the directory\n        // of the link.\n        //\n        shExec = new ShellCommandExecutor(cmd, linkFile.getParentFile());\n      } else {\n        shExec = new ShellCommandExecutor(cmd);\n      }\n      shExec.execute();\n    } catch (Shell.ExitCodeException ec) {\n      int returnVal = ec.getExitCode();\n      if (Shell.WINDOWS && returnVal == SYMLINK_NO_PRIVILEGE) {\n        LOG.warn(\"Fail to create symbolic links on Windows. \"\n            + \"The default security settings in Windows disallow non-elevated \"\n            + \"administrators and all non-administrators from creating symbolic links. \"\n            + \"This behavior can be changed in the Local Security Policy management console\");\n      } else if (returnVal != 0) {\n        LOG.warn(\"Command '\" + StringUtils.join(\" \", cmd) + \"' failed \"\n            + returnVal + \" with: \" + ec.getMessage());\n      }\n      return returnVal;\n    } catch (IOException e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Error while create symlink \" + linkname + \" to \" + target\n            + \".\" + \" Exception: \" + StringUtils.stringifyException(e));\n      }\n      throw e;\n    }\n    return shExec.getExitCode();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a229cb50768e988c50a2106bdae3a92154f428bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["6bdf107cf16be0f22504ae184fed81596665a244"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"a229cb50768e988c50a2106bdae3a92154f428bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}