{"path":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","commits":[{"id":"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe","date":1430750405,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void doIntegrationTest() throws Exception {\n    String rulesColl = \"rulesColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(rulesColl);\n      create.setNumShards(1);\n      create.setReplicationFactor(2);\n      create.setRule(\"cores:<4\", \"node:*,replica:1\", \"disk:>1\");\n      create.setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">1\", ((Map) list.get(2)).get(\"disk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4532ba8e59acd790546fd70dbf60086b24b2795c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4532ba8e59acd790546fd70dbf60086b24b2795c","date":1431009695,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","sourceNew":"  @Test\n  public void doIntegrationTest() throws Exception {\n    String rulesColl = \"rulesColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(rulesColl);\n      create.setNumShards(1);\n      create.setReplicationFactor(2);\n      create.setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>1\");\n      create.setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">1\", ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void doIntegrationTest() throws Exception {\n    String rulesColl = \"rulesColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(rulesColl);\n      create.setNumShards(1);\n      create.setReplicationFactor(2);\n      create.setRule(\"cores:<4\", \"node:*,replica:1\", \"disk:>1\");\n      create.setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">1\", ((Map) list.get(2)).get(\"disk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n  }\n\n","bugFix":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4fc24ecd353171e03bd016c1681cd97476015f","date":1432214672,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 5)\n  public void doIntegrationTest() throws Exception {\n    String rulesColl = \"rulesColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(rulesColl);\n      create.setShards(\"shard1\");\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setReplicationFactor(2);\n      create.setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>1\");\n      create.setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">1\", ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard();\n      createShard.setCollectionName(rulesColl);\n      createShard.setShardName(\"shard2\");\n      rsp = createShard.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(rulesColl);\n      addReplica.setShardName(\"shard2\");\n      rsp = createShard.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n    }\n\n\n  }\n\n","sourceOld":"  @Test\n  public void doIntegrationTest() throws Exception {\n    String rulesColl = \"rulesColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(rulesColl);\n      create.setNumShards(1);\n      create.setReplicationFactor(2);\n      create.setRule(\"cores:<4\", \"node:*,replica:1\", \"freedisk:>1\");\n      create.setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"1\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">1\", ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n  }\n\n","bugFix":null,"bugIntro":["c3f6e4b6ca9f7129a4f8bdac8692de05ebe44d68"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"182acd29cf4cb1644a02b8517f3a5b867c0d7cce","date":1432665213,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 5)\n  public void doIntegrationTest() throws Exception {\n    String rulesColl = \"rulesColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setShards(\"shard1\")\n              .setRouterName(ImplicitDocRouter.NAME)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>1\")\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">1\", ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = createShard.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = createShard.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n    }\n\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 5)\n  public void doIntegrationTest() throws Exception {\n    String rulesColl = \"rulesColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setCollectionName(rulesColl);\n      create.setShards(\"shard1\");\n      create.setRouterName(ImplicitDocRouter.NAME);\n      create.setReplicationFactor(2);\n      create.setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>1\");\n      create.setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">1\", ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard();\n      createShard.setCollectionName(rulesColl);\n      createShard.setShardName(\"shard2\");\n      rsp = createShard.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica();\n      addReplica.setCollectionName(rulesColl);\n      addReplica.setShardName(\"shard2\");\n      rsp = createShard.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3f6e4b6ca9f7129a4f8bdac8692de05ebe44d68","date":1434369345,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 5)\n  public void doIntegrationTest() throws Exception {\n    String rulesColl = \"rulesColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setShards(\"shard1\")\n              .setRouterName(ImplicitDocRouter.NAME)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>1\")\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">1\", ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = createShard.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = addReplica.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n    }\n\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 5)\n  public void doIntegrationTest() throws Exception {\n    String rulesColl = \"rulesColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setShards(\"shard1\")\n              .setRouterName(ImplicitDocRouter.NAME)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>1\")\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">1\", ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = createShard.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = createShard.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n    }\n\n\n  }\n\n","bugFix":["ec4fc24ecd353171e03bd016c1681cd97476015f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32107162655f090081799924aa5b12d561689fcc","date":1434560890,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 5)\n  public void doIntegrationTest() throws Exception {\n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB() > minGB);\n    String rulesColl = \"rulesColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setShards(\"shard1\")\n              .setRouterName(ImplicitDocRouter.NAME)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = createShard.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = addReplica.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n    }\n\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 5)\n  public void doIntegrationTest() throws Exception {\n    String rulesColl = \"rulesColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setShards(\"shard1\")\n              .setRouterName(ImplicitDocRouter.NAME)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>1\")\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">1\", ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = createShard.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = addReplica.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":["5a948b288c2cd2119f92c8c8d3c4c70ff31b2f7b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a948b288c2cd2119f92c8c8d3c4c70ff31b2f7b","date":1472818982,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 5)\n  public void doIntegrationTest() throws Exception {\n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB);\n    String rulesColl = \"rulesColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setShards(\"shard1\")\n              .setRouterName(ImplicitDocRouter.NAME)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = createShard.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = addReplica.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n    }\n\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 5)\n  public void doIntegrationTest() throws Exception {\n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB() > minGB);\n    String rulesColl = \"rulesColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setShards(\"shard1\")\n              .setRouterName(ImplicitDocRouter.NAME)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = createShard.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = addReplica.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n    }\n\n\n  }\n\n","bugFix":["32107162655f090081799924aa5b12d561689fcc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 5)\n  public void doIntegrationTest() throws Exception {\n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB);\n    String rulesColl = \"rulesColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setShards(\"shard1\")\n              .setRouterName(ImplicitDocRouter.NAME)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = createShard.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = addReplica.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n    }\n\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 5)\n  public void doIntegrationTest() throws Exception {\n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB() > minGB);\n    String rulesColl = \"rulesColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setShards(\"shard1\")\n              .setRouterName(ImplicitDocRouter.NAME)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = createShard.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = addReplica.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 5)\n  public void doIntegrationTest() throws Exception {\n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB);\n    String rulesColl = \"rulesColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setShards(\"shard1\")\n              .setRouterName(ImplicitDocRouter.NAME)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = createShard.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = addReplica.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n    }\n\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 5)\n  public void doIntegrationTest() throws Exception {\n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB() > minGB);\n    String rulesColl = \"rulesColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setShards(\"shard1\")\n              .setRouterName(ImplicitDocRouter.NAME)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = createShard.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = addReplica.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a02c54923e5f4de08097fa9028e09e8cf5caa82","date":1475573567,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","sourceNew":"  @Test\n  public void doIntegrationTest() throws Exception {\n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 5)\n  public void doIntegrationTest() throws Exception {\n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB);\n    String rulesColl = \"rulesColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setShards(\"shard1\")\n              .setRouterName(ImplicitDocRouter.NAME)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = createShard.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = addReplica.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","sourceNew":"  @Test\n  public void doIntegrationTest() throws Exception {\n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 5)\n  public void doIntegrationTest() throws Exception {\n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB);\n    String rulesColl = \"rulesColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setShards(\"shard1\")\n              .setRouterName(ImplicitDocRouter.NAME)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = createShard.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = addReplica.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"432ec497284686a1567bffcc0c843a8b9eaae57b","date":1475677162,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","sourceNew":"  @Test\n  public void doIntegrationTest() throws Exception {\n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n    CollectionAdminRequest.deleteCollection(rulesColl).process(cluster.getSolrClient());\n\n  }\n\n","sourceOld":"  @Test\n  public void doIntegrationTest() throws Exception {\n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82ac6146556cfb813fae76783544007fc3aaa34d","date":1476790432,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","sourceNew":"  @Test\n  public void doIntegrationTest() throws Exception {\n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n  }\n\n","sourceOld":"  @Test\n  public void doIntegrationTest() throws Exception {\n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n    CollectionAdminRequest.deleteCollection(rulesColl).process(cluster.getSolrClient());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","sourceNew":"  @Test\n  public void doIntegrationTest() throws Exception {\n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 5)\n  public void doIntegrationTest() throws Exception {\n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\", ImplicitSnitch.getUsableSpaceInGB() > minGB);\n    String rulesColl = \"rulesColl\";\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n              .setCollectionName(rulesColl)\n              .setShards(\"shard1\")\n              .setRouterName(ImplicitDocRouter.NAME)\n              .setReplicationFactor(2)\n              .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n              .setSnitch(\"class:ImplicitSnitch\");\n      rsp = create.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n    }\n\n    DocCollection rulesCollection = cloudClient.getZkStateReader().getClusterState().getCollection(rulesColl);\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      CollectionAdminResponse rsp;\n      CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = createShard.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n\n      CollectionAdminRequest.AddReplica addReplica = new CollectionAdminRequest.AddReplica()\n              .setCollectionName(rulesColl)\n              .setShardName(\"shard2\");\n      rsp = addReplica.process(client);\n      assertEquals(0, rsp.getStatus());\n      assertTrue(rsp.isSuccess());\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eade42881b2b73694a2b065cce4d6367a1870676","date":1564191666,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","sourceNew":"  @Test\n  public void doIntegrationTest() throws Exception {\n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n    \n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n    waitForState(\"Should have found shard1 w/2active replicas + shard2 w/1active replica\",\n                 rulesColl, (liveNodes, collection) -> {\n                   // short circut if collection is deleted\n                   // or we don't yet have the correct number of slices\n                   if (null == collection || 2 != collection.getSlices().size()) {\n                     return false;\n                   }\n                   for (Slice slice : collection.getSlices()) {\n                     // short circut if our slice isn't active\n                     if (Slice.State.ACTIVE != slice.getState()) {\n                       return false;\n                     }\n                     if (slice.getName().equals(\"shard1\")) {\n                       // for shard1, we should have 2 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (2 != liveReplicas.size()) {\n                         return false;\n                       }\n                     } else if (slice.getName().equals(\"shard2\")) {\n                       // for shard2, we should have 1 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (1 != liveReplicas.size()) {\n                         return false;\n                       }\n                     } else {\n                       // WTF?\n                       return false;\n                     }\n                   }\n                   return true;\n                 });\n  }\n\n","sourceOld":"  @Test\n  public void doIntegrationTest() throws Exception {\n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","sourceNew":"  @Test\n  public void doIntegrationTest() throws Exception {\n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n    \n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n    waitForState(\"Should have found shard1 w/2active replicas + shard2 w/1active replica\",\n                 rulesColl, (liveNodes, collection) -> {\n                   // short circut if collection is deleted\n                   // or we don't yet have the correct number of slices\n                   if (null == collection || 2 != collection.getSlices().size()) {\n                     return false;\n                   }\n                   for (Slice slice : collection.getSlices()) {\n                     // short circut if our slice isn't active\n                     if (Slice.State.ACTIVE != slice.getState()) {\n                       return false;\n                     }\n                     if (slice.getName().equals(\"shard1\")) {\n                       // for shard1, we should have 2 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (2 != liveReplicas.size()) {\n                         return false;\n                       }\n                     } else if (slice.getName().equals(\"shard2\")) {\n                       // for shard2, we should have 1 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (1 != liveReplicas.size()) {\n                         return false;\n                       }\n                     } else {\n                       // WTF?\n                       return false;\n                     }\n                   }\n                   return true;\n                 });\n  }\n\n","sourceOld":"  @Test\n  public void doIntegrationTest() throws Exception {\n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n\n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6283008aafdc2a56c55b62305f66111760eb27b","date":1565050108,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","sourceNew":"  @Test\n  public void doIntegrationTest() throws Exception {\n    assertEquals(\"Sanity Check: someone changed the cluster; \" +\n                 \"test logic requires specific number of jetty nodes\",\n                 5, cluster.getJettySolrRunners().size());\n    \n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n    \n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n    waitForState(\"Should have found shard1 w/2active replicas + shard2 w/1active replica\",\n                 rulesColl, (liveNodes, collection) -> {\n                   // short circut if collection is deleted\n                   // or we don't yet have the correct number of slices\n                   if (null == collection || 2 != collection.getSlices().size()) {\n                     return false;\n                   }\n                   final Set<String> replicaNodes = new HashSet<>();\n                   for (Slice slice : collection.getSlices()) {\n                     // short circut if our slice isn't active\n                     if (Slice.State.ACTIVE != slice.getState()) {\n                       return false;\n                     }\n                     if (slice.getName().equals(\"shard1\")) {\n                       // for shard1, we should have 2 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (2 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else if (slice.getName().equals(\"shard2\")) {\n                       // for shard2, we should have 3 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (3 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else {\n                       // WTF?\n                       return false;\n                     }\n                   }\n                   // now sanity check that the rules were *obeyed* and\n                   // each replica is on a unique node\n                   return 5 == replicaNodes.size();\n                 });\n\n    // adding an additional replica should fail since our rule says at most one replica\n    // per node, and we know every node already has one replica\n    expectedException.expect(HttpSolrClient.RemoteSolrException.class);\n    expectedException.expectMessage(containsString(\"current number of eligible live nodes 0\"));\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    \n  }\n\n","sourceOld":"  @Test\n  public void doIntegrationTest() throws Exception {\n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n    \n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n    waitForState(\"Should have found shard1 w/2active replicas + shard2 w/1active replica\",\n                 rulesColl, (liveNodes, collection) -> {\n                   // short circut if collection is deleted\n                   // or we don't yet have the correct number of slices\n                   if (null == collection || 2 != collection.getSlices().size()) {\n                     return false;\n                   }\n                   for (Slice slice : collection.getSlices()) {\n                     // short circut if our slice isn't active\n                     if (Slice.State.ACTIVE != slice.getState()) {\n                       return false;\n                     }\n                     if (slice.getName().equals(\"shard1\")) {\n                       // for shard1, we should have 2 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (2 != liveReplicas.size()) {\n                         return false;\n                       }\n                     } else if (slice.getName().equals(\"shard2\")) {\n                       // for shard2, we should have 1 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (1 != liveReplicas.size()) {\n                         return false;\n                       }\n                     } else {\n                       // WTF?\n                       return false;\n                     }\n                   }\n                   return true;\n                 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","sourceNew":"  @Test\n  public void doIntegrationTest() throws Exception {\n    assertEquals(\"Sanity Check: someone changed the cluster; \" +\n                 \"test logic requires specific number of jetty nodes\",\n                 5, cluster.getJettySolrRunners().size());\n    \n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n    \n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n    waitForState(\"Should have found shard1 w/2active replicas + shard2 w/1active replica\",\n                 rulesColl, (liveNodes, collection) -> {\n                   // short circut if collection is deleted\n                   // or we don't yet have the correct number of slices\n                   if (null == collection || 2 != collection.getSlices().size()) {\n                     return false;\n                   }\n                   final Set<String> replicaNodes = new HashSet<>();\n                   for (Slice slice : collection.getSlices()) {\n                     // short circut if our slice isn't active\n                     if (Slice.State.ACTIVE != slice.getState()) {\n                       return false;\n                     }\n                     if (slice.getName().equals(\"shard1\")) {\n                       // for shard1, we should have 2 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (2 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else if (slice.getName().equals(\"shard2\")) {\n                       // for shard2, we should have 3 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (3 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else {\n                       // WTF?\n                       return false;\n                     }\n                   }\n                   // now sanity check that the rules were *obeyed* and\n                   // each replica is on a unique node\n                   return 5 == replicaNodes.size();\n                 });\n\n    // adding an additional replica should fail since our rule says at most one replica\n    // per node, and we know every node already has one replica\n    expectedException.expect(HttpSolrClient.RemoteSolrException.class);\n    expectedException.expectMessage(containsString(\"current number of eligible live nodes 0\"));\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    \n  }\n\n","sourceOld":"  @Test\n  public void doIntegrationTest() throws Exception {\n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n    \n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n    waitForState(\"Should have found shard1 w/2active replicas + shard2 w/1active replica\",\n                 rulesColl, (liveNodes, collection) -> {\n                   // short circut if collection is deleted\n                   // or we don't yet have the correct number of slices\n                   if (null == collection || 2 != collection.getSlices().size()) {\n                     return false;\n                   }\n                   for (Slice slice : collection.getSlices()) {\n                     // short circut if our slice isn't active\n                     if (Slice.State.ACTIVE != slice.getState()) {\n                       return false;\n                     }\n                     if (slice.getName().equals(\"shard1\")) {\n                       // for shard1, we should have 2 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (2 != liveReplicas.size()) {\n                         return false;\n                       }\n                     } else if (slice.getName().equals(\"shard2\")) {\n                       // for shard2, we should have 1 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (1 != liveReplicas.size()) {\n                         return false;\n                       }\n                     } else {\n                       // WTF?\n                       return false;\n                     }\n                   }\n                   return true;\n                 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5bcf88d0563d08e5b68c127842dd8e7d7e81338","date":1575519379,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","sourceNew":"  @Test\n  public void doIntegrationTest() throws Exception {\n    assertEquals(\"Sanity Check: someone changed the cluster; \" +\n                 \"test logic requires specific number of jetty nodes\",\n                 5, cluster.getJettySolrRunners().size());\n    \n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    final Path toTest = Paths.get(\"\").toAbsolutePath();\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(toTest) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n    \n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n    waitForState(\"Should have found shard1 w/2active replicas + shard2 w/1active replica\",\n                 rulesColl, (liveNodes, collection) -> {\n                   // short circut if collection is deleted\n                   // or we don't yet have the correct number of slices\n                   if (null == collection || 2 != collection.getSlices().size()) {\n                     return false;\n                   }\n                   final Set<String> replicaNodes = new HashSet<>();\n                   for (Slice slice : collection.getSlices()) {\n                     // short circut if our slice isn't active\n                     if (Slice.State.ACTIVE != slice.getState()) {\n                       return false;\n                     }\n                     if (slice.getName().equals(\"shard1\")) {\n                       // for shard1, we should have 2 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (2 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else if (slice.getName().equals(\"shard2\")) {\n                       // for shard2, we should have 3 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (3 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else {\n                       // WTF?\n                       return false;\n                     }\n                   }\n                   // now sanity check that the rules were *obeyed* and\n                   // each replica is on a unique node\n                   return 5 == replicaNodes.size();\n                 });\n\n    // adding an additional replica should fail since our rule says at most one replica\n    // per node, and we know every node already has one replica\n    expectedException.expect(HttpSolrClient.RemoteSolrException.class);\n    expectedException.expectMessage(containsString(\"current number of eligible live nodes 0\"));\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    \n  }\n\n","sourceOld":"  @Test\n  public void doIntegrationTest() throws Exception {\n    assertEquals(\"Sanity Check: someone changed the cluster; \" +\n                 \"test logic requires specific number of jetty nodes\",\n                 5, cluster.getJettySolrRunners().size());\n    \n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n    \n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n    waitForState(\"Should have found shard1 w/2active replicas + shard2 w/1active replica\",\n                 rulesColl, (liveNodes, collection) -> {\n                   // short circut if collection is deleted\n                   // or we don't yet have the correct number of slices\n                   if (null == collection || 2 != collection.getSlices().size()) {\n                     return false;\n                   }\n                   final Set<String> replicaNodes = new HashSet<>();\n                   for (Slice slice : collection.getSlices()) {\n                     // short circut if our slice isn't active\n                     if (Slice.State.ACTIVE != slice.getState()) {\n                       return false;\n                     }\n                     if (slice.getName().equals(\"shard1\")) {\n                       // for shard1, we should have 2 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (2 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else if (slice.getName().equals(\"shard2\")) {\n                       // for shard2, we should have 3 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (3 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else {\n                       // WTF?\n                       return false;\n                     }\n                   }\n                   // now sanity check that the rules were *obeyed* and\n                   // each replica is on a unique node\n                   return 5 == replicaNodes.size();\n                 });\n\n    // adding an additional replica should fail since our rule says at most one replica\n    // per node, and we know every node already has one replica\n    expectedException.expect(HttpSolrClient.RemoteSolrException.class);\n    expectedException.expectMessage(containsString(\"current number of eligible live nodes 0\"));\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a90f561fc609ec007ba18b10dea9191dbbd71831","date":1575541054,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","sourceNew":"  @Test\n  public void doIntegrationTest() throws Exception {\n    assertEquals(\"Sanity Check: someone changed the cluster; \" +\n                 \"test logic requires specific number of jetty nodes\",\n                 5, cluster.getJettySolrRunners().size());\n    \n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    final Path toTest = Paths.get(\"\").toAbsolutePath();\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(toTest) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n    \n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n    waitForState(\"Should have found shard1 w/2active replicas + shard2 w/1active replica\",\n                 rulesColl, (liveNodes, collection) -> {\n                   // short circut if collection is deleted\n                   // or we don't yet have the correct number of slices\n                   if (null == collection || 2 != collection.getSlices().size()) {\n                     return false;\n                   }\n                   final Set<String> replicaNodes = new HashSet<>();\n                   for (Slice slice : collection.getSlices()) {\n                     // short circut if our slice isn't active\n                     if (Slice.State.ACTIVE != slice.getState()) {\n                       return false;\n                     }\n                     if (slice.getName().equals(\"shard1\")) {\n                       // for shard1, we should have 2 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (2 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else if (slice.getName().equals(\"shard2\")) {\n                       // for shard2, we should have 3 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (3 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else {\n                       // WTF?\n                       return false;\n                     }\n                   }\n                   // now sanity check that the rules were *obeyed* and\n                   // each replica is on a unique node\n                   return 5 == replicaNodes.size();\n                 });\n\n    // adding an additional replica should fail since our rule says at most one replica\n    // per node, and we know every node already has one replica\n    expectedException.expect(HttpSolrClient.RemoteSolrException.class);\n    expectedException.expectMessage(containsString(\"current number of eligible live nodes 0\"));\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    \n  }\n\n","sourceOld":"  @Test\n  public void doIntegrationTest() throws Exception {\n    assertEquals(\"Sanity Check: someone changed the cluster; \" +\n                 \"test logic requires specific number of jetty nodes\",\n                 5, cluster.getJettySolrRunners().size());\n    \n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(Paths.get(\"/\")) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n    \n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n    waitForState(\"Should have found shard1 w/2active replicas + shard2 w/1active replica\",\n                 rulesColl, (liveNodes, collection) -> {\n                   // short circut if collection is deleted\n                   // or we don't yet have the correct number of slices\n                   if (null == collection || 2 != collection.getSlices().size()) {\n                     return false;\n                   }\n                   final Set<String> replicaNodes = new HashSet<>();\n                   for (Slice slice : collection.getSlices()) {\n                     // short circut if our slice isn't active\n                     if (Slice.State.ACTIVE != slice.getState()) {\n                       return false;\n                     }\n                     if (slice.getName().equals(\"shard1\")) {\n                       // for shard1, we should have 2 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (2 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else if (slice.getName().equals(\"shard2\")) {\n                       // for shard2, we should have 3 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (3 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else {\n                       // WTF?\n                       return false;\n                     }\n                   }\n                   // now sanity check that the rules were *obeyed* and\n                   // each replica is on a unique node\n                   return 5 == replicaNodes.size();\n                 });\n\n    // adding an additional replica should fail since our rule says at most one replica\n    // per node, and we know every node already has one replica\n    expectedException.expect(HttpSolrClient.RemoteSolrException.class);\n    expectedException.expectMessage(containsString(\"current number of eligible live nodes 0\"));\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","sourceNew":"  @Test\n  public void doIntegrationTest() throws Exception {\n    assertEquals(\"Sanity Check: someone changed the cluster; \" +\n                 \"test logic requires specific number of jetty nodes\",\n                 5, cluster.getJettySolrRunners().size());\n    \n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    final Path toTest = Paths.get(\"\").toAbsolutePath();\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(toTest) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n    \n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n    waitForState(\"Should have found shard1 w/2active replicas + shard2 w/1active replica\",\n                 rulesColl, (liveNodes, collection) -> {\n                   // short circut if collection is deleted\n                   // or we don't yet have the correct number of slices\n                   if (null == collection || 2 != collection.getSlices().size()) {\n                     return false;\n                   }\n                   final Set<String> replicaNodes = new HashSet<>();\n                   for (Slice slice : collection.getSlices()) {\n                     // short circut if our slice isn't active\n                     if (Slice.State.ACTIVE != slice.getState()) {\n                       return false;\n                     }\n                     if (slice.getName().equals(\"shard1\")) {\n                       // for shard1, we should have 2 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (2 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else if (slice.getName().equals(\"shard2\")) {\n                       // for shard2, we should have 3 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (3 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else {\n                       // WTF?\n                       return false;\n                     }\n                   }\n                   // now sanity check that the rules were *obeyed* and\n                   // each replica is on a unique node\n                   return 5 == replicaNodes.size();\n                 });\n\n    // adding an additional replica should fail since our rule says at most one replica\n    // per node, and we know every node already has one replica\n    expectedException.expect(BaseHttpSolrClient.RemoteSolrException.class);\n    expectedException.expectMessage(containsString(\"current number of eligible live nodes 0\"));\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    \n  }\n\n","sourceOld":"  @Test\n  public void doIntegrationTest() throws Exception {\n    assertEquals(\"Sanity Check: someone changed the cluster; \" +\n                 \"test logic requires specific number of jetty nodes\",\n                 5, cluster.getJettySolrRunners().size());\n    \n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    final Path toTest = Paths.get(\"\").toAbsolutePath();\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(toTest) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n    \n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n    waitForState(\"Should have found shard1 w/2active replicas + shard2 w/1active replica\",\n                 rulesColl, (liveNodes, collection) -> {\n                   // short circut if collection is deleted\n                   // or we don't yet have the correct number of slices\n                   if (null == collection || 2 != collection.getSlices().size()) {\n                     return false;\n                   }\n                   final Set<String> replicaNodes = new HashSet<>();\n                   for (Slice slice : collection.getSlices()) {\n                     // short circut if our slice isn't active\n                     if (Slice.State.ACTIVE != slice.getState()) {\n                       return false;\n                     }\n                     if (slice.getName().equals(\"shard1\")) {\n                       // for shard1, we should have 2 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (2 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else if (slice.getName().equals(\"shard2\")) {\n                       // for shard2, we should have 3 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (3 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else {\n                       // WTF?\n                       return false;\n                     }\n                   }\n                   // now sanity check that the rules were *obeyed* and\n                   // each replica is on a unique node\n                   return 5 == replicaNodes.size();\n                 });\n\n    // adding an additional replica should fail since our rule says at most one replica\n    // per node, and we know every node already has one replica\n    expectedException.expect(HttpSolrClient.RemoteSolrException.class);\n    expectedException.expectMessage(containsString(\"current number of eligible live nodes 0\"));\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","sourceNew":"  @Test\n  public void doIntegrationTest() throws Exception {\n    assertEquals(\"Sanity Check: someone changed the cluster; \" +\n                 \"test logic requires specific number of jetty nodes\",\n                 5, cluster.getJettySolrRunners().size());\n    \n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    final Path toTest = Paths.get(\"\").toAbsolutePath();\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(toTest) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n    \n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    @SuppressWarnings({\"rawtypes\"})\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n    waitForState(\"Should have found shard1 w/2active replicas + shard2 w/1active replica\",\n                 rulesColl, (liveNodes, collection) -> {\n                   // short circut if collection is deleted\n                   // or we don't yet have the correct number of slices\n                   if (null == collection || 2 != collection.getSlices().size()) {\n                     return false;\n                   }\n                   final Set<String> replicaNodes = new HashSet<>();\n                   for (Slice slice : collection.getSlices()) {\n                     // short circut if our slice isn't active\n                     if (Slice.State.ACTIVE != slice.getState()) {\n                       return false;\n                     }\n                     if (slice.getName().equals(\"shard1\")) {\n                       // for shard1, we should have 2 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (2 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else if (slice.getName().equals(\"shard2\")) {\n                       // for shard2, we should have 3 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (3 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else {\n                       // WTF?\n                       return false;\n                     }\n                   }\n                   // now sanity check that the rules were *obeyed* and\n                   // each replica is on a unique node\n                   return 5 == replicaNodes.size();\n                 });\n\n    // adding an additional replica should fail since our rule says at most one replica\n    // per node, and we know every node already has one replica\n    expectedException.expect(BaseHttpSolrClient.RemoteSolrException.class);\n    expectedException.expectMessage(containsString(\"current number of eligible live nodes 0\"));\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    \n  }\n\n","sourceOld":"  @Test\n  public void doIntegrationTest() throws Exception {\n    assertEquals(\"Sanity Check: someone changed the cluster; \" +\n                 \"test logic requires specific number of jetty nodes\",\n                 5, cluster.getJettySolrRunners().size());\n    \n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    final Path toTest = Paths.get(\"\").toAbsolutePath();\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(toTest) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n    \n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n    waitForState(\"Should have found shard1 w/2active replicas + shard2 w/1active replica\",\n                 rulesColl, (liveNodes, collection) -> {\n                   // short circut if collection is deleted\n                   // or we don't yet have the correct number of slices\n                   if (null == collection || 2 != collection.getSlices().size()) {\n                     return false;\n                   }\n                   final Set<String> replicaNodes = new HashSet<>();\n                   for (Slice slice : collection.getSlices()) {\n                     // short circut if our slice isn't active\n                     if (Slice.State.ACTIVE != slice.getState()) {\n                       return false;\n                     }\n                     if (slice.getName().equals(\"shard1\")) {\n                       // for shard1, we should have 2 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (2 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else if (slice.getName().equals(\"shard2\")) {\n                       // for shard2, we should have 3 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (3 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else {\n                       // WTF?\n                       return false;\n                     }\n                   }\n                   // now sanity check that the rules were *obeyed* and\n                   // each replica is on a unique node\n                   return 5 == replicaNodes.size();\n                 });\n\n    // adding an additional replica should fail since our rule says at most one replica\n    // per node, and we know every node already has one replica\n    expectedException.expect(BaseHttpSolrClient.RemoteSolrException.class);\n    expectedException.expectMessage(containsString(\"current number of eligible live nodes 0\"));\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/rule/RulesTest#doIntegrationTest().mjava","sourceNew":"  @Test\n  public void doIntegrationTest() throws Exception {\n    assertEquals(\"Sanity Check: someone changed the cluster; \" +\n                 \"test logic requires specific number of jetty nodes\",\n                 5, cluster.getJettySolrRunners().size());\n    \n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    final Path toTest = Paths.get(\"\").toAbsolutePath();\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(toTest) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n    \n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    @SuppressWarnings({\"rawtypes\"})\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n    waitForState(\"Should have found shard1 w/2active replicas + shard2 w/1active replica\",\n                 rulesColl, (liveNodes, collection) -> {\n                   // short circut if collection is deleted\n                   // or we don't yet have the correct number of slices\n                   if (null == collection || 2 != collection.getSlices().size()) {\n                     return false;\n                   }\n                   final Set<String> replicaNodes = new HashSet<>();\n                   for (Slice slice : collection.getSlices()) {\n                     // short circut if our slice isn't active\n                     if (Slice.State.ACTIVE != slice.getState()) {\n                       return false;\n                     }\n                     if (slice.getName().equals(\"shard1\")) {\n                       // for shard1, we should have 2 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (2 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else if (slice.getName().equals(\"shard2\")) {\n                       // for shard2, we should have 3 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (3 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else {\n                       // WTF?\n                       return false;\n                     }\n                   }\n                   // now sanity check that the rules were *obeyed* and\n                   // each replica is on a unique node\n                   return 5 == replicaNodes.size();\n                 });\n\n    // adding an additional replica should fail since our rule says at most one replica\n    // per node, and we know every node already has one replica\n    expectedException.expect(BaseHttpSolrClient.RemoteSolrException.class);\n    expectedException.expectMessage(containsString(\"Could not identify nodes matching the rules\"));\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    \n  }\n\n","sourceOld":"  @Test\n  public void doIntegrationTest() throws Exception {\n    assertEquals(\"Sanity Check: someone changed the cluster; \" +\n                 \"test logic requires specific number of jetty nodes\",\n                 5, cluster.getJettySolrRunners().size());\n    \n    final long minGB = (random().nextBoolean() ? 1 : 0);\n    final Path toTest = Paths.get(\"\").toAbsolutePath();\n    assumeTrue(\"doIntegrationTest needs minGB=\"+minGB+\" usable disk space\",\n        ImplicitSnitch.getUsableSpaceInGB(toTest) > minGB);\n\n    String rulesColl = \"rulesColl\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, \"conf\", \"shard1\", 2)\n        .setRule(\"cores:<4\", \"node:*,replica:<2\", \"freedisk:>\"+minGB)\n        .setSnitch(\"class:ImplicitSnitch\")\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(rulesColl, 1, 2);\n    \n    DocCollection rulesCollection = getCollectionState(rulesColl);\n\n    @SuppressWarnings({\"rawtypes\"})\n    List list = (List) rulesCollection.get(\"rule\");\n    assertEquals(3, list.size());\n    assertEquals ( \"<4\", ((Map)list.get(0)).get(\"cores\"));\n    assertEquals(\"<2\", ((Map) list.get(1)).get(\"replica\"));\n    assertEquals(\">\"+minGB, ((Map) list.get(2)).get(\"freedisk\"));\n    list = (List) rulesCollection.get(\"snitch\");\n    assertEquals(1, list.size());\n    assertEquals ( \"ImplicitSnitch\", ((Map)list.get(0)).get(\"class\"));\n\n    CollectionAdminRequest.createShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n\n    waitForState(\"Should have found shard1 w/2active replicas + shard2 w/1active replica\",\n                 rulesColl, (liveNodes, collection) -> {\n                   // short circut if collection is deleted\n                   // or we don't yet have the correct number of slices\n                   if (null == collection || 2 != collection.getSlices().size()) {\n                     return false;\n                   }\n                   final Set<String> replicaNodes = new HashSet<>();\n                   for (Slice slice : collection.getSlices()) {\n                     // short circut if our slice isn't active\n                     if (Slice.State.ACTIVE != slice.getState()) {\n                       return false;\n                     }\n                     if (slice.getName().equals(\"shard1\")) {\n                       // for shard1, we should have 2 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (2 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else if (slice.getName().equals(\"shard2\")) {\n                       // for shard2, we should have 3 fully live replicas\n                       final List<Replica> liveReplicas = slice.getReplicas\n                         ((r) -> r.isActive(liveNodes));\n                       if (3 != liveReplicas.size()) {\n                         return false;\n                       }\n                       replicaNodes.addAll(liveReplicas.stream().map\n                                           (Replica::getNodeName).collect(Collectors.toList()));\n                     } else {\n                       // WTF?\n                       return false;\n                     }\n                   }\n                   // now sanity check that the rules were *obeyed* and\n                   // each replica is on a unique node\n                   return 5 == replicaNodes.size();\n                 });\n\n    // adding an additional replica should fail since our rule says at most one replica\n    // per node, and we know every node already has one replica\n    expectedException.expect(BaseHttpSolrClient.RemoteSolrException.class);\n    expectedException.expectMessage(containsString(\"current number of eligible live nodes 0\"));\n    CollectionAdminRequest.addReplicaToShard(rulesColl, \"shard2\").process(cluster.getSolrClient());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1967bed916cc89da82a1c2085f27976da6d08cbd":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"a90f561fc609ec007ba18b10dea9191dbbd71831":["a6283008aafdc2a56c55b62305f66111760eb27b","e5bcf88d0563d08e5b68c127842dd8e7d7e81338"],"a6283008aafdc2a56c55b62305f66111760eb27b":["eade42881b2b73694a2b065cce4d6367a1870676"],"82ac6146556cfb813fae76783544007fc3aaa34d":["432ec497284686a1567bffcc0c843a8b9eaae57b"],"bc8f206328a706450934717bec7ccc22ad166fc0":["32107162655f090081799924aa5b12d561689fcc","5a948b288c2cd2119f92c8c8d3c4c70ff31b2f7b"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["db96734b79e26d948b59f68bd4564c4836a71acf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["32107162655f090081799924aa5b12d561689fcc","5a948b288c2cd2119f92c8c8d3c4c70ff31b2f7b"],"4532ba8e59acd790546fd70dbf60086b24b2795c":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["eade42881b2b73694a2b065cce4d6367a1870676","a6283008aafdc2a56c55b62305f66111760eb27b"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"5a948b288c2cd2119f92c8c8d3c4c70ff31b2f7b":["32107162655f090081799924aa5b12d561689fcc"],"32107162655f090081799924aa5b12d561689fcc":["c3f6e4b6ca9f7129a4f8bdac8692de05ebe44d68"],"ec4fc24ecd353171e03bd016c1681cd97476015f":["4532ba8e59acd790546fd70dbf60086b24b2795c"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["82ac6146556cfb813fae76783544007fc3aaa34d","eade42881b2b73694a2b065cce4d6367a1870676"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["32107162655f090081799924aa5b12d561689fcc","82ac6146556cfb813fae76783544007fc3aaa34d"],"eade42881b2b73694a2b065cce4d6367a1870676":["82ac6146556cfb813fae76783544007fc3aaa34d"],"c3f6e4b6ca9f7129a4f8bdac8692de05ebe44d68":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"432ec497284686a1567bffcc0c843a8b9eaae57b":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"db96734b79e26d948b59f68bd4564c4836a71acf":["e5bcf88d0563d08e5b68c127842dd8e7d7e81338"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["ec4fc24ecd353171e03bd016c1681cd97476015f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e5bcf88d0563d08e5b68c127842dd8e7d7e81338":["a6283008aafdc2a56c55b62305f66111760eb27b"]},"commit2Childs":{"1967bed916cc89da82a1c2085f27976da6d08cbd":["432ec497284686a1567bffcc0c843a8b9eaae57b"],"a90f561fc609ec007ba18b10dea9191dbbd71831":[],"a6283008aafdc2a56c55b62305f66111760eb27b":["a90f561fc609ec007ba18b10dea9191dbbd71831","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","e5bcf88d0563d08e5b68c127842dd8e7d7e81338"],"82ac6146556cfb813fae76783544007fc3aaa34d":["f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","eade42881b2b73694a2b065cce4d6367a1870676"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["1967bed916cc89da82a1c2085f27976da6d08cbd","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"4532ba8e59acd790546fd70dbf60086b24b2795c":["ec4fc24ecd353171e03bd016c1681cd97476015f"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"5a948b288c2cd2119f92c8c8d3c4c70ff31b2f7b":["bc8f206328a706450934717bec7ccc22ad166fc0","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"32107162655f090081799924aa5b12d561689fcc":["bc8f206328a706450934717bec7ccc22ad166fc0","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","5a948b288c2cd2119f92c8c8d3c4c70ff31b2f7b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ec4fc24ecd353171e03bd016c1681cd97476015f":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["4532ba8e59acd790546fd70dbf60086b24b2795c"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"eade42881b2b73694a2b065cce4d6367a1870676":["a6283008aafdc2a56c55b62305f66111760eb27b","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"c3f6e4b6ca9f7129a4f8bdac8692de05ebe44d68":["32107162655f090081799924aa5b12d561689fcc"],"432ec497284686a1567bffcc0c843a8b9eaae57b":["82ac6146556cfb813fae76783544007fc3aaa34d"],"db96734b79e26d948b59f68bd4564c4836a71acf":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["c3f6e4b6ca9f7129a4f8bdac8692de05ebe44d68"],"e5bcf88d0563d08e5b68c127842dd8e7d7e81338":["a90f561fc609ec007ba18b10dea9191dbbd71831","db96734b79e26d948b59f68bd4564c4836a71acf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a90f561fc609ec007ba18b10dea9191dbbd71831","bc8f206328a706450934717bec7ccc22ad166fc0","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}