{"path":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<String>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<String>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<String>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<String>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<String>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newField(fieldName, \"\" + term, StringField.TYPE_STORED));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<String>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<String>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    assumeTrue(\"requires support for missing values\", defaultCodecSupportsMissingDocValues());\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      doc.add(new SortedDocValuesField(fieldName, new BytesRef(\"\" + term)));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    assumeTrue(\"requires support for missing values\", defaultCodecSupportsMissingDocValues());\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      doc.add(new SortedDocValuesField(fieldName, new BytesRef(\"\" + term)));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    assumeTrue(\"requires support for missing values\", defaultCodecSupportsMissingDocValues());\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      doc.add(new SortedDocValuesField(fieldName, new BytesRef(\"\" + term)));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    assumeTrue(\"requires support for missing values\", defaultCodecSupportsMissingDocValues());\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      doc.add(new SortedDocValuesField(fieldName, new BytesRef(\"\" + term)));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    assumeTrue(\"requires support for missing values\", defaultCodecSupportsMissingDocValues());\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      doc.add(new SortedDocValuesField(fieldName, new BytesRef(\"\" + term)));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    assumeTrue(\"requires support for missing values\", defaultCodecSupportsMissingDocValues());\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      doc.add(new SortedDocValuesField(fieldName, new BytesRef(\"\" + term)));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    assumeTrue(\"requires support for missing values\", defaultCodecSupportsMissingDocValues());\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      doc.add(new SortedDocValuesField(fieldName, new BytesRef(\"\" + term)));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.shutdown();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad2a673349939e48652bf304cccf673c3412198f","date":1409585169,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      doc.add(new SortedDocValuesField(fieldName, new BytesRef(\"\" + term)));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    assumeTrue(\"requires support for missing values\", defaultCodecSupportsMissingDocValues());\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      doc.add(new SortedDocValuesField(fieldName, new BytesRef(\"\" + term)));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      doc.add(new SortedDocValuesField(fieldName, new BytesRef(\"\" + term)));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    assumeTrue(\"requires support for missing values\", defaultCodecSupportsMissingDocValues());\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      doc.add(new SortedDocValuesField(fieldName, new BytesRef(\"\" + term)));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      doc.add(new SortedDocValuesField(fieldName, new BytesRef(\"\" + term)));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(new FilteredQuery(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0]))), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(new FilteredQuery(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0]))), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(new FilteredQuery(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0]))), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      doc.add(new SortedDocValuesField(fieldName, new BytesRef(\"\" + term)));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87fab14adebb5b490363c9bc05f747938bd15e6a","date":1424877964,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      doc.add(new SortedDocValuesField(fieldName, new BytesRef(\"\" + term)));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(new DocValuesTermsQuery(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(new DocValuesTermsQuery(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(new DocValuesTermsQuery(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      doc.add(new SortedDocValuesField(fieldName, new BytesRef(\"\" + term)));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(new FilteredQuery(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0]))), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(new FilteredQuery(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0]))), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(new FilteredQuery(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0]))), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      doc.add(new SortedDocValuesField(fieldName, new BytesRef(\"\" + term)));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(new DocValuesTermsQuery(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(new DocValuesTermsQuery(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(new DocValuesTermsQuery(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      doc.add(new SortedDocValuesField(fieldName, new BytesRef(\"\" + term)));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(new FilteredQuery(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0]))), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(new FilteredQuery(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0]))), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(new FilteredQuery(q, new DocValuesTermsFilter(fieldName,  terms.toArray(new String[0]))), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fb0efe75e5c6021561f115dfe334b74786364ba","date":1434366074,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      doc.add(new SortedDocValuesField(fieldName, new BytesRef(\"\" + term)));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(new DocValuesTermsQuery(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(new DocValuesTermsQuery(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(new DocValuesTermsQuery(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    Directory rd = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), rd);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(newStringField(fieldName, \"\" + term, Field.Store.YES));\n      doc.add(new SortedDocValuesField(fieldName, new BytesRef(\"\" + term)));\n      w.addDocument(doc);\n    }\n    IndexReader reader = w.getReader();\n    w.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n\n    List<String> terms = new ArrayList<>();\n    terms.add(\"5\");\n    results = searcher.search(new DocValuesTermsQuery(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    results = searcher.search(new DocValuesTermsQuery(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(new DocValuesTermsQuery(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"9274621789ce990dbfef455dabdf026bb3184821":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["d0ef034a4f10871667ae75181537775ddcf8ade4","ad2a673349939e48652bf304cccf673c3412198f"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","87fab14adebb5b490363c9bc05f747938bd15e6a"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","9274621789ce990dbfef455dabdf026bb3184821"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["87fab14adebb5b490363c9bc05f747938bd15e6a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ad2a673349939e48652bf304cccf673c3412198f":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"87fab14adebb5b490363c9bc05f747938bd15e6a":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fb0efe75e5c6021561f115dfe334b74786364ba"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["9274621789ce990dbfef455dabdf026bb3184821"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","87fab14adebb5b490363c9bc05f747938bd15e6a"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","ad2a673349939e48652bf304cccf673c3412198f"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad2a673349939e48652bf304cccf673c3412198f":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"87fab14adebb5b490363c9bc05f747938bd15e6a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9fb0efe75e5c6021561f115dfe334b74786364ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}