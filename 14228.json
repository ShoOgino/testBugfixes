{"path":"lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase#encodeTerm(DataOutput,FieldInfo,BlockTermState,boolean).mjava","commits":[{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase#encodeTerm(DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  /**\n   * Encode metadata as long[] and byte[]. {@code absolute} controls whether \n   * current term is delta encoded according to latest term. \n   * Usually elements in {@code longs} are file pointers, so each one always \n   * increases when a new term is consumed. {@code out} is used to write generic\n   * bytes, which are not monotonic.\n   */\n  public abstract void encodeTerm(DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;\n\n","sourceOld":"  /**\n   * Encode metadata as long[] and byte[]. {@code absolute} controls whether \n   * current term is delta encoded according to latest term. \n   * Usually elements in {@code longs} are file pointers, so each one always \n   * increases when a new term is consumed. {@code out} is used to write generic\n   * bytes, which are not monotonic.\n   *\n   * NOTE: sometimes long[] might contain \"don't care\" values that are unused, e.g. \n   * the pointer to postings list may not be defined for some terms but is defined\n   * for others, if it is designed to inline  some postings data in term dictionary.\n   * In this case, the postings writer should always use the last value, so that each\n   * element in metadata long[] remains monotonic.\n   */\n  public abstract void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase#encodeTerm(DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  /**\n   * Encode metadata as long[] and byte[]. {@code absolute} controls whether \n   * current term is delta encoded according to latest term. \n   * Usually elements in {@code longs} are file pointers, so each one always \n   * increases when a new term is consumed. {@code out} is used to write generic\n   * bytes, which are not monotonic.\n   *\n   * NOTE: sometimes long[] might contain \"don't care\" values that are unused, e.g. \n   * the pointer to postings list may not be defined for some terms but is defined\n   * for others, if it is designed to inline  some postings data in term dictionary.\n   * In this case, the postings writer should always use the last value, so that each\n   * element in metadata long[] remains monotonic.\n   */\n  public abstract void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;\n\n","sourceOld":"  /**\n   * Encode metadata as long[] and byte[]. {@code absolute} controls whether \n   * current term is delta encoded according to latest term. \n   * Usually elements in {@code longs} are file pointers, so each one always \n   * increases when a new term is consumed. {@code out} is used to write generic\n   * bytes, which are not monotonic.\n   */\n  public abstract void encodeTerm(DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase#encodeTerm(DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PostingsWriterBase#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  /**\n   * Encode metadata as long[] and byte[]. {@code absolute} controls whether \n   * current term is delta encoded according to latest term. \n   * Usually elements in {@code longs} are file pointers, so each one always \n   * increases when a new term is consumed. {@code out} is used to write generic\n   * bytes, which are not monotonic.\n   */\n  public abstract void encodeTerm(DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;\n\n","sourceOld":"  /**\n   * Encode metadata as long[] and byte[]. {@code absolute} controls whether \n   * current term is delta encoded according to latest term. \n   * Usually elements in {@code longs} are file pointers, so each one always \n   * increases when a new term is consumed. {@code out} is used to write generic\n   * bytes, which are not monotonic.\n   *\n   * NOTE: sometimes long[] might contain \"don't care\" values that are unused, e.g. \n   * the pointer to postings list may not be defined for some terms but is defined\n   * for others, if it is designed to inline  some postings data in term dictionary.\n   * In this case, the postings writer should always use the last value, so that each\n   * element in metadata long[] remains monotonic.\n   */\n  public abstract void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState state, boolean absolute) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}