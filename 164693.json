{"path":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","commits":[{"id":"901b27c7f633ab98e138aafb0b9c3ba22aac6b28","date":1408052893,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = schema.getField(field);\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if(fieldType instanceof TrieIntField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if(fieldType instanceof TrieDoubleField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if(fieldType instanceof StrField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      }\n    }\n    return writers;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["257af2cc79c0dfd9dd10dfccbef767d8c07ab2ff"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87e99c34422d54f9b012110d0d3c0406fba05085","date":1408119816,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","sourceNew":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = schema.getField(field);\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if(fieldType instanceof TrieIntField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if(fieldType instanceof TrieDoubleField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if(fieldType instanceof StrField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string\");\n      }\n    }\n    return writers;\n  }\n\n","sourceOld":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = schema.getField(field);\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if(fieldType instanceof TrieIntField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if(fieldType instanceof TrieDoubleField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if(fieldType instanceof StrField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      }\n    }\n    return writers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"257af2cc79c0dfd9dd10dfccbef767d8c07ab2ff","date":1431714904,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","sourceNew":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if(fieldType instanceof TrieIntField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if(fieldType instanceof TrieDoubleField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if(fieldType instanceof StrField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string\");\n      }\n    }\n    return writers;\n  }\n\n","sourceOld":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = schema.getField(field);\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if(fieldType instanceof TrieIntField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if(fieldType instanceof TrieDoubleField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if(fieldType instanceof StrField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string\");\n      }\n    }\n    return writers;\n  }\n\n","bugFix":["901b27c7f633ab98e138aafb0b9c3ba22aac6b28"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","date":1465691899,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","sourceNew":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if(fieldType instanceof TrieIntField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if(fieldType instanceof TrieDoubleField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if(fieldType instanceof StrField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof TrieDateField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if(fieldType instanceof BoolField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      }\n      else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","sourceOld":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if(fieldType instanceof TrieIntField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if(fieldType instanceof TrieDoubleField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if(fieldType instanceof StrField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string\");\n      }\n    }\n    return writers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","sourceNew":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if(fieldType instanceof TrieIntField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if(fieldType instanceof TrieDoubleField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if(fieldType instanceof StrField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof TrieDateField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if(fieldType instanceof BoolField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      }\n      else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","sourceOld":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if(fieldType instanceof TrieIntField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if(fieldType instanceof TrieDoubleField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if(fieldType instanceof StrField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string\");\n      }\n    }\n    return writers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50f05d6b69cfaabd51b5d26cba4e3122f51fff83","date":1478603228,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SortingResponseWriter[ExportWriter]#getFieldWriters(String[],SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","sourceNew":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if(fieldType instanceof TrieIntField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if(fieldType instanceof TrieDoubleField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if(fieldType instanceof StrField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof TrieDateField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if(fieldType instanceof BoolField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      }\n      else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","sourceOld":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if(fieldType instanceof TrieIntField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if(fieldType instanceof TrieDoubleField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if(fieldType instanceof StrField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof TrieDateField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if(fieldType instanceof BoolField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      }\n      else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ExportWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SortingResponseWriter#getFieldWriters(String[],SolrIndexSearcher).mjava","sourceNew":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if (fieldType instanceof TrieIntField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieDoubleField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if (fieldType instanceof StrField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof TrieDateField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if (fieldType instanceof BoolField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      } else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","sourceOld":"  protected FieldWriter[] getFieldWriters(String[] fields, SolrIndexSearcher searcher) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    FieldWriter[] writers = new FieldWriter[fields.length];\n    for(int i=0; i<fields.length; i++) {\n      String field = fields[i];\n      SchemaField schemaField = null;\n\n      try {\n        schemaField = schema.getField(field);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n\n      if(!schemaField.hasDocValues()) {\n        throw new IOException(field+\" must have DocValues to use this feature.\");\n      }\n\n      boolean multiValued = schemaField.multiValued();\n      FieldType fieldType = schemaField.getType();\n      if(fieldType instanceof TrieIntField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieLongField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof TrieFloatField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new FloatFieldWriter(field);\n        }\n      } else if(fieldType instanceof TrieDoubleField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new DoubleFieldWriter(field);\n        }\n      } else if(fieldType instanceof StrField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new StringFieldWriter(field, fieldType);\n        }\n      } else if (fieldType instanceof TrieDateField) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, false);\n        } else {\n          writers[i] = new DateFieldWriter(field);\n        }\n      } else if(fieldType instanceof BoolField) {\n        if(multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, true);\n        } else {\n          writers[i] = new BoolFieldWriter(field, fieldType);\n        }\n      }\n      else {\n        throw new IOException(\"Export fields must either be one of the following types: int,float,long,double,string,date,boolean\");\n      }\n    }\n    return writers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"50f05d6b69cfaabd51b5d26cba4e3122f51fff83":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"],"87e99c34422d54f9b012110d0d3c0406fba05085":["901b27c7f633ab98e138aafb0b9c3ba22aac6b28"],"257af2cc79c0dfd9dd10dfccbef767d8c07ab2ff":["87e99c34422d54f9b012110d0d3c0406fba05085"],"901b27c7f633ab98e138aafb0b9c3ba22aac6b28":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["257af2cc79c0dfd9dd10dfccbef767d8c07ab2ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","50f05d6b69cfaabd51b5d26cba4e3122f51fff83"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["257af2cc79c0dfd9dd10dfccbef767d8c07ab2ff","7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50f05d6b69cfaabd51b5d26cba4e3122f51fff83"]},"commit2Childs":{"50f05d6b69cfaabd51b5d26cba4e3122f51fff83":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"87e99c34422d54f9b012110d0d3c0406fba05085":["257af2cc79c0dfd9dd10dfccbef767d8c07ab2ff"],"257af2cc79c0dfd9dd10dfccbef767d8c07ab2ff":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"901b27c7f633ab98e138aafb0b9c3ba22aac6b28":["87e99c34422d54f9b012110d0d3c0406fba05085"],"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["50f05d6b69cfaabd51b5d26cba4e3122f51fff83","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["901b27c7f633ab98e138aafb0b9c3ba22aac6b28"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}