{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getDocsWithField(long,int).mjava","commits":[{"id":"084884d4602f4d1c7411eab29e897e349ce62675","date":1475571034,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getDocsWithField(long,int).mjava","pathOld":"/dev/null","sourceNew":"  private DocIdSetIterator getDocsWithField(final long offset, final int count) throws IOException {\n    if (offset == ALL_MISSING) {\n      return DocIdSetIterator.empty();\n    } else if (offset == ALL_LIVE) {\n      return DocIdSetIterator.all(count);\n    } else {\n      int length = (int) ((count + 63L) >>> 6);\n      final RandomAccessInput in = data.randomAccessSlice(offset, length << 3);\n      return new DocIdSetIterator() {\n\n        int doc = -1;\n        int wordIndex = -1;\n        long word = 0;\n\n        private int nextSetBit(int index) throws IOException {\n          int i = index >>> 6;\n\n          if (wordIndex != i) {\n            wordIndex = i;\n            word = in.readLong(i << 3);\n          }\n          long w = word >>> index;\n          if (w != 0) {\n            return index + Long.numberOfTrailingZeros(w);\n          }\n\n          while (++i < length) {\n            wordIndex = i;\n            word = in.readLong(i << 3);\n            if (word != 0) {\n              return (i << 6) + Long.numberOfTrailingZeros(word);\n            }\n          }\n\n          return DocIdSetIterator.NO_MORE_DOCS;\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(docID() + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          // TODO: what is the exact cardinality\n          return count;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= count) {\n            return doc = NO_MORE_DOCS;\n          }\n          return doc = nextSetBit(target);\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getDocsWithField(long,int).mjava","pathOld":"/dev/null","sourceNew":"  private DocIdSetIterator getDocsWithField(final long offset, final int count) throws IOException {\n    if (offset == ALL_MISSING) {\n      return DocIdSetIterator.empty();\n    } else if (offset == ALL_LIVE) {\n      return DocIdSetIterator.all(count);\n    } else {\n      int length = (int) ((count + 63L) >>> 6);\n      final RandomAccessInput in = data.randomAccessSlice(offset, length << 3);\n      return new DocIdSetIterator() {\n\n        int doc = -1;\n        int wordIndex = -1;\n        long word = 0;\n\n        private int nextSetBit(int index) throws IOException {\n          int i = index >>> 6;\n\n          if (wordIndex != i) {\n            wordIndex = i;\n            word = in.readLong(i << 3);\n          }\n          long w = word >>> index;\n          if (w != 0) {\n            return index + Long.numberOfTrailingZeros(w);\n          }\n\n          while (++i < length) {\n            wordIndex = i;\n            word = in.readLong(i << 3);\n            if (word != 0) {\n              return (i << 6) + Long.numberOfTrailingZeros(word);\n            }\n          }\n\n          return DocIdSetIterator.NO_MORE_DOCS;\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(docID() + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          // TODO: what is the exact cardinality\n          return count;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= count) {\n            return doc = NO_MORE_DOCS;\n          }\n          return doc = nextSetBit(target);\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23e44daeaa8b89694d10df5999956c8e14a7dd09","date":1476689300,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getDocsWithField(long,int).mjava","sourceNew":null,"sourceOld":"  private DocIdSetIterator getDocsWithField(final long offset, final int count) throws IOException {\n    if (offset == ALL_MISSING) {\n      return DocIdSetIterator.empty();\n    } else if (offset == ALL_LIVE) {\n      return DocIdSetIterator.all(count);\n    } else {\n      int length = (int) ((count + 63L) >>> 6);\n      final RandomAccessInput in = data.randomAccessSlice(offset, length << 3);\n      return new DocIdSetIterator() {\n\n        int doc = -1;\n        int wordIndex = -1;\n        long word = 0;\n\n        private int nextSetBit(int index) throws IOException {\n          int i = index >>> 6;\n\n          if (wordIndex != i) {\n            wordIndex = i;\n            word = in.readLong(i << 3);\n          }\n          long w = word >>> index;\n          if (w != 0) {\n            return index + Long.numberOfTrailingZeros(w);\n          }\n\n          while (++i < length) {\n            wordIndex = i;\n            word = in.readLong(i << 3);\n            if (word != 0) {\n              return (i << 6) + Long.numberOfTrailingZeros(word);\n            }\n          }\n\n          return DocIdSetIterator.NO_MORE_DOCS;\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(docID() + 1);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public long cost() {\n          // TODO: what is the exact cardinality\n          return count;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= count) {\n            return doc = NO_MORE_DOCS;\n          }\n          return doc = nextSetBit(target);\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23e44daeaa8b89694d10df5999956c8e14a7dd09":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","084884d4602f4d1c7411eab29e897e349ce62675"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"084884d4602f4d1c7411eab29e897e349ce62675":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"23e44daeaa8b89694d10df5999956c8e14a7dd09":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1967bed916cc89da82a1c2085f27976da6d08cbd","084884d4602f4d1c7411eab29e897e349ce62675"],"084884d4602f4d1c7411eab29e897e349ce62675":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}