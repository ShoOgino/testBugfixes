{"path":"sandbox/contributions/lucli/src/lucli/LuceneMethods#getSortedHashtableEntries(Hashtable).mjava","commits":[{"id":"66a601acf439105252becef7e0f1cb6b2e296bce","date":1071108465,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/lucli/src/lucli/LuceneMethods#getSortedHashtableEntries(Hashtable).mjava","pathOld":"/dev/null","sourceNew":"\t/** Sort Hashtable values\n\t * @param h the hashtable we're sorting\n\t * from http://developer.java.sun.com/developer/qow/archive/170/index.jsp\n\t */\n\n\tpublic static Entry[]\n\t\tgetSortedHashtableEntries(Hashtable h) {\n\t\t\tSet set = h.entrySet();\n\t\t\tEntry [] entries =\n\t\t\t\t(Entry[])set.toArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t new Entry[set.size()]);\n\t\t\tArrays.sort(entries, new Comparator() {\n\t\t\t\tpublic int compare(Object o1, Object o2) {\n\t\t\t\t\tObject v1 = ((Entry)o1).getValue();\n\t\t\t\t\tObject v2 = ((Entry)o2).getValue();\n\t\t\t\t\treturn ((Comparable)v2).compareTo(v1); //descending order\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn entries;\n\t\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98e42b41456ce3f4f653a8e6c3abc34a23f41a8","date":1075080975,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/lucli/src/lucli/LuceneMethods#getSortedHashtableEntries(Hashtable).mjava","pathOld":"sandbox/contributions/lucli/src/lucli/LuceneMethods#getSortedHashtableEntries(Hashtable).mjava","sourceNew":"  /** Sort Hashtable values\n   * @param h the hashtable we're sorting\n   * from http://developer.java.sun.com/developer/qow/archive/170/index.jsp\n   */\n\n  public static Entry[]\n    getSortedHashtableEntries(Hashtable h) {\n    Set set = h.entrySet();\n    Entry[] entries =\n      (Entry[]) set.toArray(\n        new Entry[set.size()]);\n    Arrays.sort(entries, new Comparator() {\n      public int compare(Object o1, Object o2) {\n        Object v1 = ((Entry) o1).getValue();\n        Object v2 = ((Entry) o2).getValue();\n        return ((Comparable) v2).compareTo(v1); //descending order\n      }\n    });\n    return entries;\n  }\n\n","sourceOld":"\t/** Sort Hashtable values\n\t * @param h the hashtable we're sorting\n\t * from http://developer.java.sun.com/developer/qow/archive/170/index.jsp\n\t */\n\n\tpublic static Entry[]\n\t\tgetSortedHashtableEntries(Hashtable h) {\n\t\t\tSet set = h.entrySet();\n\t\t\tEntry [] entries =\n\t\t\t\t(Entry[])set.toArray(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t new Entry[set.size()]);\n\t\t\tArrays.sort(entries, new Comparator() {\n\t\t\t\tpublic int compare(Object o1, Object o2) {\n\t\t\t\t\tObject v1 = ((Entry)o1).getValue();\n\t\t\t\t\tObject v2 = ((Entry)o2).getValue();\n\t\t\t\t\treturn ((Comparable)v2).compareTo(v1); //descending order\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn entries;\n\t\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a","date":1107704112,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/lucli/src/lucli/LuceneMethods#getSortedHashtableEntries(Hashtable).mjava","pathOld":"sandbox/contributions/lucli/src/lucli/LuceneMethods#getSortedHashtableEntries(Hashtable).mjava","sourceNew":"  /** Sort Hashtable values\n   * @param h the hashtable we're sorting\n   * from http://developer.java.sun.com/developer/qow/archive/170/index.jsp\n   */\n\n  public static Entry[]\n    getSortedHashtableEntries(Hashtable h) {\n    Set set = h.entrySet();\n    Entry[] entries =\n      (Entry[]) set.toArray(\n        new Entry[set.size()]);\n    Arrays.sort(entries, new Comparator() {\n      public int compare(Object o1, Object o2) {\n        Object v1 = ((Entry) o1).getValue();\n        Object v2 = ((Entry) o2).getValue();\n        return ((Comparable) v2).compareTo(v1); //descending order\n      }\n    });\n    return entries;\n  }\n\n","sourceOld":"  /** Sort Hashtable values\n   * @param h the hashtable we're sorting\n   * from http://developer.java.sun.com/developer/qow/archive/170/index.jsp\n   */\n\n  public static Entry[]\n    getSortedHashtableEntries(Hashtable h) {\n    Set set = h.entrySet();\n    Entry[] entries =\n      (Entry[]) set.toArray(\n        new Entry[set.size()]);\n    Arrays.sort(entries, new Comparator() {\n      public int compare(Object o1, Object o2) {\n        Object v1 = ((Entry) o1).getValue();\n        Object v2 = ((Entry) o2).getValue();\n        return ((Comparable) v2).compareTo(v1); //descending order\n      }\n    });\n    return entries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a":["e98e42b41456ce3f4f653a8e6c3abc34a23f41a8"],"66a601acf439105252becef7e0f1cb6b2e296bce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e98e42b41456ce3f4f653a8e6c3abc34a23f41a8":["66a601acf439105252becef7e0f1cb6b2e296bce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66a601acf439105252becef7e0f1cb6b2e296bce"],"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"66a601acf439105252becef7e0f1cb6b2e296bce":["e98e42b41456ce3f4f653a8e6c3abc34a23f41a8"],"e98e42b41456ce3f4f653a8e6c3abc34a23f41a8":["a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}