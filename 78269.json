{"path":"src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","commits":[{"id":"fc4d3e27c238940711be108e7c7b9944bd6353b9","date":1097526764,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","pathOld":"/dev/null","sourceNew":"  public void testStringtoTime() throws ParseException {\n    long time = DateTools.stringToTime(\"197001010000\");\n    Calendar cal = Calendar.getInstance();\n    cal.set(1970, 0, 1,    // year=1970, month=january, day=1\n        0, 0, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    assertEquals(cal.getTime().getTime(), time);\n    cal.set(1980, 1, 2,    // year=1980, month=february, day=2\n        11, 5, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    time = DateTools.stringToTime(\"198002021105\");\n    assertEquals(cal.getTime().getTime(), time);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d6c356d9e7be4ba949f083ecd3fb65231bc64008"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0","date":1139163422,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","pathOld":"src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","sourceNew":"  public void testStringtoTime() throws ParseException {\n    long time = DateTools.stringToTime(\"197001010000\");\n    Calendar cal = Calendar.getInstance();\n    cal.set(1970, 0, 1,    // year=1970, month=january, day=1\n        0, 0, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    cal.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n    assertEquals(cal.getTime().getTime(), time);\n    cal.set(1980, 1, 2,    // year=1980, month=february, day=2\n        11, 5, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    time = DateTools.stringToTime(\"198002021105\");\n    assertEquals(cal.getTime().getTime(), time);\n  }\n\n","sourceOld":"  public void testStringtoTime() throws ParseException {\n    long time = DateTools.stringToTime(\"197001010000\");\n    Calendar cal = Calendar.getInstance();\n    cal.set(1970, 0, 1,    // year=1970, month=january, day=1\n        0, 0, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    assertEquals(cal.getTime().getTime(), time);\n    cal.set(1980, 1, 2,    // year=1980, month=february, day=2\n        11, 5, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    time = DateTools.stringToTime(\"198002021105\");\n    assertEquals(cal.getTime().getTime(), time);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6c356d9e7be4ba949f083ecd3fb65231bc64008","date":1251182916,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","pathOld":"src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","sourceNew":"  public void testStringtoTime() throws ParseException {\n    long time = DateTools.stringToTime(\"197001010000\");\n    Calendar cal = new GregorianCalendar();\n    cal.set(1970, 0, 1,    // year=1970, month=january, day=1\n        0, 0, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    cal.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n    assertEquals(cal.getTime().getTime(), time);\n    cal.set(1980, 1, 2,    // year=1980, month=february, day=2\n        11, 5, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    time = DateTools.stringToTime(\"198002021105\");\n    assertEquals(cal.getTime().getTime(), time);\n  }\n\n","sourceOld":"  public void testStringtoTime() throws ParseException {\n    long time = DateTools.stringToTime(\"197001010000\");\n    Calendar cal = Calendar.getInstance();\n    cal.set(1970, 0, 1,    // year=1970, month=january, day=1\n        0, 0, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    cal.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n    assertEquals(cal.getTime().getTime(), time);\n    cal.set(1980, 1, 2,    // year=1980, month=february, day=2\n        11, 5, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    time = DateTools.stringToTime(\"198002021105\");\n    assertEquals(cal.getTime().getTime(), time);\n  }\n\n","bugFix":["fc4d3e27c238940711be108e7c7b9944bd6353b9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","sourceNew":null,"sourceOld":"  public void testStringtoTime() throws ParseException {\n    long time = DateTools.stringToTime(\"197001010000\");\n    Calendar cal = new GregorianCalendar();\n    cal.set(1970, 0, 1,    // year=1970, month=january, day=1\n        0, 0, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    cal.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n    assertEquals(cal.getTime().getTime(), time);\n    cal.set(1980, 1, 2,    // year=1980, month=february, day=2\n        11, 5, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    time = DateTools.stringToTime(\"198002021105\");\n    assertEquals(cal.getTime().getTime(), time);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","sourceNew":null,"sourceOld":"  public void testStringtoTime() throws ParseException {\n    long time = DateTools.stringToTime(\"197001010000\");\n    Calendar cal = new GregorianCalendar();\n    cal.set(1970, 0, 1,    // year=1970, month=january, day=1\n        0, 0, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    cal.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n    assertEquals(cal.getTime().getTime(), time);\n    cal.set(1980, 1, 2,    // year=1980, month=february, day=2\n        11, 5, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    time = DateTools.stringToTime(\"198002021105\");\n    assertEquals(cal.getTime().getTime(), time);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a61b8e7beed03e44332d4a604c53962e7d34ea17","date":1255278355,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","pathOld":"/dev/null","sourceNew":"  public void testStringtoTime() throws ParseException {\n    long time = DateTools.stringToTime(\"197001010000\");\n    Calendar cal = new GregorianCalendar();\n    cal.set(1970, 0, 1,    // year=1970, month=january, day=1\n        0, 0, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    cal.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n    assertEquals(cal.getTime().getTime(), time);\n    cal.set(1980, 1, 2,    // year=1980, month=february, day=2\n        11, 5, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    time = DateTools.stringToTime(\"198002021105\");\n    assertEquals(cal.getTime().getTime(), time);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64a84446b679daf1e25d901bf647686ade7fc1f0","date":1260811919,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","pathOld":"src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","sourceNew":"  public void testStringtoTime() throws ParseException {\n    long time = DateTools.stringToTime(\"197001010000\");\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.set(1970, 0, 1,    // year=1970, month=january, day=1\n        0, 0, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    cal.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n    assertEquals(cal.getTime().getTime(), time);\n    cal.set(1980, 1, 2,    // year=1980, month=february, day=2\n        11, 5, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    time = DateTools.stringToTime(\"198002021105\");\n    assertEquals(cal.getTime().getTime(), time);\n  }\n\n","sourceOld":"  public void testStringtoTime() throws ParseException {\n    long time = DateTools.stringToTime(\"197001010000\");\n    Calendar cal = new GregorianCalendar();\n    cal.set(1970, 0, 1,    // year=1970, month=january, day=1\n        0, 0, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    cal.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n    assertEquals(cal.getTime().getTime(), time);\n    cal.set(1980, 1, 2,    // year=1980, month=february, day=2\n        11, 5, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    time = DateTools.stringToTime(\"198002021105\");\n    assertEquals(cal.getTime().getTime(), time);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","pathOld":"src/test/org/apache/lucene/document/TestDateTools#testStringtoTime().mjava","sourceNew":"  public void testStringtoTime() throws ParseException {\n    long time = DateTools.stringToTime(\"197001010000\");\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.set(1970, 0, 1,    // year=1970, month=january, day=1\n        0, 0, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    cal.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n    assertEquals(cal.getTime().getTime(), time);\n    cal.set(1980, 1, 2,    // year=1980, month=february, day=2\n        11, 5, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    time = DateTools.stringToTime(\"198002021105\");\n    assertEquals(cal.getTime().getTime(), time);\n  }\n\n","sourceOld":"  public void testStringtoTime() throws ParseException {\n    long time = DateTools.stringToTime(\"197001010000\");\n    Calendar cal = new GregorianCalendar();\n    cal.clear();\n    cal.set(1970, 0, 1,    // year=1970, month=january, day=1\n        0, 0, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    cal.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n    assertEquals(cal.getTime().getTime(), time);\n    cal.set(1980, 1, 2,    // year=1980, month=february, day=2\n        11, 5, 0);          // hour, minute, second\n    cal.set(Calendar.MILLISECOND, 0);\n    time = DateTools.stringToTime(\"198002021105\");\n    assertEquals(cal.getTime().getTime(), time);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a61b8e7beed03e44332d4a604c53962e7d34ea17":["0a046c0c310bc77931fc8441bd920053b607dd14"],"64a84446b679daf1e25d901bf647686ade7fc1f0":["a61b8e7beed03e44332d4a604c53962e7d34ea17"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["d6c356d9e7be4ba949f083ecd3fb65231bc64008"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["d6c356d9e7be4ba949f083ecd3fb65231bc64008","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"d6c356d9e7be4ba949f083ecd3fb65231bc64008":["87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0"],"fc4d3e27c238940711be108e7c7b9944bd6353b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["64a84446b679daf1e25d901bf647686ade7fc1f0"],"87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0":["fc4d3e27c238940711be108e7c7b9944bd6353b9"]},"commit2Childs":{"a61b8e7beed03e44332d4a604c53962e7d34ea17":["64a84446b679daf1e25d901bf647686ade7fc1f0"],"64a84446b679daf1e25d901bf647686ade7fc1f0":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"0a046c0c310bc77931fc8441bd920053b607dd14":["a61b8e7beed03e44332d4a604c53962e7d34ea17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fc4d3e27c238940711be108e7c7b9944bd6353b9"],"d6c356d9e7be4ba949f083ecd3fb65231bc64008":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"fc4d3e27c238940711be108e7c7b9944bd6353b9":["87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0"],"87236df7b0a6d20724a5a1e1a4d8f4d0f0615cf0":["d6c356d9e7be4ba949f083ecd3fb65231bc64008"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}