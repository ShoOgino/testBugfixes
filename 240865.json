{"path":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testPostingsFormats().mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testPostingsFormats().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecProviderSupport#testCodecs().mjava","sourceNew":"  public void testPostingsFormats() {\n    Codec codec = h.getCore().getCodec();\n    Map<String, SchemaField> fields = h.getCore().getSchema().getFields();\n    SchemaField schemaField = fields.get(\"string_pulsing_f\");\n    PerFieldPostingsFormat format = (PerFieldPostingsFormat) codec.postingsFormat();\n    assertEquals(\"Pulsing40\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_simpletext_f\");\n    assertEquals(\"SimpleText\",\n        format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_standard_f\");\n    assertEquals(\"Lucene40\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_f\");\n    assertEquals(\"Lucene40\", format.getPostingsFormatForField(schemaField.getName()).getName());\n  }\n\n","sourceOld":"  public void testCodecs() {\n    CodecProvider codecProvider = h.getCore().getCodecProvider();\n    Map<String, SchemaField> fields = h.getCore().getSchema().getFields();\n    SchemaField schemaField = fields.get(\"string_pulsing_f\");\n    assertEquals(\"Pulsing\", codecProvider.getFieldCodec(schemaField.getName()));\n    schemaField = fields.get(\"string_simpletext_f\");\n    assertEquals(\"SimpleText\",\n        codecProvider.getFieldCodec(schemaField.getName()));\n    schemaField = fields.get(\"string_standard_f\");\n    assertEquals(\"Standard\", codecProvider.getFieldCodec(schemaField.getName()));\n    schemaField = fields.get(\"string_f\");\n    assertEquals(\"Pulsing\", codecProvider.getFieldCodec(schemaField.getName()));\n\n    assertTrue(codecProvider.hasFieldCodec(\"string_simpletext_f\"));\n    assertTrue(codecProvider.hasFieldCodec(\"string_standard_f\"));\n    assertTrue(codecProvider.hasFieldCodec(\"string_f\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6616b1fd222bb5a60f7f7856ace312252bc97890","date":1350142044,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testPostingsFormats().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testPostingsFormats().mjava","sourceNew":"  public void testPostingsFormats() {\n    Codec codec = h.getCore().getCodec();\n    Map<String, SchemaField> fields = h.getCore().getSchema().getFields();\n    SchemaField schemaField = fields.get(\"string_pulsing_f\");\n    PerFieldPostingsFormat format = (PerFieldPostingsFormat) codec.postingsFormat();\n    assertEquals(\"Pulsing41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_simpletext_f\");\n    assertEquals(\"SimpleText\",\n        format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_standard_f\");\n    assertEquals(\"Lucene41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_f\");\n    assertEquals(\"Lucene41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n  }\n\n","sourceOld":"  public void testPostingsFormats() {\n    Codec codec = h.getCore().getCodec();\n    Map<String, SchemaField> fields = h.getCore().getSchema().getFields();\n    SchemaField schemaField = fields.get(\"string_pulsing_f\");\n    PerFieldPostingsFormat format = (PerFieldPostingsFormat) codec.postingsFormat();\n    assertEquals(\"Pulsing40\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_simpletext_f\");\n    assertEquals(\"SimpleText\",\n        format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_standard_f\");\n    assertEquals(\"Lucene40\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_f\");\n    assertEquals(\"Lucene40\", format.getPostingsFormatForField(schemaField.getName()).getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testPostingsFormats().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testPostingsFormats().mjava","sourceNew":"  public void testPostingsFormats() {\n    Codec codec = h.getCore().getCodec();\n    Map<String, SchemaField> fields = h.getCore().getSchema().getFields();\n    SchemaField schemaField = fields.get(\"string_pulsing_f\");\n    PerFieldPostingsFormat format = (PerFieldPostingsFormat) codec.postingsFormat();\n    assertEquals(\"Pulsing41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_simpletext_f\");\n    assertEquals(\"SimpleText\",\n        format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_standard_f\");\n    assertEquals(\"Lucene41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_f\");\n    assertEquals(\"Lucene41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n  }\n\n","sourceOld":"  public void testPostingsFormats() {\n    Codec codec = h.getCore().getCodec();\n    Map<String, SchemaField> fields = h.getCore().getSchema().getFields();\n    SchemaField schemaField = fields.get(\"string_pulsing_f\");\n    PerFieldPostingsFormat format = (PerFieldPostingsFormat) codec.postingsFormat();\n    assertEquals(\"Pulsing40\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_simpletext_f\");\n    assertEquals(\"SimpleText\",\n        format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_standard_f\");\n    assertEquals(\"Lucene40\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_f\");\n    assertEquals(\"Lucene40\", format.getPostingsFormatForField(schemaField.getName()).getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testPostingsFormats().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testPostingsFormats().mjava","sourceNew":"  public void testPostingsFormats() {\n    Codec codec = h.getCore().getCodec();\n    Map<String, SchemaField> fields = h.getCore().getSchema().getFields();\n    SchemaField schemaField = fields.get(\"string_pulsing_f\");\n    PerFieldPostingsFormat format = (PerFieldPostingsFormat) codec.postingsFormat();\n    assertEquals(\"Pulsing41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_simpletext_f\");\n    assertEquals(\"SimpleText\",\n        format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_standard_f\");\n    assertEquals(\"Lucene41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_f\");\n    assertEquals(\"Lucene41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n  }\n\n","sourceOld":"  public void testPostingsFormats() {\n    Codec codec = h.getCore().getCodec();\n    Map<String, SchemaField> fields = h.getCore().getSchema().getFields();\n    SchemaField schemaField = fields.get(\"string_pulsing_f\");\n    PerFieldPostingsFormat format = (PerFieldPostingsFormat) codec.postingsFormat();\n    assertEquals(\"Pulsing40\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_simpletext_f\");\n    assertEquals(\"SimpleText\",\n        format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_standard_f\");\n    assertEquals(\"Lucene40\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_f\");\n    assertEquals(\"Lucene40\", format.getPostingsFormatForField(schemaField.getName()).getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testPostingsFormats().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testPostingsFormats().mjava","sourceNew":"  public void testPostingsFormats() {\n    Codec codec = h.getCore().getCodec();\n    Map<String, SchemaField> fields = h.getCore().getLatestSchema().getFields();\n    SchemaField schemaField = fields.get(\"string_pulsing_f\");\n    PerFieldPostingsFormat format = (PerFieldPostingsFormat) codec.postingsFormat();\n    assertEquals(\"Pulsing41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_simpletext_f\");\n    assertEquals(\"SimpleText\",\n        format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_standard_f\");\n    assertEquals(\"Lucene41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_f\");\n    assertEquals(\"Lucene41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n  }\n\n","sourceOld":"  public void testPostingsFormats() {\n    Codec codec = h.getCore().getCodec();\n    Map<String, SchemaField> fields = h.getCore().getSchema().getFields();\n    SchemaField schemaField = fields.get(\"string_pulsing_f\");\n    PerFieldPostingsFormat format = (PerFieldPostingsFormat) codec.postingsFormat();\n    assertEquals(\"Pulsing41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_simpletext_f\");\n    assertEquals(\"SimpleText\",\n        format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_standard_f\");\n    assertEquals(\"Lucene41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_f\");\n    assertEquals(\"Lucene41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbaae1c00d39df2c872bbe043af26d02d3818313","date":1409657064,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testPostingsFormats().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testPostingsFormats().mjava","sourceNew":"  public void testPostingsFormats() {\n    Codec codec = h.getCore().getCodec();\n    Map<String, SchemaField> fields = h.getCore().getLatestSchema().getFields();\n    SchemaField schemaField = fields.get(\"string_direct_f\");\n    PerFieldPostingsFormat format = (PerFieldPostingsFormat) codec.postingsFormat();\n    assertEquals(\"Direct\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_simpletext_f\");\n    assertEquals(\"SimpleText\",\n        format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_standard_f\");\n    assertEquals(\"Lucene41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_f\");\n    assertEquals(\"Lucene41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n  }\n\n","sourceOld":"  public void testPostingsFormats() {\n    Codec codec = h.getCore().getCodec();\n    Map<String, SchemaField> fields = h.getCore().getLatestSchema().getFields();\n    SchemaField schemaField = fields.get(\"string_pulsing_f\");\n    PerFieldPostingsFormat format = (PerFieldPostingsFormat) codec.postingsFormat();\n    assertEquals(\"Pulsing41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_simpletext_f\");\n    assertEquals(\"SimpleText\",\n        format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_standard_f\");\n    assertEquals(\"Lucene41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_f\");\n    assertEquals(\"Lucene41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a19b69cac04945230af7260c5b1cee8341235d13","date":1413591570,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testPostingsFormats().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testPostingsFormats().mjava","sourceNew":"  public void testPostingsFormats() {\n    Codec codec = h.getCore().getCodec();\n    Map<String, SchemaField> fields = h.getCore().getLatestSchema().getFields();\n    SchemaField schemaField = fields.get(\"string_direct_f\");\n    PerFieldPostingsFormat format = (PerFieldPostingsFormat) codec.postingsFormat();\n    assertEquals(\"Direct\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_simpletext_f\");\n    assertEquals(\"SimpleText\",\n        format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_standard_f\");\n    assertEquals(TestUtil.getDefaultPostingsFormat().getName(), format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_f\");\n    assertEquals(TestUtil.getDefaultPostingsFormat().getName(), format.getPostingsFormatForField(schemaField.getName()).getName());\n  }\n\n","sourceOld":"  public void testPostingsFormats() {\n    Codec codec = h.getCore().getCodec();\n    Map<String, SchemaField> fields = h.getCore().getLatestSchema().getFields();\n    SchemaField schemaField = fields.get(\"string_direct_f\");\n    PerFieldPostingsFormat format = (PerFieldPostingsFormat) codec.postingsFormat();\n    assertEquals(\"Direct\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_simpletext_f\");\n    assertEquals(\"SimpleText\",\n        format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_standard_f\");\n    assertEquals(\"Lucene41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_f\");\n    assertEquals(\"Lucene41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testPostingsFormats().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testPostingsFormats().mjava","sourceNew":"  public void testPostingsFormats() {\n    Codec codec = h.getCore().getCodec();\n    Map<String, SchemaField> fields = h.getCore().getLatestSchema().getFields();\n    SchemaField schemaField = fields.get(\"string_direct_f\");\n    PerFieldPostingsFormat format = (PerFieldPostingsFormat) codec.postingsFormat();\n    assertEquals(\"Direct\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_simpletext_f\");\n    assertEquals(\"SimpleText\",\n        format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_standard_f\");\n    assertEquals(TestUtil.getDefaultPostingsFormat().getName(), format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_f\");\n    assertEquals(TestUtil.getDefaultPostingsFormat().getName(), format.getPostingsFormatForField(schemaField.getName()).getName());\n  }\n\n","sourceOld":"  public void testPostingsFormats() {\n    Codec codec = h.getCore().getCodec();\n    Map<String, SchemaField> fields = h.getCore().getLatestSchema().getFields();\n    SchemaField schemaField = fields.get(\"string_direct_f\");\n    PerFieldPostingsFormat format = (PerFieldPostingsFormat) codec.postingsFormat();\n    assertEquals(\"Direct\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_simpletext_f\");\n    assertEquals(\"SimpleText\",\n        format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_standard_f\");\n    assertEquals(\"Lucene41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_f\");\n    assertEquals(\"Lucene41\", format.getPostingsFormatForField(schemaField.getName()).getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71488d7f5786ae87541276121ecb69705a11a295","date":1465498138,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testPostingsFormats().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testPostingsFormats().mjava","sourceNew":"  public void testPostingsFormats() {\n    Codec codec = h.getCore().getCodec();\n    Map<String, SchemaField> fields = h.getCore().getLatestSchema().getFields();\n    SchemaField schemaField = fields.get(\"string_direct_f\");\n    PerFieldPostingsFormat format = (PerFieldPostingsFormat) codec.postingsFormat();\n    assertEquals(\"Direct\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_standard_f\");\n    assertEquals(TestUtil.getDefaultPostingsFormat().getName(), format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_f\");\n    assertEquals(TestUtil.getDefaultPostingsFormat().getName(), format.getPostingsFormatForField(schemaField.getName()).getName());\n  }\n\n","sourceOld":"  public void testPostingsFormats() {\n    Codec codec = h.getCore().getCodec();\n    Map<String, SchemaField> fields = h.getCore().getLatestSchema().getFields();\n    SchemaField schemaField = fields.get(\"string_direct_f\");\n    PerFieldPostingsFormat format = (PerFieldPostingsFormat) codec.postingsFormat();\n    assertEquals(\"Direct\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_simpletext_f\");\n    assertEquals(\"SimpleText\",\n        format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_standard_f\");\n    assertEquals(TestUtil.getDefaultPostingsFormat().getName(), format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_f\");\n    assertEquals(TestUtil.getDefaultPostingsFormat().getName(), format.getPostingsFormatForField(schemaField.getName()).getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testPostingsFormats().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testPostingsFormats().mjava","sourceNew":"  public void testPostingsFormats() {\n    Codec codec = h.getCore().getCodec();\n    Map<String, SchemaField> fields = h.getCore().getLatestSchema().getFields();\n    SchemaField schemaField = fields.get(\"string_direct_f\");\n    PerFieldPostingsFormat format = (PerFieldPostingsFormat) codec.postingsFormat();\n    assertEquals(\"Direct\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_standard_f\");\n    assertEquals(TestUtil.getDefaultPostingsFormat().getName(), format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_f\");\n    assertEquals(TestUtil.getDefaultPostingsFormat().getName(), format.getPostingsFormatForField(schemaField.getName()).getName());\n  }\n\n","sourceOld":"  public void testPostingsFormats() {\n    Codec codec = h.getCore().getCodec();\n    Map<String, SchemaField> fields = h.getCore().getLatestSchema().getFields();\n    SchemaField schemaField = fields.get(\"string_direct_f\");\n    PerFieldPostingsFormat format = (PerFieldPostingsFormat) codec.postingsFormat();\n    assertEquals(\"Direct\", format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_simpletext_f\");\n    assertEquals(\"SimpleText\",\n        format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_standard_f\");\n    assertEquals(TestUtil.getDefaultPostingsFormat().getName(), format.getPostingsFormatForField(schemaField.getName()).getName());\n    schemaField = fields.get(\"string_f\");\n    assertEquals(TestUtil.getDefaultPostingsFormat().getName(), format.getPostingsFormatForField(schemaField.getName()).getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6616b1fd222bb5a60f7f7856ace312252bc97890":["7b91922b55d15444d554721b352861d028eb8278"],"fbaae1c00d39df2c872bbe043af26d02d3818313":["08970e5b8411182a29412c177eff67ec1110095b"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["7b91922b55d15444d554721b352861d028eb8278","6616b1fd222bb5a60f7f7856ace312252bc97890"],"a19b69cac04945230af7260c5b1cee8341235d13":["fbaae1c00d39df2c872bbe043af26d02d3818313"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["7b91922b55d15444d554721b352861d028eb8278","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"71488d7f5786ae87541276121ecb69705a11a295":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["fbaae1c00d39df2c872bbe043af26d02d3818313","a19b69cac04945230af7260c5b1cee8341235d13"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","71488d7f5786ae87541276121ecb69705a11a295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71488d7f5786ae87541276121ecb69705a11a295"],"08970e5b8411182a29412c177eff67ec1110095b":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["6616b1fd222bb5a60f7f7856ace312252bc97890","c7492bcb52be51e55d596134b95b2e53cc4ffb91","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"6616b1fd222bb5a60f7f7856ace312252bc97890":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"fbaae1c00d39df2c872bbe043af26d02d3818313":["a19b69cac04945230af7260c5b1cee8341235d13","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","08970e5b8411182a29412c177eff67ec1110095b"],"a19b69cac04945230af7260c5b1cee8341235d13":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"71488d7f5786ae87541276121ecb69705a11a295":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71488d7f5786ae87541276121ecb69705a11a295","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"08970e5b8411182a29412c177eff67ec1110095b":["fbaae1c00d39df2c872bbe043af26d02d3818313"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}