{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testMatrix().mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testMatrix().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testMatrix().mjava","sourceNew":"  /**\n   * Tests creat shingles from a pre-assembled matrix\n   *\n   * Tests the row token z-axis, multi token synonyms.\n   *\n   * @throws IOException\n   */\n  public void testMatrix() throws IOException {\n\n    Matrix matrix = new Matrix();\n\n    matrix.new Column(tokenFactory(\"no\", 1));\n    matrix.new Column(tokenFactory(\"surprise\", 1));\n    matrix.new Column(tokenFactory(\"to\", 1));\n    matrix.new Column(tokenFactory(\"see\", 1));\n    matrix.new Column(tokenFactory(\"england\", 1));\n    matrix.new Column(tokenFactory(\"manager\", 1));\n\n    Column col = matrix.new Column();\n\n    // sven göran eriksson is a multi token synonym to svennis\n    col.new Row().getTokens().add(tokenFactory(\"svennis\", 1));\n\n    Column.Row row = col.new Row();\n    row.getTokens().add(tokenFactory(\"sven\", 1));\n    row.getTokens().add(tokenFactory(\"göran\", 1));\n    row.getTokens().add(tokenFactory(\"eriksson\", 1));\n\n    matrix.new Column(tokenFactory(\"in\", 1));\n    matrix.new Column(tokenFactory(\"the\", 1));\n    matrix.new Column(tokenFactory(\"croud\", 1));\n\n    TokenStream ts = new ShingleMatrixFilter(matrix, 2, 4, new Character('_'), true, new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec());\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    final Token reusableToken = new Token();\n    assertNext(ts, reusableToken, \"no_surprise\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"no_surprise_to\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"no_surprise_to_see\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"surprise_to\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"surprise_to_see\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"surprise_to_see_england\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"to_see\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"to_see_england\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"to_see_england_manager\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"see_england\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"see_england_manager\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"see_england_manager_svennis\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"england_manager\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"england_manager_svennis\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"england_manager_svennis_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"manager_svennis\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"manager_svennis_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"manager_svennis_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"svennis_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"svennis_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"svennis_in_the_croud\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"in_the\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"in_the_croud\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"the_croud\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"see_england_manager_sven\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"england_manager_sven\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"england_manager_sven_göran\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"manager_sven\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"manager_sven_göran\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"manager_sven_göran_eriksson\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"sven_göran\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"sven_göran_eriksson\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"sven_göran_eriksson_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"göran_eriksson\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"göran_eriksson_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"göran_eriksson_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"eriksson_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"eriksson_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"eriksson_in_the_croud\", 1, 2.0f, 0, 0);\n\n    assertNull(ts.next(reusableToken));\n\n  }\n\n","sourceOld":"  /**\n   * Tests creat shingles from a pre-assembled matrix\n   *\n   * Tests the row token z-axis, multi token synonyms.\n   *\n   * @throws IOException\n   */\n  public void testMatrix() throws IOException {\n\n    Matrix matrix = new Matrix();\n\n    matrix.new Column(tokenFactory(\"no\", 1));\n    matrix.new Column(tokenFactory(\"surprise\", 1));\n    matrix.new Column(tokenFactory(\"to\", 1));\n    matrix.new Column(tokenFactory(\"see\", 1));\n    matrix.new Column(tokenFactory(\"england\", 1));\n    matrix.new Column(tokenFactory(\"manager\", 1));\n\n    Column col = matrix.new Column();\n\n    // sven göran eriksson is a multi token synonym to svennis\n    col.new Row().getTokens().add(tokenFactory(\"svennis\", 1));\n\n    Column.Row row = col.new Row();\n    row.getTokens().add(tokenFactory(\"sven\", 1));\n    row.getTokens().add(tokenFactory(\"göran\", 1));\n    row.getTokens().add(tokenFactory(\"eriksson\", 1));\n\n    matrix.new Column(tokenFactory(\"in\", 1));\n    matrix.new Column(tokenFactory(\"the\", 1));\n    matrix.new Column(tokenFactory(\"croud\", 1));\n\n    TokenStream ts = new ShingleMatrixFilter(matrix, 2, 4, new Character('_'), true, new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec());\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    final Token reusableToken = new Token();\n    assertNext(ts, reusableToken, \"no_surprise\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"no_surprise_to\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"no_surprise_to_see\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"surprise_to\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"surprise_to_see\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"surprise_to_see_england\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"to_see\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"to_see_england\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"to_see_england_manager\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"see_england\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"see_england_manager\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"see_england_manager_svennis\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"england_manager\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"england_manager_svennis\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"england_manager_svennis_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"manager_svennis\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"manager_svennis_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"manager_svennis_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"svennis_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"svennis_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"svennis_in_the_croud\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"in_the\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"in_the_croud\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"the_croud\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"see_england_manager_sven\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"england_manager_sven\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"england_manager_sven_göran\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"manager_sven\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"manager_sven_göran\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"manager_sven_göran_eriksson\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"sven_göran\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"sven_göran_eriksson\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"sven_göran_eriksson_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"göran_eriksson\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"göran_eriksson_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"göran_eriksson_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"eriksson_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"eriksson_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"eriksson_in_the_croud\", 1, 2.0f, 0, 0);\n\n    assertNull(ts.next(reusableToken));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dda87e5ad7246b25d0da56a16ead95360499d86","date":1249273990,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testMatrix().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testMatrix().mjava","sourceNew":"  /**\n   * Tests creat shingles from a pre-assembled matrix\n   *\n   * Tests the row token z-axis, multi token synonyms.\n   *\n   * @throws IOException\n   */\n  public void testMatrix() throws IOException {\n\n    Matrix matrix = new Matrix();\n\n    matrix.new Column(tokenFactory(\"no\", 1));\n    matrix.new Column(tokenFactory(\"surprise\", 1));\n    matrix.new Column(tokenFactory(\"to\", 1));\n    matrix.new Column(tokenFactory(\"see\", 1));\n    matrix.new Column(tokenFactory(\"england\", 1));\n    matrix.new Column(tokenFactory(\"manager\", 1));\n\n    Column col = matrix.new Column();\n\n    // sven göran eriksson is a multi token synonym to svennis\n    col.new Row().getTokens().add(tokenFactory(\"svennis\", 1));\n\n    Column.Row row = col.new Row();\n    row.getTokens().add(tokenFactory(\"sven\", 1));\n    row.getTokens().add(tokenFactory(\"göran\", 1));\n    row.getTokens().add(tokenFactory(\"eriksson\", 1));\n\n    matrix.new Column(tokenFactory(\"in\", 1));\n    matrix.new Column(tokenFactory(\"the\", 1));\n    matrix.new Column(tokenFactory(\"croud\", 1));\n\n    TokenStream ts = new ShingleMatrixFilter(matrix, 2, 4, new Character('_'), true, new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec());\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    final Token reusableToken = new Token();\n    assertNext(ts, \"no_surprise\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"no_surprise_to\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"no_surprise_to_see\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"surprise_to\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"surprise_to_see\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"surprise_to_see_england\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"to_see\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"to_see_england\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"to_see_england_manager\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"see_england\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"see_england_manager_svennis\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"england_manager_svennis\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_svennis_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_svennis\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_svennis_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_svennis_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"svennis_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"svennis_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"svennis_in_the_croud\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"in_the\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"in_the_croud\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"the_croud\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager_sven\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager_sven\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_sven_göran\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_sven\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_sven_göran\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_sven_göran_eriksson\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"sven_göran\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"göran_eriksson\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"eriksson_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"eriksson_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"eriksson_in_the_croud\", 1, 2.0f, 0, 0);\n\n    assertFalse(ts.incrementToken());\n\n  }\n\n","sourceOld":"  /**\n   * Tests creat shingles from a pre-assembled matrix\n   *\n   * Tests the row token z-axis, multi token synonyms.\n   *\n   * @throws IOException\n   */\n  public void testMatrix() throws IOException {\n\n    Matrix matrix = new Matrix();\n\n    matrix.new Column(tokenFactory(\"no\", 1));\n    matrix.new Column(tokenFactory(\"surprise\", 1));\n    matrix.new Column(tokenFactory(\"to\", 1));\n    matrix.new Column(tokenFactory(\"see\", 1));\n    matrix.new Column(tokenFactory(\"england\", 1));\n    matrix.new Column(tokenFactory(\"manager\", 1));\n\n    Column col = matrix.new Column();\n\n    // sven göran eriksson is a multi token synonym to svennis\n    col.new Row().getTokens().add(tokenFactory(\"svennis\", 1));\n\n    Column.Row row = col.new Row();\n    row.getTokens().add(tokenFactory(\"sven\", 1));\n    row.getTokens().add(tokenFactory(\"göran\", 1));\n    row.getTokens().add(tokenFactory(\"eriksson\", 1));\n\n    matrix.new Column(tokenFactory(\"in\", 1));\n    matrix.new Column(tokenFactory(\"the\", 1));\n    matrix.new Column(tokenFactory(\"croud\", 1));\n\n    TokenStream ts = new ShingleMatrixFilter(matrix, 2, 4, new Character('_'), true, new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec());\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    final Token reusableToken = new Token();\n    assertNext(ts, reusableToken, \"no_surprise\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"no_surprise_to\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"no_surprise_to_see\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"surprise_to\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"surprise_to_see\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"surprise_to_see_england\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"to_see\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"to_see_england\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"to_see_england_manager\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"see_england\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"see_england_manager\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"see_england_manager_svennis\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"england_manager\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"england_manager_svennis\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"england_manager_svennis_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"manager_svennis\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"manager_svennis_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"manager_svennis_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"svennis_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"svennis_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"svennis_in_the_croud\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"in_the\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"in_the_croud\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"the_croud\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"see_england_manager_sven\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"england_manager_sven\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"england_manager_sven_göran\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"manager_sven\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"manager_sven_göran\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"manager_sven_göran_eriksson\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"sven_göran\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"sven_göran_eriksson\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"sven_göran_eriksson_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"göran_eriksson\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"göran_eriksson_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"göran_eriksson_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, reusableToken, \"eriksson_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, reusableToken, \"eriksson_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, reusableToken, \"eriksson_in_the_croud\", 1, 2.0f, 0, 0);\n\n    assertNull(ts.next(reusableToken));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45b06c3ff8a4d9d3d751dd311e51c59303c2719c","date":1250600126,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testMatrix().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testMatrix().mjava","sourceNew":"  /**\n   * Tests creat shingles from a pre-assembled matrix\n   *\n   * Tests the row token z-axis, multi token synonyms.\n   *\n   * @throws IOException\n   */\n  public void testMatrix() throws IOException {\n    // some other tests set this to null.\n    // set it here in case tests are run out of the usual order.\n    ShingleMatrixFilter.defaultSettingsCodec = new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n    Matrix matrix = new Matrix();\n\n    matrix.new Column(tokenFactory(\"no\", 1));\n    matrix.new Column(tokenFactory(\"surprise\", 1));\n    matrix.new Column(tokenFactory(\"to\", 1));\n    matrix.new Column(tokenFactory(\"see\", 1));\n    matrix.new Column(tokenFactory(\"england\", 1));\n    matrix.new Column(tokenFactory(\"manager\", 1));\n\n    Column col = matrix.new Column();\n\n    // sven göran eriksson is a multi token synonym to svennis\n    col.new Row().getTokens().add(tokenFactory(\"svennis\", 1));\n\n    Column.Row row = col.new Row();\n    row.getTokens().add(tokenFactory(\"sven\", 1));\n    row.getTokens().add(tokenFactory(\"göran\", 1));\n    row.getTokens().add(tokenFactory(\"eriksson\", 1));\n\n    matrix.new Column(tokenFactory(\"in\", 1));\n    matrix.new Column(tokenFactory(\"the\", 1));\n    matrix.new Column(tokenFactory(\"croud\", 1));\n\n    TokenStream ts = new ShingleMatrixFilter(matrix, 2, 4, new Character('_'), true, new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec());\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    final Token reusableToken = new Token();\n    assertNext(ts, \"no_surprise\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"no_surprise_to\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"no_surprise_to_see\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"surprise_to\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"surprise_to_see\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"surprise_to_see_england\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"to_see\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"to_see_england\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"to_see_england_manager\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"see_england\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"see_england_manager_svennis\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"england_manager_svennis\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_svennis_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_svennis\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_svennis_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_svennis_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"svennis_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"svennis_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"svennis_in_the_croud\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"in_the\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"in_the_croud\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"the_croud\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager_sven\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager_sven\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_sven_göran\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_sven\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_sven_göran\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_sven_göran_eriksson\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"sven_göran\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"göran_eriksson\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"eriksson_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"eriksson_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"eriksson_in_the_croud\", 1, 2.0f, 0, 0);\n\n    assertFalse(ts.incrementToken());\n\n  }\n\n","sourceOld":"  /**\n   * Tests creat shingles from a pre-assembled matrix\n   *\n   * Tests the row token z-axis, multi token synonyms.\n   *\n   * @throws IOException\n   */\n  public void testMatrix() throws IOException {\n\n    Matrix matrix = new Matrix();\n\n    matrix.new Column(tokenFactory(\"no\", 1));\n    matrix.new Column(tokenFactory(\"surprise\", 1));\n    matrix.new Column(tokenFactory(\"to\", 1));\n    matrix.new Column(tokenFactory(\"see\", 1));\n    matrix.new Column(tokenFactory(\"england\", 1));\n    matrix.new Column(tokenFactory(\"manager\", 1));\n\n    Column col = matrix.new Column();\n\n    // sven göran eriksson is a multi token synonym to svennis\n    col.new Row().getTokens().add(tokenFactory(\"svennis\", 1));\n\n    Column.Row row = col.new Row();\n    row.getTokens().add(tokenFactory(\"sven\", 1));\n    row.getTokens().add(tokenFactory(\"göran\", 1));\n    row.getTokens().add(tokenFactory(\"eriksson\", 1));\n\n    matrix.new Column(tokenFactory(\"in\", 1));\n    matrix.new Column(tokenFactory(\"the\", 1));\n    matrix.new Column(tokenFactory(\"croud\", 1));\n\n    TokenStream ts = new ShingleMatrixFilter(matrix, 2, 4, new Character('_'), true, new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec());\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    final Token reusableToken = new Token();\n    assertNext(ts, \"no_surprise\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"no_surprise_to\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"no_surprise_to_see\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"surprise_to\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"surprise_to_see\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"surprise_to_see_england\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"to_see\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"to_see_england\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"to_see_england_manager\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"see_england\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"see_england_manager_svennis\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"england_manager_svennis\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_svennis_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_svennis\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_svennis_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_svennis_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"svennis_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"svennis_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"svennis_in_the_croud\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"in_the\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"in_the_croud\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"the_croud\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager_sven\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager_sven\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_sven_göran\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_sven\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_sven_göran\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_sven_göran_eriksson\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"sven_göran\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"göran_eriksson\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"eriksson_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"eriksson_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"eriksson_in_the_croud\", 1, 2.0f, 0, 0);\n\n    assertFalse(ts.incrementToken());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"054f92bb0a8ff8d94755c13351fbfc928e3e9760","date":1252294178,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testMatrix().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testMatrix().mjava","sourceNew":"  /**\n   * Tests creat shingles from a pre-assembled matrix\n   *\n   * Tests the row token z-axis, multi token synonyms.\n   *\n   * @throws IOException\n   */\n  public void testMatrix() throws IOException {\n    // some other tests set this to null.\n    // set it here in case tests are run out of the usual order.\n    ShingleMatrixFilter.defaultSettingsCodec = new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n    Matrix matrix = new Matrix();\n\n    matrix.new Column(tokenFactory(\"no\", 1));\n    matrix.new Column(tokenFactory(\"surprise\", 1));\n    matrix.new Column(tokenFactory(\"to\", 1));\n    matrix.new Column(tokenFactory(\"see\", 1));\n    matrix.new Column(tokenFactory(\"england\", 1));\n    matrix.new Column(tokenFactory(\"manager\", 1));\n\n    Column col = matrix.new Column();\n\n    // sven göran eriksson is a multi token synonym to svennis\n    col.new Row().getTokens().add(tokenFactory(\"svennis\", 1));\n\n    Column.Row row = col.new Row();\n    row.getTokens().add(tokenFactory(\"sven\", 1));\n    row.getTokens().add(tokenFactory(\"göran\", 1));\n    row.getTokens().add(tokenFactory(\"eriksson\", 1));\n\n    matrix.new Column(tokenFactory(\"in\", 1));\n    matrix.new Column(tokenFactory(\"the\", 1));\n    matrix.new Column(tokenFactory(\"croud\", 1));\n\n    TokenStream ts = new ShingleMatrixFilter(matrix, 2, 4, new Character('_'), true, new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec());\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"no_surprise\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"no_surprise_to\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"no_surprise_to_see\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"surprise_to\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"surprise_to_see\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"surprise_to_see_england\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"to_see\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"to_see_england\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"to_see_england_manager\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"see_england\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"see_england_manager_svennis\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"england_manager_svennis\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_svennis_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_svennis\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_svennis_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_svennis_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"svennis_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"svennis_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"svennis_in_the_croud\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"in_the\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"in_the_croud\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"the_croud\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager_sven\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager_sven\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_sven_göran\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_sven\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_sven_göran\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_sven_göran_eriksson\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"sven_göran\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"göran_eriksson\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"eriksson_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"eriksson_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"eriksson_in_the_croud\", 1, 2.0f, 0, 0);\n\n    assertFalse(ts.incrementToken());\n\n  }\n\n","sourceOld":"  /**\n   * Tests creat shingles from a pre-assembled matrix\n   *\n   * Tests the row token z-axis, multi token synonyms.\n   *\n   * @throws IOException\n   */\n  public void testMatrix() throws IOException {\n    // some other tests set this to null.\n    // set it here in case tests are run out of the usual order.\n    ShingleMatrixFilter.defaultSettingsCodec = new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n    Matrix matrix = new Matrix();\n\n    matrix.new Column(tokenFactory(\"no\", 1));\n    matrix.new Column(tokenFactory(\"surprise\", 1));\n    matrix.new Column(tokenFactory(\"to\", 1));\n    matrix.new Column(tokenFactory(\"see\", 1));\n    matrix.new Column(tokenFactory(\"england\", 1));\n    matrix.new Column(tokenFactory(\"manager\", 1));\n\n    Column col = matrix.new Column();\n\n    // sven göran eriksson is a multi token synonym to svennis\n    col.new Row().getTokens().add(tokenFactory(\"svennis\", 1));\n\n    Column.Row row = col.new Row();\n    row.getTokens().add(tokenFactory(\"sven\", 1));\n    row.getTokens().add(tokenFactory(\"göran\", 1));\n    row.getTokens().add(tokenFactory(\"eriksson\", 1));\n\n    matrix.new Column(tokenFactory(\"in\", 1));\n    matrix.new Column(tokenFactory(\"the\", 1));\n    matrix.new Column(tokenFactory(\"croud\", 1));\n\n    TokenStream ts = new ShingleMatrixFilter(matrix, 2, 4, new Character('_'), true, new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec());\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    final Token reusableToken = new Token();\n    assertNext(ts, \"no_surprise\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"no_surprise_to\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"no_surprise_to_see\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"surprise_to\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"surprise_to_see\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"surprise_to_see_england\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"to_see\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"to_see_england\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"to_see_england_manager\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"see_england\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"see_england_manager_svennis\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"england_manager_svennis\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_svennis_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_svennis\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_svennis_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_svennis_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"svennis_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"svennis_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"svennis_in_the_croud\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"in_the\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"in_the_croud\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"the_croud\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager_sven\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager_sven\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_sven_göran\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_sven\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_sven_göran\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_sven_göran_eriksson\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"sven_göran\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"göran_eriksson\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"eriksson_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"eriksson_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"eriksson_in_the_croud\", 1, 2.0f, 0, 0);\n\n    assertFalse(ts.incrementToken());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testMatrix().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testMatrix().mjava","sourceNew":"  /**\n   * Tests creat shingles from a pre-assembled matrix\n   *\n   * Tests the row token z-axis, multi token synonyms.\n   *\n   * @throws IOException\n   */\n  public void testMatrix() throws IOException {\n    // some other tests set this to null.\n    // set it here in case tests are run out of the usual order.\n    ShingleMatrixFilter.defaultSettingsCodec = new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n    Matrix matrix = new Matrix();\n\n    matrix.new Column(tokenFactory(\"no\", 1));\n    matrix.new Column(tokenFactory(\"surprise\", 1));\n    matrix.new Column(tokenFactory(\"to\", 1));\n    matrix.new Column(tokenFactory(\"see\", 1));\n    matrix.new Column(tokenFactory(\"england\", 1));\n    matrix.new Column(tokenFactory(\"manager\", 1));\n\n    Column col = matrix.new Column();\n\n    // sven göran eriksson is a multi token synonym to svennis\n    col.new Row().getTokens().add(tokenFactory(\"svennis\", 1));\n\n    Column.Row row = col.new Row();\n    row.getTokens().add(tokenFactory(\"sven\", 1));\n    row.getTokens().add(tokenFactory(\"göran\", 1));\n    row.getTokens().add(tokenFactory(\"eriksson\", 1));\n\n    matrix.new Column(tokenFactory(\"in\", 1));\n    matrix.new Column(tokenFactory(\"the\", 1));\n    matrix.new Column(tokenFactory(\"croud\", 1));\n\n    TokenStream ts = new ShingleMatrixFilter(matrix, 2, 4, new Character('_'), true, new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec());\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"no_surprise\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"no_surprise_to\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"no_surprise_to_see\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"surprise_to\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"surprise_to_see\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"surprise_to_see_england\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"to_see\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"to_see_england\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"to_see_england_manager\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"see_england\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"see_england_manager_svennis\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"england_manager_svennis\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_svennis_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_svennis\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_svennis_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_svennis_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"svennis_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"svennis_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"svennis_in_the_croud\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"in_the\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"in_the_croud\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"the_croud\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager_sven\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager_sven\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_sven_göran\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_sven\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_sven_göran\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_sven_göran_eriksson\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"sven_göran\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"göran_eriksson\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"eriksson_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"eriksson_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"eriksson_in_the_croud\", 1, 2.0f, 0, 0);\n\n    assertFalse(ts.incrementToken());\n\n  }\n\n","sourceOld":"  /**\n   * Tests creat shingles from a pre-assembled matrix\n   *\n   * Tests the row token z-axis, multi token synonyms.\n   *\n   * @throws IOException\n   */\n  public void testMatrix() throws IOException {\n    // some other tests set this to null.\n    // set it here in case tests are run out of the usual order.\n    ShingleMatrixFilter.defaultSettingsCodec = new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec();\n    Matrix matrix = new Matrix();\n\n    matrix.new Column(tokenFactory(\"no\", 1));\n    matrix.new Column(tokenFactory(\"surprise\", 1));\n    matrix.new Column(tokenFactory(\"to\", 1));\n    matrix.new Column(tokenFactory(\"see\", 1));\n    matrix.new Column(tokenFactory(\"england\", 1));\n    matrix.new Column(tokenFactory(\"manager\", 1));\n\n    Column col = matrix.new Column();\n\n    // sven göran eriksson is a multi token synonym to svennis\n    col.new Row().getTokens().add(tokenFactory(\"svennis\", 1));\n\n    Column.Row row = col.new Row();\n    row.getTokens().add(tokenFactory(\"sven\", 1));\n    row.getTokens().add(tokenFactory(\"göran\", 1));\n    row.getTokens().add(tokenFactory(\"eriksson\", 1));\n\n    matrix.new Column(tokenFactory(\"in\", 1));\n    matrix.new Column(tokenFactory(\"the\", 1));\n    matrix.new Column(tokenFactory(\"croud\", 1));\n\n    TokenStream ts = new ShingleMatrixFilter(matrix, 2, 4, new Character('_'), true, new ShingleMatrixFilter.SimpleThreeDimensionalTokenSettingsCodec());\n\n//  for (Token token = ts.next(new Token()); token != null; token = ts.next(token)) {\n//      System.out.println(\"assertNext(ts, \\\"\" + token.term() + \"\\\", \" + token.getPositionIncrement() + \", \" + (token.getPayload() == null ? \"1.0\" : PayloadHelper.decodeFloat(token.getPayload().getData())) + \"f, \" + token.startOffset() + \", \" + token.endOffset() + \");\");\n//      token.clear();\n//    }\n\n    assertNext(ts, \"no_surprise\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"no_surprise_to\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"no_surprise_to_see\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"surprise_to\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"surprise_to_see\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"surprise_to_see_england\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"to_see\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"to_see_england\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"to_see_england_manager\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"see_england\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"see_england_manager_svennis\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"england_manager_svennis\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_svennis_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_svennis\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_svennis_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_svennis_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"svennis_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"svennis_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"svennis_in_the_croud\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"in_the\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"in_the_croud\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"the_croud\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"see_england_manager_sven\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"england_manager_sven\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"england_manager_sven_göran\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"manager_sven\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"manager_sven_göran\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"manager_sven_göran_eriksson\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"sven_göran\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"sven_göran_eriksson_in\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"göran_eriksson\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"göran_eriksson_in_the\", 1, 2.0f, 0, 0);\n    assertNext(ts, \"eriksson_in\", 1, 1.4142135f, 0, 0);\n    assertNext(ts, \"eriksson_in_the\", 1, 1.7320508f, 0, 0);\n    assertNext(ts, \"eriksson_in_the_croud\", 1, 2.0f, 0, 0);\n\n    assertFalse(ts.incrementToken());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45b06c3ff8a4d9d3d751dd311e51c59303c2719c":["0dda87e5ad7246b25d0da56a16ead95360499d86"],"0dda87e5ad7246b25d0da56a16ead95360499d86":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"054f92bb0a8ff8d94755c13351fbfc928e3e9760":["45b06c3ff8a4d9d3d751dd311e51c59303c2719c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["054f92bb0a8ff8d94755c13351fbfc928e3e9760"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["0dda87e5ad7246b25d0da56a16ead95360499d86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"45b06c3ff8a4d9d3d751dd311e51c59303c2719c":["054f92bb0a8ff8d94755c13351fbfc928e3e9760"],"0dda87e5ad7246b25d0da56a16ead95360499d86":["45b06c3ff8a4d9d3d751dd311e51c59303c2719c"],"054f92bb0a8ff8d94755c13351fbfc928e3e9760":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}