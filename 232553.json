{"path":"solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","commits":[{"id":"cdcf766020b9b159d0b3a6ecae90ff1998ded019","date":1286818331,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +homer +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 5);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertTrue(collations.size()==2);\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    \t\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ea00b25de0d094d032e218976854c250141e7150","ea00b25de0d094d032e218976854c250141e7150","ea00b25de0d094d032e218976854c250141e7150","31aff65a420ac3dfd25611e2c4a99d38b7dd60e9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +homer +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 5);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertTrue(collations.size()==2);\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    \t\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31aff65a420ac3dfd25611e2c4a99d38b7dd60e9","date":1307387688,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","sourceNew":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +homer +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertTrue(collations.size()==2);\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    \t\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +homer +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 5);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertTrue(collations.size()==2);\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    \t\n    }\n    \n  }\n\n","bugFix":["cdcf766020b9b159d0b3a6ecae90ff1998ded019"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","sourceNew":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +homer +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertTrue(collations.size()==2);\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    \t\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +homer +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 5);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertTrue(collations.size()==2);\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    \t\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","sourceNew":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +homer +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertTrue(collations.size()==2);\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    \t\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +homer +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 5);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertTrue(collations.size()==2);\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    \t\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","sourceNew":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +homer +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertTrue(collations.size()==2);\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    \t\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +homer +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertTrue(collations.size()==2);\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    \t\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","sourceNew":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +homer +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertTrue(collations.size()==2);\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    \t\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +homer +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertTrue(collations.size()==2);\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    \t\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","sourceNew":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +homer +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertTrue(collations.size()==2);\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    \t\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +homer +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertTrue(collations.size()==2);\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    \t\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["cdcf766020b9b159d0b3a6ecae90ff1998ded019","31aff65a420ac3dfd25611e2c4a99d38b7dd60e9"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"31aff65a420ac3dfd25611e2c4a99d38b7dd60e9":["cdcf766020b9b159d0b3a6ecae90ff1998ded019"],"cdcf766020b9b159d0b3a6ecae90ff1998ded019":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["31aff65a420ac3dfd25611e2c4a99d38b7dd60e9","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["cdcf766020b9b159d0b3a6ecae90ff1998ded019","31aff65a420ac3dfd25611e2c4a99d38b7dd60e9"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["31aff65a420ac3dfd25611e2c4a99d38b7dd60e9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cdcf766020b9b159d0b3a6ecae90ff1998ded019"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"cdcf766020b9b159d0b3a6ecae90ff1998ded019":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","31aff65a420ac3dfd25611e2c4a99d38b7dd60e9","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"31aff65a420ac3dfd25611e2c4a99d38b7dd60e9":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c26f00b574427b55127e869b935845554afde1fa","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cdcf766020b9b159d0b3a6ecae90ff1998ded019","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}