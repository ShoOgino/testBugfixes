{"path":"solr/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharArr).mjava","commits":[{"id":"e03427f33820a2bde791de703292dcdfe2d6bdd6","date":1274819813,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharArr).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void indexedToReadable(BytesRef input, CharArr out) {\n    BytesRef indexedForm = input;\n    String s;\n\n    switch (type) {\n      case INTEGER:\n        s = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        s = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        s = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        s = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        s = dateField.formatDate( new Date(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    out.write(s);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab0e9f7ce724e6aea1fea746dded19e76d231cf8","date":1304774078,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharArr).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharArr).mjava","sourceNew":"  @Override\n  public void indexedToReadable(BytesRef input, CharArr out) {\n    BytesRef indexedForm = input;\n    String s;\n\n    switch (type) {\n      case INTEGER:\n        s = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        s = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        s = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        s = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        s = dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    out.write(s);\n  }\n\n","sourceOld":"  @Override\n  public void indexedToReadable(BytesRef input, CharArr out) {\n    BytesRef indexedForm = input;\n    String s;\n\n    switch (type) {\n      case INTEGER:\n        s = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        s = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        s = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        s = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        s = dateField.formatDate( new Date(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    out.write(s);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharArr).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharArr).mjava","sourceNew":"  @Override\n  public void indexedToReadable(BytesRef input, CharArr out) {\n    BytesRef indexedForm = input;\n    String s;\n\n    switch (type) {\n      case INTEGER:\n        s = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        s = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        s = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        s = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        s = dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    out.write(s);\n  }\n\n","sourceOld":"  @Override\n  public void indexedToReadable(BytesRef input, CharArr out) {\n    BytesRef indexedForm = input;\n    String s;\n\n    switch (type) {\n      case INTEGER:\n        s = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        s = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        s = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        s = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        s = dateField.formatDate( new Date(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    out.write(s);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharArr).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharArr).mjava","sourceNew":"  @Override\n  public void indexedToReadable(BytesRef input, CharArr out) {\n    BytesRef indexedForm = input;\n    String s;\n\n    switch (type) {\n      case INTEGER:\n        s = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        s = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        s = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        s = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        s = dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    out.write(s);\n  }\n\n","sourceOld":"  @Override\n  public void indexedToReadable(BytesRef input, CharArr out) {\n    BytesRef indexedForm = input;\n    String s;\n\n    switch (type) {\n      case INTEGER:\n        s = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        s = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        s = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        s = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        s = dateField.formatDate( new Date(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    out.write(s);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b3a24d5d9b47345473ff564f5cc127a7b526b4","date":1306277076,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRef).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharArr).mjava","sourceNew":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRef charsRef) {\n    final char[] value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) ).toCharArray();\n        break;\n      case FLOAT:\n        value = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) ).toCharArray();\n        break;\n      case LONG:\n        value = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) ).toCharArray();\n        break;\n      case DOUBLE:\n        value = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) ).toCharArray();\n        break;\n      case DATE:\n        value = dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) ).toCharArray();\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.copy(value, 0, value.length);\n    return charsRef;\n  }\n\n","sourceOld":"  @Override\n  public void indexedToReadable(BytesRef input, CharArr out) {\n    BytesRef indexedForm = input;\n    String s;\n\n    switch (type) {\n      case INTEGER:\n        s = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        s = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        s = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        s = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        s = dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    out.write(s);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRef).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharArr).mjava","sourceNew":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRef charsRef) {\n    final char[] value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) ).toCharArray();\n        break;\n      case FLOAT:\n        value = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) ).toCharArray();\n        break;\n      case LONG:\n        value = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) ).toCharArray();\n        break;\n      case DOUBLE:\n        value = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) ).toCharArray();\n        break;\n      case DATE:\n        value = dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) ).toCharArray();\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.copy(value, 0, value.length);\n    return charsRef;\n  }\n\n","sourceOld":"  @Override\n  public void indexedToReadable(BytesRef input, CharArr out) {\n    BytesRef indexedForm = input;\n    String s;\n\n    switch (type) {\n      case INTEGER:\n        s = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        s = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        s = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        s = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        s = dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    out.write(s);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRef).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharArr).mjava","sourceNew":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRef charsRef) {\n    final char[] value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) ).toCharArray();\n        break;\n      case FLOAT:\n        value = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) ).toCharArray();\n        break;\n      case LONG:\n        value = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) ).toCharArray();\n        break;\n      case DOUBLE:\n        value = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) ).toCharArray();\n        break;\n      case DATE:\n        value = dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) ).toCharArray();\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.copy(value, 0, value.length);\n    return charsRef;\n  }\n\n","sourceOld":"  @Override\n  public void indexedToReadable(BytesRef input, CharArr out) {\n    BytesRef indexedForm = input;\n    String s;\n\n    switch (type) {\n      case INTEGER:\n        s = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        s = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        s = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        s = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        s = dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    out.write(s);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["e03427f33820a2bde791de703292dcdfe2d6bdd6"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["e03427f33820a2bde791de703292dcdfe2d6bdd6","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["e03427f33820a2bde791de703292dcdfe2d6bdd6","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"e03427f33820a2bde791de703292dcdfe2d6bdd6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"]},"commit2Childs":{"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","a1b3a24d5d9b47345473ff564f5cc127a7b526b4"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e03427f33820a2bde791de703292dcdfe2d6bdd6"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a1b3a24d5d9b47345473ff564f5cc127a7b526b4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"e03427f33820a2bde791de703292dcdfe2d6bdd6":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}