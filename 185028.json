{"path":"solr/core/src/test/org/apache/solr/util/hll/ProbabilisticTestUtil#getRegisterValue(long,int).mjava","commits":[{"id":"6faa211c4af605e3cf078a76d200c1dc348973f5","date":1437043657,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/ProbabilisticTestUtil#getRegisterValue(long,int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Extracts the HLL register value from a raw value.\n     */\n    public static byte getRegisterValue(final long rawValue, final int log2m) {\n        final long substreamValue = (rawValue >>> log2m);\n        final byte p_w;\n\n        if (substreamValue == 0L) {\n            // The paper does not cover p(0x0), so the special value 0 is used.\n            // 0 is the original initialization value of the registers, so by\n            // doing this the HLL simply ignores it. This is acceptable\n            // because the probability is 1/(2^(2^registerSizeInBits)).\n            p_w = 0;\n        } else {\n            p_w = (byte)Math.min(1 + BitUtil.leastSignificantBit(substreamValue), 31);\n        }\n\n        return p_w;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/ProbabilisticTestUtil#getRegisterValue(long,int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Extracts the HLL register value from a raw value.\n     */\n    public static byte getRegisterValue(final long rawValue, final int log2m) {\n        final long substreamValue = (rawValue >>> log2m);\n        final byte p_w;\n\n        if (substreamValue == 0L) {\n            // The paper does not cover p(0x0), so the special value 0 is used.\n            // 0 is the original initialization value of the registers, so by\n            // doing this the HLL simply ignores it. This is acceptable\n            // because the probability is 1/(2^(2^registerSizeInBits)).\n            p_w = 0;\n        } else {\n            p_w = (byte)Math.min(1 + BitUtil.leastSignificantBit(substreamValue), 31);\n        }\n\n        return p_w;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6faa211c4af605e3cf078a76d200c1dc348973f5"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6faa211c4af605e3cf078a76d200c1dc348973f5"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}