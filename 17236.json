{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.ClientSnitchCtx#invoke(String,String,SolrParams).mjava","commits":[{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.ClientSnitchCtx#invoke(String,String,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.ClientSnitchCtx#invoke(String,String,SolrParams).mjava","sourceNew":"    public SimpleSolrResponse invoke(String solrNode, String path, SolrParams params)\n        throws IOException, SolrServerException {\n      String url = zkClientClusterStateProvider.getZkStateReader().getBaseUrlForNodeName(solrNode);\n\n      GenericSolrRequest request = new GenericSolrRequest(SolrRequest.METHOD.GET, path, params);\n      try (HttpSolrClient client = new HttpSolrClient.Builder()\n          .withHttpClient(solrClient.getHttpClient())\n          .withBaseSolrUrl(url)\n          .withResponseParser(new BinaryResponseParser())\n          .build()) {\n        NamedList<Object> rsp = client.request(request);\n        request.response.nl = rsp;\n        return request.response;\n      }\n    }\n\n","sourceOld":"    public SimpleSolrResponse invoke(String solrNode, String path, SolrParams params)\n        throws IOException, SolrServerException {\n      String url = zkClientClusterStateProvider.getZkStateReader().getBaseUrlForNodeName(solrNode);\n\n      GenericSolrRequest request = new GenericSolrRequest(SolrRequest.METHOD.GET, path, params);\n      try (HttpSolrClient client = new HttpSolrClient.Builder()\n          .withHttpClient(solrClient.getHttpClient())\n          .withBaseSolrUrl(url)\n          .withResponseParser(new BinaryResponseParser())\n          .build()) {\n        NamedList<Object> rsp = client.request(request);\n        request.response.nl = rsp;\n        return request.response;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceb6c985c67eee88c5a7718658e45d25a7d7e200","date":1538670758,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.ClientSnitchCtx#invoke(String,String,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider.ClientSnitchCtx#invoke(String,String,SolrParams).mjava","sourceNew":"    public SimpleSolrResponse invoke(String solrNode, String path, SolrParams params)\n        throws IOException, SolrServerException {\n      String url = zkClientClusterStateProvider.getZkStateReader().getBaseUrlForNodeName(solrNode);\n\n      GenericSolrRequest request = new GenericSolrRequest(SolrRequest.METHOD.POST, path, params);\n      try (HttpSolrClient client = new HttpSolrClient.Builder()\n          .withHttpClient(solrClient.getHttpClient())\n          .withBaseSolrUrl(url)\n          .withResponseParser(new BinaryResponseParser())\n          .build()) {\n        NamedList<Object> rsp = client.request(request);\n        request.response.nl = rsp;\n        return request.response;\n      }\n    }\n\n","sourceOld":"    public SimpleSolrResponse invoke(String solrNode, String path, SolrParams params)\n        throws IOException, SolrServerException {\n      String url = zkClientClusterStateProvider.getZkStateReader().getBaseUrlForNodeName(solrNode);\n\n      GenericSolrRequest request = new GenericSolrRequest(SolrRequest.METHOD.GET, path, params);\n      try (HttpSolrClient client = new HttpSolrClient.Builder()\n          .withHttpClient(solrClient.getHttpClient())\n          .withBaseSolrUrl(url)\n          .withResponseParser(new BinaryResponseParser())\n          .build()) {\n        NamedList<Object> rsp = client.request(request);\n        request.response.nl = rsp;\n        return request.response;\n      }\n    }\n\n","bugFix":["a513b6a92751e54c76fb5447948c9e7d437163a7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ceb6c985c67eee88c5a7718658e45d25a7d7e200":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ceb6c985c67eee88c5a7718658e45d25a7d7e200"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["ceb6c985c67eee88c5a7718658e45d25a7d7e200"],"ceb6c985c67eee88c5a7718658e45d25a7d7e200":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}