{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter#incrementToken().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter#incrementToken().mjava","sourceNew":"  /**\n   * Increments the {@link TokenStream} with a {@link TermAttribute} without elisioned start\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      int termLength = termAtt.termLength();\n\n      int minPoz = Integer.MAX_VALUE;\n      for (int i = 0; i < apostrophes.length; i++) {\n        char apos = apostrophes[i];\n        // The equivalent of String.indexOf(ch)\n        for (int poz = 0; poz < termLength ; poz++) {\n          if (termBuffer[poz] == apos) {\n            minPoz = Math.min(poz, minPoz);\n            break;\n          }\n        }\n      }\n\n      // An apostrophe has been found. If the prefix is an article strip it off.\n      if (minPoz != Integer.MAX_VALUE\n          && articles.contains(termAtt.termBuffer(), 0, minPoz)) {\n        termAtt.setTermBuffer(termAtt.termBuffer(), minPoz + 1, termAtt.termLength() - (minPoz + 1));\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Increments the {@link TokenStream} with a {@link TermAttribute} without elisioned start\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      int termLength = termAtt.termLength();\n\n      int minPoz = Integer.MAX_VALUE;\n      for (int i = 0; i < apostrophes.length; i++) {\n        char apos = apostrophes[i];\n        // The equivalent of String.indexOf(ch)\n        for (int poz = 0; poz < termLength ; poz++) {\n          if (termBuffer[poz] == apos) {\n            minPoz = Math.min(poz, minPoz);\n            break;\n          }\n        }\n      }\n\n      // An apostrophe has been found. If the prefix is an article strip it off.\n      if (minPoz != Integer.MAX_VALUE\n          && articles.contains(termAtt.termBuffer(), 0, minPoz)) {\n        termAtt.setTermBuffer(termAtt.termBuffer(), minPoz + 1, termAtt.termLength() - (minPoz + 1));\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter#incrementToken().mjava","sourceNew":"  /**\n   * Increments the {@link TokenStream} with a {@link CharTermAttribute} without elisioned start\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.buffer();\n      int termLength = termAtt.length();\n\n      int minPoz = Integer.MAX_VALUE;\n      for (int i = 0; i < apostrophes.length; i++) {\n        char apos = apostrophes[i];\n        // The equivalent of String.indexOf(ch)\n        for (int poz = 0; poz < termLength ; poz++) {\n          if (termBuffer[poz] == apos) {\n            minPoz = Math.min(poz, minPoz);\n            break;\n          }\n        }\n      }\n\n      // An apostrophe has been found. If the prefix is an article strip it off.\n      if (minPoz != Integer.MAX_VALUE\n          && articles.contains(termAtt.buffer(), 0, minPoz)) {\n        termAtt.copyBuffer(termAtt.buffer(), minPoz + 1, termAtt.length() - (minPoz + 1));\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Increments the {@link TokenStream} with a {@link TermAttribute} without elisioned start\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      int termLength = termAtt.termLength();\n\n      int minPoz = Integer.MAX_VALUE;\n      for (int i = 0; i < apostrophes.length; i++) {\n        char apos = apostrophes[i];\n        // The equivalent of String.indexOf(ch)\n        for (int poz = 0; poz < termLength ; poz++) {\n          if (termBuffer[poz] == apos) {\n            minPoz = Math.min(poz, minPoz);\n            break;\n          }\n        }\n      }\n\n      // An apostrophe has been found. If the prefix is an article strip it off.\n      if (minPoz != Integer.MAX_VALUE\n          && articles.contains(termAtt.termBuffer(), 0, minPoz)) {\n        termAtt.setTermBuffer(termAtt.termBuffer(), minPoz + 1, termAtt.termLength() - (minPoz + 1));\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter#incrementToken().mjava","sourceNew":"  /**\n   * Increments the {@link TokenStream} with a {@link CharTermAttribute} without elisioned start\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.buffer();\n      int termLength = termAtt.length();\n\n      int minPoz = Integer.MAX_VALUE;\n      for (int i = 0; i < apostrophes.length; i++) {\n        char apos = apostrophes[i];\n        // The equivalent of String.indexOf(ch)\n        for (int poz = 0; poz < termLength ; poz++) {\n          if (termBuffer[poz] == apos) {\n            minPoz = Math.min(poz, minPoz);\n            break;\n          }\n        }\n      }\n\n      // An apostrophe has been found. If the prefix is an article strip it off.\n      if (minPoz != Integer.MAX_VALUE\n          && articles.contains(termAtt.buffer(), 0, minPoz)) {\n        termAtt.copyBuffer(termAtt.buffer(), minPoz + 1, termAtt.length() - (minPoz + 1));\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Increments the {@link TokenStream} with a {@link CharTermAttribute} without elisioned start\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.buffer();\n      int termLength = termAtt.length();\n\n      int minPoz = Integer.MAX_VALUE;\n      for (int i = 0; i < apostrophes.length; i++) {\n        char apos = apostrophes[i];\n        // The equivalent of String.indexOf(ch)\n        for (int poz = 0; poz < termLength ; poz++) {\n          if (termBuffer[poz] == apos) {\n            minPoz = Math.min(poz, minPoz);\n            break;\n          }\n        }\n      }\n\n      // An apostrophe has been found. If the prefix is an article strip it off.\n      if (minPoz != Integer.MAX_VALUE\n          && articles.contains(termAtt.buffer(), 0, minPoz)) {\n        termAtt.copyBuffer(termAtt.buffer(), minPoz + 1, termAtt.length() - (minPoz + 1));\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}