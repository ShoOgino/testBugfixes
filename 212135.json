{"path":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.OneComparatorNonScoringCollector#collect(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.OneComparatorNonScoringCollector#collect(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TopFieldCollector.OneComparatorNonScoringCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      ++totalHits;\n      if (queueFull) {\n        if ((reverseMul * comparator.compareBottom(doc)) <= 0) {\n          // since docs are visited in doc Id order, if compare is 0, it means\n          // this document is largest than anything else in the queue, and\n          // therefore not competitive.\n          return;\n        }\n        \n        // This hit is competitive - replace bottom element in queue & adjustTop\n        comparator.copy(bottom.slot, doc);\n        updateBottom(doc);\n        comparator.setBottom(bottom.slot);\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        comparator.copy(slot, doc);\n        add(slot, doc, Float.NaN);\n        if (queueFull) {\n          comparator.setBottom(bottom.slot);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      ++totalHits;\n      if (queueFull) {\n        if ((reverseMul * comparator.compareBottom(doc)) <= 0) {\n          // since docs are visited in doc Id order, if compare is 0, it means\n          // this document is largest than anything else in the queue, and\n          // therefore not competitive.\n          return;\n        }\n        \n        // This hit is competitive - replace bottom element in queue & adjustTop\n        comparator.copy(bottom.slot, doc);\n        updateBottom(doc);\n        comparator.setBottom(bottom.slot);\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        comparator.copy(slot, doc);\n        add(slot, doc, Float.NaN);\n        if (queueFull) {\n          comparator.setBottom(bottom.slot);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7523dd562634d9145b67eb4c8b3b3db2340532b","date":1330467618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.OneComparatorNonScoringCollector#collect(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.OneComparatorNonScoringCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      ++totalHits;\n      if (queueFull) {\n        if ((reverseMul * comparator.compareBottom(doc)) <= 0) {\n          // since docs are visited in doc Id order, if compare is 0, it means\n          // this document is larger than anything else in the queue, and\n          // therefore not competitive.\n          return;\n        }\n        \n        // This hit is competitive - replace bottom element in queue & adjustTop\n        comparator.copy(bottom.slot, doc);\n        updateBottom(doc);\n        comparator.setBottom(bottom.slot);\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        comparator.copy(slot, doc);\n        add(slot, doc, Float.NaN);\n        if (queueFull) {\n          comparator.setBottom(bottom.slot);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      ++totalHits;\n      if (queueFull) {\n        if ((reverseMul * comparator.compareBottom(doc)) <= 0) {\n          // since docs are visited in doc Id order, if compare is 0, it means\n          // this document is largest than anything else in the queue, and\n          // therefore not competitive.\n          return;\n        }\n        \n        // This hit is competitive - replace bottom element in queue & adjustTop\n        comparator.copy(bottom.slot, doc);\n        updateBottom(doc);\n        comparator.setBottom(bottom.slot);\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        comparator.copy(slot, doc);\n        add(slot, doc, Float.NaN);\n        if (queueFull) {\n          comparator.setBottom(bottom.slot);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.OneComparatorNonScoringCollector#collect(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.OneComparatorNonScoringCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      ++totalHits;\n      if (queueFull) {\n        if ((reverseMul * comparator.compareBottom(doc)) <= 0) {\n          // since docs are visited in doc Id order, if compare is 0, it means\n          // this document is larger than anything else in the queue, and\n          // therefore not competitive.\n          return;\n        }\n        \n        // This hit is competitive - replace bottom element in queue & adjustTop\n        comparator.copy(bottom.slot, doc);\n        updateBottom(doc);\n        comparator.setBottom(bottom.slot);\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        comparator.copy(slot, doc);\n        add(slot, doc, Float.NaN);\n        if (queueFull) {\n          comparator.setBottom(bottom.slot);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      ++totalHits;\n      if (queueFull) {\n        if ((reverseMul * comparator.compareBottom(doc)) <= 0) {\n          // since docs are visited in doc Id order, if compare is 0, it means\n          // this document is largest than anything else in the queue, and\n          // therefore not competitive.\n          return;\n        }\n        \n        // This hit is competitive - replace bottom element in queue & adjustTop\n        comparator.copy(bottom.slot, doc);\n        updateBottom(doc);\n        comparator.setBottom(bottom.slot);\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        comparator.copy(slot, doc);\n        add(slot, doc, Float.NaN);\n        if (queueFull) {\n          comparator.setBottom(bottom.slot);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"901e951cec2e6af4e503209a6721c8834db23279","date":1420556599,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.OneComparatorNonScoringCollector#collect(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      ++totalHits;\n      if (queueFull) {\n        if ((reverseMul * comparator.compareBottom(doc)) <= 0) {\n          // since docs are visited in doc Id order, if compare is 0, it means\n          // this document is larger than anything else in the queue, and\n          // therefore not competitive.\n          return;\n        }\n        \n        // This hit is competitive - replace bottom element in queue & adjustTop\n        comparator.copy(bottom.slot, doc);\n        updateBottom(doc);\n        comparator.setBottom(bottom.slot);\n      } else {\n        // Startup transient: queue hasn't gathered numHits yet\n        final int slot = totalHits - 1;\n        // Copy hit into queue\n        comparator.copy(slot, doc);\n        add(slot, doc, Float.NaN);\n        if (queueFull) {\n          comparator.setBottom(bottom.slot);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b7523dd562634d9145b67eb4c8b3b3db2340532b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"901e951cec2e6af4e503209a6721c8834db23279":["b7523dd562634d9145b67eb4c8b3b3db2340532b"],"b7523dd562634d9145b67eb4c8b3b3db2340532b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["901e951cec2e6af4e503209a6721c8834db23279"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b7523dd562634d9145b67eb4c8b3b3db2340532b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"901e951cec2e6af4e503209a6721c8834db23279":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7523dd562634d9145b67eb4c8b3b3db2340532b":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","901e951cec2e6af4e503209a6721c8834db23279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}