{"path":"lucene/core/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","sourceNew":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer(random));\n    config.setCodec(_TestUtil.alwaysPostingsFormat(new MockSepPostingsFormat()));\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setOmitNorms(true);\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", customType));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.forceMerge(1);\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer(random));\n    config.setCodec(_TestUtil.alwaysPostingsFormat(new MockSepPostingsFormat()));\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setOmitNorms(true);\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", customType));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.forceMerge(1);\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","sourceNew":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer(random()));\n    config.setCodec(_TestUtil.alwaysPostingsFormat(new MockSepPostingsFormat()));\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setOmitNorms(true);\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", customType));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.forceMerge(1);\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer(random));\n    config.setCodec(_TestUtil.alwaysPostingsFormat(new MockSepPostingsFormat()));\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setOmitNorms(true);\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", customType));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.forceMerge(1);\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","sourceNew":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n      new MockAnalyzer(random()));\n    config.setMergePolicy(newLogMergePolicy());\n    config.setCodec(_TestUtil.alwaysPostingsFormat(new MockSepPostingsFormat()));\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setOmitNorms(true);\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", customType));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.forceMerge(1);\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(Version.LUCENE_31,\n      new MockAnalyzer(random()));\n    config.setCodec(_TestUtil.alwaysPostingsFormat(new MockSepPostingsFormat()));\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setOmitNorms(true);\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", customType));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.forceMerge(1);\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","sourceNew":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n      new MockAnalyzer(random()));\n    config.setMergePolicy(newLogMergePolicy());\n    config.setCodec(_TestUtil.alwaysPostingsFormat(new MockSepPostingsFormat()));\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setOmitNorms(true);\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", customType));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.forceMerge(1);\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n      new MockAnalyzer(random()));\n    config.setMergePolicy(newLogMergePolicy());\n    config.setCodec(_TestUtil.alwaysPostingsFormat(new MockSepPostingsFormat()));\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n      customType.setOmitNorms(true);\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", customType));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.forceMerge(1);\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","sourceNew":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n      new MockAnalyzer(random()));\n    config.setMergePolicy(newLogMergePolicy());\n    config.setCodec(TestUtil.alwaysPostingsFormat(new MockSepPostingsFormat()));\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setOmitNorms(true);\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", customType));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.forceMerge(1);\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n      new MockAnalyzer(random()));\n    config.setMergePolicy(newLogMergePolicy());\n    config.setCodec(_TestUtil.alwaysPostingsFormat(new MockSepPostingsFormat()));\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setOmitNorms(true);\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", customType));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.forceMerge(1);\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91d86ebcdb45ce6a1b2584e2603f76db47523d0a","date":1396466913,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","sourceNew":null,"sourceOld":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n      new MockAnalyzer(random()));\n    config.setMergePolicy(newLogMergePolicy());\n    config.setCodec(TestUtil.alwaysPostingsFormat(new MockSepPostingsFormat()));\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setOmitNorms(true);\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", customType));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.forceMerge(1);\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs#testSepPositionAfterMerge().mjava","sourceNew":null,"sourceOld":"  public void testSepPositionAfterMerge() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,\n      new MockAnalyzer(random()));\n    config.setMergePolicy(newLogMergePolicy());\n    config.setCodec(TestUtil.alwaysPostingsFormat(new MockSepPostingsFormat()));\n    final IndexWriter writer = new IndexWriter(dir, config);\n\n    try {\n      final PhraseQuery pq = new PhraseQuery();\n      pq.add(new Term(\"content\", \"bbb\"));\n      pq.add(new Term(\"content\", \"ccc\"));\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n      customType.setOmitNorms(true);\n      doc.add(newField(\"content\", \"aaa bbb ccc ddd\", customType));\n\n      // add document and force commit for creating a first segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      ScoreDoc[] results = this.search(writer, pq, 5);\n      assertEquals(1, results.length);\n      assertEquals(0, results[0].doc);\n\n      // add document and force commit for creating a second segment\n      writer.addDocument(doc);\n      writer.commit();\n\n      // at this point, there should be at least two segments\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n\n      writer.forceMerge(1);\n\n      // optimise to merge the segments.\n      results = this.search(writer, pq, 5);\n      assertEquals(2, results.length);\n      assertEquals(0, results[0].doc);\n    }\n    finally {\n      writer.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"5eb2511ababf862ea11e10761c70ee560cd84510":["6613659748fe4411a7dcf85266e55db1f95f7315","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91d86ebcdb45ce6a1b2584e2603f76db47523d0a"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["6613659748fe4411a7dcf85266e55db1f95f7315"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["5eb2511ababf862ea11e10761c70ee560cd84510","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}