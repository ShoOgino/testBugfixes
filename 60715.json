{"path":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#writeDocs(SolrQueryRequest,OutputStream,IteratorWriter.ItemWriter,Sort).mjava","commits":[{"id":"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee","date":1593704090,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/export/ExportWriter#writeDocs(SolrQueryRequest,OutputStream,IteratorWriter.ItemWriter,Sort).mjava","pathOld":"/dev/null","sourceNew":"  protected void writeDocs(SolrQueryRequest req, OutputStream os, IteratorWriter.ItemWriter writer, Sort sort) throws IOException {\n    List<LeafReaderContext> leaves = req.getSearcher().getTopReaderContext().leaves();\n    final int queueSize = Math.min(batchSize, totalHits);\n\n    ExportBuffers buffers = new ExportBuffers(this, leaves, req.getSearcher(), os, writer, sort, queueSize, totalHits,\n        writeOutputBufferTimer, fillerWaitTimer, writerWaitTimer);\n\n    if (streamExpression != null) {\n      streamContext.put(ExportBuffers.EXPORT_BUFFERS_KEY, buffers);\n      final TupleStream tupleStream;\n      try {\n        tupleStream = createTupleStream();\n        tupleStream.open();\n      } catch (Exception e) {\n        buffers.getWriter().add((MapWriter) ew -> Tuple.EXCEPTION(e, true).writeMap(ew));\n        return;\n      }\n      buffers.run(() -> {\n        for (;;) {\n          if (Thread.currentThread().isInterrupted()) {\n            break;\n          }\n          final Tuple t;\n          try {\n            t = tupleStream.read();\n          } catch (final Exception e) {\n            buffers.getWriter().add((MapWriter) ew -> Tuple.EXCEPTION(e, true).writeMap(ew));\n            break;\n          }\n          if (t == null) {\n            break;\n          }\n          if (t.EOF && !t.EXCEPTION) {\n            break;\n          }\n          // use decorated writer to monitor the number of output writes\n          // and flush the output quickly in case of very few (reduced) output items\n          buffers.getWriter().add((MapWriter) ew -> t.writeMap(ew));\n          if (t.EXCEPTION && t.EOF) {\n            break;\n          }\n        }\n        return true;\n      });\n      tupleStream.close();\n    } else {\n      buffers.run(() -> {\n        // get the initial buffer\n        log.debug(\"--- writer init exchanging from empty\");\n        buffers.exchangeBuffers();\n        ExportBuffers.Buffer buffer = buffers.getOutputBuffer();\n        log.debug(\"--- writer init got {}\", buffer);\n        while (buffer.outDocsIndex != ExportBuffers.Buffer.NO_MORE_DOCS) {\n          if (Thread.currentThread().isInterrupted()) {\n            log.debug(\"--- writer interrupted\");\n            break;\n          }\n          Timer.Context timerContext = writeOutputBufferTimer.time();\n          try {\n            for (int i = buffer.outDocsIndex; i >= 0; --i) {\n              // we're using the raw writer here because there's no potential\n              // reduction in the number of output items, unlike when using\n              // streaming expressions\n              final SortDoc currentDoc = buffer.outDocs[i];\n              writer.add((MapWriter) ew -> writeDoc(currentDoc, leaves, ew, fieldWriters));\n            }\n          } finally {\n            timerContext.stop();\n          }\n          log.debug(\"--- writer exchanging from {}\", buffer);\n          timerContext = writerWaitTimer.time();\n          try {\n            buffers.exchangeBuffers();\n          } finally {\n            timerContext.stop();\n          }\n          buffer = buffers.getOutputBuffer();\n          log.debug(\"--- writer got {}\", buffer);\n        }\n        return true;\n      });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"]},"commit2Childs":{"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}