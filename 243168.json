{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (!reader.isDeleted(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (sort != null) {\n          Weight w = q.weight(searcher);\n          TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                 true, withScore(),\n                                                                 withMaxScore(),\n                                                                 !w.scoresDocsOutOfOrder());\n          searcher.search(w, null, collector);\n          hits = collector.topDocs();\n        } else {\n          hits = searcher.search(q, numHits);\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (!reader.isDeleted(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (sort != null) {\n          Weight w = q.weight(searcher);\n          TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                 true, withScore(),\n                                                                 withMaxScore(),\n                                                                 !w.scoresDocsOutOfOrder());\n          searcher.search(w, null, collector);\n          hits = collector.topDocs();\n        } else {\n          hits = searcher.search(q, numHits);\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b","date":1269463784,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (!reader.isDeleted(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            Weight w = q.weight(searcher);\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   !w.scoresDocsOutOfOrder());\n            searcher.search(w, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (!reader.isDeleted(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (sort != null) {\n          Weight w = q.weight(searcher);\n          TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                 true, withScore(),\n                                                                 withMaxScore(),\n                                                                 !w.scoresDocsOutOfOrder());\n          searcher.search(w, null, collector);\n          hits = collector.topDocs();\n        } else {\n          hits = searcher.search(q, numHits);\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"406e7055a3e99d3fa6ce49a555a51dd18b321806","date":1282520243,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits delDocs = reader.getDeletedDocs();\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (!delDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            Weight w = q.weight(searcher);\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   !w.scoresDocsOutOfOrder());\n            searcher.search(w, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (!reader.isDeleted(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            Weight w = q.weight(searcher);\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   !w.scoresDocsOutOfOrder());\n            searcher.search(w, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":["3353540ef2debe4c4c017e9d86e2c60f9e784336"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits delDocs = reader.getDeletedDocs();\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (!delDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            Weight w = q.weight(searcher);\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   !w.scoresDocsOutOfOrder());\n            searcher.search(w, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (!reader.isDeleted(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            Weight w = q.weight(searcher);\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   !w.scoresDocsOutOfOrder());\n            searcher.search(w, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits delDocs = reader.getDeletedDocs();\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (!delDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            Weight w = q.weight(searcher);\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   !w.scoresDocsOutOfOrder());\n            searcher.search(w, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits delDocs = reader.getDeletedDocs();\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (!delDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            Weight w = q.weight(searcher);\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   !w.scoresDocsOutOfOrder());\n            searcher.search(w, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":null,"sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits delDocs = reader.getDeletedDocs();\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (!delDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            Weight w = q.weight(searcher);\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   !w.scoresDocsOutOfOrder());\n            searcher.search(w, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":null,"sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits delDocs = reader.getDeletedDocs();\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (!delDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            Weight w = q.weight(searcher);\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   !w.scoresDocsOutOfOrder());\n            searcher.search(w, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["406e7055a3e99d3fa6ce49a555a51dd18b321806","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b":["406e7055a3e99d3fa6ce49a555a51dd18b321806","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c5c2a995d2724688c1fd4f80bf8f9d6c56c8df3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}