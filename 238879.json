{"path":"lucene/src/java/org/apache/lucene/search/FieldComparator#compareValues(T,T).mjava","commits":[{"id":"d4aa50b979cd392e00e5bc0f23f78cbd106cb968","date":1308150768,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator#compareValues(T,T).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns -1 if first is less than second.  Default\n   *  impl to assume the type implements Comparable and\n   *  invoke .compareTo; be sure to override this method if\n   *  your FieldComparator's type isn't a Comparable or\n   *  if your values may sometimes be null */\n  @SuppressWarnings(\"unchecked\")\n  public int compareValues(T first, T second) {\n    return ((Comparable<T>) first).compareTo(second);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator#compareValues(T,T).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns -1 if first is less than second.  Default\n   *  impl to assume the type implements Comparable and\n   *  invoke .compareTo; be sure to override this method if\n   *  your FieldComparator's type isn't a Comparable or\n   *  if your values may sometimes be null */\n  @SuppressWarnings(\"unchecked\")\n  public int compareValues(T first, T second) {\n    return ((Comparable<T>) first).compareTo(second);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccc08aa684aee4964baee0644a6ba047bfd70829","date":1316263707,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator#compareValues(T,T).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator#compareValues(T,T).mjava","sourceNew":"  /** Returns -1 if first is less than second.  Default\n   *  impl to assume the type implements Comparable and\n   *  invoke .compareTo; be sure to override this method if\n   *  your FieldComparator's type isn't a Comparable or\n   *  if your values may sometimes be null */\n  @SuppressWarnings(\"unchecked\")\n  public int compareValues(T first, T second) {\n    if (first == null) {\n      if (second == null) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (second == null) {\n      return 1;\n    } else {\n      return ((Comparable<T>) first).compareTo(second);\n    }\n  }\n\n","sourceOld":"  /** Returns -1 if first is less than second.  Default\n   *  impl to assume the type implements Comparable and\n   *  invoke .compareTo; be sure to override this method if\n   *  your FieldComparator's type isn't a Comparable or\n   *  if your values may sometimes be null */\n  @SuppressWarnings(\"unchecked\")\n  public int compareValues(T first, T second) {\n    return ((Comparable<T>) first).compareTo(second);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator#compareValues(T,T).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator#compareValues(T,T).mjava","sourceNew":"  /** Returns -1 if first is less than second.  Default\n   *  impl to assume the type implements Comparable and\n   *  invoke .compareTo; be sure to override this method if\n   *  your FieldComparator's type isn't a Comparable or\n   *  if your values may sometimes be null */\n  @SuppressWarnings(\"unchecked\")\n  public int compareValues(T first, T second) {\n    if (first == null) {\n      if (second == null) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (second == null) {\n      return 1;\n    } else {\n      return ((Comparable<T>) first).compareTo(second);\n    }\n  }\n\n","sourceOld":"  /** Returns -1 if first is less than second.  Default\n   *  impl to assume the type implements Comparable and\n   *  invoke .compareTo; be sure to override this method if\n   *  your FieldComparator's type isn't a Comparable or\n   *  if your values may sometimes be null */\n  @SuppressWarnings(\"unchecked\")\n  public int compareValues(T first, T second) {\n    if (first == null) {\n      if (second == null) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (second == null) {\n      return 1;\n    } else {\n      return ((Comparable<T>) first).compareTo(second);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","ccc08aa684aee4964baee0644a6ba047bfd70829"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}