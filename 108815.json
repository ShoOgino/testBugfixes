{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#computeIterations(PackedInts.Decoder).mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#computeIterations(PackedInts.Decoder).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil#computeIterations(PackedInts.Decoder).mjava","sourceNew":"  /**\n   * Compute the number of iterations required to decode <code>BLOCK_SIZE</code>\n   * values with the provided {@link Decoder}.\n   */\n  private static int computeIterations(PackedInts.Decoder decoder) {\n    return (int) Math.ceil((float) BLOCK_SIZE / decoder.valueCount());\n  }\n\n","sourceOld":"  /**\n   * Compute the number of iterations required to decode <code>BLOCK_SIZE</code>\n   * values with the provided {@link Decoder}.\n   */\n  private static int computeIterations(PackedInts.Decoder decoder) {\n    return (int) Math.ceil((float) BLOCK_SIZE / decoder.valueCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#computeIterations(PackedInts.Decoder).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil#computeIterations(PackedInts.Decoder).mjava","sourceNew":"  /**\n   * Compute the number of iterations required to decode <code>BLOCK_SIZE</code>\n   * values with the provided {@link Decoder}.\n   */\n  private static int computeIterations(PackedInts.Decoder decoder) {\n    return (int) Math.ceil((float) BLOCK_SIZE / decoder.valueCount());\n  }\n\n","sourceOld":"  /**\n   * Compute the number of iterations required to decode <code>BLOCK_SIZE</code>\n   * values with the provided {@link Decoder}.\n   */\n  private static int computeIterations(PackedInts.Decoder decoder) {\n    return (int) Math.ceil((float) BLOCK_SIZE / decoder.valueCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#computeIterations(PackedInts.Decoder).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/ForUtil#computeIterations(PackedInts.Decoder).mjava","sourceNew":"  /**\n   * Compute the number of iterations required to decode <code>BLOCK_SIZE</code>\n   * values with the provided {@link Decoder}.\n   */\n  private static int computeIterations(PackedInts.Decoder decoder) {\n    return (int) Math.ceil((float) BLOCK_SIZE / decoder.valueCount());\n  }\n\n","sourceOld":"  /**\n   * Compute the number of iterations required to decode <code>BLOCK_SIZE</code>\n   * values with the provided {@link Decoder}.\n   */\n  private static int computeIterations(PackedInts.Decoder decoder) {\n    return (int) Math.ceil((float) BLOCK_SIZE / decoder.valueCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29d4d91327929d477b701d3ef2f5b3457d26ec5","date":1359465689,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#computeIterations(PackedInts.Decoder).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#computeIterations(PackedInts.Decoder).mjava","sourceNew":"  /**\n   * Compute the number of iterations required to decode <code>BLOCK_SIZE</code>\n   * values with the provided {@link Decoder}.\n   */\n  private static int computeIterations(PackedInts.Decoder decoder) {\n    return (int) Math.ceil((float) BLOCK_SIZE / decoder.byteValueCount());\n  }\n\n","sourceOld":"  /**\n   * Compute the number of iterations required to decode <code>BLOCK_SIZE</code>\n   * values with the provided {@link Decoder}.\n   */\n  private static int computeIterations(PackedInts.Decoder decoder) {\n    return (int) Math.ceil((float) BLOCK_SIZE / decoder.valueCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#computeIterations(PackedInts.Decoder).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#computeIterations(PackedInts.Decoder).mjava","sourceNew":"  /**\n   * Compute the number of iterations required to decode <code>BLOCK_SIZE</code>\n   * values with the provided {@link Decoder}.\n   */\n  private static int computeIterations(PackedInts.Decoder decoder) {\n    return (int) Math.ceil((float) BLOCK_SIZE / decoder.byteValueCount());\n  }\n\n","sourceOld":"  /**\n   * Compute the number of iterations required to decode <code>BLOCK_SIZE</code>\n   * values with the provided {@link Decoder}.\n   */\n  private static int computeIterations(PackedInts.Decoder decoder) {\n    return (int) Math.ceil((float) BLOCK_SIZE / decoder.valueCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/ForUtil#computeIterations(PackedInts.Decoder).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#computeIterations(PackedInts.Decoder).mjava","sourceNew":"  /**\n   * Compute the number of iterations required to decode <code>BLOCK_SIZE</code>\n   * values with the provided {@link Decoder}.\n   */\n  private static int computeIterations(PackedInts.Decoder decoder) {\n    return (int) Math.ceil((float) BLOCK_SIZE / decoder.byteValueCount());\n  }\n\n","sourceOld":"  /**\n   * Compute the number of iterations required to decode <code>BLOCK_SIZE</code>\n   * values with the provided {@link Decoder}.\n   */\n  private static int computeIterations(PackedInts.Decoder decoder) {\n    return (int) Math.ceil((float) BLOCK_SIZE / decoder.byteValueCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/ForUtil#computeIterations(PackedInts.Decoder).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#computeIterations(PackedInts.Decoder).mjava","sourceNew":"  /**\n   * Compute the number of iterations required to decode <code>BLOCK_SIZE</code>\n   * values with the provided {@link Decoder}.\n   */\n  private static int computeIterations(PackedInts.Decoder decoder) {\n    return (int) Math.ceil((float) BLOCK_SIZE / decoder.byteValueCount());\n  }\n\n","sourceOld":"  /**\n   * Compute the number of iterations required to decode <code>BLOCK_SIZE</code>\n   * values with the provided {@link Decoder}.\n   */\n  private static int computeIterations(PackedInts.Decoder decoder) {\n    return (int) Math.ceil((float) BLOCK_SIZE / decoder.byteValueCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/ForUtil#computeIterations(PackedInts.Decoder).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#computeIterations(PackedInts.Decoder).mjava","sourceNew":"  /**\n   * Compute the number of iterations required to decode <code>BLOCK_SIZE</code>\n   * values with the provided {@link Decoder}.\n   */\n  private static int computeIterations(PackedInts.Decoder decoder) {\n    return (int) Math.ceil((float) BLOCK_SIZE / decoder.byteValueCount());\n  }\n\n","sourceOld":"  /**\n   * Compute the number of iterations required to decode <code>BLOCK_SIZE</code>\n   * values with the provided {@link Decoder}.\n   */\n  private static int computeIterations(PackedInts.Decoder decoder) {\n    return (int) Math.ceil((float) BLOCK_SIZE / decoder.byteValueCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/ForUtil#computeIterations(PackedInts.Decoder).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/ForUtil#computeIterations(PackedInts.Decoder).mjava","sourceNew":"  /**\n   * Compute the number of iterations required to decode <code>BLOCK_SIZE</code>\n   * values with the provided {@link Decoder}.\n   */\n  private static int computeIterations(PackedInts.Decoder decoder) {\n    return (int) Math.ceil((float) BLOCK_SIZE / decoder.byteValueCount());\n  }\n\n","sourceOld":"  /**\n   * Compute the number of iterations required to decode <code>BLOCK_SIZE</code>\n   * values with the provided {@link Decoder}.\n   */\n  private static int computeIterations(PackedInts.Decoder decoder) {\n    return (int) Math.ceil((float) BLOCK_SIZE / decoder.byteValueCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"99eb4a732d1a908f4636ace52928876136bf1896":["e29d4d91327929d477b701d3ef2f5b3457d26ec5"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["e29d4d91327929d477b701d3ef2f5b3457d26ec5","99eb4a732d1a908f4636ace52928876136bf1896"],"de522d9303bd67c8473a269a1319125d1f3700e0":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","e29d4d91327929d477b701d3ef2f5b3457d26ec5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238","de522d9303bd67c8473a269a1319125d1f3700e0"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["e29d4d91327929d477b701d3ef2f5b3457d26ec5","db4fdbf3d262768eabc027cd8321edca0cd11fa8","de522d9303bd67c8473a269a1319125d1f3700e0"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}