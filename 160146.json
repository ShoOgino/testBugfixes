{"path":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processQueryFacets(Filter).mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processQueryFacets(Filter).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Initiates the collecting of query facets\n   * @param filter the base filter to work against\n   * @throws IOException if searching failed\n   */\n  public void processQueryFacets(final Filter filter) throws IOException {\n    for( QueryFacetRequest qfr : queryFacets ){\n      for( String query : qfr.getQueries() ){\n        if (query.contains(AnalyticsParams.RESULT) && !query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==1) {\n              query = getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              query = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        } else if (query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==3) {\n              query = getQueryResult(qfr.getName(),pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n        QueryFacetAccumulator qAcc = new QueryFacetAccumulator(this,qfr.getName(),query);\n        final Query q;\n        try {\n          q = QParser.getParser(query, null, queryRequest).getQuery();\n        } catch( SyntaxError e ){\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"'\",e);\n        }\n        // The searcher sends docIds to the QueryFacetAccumulator which forwards\n        // them to <code>collectQuery()</code> in this class for collection.\n        searcher.search(q, filter, qAcc);\n        computeQueryFacet(qfr.getName());\n        queryCount++;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processQueryFacets(Filter).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Initiates the collecting of query facets\n   * @param filter the base filter to work against\n   * @throws IOException if searching failed\n   */\n  public void processQueryFacets(final Filter filter) throws IOException {\n    for( QueryFacetRequest qfr : queryFacets ){\n      for( String query : qfr.getQueries() ){\n        if (query.contains(AnalyticsParams.RESULT) && !query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==1) {\n              query = getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              query = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        } else if (query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==3) {\n              query = getQueryResult(qfr.getName(),pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n        QueryFacetAccumulator qAcc = new QueryFacetAccumulator(this,qfr.getName(),query);\n        final Query q;\n        try {\n          q = QParser.getParser(query, null, queryRequest).getQuery();\n        } catch( SyntaxError e ){\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"'\",e);\n        }\n        // The searcher sends docIds to the QueryFacetAccumulator which forwards\n        // them to <code>collectQuery()</code> in this class for collection.\n        searcher.search(q, filter, qAcc);\n        computeQueryFacet(qfr.getName());\n        queryCount++;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processQueryFacets(Filter).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/accumulator/FacetingAccumulator#processQueryFacets(Filter).mjava","sourceNew":"  /**\n   * Initiates the collecting of query facets\n   * @param filter the base filter to work against\n   * @throws IOException if searching failed\n   */\n  public void processQueryFacets(final Filter filter) throws IOException {\n    for( QueryFacetRequest qfr : queryFacets ){\n      for( String query : qfr.getQueries() ){\n        if (query.contains(AnalyticsParams.RESULT) && !query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==1) {\n              query = getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              query = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        } else if (query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==3) {\n              query = getQueryResult(qfr.getName(),pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n        QueryFacetAccumulator qAcc = new QueryFacetAccumulator(this,qfr.getName(),query);\n        final Query q;\n        try {\n          q = QParser.getParser(query, null, queryRequest).getQuery();\n        } catch( SyntaxError e ){\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"'\",e);\n        }\n        // The searcher sends docIds to the QueryFacetAccumulator which forwards\n        // them to <code>collectQuery()</code> in this class for collection.\n        searcher.search(q, filter, qAcc);\n        computeQueryFacet(qfr.getName());\n        queryCount++;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Initiates the collecting of query facets\n   * @param filter the base filter to work against\n   * @throws IOException if searching failed\n   */\n  public void processQueryFacets(final Filter filter) throws IOException {\n    for( QueryFacetRequest qfr : queryFacets ){\n      for( String query : qfr.getQueries() ){\n        if (query.contains(AnalyticsParams.RESULT) && !query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==1) {\n              query = getResult(pivotStr[0]);\n            } else if (pivotStr.length==3) {\n              query = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        } else if (query.contains(AnalyticsParams.QUERY_RESULT)) {\n          try {\n            String[] pivotStr = ExpressionFactory.getArguments(query.substring(query.indexOf('(')+1,query.lastIndexOf(')')).trim());\n            if (pivotStr.length==3) {\n              query = getQueryResult(qfr.getName(),pivotStr[0],pivotStr[1],pivotStr[2]);\n            } else {\n              throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" has an invalid amount of arguments.\");\n            }\n          } catch (IndexOutOfBoundsException e) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"Result request \"+query+\" is invalid. Lacks parentheses.\",e);\n          }\n        }\n        QueryFacetAccumulator qAcc = new QueryFacetAccumulator(this,qfr.getName(),query);\n        final Query q;\n        try {\n          q = QParser.getParser(query, null, queryRequest).getQuery();\n        } catch( SyntaxError e ){\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid query '\"+query+\"'\",e);\n        }\n        // The searcher sends docIds to the QueryFacetAccumulator which forwards\n        // them to <code>collectQuery()</code> in this class for collection.\n        searcher.search(q, filter, qAcc);\n        computeQueryFacet(qfr.getName());\n        queryCount++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff403346522eaa9de75403763e297e83a3ea585c"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["ff403346522eaa9de75403763e297e83a3ea585c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ff403346522eaa9de75403763e297e83a3ea585c":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}