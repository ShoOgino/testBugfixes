{"path":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testInclusive().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testInclusive().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermRangeQuery#testInclusive().mjava","sourceNew":"  public void testInclusive() throws Exception {\n    Query query = new TermRangeQuery(\"content\", \"A\", \"C\", true, true);\n\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D - A,B,C in range\", 3, hits.length);\n    searcher.close();\n\n    initializeIndex(new String[]{\"A\", \"B\", \"D\"});\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D - A and B in range\", 2, hits.length);\n    searcher.close();\n\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added - A, B, C in range\", 3, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testInclusive() throws Exception {\n    Query query = new TermRangeQuery(\"content\", \"A\", \"C\", true, true);\n\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D - A,B,C in range\", 3, hits.length);\n    searcher.close();\n\n    initializeIndex(new String[]{\"A\", \"B\", \"D\"});\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D - A and B in range\", 2, hits.length);\n    searcher.close();\n\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added - A, B, C in range\", 3, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testInclusive().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testInclusive().mjava","sourceNew":"  public void testInclusive() throws Exception {\n    Query query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", true, true);\n\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D - A,B,C in range\", 3, hits.length);\n    searcher.close();\n\n    initializeIndex(new String[]{\"A\", \"B\", \"D\"});\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D - A and B in range\", 2, hits.length);\n    searcher.close();\n\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added - A, B, C in range\", 3, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testInclusive() throws Exception {\n    Query query = new TermRangeQuery(\"content\", \"A\", \"C\", true, true);\n\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D - A,B,C in range\", 3, hits.length);\n    searcher.close();\n\n    initializeIndex(new String[]{\"A\", \"B\", \"D\"});\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D - A and B in range\", 2, hits.length);\n    searcher.close();\n\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added - A, B, C in range\", 3, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testInclusive().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testInclusive().mjava","sourceNew":"  public void testInclusive() throws Exception {\n    Query query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", true, true);\n\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D - A,B,C in range\", 3, hits.length);\n    searcher.close();\n\n    initializeIndex(new String[]{\"A\", \"B\", \"D\"});\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D - A and B in range\", 2, hits.length);\n    searcher.close();\n\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added - A, B, C in range\", 3, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testInclusive() throws Exception {\n    Query query = new TermRangeQuery(\"content\", \"A\", \"C\", true, true);\n\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D - A,B,C in range\", 3, hits.length);\n    searcher.close();\n\n    initializeIndex(new String[]{\"A\", \"B\", \"D\"});\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D - A and B in range\", 2, hits.length);\n    searcher.close();\n\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added - A, B, C in range\", 3, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testInclusive().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testInclusive().mjava","sourceNew":"  public void testInclusive() throws Exception {\n    Query query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", true, true);\n\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D - A,B,C in range\", 3, hits.length);\n    searcher.close();\n\n    initializeIndex(new String[]{\"A\", \"B\", \"D\"});\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D - A and B in range\", 2, hits.length);\n    searcher.close();\n\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added - A, B, C in range\", 3, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testInclusive() throws Exception {\n    Query query = new TermRangeQuery(\"content\", \"A\", \"C\", true, true);\n\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D - A,B,C in range\", 3, hits.length);\n    searcher.close();\n\n    initializeIndex(new String[]{\"A\", \"B\", \"D\"});\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D - A and B in range\", 2, hits.length);\n    searcher.close();\n\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added - A, B, C in range\", 3, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testInclusive().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testInclusive().mjava","sourceNew":"  public void testInclusive() throws Exception {\n    Query query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", true, true);\n\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D - A,B,C in range\", 3, hits.length);\n    searcher.close();\n    reader.close();\n\n    initializeIndex(new String[]{\"A\", \"B\", \"D\"});\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D - A and B in range\", 2, hits.length);\n    searcher.close();\n    reader.close();\n\n    addDoc(\"C\");\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added - A, B, C in range\", 3, hits.length);\n    searcher.close();\n    reader.close();\n  }\n\n","sourceOld":"  public void testInclusive() throws Exception {\n    Query query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", true, true);\n\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D - A,B,C in range\", 3, hits.length);\n    searcher.close();\n\n    initializeIndex(new String[]{\"A\", \"B\", \"D\"});\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D - A and B in range\", 2, hits.length);\n    searcher.close();\n\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir, true);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added - A, B, C in range\", 3, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testInclusive().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testInclusive().mjava","sourceNew":"  public void testInclusive() throws Exception {\n    Query query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", true, true);\n\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D - A,B,C in range\", 3, hits.length);\n    reader.close();\n\n    initializeIndex(new String[]{\"A\", \"B\", \"D\"});\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D - A and B in range\", 2, hits.length);\n    reader.close();\n\n    addDoc(\"C\");\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added - A, B, C in range\", 3, hits.length);\n    reader.close();\n  }\n\n","sourceOld":"  public void testInclusive() throws Exception {\n    Query query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", true, true);\n\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D - A,B,C in range\", 3, hits.length);\n    searcher.close();\n    reader.close();\n\n    initializeIndex(new String[]{\"A\", \"B\", \"D\"});\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D - A and B in range\", 2, hits.length);\n    searcher.close();\n    reader.close();\n\n    addDoc(\"C\");\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added - A, B, C in range\", 3, hits.length);\n    searcher.close();\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testInclusive().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testInclusive().mjava","sourceNew":"  public void testInclusive() throws Exception {\n    Query query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", true, true);\n\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D - A,B,C in range\", 3, hits.length);\n    reader.close();\n\n    initializeIndex(new String[]{\"A\", \"B\", \"D\"});\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D - A and B in range\", 2, hits.length);\n    reader.close();\n\n    addDoc(\"C\");\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added - A, B, C in range\", 3, hits.length);\n    reader.close();\n  }\n\n","sourceOld":"  public void testInclusive() throws Exception {\n    Query query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", true, true);\n\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D - A,B,C in range\", 3, hits.length);\n    searcher.close();\n    reader.close();\n\n    initializeIndex(new String[]{\"A\", \"B\", \"D\"});\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D - A and B in range\", 2, hits.length);\n    searcher.close();\n    reader.close();\n\n    addDoc(\"C\");\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added - A, B, C in range\", 3, hits.length);\n    searcher.close();\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testInclusive().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testInclusive().mjava","sourceNew":"  public void testInclusive() throws Exception {\n    Query query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", true, true);\n\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D - A,B,C in range\", 3, hits.length);\n    reader.close();\n\n    initializeIndex(new String[]{\"A\", \"B\", \"D\"});\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D - A and B in range\", 2, hits.length);\n    reader.close();\n\n    addDoc(\"C\");\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added - A, B, C in range\", 3, hits.length);\n    reader.close();\n  }\n\n","sourceOld":"  public void testInclusive() throws Exception {\n    Query query = TermRangeQuery.newStringRange(\"content\", \"A\", \"C\", true, true);\n\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\"});\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,C,D - A,B,C in range\", 3, hits.length);\n    reader.close();\n\n    initializeIndex(new String[]{\"A\", \"B\", \"D\"});\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"A,B,D - A and B in range\", 2, hits.length);\n    reader.close();\n\n    addDoc(\"C\");\n    reader = IndexReader.open(dir);\n    searcher = new IndexSearcher(reader);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"C added - A, B, C in range\", 3, hits.length);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["9454a6510e2db155fb01faa5c049b06ece95fab9","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["9454a6510e2db155fb01faa5c049b06ece95fab9","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}