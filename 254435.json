{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#equals(Object).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#equals(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    final SpanMultiTermQueryWrapper other = (SpanMultiTermQueryWrapper) obj;\n    return query.equals(other.query);\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    final SpanMultiTermQueryWrapper other = (SpanMultiTermQueryWrapper) obj;\n    return query.equals(other.query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#equals(Object).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    final SpanMultiTermQueryWrapper other = (SpanMultiTermQueryWrapper) obj;\n    return query.equals(other.query);\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    final SpanMultiTermQueryWrapper other = (SpanMultiTermQueryWrapper) obj;\n    return query.equals(other.query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#equals(Object).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    final SpanMultiTermQueryWrapper other = (SpanMultiTermQueryWrapper) obj;\n    return query.equals(other.query);\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    final SpanMultiTermQueryWrapper other = (SpanMultiTermQueryWrapper) obj;\n    return query.equals(other.query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd81b1d062b9688a18721a1adfc489577479856a","date":1390711758,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (!super.equals(obj)) return false;\n    if (getClass() != obj.getClass()) return false;\n    SpanMultiTermQueryWrapper<?> other = (SpanMultiTermQueryWrapper<?>) obj;\n    if (!query.equals(other.query)) return false;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    final SpanMultiTermQueryWrapper other = (SpanMultiTermQueryWrapper) obj;\n    return query.equals(other.query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaa8203c0525e91bf87759d14591ba3ff26dfa7f","date":1430913024,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (! super.equals(obj)) {\n      return false;\n    }\n    SpanMultiTermQueryWrapper<?> other = (SpanMultiTermQueryWrapper<?>) obj;\n    return query.equals(other.query);\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (!super.equals(obj)) return false;\n    if (getClass() != obj.getClass()) return false;\n    SpanMultiTermQueryWrapper<?> other = (SpanMultiTermQueryWrapper<?>) obj;\n    if (!query.equals(other.query)) return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           query.equals(((SpanMultiTermQueryWrapper<?>) other).query);\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (! super.equals(obj)) {\n      return false;\n    }\n    SpanMultiTermQueryWrapper<?> other = (SpanMultiTermQueryWrapper<?>) obj;\n    return query.equals(other.query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           query.equals(((SpanMultiTermQueryWrapper<?>) other).query);\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (! super.equals(obj)) {\n      return false;\n    }\n    SpanMultiTermQueryWrapper<?> other = (SpanMultiTermQueryWrapper<?>) obj;\n    return query.equals(other.query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["aaa8203c0525e91bf87759d14591ba3ff26dfa7f"],"aaa8203c0525e91bf87759d14591ba3ff26dfa7f":["dd81b1d062b9688a18721a1adfc489577479856a"],"dd81b1d062b9688a18721a1adfc489577479856a":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["aaa8203c0525e91bf87759d14591ba3ff26dfa7f","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e7bc21595222ae4f75509300fbb7726691f387f"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","dd81b1d062b9688a18721a1adfc489577479856a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aaa8203c0525e91bf87759d14591ba3ff26dfa7f":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"dd81b1d062b9688a18721a1adfc489577479856a":["aaa8203c0525e91bf87759d14591ba3ff26dfa7f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}