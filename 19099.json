{"path":"solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory#createLockFactory(String).mjava","commits":[{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory#createLockFactory(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory#createLockFactory(String,String).mjava","sourceNew":"  @Override\n  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      // we default to \"native\"\n      log.warn(\"No lockType configured, assuming 'native'.\");\n      rawLockType = \"native\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"simple\":\n        return SimpleFSLockFactory.INSTANCE;\n      case \"native\":\n        return NativeFSLockFactory.INSTANCE;\n      case \"single\":\n        return new SingleInstanceLockFactory();\n      case \"none\":\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected LockFactory createLockFactory(String lockPath, String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      // we default to \"native\"\n      log.warn(\"No lockType configured, assuming 'native'.\");\n      rawLockType = \"native\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"simple\":\n        return new SimpleFSLockFactory(new File(lockPath).toPath());\n      case \"native\":\n        return new NativeFSLockFactory(new File(lockPath).toPath());\n      case \"single\":\n        return new SingleInstanceLockFactory();\n      case \"none\":\n        return NoLockFactory.getNoLockFactory();\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b3091e174423680e7d6cce5f858d48cd5410bcf","date":1452177279,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory#createLockFactory(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory#createLockFactory(String).mjava","sourceNew":"  @Override\n  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      rawLockType = DirectoryFactory.LOCK_TYPE_NATIVE;\n      log.warn(\"No lockType configured, assuming '\"+rawLockType+\"'.\");\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case DirectoryFactory.LOCK_TYPE_SIMPLE:\n        return SimpleFSLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_NATIVE:\n        return NativeFSLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      // we default to \"native\"\n      log.warn(\"No lockType configured, assuming 'native'.\");\n      rawLockType = \"native\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case \"simple\":\n        return SimpleFSLockFactory.INSTANCE;\n      case \"native\":\n        return NativeFSLockFactory.INSTANCE;\n      case \"single\":\n        return new SingleInstanceLockFactory();\n      case \"none\":\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory#createLockFactory(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/StandardDirectoryFactory#createLockFactory(String).mjava","sourceNew":"  @Override\n  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      rawLockType = DirectoryFactory.LOCK_TYPE_NATIVE;\n      log.warn(\"No lockType configured, assuming '{}'.\", rawLockType);\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case DirectoryFactory.LOCK_TYPE_SIMPLE:\n        return SimpleFSLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_NATIVE:\n        return NativeFSLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected LockFactory createLockFactory(String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      rawLockType = DirectoryFactory.LOCK_TYPE_NATIVE;\n      log.warn(\"No lockType configured, assuming '\"+rawLockType+\"'.\");\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ROOT).trim();\n    switch (lockType) {\n      case DirectoryFactory.LOCK_TYPE_SIMPLE:\n        return SimpleFSLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_NATIVE:\n        return NativeFSLockFactory.INSTANCE;\n      case DirectoryFactory.LOCK_TYPE_SINGLE:\n        return new SingleInstanceLockFactory();\n      case DirectoryFactory.LOCK_TYPE_NONE:\n        return NoLockFactory.INSTANCE;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unrecognized lockType: \" + rawLockType);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"140be51d03394488536f4aacedace29f9b318347":["2b3091e174423680e7d6cce5f858d48cd5410bcf"],"285cdc737de75b7cc7c284a156b20214deb67bca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b3091e174423680e7d6cce5f858d48cd5410bcf":["285cdc737de75b7cc7c284a156b20214deb67bca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140be51d03394488536f4aacedace29f9b318347"]},"commit2Childs":{"140be51d03394488536f4aacedace29f9b318347":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"285cdc737de75b7cc7c284a156b20214deb67bca":["2b3091e174423680e7d6cce5f858d48cd5410bcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["285cdc737de75b7cc7c284a156b20214deb67bca"],"2b3091e174423680e7d6cce5f858d48cd5410bcf":["140be51d03394488536f4aacedace29f9b318347"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}