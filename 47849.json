{"path":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#load(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#load(String).mjava","pathOld":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#load(String).mjava","sourceNew":"  private void load(String dictRoot) {\n    String bigramDictPath = dictRoot + \"/bigramdict.dct\";\n\n    File serialObj = new File(dictRoot + \"/bigramdict.mem\");\n\n    if (serialObj.exists() && loadFromObj(serialObj)) {\n\n    } else {\n      try {\n        bigramHashTable = new long[PRIME_BIGRAM_LENGTH];\n        frequencyTable = new int[PRIME_BIGRAM_LENGTH];\n        for (int i = 0; i < PRIME_BIGRAM_LENGTH; i++) {\n          // it is possible for a value to hash to 0, but the probability is extremely low\n          bigramHashTable[i] = 0;\n          frequencyTable[i] = 0;\n        }\n        loadFromFile(bigramDictPath);\n      } catch (IOException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n      saveToObj(serialObj);\n    }\n  }\n\n","sourceOld":"  private void load(String dictRoot) {\n    String bigramDictPath = dictRoot + \"/bigramdict.dct\";\n\n    File serialObj = new File(dictRoot + \"/bigramdict.mem\");\n\n    if (serialObj.exists() && loadFromObj(serialObj)) {\n\n    } else {\n      try {\n        bigramHashTable = new long[PRIME_BIGRAM_LENGTH];\n        frequencyTable = new int[PRIME_BIGRAM_LENGTH];\n        for (int i = 0; i < PRIME_BIGRAM_LENGTH; i++) {\n          // it is possible for a value to hash to 0, but the probability is extremely low\n          bigramHashTable[i] = 0;\n          frequencyTable[i] = 0;\n        }\n        loadFromFile(bigramDictPath);\n      } catch (IOException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n      saveToObj(serialObj);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#load(String).mjava","pathOld":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#load(String).mjava","sourceNew":"  private void load(String dictRoot) {\n    String bigramDictPath = dictRoot + \"/bigramdict.dct\";\n\n    Path serialObj = Paths.get(dictRoot + \"/bigramdict.mem\");\n\n    if (Files.exists(serialObj) && loadFromObj(serialObj)) {\n\n    } else {\n      try {\n        bigramHashTable = new long[PRIME_BIGRAM_LENGTH];\n        frequencyTable = new int[PRIME_BIGRAM_LENGTH];\n        for (int i = 0; i < PRIME_BIGRAM_LENGTH; i++) {\n          // it is possible for a value to hash to 0, but the probability is extremely low\n          bigramHashTable[i] = 0;\n          frequencyTable[i] = 0;\n        }\n        loadFromFile(bigramDictPath);\n      } catch (IOException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n      saveToObj(serialObj);\n    }\n  }\n\n","sourceOld":"  private void load(String dictRoot) {\n    String bigramDictPath = dictRoot + \"/bigramdict.dct\";\n\n    File serialObj = new File(dictRoot + \"/bigramdict.mem\");\n\n    if (serialObj.exists() && loadFromObj(serialObj)) {\n\n    } else {\n      try {\n        bigramHashTable = new long[PRIME_BIGRAM_LENGTH];\n        frequencyTable = new int[PRIME_BIGRAM_LENGTH];\n        for (int i = 0; i < PRIME_BIGRAM_LENGTH; i++) {\n          // it is possible for a value to hash to 0, but the probability is extremely low\n          bigramHashTable[i] = 0;\n          frequencyTable[i] = 0;\n        }\n        loadFromFile(bigramDictPath);\n      } catch (IOException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n      saveToObj(serialObj);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"990bfad31921196c3dc2f72e0c89e310fdb14242","date":1435262444,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#load(String).mjava","pathOld":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#load(String).mjava","sourceNew":"  private void load(String dictRoot) throws IOException {\n    String bigramDictPath = dictRoot + \"/bigramdict.dct\";\n\n    Path serialObj = Paths.get(dictRoot + \"/bigramdict.mem\");\n\n    if (Files.exists(serialObj) && loadFromObj(serialObj)) {\n\n    } else {\n      try {\n        bigramHashTable = new long[PRIME_BIGRAM_LENGTH];\n        frequencyTable = new int[PRIME_BIGRAM_LENGTH];\n        for (int i = 0; i < PRIME_BIGRAM_LENGTH; i++) {\n          // it is possible for a value to hash to 0, but the probability is extremely low\n          bigramHashTable[i] = 0;\n          frequencyTable[i] = 0;\n        }\n        loadFromFile(bigramDictPath);\n      } catch (IOException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n      saveToObj(serialObj);\n    }\n  }\n\n","sourceOld":"  private void load(String dictRoot) {\n    String bigramDictPath = dictRoot + \"/bigramdict.dct\";\n\n    Path serialObj = Paths.get(dictRoot + \"/bigramdict.mem\");\n\n    if (Files.exists(serialObj) && loadFromObj(serialObj)) {\n\n    } else {\n      try {\n        bigramHashTable = new long[PRIME_BIGRAM_LENGTH];\n        frequencyTable = new int[PRIME_BIGRAM_LENGTH];\n        for (int i = 0; i < PRIME_BIGRAM_LENGTH; i++) {\n          // it is possible for a value to hash to 0, but the probability is extremely low\n          bigramHashTable[i] = 0;\n          frequencyTable[i] = 0;\n        }\n        loadFromFile(bigramDictPath);\n      } catch (IOException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n      saveToObj(serialObj);\n    }\n  }\n\n","bugFix":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"990bfad31921196c3dc2f72e0c89e310fdb14242":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["990bfad31921196c3dc2f72e0c89e310fdb14242"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f4abec28b874149a7223e32cc7a01704c27790de"],"990bfad31921196c3dc2f72e0c89e310fdb14242":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f4abec28b874149a7223e32cc7a01704c27790de":["990bfad31921196c3dc2f72e0c89e310fdb14242"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}