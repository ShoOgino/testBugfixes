{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#groupedFinishStage(ResponseBuilder).mjava","commits":[{"id":"ccc08aa684aee4964baee0644a6ba047bfd70829","date":1316263707,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#groupedFinishStage(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void groupedFinishStage(final ResponseBuilder rb) {\n    // To have same response as non-distributed request.\n    GroupingSpecification groupSpec = rb.getGroupingSpec();\n    if (rb.mergedTopGroups.isEmpty()) {\n      for (String field : groupSpec.getFields()) {\n        rb.mergedTopGroups.put(field, new TopGroups(null, null, 0, 0, new GroupDocs[]{}));\n      }\n      rb.resultIds = new HashMap<Object, ShardDoc>();\n    }\n\n    EndResultTransformer.SolrDocumentSource solrDocumentSource = new EndResultTransformer.SolrDocumentSource() {\n\n      public SolrDocument retrieve(ScoreDoc doc) {\n        ShardDoc solrDoc = (ShardDoc) doc;\n        return rb.retrievedDocuments.get(solrDoc.id);\n      }\n\n    };\n    EndResultTransformer endResultTransformer;\n    if (groupSpec.isMain()) {\n      endResultTransformer = MAIN_END_RESULT_TRANSFORMER;\n    } else if (Grouping.Format.grouped == groupSpec.getResponseFormat()) {\n      endResultTransformer = new GroupedEndResultTransformer(rb.req.getSearcher());\n    } else if (Grouping.Format.simple == groupSpec.getResponseFormat() && !groupSpec.isMain()) {\n      endResultTransformer = SIMPLE_END_RESULT_TRANSFORMER;\n    } else {\n      return;\n    }\n    Map<String, Object> combinedMap = new LinkedHashMap<String, Object>();\n    combinedMap.putAll(rb.mergedTopGroups);\n    combinedMap.putAll(rb.mergedQueryCommandResults);\n    endResultTransformer.transform(combinedMap, rb.rsp, rb.getGroupingSpec(), solrDocumentSource);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["85d41890f2bad879e6a04c6dd7d2cf276f973994"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"612521de57bdf68711c68b6d8565e4a80ca0d7f6","date":1333716414,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#groupedFinishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#groupedFinishStage(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void groupedFinishStage(final ResponseBuilder rb) {\n    // To have same response as non-distributed request.\n    GroupingSpecification groupSpec = rb.getGroupingSpec();\n    if (rb.mergedTopGroups.isEmpty()) {\n      for (String field : groupSpec.getFields()) {\n        rb.mergedTopGroups.put(field, new TopGroups(null, null, 0, 0, new GroupDocs[]{}));\n      }\n      rb.resultIds = new HashMap<Object, ShardDoc>();\n    }\n\n    EndResultTransformer.SolrDocumentSource solrDocumentSource = new EndResultTransformer.SolrDocumentSource() {\n\n      public SolrDocument retrieve(ScoreDoc doc) {\n        ShardDoc solrDoc = (ShardDoc) doc;\n        return rb.retrievedDocuments.get(solrDoc.id);\n      }\n\n    };\n    EndResultTransformer endResultTransformer;\n    if (groupSpec.isMain()) {\n      endResultTransformer = MAIN_END_RESULT_TRANSFORMER;\n    } else if (Grouping.Format.grouped == groupSpec.getResponseFormat()) {\n      endResultTransformer = new GroupedEndResultTransformer(rb.req.getSearcher());\n    } else if (Grouping.Format.simple == groupSpec.getResponseFormat() && !groupSpec.isMain()) {\n      endResultTransformer = SIMPLE_END_RESULT_TRANSFORMER;\n    } else {\n      return;\n    }\n    Map<String, Object> combinedMap = new LinkedHashMap<String, Object>();\n    combinedMap.putAll(rb.mergedTopGroups);\n    combinedMap.putAll(rb.mergedQueryCommandResults);\n    endResultTransformer.transform(combinedMap, rb, solrDocumentSource);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void groupedFinishStage(final ResponseBuilder rb) {\n    // To have same response as non-distributed request.\n    GroupingSpecification groupSpec = rb.getGroupingSpec();\n    if (rb.mergedTopGroups.isEmpty()) {\n      for (String field : groupSpec.getFields()) {\n        rb.mergedTopGroups.put(field, new TopGroups(null, null, 0, 0, new GroupDocs[]{}));\n      }\n      rb.resultIds = new HashMap<Object, ShardDoc>();\n    }\n\n    EndResultTransformer.SolrDocumentSource solrDocumentSource = new EndResultTransformer.SolrDocumentSource() {\n\n      public SolrDocument retrieve(ScoreDoc doc) {\n        ShardDoc solrDoc = (ShardDoc) doc;\n        return rb.retrievedDocuments.get(solrDoc.id);\n      }\n\n    };\n    EndResultTransformer endResultTransformer;\n    if (groupSpec.isMain()) {\n      endResultTransformer = MAIN_END_RESULT_TRANSFORMER;\n    } else if (Grouping.Format.grouped == groupSpec.getResponseFormat()) {\n      endResultTransformer = new GroupedEndResultTransformer(rb.req.getSearcher());\n    } else if (Grouping.Format.simple == groupSpec.getResponseFormat() && !groupSpec.isMain()) {\n      endResultTransformer = SIMPLE_END_RESULT_TRANSFORMER;\n    } else {\n      return;\n    }\n    Map<String, Object> combinedMap = new LinkedHashMap<String, Object>();\n    combinedMap.putAll(rb.mergedTopGroups);\n    combinedMap.putAll(rb.mergedQueryCommandResults);\n    endResultTransformer.transform(combinedMap, rb.rsp, rb.getGroupingSpec(), solrDocumentSource);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85d41890f2bad879e6a04c6dd7d2cf276f973994","date":1338488367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#groupedFinishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#groupedFinishStage(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void groupedFinishStage(final ResponseBuilder rb) {\n    // To have same response as non-distributed request.\n    GroupingSpecification groupSpec = rb.getGroupingSpec();\n    if (rb.mergedTopGroups.isEmpty()) {\n      for (String field : groupSpec.getFields()) {\n        rb.mergedTopGroups.put(field, new TopGroups(null, null, 0, 0, new GroupDocs[]{}, Float.NaN));\n      }\n      rb.resultIds = new HashMap<Object, ShardDoc>();\n    }\n\n    EndResultTransformer.SolrDocumentSource solrDocumentSource = new EndResultTransformer.SolrDocumentSource() {\n\n      public SolrDocument retrieve(ScoreDoc doc) {\n        ShardDoc solrDoc = (ShardDoc) doc;\n        return rb.retrievedDocuments.get(solrDoc.id);\n      }\n\n    };\n    EndResultTransformer endResultTransformer;\n    if (groupSpec.isMain()) {\n      endResultTransformer = MAIN_END_RESULT_TRANSFORMER;\n    } else if (Grouping.Format.grouped == groupSpec.getResponseFormat()) {\n      endResultTransformer = new GroupedEndResultTransformer(rb.req.getSearcher());\n    } else if (Grouping.Format.simple == groupSpec.getResponseFormat() && !groupSpec.isMain()) {\n      endResultTransformer = SIMPLE_END_RESULT_TRANSFORMER;\n    } else {\n      return;\n    }\n    Map<String, Object> combinedMap = new LinkedHashMap<String, Object>();\n    combinedMap.putAll(rb.mergedTopGroups);\n    combinedMap.putAll(rb.mergedQueryCommandResults);\n    endResultTransformer.transform(combinedMap, rb, solrDocumentSource);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void groupedFinishStage(final ResponseBuilder rb) {\n    // To have same response as non-distributed request.\n    GroupingSpecification groupSpec = rb.getGroupingSpec();\n    if (rb.mergedTopGroups.isEmpty()) {\n      for (String field : groupSpec.getFields()) {\n        rb.mergedTopGroups.put(field, new TopGroups(null, null, 0, 0, new GroupDocs[]{}));\n      }\n      rb.resultIds = new HashMap<Object, ShardDoc>();\n    }\n\n    EndResultTransformer.SolrDocumentSource solrDocumentSource = new EndResultTransformer.SolrDocumentSource() {\n\n      public SolrDocument retrieve(ScoreDoc doc) {\n        ShardDoc solrDoc = (ShardDoc) doc;\n        return rb.retrievedDocuments.get(solrDoc.id);\n      }\n\n    };\n    EndResultTransformer endResultTransformer;\n    if (groupSpec.isMain()) {\n      endResultTransformer = MAIN_END_RESULT_TRANSFORMER;\n    } else if (Grouping.Format.grouped == groupSpec.getResponseFormat()) {\n      endResultTransformer = new GroupedEndResultTransformer(rb.req.getSearcher());\n    } else if (Grouping.Format.simple == groupSpec.getResponseFormat() && !groupSpec.isMain()) {\n      endResultTransformer = SIMPLE_END_RESULT_TRANSFORMER;\n    } else {\n      return;\n    }\n    Map<String, Object> combinedMap = new LinkedHashMap<String, Object>();\n    combinedMap.putAll(rb.mergedTopGroups);\n    combinedMap.putAll(rb.mergedQueryCommandResults);\n    endResultTransformer.transform(combinedMap, rb, solrDocumentSource);\n  }\n\n","bugFix":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#groupedFinishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#groupedFinishStage(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void groupedFinishStage(final ResponseBuilder rb) {\n    // To have same response as non-distributed request.\n    GroupingSpecification groupSpec = rb.getGroupingSpec();\n    if (rb.mergedTopGroups.isEmpty()) {\n      for (String field : groupSpec.getFields()) {\n        rb.mergedTopGroups.put(field, new TopGroups(null, null, 0, 0, new GroupDocs[]{}, Float.NaN));\n      }\n      rb.resultIds = new HashMap<Object, ShardDoc>();\n    }\n\n    EndResultTransformer.SolrDocumentSource solrDocumentSource = new EndResultTransformer.SolrDocumentSource() {\n\n      @Override\n      public SolrDocument retrieve(ScoreDoc doc) {\n        ShardDoc solrDoc = (ShardDoc) doc;\n        return rb.retrievedDocuments.get(solrDoc.id);\n      }\n\n    };\n    EndResultTransformer endResultTransformer;\n    if (groupSpec.isMain()) {\n      endResultTransformer = MAIN_END_RESULT_TRANSFORMER;\n    } else if (Grouping.Format.grouped == groupSpec.getResponseFormat()) {\n      endResultTransformer = new GroupedEndResultTransformer(rb.req.getSearcher());\n    } else if (Grouping.Format.simple == groupSpec.getResponseFormat() && !groupSpec.isMain()) {\n      endResultTransformer = SIMPLE_END_RESULT_TRANSFORMER;\n    } else {\n      return;\n    }\n    Map<String, Object> combinedMap = new LinkedHashMap<String, Object>();\n    combinedMap.putAll(rb.mergedTopGroups);\n    combinedMap.putAll(rb.mergedQueryCommandResults);\n    endResultTransformer.transform(combinedMap, rb, solrDocumentSource);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void groupedFinishStage(final ResponseBuilder rb) {\n    // To have same response as non-distributed request.\n    GroupingSpecification groupSpec = rb.getGroupingSpec();\n    if (rb.mergedTopGroups.isEmpty()) {\n      for (String field : groupSpec.getFields()) {\n        rb.mergedTopGroups.put(field, new TopGroups(null, null, 0, 0, new GroupDocs[]{}, Float.NaN));\n      }\n      rb.resultIds = new HashMap<Object, ShardDoc>();\n    }\n\n    EndResultTransformer.SolrDocumentSource solrDocumentSource = new EndResultTransformer.SolrDocumentSource() {\n\n      public SolrDocument retrieve(ScoreDoc doc) {\n        ShardDoc solrDoc = (ShardDoc) doc;\n        return rb.retrievedDocuments.get(solrDoc.id);\n      }\n\n    };\n    EndResultTransformer endResultTransformer;\n    if (groupSpec.isMain()) {\n      endResultTransformer = MAIN_END_RESULT_TRANSFORMER;\n    } else if (Grouping.Format.grouped == groupSpec.getResponseFormat()) {\n      endResultTransformer = new GroupedEndResultTransformer(rb.req.getSearcher());\n    } else if (Grouping.Format.simple == groupSpec.getResponseFormat() && !groupSpec.isMain()) {\n      endResultTransformer = SIMPLE_END_RESULT_TRANSFORMER;\n    } else {\n      return;\n    }\n    Map<String, Object> combinedMap = new LinkedHashMap<String, Object>();\n    combinedMap.putAll(rb.mergedTopGroups);\n    combinedMap.putAll(rb.mergedQueryCommandResults);\n    endResultTransformer.transform(combinedMap, rb, solrDocumentSource);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#groupedFinishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#groupedFinishStage(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void groupedFinishStage(final ResponseBuilder rb) {\n    // To have same response as non-distributed request.\n    GroupingSpecification groupSpec = rb.getGroupingSpec();\n    if (rb.mergedTopGroups.isEmpty()) {\n      for (String field : groupSpec.getFields()) {\n        rb.mergedTopGroups.put(field, new TopGroups(null, null, 0, 0, new GroupDocs[]{}, Float.NaN));\n      }\n      rb.resultIds = new HashMap<Object, ShardDoc>();\n    }\n\n    EndResultTransformer.SolrDocumentSource solrDocumentSource = new EndResultTransformer.SolrDocumentSource() {\n\n      @Override\n      public SolrDocument retrieve(ScoreDoc doc) {\n        ShardDoc solrDoc = (ShardDoc) doc;\n        return rb.retrievedDocuments.get(solrDoc.id);\n      }\n\n    };\n    EndResultTransformer endResultTransformer;\n    if (groupSpec.isMain()) {\n      endResultTransformer = MAIN_END_RESULT_TRANSFORMER;\n    } else if (Grouping.Format.grouped == groupSpec.getResponseFormat()) {\n      endResultTransformer = new GroupedEndResultTransformer(rb.req.getSearcher());\n    } else if (Grouping.Format.simple == groupSpec.getResponseFormat() && !groupSpec.isMain()) {\n      endResultTransformer = SIMPLE_END_RESULT_TRANSFORMER;\n    } else {\n      return;\n    }\n    Map<String, Object> combinedMap = new LinkedHashMap<String, Object>();\n    combinedMap.putAll(rb.mergedTopGroups);\n    combinedMap.putAll(rb.mergedQueryCommandResults);\n    endResultTransformer.transform(combinedMap, rb, solrDocumentSource);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void groupedFinishStage(final ResponseBuilder rb) {\n    // To have same response as non-distributed request.\n    GroupingSpecification groupSpec = rb.getGroupingSpec();\n    if (rb.mergedTopGroups.isEmpty()) {\n      for (String field : groupSpec.getFields()) {\n        rb.mergedTopGroups.put(field, new TopGroups(null, null, 0, 0, new GroupDocs[]{}, Float.NaN));\n      }\n      rb.resultIds = new HashMap<Object, ShardDoc>();\n    }\n\n    EndResultTransformer.SolrDocumentSource solrDocumentSource = new EndResultTransformer.SolrDocumentSource() {\n\n      public SolrDocument retrieve(ScoreDoc doc) {\n        ShardDoc solrDoc = (ShardDoc) doc;\n        return rb.retrievedDocuments.get(solrDoc.id);\n      }\n\n    };\n    EndResultTransformer endResultTransformer;\n    if (groupSpec.isMain()) {\n      endResultTransformer = MAIN_END_RESULT_TRANSFORMER;\n    } else if (Grouping.Format.grouped == groupSpec.getResponseFormat()) {\n      endResultTransformer = new GroupedEndResultTransformer(rb.req.getSearcher());\n    } else if (Grouping.Format.simple == groupSpec.getResponseFormat() && !groupSpec.isMain()) {\n      endResultTransformer = SIMPLE_END_RESULT_TRANSFORMER;\n    } else {\n      return;\n    }\n    Map<String, Object> combinedMap = new LinkedHashMap<String, Object>();\n    combinedMap.putAll(rb.mergedTopGroups);\n    combinedMap.putAll(rb.mergedQueryCommandResults);\n    endResultTransformer.transform(combinedMap, rb, solrDocumentSource);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#groupedFinishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#groupedFinishStage(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void groupedFinishStage(final ResponseBuilder rb) {\n    // To have same response as non-distributed request.\n    GroupingSpecification groupSpec = rb.getGroupingSpec();\n    if (rb.mergedTopGroups.isEmpty()) {\n      for (String field : groupSpec.getFields()) {\n        rb.mergedTopGroups.put(field, new TopGroups(null, null, 0, 0, new GroupDocs[]{}, Float.NaN));\n      }\n      rb.resultIds = new HashMap<>();\n    }\n\n    EndResultTransformer.SolrDocumentSource solrDocumentSource = new EndResultTransformer.SolrDocumentSource() {\n\n      @Override\n      public SolrDocument retrieve(ScoreDoc doc) {\n        ShardDoc solrDoc = (ShardDoc) doc;\n        return rb.retrievedDocuments.get(solrDoc.id);\n      }\n\n    };\n    EndResultTransformer endResultTransformer;\n    if (groupSpec.isMain()) {\n      endResultTransformer = MAIN_END_RESULT_TRANSFORMER;\n    } else if (Grouping.Format.grouped == groupSpec.getResponseFormat()) {\n      endResultTransformer = new GroupedEndResultTransformer(rb.req.getSearcher());\n    } else if (Grouping.Format.simple == groupSpec.getResponseFormat() && !groupSpec.isMain()) {\n      endResultTransformer = SIMPLE_END_RESULT_TRANSFORMER;\n    } else {\n      return;\n    }\n    Map<String, Object> combinedMap = new LinkedHashMap<>();\n    combinedMap.putAll(rb.mergedTopGroups);\n    combinedMap.putAll(rb.mergedQueryCommandResults);\n    endResultTransformer.transform(combinedMap, rb, solrDocumentSource);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void groupedFinishStage(final ResponseBuilder rb) {\n    // To have same response as non-distributed request.\n    GroupingSpecification groupSpec = rb.getGroupingSpec();\n    if (rb.mergedTopGroups.isEmpty()) {\n      for (String field : groupSpec.getFields()) {\n        rb.mergedTopGroups.put(field, new TopGroups(null, null, 0, 0, new GroupDocs[]{}, Float.NaN));\n      }\n      rb.resultIds = new HashMap<Object, ShardDoc>();\n    }\n\n    EndResultTransformer.SolrDocumentSource solrDocumentSource = new EndResultTransformer.SolrDocumentSource() {\n\n      @Override\n      public SolrDocument retrieve(ScoreDoc doc) {\n        ShardDoc solrDoc = (ShardDoc) doc;\n        return rb.retrievedDocuments.get(solrDoc.id);\n      }\n\n    };\n    EndResultTransformer endResultTransformer;\n    if (groupSpec.isMain()) {\n      endResultTransformer = MAIN_END_RESULT_TRANSFORMER;\n    } else if (Grouping.Format.grouped == groupSpec.getResponseFormat()) {\n      endResultTransformer = new GroupedEndResultTransformer(rb.req.getSearcher());\n    } else if (Grouping.Format.simple == groupSpec.getResponseFormat() && !groupSpec.isMain()) {\n      endResultTransformer = SIMPLE_END_RESULT_TRANSFORMER;\n    } else {\n      return;\n    }\n    Map<String, Object> combinedMap = new LinkedHashMap<String, Object>();\n    combinedMap.putAll(rb.mergedTopGroups);\n    combinedMap.putAll(rb.mergedQueryCommandResults);\n    endResultTransformer.transform(combinedMap, rb, solrDocumentSource);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35d59689803f4ad27f96148bb7c7167e373c6770","date":1454297137,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#groupedFinishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#groupedFinishStage(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected void groupedFinishStage(final ResponseBuilder rb) {\n    // To have same response as non-distributed request.\n    GroupingSpecification groupSpec = rb.getGroupingSpec();\n    if (rb.mergedTopGroups.isEmpty()) {\n      for (String field : groupSpec.getFields()) {\n        rb.mergedTopGroups.put(field, new TopGroups(null, null, 0, 0, new GroupDocs[]{}, Float.NaN));\n      }\n      rb.resultIds = new HashMap<>();\n    }\n\n    EndResultTransformer.SolrDocumentSource solrDocumentSource = new EndResultTransformer.SolrDocumentSource() {\n\n      @Override\n      public SolrDocument retrieve(ScoreDoc doc) {\n        ShardDoc solrDoc = (ShardDoc) doc;\n        return rb.retrievedDocuments.get(solrDoc.id);\n      }\n\n    };\n    EndResultTransformer endResultTransformer;\n    if (groupSpec.isMain()) {\n      endResultTransformer = MAIN_END_RESULT_TRANSFORMER;\n    } else if (Grouping.Format.grouped == groupSpec.getResponseFormat()) {\n      endResultTransformer = new GroupedEndResultTransformer(rb.req.getSearcher());\n    } else if (Grouping.Format.simple == groupSpec.getResponseFormat() && !groupSpec.isMain()) {\n      endResultTransformer = SIMPLE_END_RESULT_TRANSFORMER;\n    } else {\n      return;\n    }\n    Map<String, Object> combinedMap = new LinkedHashMap<>();\n    combinedMap.putAll(rb.mergedTopGroups);\n    combinedMap.putAll(rb.mergedQueryCommandResults);\n    endResultTransformer.transform(combinedMap, rb, solrDocumentSource);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void groupedFinishStage(final ResponseBuilder rb) {\n    // To have same response as non-distributed request.\n    GroupingSpecification groupSpec = rb.getGroupingSpec();\n    if (rb.mergedTopGroups.isEmpty()) {\n      for (String field : groupSpec.getFields()) {\n        rb.mergedTopGroups.put(field, new TopGroups(null, null, 0, 0, new GroupDocs[]{}, Float.NaN));\n      }\n      rb.resultIds = new HashMap<>();\n    }\n\n    EndResultTransformer.SolrDocumentSource solrDocumentSource = new EndResultTransformer.SolrDocumentSource() {\n\n      @Override\n      public SolrDocument retrieve(ScoreDoc doc) {\n        ShardDoc solrDoc = (ShardDoc) doc;\n        return rb.retrievedDocuments.get(solrDoc.id);\n      }\n\n    };\n    EndResultTransformer endResultTransformer;\n    if (groupSpec.isMain()) {\n      endResultTransformer = MAIN_END_RESULT_TRANSFORMER;\n    } else if (Grouping.Format.grouped == groupSpec.getResponseFormat()) {\n      endResultTransformer = new GroupedEndResultTransformer(rb.req.getSearcher());\n    } else if (Grouping.Format.simple == groupSpec.getResponseFormat() && !groupSpec.isMain()) {\n      endResultTransformer = SIMPLE_END_RESULT_TRANSFORMER;\n    } else {\n      return;\n    }\n    Map<String, Object> combinedMap = new LinkedHashMap<>();\n    combinedMap.putAll(rb.mergedTopGroups);\n    combinedMap.putAll(rb.mergedQueryCommandResults);\n    endResultTransformer.transform(combinedMap, rb, solrDocumentSource);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#groupedFinishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#groupedFinishStage(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected void groupedFinishStage(final ResponseBuilder rb) {\n    // To have same response as non-distributed request.\n    GroupingSpecification groupSpec = rb.getGroupingSpec();\n    if (rb.mergedTopGroups.isEmpty()) {\n      for (String field : groupSpec.getFields()) {\n        rb.mergedTopGroups.put(field, new TopGroups(null, null, 0, 0, new GroupDocs[]{}, Float.NaN));\n      }\n      rb.resultIds = new HashMap<>();\n    }\n\n    EndResultTransformer.SolrDocumentSource solrDocumentSource = new EndResultTransformer.SolrDocumentSource() {\n\n      @Override\n      public SolrDocument retrieve(ScoreDoc doc) {\n        ShardDoc solrDoc = (ShardDoc) doc;\n        return rb.retrievedDocuments.get(solrDoc.id);\n      }\n\n    };\n    EndResultTransformer endResultTransformer;\n    if (groupSpec.isMain()) {\n      endResultTransformer = MAIN_END_RESULT_TRANSFORMER;\n    } else if (Grouping.Format.grouped == groupSpec.getResponseFormat()) {\n      endResultTransformer = new GroupedEndResultTransformer(rb.req.getSearcher());\n    } else if (Grouping.Format.simple == groupSpec.getResponseFormat() && !groupSpec.isMain()) {\n      endResultTransformer = SIMPLE_END_RESULT_TRANSFORMER;\n    } else {\n      return;\n    }\n    Map<String, Object> combinedMap = new LinkedHashMap<>();\n    combinedMap.putAll(rb.mergedTopGroups);\n    combinedMap.putAll(rb.mergedQueryCommandResults);\n    endResultTransformer.transform(combinedMap, rb, solrDocumentSource);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void groupedFinishStage(final ResponseBuilder rb) {\n    // To have same response as non-distributed request.\n    GroupingSpecification groupSpec = rb.getGroupingSpec();\n    if (rb.mergedTopGroups.isEmpty()) {\n      for (String field : groupSpec.getFields()) {\n        rb.mergedTopGroups.put(field, new TopGroups(null, null, 0, 0, new GroupDocs[]{}, Float.NaN));\n      }\n      rb.resultIds = new HashMap<>();\n    }\n\n    EndResultTransformer.SolrDocumentSource solrDocumentSource = new EndResultTransformer.SolrDocumentSource() {\n\n      @Override\n      public SolrDocument retrieve(ScoreDoc doc) {\n        ShardDoc solrDoc = (ShardDoc) doc;\n        return rb.retrievedDocuments.get(solrDoc.id);\n      }\n\n    };\n    EndResultTransformer endResultTransformer;\n    if (groupSpec.isMain()) {\n      endResultTransformer = MAIN_END_RESULT_TRANSFORMER;\n    } else if (Grouping.Format.grouped == groupSpec.getResponseFormat()) {\n      endResultTransformer = new GroupedEndResultTransformer(rb.req.getSearcher());\n    } else if (Grouping.Format.simple == groupSpec.getResponseFormat() && !groupSpec.isMain()) {\n      endResultTransformer = SIMPLE_END_RESULT_TRANSFORMER;\n    } else {\n      return;\n    }\n    Map<String, Object> combinedMap = new LinkedHashMap<>();\n    combinedMap.putAll(rb.mergedTopGroups);\n    combinedMap.putAll(rb.mergedQueryCommandResults);\n    endResultTransformer.transform(combinedMap, rb, solrDocumentSource);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b04972a589b63fe694313d3868815a20546c4907","date":1460726888,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#groupedFinishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#groupedFinishStage(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected void groupedFinishStage(final ResponseBuilder rb) {\n    // To have same response as non-distributed request.\n    GroupingSpecification groupSpec = rb.getGroupingSpec();\n    if (rb.mergedTopGroups.isEmpty()) {\n      for (String field : groupSpec.getFields()) {\n        rb.mergedTopGroups.put(field, new TopGroups(null, null, 0, 0, new GroupDocs[]{}, Float.NaN));\n      }\n      rb.resultIds = new HashMap<>();\n    }\n\n    EndResultTransformer.SolrDocumentSource solrDocumentSource = doc -> {\n      ShardDoc solrDoc = (ShardDoc) doc;\n      return rb.retrievedDocuments.get(solrDoc.id);\n    };\n    EndResultTransformer endResultTransformer;\n    if (groupSpec.isMain()) {\n      endResultTransformer = MAIN_END_RESULT_TRANSFORMER;\n    } else if (Grouping.Format.grouped == groupSpec.getResponseFormat()) {\n      endResultTransformer = new GroupedEndResultTransformer(rb.req.getSearcher());\n    } else if (Grouping.Format.simple == groupSpec.getResponseFormat() && !groupSpec.isMain()) {\n      endResultTransformer = SIMPLE_END_RESULT_TRANSFORMER;\n    } else {\n      return;\n    }\n    Map<String, Object> combinedMap = new LinkedHashMap<>();\n    combinedMap.putAll(rb.mergedTopGroups);\n    combinedMap.putAll(rb.mergedQueryCommandResults);\n    endResultTransformer.transform(combinedMap, rb, solrDocumentSource);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected void groupedFinishStage(final ResponseBuilder rb) {\n    // To have same response as non-distributed request.\n    GroupingSpecification groupSpec = rb.getGroupingSpec();\n    if (rb.mergedTopGroups.isEmpty()) {\n      for (String field : groupSpec.getFields()) {\n        rb.mergedTopGroups.put(field, new TopGroups(null, null, 0, 0, new GroupDocs[]{}, Float.NaN));\n      }\n      rb.resultIds = new HashMap<>();\n    }\n\n    EndResultTransformer.SolrDocumentSource solrDocumentSource = new EndResultTransformer.SolrDocumentSource() {\n\n      @Override\n      public SolrDocument retrieve(ScoreDoc doc) {\n        ShardDoc solrDoc = (ShardDoc) doc;\n        return rb.retrievedDocuments.get(solrDoc.id);\n      }\n\n    };\n    EndResultTransformer endResultTransformer;\n    if (groupSpec.isMain()) {\n      endResultTransformer = MAIN_END_RESULT_TRANSFORMER;\n    } else if (Grouping.Format.grouped == groupSpec.getResponseFormat()) {\n      endResultTransformer = new GroupedEndResultTransformer(rb.req.getSearcher());\n    } else if (Grouping.Format.simple == groupSpec.getResponseFormat() && !groupSpec.isMain()) {\n      endResultTransformer = SIMPLE_END_RESULT_TRANSFORMER;\n    } else {\n      return;\n    }\n    Map<String, Object> combinedMap = new LinkedHashMap<>();\n    combinedMap.putAll(rb.mergedTopGroups);\n    combinedMap.putAll(rb.mergedQueryCommandResults);\n    endResultTransformer.transform(combinedMap, rb, solrDocumentSource);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73457c9372b4f2f962ca916788a5fe9e1f644a9f","date":1460794059,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#groupedFinishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#groupedFinishStage(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected void groupedFinishStage(final ResponseBuilder rb) {\n    // To have same response as non-distributed request.\n    GroupingSpecification groupSpec = rb.getGroupingSpec();\n    if (rb.mergedTopGroups.isEmpty()) {\n      for (String field : groupSpec.getFields()) {\n        rb.mergedTopGroups.put(field, new TopGroups(null, null, 0, 0, new GroupDocs[]{}, Float.NaN));\n      }\n      rb.resultIds = new HashMap<>();\n    }\n\n    EndResultTransformer.SolrDocumentSource solrDocumentSource = doc -> {\n      ShardDoc solrDoc = (ShardDoc) doc;\n      return rb.retrievedDocuments.get(solrDoc.id);\n    };\n    EndResultTransformer endResultTransformer;\n    if (groupSpec.isMain()) {\n      endResultTransformer = MAIN_END_RESULT_TRANSFORMER;\n    } else if (Grouping.Format.grouped == groupSpec.getResponseFormat()) {\n      endResultTransformer = new GroupedEndResultTransformer(rb.req.getSearcher());\n    } else if (Grouping.Format.simple == groupSpec.getResponseFormat() && !groupSpec.isMain()) {\n      endResultTransformer = SIMPLE_END_RESULT_TRANSFORMER;\n    } else {\n      return;\n    }\n    Map<String, Object> combinedMap = new LinkedHashMap<>();\n    combinedMap.putAll(rb.mergedTopGroups);\n    combinedMap.putAll(rb.mergedQueryCommandResults);\n    endResultTransformer.transform(combinedMap, rb, solrDocumentSource);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected void groupedFinishStage(final ResponseBuilder rb) {\n    // To have same response as non-distributed request.\n    GroupingSpecification groupSpec = rb.getGroupingSpec();\n    if (rb.mergedTopGroups.isEmpty()) {\n      for (String field : groupSpec.getFields()) {\n        rb.mergedTopGroups.put(field, new TopGroups(null, null, 0, 0, new GroupDocs[]{}, Float.NaN));\n      }\n      rb.resultIds = new HashMap<>();\n    }\n\n    EndResultTransformer.SolrDocumentSource solrDocumentSource = new EndResultTransformer.SolrDocumentSource() {\n\n      @Override\n      public SolrDocument retrieve(ScoreDoc doc) {\n        ShardDoc solrDoc = (ShardDoc) doc;\n        return rb.retrievedDocuments.get(solrDoc.id);\n      }\n\n    };\n    EndResultTransformer endResultTransformer;\n    if (groupSpec.isMain()) {\n      endResultTransformer = MAIN_END_RESULT_TRANSFORMER;\n    } else if (Grouping.Format.grouped == groupSpec.getResponseFormat()) {\n      endResultTransformer = new GroupedEndResultTransformer(rb.req.getSearcher());\n    } else if (Grouping.Format.simple == groupSpec.getResponseFormat() && !groupSpec.isMain()) {\n      endResultTransformer = SIMPLE_END_RESULT_TRANSFORMER;\n    } else {\n      return;\n    }\n    Map<String, Object> combinedMap = new LinkedHashMap<>();\n    combinedMap.putAll(rb.mergedTopGroups);\n    combinedMap.putAll(rb.mergedQueryCommandResults);\n    endResultTransformer.transform(combinedMap, rb, solrDocumentSource);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#groupedFinishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#groupedFinishStage(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  protected void groupedFinishStage(final ResponseBuilder rb) {\n    // To have same response as non-distributed request.\n    GroupingSpecification groupSpec = rb.getGroupingSpec();\n    if (rb.mergedTopGroups.isEmpty()) {\n      for (String field : groupSpec.getFields()) {\n        rb.mergedTopGroups.put(field, new TopGroups(null, null, 0, 0, new GroupDocs[]{}, Float.NaN));\n      }\n      rb.resultIds = new HashMap<>();\n    }\n\n    EndResultTransformer.SolrDocumentSource solrDocumentSource = doc -> {\n      ShardDoc solrDoc = (ShardDoc) doc;\n      return rb.retrievedDocuments.get(solrDoc.id);\n    };\n    EndResultTransformer endResultTransformer;\n    if (groupSpec.isMain()) {\n      endResultTransformer = MAIN_END_RESULT_TRANSFORMER;\n    } else if (Grouping.Format.grouped == groupSpec.getResponseFormat()) {\n      endResultTransformer = new GroupedEndResultTransformer(rb.req.getSearcher());\n    } else if (Grouping.Format.simple == groupSpec.getResponseFormat() && !groupSpec.isMain()) {\n      endResultTransformer = SIMPLE_END_RESULT_TRANSFORMER;\n    } else {\n      return;\n    }\n    Map<String, Object> combinedMap = new LinkedHashMap<>();\n    combinedMap.putAll(rb.mergedTopGroups);\n    combinedMap.putAll(rb.mergedQueryCommandResults);\n    endResultTransformer.transform(combinedMap, rb, solrDocumentSource);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected void groupedFinishStage(final ResponseBuilder rb) {\n    // To have same response as non-distributed request.\n    GroupingSpecification groupSpec = rb.getGroupingSpec();\n    if (rb.mergedTopGroups.isEmpty()) {\n      for (String field : groupSpec.getFields()) {\n        rb.mergedTopGroups.put(field, new TopGroups(null, null, 0, 0, new GroupDocs[]{}, Float.NaN));\n      }\n      rb.resultIds = new HashMap<>();\n    }\n\n    EndResultTransformer.SolrDocumentSource solrDocumentSource = doc -> {\n      ShardDoc solrDoc = (ShardDoc) doc;\n      return rb.retrievedDocuments.get(solrDoc.id);\n    };\n    EndResultTransformer endResultTransformer;\n    if (groupSpec.isMain()) {\n      endResultTransformer = MAIN_END_RESULT_TRANSFORMER;\n    } else if (Grouping.Format.grouped == groupSpec.getResponseFormat()) {\n      endResultTransformer = new GroupedEndResultTransformer(rb.req.getSearcher());\n    } else if (Grouping.Format.simple == groupSpec.getResponseFormat() && !groupSpec.isMain()) {\n      endResultTransformer = SIMPLE_END_RESULT_TRANSFORMER;\n    } else {\n      return;\n    }\n    Map<String, Object> combinedMap = new LinkedHashMap<>();\n    combinedMap.putAll(rb.mergedTopGroups);\n    combinedMap.putAll(rb.mergedQueryCommandResults);\n    endResultTransformer.transform(combinedMap, rb, solrDocumentSource);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["85d41890f2bad879e6a04c6dd7d2cf276f973994","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7530de27b87b961b51f01bd1299b7004d46e8823"],"b04972a589b63fe694313d3868815a20546c4907":["35d59689803f4ad27f96148bb7c7167e373c6770"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","35d59689803f4ad27f96148bb7c7167e373c6770"],"612521de57bdf68711c68b6d8565e4a80ca0d7f6":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["73457c9372b4f2f962ca916788a5fe9e1f644a9f"],"85d41890f2bad879e6a04c6dd7d2cf276f973994":["612521de57bdf68711c68b6d8565e4a80ca0d7f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"35d59689803f4ad27f96148bb7c7167e373c6770":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7530de27b87b961b51f01bd1299b7004d46e8823":["85d41890f2bad879e6a04c6dd7d2cf276f973994"],"73457c9372b4f2f962ca916788a5fe9e1f644a9f":["35d59689803f4ad27f96148bb7c7167e373c6770","b04972a589b63fe694313d3868815a20546c4907"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","35d59689803f4ad27f96148bb7c7167e373c6770"],"b04972a589b63fe694313d3868815a20546c4907":["73457c9372b4f2f962ca916788a5fe9e1f644a9f"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["612521de57bdf68711c68b6d8565e4a80ca0d7f6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"612521de57bdf68711c68b6d8565e4a80ca0d7f6":["85d41890f2bad879e6a04c6dd7d2cf276f973994"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85d41890f2bad879e6a04c6dd7d2cf276f973994":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"35d59689803f4ad27f96148bb7c7167e373c6770":["b04972a589b63fe694313d3868815a20546c4907","1e6acbaae7af722f17204ceccf0f7db5753eccf3","73457c9372b4f2f962ca916788a5fe9e1f644a9f"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"73457c9372b4f2f962ca916788a5fe9e1f644a9f":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}