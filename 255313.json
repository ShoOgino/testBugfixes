{"path":"client/java/solrj/src/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","commits":[{"id":"acdd729ace9db5d0803eea4849ddc3c2ba196127","date":1181861605,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","pathOld":"/dev/null","sourceNew":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Integer.parseInt( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Integer.parseInt( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"shoudl be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17a4a2e432254ad9a50a564dc8ac204f6a50fffb","date":1199891649,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","sourceNew":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"shoudl be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Integer.parseInt( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Integer.parseInt( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"shoudl be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","sourceNew":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"shoudl be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"shoudl be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["17a4a2e432254ad9a50a564dc8ac204f6a50fffb"],"acdd729ace9db5d0803eea4849ddc3c2ba196127":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"17a4a2e432254ad9a50a564dc8ac204f6a50fffb":["acdd729ace9db5d0803eea4849ddc3c2ba196127"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"acdd729ace9db5d0803eea4849ddc3c2ba196127":["17a4a2e432254ad9a50a564dc8ac204f6a50fffb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["acdd729ace9db5d0803eea4849ddc3c2ba196127"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17a4a2e432254ad9a50a564dc8ac204f6a50fffb":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}