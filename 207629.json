{"path":"lucene/classification/src/test/org/apache/lucene/classification/KNearestFuzzyClassifierTest#testPerformance().mjava","commits":[{"id":"e71b30ca45cace3116f6ee06a0bbcb578707fa52","date":1495110978,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestFuzzyClassifierTest#testPerformance().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      long trainStart = System.currentTimeMillis();\n      Classifier<BytesRef> classifier = new KNearestFuzzyClassifier(leafReader, null, analyzer, null, 3, categoryFieldName, textFieldName);\n      long trainEnd = System.currentTimeMillis();\n      long trainTime = trainEnd - trainStart;\n      assertTrue(\"training took more than 10s: \" + trainTime / 1000 + \"s\", trainTime < 10000);\n\n      long evaluationStart = System.currentTimeMillis();\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          classifier, categoryFieldName, textFieldName, -1);\n      assertNotNull(confusionMatrix);\n      long evaluationEnd = System.currentTimeMillis();\n      long evaluationTime = evaluationEnd - evaluationStart;\n      assertTrue(\"evaluation took more than 2m: \" + evaluationTime / 1000 + \"s\", evaluationTime < 120000);\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(5000 > avgClassificationTime);\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n\n      Terms terms = MultiFields.getTerms(leafReader, categoryFieldName);\n      TermsEnum iterator = terms.iterator();\n      BytesRef term;\n      while ((term = iterator.next()) != null) {\n        String s = term.utf8ToString();\n        recall = confusionMatrix.getRecall(s);\n        assertTrue(recall >= 0d);\n        assertTrue(recall <= 1d);\n        precision = confusionMatrix.getPrecision(s);\n        assertTrue(precision >= 0d);\n        assertTrue(precision <= 1d);\n        double f1Measure = confusionMatrix.getF1Measure(s);\n        assertTrue(f1Measure >= 0d);\n        assertTrue(f1Measure <= 1d);\n      }\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6ba8fc7f78f1a96eecf248637ea9ac90178c79c3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestFuzzyClassifierTest#testPerformance().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      long trainStart = System.currentTimeMillis();\n      Classifier<BytesRef> classifier = new KNearestFuzzyClassifier(leafReader, null, analyzer, null, 3, categoryFieldName, textFieldName);\n      long trainEnd = System.currentTimeMillis();\n      long trainTime = trainEnd - trainStart;\n      assertTrue(\"training took more than 10s: \" + trainTime / 1000 + \"s\", trainTime < 10000);\n\n      long evaluationStart = System.currentTimeMillis();\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          classifier, categoryFieldName, textFieldName, -1);\n      assertNotNull(confusionMatrix);\n      long evaluationEnd = System.currentTimeMillis();\n      long evaluationTime = evaluationEnd - evaluationStart;\n      assertTrue(\"evaluation took more than 2m: \" + evaluationTime / 1000 + \"s\", evaluationTime < 120000);\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(5000 > avgClassificationTime);\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n\n      Terms terms = MultiFields.getTerms(leafReader, categoryFieldName);\n      TermsEnum iterator = terms.iterator();\n      BytesRef term;\n      while ((term = iterator.next()) != null) {\n        String s = term.utf8ToString();\n        recall = confusionMatrix.getRecall(s);\n        assertTrue(recall >= 0d);\n        assertTrue(recall <= 1d);\n        precision = confusionMatrix.getPrecision(s);\n        assertTrue(precision >= 0d);\n        assertTrue(precision <= 1d);\n        double f1Measure = confusionMatrix.getF1Measure(s);\n        assertTrue(f1Measure >= 0d);\n        assertTrue(f1Measure <= 1d);\n      }\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ba8fc7f78f1a96eecf248637ea9ac90178c79c3","date":1522138495,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestFuzzyClassifierTest#testPerformance().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestFuzzyClassifierTest#testPerformance().mjava","sourceNew":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      Classifier<BytesRef> classifier = new KNearestFuzzyClassifier(leafReader, null, analyzer, null, 3, categoryFieldName, textFieldName);\n\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          classifier, categoryFieldName, textFieldName, -1);\n      assertNotNull(confusionMatrix);\n\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(avgClassificationTime >= 0);\n\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n\n      Terms terms = MultiFields.getTerms(leafReader, categoryFieldName);\n      TermsEnum iterator = terms.iterator();\n      BytesRef term;\n      while ((term = iterator.next()) != null) {\n        String s = term.utf8ToString();\n        recall = confusionMatrix.getRecall(s);\n        assertTrue(recall >= 0d);\n        assertTrue(recall <= 1d);\n        precision = confusionMatrix.getPrecision(s);\n        assertTrue(precision >= 0d);\n        assertTrue(precision <= 1d);\n        double f1Measure = confusionMatrix.getF1Measure(s);\n        assertTrue(f1Measure >= 0d);\n        assertTrue(f1Measure <= 1d);\n      }\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      long trainStart = System.currentTimeMillis();\n      Classifier<BytesRef> classifier = new KNearestFuzzyClassifier(leafReader, null, analyzer, null, 3, categoryFieldName, textFieldName);\n      long trainEnd = System.currentTimeMillis();\n      long trainTime = trainEnd - trainStart;\n      assertTrue(\"training took more than 10s: \" + trainTime / 1000 + \"s\", trainTime < 10000);\n\n      long evaluationStart = System.currentTimeMillis();\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          classifier, categoryFieldName, textFieldName, -1);\n      assertNotNull(confusionMatrix);\n      long evaluationEnd = System.currentTimeMillis();\n      long evaluationTime = evaluationEnd - evaluationStart;\n      assertTrue(\"evaluation took more than 2m: \" + evaluationTime / 1000 + \"s\", evaluationTime < 120000);\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(5000 > avgClassificationTime);\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n\n      Terms terms = MultiFields.getTerms(leafReader, categoryFieldName);\n      TermsEnum iterator = terms.iterator();\n      BytesRef term;\n      while ((term = iterator.next()) != null) {\n        String s = term.utf8ToString();\n        recall = confusionMatrix.getRecall(s);\n        assertTrue(recall >= 0d);\n        assertTrue(recall <= 1d);\n        precision = confusionMatrix.getPrecision(s);\n        assertTrue(precision >= 0d);\n        assertTrue(precision <= 1d);\n        double f1Measure = confusionMatrix.getF1Measure(s);\n        assertTrue(f1Measure >= 0d);\n        assertTrue(f1Measure <= 1d);\n      }\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","bugFix":["e71b30ca45cace3116f6ee06a0bbcb578707fa52"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7","date":1522191940,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestFuzzyClassifierTest#testPerformance().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestFuzzyClassifierTest#testPerformance().mjava","sourceNew":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      Classifier<BytesRef> classifier = new KNearestFuzzyClassifier(leafReader, null, analyzer, null, 3, categoryFieldName, textFieldName);\n\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          classifier, categoryFieldName, textFieldName, -1);\n      assertNotNull(confusionMatrix);\n\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(avgClassificationTime >= 0);\n\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n\n      Terms terms = MultiFields.getTerms(leafReader, categoryFieldName);\n      TermsEnum iterator = terms.iterator();\n      BytesRef term;\n      while ((term = iterator.next()) != null) {\n        String s = term.utf8ToString();\n        recall = confusionMatrix.getRecall(s);\n        assertTrue(recall >= 0d);\n        assertTrue(recall <= 1d);\n        precision = confusionMatrix.getPrecision(s);\n        assertTrue(precision >= 0d);\n        assertTrue(precision <= 1d);\n        double f1Measure = confusionMatrix.getF1Measure(s);\n        assertTrue(f1Measure >= 0d);\n        assertTrue(f1Measure <= 1d);\n      }\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      long trainStart = System.currentTimeMillis();\n      Classifier<BytesRef> classifier = new KNearestFuzzyClassifier(leafReader, null, analyzer, null, 3, categoryFieldName, textFieldName);\n      long trainEnd = System.currentTimeMillis();\n      long trainTime = trainEnd - trainStart;\n      assertTrue(\"training took more than 10s: \" + trainTime / 1000 + \"s\", trainTime < 10000);\n\n      long evaluationStart = System.currentTimeMillis();\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          classifier, categoryFieldName, textFieldName, -1);\n      assertNotNull(confusionMatrix);\n      long evaluationEnd = System.currentTimeMillis();\n      long evaluationTime = evaluationEnd - evaluationStart;\n      assertTrue(\"evaluation took more than 2m: \" + evaluationTime / 1000 + \"s\", evaluationTime < 120000);\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(5000 > avgClassificationTime);\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n\n      Terms terms = MultiFields.getTerms(leafReader, categoryFieldName);\n      TermsEnum iterator = terms.iterator();\n      BytesRef term;\n      while ((term = iterator.next()) != null) {\n        String s = term.utf8ToString();\n        recall = confusionMatrix.getRecall(s);\n        assertTrue(recall >= 0d);\n        assertTrue(recall <= 1d);\n        precision = confusionMatrix.getPrecision(s);\n        assertTrue(precision >= 0d);\n        assertTrue(precision <= 1d);\n        double f1Measure = confusionMatrix.getF1Measure(s);\n        assertTrue(f1Measure >= 0d);\n        assertTrue(f1Measure <= 1d);\n      }\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestFuzzyClassifierTest#testPerformance().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestFuzzyClassifierTest#testPerformance().mjava","sourceNew":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      Classifier<BytesRef> classifier = new KNearestFuzzyClassifier(leafReader, null, analyzer, null, 3, categoryFieldName, textFieldName);\n\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          classifier, categoryFieldName, textFieldName, -1);\n      assertNotNull(confusionMatrix);\n\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(avgClassificationTime >= 0);\n\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n\n      Terms terms = MultiTerms.getTerms(leafReader, categoryFieldName);\n      TermsEnum iterator = terms.iterator();\n      BytesRef term;\n      while ((term = iterator.next()) != null) {\n        String s = term.utf8ToString();\n        recall = confusionMatrix.getRecall(s);\n        assertTrue(recall >= 0d);\n        assertTrue(recall <= 1d);\n        precision = confusionMatrix.getPrecision(s);\n        assertTrue(precision >= 0d);\n        assertTrue(precision <= 1d);\n        double f1Measure = confusionMatrix.getF1Measure(s);\n        assertTrue(f1Measure >= 0d);\n        assertTrue(f1Measure <= 1d);\n      }\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      Classifier<BytesRef> classifier = new KNearestFuzzyClassifier(leafReader, null, analyzer, null, 3, categoryFieldName, textFieldName);\n\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          classifier, categoryFieldName, textFieldName, -1);\n      assertNotNull(confusionMatrix);\n\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(avgClassificationTime >= 0);\n\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n\n      Terms terms = MultiFields.getTerms(leafReader, categoryFieldName);\n      TermsEnum iterator = terms.iterator();\n      BytesRef term;\n      while ((term = iterator.next()) != null) {\n        String s = term.utf8ToString();\n        recall = confusionMatrix.getRecall(s);\n        assertTrue(recall >= 0d);\n        assertTrue(recall <= 1d);\n        precision = confusionMatrix.getPrecision(s);\n        assertTrue(precision >= 0d);\n        assertTrue(precision <= 1d);\n        double f1Measure = confusionMatrix.getF1Measure(s);\n        assertTrue(f1Measure >= 0d);\n        assertTrue(f1Measure <= 1d);\n      }\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c6c784f777a2cc8fa014507ea129526822714d","date":1579733373,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestFuzzyClassifierTest#testPerformance().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestFuzzyClassifierTest#testPerformance().mjava","sourceNew":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    int numDocs = atLeast(10);\n    LeafReader leafReader = getRandomIndex(analyzer, numDocs);\n    try {\n      Classifier<BytesRef> classifier = new KNearestFuzzyClassifier(leafReader, null, analyzer, null, 3, categoryFieldName, textFieldName);\n\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          classifier, categoryFieldName, textFieldName, -1);\n      assertNotNull(confusionMatrix);\n\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(avgClassificationTime >= 0);\n\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n\n      Terms terms = MultiTerms.getTerms(leafReader, categoryFieldName);\n      TermsEnum iterator = terms.iterator();\n      BytesRef term;\n      while ((term = iterator.next()) != null) {\n        String s = term.utf8ToString();\n        recall = confusionMatrix.getRecall(s);\n        assertTrue(recall >= 0d);\n        assertTrue(recall <= 1d);\n        precision = confusionMatrix.getPrecision(s);\n        assertTrue(precision >= 0d);\n        assertTrue(precision <= 1d);\n        double f1Measure = confusionMatrix.getF1Measure(s);\n        assertTrue(f1Measure >= 0d);\n        assertTrue(f1Measure <= 1d);\n      }\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPerformance() throws Exception {\n    MockAnalyzer analyzer = new MockAnalyzer(random());\n    LeafReader leafReader = getRandomIndex(analyzer, 100);\n    try {\n      Classifier<BytesRef> classifier = new KNearestFuzzyClassifier(leafReader, null, analyzer, null, 3, categoryFieldName, textFieldName);\n\n      ConfusionMatrixGenerator.ConfusionMatrix confusionMatrix = ConfusionMatrixGenerator.getConfusionMatrix(leafReader,\n          classifier, categoryFieldName, textFieldName, -1);\n      assertNotNull(confusionMatrix);\n\n      double avgClassificationTime = confusionMatrix.getAvgClassificationTime();\n      assertTrue(avgClassificationTime >= 0);\n\n      double accuracy = confusionMatrix.getAccuracy();\n      assertTrue(accuracy >= 0d);\n      assertTrue(accuracy <= 1d);\n\n      double recall = confusionMatrix.getRecall();\n      assertTrue(recall >= 0d);\n      assertTrue(recall <= 1d);\n\n      double precision = confusionMatrix.getPrecision();\n      assertTrue(precision >= 0d);\n      assertTrue(precision <= 1d);\n\n      Terms terms = MultiTerms.getTerms(leafReader, categoryFieldName);\n      TermsEnum iterator = terms.iterator();\n      BytesRef term;\n      while ((term = iterator.next()) != null) {\n        String s = term.utf8ToString();\n        recall = confusionMatrix.getRecall(s);\n        assertTrue(recall >= 0d);\n        assertTrue(recall <= 1d);\n        precision = confusionMatrix.getPrecision(s);\n        assertTrue(precision >= 0d);\n        assertTrue(precision <= 1d);\n        double f1Measure = confusionMatrix.getF1Measure(s);\n        assertTrue(f1Measure >= 0d);\n        assertTrue(f1Measure <= 1d);\n      }\n    } finally {\n      leafReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e71b30ca45cace3116f6ee06a0bbcb578707fa52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"57c6c784f777a2cc8fa014507ea129526822714d":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e71b30ca45cace3116f6ee06a0bbcb578707fa52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7":["e71b30ca45cace3116f6ee06a0bbcb578707fa52","6ba8fc7f78f1a96eecf248637ea9ac90178c79c3"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"6ba8fc7f78f1a96eecf248637ea9ac90178c79c3":["e71b30ca45cace3116f6ee06a0bbcb578707fa52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c6c784f777a2cc8fa014507ea129526822714d"]},"commit2Childs":{"e71b30ca45cace3116f6ee06a0bbcb578707fa52":["e9017cf144952056066919f1ebc7897ff9bd71b1","d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7","6ba8fc7f78f1a96eecf248637ea9ac90178c79c3"],"57c6c784f777a2cc8fa014507ea129526822714d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e71b30ca45cace3116f6ee06a0bbcb578707fa52","e9017cf144952056066919f1ebc7897ff9bd71b1"],"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["57c6c784f777a2cc8fa014507ea129526822714d"],"6ba8fc7f78f1a96eecf248637ea9ac90178c79c3":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}