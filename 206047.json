{"path":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n    } catch (IOException e) {\n      fail();\n    }\n  }\n\n","sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n    } catch (IOException e) {\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n      reader.close();\n    } catch (IOException e) {\n      fail();\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n    } catch (IOException e) {\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"deb4fe59e35ea6bac0ee825142d40a04846fe573","date":1282737351,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } catch (IllegalArgumentException e) {\n      // mmapdir will give us this from java.nio.Buffer.position()\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } catch (IllegalArgumentException e) {\n      // mmapdir will give us this from java.nio.Buffer.position()\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n      reader.close();\n    } catch (IOException e) {\n      fail();\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n      reader.close();\n    } catch (IOException e) {\n      fail();\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } catch (IllegalArgumentException e) {\n      // mmapdir will give us this from java.nio.Buffer.position()\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } catch (IllegalArgumentException e) {\n      // mmapdir will give us this from java.nio.Buffer.position()\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n      reader.close();\n    } catch (IOException e) {\n      fail();\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() {\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    }\n    try {\n      TermVectorsReader reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n    } catch (IOException e) {\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68b4c6c95719e3020e407649a20b68538649beeb","date":1308055822,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n      reader.close();\n    } catch (IOException e) {\n      fail();\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } catch (IllegalArgumentException e) {\n      // mmapdir will give us this from java.nio.Buffer.position()\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } catch (IllegalArgumentException e) {\n      // mmapdir will give us this from java.nio.Buffer.position()\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n      reader.close();\n    } catch (IOException e) {\n      fail();\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n      reader.close();\n    } catch (IOException e) {\n      fail();\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } catch (IllegalArgumentException e) {\n      // mmapdir will give us this from java.nio.Buffer.position()\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } catch (IllegalArgumentException e) {\n      // mmapdir will give us this from java.nio.Buffer.position()\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n      reader.close();\n    } catch (IOException e) {\n      fail();\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos, IOContext.READ);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos, IOContext.READ);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos, IOContext.READ);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n      reader.close();\n    } catch (IOException e) {\n      fail();\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n      reader.close();\n    } catch (IOException e) {\n      fail();\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos, newIOContext(random));\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos, newIOContext(random));\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos, newIOContext(random));\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n      reader.close();\n    } catch (IOException e) {\n      fail();\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos, IOContext.READ);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos, IOContext.READ);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos, IOContext.READ);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n      reader.close();\n    } catch (IOException e) {\n      fail();\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos, newIOContext(random));\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos, newIOContext(random));\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos, newIOContext(random));\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n      reader.close();\n    } catch (IOException e) {\n      fail();\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n      reader.close();\n    } catch (IOException e) {\n      fail();\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos, newIOContext(random));\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos, newIOContext(random));\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos, newIOContext(random));\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n      reader.close();\n    } catch (IOException e) {\n      fail();\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos);\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n      reader.close();\n    } catch (IOException e) {\n      fail();\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n      //Bad document number, good field number\n      reader.get(50);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    //good document number, bad field\n    Terms vector = reader.get(0).terms(\"f50\");\n    assertNull(vector);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos, newIOContext(random));\n      //Bad document number, good field number\n      reader.get(50, testFields[0]);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos, newIOContext(random));\n      //Bad document number, no field\n      reader.get(50);\n      fail();\n    } catch (IOException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    try {\n      reader = new TermVectorsReader(dir, seg, fieldInfos, newIOContext(random));\n      //good document number, bad field number\n      TermFreqVector vector = reader.get(0, \"f50\");\n      assertTrue(vector == null);\n      reader.close();\n    } catch (IOException e) {\n      fail();\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermVectorsReader#testBadParams().mjava","sourceNew":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n      //Bad document number, good field number\n      reader.get(50);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    //good document number, bad field\n    Terms vector = reader.get(0).terms(\"f50\");\n    assertNull(vector);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Make sure exceptions and bad params are handled appropriately\n   */\n  public void testBadParams() throws IOException {\n    TermVectorsReader reader = null;\n    try {\n      reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n      //Bad document number, good field number\n      reader.get(50);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // expected exception\n    } finally {\n      reader.close();\n    }\n    reader = Codec.getDefault().termVectorsFormat().vectorsReader(dir, seg, fieldInfos, newIOContext(random));\n    //good document number, bad field\n    Terms vector = reader.get(0).terms(\"f50\");\n    assertNull(vector);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"68b4c6c95719e3020e407649a20b68538649beeb":["deb4fe59e35ea6bac0ee825142d40a04846fe573"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["68b4c6c95719e3020e407649a20b68538649beeb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","deb4fe59e35ea6bac0ee825142d40a04846fe573"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["deb4fe59e35ea6bac0ee825142d40a04846fe573","68b4c6c95719e3020e407649a20b68538649beeb"],"deb4fe59e35ea6bac0ee825142d40a04846fe573":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["9ed208afa1e7aa98899ddb1dedfddedddf898253","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["68b4c6c95719e3020e407649a20b68538649beeb","b6f9be74ca7baaef11857ad002cad40419979516"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"68b4c6c95719e3020e407649a20b68538649beeb":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","9ed208afa1e7aa98899ddb1dedfddedddf898253","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["deb4fe59e35ea6bac0ee825142d40a04846fe573"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"deb4fe59e35ea6bac0ee825142d40a04846fe573":["68b4c6c95719e3020e407649a20b68538649beeb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["3cc749c053615f5871f3b95715fe292f34e70a53","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}