{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","commits":[{"id":"d3fe2fc74577855eadfb5eae3153c2fffdaaf791","date":1305237079,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    for (int j = 0; j < 3 * RANDOM_MULTIPLIER; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        dir.failOn(failure);\n        int numDocs = 10 + random.nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", Field.Store.YES,\n              Field.Index.ANALYZED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.isTermVectorStored());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", Field.Store.YES,\n            Field.Index.ANALYZED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", Field.Store.YES,\n              Field.Index.ANALYZED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.isTermVectorStored());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", Field.Store.YES,\n            Field.Index.ANALYZED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    for (int j = 0; j < 3 * RANDOM_MULTIPLIER; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        dir.failOn(failure);\n        int numDocs = 10 + random.nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", Field.Store.YES,\n              Field.Index.ANALYZED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.isTermVectorStored());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", Field.Store.YES,\n            Field.Index.ANALYZED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", Field.Store.YES,\n              Field.Index.ANALYZED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.isTermVectorStored());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", Field.Store.YES,\n            Field.Index.ANALYZED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    for (int j = 0; j < 3 * RANDOM_MULTIPLIER; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        dir.failOn(failure);\n        int numDocs = 10 + random.nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", Field.Store.YES,\n              Field.Index.ANALYZED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.isTermVectorStored());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", Field.Store.YES,\n            Field.Index.ANALYZED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", Field.Store.YES,\n              Field.Index.ANALYZED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.isTermVectorStored());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", Field.Store.YES,\n            Field.Index.ANALYZED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(3);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        dir.failOn(failure);\n        int numDocs = 10 + random.nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", Field.Store.YES,\n              Field.Index.ANALYZED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.isTermVectorStored());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", Field.Store.YES,\n            Field.Index.ANALYZED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", Field.Store.YES,\n              Field.Index.ANALYZED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.isTermVectorStored());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", Field.Store.YES,\n            Field.Index.ANALYZED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    for (int j = 0; j < 3 * RANDOM_MULTIPLIER; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        dir.failOn(failure);\n        int numDocs = 10 + random.nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", Field.Store.YES,\n              Field.Index.ANALYZED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.isTermVectorStored());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", Field.Store.YES,\n            Field.Index.ANALYZED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", Field.Store.YES,\n              Field.Index.ANALYZED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.isTermVectorStored());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", Field.Store.YES,\n            Field.Index.ANALYZED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(3);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        dir.failOn(failure);\n        int numDocs = 10 + random.nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", Field.Store.YES,\n              Field.Index.ANALYZED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.isTermVectorStored());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", Field.Store.YES,\n            Field.Index.ANALYZED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", Field.Store.YES,\n              Field.Index.ANALYZED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.isTermVectorStored());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", Field.Store.YES,\n            Field.Index.ANALYZED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    for (int j = 0; j < 3 * RANDOM_MULTIPLIER; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        dir.failOn(failure);\n        int numDocs = 10 + random.nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", Field.Store.YES,\n              Field.Index.ANALYZED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.isTermVectorStored());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", Field.Store.YES,\n            Field.Index.ANALYZED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", Field.Store.YES,\n              Field.Index.ANALYZED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.isTermVectorStored());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", Field.Store.YES,\n            Field.Index.ANALYZED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(3);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        dir.failOn(failure);\n        int numDocs = 10 + random.nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", Field.Store.YES,\n              Field.Index.ANALYZED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.isTermVectorStored());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", Field.Store.YES,\n            Field.Index.ANALYZED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", Field.Store.YES,\n              Field.Index.ANALYZED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.isTermVectorStored());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", Field.Store.YES,\n            Field.Index.ANALYZED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    for (int j = 0; j < 3 * RANDOM_MULTIPLIER; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        dir.failOn(failure);\n        int numDocs = 10 + random.nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", Field.Store.YES,\n              Field.Index.ANALYZED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.isTermVectorStored());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", Field.Store.YES,\n            Field.Index.ANALYZED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", Field.Store.YES,\n              Field.Index.ANALYZED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.isTermVectorStored());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", Field.Store.YES,\n            Field.Index.ANALYZED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(3);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        dir.failOn(failure);\n        int numDocs = 10 + random.nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", TextField.TYPE_STORED, \"a field\"));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", TextField.TYPE_STORED, \"a field\"));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(3);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        dir.failOn(failure);\n        int numDocs = 10 + random.nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", Field.Store.YES,\n              Field.Index.ANALYZED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.isTermVectorStored());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", Field.Store.YES,\n            Field.Index.ANALYZED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", Field.Store.YES,\n              Field.Index.ANALYZED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.isTermVectorStored());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", Field.Store.YES,\n            Field.Index.ANALYZED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6eb141f80638abdb6ffaa5149877f36ea39b6ad5","date":1315714072,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(3);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        dir.failOn(failure);\n        int numDocs = 10 + random.nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", TextField.TYPE_STORED, \"a field\"));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", TextField.TYPE_STORED, \"a field\"));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(3);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        dir.failOn(failure);\n        int numDocs = 10 + random.nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", TextField.TYPE_STORED, \"a field\"));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", TextField.TYPE_STORED, \"a field\"));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(3);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        dir.failOn(failure);\n        int numDocs = 10 + random.nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(3);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        dir.failOn(failure);\n        int numDocs = 10 + random.nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", TextField.TYPE_STORED, \"a field\"));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", TextField.TYPE_STORED, \"a field\"));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        dir.failOn(failure);\n        int numDocs = 10 + random.nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(3);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        dir.failOn(failure);\n        int numDocs = 10 + random.nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testTermVectorExceptions().mjava","sourceNew":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        dir.failOn(failure);\n        int numDocs = 10 + random.nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void testTermVectorExceptions() throws IOException {\n    FailOnTermVectors[] failures = new FailOnTermVectors[] {\n        new FailOnTermVectors(FailOnTermVectors.AFTER_INIT_STAGE),\n        new FailOnTermVectors(FailOnTermVectors.INIT_STAGE), };\n    int num = atLeast(1);\n    for (int j = 0; j < num; j++) {\n      for (FailOnTermVectors failure : failures) {\n        MockDirectoryWrapper dir = newDirectory();\n        IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        dir.failOn(failure);\n        int numDocs = 10 + random.nextInt(30);\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n            \n        }\n        Document document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n\n        for (int i = 0; i < numDocs; i++) {\n          Document doc = new Document();\n          Field field = newField(random, \"field\", \"a field\", TextField.TYPE_STORED);\n          doc.add(field);\n          // random TV\n          try {\n            w.addDocument(doc);\n            assertFalse(field.fieldType().storeTermVectors());\n          } catch (RuntimeException e) {\n            assertTrue(e.getMessage().startsWith(FailOnTermVectors.EXC_MSG));\n          }\n          if (random.nextInt(20) == 0) {\n            w.commit();\n            _TestUtil.checkIndex(dir);\n          }\n        }\n        document = new Document();\n        document.add(new Field(\"field\", \"a field\", TextField.TYPE_STORED));\n        w.addDocument(document);\n        w.close();\n        IndexReader reader = IndexReader.open(dir);\n        assertTrue(reader.numDocs() > 0);\n        reader.close();\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        for (SegmentInfo segmentInfo : sis) {\n          assertFalse(segmentInfo.getHasVectors());\n        }\n        dir.close();\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a3776dccca01c11e7046323cfad46a3b4a471233","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"d3fe2fc74577855eadfb5eae3153c2fffdaaf791":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","f83af14a2a8131b14d7aee6274c740334e0363d3"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"d3fe2fc74577855eadfb5eae3153c2fffdaaf791":["f83af14a2a8131b14d7aee6274c740334e0363d3","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}