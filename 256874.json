{"path":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermVectors() throws Exception {\n    RAMDirectory d = new MockRAMDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    // want to get some more segments here\n    // new termvector fields\n    for (int i = 0; i < 5 * writer.getMergeFactor(); i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set set = (Set) map.get(\"termvector\");\n    for (Iterator iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry = (TermVectorEntry) iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      System.out.println(\"Entry: \" + entry);\n    }\n\n\n\n\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexReader#testTermVectors().mjava","sourceNew":"  public void testTermVectors() throws Exception {\n    RAMDirectory d = new MockRAMDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    // want to get some more segments here\n    // new termvector fields\n    for (int i = 0; i < 5 * writer.getMergeFactor(); i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set set = (Set) map.get(\"termvector\");\n    for (Iterator iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry = (TermVectorEntry) iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      System.out.println(\"Entry: \" + entry);\n    }\n\n\n\n\n    \n  }\n\n","sourceOld":"  public void testTermVectors() throws Exception {\n    RAMDirectory d = new MockRAMDirectory();\n    // set up writer\n    IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    // want to get some more segments here\n    // new termvector fields\n    for (int i = 0; i < 5 * writer.getMergeFactor(); i++) {\n      Document doc = new Document();\n        doc.add(new Field(\"tvnot\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.NO));\n        doc.add(new Field(\"termvector\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.YES));\n        doc.add(new Field(\"tvoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_OFFSETS));\n        doc.add(new Field(\"tvposition\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS));\n        doc.add(new Field(\"tvpositionoffset\",\"one two two three three three\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n        writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(d, false);\n    FieldSortedTermVectorMapper mapper = new FieldSortedTermVectorMapper(new TermVectorEntryFreqSortedComparator());\n    reader.getTermFreqVector(0, mapper);\n    Map map = mapper.getFieldToTerms();\n    assertTrue(\"map is null and it shouldn't be\", map != null);\n    assertTrue(\"map Size: \" + map.size() + \" is not: \" + 4, map.size() == 4);\n    Set set = (Set) map.get(\"termvector\");\n    for (Iterator iterator = set.iterator(); iterator.hasNext();) {\n      TermVectorEntry entry = (TermVectorEntry) iterator.next();\n      assertTrue(\"entry is null and it shouldn't be\", entry != null);\n      System.out.println(\"Entry: \" + entry);\n    }\n\n\n\n\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}