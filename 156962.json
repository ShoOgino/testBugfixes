{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testUniqueStream().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testUniqueStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testUniqueStream().mjava","sourceNew":"  @Test\n  public void testUniqueStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class);\n\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 0, 1, 3, 4);\n\n      // Basic test desc\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"), over=\\\"a_f\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 4, 3, 1, 2);\n\n      // Basic w/multi comp\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f, a_i\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      // full factory w/multi comp\n      stream = factory.constructStream(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f, a_i\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testUniqueStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class);\n\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 0, 1, 3, 4);\n\n      // Basic test desc\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"), over=\\\"a_f\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 4, 3, 1, 2);\n\n      // Basic w/multi comp\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f, a_i\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      // full factory w/multi comp\n      stream = factory.constructStream(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f, a_i\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","date":1533256859,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testUniqueStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testUniqueStream().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testUniqueStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class);\n\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 0, 1, 3, 4);\n\n      // Basic test desc\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"), over=\\\"a_f\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 4, 3, 1, 2);\n\n      // Basic w/multi comp\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f, a_i\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      // full factory w/multi comp\n      stream = factory.constructStream(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f, a_i\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testUniqueStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class);\n\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 0, 1, 3, 4);\n\n      // Basic test desc\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"), over=\\\"a_f\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 4, 3, 1, 2);\n\n      // Basic w/multi comp\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f, a_i\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      // full factory w/multi comp\n      stream = factory.constructStream(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f, a_i\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"648627dd57e08f78d7b6e3b59b1f43530995a69a","date":1535068798,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testUniqueStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testUniqueStream().mjava","sourceNew":"  @Test\n  //commented 23-AUG-2018  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testUniqueStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class);\n\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 0, 1, 3, 4);\n\n      // Basic test desc\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"), over=\\\"a_f\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 4, 3, 1, 2);\n\n      // Basic w/multi comp\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f, a_i\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      // full factory w/multi comp\n      stream = factory.constructStream(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f, a_i\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testUniqueStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class);\n\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 0, 1, 3, 4);\n\n      // Basic test desc\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"), over=\\\"a_f\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 4, 3, 1, 2);\n\n      // Basic w/multi comp\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f, a_i\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      // full factory w/multi comp\n      stream = factory.constructStream(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f, a_i\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a1cae9aea470e88146567017129e8280d21ca76","date":1563504024,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testUniqueStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testUniqueStream().mjava","sourceNew":"  @Test\n  public void testUniqueStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class);\n\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 0, 1, 3, 4);\n\n      // Basic test desc\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"), over=\\\"a_f\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 4, 3, 1, 2);\n\n      // Basic w/multi comp\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f, a_i\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      // full factory w/multi comp\n      stream = factory.constructStream(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f, a_i\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 23-AUG-2018  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testUniqueStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class);\n\n    try {\n      // Basic test\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 0, 1, 3, 4);\n\n      // Basic test desc\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f desc, a_i desc\\\"), over=\\\"a_f\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 4);\n      assertOrder(tuples, 4, 3, 1, 2);\n\n      // Basic w/multi comp\n      expression = StreamExpressionParser.parse(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f, a_i\\\")\");\n      stream = new UniqueStream(expression, factory);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      // full factory w/multi comp\n      stream = factory.constructStream(\"unique(search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), over=\\\"a_f, a_i\\\")\");\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"648627dd57e08f78d7b6e3b59b1f43530995a69a":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a1cae9aea470e88146567017129e8280d21ca76":["648627dd57e08f78d7b6e3b59b1f43530995a69a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a1cae9aea470e88146567017129e8280d21ca76"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"648627dd57e08f78d7b6e3b59b1f43530995a69a":["8a1cae9aea470e88146567017129e8280d21ca76"],"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["648627dd57e08f78d7b6e3b59b1f43530995a69a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8a1cae9aea470e88146567017129e8280d21ca76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}