{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#readShards(SolrZkClient,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#readShards(SolrZkClient,String).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/CloudState#readShards(SolrZkClient,String).mjava","sourceNew":"  /**\n   * @param zkClient\n   * @param shardsZkPath\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException\n   */\n  private static Map<String,ZkNodeProps> readShards(SolrZkClient zkClient, String shardsZkPath)\n      throws KeeperException, InterruptedException, IOException {\n\n    Map<String,ZkNodeProps> shardNameToProps = new HashMap<String,ZkNodeProps>();\n\n    if (zkClient.exists(shardsZkPath, null) == null) {\n      throw new IllegalStateException(\"Cannot find zk shards node that should exist:\"\n          + shardsZkPath);\n    }\n\n    List<String> shardZkPaths = zkClient.getChildren(shardsZkPath, null);\n    \n    for(String shardPath : shardZkPaths) {\n      byte[] data = zkClient.getData(shardsZkPath + \"/\" + shardPath, null,\n          null);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.load(data);\n      shardNameToProps.put(shardPath, props);\n    }\n\n    return Collections.unmodifiableMap(shardNameToProps);\n  }\n\n","sourceOld":"  /**\n   * @param zkClient\n   * @param shardsZkPath\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException\n   */\n  private static Map<String,ZkNodeProps> readShards(SolrZkClient zkClient, String shardsZkPath)\n      throws KeeperException, InterruptedException, IOException {\n\n    Map<String,ZkNodeProps> shardNameToProps = new HashMap<String,ZkNodeProps>();\n\n    if (zkClient.exists(shardsZkPath, null) == null) {\n      throw new IllegalStateException(\"Cannot find zk shards node that should exist:\"\n          + shardsZkPath);\n    }\n\n    List<String> shardZkPaths = zkClient.getChildren(shardsZkPath, null);\n    \n    for(String shardPath : shardZkPaths) {\n      byte[] data = zkClient.getData(shardsZkPath + \"/\" + shardPath, null,\n          null);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.load(data);\n      shardNameToProps.put(shardPath, props);\n    }\n\n    return Collections.unmodifiableMap(shardNameToProps);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#readShards(SolrZkClient,String).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/CloudState#readShards(SolrZkClient,String).mjava","sourceNew":"  /**\n   * @param zkClient\n   * @param shardsZkPath\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException\n   */\n  private static Map<String,ZkNodeProps> readShards(SolrZkClient zkClient, String shardsZkPath)\n      throws KeeperException, InterruptedException, IOException {\n\n    Map<String,ZkNodeProps> shardNameToProps = new HashMap<String,ZkNodeProps>();\n\n    if (zkClient.exists(shardsZkPath, null) == null) {\n      throw new IllegalStateException(\"Cannot find zk shards node that should exist:\"\n          + shardsZkPath);\n    }\n\n    List<String> shardZkPaths = zkClient.getChildren(shardsZkPath, null);\n    \n    for(String shardPath : shardZkPaths) {\n      byte[] data = zkClient.getData(shardsZkPath + \"/\" + shardPath, null,\n          null);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.load(data);\n      shardNameToProps.put(shardPath, props);\n    }\n\n    return Collections.unmodifiableMap(shardNameToProps);\n  }\n\n","sourceOld":"  /**\n   * @param zkClient\n   * @param shardsZkPath\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException\n   */\n  private static Map<String,ZkNodeProps> readShards(SolrZkClient zkClient, String shardsZkPath)\n      throws KeeperException, InterruptedException, IOException {\n\n    Map<String,ZkNodeProps> shardNameToProps = new HashMap<String,ZkNodeProps>();\n\n    if (zkClient.exists(shardsZkPath, null) == null) {\n      throw new IllegalStateException(\"Cannot find zk shards node that should exist:\"\n          + shardsZkPath);\n    }\n\n    List<String> shardZkPaths = zkClient.getChildren(shardsZkPath, null);\n    \n    for(String shardPath : shardZkPaths) {\n      byte[] data = zkClient.getData(shardsZkPath + \"/\" + shardPath, null,\n          null);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.load(data);\n      shardNameToProps.put(shardPath, props);\n    }\n\n    return Collections.unmodifiableMap(shardNameToProps);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#readShards(SolrZkClient,String).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/CloudState#readShards(SolrZkClient,String).mjava","sourceNew":"  /**\n   * @param zkClient\n   * @param shardsZkPath\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException\n   */\n  private static Map<String,ZkNodeProps> readShards(SolrZkClient zkClient, String shardsZkPath)\n      throws KeeperException, InterruptedException, IOException {\n\n    Map<String,ZkNodeProps> shardNameToProps = new HashMap<String,ZkNodeProps>();\n\n    if (zkClient.exists(shardsZkPath, null) == null) {\n      throw new IllegalStateException(\"Cannot find zk shards node that should exist:\"\n          + shardsZkPath);\n    }\n\n    List<String> shardZkPaths = zkClient.getChildren(shardsZkPath, null);\n    \n    for(String shardPath : shardZkPaths) {\n      byte[] data = zkClient.getData(shardsZkPath + \"/\" + shardPath, null,\n          null);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.load(data);\n      shardNameToProps.put(shardPath, props);\n    }\n\n    return Collections.unmodifiableMap(shardNameToProps);\n  }\n\n","sourceOld":"  /**\n   * @param zkClient\n   * @param shardsZkPath\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException\n   */\n  private static Map<String,ZkNodeProps> readShards(SolrZkClient zkClient, String shardsZkPath)\n      throws KeeperException, InterruptedException, IOException {\n\n    Map<String,ZkNodeProps> shardNameToProps = new HashMap<String,ZkNodeProps>();\n\n    if (zkClient.exists(shardsZkPath, null) == null) {\n      throw new IllegalStateException(\"Cannot find zk shards node that should exist:\"\n          + shardsZkPath);\n    }\n\n    List<String> shardZkPaths = zkClient.getChildren(shardsZkPath, null);\n    \n    for(String shardPath : shardZkPaths) {\n      byte[] data = zkClient.getData(shardsZkPath + \"/\" + shardPath, null,\n          null);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.load(data);\n      shardNameToProps.put(shardPath, props);\n    }\n\n    return Collections.unmodifiableMap(shardNameToProps);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c12159f094951abca20de13adfd11224da456e1","date":1317314664,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#readShards(SolrZkClient,String,Slice).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#readShards(SolrZkClient,String).mjava","sourceNew":"  /**\n   * @param zkClient\n   * @param shardsZkPath\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException\n   */\n  private static Map<String,ZkNodeProps> readShards(SolrZkClient zkClient, String shardsZkPath, Slice oldSlice)\n      throws KeeperException, InterruptedException, IOException {\n\n    Map<String,ZkNodeProps> shardNameToProps = new HashMap<String,ZkNodeProps>();\n\n    if (zkClient.exists(shardsZkPath, null) == null) {\n      throw new IllegalStateException(\"Cannot find zk shards node that should exist:\"\n          + shardsZkPath);\n    }\n\n    List<String> shardZkPaths = zkClient.getChildren(shardsZkPath, null);\n    \n    for (String shardPath : shardZkPaths) {\n      ZkNodeProps props;\n      if (oldSlice != null && oldSlice.getShards().containsKey(shardPath)) {\n        props = oldSlice.getShards().get(shardPath);\n      } else {\n        byte[] data = zkClient.getData(shardsZkPath + \"/\" + shardPath, null,\n            null);\n        \n        props = new ZkNodeProps();\n        props.load(data);\n      }\n      \n      shardNameToProps.put(shardPath, props);\n    }\n\n    return Collections.unmodifiableMap(shardNameToProps);\n  }\n\n","sourceOld":"  /**\n   * @param zkClient\n   * @param shardsZkPath\n   * @return\n   * @throws KeeperException\n   * @throws InterruptedException\n   * @throws IOException\n   */\n  private static Map<String,ZkNodeProps> readShards(SolrZkClient zkClient, String shardsZkPath)\n      throws KeeperException, InterruptedException, IOException {\n\n    Map<String,ZkNodeProps> shardNameToProps = new HashMap<String,ZkNodeProps>();\n\n    if (zkClient.exists(shardsZkPath, null) == null) {\n      throw new IllegalStateException(\"Cannot find zk shards node that should exist:\"\n          + shardsZkPath);\n    }\n\n    List<String> shardZkPaths = zkClient.getChildren(shardsZkPath, null);\n    \n    for(String shardPath : shardZkPaths) {\n      byte[] data = zkClient.getData(shardsZkPath + \"/\" + shardPath, null,\n          null);\n      \n      ZkNodeProps props = new ZkNodeProps();\n      props.load(data);\n      shardNameToProps.put(shardPath, props);\n    }\n\n    return Collections.unmodifiableMap(shardNameToProps);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c12159f094951abca20de13adfd11224da456e1":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3c12159f094951abca20de13adfd11224da456e1"]},"commit2Childs":{"3c12159f094951abca20de13adfd11224da456e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3c12159f094951abca20de13adfd11224da456e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}