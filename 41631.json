{"path":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","sourceNew":"  private static void testFacetIDs(int[] facetIDs, int docID) throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(Locale.ROOT, headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(Locale.ROOT, headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapVInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","sourceOld":"  private static void testFacetIDs(int[] facetIDs, int docID) throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(Locale.ROOT, headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(Locale.ROOT, headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapVInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","sourceNew":null,"sourceOld":"  private static void testFacetIDs(int[] facetIDs, int docID) throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(Locale.ROOT, headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(Locale.ROOT, headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapVInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","sourceNew":null,"sourceOld":"  private static void testFacetIDs(int[] facetIDs, int docID) throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(Locale.ROOT, headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(Locale.ROOT, headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapVInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}