{"path":"solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   *\n   * @since solr 1.2\n   * @deprecated Direct updates fro ma Reader, as well as the response \n   *             format produced by this method, have been deprecated \n   *             and will be removed in future versions.  Any code using\n   *             this method should be changed to use {@link #handleRequest} \n   *             method with a ContentStream. \n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);\n\n      SolrParams params = new MapSolrParams(new HashMap<String, String>());\n      SolrQueryRequestBase req = new SolrQueryRequestBase(core, params) {\n      };\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      XMLLoader loader = (XMLLoader) newLoader(req, processor);\n      loader.processUpdate(processor, parser);\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n  //////////////////////// SolrInfoMBeans methods //////////////////////\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","sourceNew":null,"sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   *\n   * @since solr 1.2\n   * @deprecated Direct updates fro ma Reader, as well as the response \n   *             format produced by this method, have been deprecated \n   *             and will be removed in future versions.  Any code using\n   *             this method should be changed to use {@link #handleRequest} \n   *             method with a ContentStream. \n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);\n\n      SolrParams params = new MapSolrParams(new HashMap<String, String>());\n      SolrQueryRequestBase req = new SolrQueryRequestBase(core, params) {\n      };\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      XMLLoader loader = (XMLLoader) newLoader(req, processor);\n      loader.processUpdate(processor, parser);\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n  //////////////////////// SolrInfoMBeans methods //////////////////////\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   *\n   * @since solr 1.2\n   * @deprecated Direct updates fro ma Reader, as well as the response \n   *             format produced by this method, have been deprecated \n   *             and will be removed in future versions.  Any code using\n   *             this method should be changed to use {@link #handleRequest} \n   *             method with a ContentStream. \n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);\n\n      SolrParams params = new MapSolrParams(new HashMap<String, String>());\n      SolrQueryRequestBase req = new SolrQueryRequestBase(core, params) {\n      };\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      XMLLoader loader = (XMLLoader) newLoader(req, processor);\n      loader.processUpdate(processor, parser);\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n  //////////////////////// SolrInfoMBeans methods //////////////////////\n\n","sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   *\n   * @since solr 1.2\n   * @deprecated Direct updates fro ma Reader, as well as the response \n   *             format produced by this method, have been deprecated \n   *             and will be removed in future versions.  Any code using\n   *             this method should be changed to use {@link #handleRequest} \n   *             method with a ContentStream. \n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);\n\n      SolrParams params = new MapSolrParams(new HashMap<String, String>());\n      SolrQueryRequestBase req = new SolrQueryRequestBase(core, params) {\n      };\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      XMLLoader loader = (XMLLoader) newLoader(req, processor);\n      loader.processUpdate(processor, parser);\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n  //////////////////////// SolrInfoMBeans methods //////////////////////\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   *\n   * @since solr 1.2\n   * @deprecated Direct updates fro ma Reader, as well as the response \n   *             format produced by this method, have been deprecated \n   *             and will be removed in future versions.  Any code using\n   *             this method should be changed to use {@link #handleRequest} \n   *             method with a ContentStream. \n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);\n\n      SolrParams params = new MapSolrParams(new HashMap<String, String>());\n      SolrQueryRequestBase req = new SolrQueryRequestBase(core, params) {\n      };\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      XMLLoader loader = (XMLLoader) newLoader(req, processor);\n      loader.processUpdate(processor, parser);\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n  //////////////////////// SolrInfoMBeans methods //////////////////////\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e03bb8c4fc26ee3885bf07c06ab242ebd88cc82","date":1287332917,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   *\n   * @since solr 1.2\n   * @deprecated Direct updates fro ma Reader, as well as the response \n   *             format produced by this method, have been deprecated \n   *             and will be removed in future versions.  Any code using\n   *             this method should be changed to use {@link #handleRequest} \n   *             method with a ContentStream. \n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    SolrCore core = SolrCore.getSolrCore();\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new HashMap<String,String[]>());\n\n    try {\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);\n\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      XMLLoader loader = (XMLLoader) newLoader(req, processor);\n      loader.processUpdate(processor, parser);\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n    finally {\n      req.close();\n    }\n  }\n  //////////////////////// SolrInfoMBeans methods //////////////////////\n\n","sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   *\n   * @since solr 1.2\n   * @deprecated Direct updates fro ma Reader, as well as the response \n   *             format produced by this method, have been deprecated \n   *             and will be removed in future versions.  Any code using\n   *             this method should be changed to use {@link #handleRequest} \n   *             method with a ContentStream. \n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);\n\n      SolrParams params = new MapSolrParams(new HashMap<String, String>());\n      SolrQueryRequestBase req = new SolrQueryRequestBase(core, params) {\n      };\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      XMLLoader loader = (XMLLoader) newLoader(req, processor);\n      loader.processUpdate(processor, parser);\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n  //////////////////////// SolrInfoMBeans methods //////////////////////\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   *\n   * @since solr 1.2\n   * @deprecated Direct updates fro ma Reader, as well as the response \n   *             format produced by this method, have been deprecated \n   *             and will be removed in future versions.  Any code using\n   *             this method should be changed to use {@link #handleRequest} \n   *             method with a ContentStream. \n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    SolrCore core = SolrCore.getSolrCore();\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new HashMap<String,String[]>());\n\n    try {\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);\n\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      XMLLoader loader = (XMLLoader) newLoader(req, processor);\n      loader.processUpdate(processor, parser);\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n    finally {\n      req.close();\n    }\n  }\n  //////////////////////// SolrInfoMBeans methods //////////////////////\n\n","sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   *\n   * @since solr 1.2\n   * @deprecated Direct updates fro ma Reader, as well as the response \n   *             format produced by this method, have been deprecated \n   *             and will be removed in future versions.  Any code using\n   *             this method should be changed to use {@link #handleRequest} \n   *             method with a ContentStream. \n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);\n\n      SolrParams params = new MapSolrParams(new HashMap<String, String>());\n      SolrQueryRequestBase req = new SolrQueryRequestBase(core, params) {\n      };\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      XMLLoader loader = (XMLLoader) newLoader(req, processor);\n      loader.processUpdate(processor, parser);\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n  //////////////////////// SolrInfoMBeans methods //////////////////////\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   *\n   * @since solr 1.2\n   * @deprecated Direct updates fro ma Reader, as well as the response \n   *             format produced by this method, have been deprecated \n   *             and will be removed in future versions.  Any code using\n   *             this method should be changed to use {@link #handleRequest} \n   *             method with a ContentStream. \n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    SolrCore core = SolrCore.getSolrCore();\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new HashMap<String,String[]>());\n\n    try {\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);\n\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      XMLLoader loader = (XMLLoader) newLoader(req, processor);\n      loader.processUpdate(processor, parser);\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n    finally {\n      req.close();\n    }\n  }\n  //////////////////////// SolrInfoMBeans methods //////////////////////\n\n","sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   *\n   * @since solr 1.2\n   * @deprecated Direct updates fro ma Reader, as well as the response \n   *             format produced by this method, have been deprecated \n   *             and will be removed in future versions.  Any code using\n   *             this method should be changed to use {@link #handleRequest} \n   *             method with a ContentStream. \n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    try {\n      SolrCore core = SolrCore.getSolrCore();\n\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);\n\n      SolrParams params = new MapSolrParams(new HashMap<String, String>());\n      SolrQueryRequestBase req = new SolrQueryRequestBase(core, params) {\n      };\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      XMLLoader loader = (XMLLoader) newLoader(req, processor);\n      loader.processUpdate(processor, parser);\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n  }\n  //////////////////////// SolrInfoMBeans methods //////////////////////\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","date":1293733647,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","pathOld":"solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","sourceNew":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   *\n   * @since solr 1.2\n   * @deprecated Direct updates fro ma Reader, as well as the response \n   *             format produced by this method, have been deprecated \n   *             and will be removed in future versions.  Any code using\n   *             this method should be changed to use {@link #handleRequest} \n   *             method with a ContentStream. \n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    SolrCore core = SolrCore.getSolrCore();\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new HashMap<String,String[]>());\n\n    try {\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);\n\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      XMLLoader loader = (XMLLoader) newLoader(req, processor);\n      loader.processUpdate(req, processor, parser);\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n    finally {\n      req.close();\n    }\n  }\n  //////////////////////// SolrInfoMBeans methods //////////////////////\n\n","sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   *\n   * @since solr 1.2\n   * @deprecated Direct updates fro ma Reader, as well as the response \n   *             format produced by this method, have been deprecated \n   *             and will be removed in future versions.  Any code using\n   *             this method should be changed to use {@link #handleRequest} \n   *             method with a ContentStream. \n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    SolrCore core = SolrCore.getSolrCore();\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new HashMap<String,String[]>());\n\n    try {\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);\n\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      XMLLoader loader = (XMLLoader) newLoader(req, processor);\n      loader.processUpdate(processor, parser);\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n    finally {\n      req.close();\n    }\n  }\n  //////////////////////// SolrInfoMBeans methods //////////////////////\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e43d441e40dcdc973f88d42b450c772bb7e2154f","date":1293807941,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","sourceNew":null,"sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   *\n   * @since solr 1.2\n   * @deprecated Direct updates fro ma Reader, as well as the response \n   *             format produced by this method, have been deprecated \n   *             and will be removed in future versions.  Any code using\n   *             this method should be changed to use {@link #handleRequest} \n   *             method with a ContentStream. \n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    SolrCore core = SolrCore.getSolrCore();\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new HashMap<String,String[]>());\n\n    try {\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);\n\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      XMLLoader loader = (XMLLoader) newLoader(req, processor);\n      loader.processUpdate(req, processor, parser);\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n    finally {\n      req.close();\n    }\n  }\n  //////////////////////// SolrInfoMBeans methods //////////////////////\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","sourceNew":null,"sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   *\n   * @since solr 1.2\n   * @deprecated Direct updates fro ma Reader, as well as the response \n   *             format produced by this method, have been deprecated \n   *             and will be removed in future versions.  Any code using\n   *             this method should be changed to use {@link #handleRequest} \n   *             method with a ContentStream. \n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    SolrCore core = SolrCore.getSolrCore();\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new HashMap<String,String[]>());\n\n    try {\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);\n\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      XMLLoader loader = (XMLLoader) newLoader(req, processor);\n      loader.processUpdate(processor, parser);\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n    finally {\n      req.close();\n    }\n  }\n  //////////////////////// SolrInfoMBeans methods //////////////////////\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/XmlUpdateRequestHandler#doLegacyUpdate(Reader,Writer).mjava","sourceNew":null,"sourceOld":"  /**\n   * A Convenience method for getting back a simple XML string indicating\n   * success or failure from an XML formated Update (from the Reader)\n   *\n   * @since solr 1.2\n   * @deprecated Direct updates fro ma Reader, as well as the response \n   *             format produced by this method, have been deprecated \n   *             and will be removed in future versions.  Any code using\n   *             this method should be changed to use {@link #handleRequest} \n   *             method with a ContentStream. \n   */\n  @Deprecated\n  public void doLegacyUpdate(Reader input, Writer output) {\n    SolrCore core = SolrCore.getSolrCore();\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, new HashMap<String,String[]>());\n\n    try {\n      // Old style requests do not choose a custom handler\n      UpdateRequestProcessorChain processorFactory = core.getUpdateProcessingChain(null);\n\n      SolrQueryResponse rsp = new SolrQueryResponse(); // ignored\n      XMLStreamReader parser = inputFactory.createXMLStreamReader(input);\n      UpdateRequestProcessor processor = processorFactory.createProcessor(req, rsp);\n      XMLLoader loader = (XMLLoader) newLoader(req, processor);\n      loader.processUpdate(processor, parser);\n      processor.finish();\n      output.write(\"<result status=\\\"0\\\"></result>\");\n    }\n    catch (Exception ex) {\n      try {\n        SolrException.logOnce(log, \"Error processing \\\"legacy\\\" update command\", ex);\n        XML.writeXML(output, \"result\", SolrException.toStr(ex), \"status\", \"1\");\n      } catch (Exception ee) {\n        log.error(\"Error writing to output stream: \" + ee);\n      }\n    }\n    finally {\n      req.close();\n    }\n  }\n  //////////////////////// SolrInfoMBeans methods //////////////////////\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","e43d441e40dcdc973f88d42b450c772bb7e2154f"],"4e03bb8c4fc26ee3885bf07c06ab242ebd88cc82":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","4e03bb8c4fc26ee3885bf07c06ab242ebd88cc82"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"e43d441e40dcdc973f88d42b450c772bb7e2154f":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e43d441e40dcdc973f88d42b450c772bb7e2154f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["4e03bb8c4fc26ee3885bf07c06ab242ebd88cc82"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["1da8d55113b689b06716246649de6f62430f15c0","4e03bb8c4fc26ee3885bf07c06ab242ebd88cc82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e43d441e40dcdc973f88d42b450c772bb7e2154f"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"4e03bb8c4fc26ee3885bf07c06ab242ebd88cc82":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"1da8d55113b689b06716246649de6f62430f15c0":["4e03bb8c4fc26ee3885bf07c06ab242ebd88cc82","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"e43d441e40dcdc973f88d42b450c772bb7e2154f":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["70ad682703b8585f5d0a637efec044d57ec05efb"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["e43d441e40dcdc973f88d42b450c772bb7e2154f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}