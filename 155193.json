{"path":"src/java/org/apache/solr/common/SolrDocument#getFieldValuesMap().mjava","commits":[{"id":"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb","date":1181791578,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/SolrDocument#getFieldValuesMap().mjava","pathOld":"src/java/org/apache/solr/util/SolrDocument#getFieldValuesMap().mjava","sourceNew":"  /**\n   * Expose a Map interface to the solr field value collection.\n   */\n  public Map<String,Collection<Object>> getFieldValuesMap()\n  {\n    return _fields;\n  }\n\n","sourceOld":"  /**\n   * Expose a Map interface to the solr field value collection.\n   */\n  public Map<String,Collection<Object>> getFieldValuesMap()\n  {\n    return _fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ebb24ab555aab7c4dd5d2264c06a4f19fb217913","date":1183353562,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/SolrDocument#getFieldValuesMap().mjava","pathOld":"src/java/org/apache/solr/common/SolrDocument#getFieldValuesMap().mjava","sourceNew":"  /**\n   * Expose a Map interface to the solr field value collection.\n   */\n  public Map<String,Collection<Object>> getFieldValuesMap()\n  {\n    return new Map<String,Collection<Object>>() {\n      /** Get the field Value */\n      public Collection<Object> get(Object key) { \n        return getFieldValues( (String)key ); \n      }\n      \n      /** Set the field Value */\n      public Collection<Object> put(String key, Collection<Object> value) {\n        setField( key, value );\n        return null;\n      }\n\n      /** Remove the field Value */\n      public Collection<Object> remove(Object key) {\n        removeFields( (String)key ); \n        return null;\n      }\n      \n      // Easily Supported methods\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      public int          size()             { return _fields.size();    }\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      public void clear() { throw new UnsupportedOperationException(); }\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      public Set<java.util.Map.Entry<String, Collection<Object>>> entrySet() {throw new UnsupportedOperationException();}\n      public void putAll(Map<? extends String, ? extends Collection<Object>> t) {throw new UnsupportedOperationException();}\n      public Collection<Collection<Object>> values() {throw new UnsupportedOperationException();}\n    };\n  }\n\n","sourceOld":"  /**\n   * Expose a Map interface to the solr field value collection.\n   */\n  public Map<String,Collection<Object>> getFieldValuesMap()\n  {\n    return _fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a07a53434512d96d1e93e3e4a2ea16c202ec3e7e","date":1212696628,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/SolrDocument#getFieldValuesMap().mjava","pathOld":"src/java/org/apache/solr/common/SolrDocument#getFieldValuesMap().mjava","sourceNew":"  /**\n   * Expose a Map interface to the solr field value collection.\n   */\n  public Map<String,Collection<Object>> getFieldValuesMap()\n  {\n    return new Map<String,Collection<Object>>() {\n      /** Get the field Value */\n      public Collection<Object> get(Object key) { \n        return getFieldValues( (String)key ); \n      }\n      \n      // Easily Supported methods\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      public int          size()             { return _fields.size();    }\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      public void clear() { throw new UnsupportedOperationException(); }\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      public Set<java.util.Map.Entry<String, Collection<Object>>> entrySet() {throw new UnsupportedOperationException();}\n      public void putAll(Map<? extends String, ? extends Collection<Object>> t) {throw new UnsupportedOperationException();}\n      public Collection<Collection<Object>> values() {throw new UnsupportedOperationException();}\n      public Collection<Object> put(String key, Collection<Object> value) {throw new UnsupportedOperationException();}\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n    };\n  }\n\n","sourceOld":"  /**\n   * Expose a Map interface to the solr field value collection.\n   */\n  public Map<String,Collection<Object>> getFieldValuesMap()\n  {\n    return new Map<String,Collection<Object>>() {\n      /** Get the field Value */\n      public Collection<Object> get(Object key) { \n        return getFieldValues( (String)key ); \n      }\n      \n      /** Set the field Value */\n      public Collection<Object> put(String key, Collection<Object> value) {\n        setField( key, value );\n        return null;\n      }\n\n      /** Remove the field Value */\n      public Collection<Object> remove(Object key) {\n        removeFields( (String)key ); \n        return null;\n      }\n      \n      // Easily Supported methods\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      public int          size()             { return _fields.size();    }\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      public void clear() { throw new UnsupportedOperationException(); }\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      public Set<java.util.Map.Entry<String, Collection<Object>>> entrySet() {throw new UnsupportedOperationException();}\n      public void putAll(Map<? extends String, ? extends Collection<Object>> t) {throw new UnsupportedOperationException();}\n      public Collection<Collection<Object>> values() {throw new UnsupportedOperationException();}\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/SolrDocument#getFieldValuesMap().mjava","pathOld":"src/java/org/apache/solr/common/SolrDocument#getFieldValuesMap().mjava","sourceNew":"  /**\n   * Expose a Map interface to the solr field value collection.\n   */\n  public Map<String,Collection<Object>> getFieldValuesMap()\n  {\n    return new Map<String,Collection<Object>>() {\n      /** Get the field Value */\n      public Collection<Object> get(Object key) { \n        return getFieldValues( (String)key ); \n      }\n      \n      // Easily Supported methods\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      public int          size()             { return _fields.size();    }\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      public void clear() { throw new UnsupportedOperationException(); }\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      public Set<java.util.Map.Entry<String, Collection<Object>>> entrySet() {throw new UnsupportedOperationException();}\n      public void putAll(Map<? extends String, ? extends Collection<Object>> t) {throw new UnsupportedOperationException();}\n      public Collection<Collection<Object>> values() {throw new UnsupportedOperationException();}\n      public Collection<Object> put(String key, Collection<Object> value) {throw new UnsupportedOperationException();}\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n    };\n  }\n\n","sourceOld":"  /**\n   * Expose a Map interface to the solr field value collection.\n   */\n  public Map<String,Collection<Object>> getFieldValuesMap()\n  {\n    return new Map<String,Collection<Object>>() {\n      /** Get the field Value */\n      public Collection<Object> get(Object key) { \n        return getFieldValues( (String)key ); \n      }\n      \n      // Easily Supported methods\n      public boolean containsKey(Object key) { return _fields.containsKey( key ); }\n      public Set<String>  keySet()           { return _fields.keySet();  }\n      public int          size()             { return _fields.size();    }\n      public boolean      isEmpty()          { return _fields.isEmpty(); }\n\n      // Unsupported operations.  These are not necessary for JSTL\n      public void clear() { throw new UnsupportedOperationException(); }\n      public boolean containsValue(Object value) {throw new UnsupportedOperationException();}\n      public Set<java.util.Map.Entry<String, Collection<Object>>> entrySet() {throw new UnsupportedOperationException();}\n      public void putAll(Map<? extends String, ? extends Collection<Object>> t) {throw new UnsupportedOperationException();}\n      public Collection<Collection<Object>> values() {throw new UnsupportedOperationException();}\n      public Collection<Object> put(String key, Collection<Object> value) {throw new UnsupportedOperationException();}\n      public Collection<Object> remove(Object key) {throw new UnsupportedOperationException();}      \n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["a07a53434512d96d1e93e3e4a2ea16c202ec3e7e"],"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a07a53434512d96d1e93e3e4a2ea16c202ec3e7e":["ebb24ab555aab7c4dd5d2264c06a4f19fb217913"],"ebb24ab555aab7c4dd5d2264c06a4f19fb217913":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["ebb24ab555aab7c4dd5d2264c06a4f19fb217913"],"a07a53434512d96d1e93e3e4a2ea16c202ec3e7e":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"ebb24ab555aab7c4dd5d2264c06a4f19fb217913":["a07a53434512d96d1e93e3e4a2ea16c202ec3e7e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}