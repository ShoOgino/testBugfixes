{"path":"solr/core/src/java/org/apache/solr/core/Config#assertWarnOrFail(String,boolean,boolean).mjava","commits":[{"id":"ac2f1cdbdc54a889e88543cc1d939a931cb96883","date":1420554488,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#assertWarnOrFail(String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /*\n     * Assert that assertCondition is true.\n     * If not, prints reason as log warning.\n     * If failCondition is true, then throw exception instead of warning\n     */\n  public static void assertWarnOrFail(String reason, boolean assertCondition, boolean failCondition) {\n    if (assertCondition) {\n      return;\n    } else if (failCondition) {\n      throw new SolrException(SolrException.ErrorCode.FORBIDDEN, reason);\n    } else {\n      log.warn(reason);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee622110ba6021d0390037e77574743c1e55348c","date":1546700916,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/XmlConfigFile#assertWarnOrFail(String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#assertWarnOrFail(String,boolean,boolean).mjava","sourceNew":"  /*\n     * Assert that assertCondition is true.\n     * If not, prints reason as log warning.\n     * If failCondition is true, then throw exception instead of warning\n     */\n  public static void assertWarnOrFail(String reason, boolean assertCondition, boolean failCondition) {\n    if (assertCondition) {\n      return;\n    } else if (failCondition) {\n      throw new SolrException(SolrException.ErrorCode.FORBIDDEN, reason);\n    } else {\n      log.warn(reason);\n    }\n  }\n\n","sourceOld":"  /*\n     * Assert that assertCondition is true.\n     * If not, prints reason as log warning.\n     * If failCondition is true, then throw exception instead of warning\n     */\n  public static void assertWarnOrFail(String reason, boolean assertCondition, boolean failCondition) {\n    if (assertCondition) {\n      return;\n    } else if (failCondition) {\n      throw new SolrException(SolrException.ErrorCode.FORBIDDEN, reason);\n    } else {\n      log.warn(reason);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee622110ba6021d0390037e77574743c1e55348c":["ac2f1cdbdc54a889e88543cc1d939a931cb96883"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac2f1cdbdc54a889e88543cc1d939a931cb96883":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee622110ba6021d0390037e77574743c1e55348c"]},"commit2Childs":{"ee622110ba6021d0390037e77574743c1e55348c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac2f1cdbdc54a889e88543cc1d939a931cb96883"],"ac2f1cdbdc54a889e88543cc1d939a931cb96883":["ee622110ba6021d0390037e77574743c1e55348c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}