{"path":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testEscapes().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testEscapes().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEscapes().mjava","sourceNew":"  /**\n   * Tests if wildcard escaping works\n   */\n  public void testEscapes() throws Exception {\n    Directory indexStore = getIndexStore(\"field\", \n        new String[]{\"foo*bar\", \"foo??bar\", \"fooCDbar\", \"fooSOMETHINGbar\", \"foo\\\\\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // without escape: matches foo??bar, fooCDbar, foo*bar, and fooSOMETHINGbar\n    WildcardQuery unescaped = new WildcardQuery(new Term(\"field\", \"foo*bar\"));\n    assertMatches(searcher, unescaped, 4);\n    \n    // with escape: only matches foo*bar\n    WildcardQuery escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\*bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // without escape: matches foo??bar and fooCDbar\n    unescaped = new WildcardQuery(new Term(\"field\", \"foo??bar\"));\n    assertMatches(searcher, unescaped, 2);\n    \n    // with escape: matches foo??bar only\n    escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\?\\\\?bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // check escaping at end: lenient parse yields \"foo\\\"\n    WildcardQuery atEnd = new WildcardQuery(new Term(\"field\", \"foo\\\\\"));\n    assertMatches(searcher, atEnd, 1);\n    \n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if wildcard escaping works\n   */\n  public void testEscapes() throws Exception {\n    Directory indexStore = getIndexStore(\"field\", \n        new String[]{\"foo*bar\", \"foo??bar\", \"fooCDbar\", \"fooSOMETHINGbar\", \"foo\\\\\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // without escape: matches foo??bar, fooCDbar, foo*bar, and fooSOMETHINGbar\n    WildcardQuery unescaped = new WildcardQuery(new Term(\"field\", \"foo*bar\"));\n    assertMatches(searcher, unescaped, 4);\n    \n    // with escape: only matches foo*bar\n    WildcardQuery escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\*bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // without escape: matches foo??bar and fooCDbar\n    unescaped = new WildcardQuery(new Term(\"field\", \"foo??bar\"));\n    assertMatches(searcher, unescaped, 2);\n    \n    // with escape: matches foo??bar only\n    escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\?\\\\?bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // check escaping at end: lenient parse yields \"foo\\\"\n    WildcardQuery atEnd = new WildcardQuery(new Term(\"field\", \"foo\\\\\"));\n    assertMatches(searcher, atEnd, 1);\n    \n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testEscapes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testEscapes().mjava","sourceNew":"  /**\n   * Tests if wildcard escaping works\n   */\n  public void testEscapes() throws Exception {\n    Directory indexStore = getIndexStore(\"field\", \n        new String[]{\"foo*bar\", \"foo??bar\", \"fooCDbar\", \"fooSOMETHINGbar\", \"foo\\\\\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // without escape: matches foo??bar, fooCDbar, foo*bar, and fooSOMETHINGbar\n    WildcardQuery unescaped = new WildcardQuery(new Term(\"field\", \"foo*bar\"));\n    assertMatches(searcher, unescaped, 4);\n    \n    // with escape: only matches foo*bar\n    WildcardQuery escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\*bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // without escape: matches foo??bar and fooCDbar\n    unescaped = new WildcardQuery(new Term(\"field\", \"foo??bar\"));\n    assertMatches(searcher, unescaped, 2);\n    \n    // with escape: matches foo??bar only\n    escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\?\\\\?bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // check escaping at end: lenient parse yields \"foo\\\"\n    WildcardQuery atEnd = new WildcardQuery(new Term(\"field\", \"foo\\\\\"));\n    assertMatches(searcher, atEnd, 1);\n    \n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if wildcard escaping works\n   */\n  public void testEscapes() throws Exception {\n    Directory indexStore = getIndexStore(\"field\", \n        new String[]{\"foo*bar\", \"foo??bar\", \"fooCDbar\", \"fooSOMETHINGbar\", \"foo\\\\\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // without escape: matches foo??bar, fooCDbar, foo*bar, and fooSOMETHINGbar\n    WildcardQuery unescaped = new WildcardQuery(new Term(\"field\", \"foo*bar\"));\n    assertMatches(searcher, unescaped, 4);\n    \n    // with escape: only matches foo*bar\n    WildcardQuery escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\*bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // without escape: matches foo??bar and fooCDbar\n    unescaped = new WildcardQuery(new Term(\"field\", \"foo??bar\"));\n    assertMatches(searcher, unescaped, 2);\n    \n    // with escape: matches foo??bar only\n    escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\?\\\\?bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // check escaping at end: lenient parse yields \"foo\\\"\n    WildcardQuery atEnd = new WildcardQuery(new Term(\"field\", \"foo\\\\\"));\n    assertMatches(searcher, atEnd, 1);\n    \n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testEscapes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testEscapes().mjava","sourceNew":"  /**\n   * Tests if wildcard escaping works\n   */\n  public void testEscapes() throws Exception {\n    Directory indexStore = getIndexStore(\"field\", \n        new String[]{\"foo*bar\", \"foo??bar\", \"fooCDbar\", \"fooSOMETHINGbar\", \"foo\\\\\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    // without escape: matches foo??bar, fooCDbar, foo*bar, and fooSOMETHINGbar\n    WildcardQuery unescaped = new WildcardQuery(new Term(\"field\", \"foo*bar\"));\n    assertMatches(searcher, unescaped, 4);\n    \n    // with escape: only matches foo*bar\n    WildcardQuery escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\*bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // without escape: matches foo??bar and fooCDbar\n    unescaped = new WildcardQuery(new Term(\"field\", \"foo??bar\"));\n    assertMatches(searcher, unescaped, 2);\n    \n    // with escape: matches foo??bar only\n    escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\?\\\\?bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // check escaping at end: lenient parse yields \"foo\\\"\n    WildcardQuery atEnd = new WildcardQuery(new Term(\"field\", \"foo\\\\\"));\n    assertMatches(searcher, atEnd, 1);\n    \n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if wildcard escaping works\n   */\n  public void testEscapes() throws Exception {\n    Directory indexStore = getIndexStore(\"field\", \n        new String[]{\"foo*bar\", \"foo??bar\", \"fooCDbar\", \"fooSOMETHINGbar\", \"foo\\\\\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    // without escape: matches foo??bar, fooCDbar, foo*bar, and fooSOMETHINGbar\n    WildcardQuery unescaped = new WildcardQuery(new Term(\"field\", \"foo*bar\"));\n    assertMatches(searcher, unescaped, 4);\n    \n    // with escape: only matches foo*bar\n    WildcardQuery escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\*bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // without escape: matches foo??bar and fooCDbar\n    unescaped = new WildcardQuery(new Term(\"field\", \"foo??bar\"));\n    assertMatches(searcher, unescaped, 2);\n    \n    // with escape: matches foo??bar only\n    escaped = new WildcardQuery(new Term(\"field\", \"foo\\\\?\\\\?bar\"));\n    assertMatches(searcher, escaped, 1);\n    \n    // check escaping at end: lenient parse yields \"foo\\\"\n    WildcardQuery atEnd = new WildcardQuery(new Term(\"field\", \"foo\\\\\"));\n    assertMatches(searcher, atEnd, 1);\n    \n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}