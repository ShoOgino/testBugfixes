{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","sourceNew":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   *\n   * @throws Exception\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase()).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString())));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   *\n   * @throws Exception\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase()).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString())));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68f4ad0129ad3f60268f3df42c238366082da936","date":1341666620,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","sourceNew":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   *\n   * @throws Exception\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase(Locale.ROOT)).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString())));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   *\n   * @throws Exception\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase()).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString())));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","sourceNew":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   *\n   * @throws Exception\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase(Locale.ROOT)).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString())));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   *\n   * @throws Exception\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase()).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString())));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","sourceNew":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   *\n   * @throws Exception\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase(Locale.ROOT)).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString())));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   *\n   * @throws Exception\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase()).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString())));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","sourceNew":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   *\n   * @throws Exception\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase(Locale.ROOT)).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString())));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   *\n   * @throws Exception\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase()).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString())));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","sourceNew":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase(Locale.ROOT)).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString())));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   *\n   * @throws Exception\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase(Locale.ROOT)).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString())));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","sourceNew":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase(Locale.ROOT)).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, standardTokenizer(buffer)));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, standardTokenizer(buffer)), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(TEST_VERSION_CURRENT, standardTokenizer(buffer));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, standardTokenizer(buffer)), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, standardTokenizer(buffer)));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase(Locale.ROOT)).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString())));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, new StandardTokenizer(TEST_VERSION_CURRENT, new StringReader(buffer.toString()))));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","sourceNew":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase(Locale.ROOT)).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(standardTokenizer(buffer)));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(standardTokenizer(buffer)), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(standardTokenizer(buffer));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(standardTokenizer(buffer)), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter( standardTokenizer(buffer)));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase(Locale.ROOT)).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, standardTokenizer(buffer)));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, standardTokenizer(buffer)), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(TEST_VERSION_CURRENT, standardTokenizer(buffer));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, standardTokenizer(buffer)), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, standardTokenizer(buffer)));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","sourceNew":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase(Locale.ROOT)).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, standardTokenizer(buffer)));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, standardTokenizer(buffer)), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(TEST_VERSION_CURRENT, standardTokenizer(buffer));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, standardTokenizer(buffer)), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, standardTokenizer(buffer)));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase(Locale.ROOT)).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(standardTokenizer(buffer)));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(standardTokenizer(buffer)), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(standardTokenizer(buffer));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(standardTokenizer(buffer)), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter( standardTokenizer(buffer)));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","sourceNew":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase(Locale.ROOT)).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(standardTokenizer(buffer)));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(standardTokenizer(buffer)), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(standardTokenizer(buffer));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(standardTokenizer(buffer)), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter( standardTokenizer(buffer)));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase(Locale.ROOT)).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, standardTokenizer(buffer)));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, standardTokenizer(buffer)), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(TEST_VERSION_CURRENT, standardTokenizer(buffer));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, standardTokenizer(buffer)), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter(TEST_VERSION_CURRENT, standardTokenizer(buffer)));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3eac7b217fb57548b6fc21f0117e74698afde766","date":1452862547,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","sourceNew":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   */\n  @SuppressWarnings(\"resource\")\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase(Locale.ROOT)).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(standardTokenizer(buffer)));\n      TokenStream sink = new ModuloTokenFilter(teeStream.newSinkTokenStream(), 100);\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(standardTokenizer(buffer)), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(standardTokenizer(buffer));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(standardTokenizer(buffer)), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter( standardTokenizer(buffer)));\n          sink = new ModuloTokenFilter(teeStream.newSinkTokenStream(), modCounts[j]);\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase(Locale.ROOT)).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(standardTokenizer(buffer)));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(standardTokenizer(buffer)), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(standardTokenizer(buffer));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(standardTokenizer(buffer)), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter( standardTokenizer(buffer)));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a7bf5d44fd9c84c577166b93b23c9774b063d46","date":1530097523,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","sourceNew":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   */\n  @SuppressWarnings(\"resource\")\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase(Locale.ROOT)).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(standardTokenizer(buffer));\n      TokenStream sink = new ModuloTokenFilter(teeStream.newSinkTokenStream(), 100);\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(standardTokenizer(buffer), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = standardTokenizer(buffer);\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(standardTokenizer(buffer), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(standardTokenizer(buffer));\n          sink = new ModuloTokenFilter(teeStream.newSinkTokenStream(), modCounts[j]);\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   */\n  @SuppressWarnings(\"resource\")\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase(Locale.ROOT)).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(standardTokenizer(buffer)));\n      TokenStream sink = new ModuloTokenFilter(teeStream.newSinkTokenStream(), 100);\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(standardTokenizer(buffer)), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(standardTokenizer(buffer));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(standardTokenizer(buffer)), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter( standardTokenizer(buffer)));\n          sink = new ModuloTokenFilter(teeStream.newSinkTokenStream(), modCounts[j]);\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","sourceNew":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   */\n  @SuppressWarnings(\"resource\")\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase(Locale.ROOT)).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(standardTokenizer(buffer));\n      TokenStream sink = new ModuloTokenFilter(teeStream.newSinkTokenStream(), 100);\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(standardTokenizer(buffer), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = standardTokenizer(buffer);\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(standardTokenizer(buffer), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(standardTokenizer(buffer));\n          sink = new ModuloTokenFilter(teeStream.newSinkTokenStream(), modCounts[j]);\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   */\n  @SuppressWarnings(\"resource\")\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase(Locale.ROOT)).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(standardTokenizer(buffer)));\n      TokenStream sink = new ModuloTokenFilter(teeStream.newSinkTokenStream(), 100);\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(standardTokenizer(buffer)), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(standardTokenizer(buffer));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(standardTokenizer(buffer)), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter( standardTokenizer(buffer)));\n          sink = new ModuloTokenFilter(teeStream.newSinkTokenStream(), modCounts[j]);\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#performance().mjava","sourceNew":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   */\n  @SuppressWarnings(\"resource\")\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase(Locale.ROOT)).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(standardTokenizer(buffer));\n      TokenStream sink = new ModuloTokenFilter(teeStream.newSinkTokenStream(), 100);\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(standardTokenizer(buffer), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = standardTokenizer(buffer);\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(standardTokenizer(buffer), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(standardTokenizer(buffer));\n          sink = new ModuloTokenFilter(teeStream.newSinkTokenStream(), modCounts[j]);\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   */\n  @SuppressWarnings(\"resource\")\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase(Locale.ROOT)).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(standardTokenizer(buffer)));\n      TokenStream sink = new ModuloTokenFilter(teeStream.newSinkTokenStream(), 100);\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(standardTokenizer(buffer)), 100);\n      CharTermAttribute tfTok = stream.addAttribute(CharTermAttribute.class);\n      CharTermAttribute sinkTok = sink.addAttribute(CharTermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(standardTokenizer(buffer));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(standardTokenizer(buffer)), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter( standardTokenizer(buffer)));\n          sink = new ModuloTokenFilter(teeStream.newSinkTokenStream(), modCounts[j]);\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["2acf500f78aa12b92e371fd89c719291986b6b90"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"68f4ad0129ad3f60268f3df42c238366082da936":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","68f4ad0129ad3f60268f3df42c238366082da936"],"3eac7b217fb57548b6fc21f0117e74698afde766":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["3eac7b217fb57548b6fc21f0117e74698afde766","8a7bf5d44fd9c84c577166b93b23c9774b063d46"],"8a7bf5d44fd9c84c577166b93b23c9774b063d46":["3eac7b217fb57548b6fc21f0117e74698afde766"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a7bf5d44fd9c84c577166b93b23c9774b063d46"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["3eac7b217fb57548b6fc21f0117e74698afde766","8a7bf5d44fd9c84c577166b93b23c9774b063d46"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"68f4ad0129ad3f60268f3df42c238366082da936":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"3eac7b217fb57548b6fc21f0117e74698afde766":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","8a7bf5d44fd9c84c577166b93b23c9774b063d46","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["68f4ad0129ad3f60268f3df42c238366082da936","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"8a7bf5d44fd9c84c577166b93b23c9774b063d46":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"379db3ad24c4f0214f30a122265a6d6be003a99d":["3eac7b217fb57548b6fc21f0117e74698afde766"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["46d8ada1fff8d18cb197c38c7983225162599948","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}