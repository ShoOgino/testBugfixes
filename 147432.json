{"path":"solr/src/test/org/apache/solr/SolrJUnitResultFormatter#endTestSuite(JUnitTest).mjava","commits":[{"id":"74ed9eb409fb21010eb20e5b798fc1deba3c0dae","date":1269324125,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/SolrJUnitResultFormatter#endTestSuite(JUnitTest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    sb.append(\"Tests run: \");\n    sb.append(suite.runCount());\n    sb.append(\", Failures: \");\n    sb.append(suite.failureCount());\n    sb.append(\", Errors: \");\n    sb.append(suite.errorCount());\n    sb.append(\", Time elapsed: \");\n    sb.append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    sb.append(\" sec\");\n    sb.append(StringUtils.LINE_SEP);\n    sb.append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      sb.append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (systemError != null && systemError.length() > 0) {\n      sb.append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        out.write(sb.toString().getBytes());\n        out.flush();\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ef42f5d49d3a54e82653530696f6fff0eb81b5b","date":1269640557,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","pathOld":"solr/src/test/org/apache/solr/SolrJUnitResultFormatter#endTestSuite(JUnitTest).mjava","sourceNew":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    sb.append(\"Tests run: \");\n    sb.append(suite.runCount());\n    sb.append(\", Failures: \");\n    sb.append(suite.failureCount());\n    sb.append(\", Errors: \");\n    sb.append(suite.errorCount());\n    sb.append(\", Time elapsed: \");\n    sb.append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    sb.append(\" sec\");\n    sb.append(StringUtils.LINE_SEP);\n    sb.append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      sb.append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (systemError != null && systemError.length() > 0) {\n      sb.append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          out.write(sb.toString().getBytes());\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    sb.append(\"Tests run: \");\n    sb.append(suite.runCount());\n    sb.append(\", Failures: \");\n    sb.append(suite.failureCount());\n    sb.append(\", Errors: \");\n    sb.append(suite.errorCount());\n    sb.append(\", Time elapsed: \");\n    sb.append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    sb.append(\" sec\");\n    sb.append(StringUtils.LINE_SEP);\n    sb.append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      sb.append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (systemError != null && systemError.length() > 0) {\n      sb.append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        out.write(sb.toString().getBytes());\n        out.flush();\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ef42f5d49d3a54e82653530696f6fff0eb81b5b","date":1269640557,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter#endTestSuite(JUnitTest).mjava","pathOld":"solr/src/test/org/apache/solr/SolrJUnitResultFormatter#endTestSuite(JUnitTest).mjava","sourceNew":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    sb.append(\"Tests run: \");\n    sb.append(suite.runCount());\n    sb.append(\", Failures: \");\n    sb.append(suite.failureCount());\n    sb.append(\", Errors: \");\n    sb.append(suite.errorCount());\n    sb.append(\", Time elapsed: \");\n    sb.append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    sb.append(\" sec\");\n    sb.append(StringUtils.LINE_SEP);\n    sb.append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      sb.append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (systemError != null && systemError.length() > 0) {\n      sb.append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        lock.obtain(5000);\n        try {\n          out.write(sb.toString().getBytes());\n          out.flush();\n        } finally {\n          try {\n            lock.release();\n          } catch(LockReleaseFailedException e) {\n            // well lets pretend its released anyway\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * The whole testsuite ended.\n   * @param suite the test suite\n   */\n  public synchronized void endTestSuite(JUnitTest suite) {\n    sb.append(\"Tests run: \");\n    sb.append(suite.runCount());\n    sb.append(\", Failures: \");\n    sb.append(suite.failureCount());\n    sb.append(\", Errors: \");\n    sb.append(suite.errorCount());\n    sb.append(\", Time elapsed: \");\n    sb.append(numberFormat.format(suite.getRunTime() / ONE_SECOND));\n    sb.append(\" sec\");\n    sb.append(StringUtils.LINE_SEP);\n    sb.append(StringUtils.LINE_SEP);\n    \n    // append the err and output streams to the log\n    if (systemOutput != null && systemOutput.length() > 0) {\n      sb.append(\"------------- Standard Output ---------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemOutput)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (systemError != null && systemError.length() > 0) {\n      sb.append(\"------------- Standard Error -----------------\")\n      .append(StringUtils.LINE_SEP)\n      .append(systemError)\n      .append(\"------------- ---------------- ---------------\")\n      .append(StringUtils.LINE_SEP);\n    }\n    \n    if (out != null) {\n      try {\n        out.write(sb.toString().getBytes());\n        out.flush();\n      } catch (IOException e) {\n        throw new RuntimeException(\"unable to write results\", e);\n      } finally {\n        if (out != System.out && out != System.err) {\n          FileUtils.close(out);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74ed9eb409fb21010eb20e5b798fc1deba3c0dae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7ef42f5d49d3a54e82653530696f6fff0eb81b5b":["74ed9eb409fb21010eb20e5b798fc1deba3c0dae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ef42f5d49d3a54e82653530696f6fff0eb81b5b"]},"commit2Childs":{"74ed9eb409fb21010eb20e5b798fc1deba3c0dae":["7ef42f5d49d3a54e82653530696f6fff0eb81b5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74ed9eb409fb21010eb20e5b798fc1deba3c0dae"],"7ef42f5d49d3a54e82653530696f6fff0eb81b5b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}