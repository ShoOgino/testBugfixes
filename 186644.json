{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(byte[],ShapeField.DecodedTriangle,QueryRelation).mjava","commits":[{"id":"5ed90f8ba7e7be13d155f954862178b23a324125","date":1568020603,"type":1,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(byte[],ShapeField.DecodedTriangle,QueryRelation).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(byte[],int[],QueryRelation).mjava","sourceNew":"  /** returns true if the query matches the encoded triangle */\n  @Override\n  protected boolean queryMatches(byte[] t, ShapeField.DecodedTriangle scratchTriangle, QueryRelation queryRelation) {\n    // decode indexed triangle\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    int aY = scratchTriangle.aY;\n    int aX = scratchTriangle.aX;\n    int bY = scratchTriangle.bY;\n    int bX = scratchTriangle.bX;\n    int cY = scratchTriangle.cY;\n    int cX = scratchTriangle.cX;\n\n    if (queryRelation == QueryRelation.WITHIN) {\n      return rectangle2D.containsTriangle(aX, aY, bX, bY, cX, cY);\n    }\n    return rectangle2D.intersectsTriangle(aX, aY, bX, bY, cX, cY);\n  }\n\n","sourceOld":"  /** returns true if the query matches the encoded triangle */\n  @Override\n  protected boolean queryMatches(byte[] t, int[] scratchTriangle, QueryRelation queryRelation) {\n    // decode indexed triangle\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    int aY = scratchTriangle[0];\n    int aX = scratchTriangle[1];\n    int bY = scratchTriangle[2];\n    int bX = scratchTriangle[3];\n    int cY = scratchTriangle[4];\n    int cX = scratchTriangle[5];\n\n    if (queryRelation == QueryRelation.WITHIN) {\n      return rectangle2D.containsTriangle(aX, aY, bX, bY, cX, cY);\n    }\n    return rectangle2D.intersectsTriangle(aX, aY, bX, bY, cX, cY);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"637ced5887480f9803707c2fc68df68ce0c0bf13","date":1568120036,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(byte[],ShapeField.DecodedTriangle,QueryRelation).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(byte[],ShapeField.DecodedTriangle,QueryRelation).mjava","sourceNew":"  /** returns true if the query matches the encoded triangle */\n  @Override\n  protected boolean queryMatches(byte[] t, ShapeField.DecodedTriangle scratchTriangle, QueryRelation queryRelation) {\n    // decode indexed triangle\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    int aY = scratchTriangle.aY;\n    int aX = scratchTriangle.aX;\n    int bY = scratchTriangle.bY;\n    int bX = scratchTriangle.bX;\n    int cY = scratchTriangle.cY;\n    int cX = scratchTriangle.cX;\n\n    if (queryRelation == QueryRelation.WITHIN) {\n      return rectangle2D.containsTriangle(aX, aY, bX, bY, cX, cY);\n    }\n    switch (queryRelation) {\n      case INTERSECTS: return rectangle2D.intersectsTriangle(aX, aY, bX, bY, cX, cY);\n      case WITHIN: return rectangle2D.containsTriangle(aX, aY, bX, bY, cX, cY);\n      case DISJOINT: return rectangle2D.intersectsTriangle(aX, aY, bX, bY, cX, cY) == false;\n      default: throw new IllegalArgumentException(\"Unsupported query type :[\" + queryRelation + \"]\");\n    }\n  }\n\n","sourceOld":"  /** returns true if the query matches the encoded triangle */\n  @Override\n  protected boolean queryMatches(byte[] t, ShapeField.DecodedTriangle scratchTriangle, QueryRelation queryRelation) {\n    // decode indexed triangle\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    int aY = scratchTriangle.aY;\n    int aX = scratchTriangle.aX;\n    int bY = scratchTriangle.bY;\n    int bX = scratchTriangle.bX;\n    int cY = scratchTriangle.cY;\n    int cX = scratchTriangle.cX;\n\n    if (queryRelation == QueryRelation.WITHIN) {\n      return rectangle2D.containsTriangle(aX, aY, bX, bY, cX, cY);\n    }\n    return rectangle2D.intersectsTriangle(aX, aY, bX, bY, cX, cY);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"186659ff7afdecf4bb48f9c0d7fb5e58ee4e4510","date":1568269559,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(byte[],ShapeField.DecodedTriangle,QueryRelation).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(byte[],ShapeField.DecodedTriangle,QueryRelation).mjava","sourceNew":"  /** returns true if the query matches the encoded triangle */\n  @Override\n  protected boolean queryMatches(byte[] t, ShapeField.DecodedTriangle scratchTriangle, QueryRelation queryRelation) {\n    // decode indexed triangle\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    int aY = scratchTriangle.aY;\n    int aX = scratchTriangle.aX;\n    int bY = scratchTriangle.bY;\n    int bX = scratchTriangle.bX;\n    int cY = scratchTriangle.cY;\n    int cX = scratchTriangle.cX;\n\n    switch (queryRelation) {\n      case INTERSECTS: return rectangle2D.intersectsTriangle(aX, aY, bX, bY, cX, cY);\n      case WITHIN: return rectangle2D.containsTriangle(aX, aY, bX, bY, cX, cY);\n      case DISJOINT: return rectangle2D.intersectsTriangle(aX, aY, bX, bY, cX, cY) == false;\n      default: throw new IllegalArgumentException(\"Unsupported query type :[\" + queryRelation + \"]\");\n    }\n  }\n\n","sourceOld":"  /** returns true if the query matches the encoded triangle */\n  @Override\n  protected boolean queryMatches(byte[] t, ShapeField.DecodedTriangle scratchTriangle, QueryRelation queryRelation) {\n    // decode indexed triangle\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    int aY = scratchTriangle.aY;\n    int aX = scratchTriangle.aX;\n    int bY = scratchTriangle.bY;\n    int bX = scratchTriangle.bX;\n    int cY = scratchTriangle.cY;\n    int cX = scratchTriangle.cX;\n\n    if (queryRelation == QueryRelation.WITHIN) {\n      return rectangle2D.containsTriangle(aX, aY, bX, bY, cX, cY);\n    }\n    switch (queryRelation) {\n      case INTERSECTS: return rectangle2D.intersectsTriangle(aX, aY, bX, bY, cX, cY);\n      case WITHIN: return rectangle2D.containsTriangle(aX, aY, bX, bY, cX, cY);\n      case DISJOINT: return rectangle2D.intersectsTriangle(aX, aY, bX, bY, cX, cY) == false;\n      default: throw new IllegalArgumentException(\"Unsupported query type :[\" + queryRelation + \"]\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(byte[],ShapeField.DecodedTriangle,QueryRelation).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#queryMatches(byte[],ShapeField.DecodedTriangle,QueryRelation).mjava","sourceNew":"  /** returns true if the query matches the encoded triangle */\n  @Override\n  protected boolean queryMatches(byte[] t, ShapeField.DecodedTriangle scratchTriangle, QueryRelation queryRelation) {\n    // decode indexed triangle\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    int aY = scratchTriangle.aY;\n    int aX = scratchTriangle.aX;\n    int bY = scratchTriangle.bY;\n    int bX = scratchTriangle.bX;\n    int cY = scratchTriangle.cY;\n    int cX = scratchTriangle.cX;\n\n    switch (queryRelation) {\n      case INTERSECTS: return rectangle2D.intersectsTriangle(aX, aY, bX, bY, cX, cY);\n      case WITHIN: return rectangle2D.containsTriangle(aX, aY, bX, bY, cX, cY);\n      case DISJOINT: return rectangle2D.intersectsTriangle(aX, aY, bX, bY, cX, cY) == false;\n      default: throw new IllegalArgumentException(\"Unsupported query type :[\" + queryRelation + \"]\");\n    }\n  }\n\n","sourceOld":"  /** returns true if the query matches the encoded triangle */\n  @Override\n  protected boolean queryMatches(byte[] t, ShapeField.DecodedTriangle scratchTriangle, QueryRelation queryRelation) {\n    // decode indexed triangle\n    ShapeField.decodeTriangle(t, scratchTriangle);\n\n    int aY = scratchTriangle.aY;\n    int aX = scratchTriangle.aX;\n    int bY = scratchTriangle.bY;\n    int bX = scratchTriangle.bX;\n    int cY = scratchTriangle.cY;\n    int cX = scratchTriangle.cX;\n\n    switch (queryRelation) {\n      case INTERSECTS: return rectangle2D.intersectsTriangle(aX, aY, bX, bY, cX, cY);\n      case WITHIN: return rectangle2D.containsTriangle(aX, aY, bX, bY, cX, cY);\n      case DISJOINT: return rectangle2D.intersectsTriangle(aX, aY, bX, bY, cX, cY) == false;\n      default: throw new IllegalArgumentException(\"Unsupported query type :[\" + queryRelation + \"]\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["186659ff7afdecf4bb48f9c0d7fb5e58ee4e4510"],"186659ff7afdecf4bb48f9c0d7fb5e58ee4e4510":["637ced5887480f9803707c2fc68df68ce0c0bf13"],"5ed90f8ba7e7be13d155f954862178b23a324125":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"637ced5887480f9803707c2fc68df68ce0c0bf13":["5ed90f8ba7e7be13d155f954862178b23a324125"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ed90f8ba7e7be13d155f954862178b23a324125"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"186659ff7afdecf4bb48f9c0d7fb5e58ee4e4510":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"5ed90f8ba7e7be13d155f954862178b23a324125":["637ced5887480f9803707c2fc68df68ce0c0bf13"],"637ced5887480f9803707c2fc68df68ce0c0bf13":["186659ff7afdecf4bb48f9c0d7fb5e58ee4e4510"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}